(window.webpackJsonp=window.webpackJsonp||[]).push([[8],[function(e,t,n){"use strict";e.exports=n(485)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(207);function o(e,t,n){return(t=Object(r.a)(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";function r(){return(r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(1);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){Object(r.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(194);var o=n(131),i=n(195);function a(e,t){return Object(r.a)(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,t)||Object(o.a)(e,t)||Object(i.a)()}},function(e,t,n){var r;
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)){if(r.length){var a=o.apply(null,r);a&&e.push(a)}}else if("object"===i){if(r.toString!==Object.prototype.toString&&!r.toString.toString().includes("[native code]")){e.push(r.toString());continue}for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";var r=n(17),o=n(83).f,i=n(104),a=n(46),c=n(220),u=n(279),s=n(145);e.exports=function(e,t){var n,l,f,d,p,h=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(d=t[l],f=e.dontCallGetSet?(p=o(n,l))&&p.value:n[l],!s(m?l:h+(v?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(n,l,d,e)}}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(154);var o=n(199),i=n(131);function a(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||Object(o.a)(e)||Object(i.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function o(e){return Math.min(1,Math.max(0,e))}function i(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function a(e){return e<=1?"".concat(100*Number(e),"%"):e}function c(e){return 1===e.length?"0"+e:String(e)}n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"d",(function(){return a})),n.d(t,"e",(function(){return c}))},function(e,t,n){"use strict";var r=n(166),o=Function.prototype,i=o.call,a=r&&o.bind.bind(i,i);e.exports=r?a:function(e){return function(){return i.apply(e,arguments)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"f",(function(){return u})),n.d(t,"d",(function(){return s})),n.d(t,"c",(function(){return l})),n.d(t,"b",(function(){return f})),n.d(t,"e",(function(){return d}));var r=n(2),o=n(53),i=n(48),a=n(0),c=a.createContext({labelAlign:"right",vertical:!1,itemRef:function(){}}),u=a.createContext(null),s=function(e){var t=Object(i.a)(e,["prefixCls"]);return a.createElement(o.FormProvider,Object(r.a)({},t))},l=a.createContext({prefixCls:""}),f=a.createContext({}),d=function(e){var t=e.children,n=e.status,o=e.override,i=Object(a.useContext)(f),c=Object(a.useMemo)((function(){var e=Object(r.a)({},i);return o&&delete e.isFormItemInput,n&&(delete e.status,delete e.hasFeedback,delete e.feedbackIcon),e}),[n,o,i]);return a.createElement(f.Provider,{value:c},t)}},function(e,t,n){"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";var r=n(3),o=n(4),i=n(1),a=n(22),c=n(0),u=n.n(c),s=n(5),l=n.n(s),f=n(132),d=n(7),p=n(152),h=n(35),m=n(128),v=n(320),g=n.n(v);function b(e){return"object"===Object(d.a)(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===Object(d.a)(e.icon)||"function"==typeof e.icon)}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r=e[n];switch(n){case"class":t.className=r,delete t.class;break;default:delete t[n],t[g()(n)]=r}return t}),{})}function w(e){return Object(p.generate)(e)[0]}function O(e){return e?Array.isArray(e)?e:[e]:[]}var x="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",E=["icon","className","onClick","style","primaryColor","secondaryColor"],j={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1};var k=function(e){var t,n,o=e.icon,i=e.className,s=e.onClick,l=e.style,d=e.primaryColor,p=e.secondaryColor,v=Object(a.a)(e,E),g=j;if(d&&(g={primaryColor:d,secondaryColor:p||w(d)}),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:x,t=Object(c.useContext)(f.a),n=t.csp;Object(c.useEffect)((function(){Object(m.b)(e,"@ant-design-icons",{prepend:!0,csp:n})}),[])}(),t=b(o),n="icon should be icon definiton, but got ".concat(o),Object(h.a)(t,"[@ant-design/icons] ".concat(n)),!b(o))return null;var O=o;return O&&"function"==typeof O.icon&&(O=Object(r.a)(Object(r.a)({},O),{},{icon:O.icon(g.primaryColor,g.secondaryColor)})),function e(t,n,o){return o?u.a.createElement(t.tag,Object(r.a)(Object(r.a)({key:n},y(t.attrs)),o),(t.children||[]).map((function(r,o){return e(r,"".concat(n,"-").concat(t.tag,"-").concat(o))}))):u.a.createElement(t.tag,Object(r.a)({key:n},y(t.attrs)),(t.children||[]).map((function(r,o){return e(r,"".concat(n,"-").concat(t.tag,"-").concat(o))})))}(O.icon,"svg-".concat(O.name),Object(r.a)({className:i,onClick:s,style:l,"data-icon":O.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},v))};k.displayName="IconReact",k.getTwoToneColors=function(){return Object(r.a)({},j)},k.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;j.primaryColor=t,j.secondaryColor=n||w(t),j.calculated=!!n};var C=k;function S(e){var t=O(e),n=Object(o.a)(t,2),r=n[0],i=n[1];return C.setTwoToneColors({primaryColor:r,secondaryColor:i})}var _=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];S("#1890ff");var M=c.forwardRef((function(e,t){var n,u=e.className,s=e.icon,d=e.spin,p=e.rotate,h=e.tabIndex,m=e.onClick,v=e.twoToneColor,g=Object(a.a)(e,_),b=c.useContext(f.a),y=b.prefixCls,w=void 0===y?"anticon":y,x=b.rootClassName,E=l()(x,w,(n={},Object(i.a)(n,"".concat(w,"-").concat(s.name),!!s.name),Object(i.a)(n,"".concat(w,"-spin"),!!d||"loading"===s.name),n),u),j=h;void 0===j&&m&&(j=-1);var k=p?{msTransform:"rotate(".concat(p,"deg)"),transform:"rotate(".concat(p,"deg)")}:void 0,S=O(v),M=Object(o.a)(S,2),T=M[0],P=M[1];return c.createElement("span",Object(r.a)(Object(r.a)({role:"img","aria-label":s.name},g),{},{ref:t,tabIndex:j,onClick:m,className:E}),c.createElement(C,{icon:s,primaryColor:T,secondaryColor:P,style:k}))}));M.displayName="AntdIcon",M.getTwoToneColor=function(){var e=C.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},M.setTwoToneColor=S;t.a=M},function(e,t,n){"use strict";var r=n(166),o=Function.prototype.call;e.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},,function(e,t,n){"use strict";(function(t){var n=function(e){return e&&e.Math===Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||function(){return this}()||this||Function("return this")()}).call(this,n(102))},function(e,t,n){"use strict";var r=n(273),o=r.all;e.exports=r.IS_HTMLDDA?function(e){return"function"==typeof e||e===o}:function(e){return"function"==typeof e}},function(e,t,n){"use strict";var r=n(17),o=n(103),i=n(28),a=n(169),c=n(121),u=n(274),s=r.Symbol,l=o("wks"),f=u?s.for||s:s&&s.withoutSetter||a;e.exports=function(e){return i(l,e)||(l[e]=c&&i(s,e)?s[e]:f("Symbol."+e)),l[e]}},function(e,t,n){"use strict";n.d(t,"j",(function(){return o})),n.d(t,"h",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"i",(function(){return u})),n.d(t,"d",(function(){return s})),n.d(t,"g",(function(){return l})),n.d(t,"l",(function(){return f})),n.d(t,"k",(function(){return d})),n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h})),n.d(t,"f",(function(){return m})),n.d(t,"e",(function(){return v}));var r=n(10);function o(e,t,n){return{r:255*Object(r.a)(e,255),g:255*Object(r.a)(t,255),b:255*Object(r.a)(n,255)}}function i(e,t,n){e=Object(r.a)(e,255),t=Object(r.a)(t,255),n=Object(r.a)(n,255);var o=Math.max(e,t,n),i=Math.min(e,t,n),a=0,c=0,u=(o+i)/2;if(o===i)c=0,a=0;else{var s=o-i;switch(c=u>.5?s/(2-o-i):s/(o+i),o){case e:a=(t-n)/s+(t<n?6:0);break;case t:a=(n-e)/s+2;break;case n:a=(e-t)/s+4}a/=6}return{h:a,s:c,l:u}}function a(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function c(e,t,n){var o,i,c;if(e=Object(r.a)(e,360),t=Object(r.a)(t,100),n=Object(r.a)(n,100),0===t)i=n,c=n,o=n;else{var u=n<.5?n*(1+t):n+t-n*t,s=2*n-u;o=a(s,u,e+1/3),i=a(s,u,e),c=a(s,u,e-1/3)}return{r:255*o,g:255*i,b:255*c}}function u(e,t,n){e=Object(r.a)(e,255),t=Object(r.a)(t,255),n=Object(r.a)(n,255);var o=Math.max(e,t,n),i=Math.min(e,t,n),a=0,c=o,u=o-i,s=0===o?0:u/o;if(o===i)a=0;else{switch(o){case e:a=(t-n)/u+(t<n?6:0);break;case t:a=(n-e)/u+2;break;case n:a=(e-t)/u+4}a/=6}return{h:a,s:s,v:c}}function s(e,t,n){e=6*Object(r.a)(e,360),t=Object(r.a)(t,100),n=Object(r.a)(n,100);var o=Math.floor(e),i=e-o,a=n*(1-t),c=n*(1-i*t),u=n*(1-(1-i)*t),s=o%6;return{r:255*[n,c,a,a,u,n][s],g:255*[u,n,n,c,a,a][s],b:255*[a,a,u,n,n,c][s]}}function l(e,t,n,o){var i=[Object(r.e)(Math.round(e).toString(16)),Object(r.e)(Math.round(t).toString(16)),Object(r.e)(Math.round(n).toString(16))];return o&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function f(e,t,n,o,i){var a=[Object(r.e)(Math.round(e).toString(16)),Object(r.e)(Math.round(t).toString(16)),Object(r.e)(Math.round(n).toString(16)),Object(r.e)(p(o))];return i&&a[0].startsWith(a[0].charAt(1))&&a[1].startsWith(a[1].charAt(1))&&a[2].startsWith(a[2].charAt(1))&&a[3].startsWith(a[3].charAt(1))?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0):a.join("")}function d(e,t,n,o){return[Object(r.e)(p(o)),Object(r.e)(Math.round(e).toString(16)),Object(r.e)(Math.round(t).toString(16)),Object(r.e)(Math.round(n).toString(16))].join("")}function p(e){return Math.round(255*parseFloat(e)).toString(16)}function h(e){return m(e)/255}function m(e){return parseInt(e,16)}function v(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return oe}));var r=n(2),o=n(132),i=n(164),a=n(0),c=n(62),u=n(200),s=n(243),l=n(156),f=function(e){var t=e.locale,n=void 0===t?{}:t,o=e.children;e._ANT_MARK__;a.useEffect((function(){return Object(s.a)(n&&n.Modal),function(){Object(s.a)()}}),[n]);var i=a.useMemo((function(){return Object(r.a)(Object(r.a)({},n),{exist:!0})}),[n]);return a.createElement(l.a.Provider,{value:i},o)},d=n(119),p=n(85),h=n(347),m=(n(34),n(1)),v=n(265),g=n(267),b=n(165),y=n(268),w=n(266),O=n(5),x=n.n(O),E=n(192),j=n(4),k=n(133),C=n(70);var S,_,M,T={},P=4.5,F=24,N=24,A="",R="topRight",D=!1;function L(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:F,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:N;switch(e){case"top":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:n,bottom:"auto"};break;case"topLeft":t={left:0,top:n,bottom:"auto"};break;case"topRight":t={right:0,top:n,bottom:"auto"};break;case"bottom":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:"auto",bottom:r};break;case"bottomLeft":t={left:0,top:"auto",bottom:r};break;default:t={right:0,top:"auto",bottom:r}}return t}function I(e,t){var n=e.placement,r=void 0===n?R:n,o=e.top,i=e.bottom,a=e.getContainer,c=void 0===a?S:a,u=e.prefixCls,s=oe(),l=s.getPrefixCls,f=s.getIconPrefixCls,d=l("notification",u||A),p=f(),h="".concat(d,"-").concat(r),v=T[h];if(v)Promise.resolve(v).then((function(e){t({prefixCls:"".concat(d,"-notice"),iconPrefixCls:p,instance:e})}));else{var g=x()("".concat(d,"-").concat(r),Object(m.a)({},"".concat(d,"-rtl"),!0===D));T[h]=new Promise((function(e){E.default.newInstance({prefixCls:d,className:g,style:L(r,o,i),getContainer:c,maxCount:M},(function(n){e(n),t({prefixCls:"".concat(d,"-notice"),iconPrefixCls:p,instance:n})}))}))}}var z={success:v.a,info:w.a,error:g.a,warning:y.a};function V(e,t,n){var r=e.duration,o=e.icon,i=e.type,c=e.description,u=e.message,s=e.btn,l=e.onClose,f=e.onClick,d=e.key,p=e.style,h=e.className,v=e.closeIcon,g=void 0===v?_:v,y=e.props,w=void 0===r?P:r,O=null;o?O=a.createElement("span",{className:"".concat(t,"-icon")},e.icon):i&&(O=a.createElement(z[i]||null,{className:"".concat(t,"-icon ").concat(t,"-icon-").concat(i)}));var E=void 0===g?a.createElement("span",{className:"".concat(t,"-close-x")},a.createElement(b.a,{className:"".concat(t,"-close-icon")})):g,j=!c&&O?a.createElement("span",{className:"".concat(t,"-message-single-line-auto-margin")}):null;return{content:a.createElement(ce,{iconPrefixCls:n},a.createElement("div",{className:O?"".concat(t,"-with-icon"):"",role:"alert"},O,a.createElement("div",{className:"".concat(t,"-message")},j,u),a.createElement("div",{className:"".concat(t,"-description")},c),s?a.createElement("span",{className:"".concat(t,"-btn")},s):null)),duration:w,closable:!0,closeIcon:E,onClose:l,onClick:f,key:d,style:p||{},className:x()(h,Object(m.a)({},"".concat(t,"-").concat(i),!!i)),props:y}}var H,W,B={open:function(e){I(e,(function(t){var n=t.prefixCls,r=t.iconPrefixCls;t.instance.notice(V(e,n,r))}))},close:function(e){Object.keys(T).forEach((function(t){return Promise.resolve(T[t]).then((function(t){t.removeNotice(e)}))}))},config:function(e){var t=e.duration,n=e.placement,r=e.bottom,o=e.top,i=e.getContainer,a=e.closeIcon,c=e.prefixCls;void 0!==c&&(A=c),void 0!==t&&(P=t),void 0!==n?R=n:e.rtl&&(R="topLeft"),void 0!==r&&(N=r),void 0!==o&&(F=o),void 0!==i&&(S=i),void 0!==a&&(_=a),void 0!==e.rtl&&(D=e.rtl),void 0!==e.maxCount&&(M=e.maxCount)},destroy:function(){Object.keys(T).forEach((function(e){Promise.resolve(T[e]).then((function(e){e.destroy()})),delete T[e]}))}};["success","info","warning","error"].forEach((function(e){B[e]=function(t){return B.open(Object(r.a)(Object(r.a)({},t),{type:e}))}})),B.warn=B.warning,B.useNotification=(H=I,W=V,function(){var e,t=null,n={add:function(e,n){null==t||t.component.add(e,n)}},o=Object(k.a)(n),i=Object(j.a)(o,2),c=i[0],u=i[1],s=a.useRef({});return s.current.open=function(n){var o=n.prefixCls,i=e("notification",o);H(Object(r.a)(Object(r.a)({},n),{prefixCls:i}),(function(e){var r=e.prefixCls,o=e.instance;t=o,c(W(n,r))}))},["success","info","warning","error"].forEach((function(e){s.current[e]=function(t){return s.current.open(Object(r.a)(Object(r.a)({},t),{type:e}))}})),[s.current,a.createElement(C.a,{key:"holder"},(function(t){return e=t.getPrefixCls,u}))]});var Y=B,U=n(152),$=n(563),q=n(42),G=n(128),K="-ant-".concat(Date.now(),"-").concat(Math.random());function Q(e,t){var n=function(e,t){var n={},r=function(e,t){var n=e.clone();return(n=(null==t?void 0:t(n))||n).toRgbString()},o=function(e,t){var o=new $.a(e),i=Object(U.generate)(o.toRgbString());n["".concat(t,"-color")]=r(o),n["".concat(t,"-color-disabled")]=i[1],n["".concat(t,"-color-hover")]=i[4],n["".concat(t,"-color-active")]=i[6],n["".concat(t,"-color-outline")]=o.clone().setAlpha(.2).toRgbString(),n["".concat(t,"-color-deprecated-bg")]=i[0],n["".concat(t,"-color-deprecated-border")]=i[2]};if(t.primaryColor){o(t.primaryColor,"primary");var i=new $.a(t.primaryColor),a=Object(U.generate)(i.toRgbString());a.forEach((function(e,t){n["primary-".concat(t+1)]=e})),n["primary-color-deprecated-l-35"]=r(i,(function(e){return e.lighten(35)})),n["primary-color-deprecated-l-20"]=r(i,(function(e){return e.lighten(20)})),n["primary-color-deprecated-t-20"]=r(i,(function(e){return e.tint(20)})),n["primary-color-deprecated-t-50"]=r(i,(function(e){return e.tint(50)})),n["primary-color-deprecated-f-12"]=r(i,(function(e){return e.setAlpha(.12*e.getAlpha())}));var c=new $.a(a[0]);n["primary-color-active-deprecated-f-30"]=r(c,(function(e){return e.setAlpha(.3*e.getAlpha())})),n["primary-color-active-deprecated-d-02"]=r(c,(function(e){return e.darken(2)}))}t.successColor&&o(t.successColor,"success"),t.warningColor&&o(t.warningColor,"warning"),t.errorColor&&o(t.errorColor,"error"),t.infoColor&&o(t.infoColor,"info");var u=Object.keys(n).map((function(t){return"--".concat(e,"-").concat(t,": ").concat(n[t],";")}));return"\n  :root {\n    ".concat(u.join("\n"),"\n  }\n  ").trim()}(e,t);Object(q.a)()&&Object(G.b)(n,"".concat(K,"-dynamic-theme"))}var X,Z,J=n(69),ee=n(52),te=["getTargetContainer","getPopupContainer","renderEmpty","pageHeader","input","pagination","form"];function ne(){return X||"ant"}function re(){return Z||"anticon"}var oe=function(){return{getPrefixCls:function(e,t){return t||(e?"".concat(ne(),"-").concat(e):ne())},getIconPrefixCls:re,getRootPrefixCls:function(e,t){return e||(X||(t&&t.includes("-")?t.replace(/^(.*)-[^-]*$/,"$1"):ne()))}}},ie=function(e){var t=e.children,n=e.csp,s=e.autoInsertSpaceInButton,l=e.form,d=e.locale,h=e.componentSize,m=e.direction,v=e.space,g=e.virtual,b=e.dropdownMatchSelectWidth,y=e.legacyLocale,w=e.parentContext,O=e.iconPrefixCls,x=e.componentDisabled,E=a.useCallback((function(t,n){var r=e.prefixCls;if(n)return n;var o=r||w.getPrefixCls("");return t?"".concat(o,"-").concat(t):o}),[w.getPrefixCls,e.prefixCls]),j=Object(r.a)(Object(r.a)({},w),{csp:n,autoInsertSpaceInButton:s,locale:d||y,direction:m,space:v,virtual:g,dropdownMatchSelectWidth:b,getPrefixCls:E});te.forEach((function(t){var n=e[t];n&&(j[t]=n)}));var k=Object(i.a)((function(){return j}),j,(function(e,t){var n=Object.keys(e),r=Object.keys(t);return n.length!==r.length||n.some((function(n){return e[n]!==t[n]}))})),S=a.useMemo((function(){return{prefixCls:O,csp:n}}),[O,n]),_=t,M=a.useMemo((function(){var e,t,n,r;return Object(c.b)((null===(e=p.a.Form)||void 0===e?void 0:e.defaultValidateMessages)||{},(null===(n=null===(t=k.locale)||void 0===t?void 0:t.Form)||void 0===n?void 0:n.defaultValidateMessages)||{},(null===(r=k.form)||void 0===r?void 0:r.validateMessages)||{},(null==l?void 0:l.validateMessages)||{})}),[k,null==l?void 0:l.validateMessages]);return Object.keys(M).length>0&&(_=a.createElement(u.a.Provider,{value:M},t)),d&&(_=a.createElement(f,{locale:d,_ANT_MARK__:"internalMark"},_)),(O||n)&&(_=a.createElement(o.a.Provider,{value:S},_)),h&&(_=a.createElement(ee.a,{size:h},_)),void 0!==x&&(_=a.createElement(J.a,{disabled:x},_)),a.createElement(C.b.Provider,{value:k},_)},ae=function(e){return a.useEffect((function(){e.direction&&(h.b.config({rtl:"rtl"===e.direction}),Y.config({rtl:"rtl"===e.direction}))}),[e.direction]),a.createElement(d.a,null,(function(t,n,o){return a.createElement(C.a,null,(function(t){return a.createElement(ie,Object(r.a)({parentContext:t,legacyLocale:o},e))}))}))};ae.ConfigContext=C.b,ae.SizeContext=ee.b,ae.config=function(e){var t=e.prefixCls,n=e.iconPrefixCls,r=e.theme;void 0!==t&&(X=t),void 0!==n&&(Z=n),r&&Q(ne(),r)};var ce=t.a=ae},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(86);function o(e,t){if(null==e)return{};var n,o,i=Object(r.a)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(207);function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,Object(r.a)(o.key),o)}}function i(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}},function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return c})),n.d(t,"d",(function(){return u})),n.d(t,"c",(function(){return s}));var r=n(7),o=n(189),i=n(164);function a(e,t){"function"==typeof e?e(t):"object"===Object(r.a)(e)&&e&&"current"in e&&(e.current=t)}function c(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.filter((function(e){return e}));return r.length<=1?r[0]:function(e){t.forEach((function(t){a(t,e)}))}}function u(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Object(i.a)((function(){return c.apply(void 0,t)}),t,(function(e,t){return e.length!==t.length||e.every((function(e,n){return e!==t[n]}))}))}function s(e){var t,n,r=Object(o.isMemo)(e)?e.type.type:e.type;return!!("function"!=typeof r||null!==(t=r.prototype)&&void 0!==t&&t.render)&&!!("function"!=typeof e||null!==(n=e.prototype)&&void 0!==n&&n.render)}},function(e,t,n){"use strict";var r=n(125),o=n(28),i=n(286),a=n(41).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});o(t,e)||a(t,e,{value:i.f(e)})}},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"MemoryRouter",(function(){return E})),n.d(t,"Prompt",(function(){return k})),n.d(t,"Redirect",(function(){return M})),n.d(t,"Route",(function(){return N})),n.d(t,"Router",(function(){return x})),n.d(t,"StaticRouter",(function(){return z})),n.d(t,"Switch",(function(){return V})),n.d(t,"__HistoryContext",(function(){return w})),n.d(t,"__RouterContext",(function(){return O})),n.d(t,"generatePath",(function(){return _})),n.d(t,"matchPath",(function(){return F})),n.d(t,"useHistory",(function(){return B})),n.d(t,"useLocation",(function(){return Y})),n.d(t,"useParams",(function(){return U})),n.d(t,"useRouteMatch",(function(){return $})),n.d(t,"withRouter",(function(){return H}));var r=n(64),o=n(0),i=n.n(o),a=n(115),c=n.n(a),u=n(54),s=n(59),l=n(2),f=n(245),d=n.n(f),p=(n(555),n(86)),h=n(345),m=n.n(h),v="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function g(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var b=i.a.createContext||function(e,t){var n,o,a="__create-react-context-"+function(){var e="__global_unique_id__";return v[e]=(v[e]||0)+1}()+"__",u=function(e){function n(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).emitter=g(t.props.value),t}Object(r.a)(n,e);var o=n.prototype;return o.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},o.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},o.render=function(){return this.props.children},n}(i.a.Component);u.childContextTypes=((n={})[a]=c.a.object.isRequired,n);var s=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).observedBits=void 0,e.state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(r.a)(n,t);var o=n.prototype;return o.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},o.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},o.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},o.getValue=function(){return this.context[a]?this.context[a].get():e},o.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(i.a.Component);return s.contextTypes=((o={})[a]=c.a.object,o),{Provider:u,Consumer:s}},y=function(e){var t=b();return t.displayName=e,t},w=y("Router-History"),O=y("Router"),x=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._pendingLocation=e}))),n}Object(r.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){var e=this;this._isMounted=!0,this.unlisten&&this.unlisten(),this.props.staticContext||(this.unlisten=this.props.history.listen((function(t){e._isMounted&&e.setState({location:t})}))),this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},n.render=function(){return i.a.createElement(O.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(w.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);var E=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(u.createMemoryHistory)(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(x,{history:this.history,children:this.props.children})},t}(i.a.Component);var j=function(e){function t(){return e.apply(this,arguments)||this}Object(r.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);function k(e){var t=e.message,n=e.when,r=void 0===n||n;return i.a.createElement(O.Consumer,null,(function(e){if(e||Object(s.default)(!1),!r||e.staticContext)return null;var n=e.history.block;return i.a.createElement(j,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})}))}var C={},S=0;function _(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(C[e])return C[e];var t=d.a.compile(e);return S<1e4&&(C[e]=t,S++),t}(e)(t,{pretty:!0})}function M(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(O.Consumer,null,(function(e){e||Object(s.default)(!1);var r=e.history,a=e.staticContext,c=o?r.push:r.replace,f=Object(u.createLocation)(t?"string"==typeof n?_(n,t.params):Object(l.a)({},n,{pathname:_(n.pathname,t.params)}):n);return a?(c(f),null):i.a.createElement(j,{onMount:function(){c(f)},onUpdate:function(e,t){var n=Object(u.createLocation)(t.to);Object(u.locationsAreEqual)(n,Object(l.a)({},f,{key:n.key}))||c(f)},to:n})}))}var T={},P=0;function F(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,c=void 0!==a&&a,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=T[n]||(T[n]={});if(r[e])return r[e];var o=[],i={regexp:d()(e,o,t),keys:o};return P<1e4&&(r[e]=i,P++),i}(n,{end:i,strict:c,sensitive:s}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var l=u[0],f=u.slice(1),p=e===l;return i&&!p?null:{path:n,url:"/"===n&&""===l?"/":l,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var N=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(O.Consumer,null,(function(t){t||Object(s.default)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?F(n.pathname,e.props):t.match,o=Object(l.a)({},t,{location:n,match:r}),a=e.props,c=a.children,u=a.component,f=a.render;return Array.isArray(c)&&function(e){return 0===i.a.Children.count(e)}(c)&&(c=null),i.a.createElement(O.Provider,{value:o},o.match?c?"function"==typeof c?c(o):c:u?i.a.createElement(u,o):f?f(o):null:"function"==typeof c?c(o):null)}))},t}(i.a.Component);function A(e){return"/"===e.charAt(0)?e:"/"+e}function R(e,t){if(!e)return t;var n=A(e);return 0!==t.pathname.indexOf(n)?t:Object(l.a)({},t,{pathname:t.pathname.substr(n.length)})}function D(e){return"string"==typeof e?e:Object(u.createPath)(e)}function L(e){return function(){Object(s.default)(!1)}}function I(){}var z=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return I},t.handleBlock=function(){return I},t}Object(r.a)(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,o=void 0===r?"":r,i=n.context,a=void 0===i?{}:i;a.action=t,a.location=function(e,t){return e?Object(l.a)({},t,{pathname:A(e)+t.pathname}):t}(o,Object(u.createLocation)(e)),a.url=D(a.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,o=void 0===r?{}:r,a=e.location,c=void 0===a?"/":a,s=Object(p.a)(e,["basename","context","location"]),f={createHref:function(e){return A(n+D(e))},action:"POP",location:R(n,Object(u.createLocation)(c)),push:this.handlePush,replace:this.handleReplace,go:L(),goBack:L(),goForward:L(),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(x,Object(l.a)({},s,{history:f,staticContext:o}))},t}(i.a.Component);var V=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(O.Consumer,null,(function(t){t||Object(s.default)(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?F(o.pathname,Object(l.a)({},e.props,{path:a})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);function H(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(p.a)(t,["wrappedComponentRef"]);return i.a.createElement(O.Consumer,null,(function(t){return t||Object(s.default)(!1),i.a.createElement(e,Object(l.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,m()(n,e)}var W=i.a.useContext;function B(){return W(w)}function Y(){return W(O).location}function U(){var e=W(O).match;return e?e.params:{}}function $(e){var t=Y(),n=W(O).match;return e?F(t.pathname,e):n}}.call(this,n(102))},function(e,t,n){"use strict";var r=n(11),o=n(77),i=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},function(e,t,n){"use strict";var r=n(40),o=String,i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not an object")}},function(e,t,n){"use strict";var r=function(e){return+setTimeout(e,16)},o=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(r=function(e){return window.requestAnimationFrame(e)},o=function(e){return window.cancelAnimationFrame(e)});var i=0,a=new Map;function c(e){a.delete(e)}var u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=i+=1;function o(t){if(0===t)c(n),e();else{var i=r((function(){o(t-1)}));a.set(n,i)}}return o(t),n};u.cancel=function(e){var t=a.get(e);return c(t),o(t)},t.a=u},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(196);function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Object(r.a)(e,t)}},function(e,t,n){"use strict";function r(e){return(r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n.d(t,"a",(function(){return c}));var o=n(7),i=n(9);function a(e,t){if(t&&("object"===Object(o.a)(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Object(i.a)(e)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=r(e);if(t){var i=r(this).constructor;n=Reflect.construct(o,arguments,i)}else n=o.apply(this,arguments);return a(this,n)}}},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,n;function r(){return t.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function a(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(a(e,t))return!1;return!0}function u(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,r=[],o=e.length;for(n=0;n<o;++n)r.push(t(e[n],n));return r}function d(e,t){for(var n in t)a(t,n)&&(e[n]=t[n]);return a(t,"toString")&&(e.toString=t.toString),a(t,"valueOf")&&(e.valueOf=t.valueOf),e}function p(e,t,n,r){return jt(e,t,n,r,!0).utc()}function h(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function m(e){if(null==e._isValid){var t=h(e),r=n.call(t.parsedDateParts,(function(e){return null!=e})),o=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&r);if(e._strict&&(o=o&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return o;e._isValid=o}return e._isValid}function v(e){var t=p(NaN);return null!=e?d(h(t),e):h(t).userInvalidated=!0,t}n=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=r.momentProperties=[],b=!1;function y(e,t){var n,r,o,i=g.length;if(u(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),u(t._i)||(e._i=t._i),u(t._f)||(e._f=t._f),u(t._l)||(e._l=t._l),u(t._strict)||(e._strict=t._strict),u(t._tzm)||(e._tzm=t._tzm),u(t._isUTC)||(e._isUTC=t._isUTC),u(t._offset)||(e._offset=t._offset),u(t._pf)||(e._pf=h(t)),u(t._locale)||(e._locale=t._locale),i>0)for(n=0;n<i;n++)u(o=t[r=g[n]])||(e[r]=o);return e}function w(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===b&&(b=!0,r.updateOffset(this),b=!1)}function O(e){return e instanceof w||null!=e&&null!=e._isAMomentObject}function x(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function E(e,t){var n=!0;return d((function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){var o,i,c,u=[],s=arguments.length;for(i=0;i<s;i++){if(o="","object"==typeof arguments[i]){for(c in o+="\n["+i+"] ",arguments[0])a(arguments[0],c)&&(o+=c+": "+arguments[0][c]+", ");o=o.slice(0,-2)}else o=arguments[i];u.push(o)}x(e+"\nArguments: "+Array.prototype.slice.call(u).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var j,k={};function C(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),k[e]||(x(t),k[e]=!0)}function S(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function _(e,t){var n,r=d({},e);for(n in t)a(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},d(r[n],e[n]),d(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)a(e,n)&&!a(t,n)&&i(e[n])&&(r[n]=d({},r[n]));return r}function M(e){null!=e&&this.set(e)}function T(e,t,n){var r=""+Math.abs(e),o=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,o)).toString().substr(1)+r}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,j=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)a(e,t)&&n.push(t);return n};var P=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,N={},A={};function R(e,t,n,r){var o=r;"string"==typeof r&&(o=function(){return this[r]()}),e&&(A[e]=o),t&&(A[t[0]]=function(){return T(o.apply(this,arguments),t[1],t[2])}),n&&(A[n]=function(){return this.localeData().ordinal(o.apply(this,arguments),e)})}function D(e,t){return e.isValid()?(t=L(t,e.localeData()),N[t]=N[t]||function(e){var t,n,r,o=e.match(P);for(t=0,n=o.length;t<n;t++)A[o[t]]?o[t]=A[o[t]]:o[t]=(r=o[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=S(o[r])?o[r].call(t,e):o[r];return i}}(t),N[t](e)):e.localeData().invalidDate()}function L(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,r),F.lastIndex=0,n-=1;return e}var I={};function z(e,t){var n=e.toLowerCase();I[n]=I[n+"s"]=I[t]=e}function V(e){return"string"==typeof e?I[e]||I[e.toLowerCase()]:void 0}function H(e){var t,n,r={};for(n in e)a(e,n)&&(t=V(n))&&(r[t]=e[n]);return r}var W={};function B(e,t){W[e]=t}function Y(e){return e%4==0&&e%100!=0||e%400==0}function U(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function $(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=U(t)),n}function q(e,t){return function(n){return null!=n?(K(this,e,n),r.updateOffset(this,t),this):G(this,e)}}function G(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function K(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&Y(e.year())&&1===e.month()&&29===e.date()?(n=$(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Oe(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Q,X=/\d/,Z=/\d\d/,J=/\d{3}/,ee=/\d{4}/,te=/[+-]?\d{6}/,ne=/\d\d?/,re=/\d\d\d\d?/,oe=/\d\d\d\d\d\d?/,ie=/\d{1,3}/,ae=/\d{1,4}/,ce=/[+-]?\d{1,6}/,ue=/\d+/,se=/[+-]?\d+/,le=/Z|[+-]\d\d:?\d\d/gi,fe=/Z|[+-]\d\d(?::?\d\d)?/gi,de=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function pe(e,t,n){Q[e]=S(t)?t:function(e,r){return e&&n?n:t}}function he(e,t){return a(Q,e)?Q[e](t._strict,t._locale):new RegExp(me(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,o){return t||n||r||o}))))}function me(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Q={};var ve,ge={};function be(e,t){var n,r,o=t;for("string"==typeof e&&(e=[e]),s(t)&&(o=function(e,n){n[t]=$(e)}),r=e.length,n=0;n<r;n++)ge[e[n]]=o}function ye(e,t){be(e,(function(e,n,r,o){r._w=r._w||{},t(e,r._w,r,o)}))}function we(e,t,n){null!=t&&a(ge,e)&&ge[e](t,n._a,n,e)}function Oe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?Y(e)?29:28:31-r%7%2}ve=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},R("M",["MM",2],"Mo",(function(){return this.month()+1})),R("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),R("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),z("month","M"),B("month",8),pe("M",ne),pe("MM",ne,Z),pe("MMM",(function(e,t){return t.monthsShortRegex(e)})),pe("MMMM",(function(e,t){return t.monthsRegex(e)})),be(["M","MM"],(function(e,t){t[1]=$(e)-1})),be(["MMM","MMMM"],(function(e,t,n,r){var o=n._locale.monthsParse(e,r,n._strict);null!=o?t[1]=o:h(n).invalidMonth=e}));var xe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ee="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),je=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ke=de,Ce=de;function Se(e,t,n){var r,o,i,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=p([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(o=ve.call(this._shortMonthsParse,a))?o:null:-1!==(o=ve.call(this._longMonthsParse,a))?o:null:"MMM"===t?-1!==(o=ve.call(this._shortMonthsParse,a))||-1!==(o=ve.call(this._longMonthsParse,a))?o:null:-1!==(o=ve.call(this._longMonthsParse,a))||-1!==(o=ve.call(this._shortMonthsParse,a))?o:null}function _e(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=$(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Oe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Me(e){return null!=e?(_e(this,e),r.updateOffset(this,!0),this):G(this,"Month")}function Te(){function e(e,t){return t.length-e.length}var t,n,r=[],o=[],i=[];for(t=0;t<12;t++)n=p([2e3,t]),r.push(this.monthsShort(n,"")),o.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),o.sort(e),i.sort(e),t=0;t<12;t++)r[t]=me(r[t]),o[t]=me(o[t]);for(t=0;t<24;t++)i[t]=me(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Pe(e){return Y(e)?366:365}R("Y",0,0,(function(){var e=this.year();return e<=9999?T(e,4):"+"+e})),R(0,["YY",2],0,(function(){return this.year()%100})),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),z("year","y"),B("year",1),pe("Y",se),pe("YY",ne,Z),pe("YYYY",ae,ee),pe("YYYYY",ce,te),pe("YYYYYY",ce,te),be(["YYYYY","YYYYYY"],0),be("YYYY",(function(e,t){t[0]=2===e.length?r.parseTwoDigitYear(e):$(e)})),be("YY",(function(e,t){t[0]=r.parseTwoDigitYear(e)})),be("Y",(function(e,t){t[0]=parseInt(e,10)})),r.parseTwoDigitYear=function(e){return $(e)+($(e)>68?1900:2e3)};var Fe=q("FullYear",!0);function Ne(e,t,n,r,o,i,a){var c;return e<100&&e>=0?(c=new Date(e+400,t,n,r,o,i,a),isFinite(c.getFullYear())&&c.setFullYear(e)):c=new Date(e,t,n,r,o,i,a),c}function Ae(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Re(e,t,n){var r=7+t-n;return-(7+Ae(e,0,r).getUTCDay()-t)%7+r-1}function De(e,t,n,r,o){var i,a,c=1+7*(t-1)+(7+n-r)%7+Re(e,r,o);return c<=0?a=Pe(i=e-1)+c:c>Pe(e)?(i=e+1,a=c-Pe(e)):(i=e,a=c),{year:i,dayOfYear:a}}function Le(e,t,n){var r,o,i=Re(e.year(),t,n),a=Math.floor((e.dayOfYear()-i-1)/7)+1;return a<1?r=a+Ie(o=e.year()-1,t,n):a>Ie(e.year(),t,n)?(r=a-Ie(e.year(),t,n),o=e.year()+1):(o=e.year(),r=a),{week:r,year:o}}function Ie(e,t,n){var r=Re(e,t,n),o=Re(e+1,t,n);return(Pe(e)-r+o)/7}function ze(e,t){return e.slice(t,7).concat(e.slice(0,t))}R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),B("week",5),B("isoWeek",5),pe("w",ne),pe("ww",ne,Z),pe("W",ne),pe("WW",ne,Z),ye(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=$(e)})),R("d",0,"do","day"),R("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),R("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),R("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),B("day",11),B("weekday",11),B("isoWeekday",11),pe("d",ne),pe("e",ne),pe("E",ne),pe("dd",(function(e,t){return t.weekdaysMinRegex(e)})),pe("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),pe("dddd",(function(e,t){return t.weekdaysRegex(e)})),ye(["dd","ddd","dddd"],(function(e,t,n,r){var o=n._locale.weekdaysParse(e,r,n._strict);null!=o?t.d=o:h(n).invalidWeekday=e})),ye(["d","e","E"],(function(e,t,n,r){t[r]=$(e)}));var Ve="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),He="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),We="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Be=de,Ye=de,Ue=de;function $e(e,t,n){var r,o,i,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=p([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(o=ve.call(this._weekdaysParse,a))?o:null:"ddd"===t?-1!==(o=ve.call(this._shortWeekdaysParse,a))?o:null:-1!==(o=ve.call(this._minWeekdaysParse,a))?o:null:"dddd"===t?-1!==(o=ve.call(this._weekdaysParse,a))||-1!==(o=ve.call(this._shortWeekdaysParse,a))||-1!==(o=ve.call(this._minWeekdaysParse,a))?o:null:"ddd"===t?-1!==(o=ve.call(this._shortWeekdaysParse,a))||-1!==(o=ve.call(this._weekdaysParse,a))||-1!==(o=ve.call(this._minWeekdaysParse,a))?o:null:-1!==(o=ve.call(this._minWeekdaysParse,a))||-1!==(o=ve.call(this._weekdaysParse,a))||-1!==(o=ve.call(this._shortWeekdaysParse,a))?o:null}function qe(){function e(e,t){return t.length-e.length}var t,n,r,o,i,a=[],c=[],u=[],s=[];for(t=0;t<7;t++)n=p([2e3,1]).day(t),r=me(this.weekdaysMin(n,"")),o=me(this.weekdaysShort(n,"")),i=me(this.weekdays(n,"")),a.push(r),c.push(o),u.push(i),s.push(r),s.push(o),s.push(i);a.sort(e),c.sort(e),u.sort(e),s.sort(e),this._weekdaysRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){R(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}R("H",["HH",2],0,"hour"),R("h",["hh",2],0,Ge),R("k",["kk",2],0,(function(){return this.hours()||24})),R("hmm",0,0,(function(){return""+Ge.apply(this)+T(this.minutes(),2)})),R("hmmss",0,0,(function(){return""+Ge.apply(this)+T(this.minutes(),2)+T(this.seconds(),2)})),R("Hmm",0,0,(function(){return""+this.hours()+T(this.minutes(),2)})),R("Hmmss",0,0,(function(){return""+this.hours()+T(this.minutes(),2)+T(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),z("hour","h"),B("hour",13),pe("a",Qe),pe("A",Qe),pe("H",ne),pe("h",ne),pe("k",ne),pe("HH",ne,Z),pe("hh",ne,Z),pe("kk",ne,Z),pe("hmm",re),pe("hmmss",oe),pe("Hmm",re),pe("Hmmss",oe),be(["H","HH"],3),be(["k","kk"],(function(e,t,n){var r=$(e);t[3]=24===r?0:r})),be(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),be(["h","hh"],(function(e,t,n){t[3]=$(e),h(n).bigHour=!0})),be("hmm",(function(e,t,n){var r=e.length-2;t[3]=$(e.substr(0,r)),t[4]=$(e.substr(r)),h(n).bigHour=!0})),be("hmmss",(function(e,t,n){var r=e.length-4,o=e.length-2;t[3]=$(e.substr(0,r)),t[4]=$(e.substr(r,2)),t[5]=$(e.substr(o)),h(n).bigHour=!0})),be("Hmm",(function(e,t,n){var r=e.length-2;t[3]=$(e.substr(0,r)),t[4]=$(e.substr(r))})),be("Hmmss",(function(e,t,n){var r=e.length-4,o=e.length-2;t[3]=$(e.substr(0,r)),t[4]=$(e.substr(r,2)),t[5]=$(e.substr(o))}));var Xe,Ze=q("Hours",!0),Je={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:xe,monthsShort:Ee,week:{dow:0,doy:6},weekdays:Ve,weekdaysMin:We,weekdaysShort:He,meridiemParse:/[ap]\.?m?\.?/i},et={},tt={};function nt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function rt(e){return e?e.toLowerCase().replace("_","-"):e}function ot(t){var n=null;if(void 0===et[t]&&void 0!==e&&e&&e.exports&&function(e){return null!=e.match("^[^/\\\\]*$")}(t))try{n=Xe._abbr,function(){var e=new Error("Cannot find module 'undefined'");throw e.code="MODULE_NOT_FOUND",e}(),it(n)}catch(e){et[t]=null}return et[t]}function it(e,t){var n;return e&&((n=u(t)?ct(e):at(e,t))?Xe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Xe._abbr}function at(e,t){if(null!==t){var n,r=Je;if(t.abbr=e,null!=et[e])C("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=et[e]._config;else if(null!=t.parentLocale)if(null!=et[t.parentLocale])r=et[t.parentLocale]._config;else{if(null==(n=ot(t.parentLocale)))return tt[t.parentLocale]||(tt[t.parentLocale]=[]),tt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return et[e]=new M(_(r,t)),tt[e]&&tt[e].forEach((function(e){at(e.name,e.config)})),it(e),et[e]}return delete et[e],null}function ct(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Xe;if(!o(e)){if(t=ot(e))return t;e=[e]}return function(e){for(var t,n,r,o,i=0;i<e.length;){for(t=(o=rt(e[i]).split("-")).length,n=(n=rt(e[i+1]))?n.split("-"):null;t>0;){if(r=ot(o.slice(0,t).join("-")))return r;if(n&&n.length>=t&&nt(o,n)>=t-1)break;t--}i++}return Xe}(e)}function ut(e){var t,n=e._a;return n&&-2===h(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>Oe(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,h(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),h(e)._overflowWeeks&&-1===t&&(t=7),h(e)._overflowWeekday&&-1===t&&(t=8),h(e).overflow=t),e}var st=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,lt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ft=/Z|[+-]\d\d(?::?\d\d)?/,dt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],pt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ht=/^\/?Date\((-?\d+)/i,mt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,vt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,r,o,i,a,c=e._i,u=st.exec(c)||lt.exec(c),s=dt.length,l=pt.length;if(u){for(h(e).iso=!0,t=0,n=s;t<n;t++)if(dt[t][1].exec(u[1])){o=dt[t][0],r=!1!==dt[t][2];break}if(null==o)return void(e._isValid=!1);if(u[3]){for(t=0,n=l;t<n;t++)if(pt[t][1].exec(u[3])){i=(u[2]||" ")+pt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!ft.exec(u[4]))return void(e._isValid=!1);a="Z"}e._f=o+(i||"")+(a||""),xt(e)}else e._isValid=!1}function bt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function yt(e){var t,n,r,o,i,a,c,u,s=mt.exec(e._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(s){if(n=s[4],r=s[3],o=s[2],i=s[5],a=s[6],c=s[7],u=[bt(n),Ee.indexOf(r),parseInt(o,10),parseInt(i,10),parseInt(a,10)],c&&u.push(parseInt(c,10)),t=u,!function(e,t,n){return!e||He.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(h(n).weekdayMismatch=!0,n._isValid=!1,!1)}(s[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return vt[e];if(t)return 0;var r=parseInt(n,10),o=r%100;return(r-o)/100*60+o}(s[8],s[9],s[10]),e._d=Ae.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),h(e).rfc2822=!0}else e._isValid=!1}function wt(e,t,n){return null!=e?e:null!=t?t:n}function Ot(e){var t,n,o,i,a,c=[];if(!e._d){for(o=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,o,i,a,c,u,s;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,a=4,n=wt(t.GG,e._a[0],Le(kt(),1,4).year),r=wt(t.W,1),((o=wt(t.E,1))<1||o>7)&&(u=!0)):(i=e._locale._week.dow,a=e._locale._week.doy,s=Le(kt(),i,a),n=wt(t.gg,e._a[0],s.year),r=wt(t.w,s.week),null!=t.d?((o=t.d)<0||o>6)&&(u=!0):null!=t.e?(o=t.e+i,(t.e<0||t.e>6)&&(u=!0)):o=i),r<1||r>Ie(n,i,a)?h(e)._overflowWeeks=!0:null!=u?h(e)._overflowWeekday=!0:(c=De(n,r,o,i,a),e._a[0]=c.year,e._dayOfYear=c.dayOfYear)}(e),null!=e._dayOfYear&&(a=wt(e._a[0],o[0]),(e._dayOfYear>Pe(a)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),n=Ae(a,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=c[t]=o[t];for(;t<7;t++)e._a[t]=c[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ae:Ne).apply(null,c),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(h(e).weekdayMismatch=!0)}}function xt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],h(e).empty=!0;var t,n,o,i,a,c,u,s=""+e._i,l=s.length,f=0;for(u=(o=L(e._f,e._locale).match(P)||[]).length,t=0;t<u;t++)i=o[t],(n=(s.match(he(i,e))||[])[0])&&((a=s.substr(0,s.indexOf(n))).length>0&&h(e).unusedInput.push(a),s=s.slice(s.indexOf(n)+n.length),f+=n.length),A[i]?(n?h(e).empty=!1:h(e).unusedTokens.push(i),we(i,n,e)):e._strict&&!n&&h(e).unusedTokens.push(i);h(e).charsLeftOver=l-f,s.length>0&&h(e).unusedInput.push(s),e._a[3]<=12&&!0===h(e).bigHour&&e._a[3]>0&&(h(e).bigHour=void 0),h(e).parsedDateParts=e._a.slice(0),h(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(c=h(e).era)&&(e._a[0]=e._locale.erasConvertYear(c,e._a[0])),Ot(e),ut(e)}else yt(e);else gt(e)}function Et(e){var t=e._i,n=e._f;return e._locale=e._locale||ct(e._l),null===t||void 0===n&&""===t?v({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),O(t)?new w(ut(t)):(l(t)?e._d=t:o(n)?function(e){var t,n,r,o,i,a,c=!1,u=e._f.length;if(0===u)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(o=0;o<u;o++)i=0,a=!1,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[o],xt(t),m(t)&&(a=!0),i+=h(t).charsLeftOver,i+=10*h(t).unusedTokens.length,h(t).score=i,c?i<r&&(r=i,n=t):(null==r||i<r||a)&&(r=i,n=t,a&&(c=!0));d(e,n||t)}(e):n?xt(e):function(e){var t=e._i;u(t)?e._d=new Date(r.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ht.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,yt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):o(t)?(e._a=f(t.slice(0),(function(e){return parseInt(e,10)})),Ot(e)):i(t)?function(e){if(!e._d){var t=H(e._i),n=void 0===t.day?t.date:t.day;e._a=f([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Ot(e)}}(e):s(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),m(e)||(e._d=null),e))}function jt(e,t,n,r,a){var u,s={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&c(e)||o(e)&&0===e.length)&&(e=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=a,s._l=n,s._i=e,s._f=t,s._strict=r,(u=new w(ut(Et(s))))._nextDay&&(u.add(1,"d"),u._nextDay=void 0),u}function kt(e,t,n,r){return jt(e,t,n,r,!1)}r.createFromInputFallback=E("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),r.ISO_8601=function(){},r.RFC_2822=function(){};var Ct=E("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=kt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:v()})),St=E("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=kt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:v()}));function _t(e,t){var n,r;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return kt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Mt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Tt(e){var t=H(e),n=t.year||0,r=t.quarter||0,o=t.month||0,i=t.week||t.isoWeek||0,c=t.day||0,u=t.hour||0,s=t.minute||0,l=t.second||0,f=t.millisecond||0;this._isValid=function(e){var t,n,r=!1,o=Mt.length;for(t in e)if(a(e,t)&&(-1===ve.call(Mt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<o;++n)if(e[Mt[n]]){if(r)return!1;parseFloat(e[Mt[n]])!==$(e[Mt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+f+1e3*l+6e4*s+1e3*u*60*60,this._days=+c+7*i,this._months=+o+3*r+12*n,this._data={},this._locale=ct(),this._bubble()}function Pt(e){return e instanceof Tt}function Ft(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Nt(e,t){R(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+T(~~(e/60),2)+t+T(~~e%60,2)}))}Nt("Z",":"),Nt("ZZ",""),pe("Z",fe),pe("ZZ",fe),be(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Rt(fe,e)}));var At=/([\+\-]|\d\d)/gi;function Rt(e,t){var n,r,o=(t||"").match(e);return null===o?null:0===(r=60*(n=((o[o.length-1]||[])+"").match(At)||["-",0,0])[1]+$(n[2]))?0:"+"===n[0]?r:-r}function Dt(e,t){var n,o;return t._isUTC?(n=t.clone(),o=(O(e)||l(e)?e.valueOf():kt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+o),r.updateOffset(n,!1),n):kt(e).local()}function Lt(e){return-Math.round(e._d.getTimezoneOffset())}function It(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var zt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Vt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ht(e,t){var n,r,o,i,c,u,l=e,f=null;return Pt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:s(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(f=zt.exec(e))?(n="-"===f[1]?-1:1,l={y:0,d:$(f[2])*n,h:$(f[3])*n,m:$(f[4])*n,s:$(f[5])*n,ms:$(Ft(1e3*f[6]))*n}):(f=Vt.exec(e))?(n="-"===f[1]?-1:1,l={y:Wt(f[2],n),M:Wt(f[3],n),w:Wt(f[4],n),d:Wt(f[5],n),h:Wt(f[6],n),m:Wt(f[7],n),s:Wt(f[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=kt(l.from),c=kt(l.to),o=i.isValid()&&c.isValid()?(c=Dt(c,i),i.isBefore(c)?u=Bt(i,c):((u=Bt(c,i)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(l={}).ms=o.milliseconds,l.M=o.months),r=new Tt(l),Pt(e)&&a(e,"_locale")&&(r._locale=e._locale),Pt(e)&&a(e,"_isValid")&&(r._isValid=e._isValid),r}function Wt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Bt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Yt(e,t){return function(n,r){var o;return null===r||isNaN(+r)||(C(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),o=n,n=r,r=o),Ut(this,Ht(n,r),e),this}}function Ut(e,t,n,o){var i=t._milliseconds,a=Ft(t._days),c=Ft(t._months);e.isValid()&&(o=null==o||o,c&&_e(e,G(e,"Month")+c*n),a&&K(e,"Date",G(e,"Date")+a*n),i&&e._d.setTime(e._d.valueOf()+i*n),o&&r.updateOffset(e,a||c))}Ht.fn=Tt.prototype,Ht.invalid=function(){return Ht(NaN)};var $t=Yt(1,"add"),qt=Yt(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return O(e)||l(e)||Gt(e)||s(e)||function(e){var t=o(e),n=!1;return t&&(n=0===e.filter((function(t){return!s(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,r=i(e)&&!c(e),o=!1,u=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],s=u.length;for(t=0;t<s;t+=1)n=u[t],o=o||a(e,n);return r&&o}(e)||null==e}function Qt(e){var t,n=i(e)&&!c(e),r=!1,o=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<o.length;t+=1)r=r||a(e,o[t]);return n&&r}function Xt(e,t){if(e.date()<t.date())return-Xt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Zt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ct(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Jt=E("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function en(){return this._locale}function tn(e,t){return(e%t+t)%t}function nn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function rn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function on(e,t){return t.erasAbbrRegex(e)}function an(){var e,t,n=[],r=[],o=[],i=[],a=this.eras();for(e=0,t=a.length;e<t;++e)r.push(me(a[e].name)),n.push(me(a[e].abbr)),o.push(me(a[e].narrow)),i.push(me(a[e].name)),i.push(me(a[e].abbr)),i.push(me(a[e].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+r.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+o.join("|")+")","i")}function cn(e,t){R(0,[e,e.length],0,t)}function un(e,t,n,r,o){var i;return null==e?Le(this,r,o).year:(t>(i=Ie(e,r,o))&&(t=i),sn.call(this,e,t,n,r,o))}function sn(e,t,n,r,o){var i=De(e,t,n,r,o),a=Ae(i.year,0,i.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}R("N",0,0,"eraAbbr"),R("NN",0,0,"eraAbbr"),R("NNN",0,0,"eraAbbr"),R("NNNN",0,0,"eraName"),R("NNNNN",0,0,"eraNarrow"),R("y",["y",1],"yo","eraYear"),R("y",["yy",2],0,"eraYear"),R("y",["yyy",3],0,"eraYear"),R("y",["yyyy",4],0,"eraYear"),pe("N",on),pe("NN",on),pe("NNN",on),pe("NNNN",(function(e,t){return t.erasNameRegex(e)})),pe("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),be(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var o=n._locale.erasParse(e,r,n._strict);o?h(n).era=o:h(n).invalidEra=e})),pe("y",ue),pe("yy",ue),pe("yyy",ue),pe("yyyy",ue),pe("yo",(function(e,t){return t._eraYearOrdinalRegex||ue})),be(["y","yy","yyy","yyyy"],0),be(["yo"],(function(e,t,n,r){var o;n._locale._eraYearOrdinalRegex&&(o=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,o):t[0]=parseInt(e,10)})),R(0,["gg",2],0,(function(){return this.weekYear()%100})),R(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),cn("gggg","weekYear"),cn("ggggg","weekYear"),cn("GGGG","isoWeekYear"),cn("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),B("weekYear",1),B("isoWeekYear",1),pe("G",se),pe("g",se),pe("GG",ne,Z),pe("gg",ne,Z),pe("GGGG",ae,ee),pe("gggg",ae,ee),pe("GGGGG",ce,te),pe("ggggg",ce,te),ye(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=$(e)})),ye(["gg","GG"],(function(e,t,n,o){t[o]=r.parseTwoDigitYear(e)})),R("Q",0,"Qo","quarter"),z("quarter","Q"),B("quarter",7),pe("Q",X),be("Q",(function(e,t){t[1]=3*($(e)-1)})),R("D",["DD",2],"Do","date"),z("date","D"),B("date",9),pe("D",ne),pe("DD",ne,Z),pe("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),be(["D","DD"],2),be("Do",(function(e,t){t[2]=$(e.match(ne)[0])}));var ln=q("Date",!0);R("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),B("dayOfYear",4),pe("DDD",ie),pe("DDDD",J),be(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=$(e)})),R("m",["mm",2],0,"minute"),z("minute","m"),B("minute",14),pe("m",ne),pe("mm",ne,Z),be(["m","mm"],4);var fn=q("Minutes",!1);R("s",["ss",2],0,"second"),z("second","s"),B("second",15),pe("s",ne),pe("ss",ne,Z),be(["s","ss"],5);var dn,pn,hn=q("Seconds",!1);for(R("S",0,0,(function(){return~~(this.millisecond()/100)})),R(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),R(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),R(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),R(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),R(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),R(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),z("millisecond","ms"),B("millisecond",16),pe("S",ie,X),pe("SS",ie,Z),pe("SSS",ie,J),dn="SSSS";dn.length<=9;dn+="S")pe(dn,ue);function mn(e,t){t[6]=$(1e3*("0."+e))}for(dn="S";dn.length<=9;dn+="S")be(dn,mn);pn=q("Milliseconds",!1),R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var vn=w.prototype;function gn(e){return e}vn.add=$t,vn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||kt(),o=Dt(n,this).startOf("day"),i=r.calendarFormat(this,o)||"sameElse",a=t&&(S(t[i])?t[i].call(this,n):t[i]);return this.format(a||this.localeData().calendar(i,this,kt(n)))},vn.clone=function(){return new w(this)},vn.diff=function(e,t,n){var r,o,i;if(!this.isValid())return NaN;if(!(r=Dt(e,this)).isValid())return NaN;switch(o=6e4*(r.utcOffset()-this.utcOffset()),t=V(t)){case"year":i=Xt(this,r)/12;break;case"month":i=Xt(this,r);break;case"quarter":i=Xt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-o)/864e5;break;case"week":i=(this-r-o)/6048e5;break;default:i=this-r}return n?i:U(i)},vn.endOf=function(e){var t,n;if(void 0===(e=V(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?rn:nn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-tn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-tn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-tn(t,1e3)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},vn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=D(this,e);return this.localeData().postformat(t)},vn.from=function(e,t){return this.isValid()&&(O(e)&&e.isValid()||kt(e).isValid())?Ht({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},vn.fromNow=function(e){return this.from(kt(),e)},vn.to=function(e,t){return this.isValid()&&(O(e)&&e.isValid()||kt(e).isValid())?Ht({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},vn.toNow=function(e){return this.to(kt(),e)},vn.get=function(e){return S(this[e=V(e)])?this[e]():this},vn.invalidAt=function(){return h(this).overflow},vn.isAfter=function(e,t){var n=O(e)?e:kt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=V(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},vn.isBefore=function(e,t){var n=O(e)?e:kt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=V(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},vn.isBetween=function(e,t,n,r){var o=O(e)?e:kt(e),i=O(t)?t:kt(t);return!!(this.isValid()&&o.isValid()&&i.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(o,n):!this.isBefore(o,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n)))},vn.isSame=function(e,t){var n,r=O(e)?e:kt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=V(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},vn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},vn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},vn.isValid=function(){return m(this)},vn.lang=Jt,vn.locale=Zt,vn.localeData=en,vn.max=St,vn.min=Ct,vn.parsingFlags=function(){return d({},h(this))},vn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)a(e,t)&&n.push({unit:t,priority:W[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=H(e)),o=r.length;for(n=0;n<o;n++)this[r[n].unit](e[r[n].unit])}else if(S(this[e=V(e)]))return this[e](t);return this},vn.startOf=function(e){var t,n;if(void 0===(e=V(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?rn:nn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=tn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=tn(t,6e4);break;case"second":t=this._d.valueOf(),t-=tn(t,1e3)}return this._d.setTime(t),r.updateOffset(this,!0),this},vn.subtract=qt,vn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},vn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},vn.toDate=function(){return new Date(this.valueOf())},vn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?D(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",D(n,"Z")):D(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},vn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",o="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",o="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=o+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(vn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),vn.toJSON=function(){return this.isValid()?this.toISOString():null},vn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},vn.unix=function(){return Math.floor(this.valueOf()/1e3)},vn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},vn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},vn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},vn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},vn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},vn.eraYear=function(){var e,t,n,o,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,o=this.clone().startOf("day").valueOf(),i[e].since<=o&&o<=i[e].until||i[e].until<=o&&o<=i[e].since)return(this.year()-r(i[e].since).year())*n+i[e].offset;return this.year()},vn.year=Fe,vn.isLeapYear=function(){return Y(this.year())},vn.weekYear=function(e){return un.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},vn.isoWeekYear=function(e){return un.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},vn.quarter=vn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},vn.month=Me,vn.daysInMonth=function(){return Oe(this.year(),this.month())},vn.week=vn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},vn.isoWeek=vn.isoWeeks=function(e){var t=Le(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},vn.weeksInYear=function(){var e=this.localeData()._week;return Ie(this.year(),e.dow,e.doy)},vn.weeksInWeekYear=function(){var e=this.localeData()._week;return Ie(this.weekYear(),e.dow,e.doy)},vn.isoWeeksInYear=function(){return Ie(this.year(),1,4)},vn.isoWeeksInISOWeekYear=function(){return Ie(this.isoWeekYear(),1,4)},vn.date=ln,vn.day=vn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},vn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},vn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},vn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},vn.hour=vn.hours=Ze,vn.minute=vn.minutes=fn,vn.second=vn.seconds=hn,vn.millisecond=vn.milliseconds=pn,vn.utcOffset=function(e,t,n){var o,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Rt(fe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(o=Lt(this)),this._offset=e,this._isUTC=!0,null!=o&&this.add(o,"m"),i!==e&&(!t||this._changeInProgress?Ut(this,Ht(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Lt(this)},vn.utc=function(e){return this.utcOffset(0,e)},vn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Lt(this),"m")),this},vn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Rt(le,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},vn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?kt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},vn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},vn.isLocal=function(){return!!this.isValid()&&!this._isUTC},vn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},vn.isUtc=It,vn.isUTC=It,vn.zoneAbbr=function(){return this._isUTC?"UTC":""},vn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},vn.dates=E("dates accessor is deprecated. Use date instead.",ln),vn.months=E("months accessor is deprecated. Use month instead",Me),vn.years=E("years accessor is deprecated. Use year instead",Fe),vn.zone=E("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),vn.isDSTShifted=E("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!u(this._isDSTShifted))return this._isDSTShifted;var e,t={};return y(t,this),(t=Et(t))._a?(e=t._isUTC?p(t._a):kt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,o=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),a=0;for(r=0;r<o;r++)(n&&e[r]!==t[r]||!n&&$(e[r])!==$(t[r]))&&a++;return a+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var bn=M.prototype;function yn(e,t,n,r){var o=ct(),i=p().set(r,t);return o[n](i,e)}function wn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return yn(e,t,n,"month");var r,o=[];for(r=0;r<12;r++)o[r]=yn(e,r,n,"month");return o}function On(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var o,i=ct(),a=e?i._week.dow:0,c=[];if(null!=n)return yn(t,(n+a)%7,r,"day");for(o=0;o<7;o++)c[o]=yn(t,(o+a)%7,r,"day");return c}bn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return S(r)?r.call(t,n):r},bn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(P).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},bn.invalidDate=function(){return this._invalidDate},bn.ordinal=function(e){return this._ordinal.replace("%d",e)},bn.preparse=gn,bn.postformat=gn,bn.relativeTime=function(e,t,n,r){var o=this._relativeTime[n];return S(o)?o(e,t,n,r):o.replace(/%d/i,e)},bn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},bn.set=function(e){var t,n;for(n in e)a(e,n)&&(S(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},bn.eras=function(e,t){var n,o,i,a=this._eras||ct("en")._eras;for(n=0,o=a.length;n<o;++n){switch(typeof a[n].since){case"string":i=r(a[n].since).startOf("day"),a[n].since=i.valueOf()}switch(typeof a[n].until){case"undefined":a[n].until=1/0;break;case"string":i=r(a[n].until).startOf("day").valueOf(),a[n].until=i.valueOf()}}return a},bn.erasParse=function(e,t,n){var r,o,i,a,c,u=this.eras();for(e=e.toUpperCase(),r=0,o=u.length;r<o;++r)if(i=u[r].name.toUpperCase(),a=u[r].abbr.toUpperCase(),c=u[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(a===e)return u[r];break;case"NNNN":if(i===e)return u[r];break;case"NNNNN":if(c===e)return u[r]}else if([i,a,c].indexOf(e)>=0)return u[r]},bn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?r(e.since).year():r(e.since).year()+(t-e.offset)*n},bn.erasAbbrRegex=function(e){return a(this,"_erasAbbrRegex")||an.call(this),e?this._erasAbbrRegex:this._erasRegex},bn.erasNameRegex=function(e){return a(this,"_erasNameRegex")||an.call(this),e?this._erasNameRegex:this._erasRegex},bn.erasNarrowRegex=function(e){return a(this,"_erasNarrowRegex")||an.call(this),e?this._erasNarrowRegex:this._erasRegex},bn.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||je).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},bn.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[je.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},bn.monthsParse=function(e,t,n){var r,o,i;if(this._monthsParseExact)return Se.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(o=p([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(o,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(o,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(o,"")+"|^"+this.monthsShort(o,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},bn.monthsRegex=function(e){return this._monthsParseExact?(a(this,"_monthsRegex")||Te.call(this),e?this._monthsStrictRegex:this._monthsRegex):(a(this,"_monthsRegex")||(this._monthsRegex=Ce),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},bn.monthsShortRegex=function(e){return this._monthsParseExact?(a(this,"_monthsRegex")||Te.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(a(this,"_monthsShortRegex")||(this._monthsShortRegex=ke),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},bn.week=function(e){return Le(e,this._week.dow,this._week.doy).week},bn.firstDayOfYear=function(){return this._week.doy},bn.firstDayOfWeek=function(){return this._week.dow},bn.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?ze(n,this._week.dow):e?n[e.day()]:n},bn.weekdaysMin=function(e){return!0===e?ze(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},bn.weekdaysShort=function(e){return!0===e?ze(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},bn.weekdaysParse=function(e,t,n){var r,o,i;if(this._weekdaysParseExact)return $e.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(o=p([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(o,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(o,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(o,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(o,"")+"|^"+this.weekdaysShort(o,"")+"|^"+this.weekdaysMin(o,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},bn.weekdaysRegex=function(e){return this._weekdaysParseExact?(a(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(a(this,"_weekdaysRegex")||(this._weekdaysRegex=Be),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},bn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(a(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(a(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ye),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},bn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(a(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(a(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ue),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},bn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},bn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},it("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===$(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=E("moment.lang is deprecated. Use moment.locale instead.",it),r.langData=E("moment.langData is deprecated. Use moment.localeData instead.",ct);var xn=Math.abs;function En(e,t,n,r){var o=Ht(t,n);return e._milliseconds+=r*o._milliseconds,e._days+=r*o._days,e._months+=r*o._months,e._bubble()}function jn(e){return e<0?Math.floor(e):Math.ceil(e)}function kn(e){return 4800*e/146097}function Cn(e){return 146097*e/4800}function Sn(e){return function(){return this.as(e)}}var _n=Sn("ms"),Mn=Sn("s"),Tn=Sn("m"),Pn=Sn("h"),Fn=Sn("d"),Nn=Sn("w"),An=Sn("M"),Rn=Sn("Q"),Dn=Sn("y");function Ln(e){return function(){return this.isValid()?this._data[e]:NaN}}var In=Ln("milliseconds"),zn=Ln("seconds"),Vn=Ln("minutes"),Hn=Ln("hours"),Wn=Ln("days"),Bn=Ln("months"),Yn=Ln("years"),Un=Math.round,$n={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function qn(e,t,n,r,o){return o.relativeTime(t||1,!!n,e,r)}var Gn=Math.abs;function Kn(e){return(e>0)-(e<0)||+e}function Qn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,o,i,a,c,u=Gn(this._milliseconds)/1e3,s=Gn(this._days),l=Gn(this._months),f=this.asSeconds();return f?(e=U(u/60),t=U(e/60),u%=60,e%=60,n=U(l/12),l%=12,r=u?u.toFixed(3).replace(/\.?0+$/,""):"",o=f<0?"-":"",i=Kn(this._months)!==Kn(f)?"-":"",a=Kn(this._days)!==Kn(f)?"-":"",c=Kn(this._milliseconds)!==Kn(f)?"-":"",o+"P"+(n?i+n+"Y":"")+(l?i+l+"M":"")+(s?a+s+"D":"")+(t||e||u?"T":"")+(t?c+t+"H":"")+(e?c+e+"M":"")+(u?c+r+"S":"")):"P0D"}var Xn=Tt.prototype;return Xn.isValid=function(){return this._isValid},Xn.abs=function(){var e=this._data;return this._milliseconds=xn(this._milliseconds),this._days=xn(this._days),this._months=xn(this._months),e.milliseconds=xn(e.milliseconds),e.seconds=xn(e.seconds),e.minutes=xn(e.minutes),e.hours=xn(e.hours),e.months=xn(e.months),e.years=xn(e.years),this},Xn.add=function(e,t){return En(this,e,t,1)},Xn.subtract=function(e,t){return En(this,e,t,-1)},Xn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=V(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+kn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Cn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Xn.asMilliseconds=_n,Xn.asSeconds=Mn,Xn.asMinutes=Tn,Xn.asHours=Pn,Xn.asDays=Fn,Xn.asWeeks=Nn,Xn.asMonths=An,Xn.asQuarters=Rn,Xn.asYears=Dn,Xn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*$(this._months/12):NaN},Xn._bubble=function(){var e,t,n,r,o,i=this._milliseconds,a=this._days,c=this._months,u=this._data;return i>=0&&a>=0&&c>=0||i<=0&&a<=0&&c<=0||(i+=864e5*jn(Cn(c)+a),a=0,c=0),u.milliseconds=i%1e3,e=U(i/1e3),u.seconds=e%60,t=U(e/60),u.minutes=t%60,n=U(t/60),u.hours=n%24,a+=U(n/24),o=U(kn(a)),c+=o,a-=jn(Cn(o)),r=U(c/12),c%=12,u.days=a,u.months=c,u.years=r,this},Xn.clone=function(){return Ht(this)},Xn.get=function(e){return e=V(e),this.isValid()?this[e+"s"]():NaN},Xn.milliseconds=In,Xn.seconds=zn,Xn.minutes=Vn,Xn.hours=Hn,Xn.days=Wn,Xn.weeks=function(){return U(this.days()/7)},Xn.months=Bn,Xn.years=Yn,Xn.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,o=!1,i=$n;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(o=e),"object"==typeof t&&(i=Object.assign({},$n,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),n=this.localeData(),r=function(e,t,n,r){var o=Ht(e).abs(),i=Un(o.as("s")),a=Un(o.as("m")),c=Un(o.as("h")),u=Un(o.as("d")),s=Un(o.as("M")),l=Un(o.as("w")),f=Un(o.as("y")),d=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||a<=1&&["m"]||a<n.m&&["mm",a]||c<=1&&["h"]||c<n.h&&["hh",c]||u<=1&&["d"]||u<n.d&&["dd",u];return null!=n.w&&(d=d||l<=1&&["w"]||l<n.w&&["ww",l]),(d=d||s<=1&&["M"]||s<n.M&&["MM",s]||f<=1&&["y"]||["yy",f])[2]=t,d[3]=+e>0,d[4]=r,qn.apply(null,d)}(this,!o,i,n),o&&(r=n.pastFuture(+this,r)),n.postformat(r)},Xn.toISOString=Qn,Xn.toString=Qn,Xn.toJSON=Qn,Xn.locale=Zt,Xn.localeData=en,Xn.toIsoString=E("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Qn),Xn.lang=Jt,R("X",0,0,"unix"),R("x",0,0,"valueOf"),pe("x",se),pe("X",/[+-]?\d+(\.\d{1,3})?/),be("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),be("x",(function(e,t,n){n._d=new Date($(e))})),
//! moment.js
r.version="2.29.4",t=kt,r.fn=vn,r.min=function(){var e=[].slice.call(arguments,0);return _t("isBefore",e)},r.max=function(){var e=[].slice.call(arguments,0);return _t("isAfter",e)},r.now=function(){return Date.now?Date.now():+new Date},r.utc=p,r.unix=function(e){return kt(1e3*e)},r.months=function(e,t){return wn(e,t,"months")},r.isDate=l,r.locale=it,r.invalid=v,r.duration=Ht,r.isMoment=O,r.weekdays=function(e,t,n){return On(e,t,n,"weekdays")},r.parseZone=function(){return kt.apply(null,arguments).parseZone()},r.localeData=ct,r.isDuration=Pt,r.monthsShort=function(e,t){return wn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return On(e,t,n,"weekdaysMin")},r.defineLocale=at,r.updateLocale=function(e,t){if(null!=t){var n,r,o=Je;null!=et[e]&&null!=et[e].parentLocale?et[e].set(_(et[e]._config,t)):(null!=(r=ot(e))&&(o=r._config),t=_(o,t),null==r&&(t.abbr=e),(n=new M(t)).parentLocale=et[e],et[e]=n),it(e)}else null!=et[e]&&(null!=et[e].parentLocale?(et[e]=et[e].parentLocale,e===it()&&it(e)):null!=et[e]&&delete et[e]);return et[e]},r.locales=function(){return j(et)},r.weekdaysShort=function(e,t,n){return On(e,t,n,"weekdaysShort")},r.normalizeUnits=V,r.relativeTimeRounding=function(e){return void 0===e?Un:"function"==typeof e&&(Un=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==$n[e]&&(void 0===t?$n[e]:($n[e]=t,"s"===e&&($n.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=vn,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()}).call(this,n(355)(e))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(7);function o(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
o=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,i=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},c=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function f(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),c=new S(r||[]);return i(a,"_invoke",{value:E(e,n,c)}),a}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=f;var p={};function h(){}function m(){}function v(){}var g={};l(g,c,(function(){return this}));var b=Object.getPrototypeOf,y=b&&b(b(_([])));y&&y!==t&&n.call(y,c)&&(g=y);var w=v.prototype=h.prototype=Object.create(g);function O(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){var o;i(this,"_invoke",{value:function(i,a){function c(){return new t((function(o,c){!function o(i,a,c,u){var s=d(e[i],e,a);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==Object(r.a)(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,c,u)}),(function(e){o("throw",e,c,u)})):t.resolve(f).then((function(e){l.value=e,c(l)}),(function(e){return o("throw",e,c,u)}))}u(s.arg)}(i,a,o,c)}))}return o=o?o.then(c,c):c()}})}function E(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=j(a,n);if(c){if(c===p)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=d(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===p)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function j(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,j(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),p;var o=d(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function _(e){if(e||""===e){var t=e[c];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}throw new TypeError(Object(r.a)(e)+" is not iterable")}return m.prototype=v,i(w,"constructor",{value:v,configurable:!0}),i(v,"constructor",{value:m,configurable:!0}),m.displayName=l(v,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,l(e,s,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},O(x.prototype),l(x.prototype,u,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new x(f(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},O(w),l(w,s,"Generator"),l(w,c,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=_,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:_(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},e}},function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"b",(function(){return s}));var r={},o=[];function i(e,t){}function a(e,t){}function c(e,t,n){t||r[n]||(e(!1,n),r[n]=!0)}function u(e,t){c(i,e,t)}function s(e,t){c(a,e,t)}u.preMessage=function(e){o.push(e)},u.resetWarned=function(){r={}},u.noteOnce=s,t.a=u},function(e,t,n){"use strict";var r=n(13);e.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,n){"use strict";var r=n(288),o=n(43),i=n(166),a=r(r.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?a(e,t):function(){return e.apply(t,arguments)}}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"d",(function(){return a})),n.d(t,"a",(function(){return c}));var r=n(0),o=r.isValidElement;function i(e){return e&&o(e)&&e.type===r.Fragment}function a(e,t,n){return o(e)?r.cloneElement(e,"function"==typeof n?n(e.props||{}):n):t}function c(e,t){return a(e,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t}},function(e,t,n){"use strict";var r=n(18),o=n(273),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:r(e)||e===i}:function(e){return"object"==typeof e?null!==e:r(e)}},function(e,t,n){"use strict";var r=n(36),o=n(276),i=n(277),a=n(29),c=n(168),u=TypeError,s=Object.defineProperty,l=Object.getOwnPropertyDescriptor;t.f=r?i?function(e,t,n){if(a(e),t=c(t),a(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var r=l(e,t);r&&r.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:r.configurable,enumerable:"enumerable"in n?n.enumerable:r.enumerable,writable:!1})}return s(e,t,n)}:s:function(e,t,n){if(a(e),t=c(t),a(n),o)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw u("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){"use strict";function r(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(18),o=n(140),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a function")}},function(e,t,n){"use strict";var r=n(17),o=n(18),i=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e]):r[e]&&r[e][t]}},function(e,t,n){"use strict";var r=n(51).has;e.exports=function(e){return r(e),e}},function(e,t,n){"use strict";var r=n(18),o=n(41),i=n(278),a=n(220);e.exports=function(e,t,n,c){c||(c={});var u=c.enumerable,s=void 0!==c.name?c.name:t;if(r(n)&&i(n,s,c),c.global)u?e[t]=n:a(t,n);else{try{c.unsafe?e[t]&&(u=!0):delete e[t]}catch(e){}u?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!c.nonConfigurable,writable:!c.nonWritable})}return e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(486)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(3);function o(e,t){var n=Object(r.a)({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}},function(e,t,n){"use strict";var r=n(147),o=String;e.exports=function(e){if("Symbol"===r(e))throw TypeError("Cannot convert a Symbol value to a string");return o(e)}},function(e,t,n){"use strict";var r=n(68).has;e.exports=function(e){return r(e),e}},function(e,t,n){"use strict";var r=n(11),o=Set.prototype;e.exports={Set:Set,add:r(o.add),has:r(o.has),remove:r(o.delete),proto:o}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o=r.createContext(void 0),i=function(e){var t=e.children,n=e.size;return r.createElement(o.Consumer,null,(function(e){return r.createElement(o.Provider,{value:n||e},t)}))};t.b=o},function(e,t,n){"use strict";n.r(t),n.d(t,"Field",(function(){return G})),n.d(t,"List",(function(){return K})),n.d(t,"useForm",(function(){return ne})),n.d(t,"FormProvider",(function(){return oe})),n.d(t,"FieldContext",(function(){return y})),n.d(t,"ListContext",(function(){return w})),n.d(t,"useWatch",(function(){return le}));var r=n(0),o=n(2),i=n(22),a=n(1),c=n(3),u=n(8),s=n(23),l=n(24),f=n(9),d=n(31),p=n(32),h=n(118),m=n(35),v=n(191),g="RC_FORM_INTERNAL_HOOKS",b=function(){Object(m.a)(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")},y=r.createContext({getFieldValue:b,getFieldsValue:b,getFieldError:b,getFieldWarning:b,getFieldsError:b,isFieldsTouched:b,isFieldTouched:b,isFieldValidating:b,isFieldsValidating:b,resetFields:b,setFields:b,setFieldValue:b,setFieldsValue:b,validateFields:b,submit:b,getInternalHooks:function(){return b(),{dispatch:b,initEntityValue:b,registerField:b,useSubscribe:b,setInitialValues:b,destroyForm:b,setCallbacks:b,registerWatch:b,getFields:b,setValidateMessages:b,setPreserve:b,getInitialValue:b}}}),w=r.createContext(null);function O(e){return null==e?[]:Array.isArray(e)?e:[e]}function x(e){return e&&!!e._init}var E=n(34),j=n(81),k=n(344),C="'${name}' is not a valid ${type}",S={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:C,method:C,array:C,object:C,number:C,date:C,boolean:C,integer:C,float:C,regexp:C,email:C,url:C,hex:C},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}},_=n(62),M=k.a;function T(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}function P(e,t,n,r,o){return F.apply(this,arguments)}function F(){return(F=Object(j.a)(Object(E.a)().mark((function e(t,n,o,i,s){var l,f,d,p,h,m,v,g,b;return Object(E.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return delete(l=Object(c.a)({},o)).ruleIndex,M.warning=function(){},l.validator&&(f=l.validator,l.validator=function(){try{return f.apply(void 0,arguments)}catch(e){return console.error(e),Promise.reject("CODE_LOGIC_ERROR")}}),d=null,l&&"array"===l.type&&l.defaultField&&(d=l.defaultField,delete l.defaultField),p=new M(Object(a.a)({},t,[l])),h=Object(_.b)(S,i.validateMessages),p.messages(h),m=[],e.prev=10,e.next=13,Promise.resolve(p.validate(Object(a.a)({},t,n),Object(c.a)({},i)));case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(10),e.t0.errors&&(m=e.t0.errors.map((function(e,t){var n=e.message,o="CODE_LOGIC_ERROR"===n?h.default:n;return r.isValidElement(o)?r.cloneElement(o,{key:"error_".concat(t)}):o})));case 18:if(m.length||!d){e.next=23;break}return e.next=21,Promise.all(n.map((function(e,n){return P("".concat(t,".").concat(n),e,d,i,s)})));case 21:return v=e.sent,e.abrupt("return",v.reduce((function(e,t){return[].concat(Object(u.a)(e),Object(u.a)(t))}),[]));case 23:return g=Object(c.a)(Object(c.a)({},o),{},{name:t,enum:(o.enum||[]).join(", ")},s),b=m.map((function(e){return"string"==typeof e?T(e,g):e})),e.abrupt("return",b);case 26:case"end":return e.stop()}}),e,null,[[10,15]])})))).apply(this,arguments)}function N(e,t,n,r,o,i){var a,u=e.join("."),s=n.map((function(e,t){var n=e.validator,r=Object(c.a)(Object(c.a)({},e),{},{ruleIndex:t});return n&&(r.validator=function(e,t,r){var o=!1,i=n(e,t,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){Object(m.a)(!o,"Your validator function has already return a promise. `callback` will be ignored."),o||r.apply(void 0,t)}))}));o=i&&"function"==typeof i.then&&"function"==typeof i.catch,Object(m.a)(o,"`callback` is deprecated. Please return a promise instead."),o&&i.then((function(){r()})).catch((function(e){r(e||" ")}))}),r})).sort((function(e,t){var n=e.warningOnly,r=e.ruleIndex,o=t.warningOnly,i=t.ruleIndex;return!!n==!!o?r-i:n?1:-1}));if(!0===o)a=new Promise(function(){var e=Object(j.a)(Object(E.a)().mark((function e(n,o){var a,c,l;return Object(E.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=0;case 1:if(!(a<s.length)){e.next=12;break}return c=s[a],e.next=5,P(u,t,c,r,i);case 5:if(!(l=e.sent).length){e.next=9;break}return o([{errors:l,rule:c}]),e.abrupt("return");case 9:a+=1,e.next=1;break;case 12:n([]);case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var l=s.map((function(e){return P(u,t,e,r,i).then((function(t){return{errors:t,rule:e}}))}));a=(o?function(e){return R.apply(this,arguments)}(l):function(e){return A.apply(this,arguments)}(l)).then((function(e){return Promise.reject(e)}))}return a.catch((function(e){return e})),a}function A(){return(A=Object(j.a)(Object(E.a)().mark((function e(t){return Object(E.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,Object(u.a)(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function R(){return(R=Object(j.a)(Object(E.a)().mark((function e(t){var n;return Object(E.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.errors.length&&e([r]),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var D=n(7),L=n(108);function I(e){return O(e)}function z(e,t){var n={};return t.forEach((function(t){var r=Object(L.a)(e,t);n=Object(_.a)(n,t,r)})),n}function V(e,t){return e&&e.some((function(e){return H(e,t)}))}function H(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function W(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&"object"===Object(D.a)(t.target)&&e in t.target?t.target[e]:t}function B(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var o=e[t],i=t-n;return i>0?[].concat(Object(u.a)(e.slice(0,n)),[o],Object(u.a)(e.slice(n,t)),Object(u.a)(e.slice(t+1,r))):i<0?[].concat(Object(u.a)(e.slice(0,t)),Object(u.a)(e.slice(t+1,n+1)),[o],Object(u.a)(e.slice(n+1,r))):e}var Y=["name"],U=[];function $(e,t,n,r,o,i){return"function"==typeof e?e(t,n,"source"in i?{source:i.source}:{}):r!==o}var q=function(e){Object(d.a)(n,e);var t=Object(p.a)(n);function n(e){var o;(Object(s.a)(this,n),(o=t.call(this,e)).state={resetCount:0},o.cancelRegisterFunc=null,o.mounted=!1,o.touched=!1,o.dirty=!1,o.validatePromise=void 0,o.prevValidating=void 0,o.errors=U,o.warnings=U,o.cancelRegister=function(){var e=o.props,t=e.preserve,n=e.isListField,r=e.name;o.cancelRegisterFunc&&o.cancelRegisterFunc(n,t,I(r)),o.cancelRegisterFunc=null},o.getNamePath=function(){var e=o.props,t=e.name,n=e.fieldContext.prefixName,r=void 0===n?[]:n;return void 0!==t?[].concat(Object(u.a)(r),Object(u.a)(t)):[]},o.getRules=function(){var e=o.props,t=e.rules,n=void 0===t?[]:t,r=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(r):e}))},o.refresh=function(){o.mounted&&o.setState((function(e){return{resetCount:e.resetCount+1}}))},o.metaCache=null,o.triggerMetaEvent=function(e){var t=o.props.onMetaChange;if(t){var n=Object(c.a)(Object(c.a)({},o.getMeta()),{},{destroy:e});Object(v.a)(o.metaCache,n)||t(n),o.metaCache=n}else o.metaCache=null},o.onStoreChange=function(e,t,n){var r=o.props,i=r.shouldUpdate,a=r.dependencies,c=void 0===a?[]:a,u=r.onReset,s=n.store,l=o.getNamePath(),f=o.getValue(e),d=o.getValue(s),p=t&&V(t,l);switch("valueUpdate"===n.type&&"external"===n.source&&f!==d&&(o.touched=!0,o.dirty=!0,o.validatePromise=null,o.errors=U,o.warnings=U,o.triggerMetaEvent()),n.type){case"reset":if(!t||p)return o.touched=!1,o.dirty=!1,o.validatePromise=void 0,o.errors=U,o.warnings=U,o.triggerMetaEvent(),null==u||u(),void o.refresh();break;case"remove":if(i)return void o.reRender();break;case"setField":if(p){var h=n.data;return"touched"in h&&(o.touched=h.touched),"validating"in h&&!("originRCField"in h)&&(o.validatePromise=h.validating?Promise.resolve([]):null),"errors"in h&&(o.errors=h.errors||U),"warnings"in h&&(o.warnings=h.warnings||U),o.dirty=!0,o.triggerMetaEvent(),void o.reRender()}if(i&&!l.length&&$(i,e,s,f,d,n))return void o.reRender();break;case"dependenciesUpdate":if(c.map(I).some((function(e){return V(n.relatedFields,e)})))return void o.reRender();break;default:if(p||(!c.length||l.length||i)&&$(i,e,s,f,d,n))return void o.reRender()}!0===i&&o.reRender()},o.validateRules=function(e){var t=o.getNamePath(),n=o.getValue(),r=e||{},i=r.triggerName,a=r.validateOnly,c=void 0!==a&&a,s=Promise.resolve().then((function(){if(!o.mounted)return[];var r=o.props,a=r.validateFirst,c=void 0!==a&&a,l=r.messageVariables,f=o.getRules();i&&(f=f.filter((function(e){return e})).filter((function(e){var t=e.validateTrigger;return!t||O(t).includes(i)})));var d=N(t,n,f,e,c,l);return d.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:U;if(o.validatePromise===s){var t;o.validatePromise=null;var n=[],r=[];null===(t=e.forEach)||void 0===t||t.call(e,(function(e){var t=e.rule.warningOnly,o=e.errors,i=void 0===o?U:o;t?r.push.apply(r,Object(u.a)(i)):n.push.apply(n,Object(u.a)(i))})),o.errors=n,o.warnings=r,o.triggerMetaEvent(),o.reRender()}})),d}));return c||(o.validatePromise=s,o.dirty=!0,o.errors=U,o.warnings=U,o.triggerMetaEvent(),o.reRender()),s},o.isFieldValidating=function(){return!!o.validatePromise},o.isFieldTouched=function(){return o.touched},o.isFieldDirty=function(){return!(!o.dirty&&void 0===o.props.initialValue)||void 0!==(0,o.props.fieldContext.getInternalHooks(g).getInitialValue)(o.getNamePath())},o.getErrors=function(){return o.errors},o.getWarnings=function(){return o.warnings},o.isListField=function(){return o.props.isListField},o.isList=function(){return o.props.isList},o.isPreserve=function(){return o.props.preserve},o.getMeta=function(){return o.prevValidating=o.isFieldValidating(),{touched:o.isFieldTouched(),validating:o.prevValidating,errors:o.errors,warnings:o.warnings,name:o.getNamePath(),validated:null===o.validatePromise}},o.getOnlyChild=function(e){if("function"==typeof e){var t=o.getMeta();return Object(c.a)(Object(c.a)({},o.getOnlyChild(e(o.getControlled(),t,o.props.fieldContext))),{},{isFunction:!0})}var n=Object(h.a)(e);return 1===n.length&&r.isValidElement(n[0])?{child:n[0],isFunction:!1}:{child:n,isFunction:!1}},o.getValue=function(e){var t=o.props.fieldContext.getFieldsValue,n=o.getNamePath();return Object(L.a)(e||t(!0),n)},o.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=o.props,n=t.trigger,r=t.validateTrigger,i=t.getValueFromEvent,u=t.normalize,s=t.valuePropName,l=t.getValueProps,f=t.fieldContext,d=void 0!==r?r:f.validateTrigger,p=o.getNamePath(),h=f.getInternalHooks,m=f.getFieldsValue,v=h(g),b=v.dispatch,y=o.getValue(),w=l||function(e){return Object(a.a)({},s,e)},x=e[n],E=Object(c.a)(Object(c.a)({},e),w(y));E[n]=function(){var e;o.touched=!0,o.dirty=!0,o.triggerMetaEvent();for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e=i?i.apply(void 0,n):W.apply(void 0,[s].concat(n)),u&&(e=u(e,y,m(!0))),b({type:"updateValue",namePath:p,value:e}),x&&x.apply(void 0,n)};var j=O(d||[]);return j.forEach((function(e){var t=E[e];E[e]=function(){t&&t.apply(void 0,arguments);var n=o.props.rules;n&&n.length&&b({type:"validateField",namePath:p,triggerName:e})}})),E},e.fieldContext)&&(0,(0,e.fieldContext.getInternalHooks)(g).initEntityValue)(Object(f.a)(o));return o}return Object(l.a)(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(g).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var e,t=this.state.resetCount,n=this.props.children,o=this.getOnlyChild(n),i=o.child;return o.isFunction?e=i:r.isValidElement(i)?e=r.cloneElement(i,this.getControlled(i.props)):(Object(m.a)(!i,"`children` of Field is not validate ReactElement."),e=i),r.createElement(r.Fragment,{key:t},e)}}]),n}(r.Component);q.contextType=y,q.defaultProps={trigger:"onChange",valuePropName:"value"};var G=function(e){var t=e.name,n=Object(i.a)(e,Y),a=r.useContext(y),c=r.useContext(w),u=void 0!==t?I(t):void 0,s="keep";return n.isListField||(s="_".concat((u||[]).join("_"))),r.createElement(q,Object(o.a)({key:s,name:u,isListField:!!c},n,{fieldContext:a}))},K=function(e){var t=e.name,n=e.initialValue,o=e.children,i=e.rules,a=e.validateTrigger,s=e.isListField,l=r.useContext(y),f=r.useContext(w),d=r.useRef({keys:[],id:0}).current,p=r.useMemo((function(){var e=I(l.prefixName)||[];return[].concat(Object(u.a)(e),Object(u.a)(I(t)))}),[l.prefixName,t]),h=r.useMemo((function(){return Object(c.a)(Object(c.a)({},l),{},{prefixName:p})}),[l,p]),v=r.useMemo((function(){return{getKey:function(e){var t=p.length,n=e[t];return[d.keys[n],e.slice(t+1)]}}}),[p]);if("function"!=typeof o)return Object(m.a)(!1,"Form.List only accepts function as children."),null;return r.createElement(w.Provider,{value:v},r.createElement(y.Provider,{value:h},r.createElement(G,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:i,validateTrigger:a,initialValue:n,isList:!0,isListField:null!=s?s:!!f},(function(e,t){var n=e.value,r=void 0===n?[]:n,i=e.onChange,a=l.getFieldValue,c=function(){return a(p||[])||[]},s={add:function(e,t){var n=c();t>=0&&t<=n.length?(d.keys=[].concat(Object(u.a)(d.keys.slice(0,t)),[d.id],Object(u.a)(d.keys.slice(t))),i([].concat(Object(u.a)(n.slice(0,t)),[e],Object(u.a)(n.slice(t))))):(d.keys=[].concat(Object(u.a)(d.keys),[d.id]),i([].concat(Object(u.a)(n),[e]))),d.id+=1},remove:function(e){var t=c(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(d.keys=d.keys.filter((function(e,t){return!n.has(t)})),i(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=c();e<0||e>=n.length||t<0||t>=n.length||(d.keys=B(d.keys,e,t),i(B(n,e,t)))}}},f=r||[];return Array.isArray(f)||(f=[]),o(f.map((function(e,t){var n=d.keys[t];return void 0===n&&(d.keys[t]=d.id,n=d.keys[t],d.id+=1),{name:t,key:n,isListField:!0}})),s,t)}))))},Q=n(4);var X="__@field_split__";function Z(e){return e.map((function(e){return"".concat(Object(D.a)(e),":").concat(e)})).join(X)}var J=function(){function e(){Object(s.a)(this,e),this.kvs=new Map}return Object(l.a)(e,[{key:"set",value:function(e,t){this.kvs.set(Z(e),t)}},{key:"get",value:function(e){return this.kvs.get(Z(e))}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(Z(e))}},{key:"map",value:function(e){return Object(u.a)(this.kvs.entries()).map((function(t){var n=Object(Q.a)(t,2),r=n[0],o=n[1],i=r.split(X);return e({key:i.map((function(e){var t=e.match(/^([^:]*):(.*)$/),n=Object(Q.a)(t,3),r=n[1],o=n[2];return"number"===r?Number(o):o})),value:o})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}(),ee=["name"],te=Object(l.a)((function e(t){var n=this;Object(s.a)(this,e),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldWarning:n.getFieldWarning,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldValue:n.setFieldValue,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,_init:!0,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===g?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,destroyForm:n.destroyForm,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve,getInitialValue:n.getInitialValue,registerWatch:n.registerWatch}):(Object(m.a)(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.prevWithoutPreserves=null,this.setInitialValues=function(e,t){if(n.initialValues=e||{},t){var r,o=Object(_.b)(e,n.store);null===(r=n.prevWithoutPreserves)||void 0===r||r.map((function(t){var n=t.key;o=Object(_.a)(o,n,Object(L.a)(e,n))})),n.prevWithoutPreserves=null,n.updateStore(o)}},this.destroyForm=function(){var e=new J;n.getFieldEntities(!0).forEach((function(t){n.isMergedPreserve(t.isPreserve())||e.set(t.getNamePath(),!0)})),n.prevWithoutPreserves=e},this.getInitialValue=function(e){var t=Object(L.a)(n.initialValues,e);return e.length?Object(_.b)(t):t},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.watchList=[],this.registerWatch=function(e){return n.watchList.push(e),function(){n.watchList=n.watchList.filter((function(t){return t!==e}))}},this.notifyWatch=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(n.watchList.length){var t=n.getFieldsValue(),r=n.getFieldsValue(!0);n.watchList.forEach((function(n){n(t,r,e)}))}},this.timeoutId=null,this.warningUnhooked=function(){0},this.updateStore=function(e){n.store=e},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new J;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=I(e);return t.get(n)||{INVALIDATE_NAME_PATH:I(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),o=[];return r.forEach((function(n){var r,i="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var a="getMeta"in n?n.getMeta():null;t(a)&&o.push(i)}else o.push(i)})),z(n.store,o.map(I))},this.getFieldValue=function(e){n.warningUnhooked();var t=I(e);return Object(L.a)(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors(),warnings:t.getWarnings()}:{name:I(e[n]),errors:[],warnings:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=I(e);return n.getFieldsError([t])[0].errors},this.getFieldWarning=function(e){n.warningUnhooked();var t=I(e);return n.getFieldsError([t])[0].warnings},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var o,i=t[0],a=t[1],c=!1;0===t.length?o=null:1===t.length?Array.isArray(i)?(o=i.map(I),c=!1):(o=null,c=i):(o=i.map(I),c=a);var s=n.getFieldEntities(!0),l=function(e){return e.isFieldTouched()};if(!o)return c?s.every(l):s.some(l);var f=new J;o.forEach((function(e){f.set(e,[])})),s.forEach((function(e){var t=e.getNamePath();o.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&f.update(n,(function(t){return[].concat(Object(u.a)(t),[e])}))}))}));var d=function(e){return e.some(l)},p=f.map((function(e){return e.value}));return c?p.every(d):p.some(d)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(I);return t.some((function(e){var t=e.getNamePath();return V(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new J,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var o=t.get(r)||new Set;o.add({entity:e,value:n}),t.set(r,o)}}));var o,i=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var o=r.getNamePath();if(void 0!==n.getInitialValue(o))Object(m.a)(!1,"Form already set 'initialValues' with path '".concat(o.join("."),"'. Field can not overwrite it."));else{var i=t.get(o);if(i&&i.size>1)Object(m.a)(!1,"Multiple Field with path '".concat(o.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(i){var a=n.getFieldValue(o);e.skipExist&&void 0!==a||n.updateStore(Object(_.a)(n.store,o,Object(u.a)(i)[0].value))}}}}))};e.entities?o=e.entities:e.namePathList?(o=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=o).push.apply(n,Object(u.a)(Object(u.a)(r).map((function(e){return e.entity}))))}))):o=r,i(o)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.updateStore(Object(_.b)(n.initialValues)),n.resetWithFieldInitialValue(),n.notifyObservers(t,null,{type:"reset"}),void n.notifyWatch();var r=e.map(I);r.forEach((function(e){var t=n.getInitialValue(e);n.updateStore(Object(_.a)(n.store,e,t))})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"}),n.notifyWatch(r)},this.setFields=function(e){n.warningUnhooked();var t=n.store,r=[];e.forEach((function(e){var o=e.name,a=Object(i.a)(e,ee),c=I(o);r.push(c),"value"in a&&n.updateStore(Object(_.a)(n.store,c,a.value)),n.notifyObservers(t,[c],{type:"setField",data:e})})),n.notifyWatch(r)},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=e.getMeta(),o=Object(c.a)(Object(c.a)({},r),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(o,"originRCField",{value:!0}),o}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===Object(L.a)(n.store,r)&&n.updateStore(Object(_.a)(n.store,r,t))}},this.isMergedPreserve=function(e){var t=void 0!==e?e:n.preserve;return null==t||t},this.registerField=function(e){n.fieldEntities.push(e);var t=e.getNamePath();if(n.notifyWatch([t]),void 0!==e.props.initialValue){var r=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(r,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(r,o){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e})),!n.isMergedPreserve(o)&&(!r||i.length>1)){var a=r?void 0:n.getInitialValue(t);if(t.length&&n.getFieldValue(t)!==a&&n.fieldEntities.every((function(e){return!H(e.getNamePath(),t)}))){var c=n.store;n.updateStore(Object(_.a)(c,t,a,!0)),n.notifyObservers(c,[t],{type:"remove"}),n.triggerDependenciesUpdate(c,t)}}n.notifyWatch([t])}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var o=e.namePath,i=e.triggerName;n.validateFields([o],{triggerName:i})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var o=Object(c.a)(Object(c.a)({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,o)}))}else n.forceRootUpdate()},this.triggerDependenciesUpdate=function(e,t){var r=n.getDependencyChildrenFields(t);return r.length&&n.validateFields(r),n.notifyObservers(e,r,{type:"dependenciesUpdate",relatedFields:[t].concat(Object(u.a)(r))}),r},this.updateValue=function(e,t){var r=I(e),o=n.store;n.updateStore(Object(_.a)(n.store,r,t)),n.notifyObservers(o,[r],{type:"valueUpdate",source:"internal"}),n.notifyWatch([r]);var i=n.triggerDependenciesUpdate(o,r),a=n.callbacks.onValuesChange;a&&a(z(n.store,[r]),n.getFieldsValue());n.triggerOnFieldsChange([r].concat(Object(u.a)(i)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;if(e){var r=Object(_.b)(n.store,e);n.updateStore(r)}n.notifyObservers(t,null,{type:"valueUpdate",source:"external"}),n.notifyWatch()},this.setFieldValue=function(e,t){n.setFields([{name:e,value:t}])},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],o=new J;n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=I(t);o.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))}));return function e(n){(o.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var o=n.getNamePath();n.isFieldDirty()&&o.length&&(r.push(o),e(o))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var o=n.getFields();if(t){var i=new J;t.forEach((function(e){var t=e.name,n=e.errors;i.set(t,n)})),o.forEach((function(e){e.errors=i.get(e.name)||e.errors}))}var a=o.filter((function(t){var n=t.name;return V(e,n)}));a.length&&r(a,o)}},this.validateFields=function(e,t){var r,o;n.warningUnhooked(),Array.isArray(e)||"string"==typeof e||"string"==typeof t?(r=e,o=t):o=e;var i=!!r,a=i?r.map(I):[],s=[],l=String(Date.now()),f=new Set;n.getFieldEntities(!0).forEach((function(e){var t;if(i||a.push(e.getNamePath()),(null===(t=o)||void 0===t?void 0:t.recursive)&&i){var d=e.getNamePath();d.every((function(e,t){return r[t]===e||void 0===r[t]}))&&a.push(d)}if(e.props.rules&&e.props.rules.length){var p=e.getNamePath();if(f.add(p.join(l)),!i||V(a,p)){var h=e.validateRules(Object(c.a)({validateMessages:Object(c.a)(Object(c.a)({},S),n.validateMessages)},o));s.push(h.then((function(){return{name:p,errors:[],warnings:[]}})).catch((function(e){var t,n=[],r=[];return null===(t=e.forEach)||void 0===t||t.call(e,(function(e){var t=e.rule.warningOnly,o=e.errors;t?r.push.apply(r,Object(u.a)(o)):n.push.apply(n,Object(u.a)(o))})),n.length?Promise.reject({name:p,errors:n,warnings:r}):{name:p,errors:n,warnings:r}})))}}}));var d=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(o,i){e.forEach((function(e,a){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[a]=e,n>0||(t&&i(r),o(r))}))}))})):Promise.resolve([])}(s);n.lastValidatePromise=d,d.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var p=d.then((function(){return n.lastValidatePromise===d?Promise.resolve(n.getFieldsValue(a)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(a),errorFields:t,outOfDate:n.lastValidatePromise!==d})}));p.catch((function(e){return e}));var h=a.filter((function(e){return f.has(e.join(l))}));return n.triggerOnFieldsChange(h),p},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t}));var ne=function(e){var t=r.useRef(),n=r.useState({}),o=Object(Q.a)(n,2)[1];if(!t.current)if(e)t.current=e;else{var i=new te((function(){o({})}));t.current=i.getForm()}return[t.current]},re=r.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),oe=function(e){var t=e.validateMessages,n=e.onFormChange,o=e.onFormFinish,i=e.children,u=r.useContext(re),s=r.useRef({});return r.createElement(re.Provider,{value:Object(c.a)(Object(c.a)({},u),{},{validateMessages:Object(c.a)(Object(c.a)({},u.validateMessages),t),triggerFormChange:function(e,t){n&&n(e,{changedFields:t,forms:s.current}),u.triggerFormChange(e,t)},triggerFormFinish:function(e,t){o&&o(e,{values:t,forms:s.current}),u.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(s.current=Object(c.a)(Object(c.a)({},s.current),{},Object(a.a)({},e,t))),u.registerForm(e,t)},unregisterForm:function(e){var t=Object(c.a)({},s.current);delete t[e],s.current=t,u.unregisterForm(e)}})},i)},ie=re,ae=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"],ce=function(e,t){var n=e.name,a=e.initialValues,s=e.fields,l=e.form,f=e.preserve,d=e.children,p=e.component,h=void 0===p?"form":p,m=e.validateMessages,v=e.validateTrigger,b=void 0===v?"onChange":v,O=e.onValuesChange,x=e.onFieldsChange,E=e.onFinish,j=e.onFinishFailed,k=Object(i.a)(e,ae),C=r.useContext(ie),S=ne(l),_=Object(Q.a)(S,1)[0],M=_.getInternalHooks(g),T=M.useSubscribe,P=M.setInitialValues,F=M.setCallbacks,N=M.setValidateMessages,A=M.setPreserve,R=M.destroyForm;r.useImperativeHandle(t,(function(){return _})),r.useEffect((function(){return C.registerForm(n,_),function(){C.unregisterForm(n)}}),[C,_,n]),N(Object(c.a)(Object(c.a)({},C.validateMessages),m)),F({onValuesChange:O,onFieldsChange:function(e){if(C.triggerFormChange(n,e),x){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];x.apply(void 0,[e].concat(r))}},onFinish:function(e){C.triggerFormFinish(n,e),E&&E(e)},onFinishFailed:j}),A(f);var L,I=r.useRef(null);P(a,!I.current),I.current||(I.current=!0),r.useEffect((function(){return R}),[]);var z="function"==typeof d;z?L=d(_.getFieldsValue(!0),_):L=d;T(!z);var V=r.useRef();r.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==Object(D.a)(e)||"object"!==Object(D.a)(t))return!1;var n=Object.keys(e),r=Object.keys(t),o=new Set([].concat(n,r));return Object(u.a)(o).every((function(n){var r=e[n],o=t[n];return"function"==typeof r&&"function"==typeof o||r===o}))})(V.current||[],s||[])||_.setFields(s||[]),V.current=s}),[s,_]);var H=r.useMemo((function(){return Object(c.a)(Object(c.a)({},_),{},{validateTrigger:b})}),[_,b]),W=r.createElement(w.Provider,{value:null},r.createElement(y.Provider,{value:H},L));return!1===h?W:r.createElement(h,Object(o.a)({},k,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),_.submit()},onReset:function(e){var t;e.preventDefault(),_.resetFields(),null===(t=k.onReset)||void 0===t||t.call(k,e)}}),W)};function ue(e){try{return JSON.stringify(e)}catch(e){return Math.random()}}var se=function(){};var le=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t[0],i=void 0===o?[]:o,a=t[1],c=void 0===a?{}:a,u=x(c)?{form:c}:c,s=u.form,l=Object(r.useState)(),f=Object(Q.a)(l,2),d=f[0],p=f[1],h=Object(r.useMemo)((function(){return ue(d)}),[d]),m=Object(r.useRef)(h);m.current=h;var v=Object(r.useContext)(y),b=s||v,w=b&&b._init,O=I(i),E=Object(r.useRef)(O);return E.current=O,se(O),Object(r.useEffect)((function(){if(w){var e=b.getFieldsValue,t=(0,(0,b.getInternalHooks)(g).registerWatch)((function(e,t){var n=Object(L.a)(u.preserve?t:e,E.current),r=ue(n);m.current!==r&&(m.current=r,p(n))})),n=Object(L.a)(u.preserve?e(!0):e(),E.current);return p(n),t}}),[w]),d},fe=r.forwardRef(ce);fe.FormProvider=oe,fe.Field=G,fe.List=K,fe.useForm=ne,fe.useWatch=le;t.default=fe},function(e,t,n){"use strict";n.r(t),n.d(t,"createBrowserHistory",(function(){return x})),n.d(t,"createHashHistory",(function(){return S})),n.d(t,"createMemoryHistory",(function(){return M})),n.d(t,"createLocation",(function(){return v})),n.d(t,"locationsAreEqual",(function(){return g})),n.d(t,"parsePath",(function(){return h})),n.d(t,"createPath",(function(){return m}));var r=n(2);function o(e){return"/"===e.charAt(0)}function i(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],c=e&&o(e),u=t&&o(t),s=c||u;if(e&&o(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var l=a[a.length-1];n="."===l||".."===l||""===l}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?i(a,d):".."===p?(i(a,d),f++):f&&(i(a,d),f--)}if(!s)for(;f--;f)a.unshift("..");!s||""===a[0]||a[0]&&o(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function c(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var u=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=c(t),o=c(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},s=n(59);function l(e){return"/"===e.charAt(0)?e:"/"+e}function f(e){return"/"===e.charAt(0)?e.substr(1):e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}function m(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function v(e,t,n,o){var i;"string"==typeof e?(i=h(e)).state=t:(void 0===(i=Object(r.a)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),o?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,o.pathname)):i.pathname=o.pathname:i.pathname||(i.pathname="/"),i}function g(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&u(e.state,t.state)}function b(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var y=!("undefined"==typeof window||!window.document||!window.document.createElement);function w(e,t){t(window.confirm(e))}function O(){try{return window.history.state||{}}catch(e){return{}}}function x(e){void 0===e&&(e={}),y||Object(s.default)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,c=a.forceRefresh,u=void 0!==c&&c,f=a.getUserConfirmation,h=void 0===f?w:f,g=a.keyLength,x=void 0===g?6:g,E=e.basename?p(l(e.basename)):"";function j(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return E&&(i=d(i,E)),v(i,r,n)}function k(){return Math.random().toString(36).substr(2,x)}var C=b();function S(e){Object(r.a)(z,e),z.length=n.length,C.notifyListeners(z.location,z.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||P(j(e.state))}function M(){P(j(O()))}var T=!1;function P(e){if(T)T=!1,S();else{C.confirmTransitionTo(e,"POP",h,(function(t){t?S({action:"POP",location:e}):function(e){var t=z.location,n=N.indexOf(t.key);-1===n&&(n=0);var r=N.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(T=!0,R(o))}(e)}))}}var F=j(O()),N=[F.key];function A(e){return E+m(e)}function R(e){n.go(e)}var D=0;function L(e){1===(D+=e)&&1===e?(window.addEventListener("popstate",_),i&&window.addEventListener("hashchange",M)):0===D&&(window.removeEventListener("popstate",_),i&&window.removeEventListener("hashchange",M))}var I=!1;var z={length:n.length,action:"POP",location:F,createHref:A,push:function(e,t){var r=v(e,t,k(),z.location);C.confirmTransitionTo(r,"PUSH",h,(function(e){if(e){var t=A(r),i=r.key,a=r.state;if(o)if(n.pushState({key:i,state:a},null,t),u)window.location.href=t;else{var c=N.indexOf(z.location.key),s=N.slice(0,c+1);s.push(r.key),N=s,S({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=v(e,t,k(),z.location);C.confirmTransitionTo(r,"REPLACE",h,(function(e){if(e){var t=A(r),i=r.key,a=r.state;if(o)if(n.replaceState({key:i,state:a},null,t),u)window.location.replace(t);else{var c=N.indexOf(z.location.key);-1!==c&&(N[c]=r.key),S({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:R,goBack:function(){R(-1)},goForward:function(){R(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return I||(L(1),I=!0),function(){return I&&(I=!1,L(-1)),t()}},listen:function(e){var t=C.appendListener(e);return L(1),function(){L(-1),t()}}};return z}var E={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+f(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:f,decodePath:l},slash:{encodePath:l,decodePath:l}};function j(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function k(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function C(e){window.location.replace(j(window.location.href)+"#"+e)}function S(e){void 0===e&&(e={}),y||Object(s.default)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,i=void 0===o?w:o,a=n.hashType,c=void 0===a?"slash":a,u=e.basename?p(l(e.basename)):"",f=E[c],h=f.encodePath,g=f.decodePath;function O(){var e=g(k());return u&&(e=d(e,u)),v(e)}var x=b();function S(e){Object(r.a)(z,e),z.length=t.length,x.notifyListeners(z.location,z.action)}var _=!1,M=null;function T(){var e,t,n=k(),r=h(n);if(n!==r)C(r);else{var o=O(),a=z.location;if(!_&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(M===m(o))return;M=null,function(e){if(_)_=!1,S();else{x.confirmTransitionTo(e,"POP",i,(function(t){t?S({action:"POP",location:e}):function(e){var t=z.location,n=A.lastIndexOf(m(t));-1===n&&(n=0);var r=A.lastIndexOf(m(e));-1===r&&(r=0);var o=n-r;o&&(_=!0,R(o))}(e)}))}}(o)}}var P=k(),F=h(P);P!==F&&C(F);var N=O(),A=[m(N)];function R(e){t.go(e)}var D=0;function L(e){1===(D+=e)&&1===e?window.addEventListener("hashchange",T):0===D&&window.removeEventListener("hashchange",T)}var I=!1;var z={length:t.length,action:"POP",location:N,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=j(window.location.href)),n+"#"+h(u+m(e))},push:function(e,t){var n=v(e,void 0,void 0,z.location);x.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=m(n),r=h(u+t);if(k()!==r){M=t,function(e){window.location.hash=e}(r);var o=A.lastIndexOf(m(z.location)),i=A.slice(0,o+1);i.push(t),A=i,S({action:"PUSH",location:n})}else S()}}))},replace:function(e,t){var n=v(e,void 0,void 0,z.location);x.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=m(n),r=h(u+t);k()!==r&&(M=t,C(r));var o=A.indexOf(m(z.location));-1!==o&&(A[o]=t),S({action:"REPLACE",location:n})}}))},go:R,goBack:function(){R(-1)},goForward:function(){R(1)},block:function(e){void 0===e&&(e=!1);var t=x.setPrompt(e);return I||(L(1),I=!0),function(){return I&&(I=!1,L(-1)),t()}},listen:function(e){var t=x.appendListener(e);return L(1),function(){L(-1),t()}}};return z}function _(e,t,n){return Math.min(Math.max(e,t),n)}function M(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,c=void 0===a?0:a,u=t.keyLength,s=void 0===u?6:u,l=b();function f(e){Object(r.a)(w,e),w.length=w.entries.length,l.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,s)}var p=_(c,0,i.length-1),h=i.map((function(e){return v(e,void 0,"string"==typeof e?d():e.key||d())})),g=m;function y(e){var t=_(w.index+e,0,w.entries.length-1),r=w.entries[t];l.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:g,push:function(e,t){var r=v(e,t,d(),w.location);l.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=v(e,t,d(),w.location);l.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:y,goBack:function(){y(-1)},goForward:function(){y(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return w}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c}));var r=n(0),o=n(42),i=Object(o.a)()?r.useLayoutEffect:r.useEffect,a=function(e,t){var n=r.useRef(!0);i((function(){return e(n.current)}),t),i((function(){return n.current=!1,function(){n.current=!0}}),[])},c=function(e,t){a((function(t){if(!t)return e()}),t)};t.a=a},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return m})),n.d(t,"CSSMotionList",(function(){return ee}));var r=n(1),o=n(3),i=n(4),a=n(7),c=n(5),u=n.n(c),s=n(110),l=n(25),f=n(0),d=n(22),p=["children"],h=f.createContext({});function m(e){var t=e.children,n=Object(d.a)(e,p);return f.createElement(h.Provider,{value:n},t)}var v=n(23),g=n(24),b=n(31),y=n(32),w=function(e){Object(b.a)(n,e);var t=Object(y.a)(n);function n(){return Object(v.a)(this,n),t.apply(this,arguments)}return Object(g.a)(n,[{key:"render",value:function(){return this.props.children}}]),n}(f.Component),O=n(58),x=n(42);function E(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var j,k,C,S=(j=Object(x.a)(),k="undefined"!=typeof window?window:{},C={animationend:E("Animation","AnimationEnd"),transitionend:E("Transition","TransitionEnd")},j&&("AnimationEvent"in k||delete C.animationend.animation,"TransitionEvent"in k||delete C.transitionend.transition),C),_={};if(Object(x.a)()){var M=document.createElement("div");_=M.style}var T={};function P(e){if(T[e])return T[e];var t=S[e];if(t)for(var n=Object.keys(t),r=n.length,o=0;o<r;o+=1){var i=n[o];if(Object.prototype.hasOwnProperty.call(t,i)&&i in _)return T[e]=t[i],T[e]}return""}var F=P("animationend"),N=P("transitionend"),A=!(!F||!N),R=F||"animationend",D=N||"transitionend";function L(e,t){return e?"object"===Object(a.a)(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}var I=Object(x.a)()?f.useLayoutEffect:f.useEffect,z=n(30),V=["prepare","start","active","end"],H=["prepare","prepared"];function W(e){return"active"===e||"end"===e}var B=function(e,t,n){var r=Object(O.a)("none"),o=Object(i.a)(r,2),a=o[0],c=o[1],u=function(){var e=f.useRef(null);function t(){z.a.cancel(e.current)}return f.useEffect((function(){return function(){t()}}),[]),[function n(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;t();var i=Object(z.a)((function(){o<=1?r({isCanceled:function(){return i!==e.current}}):n(r,o-1)}));e.current=i},t]}(),s=Object(i.a)(u,2),l=s[0],d=s[1];var p=t?H:V;return I((function(){if("none"!==a&&"end"!==a){var e=p.indexOf(a),t=p[e+1],r=n(a);!1===r?c(t,!0):t&&l((function(e){function n(){e.isCanceled()||c(t,!0)}!0===r?n():Promise.resolve(r).then(n)}))}}),[e,a]),f.useEffect((function(){return function(){d()}}),[]),[function(){c("prepare",!0)},a]};function Y(e,t,n,a){var c=a.motionEnter,u=void 0===c||c,s=a.motionAppear,l=void 0===s||s,d=a.motionLeave,p=void 0===d||d,h=a.motionDeadline,m=a.motionLeaveImmediately,v=a.onAppearPrepare,g=a.onEnterPrepare,b=a.onLeavePrepare,y=a.onAppearStart,w=a.onEnterStart,x=a.onLeaveStart,E=a.onAppearActive,j=a.onEnterActive,k=a.onLeaveActive,C=a.onAppearEnd,S=a.onEnterEnd,_=a.onLeaveEnd,M=a.onVisibleChanged,T=Object(O.a)(),P=Object(i.a)(T,2),F=P[0],N=P[1],A=Object(O.a)("none"),L=Object(i.a)(A,2),z=L[0],V=L[1],H=Object(O.a)(null),Y=Object(i.a)(H,2),U=Y[0],$=Y[1],q=Object(f.useRef)(!1),G=Object(f.useRef)(null);function K(){return n()}var Q=Object(f.useRef)(!1);function X(){V("none",!0),$(null,!0)}function Z(e){var t=K();if(!e||e.deadline||e.target===t){var n,r=Q.current;"appear"===z&&r?n=null==C?void 0:C(t,e):"enter"===z&&r?n=null==S?void 0:S(t,e):"leave"===z&&r&&(n=null==_?void 0:_(t,e)),"none"!==z&&r&&!1!==n&&X()}}var J=function(e){var t=Object(f.useRef)(),n=Object(f.useRef)(e);n.current=e;var r=f.useCallback((function(e){n.current(e)}),[]);function o(e){e&&(e.removeEventListener(D,r),e.removeEventListener(R,r))}return f.useEffect((function(){return function(){o(t.current)}}),[]),[function(e){t.current&&t.current!==e&&o(t.current),e&&e!==t.current&&(e.addEventListener(D,r),e.addEventListener(R,r),t.current=e)},o]}(Z),ee=Object(i.a)(J,1)[0],te=function(e){var t,n,o;switch(e){case"appear":return t={},Object(r.a)(t,"prepare",v),Object(r.a)(t,"start",y),Object(r.a)(t,"active",E),t;case"enter":return n={},Object(r.a)(n,"prepare",g),Object(r.a)(n,"start",w),Object(r.a)(n,"active",j),n;case"leave":return o={},Object(r.a)(o,"prepare",b),Object(r.a)(o,"start",x),Object(r.a)(o,"active",k),o;default:return{}}},ne=f.useMemo((function(){return te(z)}),[z]),re=B(z,!e,(function(e){if("prepare"===e){var t=ne.prepare;return!!t&&t(K())}var n;ae in ne&&$((null===(n=ne[ae])||void 0===n?void 0:n.call(ne,K(),null))||null);return"active"===ae&&(ee(K()),h>0&&(clearTimeout(G.current),G.current=setTimeout((function(){Z({deadline:!0})}),h))),"prepared"===ae&&X(),!0})),oe=Object(i.a)(re,2),ie=oe[0],ae=oe[1],ce=W(ae);Q.current=ce,I((function(){N(t);var n,r=q.current;q.current=!0,!r&&t&&l&&(n="appear"),r&&t&&u&&(n="enter"),(r&&!t&&p||!r&&m&&!t&&p)&&(n="leave");var o=te(n);n&&(e||o.prepare)?(V(n),ie()):V("none")}),[t]),Object(f.useEffect)((function(){("appear"===z&&!l||"enter"===z&&!u||"leave"===z&&!p)&&V("none")}),[l,u,p]),Object(f.useEffect)((function(){return function(){q.current=!1,clearTimeout(G.current)}}),[]);var ue=f.useRef(!1);Object(f.useEffect)((function(){F&&(ue.current=!0),void 0!==F&&"none"===z&&((ue.current||F)&&(null==M||M(F)),ue.current=!0)}),[F,z]);var se=U;return ne.prepare&&"start"===ae&&(se=Object(o.a)({transition:"none"},se)),[z,ae,se,null!=F?F:t]}var U=function(e){var t=e;"object"===Object(a.a)(e)&&(t=e.transitionSupport);var n=f.forwardRef((function(e,n){var a=e.visible,c=void 0===a||a,d=e.removeOnLeave,p=void 0===d||d,m=e.forceRender,v=e.children,g=e.motionName,b=e.leavedClassName,y=e.eventProps,O=function(e,n){return!(!e.motionName||!t||!1===n)}(e,f.useContext(h).motion),x=Object(f.useRef)(),E=Object(f.useRef)();var j=Y(O,c,(function(){try{return x.current instanceof HTMLElement?x.current:Object(s.a)(E.current)}catch(e){return null}}),e),k=Object(i.a)(j,4),C=k[0],S=k[1],_=k[2],M=k[3],T=f.useRef(M);M&&(T.current=!0);var P,F=f.useCallback((function(e){x.current=e,Object(l.b)(n,e)}),[n]),N=Object(o.a)(Object(o.a)({},y),{},{visible:c});if(v)if("none"===C)P=M?v(Object(o.a)({},N),F):!p&&T.current&&b?v(Object(o.a)(Object(o.a)({},N),{},{className:b}),F):m||!p&&!b?v(Object(o.a)(Object(o.a)({},N),{},{style:{display:"none"}}),F):null;else{var A,R;"prepare"===S?R="prepare":W(S)?R="active":"start"===S&&(R="start");var D=L(g,"".concat(C,"-").concat(R));P=v(Object(o.a)(Object(o.a)({},N),{},{className:u()(L(g,C),(A={},Object(r.a)(A,D,D&&R),Object(r.a)(A,g,"string"==typeof g),A)),style:_}),F)}else P=null;f.isValidElement(P)&&Object(l.c)(P)&&(P.ref||(P=f.cloneElement(P,{ref:F})));return f.createElement(w,{ref:E},P)}));return n.displayName="CSSMotion",n}(A),$=n(2),q=n(9);function G(e){var t;return t=e&&"object"===Object(a.a)(e)&&"key"in e?e:{key:e},Object(o.a)(Object(o.a)({},t),{},{key:String(t.key)})}function K(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(G)}function Q(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,i=t.length,a=K(e),c=K(t);a.forEach((function(e){for(var t=!1,a=r;a<i;a+=1){var u=c[a];if(u.key===e.key){r<a&&(n=n.concat(c.slice(r,a).map((function(e){return Object(o.a)(Object(o.a)({},e),{},{status:"add"})}))),r=a),n.push(Object(o.a)(Object(o.a)({},u),{},{status:"keep"})),r+=1,t=!0;break}}t||n.push(Object(o.a)(Object(o.a)({},e),{},{status:"remove"}))})),r<i&&(n=n.concat(c.slice(r).map((function(e){return Object(o.a)(Object(o.a)({},e),{},{status:"add"})}))));var u={};n.forEach((function(e){var t=e.key;u[t]=(u[t]||0)+1}));var s=Object.keys(u).filter((function(e){return u[e]>1}));return s.forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||"remove"!==r}))).forEach((function(t){t.key===e&&(t.status="keep")}))})),n}var X=["component","children","onVisibleChanged","onAllRemoved"],Z=["status"],J=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];var ee=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:U,n=function(e){Object(b.a)(i,e);var n=Object(y.a)(i);function i(){var e;Object(v.a)(this,i);for(var t=arguments.length,a=new Array(t),c=0;c<t;c++)a[c]=arguments[c];return e=n.call.apply(n,[this].concat(a)),Object(r.a)(Object(q.a)(e),"state",{keyEntities:[]}),Object(r.a)(Object(q.a)(e),"removeKey",(function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:Object(o.a)(Object(o.a)({},e),{},{status:"removed"})}));return e.setState({keyEntities:n}),n.filter((function(e){return"removed"!==e.status})).length})),e}return Object(g.a)(i,[{key:"render",value:function(){var e=this,n=this.state.keyEntities,r=this.props,o=r.component,i=r.children,a=r.onVisibleChanged,c=r.onAllRemoved,u=Object(d.a)(r,X),s=o||f.Fragment,l={};return J.forEach((function(e){l[e]=u[e],delete u[e]})),delete u.keys,f.createElement(s,u,n.map((function(n){var r=n.status,o=Object(d.a)(n,Z),u="add"===r||"keep"===r;return f.createElement(t,Object($.a)({},l,{key:o.key,visible:u,eventProps:o,onVisibleChanged:function(t){(null==a||a(t,{key:o.key}),t)||0===e.removeKey(o.key)&&c&&c()}}),i)})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,o=K(n);return{keyEntities:Q(r,o).filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||"removed"!==t.status||"remove"!==e.status}))}}}]),i}(f.Component);return Object(r.a)(n,"defaultProps",{component:"div"}),n}(A);t.default=U},function(e,t,n){"use strict";var r=n(326),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function c(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return c(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),o=n(0);function i(e){var t=o.useRef(!1),n=o.useState(e),i=Object(r.a)(n,2),a=i[0],c=i[1];return o.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[a,function(e,n){n&&t.current||c(e)}]}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r="Invariant failed";function o(e,t){if(!e)throw new Error(r)}},function(e,t,n){"use strict";e.exports=!1},function(e,t,n){"use strict";var r=n(11),o=n(94),i=n(51),a=i.Set,c=i.proto,u=r(c.forEach),s=r(c.keys),l=s(new a).next;e.exports=function(e,t,n){return n?o({iterator:s(e),next:l},t):u(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return p}));var r=n(7),o=n(3),i=n(8),a=n(259),c=n(108);function u(e,t,n,r){if(!t.length)return n;var c,s=Object(a.a)(t),l=s[0],f=s.slice(1);return c=e||"number"!=typeof l?Array.isArray(e)?Object(i.a)(e):Object(o.a)({},e):[],r&&void 0===n&&1===f.length?delete c[l][f[0]]:c[l]=u(c[l],f,n,r),c}function s(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&r&&void 0===n&&!Object(c.a)(e,t.slice(0,-1))?e:u(e,t,n,r)}function l(e){return"object"===Object(r.a)(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function f(e){return Array.isArray(e)?[]:{}}var d="undefined"==typeof Reflect?Object.keys:Reflect.ownKeys;function p(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=f(t[0]);return t.forEach((function(e){!function t(n,a){var u=new Set(a),p=Object(c.a)(e,n),h=Array.isArray(p);if(h||l(p)){if(!u.has(p)){u.add(p);var m=Object(c.a)(o,n);h?o=s(o,n,[]):m&&"object"===Object(r.a)(m)||(o=s(o,n,f(p))),d(p).forEach((function(e){t([].concat(Object(i.a)(n),[e]),u)}))}}else o=s(o,n,p)}([])})),o}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return u}));var r=n(1),o=n(5),i=n.n(o),a=n(39);Object(a.a)("warning","error","");function c(e,t,n){var o;return i()((o={},Object(r.a)(o,"".concat(e,"-status-success"),"success"===t),Object(r.a)(o,"".concat(e,"-status-warning"),"warning"===t),Object(r.a)(o,"".concat(e,"-status-error"),"error"===t),Object(r.a)(o,"".concat(e,"-status-validating"),"validating"===t),Object(r.a)(o,"".concat(e,"-has-feedback"),n),o))}var u=function(e,t){return t||e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(196);function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Object(r.a)(e,t)}},,function(e,t,n){"use strict";var r=n(167),o=n(89);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";e.exports=function(e){return null==e}},function(e,t,n){"use strict";var r=n(11),o=Map.prototype;e.exports={Map:Map,set:r(o.set),get:r(o.get),has:r(o.has),remove:r(o.delete),proto:o}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o=r.createContext(!1),i=function(e){var t=e.children,n=e.disabled,i=r.useContext(o);return r.createElement(o.Provider,{value:null!=n?n:i},t)};t.b=o},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return i}));n(2);var r=n(0),o=r.createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")}}),i=o.Consumer},function(e,t,n){"use strict";var r=n(12),o=n(205),i=n(2),a=n(7),c=n(4),u=n(1),s=n(5),l=n.n(s),f=n(53),d=n(0),p=n(70),h=n(69),m=n(52),v=n(200),g=n(342),b=n(87);function y(e){return Object(b.b)(e).join("_")}function w(e){var t=Object(f.useForm)(),n=Object(c.a)(t,1)[0],r=d.useRef({}),o=d.useMemo((function(){return null!=e?e:Object(i.a)(Object(i.a)({},n),{__INTERNAL__:{itemRef:function(e){return function(t){var n=y(e);t?r.current[n]=t:delete r.current[n]}}},scrollToField:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Object(b.b)(e),r=Object(b.a)(n,o.__INTERNAL__.name),a=r?document.getElementById(r):null;a&&Object(g.default)(a,Object(i.a)({scrollMode:"if-needed",block:"nearest"},t))},getFieldInstance:function(e){var t=y(e);return r.current[t]}})}),[e,n]);return[o]}var O=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},x=function(e,t){var n,o=d.useContext(m.b),s=d.useContext(h.b),g=d.useContext(p.b),b=g.getPrefixCls,y=g.direction,x=g.form,E=e.prefixCls,j=e.className,k=void 0===j?"":j,C=e.size,S=void 0===C?o:C,_=e.disabled,M=void 0===_?s:_,T=e.form,P=e.colon,F=e.labelAlign,N=e.labelWrap,A=e.labelCol,R=e.wrapperCol,D=e.hideRequiredMark,L=e.layout,I=void 0===L?"horizontal":L,z=e.scrollToFirstError,V=e.requiredMark,H=e.onFinishFailed,W=e.name,B=O(e,["prefixCls","className","size","disabled","form","colon","labelAlign","labelWrap","labelCol","wrapperCol","hideRequiredMark","layout","scrollToFirstError","requiredMark","onFinishFailed","name"]),Y=d.useContext(v.a),U=Object(d.useMemo)((function(){return void 0!==V?V:x&&void 0!==x.requiredMark?x.requiredMark:!D}),[D,V,x]),$=null!=P?P:null==x?void 0:x.colon,q=b("form",E),G=l()(q,(n={},Object(u.a)(n,"".concat(q,"-").concat(I),!0),Object(u.a)(n,"".concat(q,"-hide-required-mark"),!1===U),Object(u.a)(n,"".concat(q,"-rtl"),"rtl"===y),Object(u.a)(n,"".concat(q,"-").concat(S),S),n),k),K=w(T),Q=Object(c.a)(K,1)[0],X=Q.__INTERNAL__;X.name=W;var Z=Object(d.useMemo)((function(){return{name:W,labelAlign:F,labelCol:A,labelWrap:N,wrapperCol:R,vertical:"vertical"===I,colon:$,requiredMark:U,itemRef:X.itemRef,form:Q}}),[W,F,A,R,I,$,U,Q]);d.useImperativeHandle(t,(function(){return Q}));return d.createElement(h.a,{disabled:M},d.createElement(m.a,{size:S},d.createElement(r.d,Object(i.a)({},{validateMessages:Y}),d.createElement(r.a.Provider,{value:Z},d.createElement(f.default,Object(i.a)({id:W},B,{name:W,onFinishFailed:function(e){null==H||H(e);var t={block:"nearest"};z&&e.errorFields.length&&("object"===Object(a.a)(z)&&(t=z),Q.scrollToField(e.errorFields[0].name,t))},form:Q,className:G}))))))},E=d.forwardRef(x),j=n(257),k=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},C=function(e){var t=e.prefixCls,n=e.children,o=k(e,["prefixCls","children"]),a=(0,d.useContext(p.b).getPrefixCls)("form",t),c=d.useMemo((function(){return{prefixCls:a,status:"error"}}),[a]);return d.createElement(f.List,Object(i.a)({},o),(function(e,t,o){return d.createElement(r.c.Provider,{value:c},n(e.map((function(e){return Object(i.a)(Object(i.a)({},e),{fieldKey:e.key})})),t,{errors:o.errors,warnings:o.warnings}))}))};var S=E;S.Item=j.a,S.List=C,S.ErrorList=o.a,S.useForm=w,S.useFormInstance=function(){return Object(d.useContext)(r.a).form},S.useWatch=f.useWatch,S.Provider=r.d,S.create=function(){};t.a=S},function(e,t,n){"use strict";var r=n(224),o=n(46),i=n(378);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(e,t,n){"use strict";var r=n(17),o=n(290),i=n(291),a=n(74),c=n(104),u=n(19),s=u("iterator"),l=u("toStringTag"),f=a.values,d=function(e,t){if(e){if(e[s]!==f)try{c(e,s,f)}catch(t){e[s]=f}if(e[l]||c(e,l,t),o[t])for(var n in a)if(e[n]!==a[n])try{c(e,n,a[n])}catch(t){e[n]=a[n]}}};for(var p in o)d(r[p]&&r[p].prototype,p);d(i,"DOMTokenList")},function(e,t,n){"use strict";var r=n(66),o=n(253),i=n(126),a=n(92),c=n(41).f,u=n(225),s=n(227),l=n(60),f=n(36),d=a.set,p=a.getterFor("Array Iterator");e.exports=u(Array,"Array",(function(e,t){d(this,{type:"Array Iterator",target:r(e),index:0,kind:t})}),(function(){var e=p(this),t=e.target,n=e.kind,r=e.index++;if(!t||r>=t.length)return e.target=void 0,s(void 0,!0);switch(n){case"keys":return s(r,!1);case"values":return s(t[r],!1)}return s([r,t[r]],!1)}),"values");var h=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!l&&f&&"values"!==h.name)try{c(h,"name",{value:"values"})}catch(e){}},function(e,t,n){"use strict";var r=n(297).charAt,o=n(49),i=n(92),a=n(225),c=n(227),u=i.set,s=i.getterFor("String Iterator");a(String,"String",(function(e){u(this,{type:"String Iterator",string:o(e),index:0})}),(function(){var e,t=s(this),n=t.string,o=t.index;return o>=n.length?c(void 0,!0):(e=r(n,o),t.index+=e.length,c(e,!1))}))},,function(e,t,n){"use strict";var r=n(89),o=Object;e.exports=function(e){return o(r(e))}},function(e,t,n){"use strict";var r=n(11),o=r({}.toString),i=r("".slice);e.exports=function(e){return i(o(e),8,-1)}},function(e,t,n){"use strict";var r=n(11),o=n(94),i=n(68),a=i.Map,c=i.proto,u=r(c.forEach),s=r(c.entries),l=s(new a).next;e.exports=function(e,t,n){return n?o({iterator:s(e),next:l},(function(e){return t(e[1],e[0])})):u(e,t)}},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z"}}]},name:"close-circle",theme:"filled"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="CloseCircleFilled";t.a=o.forwardRef(c)},function(e,t,n){"use strict";function r(e,t,n,r,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function c(e){r(a,o,i,c,u,"next",e)}function u(e){r(a,o,i,c,u,"throw",e)}c(void 0)}))}}n.d(t,"a",(function(){return o}))},,function(e,t,n){"use strict";var r=n(36),o=n(15),i=n(218),a=n(142),c=n(66),u=n(168),s=n(28),l=n(276),f=Object.getOwnPropertyDescriptor;t.f=r?f:function(e,t){if(e=c(e),t=u(t),l)try{return f(e,t)}catch(e){}if(s(e,t))return a(!o(i.f,e,t),e[t])}},function(e,t,n){"use strict";var r=n(41).f,o=n(28),i=n(19)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";var r=n(334),o=n(193),i=o.a,a=n(197),c="${label} is not a valid ${type}",u={locale:"en",Pagination:r.a,DatePicker:o.a,TimePicker:a.a,Calendar:i,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:c,method:c,array:c,object:c,number:c,date:c,boolean:c,integer:c,float:c,regexp:c,email:c,url:c,hex:c},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}};t.a=u},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return i}));var r=["parentNode"];function o(e){return void 0===e||!1===e?[]:Array.isArray(e)?e:[e]}function i(e,t){if(e.length){var n=e.join("_");return t?"".concat(t,"_").concat(n):r.includes(n)?"".concat("form_item","_").concat(n):n}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),o=n(213),i=n(55),a=n(58);function c(e){return void 0!==e}function u(e,t){var n=t||{},u=n.defaultValue,s=n.value,l=n.onChange,f=n.postState,d=Object(a.a)((function(){return c(s)?s:c(u)?"function"==typeof u?u():u:"function"==typeof e?e():e})),p=Object(r.a)(d,2),h=p[0],m=p[1],v=void 0!==s?s:h,g=f?f(v):v,b=Object(o.a)(l),y=Object(a.a)([v]),w=Object(r.a)(y,2),O=w[0],x=w[1];return Object(i.b)((function(){var e=O[0];h!==e&&b(h,e)}),[O]),Object(i.b)((function(){c(s)||m(s)}),[s]),[g,Object(o.a)((function(e,t){m(e,t),x([v],t)}))]}},function(e,t,n){"use strict";var r=n(67),o=TypeError;e.exports=function(e){if(r(e))throw o("Can't call method on "+e);return e}},function(e,t,n){"use strict";n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return p}));var r=n(2),o=n(1),i=n(5),a=n.n(i),c=n(118),u=n(0),s=n(70),l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},f=u.createContext(null),d=function(e,t){var n=u.useContext(f),r=u.useMemo((function(){var r;if(!n)return"";var i=n.compactDirection,c=n.isFirstItem,u=n.isLastItem,s="vertical"===i?"-vertical-":"-";return a()((r={},Object(o.a)(r,"".concat(e,"-compact").concat(s,"item"),!0),Object(o.a)(r,"".concat(e,"-compact").concat(s,"first-item"),c),Object(o.a)(r,"".concat(e,"-compact").concat(s,"last-item"),u),Object(o.a)(r,"".concat(e,"-compact").concat(s,"item-rtl"),"rtl"===t),r))}),[e,t,n]);return{compactSize:null==n?void 0:n.compactSize,compactDirection:null==n?void 0:n.compactDirection,compactItemClassnames:r}},p=function(e){var t=e.children;return u.createElement(f.Provider,{value:null},t)},h=function(e){var t=e.children,n=l(e,["children"]);return u.createElement(f.Provider,{value:n},t)};t.b=function(e){var t,n=u.useContext(s.b),i=n.getPrefixCls,d=n.direction,p=e.size,m=void 0===p?"middle":p,v=e.direction,g=e.block,b=e.prefixCls,y=e.className,w=e.children,O=l(e,["size","direction","block","prefixCls","className","children"]),x=i("space-compact",b),E=a()(x,(t={},Object(o.a)(t,"".concat(x,"-rtl"),"rtl"===d),Object(o.a)(t,"".concat(x,"-block"),g),Object(o.a)(t,"".concat(x,"-vertical"),"vertical"===v),t),y),j=u.useContext(f),k=Object(c.a)(w),C=u.useMemo((function(){return k.map((function(e,t){var n=e&&e.key||"".concat(x,"-item-").concat(t);return u.createElement(h,{key:n,compactSize:m,compactDirection:v,isFirstItem:0===t&&(!j||(null==j?void 0:j.isFirstItem)),isLastItem:t===k.length-1&&(!j||(null==j?void 0:j.isLastItem))},e)}))}),[m,k,j]);return 0===k.length?null:u.createElement("div",Object(r.a)({className:E},O),C)}},function(e,t,n){"use strict";var r=n(11);e.exports=r({}.isPrototypeOf)},function(e,t,n){"use strict";var r,o,i,a=n(374),c=n(17),u=n(40),s=n(104),l=n(28),f=n(219),d=n(172),p=n(143),h=c.TypeError,m=c.WeakMap;if(a||f.state){var v=f.state||(f.state=new m);v.get=v.get,v.has=v.has,v.set=v.set,r=function(e,t){if(v.has(e))throw h("Object already initialized");return t.facade=e,v.set(e,t),t},o=function(e){return v.get(e)||{}},i=function(e){return v.has(e)}}else{var g=d("state");p[g]=!0,r=function(e,t){if(l(e,g))throw h("Object already initialized");return t.facade=e,s(e,g,t),t},o=function(e){return l(e,g)?e[g]:{}},i=function(e){return l(e,g)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw h("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){"use strict";var r=n(37),o=n(15),i=n(29),a=n(140),c=n(298),u=n(101),s=n(91),l=n(299),f=n(228),d=n(186),p=TypeError,h=function(e,t){this.stopped=e,this.result=t},m=h.prototype;e.exports=function(e,t,n){var v,g,b,y,w,O,x,E=n&&n.that,j=!(!n||!n.AS_ENTRIES),k=!(!n||!n.IS_RECORD),C=!(!n||!n.IS_ITERATOR),S=!(!n||!n.INTERRUPTED),_=r(t,E),M=function(e){return v&&d(v,"normal",e),new h(!0,e)},T=function(e){return j?(i(e),S?_(e[0],e[1],M):_(e[0],e[1])):S?_(e,M):_(e)};if(k)v=e.iterator;else if(C)v=e;else{if(!(g=f(e)))throw p(a(e)+" is not iterable");if(c(g)){for(b=0,y=u(e);y>b;b++)if((w=T(e[b]))&&s(m,w))return w;return new h(!1)}v=l(e,g)}for(O=k?e.next:v.next;!(x=o(O,v)).done;){try{w=T(x.value)}catch(e){d(v,"throw",e)}if("object"==typeof w&&w&&s(m,w))return w}return new h(!1)}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n){for(var o,i,a=n?e:e.iterator,c=e.next;!(o=r(c,a)).done;)if(void 0!==(i=t(o.value)))return i}},,function(e,t,n){"use strict";function r(e,t){if(!e)return!1;if(e.contains)return e.contains(t);for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n(379),n(380),n(381),n(382),n(384)},function(e,t,n){"use strict";var r=n(6),o=n(36),i=n(17),a=n(11),c=n(28),u=n(18),s=n(91),l=n(49),f=n(148),d=n(279),p=i.Symbol,h=p&&p.prototype;if(o&&u(p)&&(!("description"in h)||void 0!==p().description)){var m={},v=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:l(arguments[0]),t=s(h,this)?new p(e):void 0===e?p():p(e);return""===e&&(m[t]=!0),t};d(v,p),v.prototype=h,h.constructor=v;var g="Symbol(description detection)"===String(p("description detection")),b=a(h.valueOf),y=a(h.toString),w=/^Symbol\((.*)\)[^)]+$/,O=a("".replace),x=a("".slice);f(h,"description",{configurable:!0,get:function(){var e=b(this);if(c(m,e))return"";var t=y(e),n=g?x(t,7,-1):O(t,w,"$1");return""===n?void 0:n}}),r({global:!0,constructor:!0,forced:!0},{Symbol:v})}},function(e,t,n){"use strict";n(26)("iterator")},,function(e,t,n){"use strict";var r=n(173);e.exports=function(e){return r(e.length)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(60),o=n(219);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.32.1",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.32.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,t,n){"use strict";var r=n(36),o=n(41),i=n(142);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){"use strict";var r=n(43),o=n(29),i=n(15),a=n(144),c=n(457),u=RangeError,s=TypeError,l=Math.max,f=function(e,t,n,r){this.set=e,this.size=t,this.has=n,this.keys=r};f.prototype={getIterator:function(){return c(o(i(this.keys,this.set)))},includes:function(e){return i(this.has,this.set,e)}},e.exports=function(e){o(e);var t=+e.size;if(t!=t)throw s("Invalid size");var n=a(t);if(n<0)throw u("Invalid size");return new f(e,l(n,0),r(e.has),r(e.keys))}},function(e,t,n){"use strict";var r=n(44),o=function(e){return{size:e,has:function(){return!1},keys:function(){return{next:function(){return{done:!0}}}}}};e.exports=function(e){var t=r("Set");try{(new t)[e](o(0));try{return(new t)[e](o(-1)),!1}catch(e){return!0}}catch(e){return!1}}},function(e,t,n){"use strict";var r=n(44),o=n(18),i=n(470),a=n(40),c=r("Set");e.exports=function(e){return function(e){return a(e)&&"number"==typeof e.size&&o(e.has)&&o(e.keys)}(e)?e:i(e)?new c(e):e}},function(e,t,n){"use strict";function r(e,t){for(var n=e,r=0;r<t.length;r+=1){if(null==n)return;n=n[t[r]]}return n}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="LoadingOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(0),o=n.n(r),i=n(47),a=n.n(i);function c(e){return function(e){return e instanceof HTMLElement||e instanceof SVGElement}(e)?e:e instanceof o.a.Component?a.a.findDOMNode(e):null}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"c",(function(){return f})),n.d(t,"b",(function(){return d}));var r=n(20),o=n(153),i=n(10);function a(e){var t={r:0,g:0,b:0},n=1,o=null,a=null,c=null,u=!1,s=!1;return"string"==typeof e&&(e=f(e)),"object"==typeof e&&(d(e.r)&&d(e.g)&&d(e.b)?(t=Object(r.j)(e.r,e.g,e.b),u=!0,s="%"===String(e.r).substr(-1)?"prgb":"rgb"):d(e.h)&&d(e.s)&&d(e.v)?(o=Object(i.d)(e.s),a=Object(i.d)(e.v),t=Object(r.d)(e.h,o,a),u=!0,s="hsv"):d(e.h)&&d(e.s)&&d(e.l)&&(o=Object(i.d)(e.s),c=Object(i.d)(e.l),t=Object(r.c)(e.h,o,c),u=!0,s="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(n=e.a)),n=Object(i.b)(n),{ok:u,format:e.format||s,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:n}}var c="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),u="[\\s|\\(]+(".concat(c,")[,|\\s]+(").concat(c,")[,|\\s]+(").concat(c,")\\s*\\)?"),s="[\\s|\\(]+(".concat(c,")[,|\\s]+(").concat(c,")[,|\\s]+(").concat(c,")[,|\\s]+(").concat(c,")\\s*\\)?"),l={CSS_UNIT:new RegExp(c),rgb:new RegExp("rgb"+u),rgba:new RegExp("rgba"+s),hsl:new RegExp("hsl"+u),hsla:new RegExp("hsla"+s),hsv:new RegExp("hsv"+u),hsva:new RegExp("hsva"+s),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function f(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(o.a[e])e=o.a[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=l.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=l.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=l.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=l.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=l.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=l.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=l.hex8.exec(e))?{r:Object(r.f)(n[1]),g:Object(r.f)(n[2]),b:Object(r.f)(n[3]),a:Object(r.b)(n[4]),format:t?"name":"hex8"}:(n=l.hex6.exec(e))?{r:Object(r.f)(n[1]),g:Object(r.f)(n[2]),b:Object(r.f)(n[3]),format:t?"name":"hex"}:(n=l.hex4.exec(e))?{r:Object(r.f)(n[1]+n[1]),g:Object(r.f)(n[2]+n[2]),b:Object(r.f)(n[3]+n[3]),a:Object(r.b)(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=l.hex3.exec(e))&&{r:Object(r.f)(n[1]+n[1]),g:Object(r.f)(n[2]+n[2]),b:Object(r.f)(n[3]+n[3]),format:t?"name":"hex"}}function d(e){return Boolean(l.CSS_UNIT.exec(String(e)))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(47),o=n.n(r);function i(e,t,n,r){var i=o.a.unstable_batchedUpdates?function(e){o.a.unstable_batchedUpdates(n,e)}:n;return null!=e&&e.addEventListener&&e.addEventListener(t,i,r),{remove:function(){null!=e&&e.removeEventListener&&e.removeEventListener(t,i,r)}}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return i}));var r=n(1),o=n(2),i=["xxl","xl","lg","md","sm","xs"],a={xs:"(max-width: 575px)",sm:"(min-width: 576px)",md:"(min-width: 768px)",lg:"(min-width: 992px)",xl:"(min-width: 1200px)",xxl:"(min-width: 1600px)"},c=new Map,u=-1,s={},l={matchHandlers:{},dispatch:function(e){return s=e,c.forEach((function(e){return e(s)})),c.size>=1},subscribe:function(e){return c.size||this.register(),u+=1,c.set(u,e),e(s),u},unsubscribe:function(e){c.delete(e),c.size||this.unregister()},unregister:function(){var e=this;Object.keys(a).forEach((function(t){var n=a[t],r=e.matchHandlers[n];null==r||r.mql.removeListener(null==r?void 0:r.listener)})),c.clear()},register:function(){var e=this;Object.keys(a).forEach((function(t){var n=a[t],i=function(n){var i=n.matches;e.dispatch(Object(o.a)(Object(o.a)({},s),Object(r.a)({},t,i)))},c=window.matchMedia(n);c.addListener(i),e.matchHandlers[n]={mql:c,listener:i},i(c)}))}};t.a=l},function(e,t,n){"use strict";var r=n(2),o=n(1),i=n(5),a=n.n(i),c=n(0),u=n.n(c),s=n(70),l=n(12),f=function(e){var t,n=Object(c.useContext)(s.b),i=n.getPrefixCls,u=n.direction,f=e.prefixCls,d=e.className,p=void 0===d?"":d,h=i("input-group",f),m=a()(h,(t={},Object(o.a)(t,"".concat(h,"-lg"),"large"===e.size),Object(o.a)(t,"".concat(h,"-sm"),"small"===e.size),Object(o.a)(t,"".concat(h,"-compact"),e.compact),Object(o.a)(t,"".concat(h,"-rtl"),"rtl"===u),t),p),v=Object(c.useContext)(l.b),g=Object(c.useMemo)((function(){return Object(r.a)(Object(r.a)({},v),{isFormItemInput:!1})}),[v]);return c.createElement("span",{className:m,style:e.style,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onFocus:e.onFocus,onBlur:e.onBlur},c.createElement(l.b.Provider,{value:g},e.children))},d=n(7),p=n(80),h=n(338),m=n(25),v=n(69),g=n(52),b=n(90),y=n(63);function w(e,t){var n=Object(c.useRef)([]),r=function(){n.current.push(setTimeout((function(){var t,n,r,o;(null===(t=e.current)||void 0===t?void 0:t.input)&&"password"===(null===(n=e.current)||void 0===n?void 0:n.input.getAttribute("type"))&&(null===(r=e.current)||void 0===r?void 0:r.input.hasAttribute("value"))&&(null===(o=e.current)||void 0===o||o.input.removeAttribute("value"))})))};return Object(c.useEffect)((function(){return t&&r(),function(){return n.current.forEach((function(e){e&&clearTimeout(e)}))}}),[]),r}var O=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function x(e,t,n,r){if(n){var o=t;if("click"===t.type){var i=e.cloneNode(!0);return o=Object.create(t,{target:{value:i},currentTarget:{value:i}}),i.value="",void n(o)}if(void 0!==r)return o=Object.create(t,{target:{value:e},currentTarget:{value:e}}),e.value=r,void n(o);n(o)}}var E=Object(c.forwardRef)((function(e,t){var n,i,f,x=e.prefixCls,E=e.bordered,j=void 0===E||E,k=e.status,C=e.size,S=e.disabled,_=e.onBlur,M=e.onFocus,T=e.suffix,P=e.allowClear,F=e.addonAfter,N=e.addonBefore,A=e.className,R=e.onChange,D=O(e,["prefixCls","bordered","status","size","disabled","onBlur","onFocus","suffix","allowClear","addonAfter","addonBefore","className","onChange"]),L=u.a.useContext(s.b),I=L.getPrefixCls,z=L.direction,V=L.input,H=I("input",x),W=Object(c.useRef)(null),B=Object(b.c)(H,z),Y=B.compactSize,U=B.compactItemClassnames,$=u.a.useContext(g.b),q=Y||C||$,G=u.a.useContext(v.b),K=null!=S?S:G,Q=Object(c.useContext)(l.b),X=Q.status,Z=Q.hasFeedback,J=Q.feedbackIcon,ee=Object(y.a)(X,k),te=function(e){return!!(e.prefix||e.suffix||e.allowClear)}(e)||!!Z,ne=Object(c.useRef)(te);Object(c.useEffect)((function(){te&&ne.current,ne.current=te}),[te]);var re,oe=w(W,!0),ie=(Z||T)&&u.a.createElement(u.a.Fragment,null,T,Z&&J);return"object"===Object(d.a)(P)&&(null==P?void 0:P.clearIcon)?re=P:P&&(re={clearIcon:u.a.createElement(p.a,null)}),u.a.createElement(h.default,Object(r.a)({ref:Object(m.a)(t,W),prefixCls:H,autoComplete:null==V?void 0:V.autoComplete},D,{disabled:K||void 0,onBlur:function(e){oe(),null==_||_(e)},onFocus:function(e){oe(),null==M||M(e)},suffix:ie,allowClear:re,className:a()(A,U),onChange:function(e){oe(),null==R||R(e)},addonAfter:F&&u.a.createElement(b.a,null,u.a.createElement(l.e,{override:!0,status:!0},F)),addonBefore:N&&u.a.createElement(b.a,null,u.a.createElement(l.e,{override:!0,status:!0},N)),inputClassName:a()((n={},Object(o.a)(n,"".concat(H,"-sm"),"small"===q),Object(o.a)(n,"".concat(H,"-lg"),"large"===q),Object(o.a)(n,"".concat(H,"-rtl"),"rtl"===z),Object(o.a)(n,"".concat(H,"-borderless"),!j),n),!te&&Object(y.b)(H,ee)),affixWrapperClassName:a()((i={},Object(o.a)(i,"".concat(H,"-affix-wrapper-sm"),"small"===q),Object(o.a)(i,"".concat(H,"-affix-wrapper-lg"),"large"===q),Object(o.a)(i,"".concat(H,"-affix-wrapper-rtl"),"rtl"===z),Object(o.a)(i,"".concat(H,"-affix-wrapper-borderless"),!j),i),Object(y.b)("".concat(H,"-affix-wrapper"),ee,Z)),wrapperClassName:a()(Object(o.a)({},"".concat(H,"-group-rtl"),"rtl"===z)),groupClassName:a()((f={},Object(o.a)(f,"".concat(H,"-group-wrapper-sm"),"small"===q),Object(o.a)(f,"".concat(H,"-group-wrapper-lg"),"large"===q),Object(o.a)(f,"".concat(H,"-group-wrapper-rtl"),"rtl"===z),f),Object(y.b)("".concat(H,"-group-wrapper"),ee,Z))}))})),j=n(4),k=n(3),C={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"}},{tag:"path",attrs:{d:"M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"}}]},name:"eye-invisible",theme:"outlined"},S=n(14),_=function(e,t){return c.createElement(S.a,Object(k.a)(Object(k.a)({},e),{},{ref:t,icon:C}))};_.displayName="EyeInvisibleOutlined";var M=c.forwardRef(_),T={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z"}}]},name:"eye",theme:"outlined"},P=function(e,t){return c.createElement(S.a,Object(k.a)(Object(k.a)({},e),{},{ref:t,icon:T}))};P.displayName="EyeOutlined";var F=c.forwardRef(P),N=n(48),A=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},R=function(e){return e?c.createElement(F,null):c.createElement(M,null)},D={click:"onClick",hover:"onMouseOver"};var L=c.forwardRef((function(e,t){var n=e.visibilityToggle,i=void 0===n||n,u="object"===Object(d.a)(i)&&void 0!==i.visible,l=Object(c.useState)((function(){return!!u&&i.visible})),f=Object(j.a)(l,2),p=f[0],h=f[1],v=Object(c.useRef)(null);c.useEffect((function(){u&&h(i.visible)}),[u,i]);var g=w(v),b=function(){e.disabled||(p&&g(),h((function(e){var t,n=!e;return"object"===Object(d.a)(i)&&(null===(t=i.onVisibleChange)||void 0===t||t.call(i,n)),n})))},y=function(n){var u=n.getPrefixCls,s=e.className,l=e.prefixCls,f=e.inputPrefixCls,d=e.size,h=A(e,["className","prefixCls","inputPrefixCls","size"]),g=u("input",f),y=u("input-password",l),w=i&&function(t){var n,r=e.action,i=void 0===r?"click":r,a=e.iconRender,u=D[i]||"",s=(void 0===a?R:a)(p),l=(n={},Object(o.a)(n,u,b),Object(o.a)(n,"className","".concat(t,"-icon")),Object(o.a)(n,"key","passwordIcon"),Object(o.a)(n,"onMouseDown",(function(e){e.preventDefault()})),Object(o.a)(n,"onMouseUp",(function(e){e.preventDefault()})),n);return c.cloneElement(c.isValidElement(s)?s:c.createElement("span",null,s),l)}(y),O=a()(y,s,Object(o.a)({},"".concat(y,"-").concat(d),!!d)),x=Object(r.a)(Object(r.a)({},Object(N.a)(h,["suffix","iconRender","visibilityToggle"])),{type:p?"text":"password",className:O,prefixCls:g,suffix:w});return d&&(x.size=d),c.createElement(E,Object(r.a)({ref:Object(m.a)(t,v)},x))};return c.createElement(s.a,null,y)})),I=n(269),z=n(163),V=n(38),H=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};var W=c.forwardRef((function(e,t){var n,i,u=e.prefixCls,l=e.inputPrefixCls,f=e.className,d=e.size,p=e.suffix,h=e.enterButton,v=void 0!==h&&h,y=e.addonAfter,w=e.loading,O=e.disabled,x=e.onSearch,j=e.onChange,k=e.onCompositionStart,C=e.onCompositionEnd,S=H(e,["prefixCls","inputPrefixCls","className","size","suffix","enterButton","addonAfter","loading","disabled","onSearch","onChange","onCompositionStart","onCompositionEnd"]),_=c.useContext(s.b),M=_.getPrefixCls,T=_.direction,P=c.useContext(g.b),F=c.useRef(!1),N=M("input-search",u),A=M("input",l),R=Object(b.c)(N,T).compactSize||d||P,D=c.useRef(null),L=function(e){var t;document.activeElement===(null===(t=D.current)||void 0===t?void 0:t.input)&&e.preventDefault()},W=function(e){var t,n;x&&x(null===(n=null===(t=D.current)||void 0===t?void 0:t.input)||void 0===n?void 0:n.value,e)},B="boolean"==typeof v?c.createElement(I.a,null):null,Y="".concat(N,"-button"),U=v||{},$=U.type&&!0===U.type.__ANT_BUTTON;i=$||"button"===U.type?Object(V.a)(U,Object(r.a)({onMouseDown:L,onClick:function(e){var t,n;null===(n=null===(t=null==U?void 0:U.props)||void 0===t?void 0:t.onClick)||void 0===n||n.call(t,e),W(e)},key:"enterButton"},$?{className:Y,size:R}:{})):c.createElement(z.a,{className:Y,type:v?"primary":void 0,size:R,disabled:O,key:"enterButton",onMouseDown:L,onClick:W,loading:w,icon:B},v),y&&(i=[i,Object(V.a)(y,{key:"addonAfter"})]);var q=a()(N,(n={},Object(o.a)(n,"".concat(N,"-rtl"),"rtl"===T),Object(o.a)(n,"".concat(N,"-").concat(R),!!R),Object(o.a)(n,"".concat(N,"-with-button"),!!v),n),f);return c.createElement(E,Object(r.a)({ref:Object(m.a)(D,t),onPressEnter:function(e){F.current||w||W(e)}},S,{size:R,onCompositionStart:function(e){F.current=!0,null==k||k(e)},onCompositionEnd:function(e){F.current=!1,null==C||C(e)},prefixCls:A,addonAfter:i,suffix:p,onChange:function(e){e&&e.target&&"click"===e.type&&x&&x(e.target.value,e),j&&j(e)},className:q,disabled:O}))})),B=n(8),Y=n(340),U=n(88),$=n(23),q=n(24),G=n(31),K=n(32),Q=n(39),X=Object(Q.a)("text","input");var Z=function(e){Object(G.a)(n,e);var t=Object(K.a)(n);function n(){return Object($.a)(this,n),t.apply(this,arguments)}return Object(q.a)(n,[{key:"renderClearIcon",value:function(e){var t,n=this.props,r=n.value,i=n.disabled,u=n.readOnly,s=n.handleReset,l=n.suffix,f=!i&&!u&&r,d="".concat(e,"-clear-icon");return c.createElement(p.a,{onClick:s,onMouseDown:function(e){return e.preventDefault()},className:a()((t={},Object(o.a)(t,"".concat(d,"-hidden"),!f),Object(o.a)(t,"".concat(d,"-has-suffix"),!!l),t),d),role:"button"})}},{key:"renderTextAreaWithClearIcon",value:function(e,t,n){var r,i=this.props,u=i.value,s=i.allowClear,l=i.className,f=i.focused,d=i.style,p=i.direction,h=i.bordered,m=i.hidden,v=i.status,g=n.status,b=n.hasFeedback;if(!s)return Object(V.a)(t,{value:u});var w,O=a()("".concat(e,"-affix-wrapper"),"".concat(e,"-affix-wrapper-textarea-with-clear-btn"),Object(y.b)("".concat(e,"-affix-wrapper"),Object(y.a)(g,v),b),(r={},Object(o.a)(r,"".concat(e,"-affix-wrapper-focused"),f),Object(o.a)(r,"".concat(e,"-affix-wrapper-rtl"),"rtl"===p),Object(o.a)(r,"".concat(e,"-affix-wrapper-borderless"),!h),Object(o.a)(r,"".concat(l),!((w=this.props).addonBefore||w.addonAfter)&&l),r));return c.createElement("span",{className:O,style:d,hidden:m},Object(V.a)(t,{style:null,value:u}),this.renderClearIcon(e))}},{key:"render",value:function(){var e=this;return c.createElement(l.b.Consumer,null,(function(t){var n=e.props,r=n.prefixCls,o=n.inputType,i=n.element;if(o===X[0])return e.renderTextAreaWithClearIcon(r,i,t)}))}}]),n}(c.Component),J=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function ee(e,t){return Object(B.a)(e||"").slice(0,t).join("")}function te(e,t,n,r){var o=n;return e?o=ee(n,r):Object(B.a)(t||"").length<n.length&&Object(B.a)(n||"").length>r&&(o=t),o}var ne=c.forwardRef((function(e,t){var n,i=e.prefixCls,u=e.bordered,f=void 0===u||u,p=e.showCount,h=void 0!==p&&p,m=e.maxLength,b=e.className,w=e.style,O=e.size,E=e.disabled,k=e.onCompositionStart,C=e.onCompositionEnd,S=e.onChange,_=e.onFocus,M=e.onBlur,T=e.status,P=J(e,["prefixCls","bordered","showCount","maxLength","className","style","size","disabled","onCompositionStart","onCompositionEnd","onChange","onFocus","onBlur","status"]),F=c.useContext(s.b),A=F.getPrefixCls,R=F.direction,D=c.useContext(g.b),L=c.useContext(v.b),I=null!=E?E:L,z=c.useContext(l.b),V=z.status,H=z.hasFeedback,W=z.isFormItemInput,$=z.feedbackIcon,q=Object(y.a)(V,T),G=c.useRef(null),K=c.useRef(null),Q=c.useState(!1),X=Object(j.a)(Q,2),ne=X[0],re=X[1],oe=c.useState(!1),ie=Object(j.a)(oe,2),ae=ie[0],ce=ie[1],ue=c.useRef(),se=c.useRef(0),le=Object(U.a)(P.defaultValue,{value:P.value}),fe=Object(j.a)(le,2),de=fe[0],pe=fe[1],he=P.hidden,me=function(e,t){void 0===P.value&&(pe(e),null==t||t())},ve=Number(m)>0;c.useEffect((function(){ce((function(e){return!I&&e}))}),[I]);var ge=A("input",i);c.useImperativeHandle(t,(function(){var e;return{resizableTextArea:null===(e=G.current)||void 0===e?void 0:e.resizableTextArea,focus:function(e){var t,n;!function(e,t){if(e){e.focus(t);var n=(t||{}).cursor;if(n){var r=e.value.length;switch(n){case"start":e.setSelectionRange(0,0);break;case"end":e.setSelectionRange(r,r);break;default:e.setSelectionRange(0,r)}}}}(null===(n=null===(t=G.current)||void 0===t?void 0:t.resizableTextArea)||void 0===n?void 0:n.textArea,e)},blur:function(){var e;return null===(e=G.current)||void 0===e?void 0:e.blur()}}}));var be=c.createElement(Y.default,Object(r.a)({},Object(N.a)(P,["allowClear"]),{disabled:I,className:a()((n={},Object(o.a)(n,"".concat(ge,"-borderless"),!f),Object(o.a)(n,b,b&&!h),Object(o.a)(n,"".concat(ge,"-sm"),"small"===D||"small"===O),Object(o.a)(n,"".concat(ge,"-lg"),"large"===D||"large"===O),n),Object(y.b)(ge,q)),style:h?{resize:null==w?void 0:w.resize}:w,prefixCls:ge,onCompositionStart:function(e){re(!0),ue.current=de,se.current=e.currentTarget.selectionStart,null==k||k(e)},onChange:function(e){var t=e.target.value;!ne&&ve&&(t=te(e.target.selectionStart>=m+1||e.target.selectionStart===t.length||!e.target.selectionStart,de,t,m));me(t),x(e.currentTarget,e,S,t)},onBlur:function(e){ce(!1),null==M||M(e)},onFocus:function(e){ce(!0),null==_||_(e)},onCompositionEnd:function(e){var t;re(!1);var n=e.currentTarget.value;ve&&(n=te(se.current>=m+1||se.current===(null===(t=ue.current)||void 0===t?void 0:t.length),ue.current,n,m));n!==de&&(me(n),x(e.currentTarget,e,S,n)),null==C||C(e)},ref:G})),ye=function(e){return null==e?"":String(e)}(de);ne||!ve||null!==P.value&&void 0!==P.value||(ye=ee(ye,m));var we=c.createElement(Z,Object(r.a)({disabled:I,focused:ae},P,{prefixCls:ge,direction:R,inputType:"text",value:ye,element:be,handleReset:function(e){var t,n,r;me(""),null===(t=G.current)||void 0===t||t.focus(),x(null===(r=null===(n=G.current)||void 0===n?void 0:n.resizableTextArea)||void 0===r?void 0:r.textArea,e,S)},ref:K,bordered:f,status:T,style:h?void 0:w}));if(h||H){var Oe,xe=Object(B.a)(ye).length,Ee="";return Ee="object"===Object(d.a)(h)?h.formatter({value:ye,count:xe,maxLength:m}):"".concat(xe).concat(ve?" / ".concat(m):""),c.createElement("div",{hidden:he,className:a()("".concat(ge,"-textarea"),(Oe={},Object(o.a)(Oe,"".concat(ge,"-textarea-rtl"),"rtl"===R),Object(o.a)(Oe,"".concat(ge,"-textarea-show-count"),h),Object(o.a)(Oe,"".concat(ge,"-textarea-in-form-item"),W),Oe),Object(y.b)("".concat(ge,"-textarea"),q,H),b),style:w,"data-count":Ee},we,H&&c.createElement("span",{className:"".concat(ge,"-textarea-suffix")},$))}return we})),re=E;re.Group=f,re.Search=W,re.TextArea=ne,re.Password=L;t.a=re},function(e,t,n){e.exports=n(552)()},,function(e,t,n){"use strict";n(489),n(496),n(497),n(498),n(499),n(500)},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0),o=n.n(r),i=n(189);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];return o.a.Children.forEach(e,(function(e){(null!=e||t.keepEmpty)&&(Array.isArray(e)?n=n.concat(a(e)):Object(i.isFragment)(e)&&e.props?n=n.concat(a(e.props.children,t)):n.push(e))})),n}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c}));var r=n(2),o=n(0),i=n(156),a=n(85).a,c=(t.a=function(e){var t=e.componentName,n=void 0===t?"global":t,c=e.defaultLocale,u=e.children,s=o.useContext(i.a);return u(o.useMemo((function(){var e,t=c||a[n],o=null!==(e=null==s?void 0:s[n])&&void 0!==e?e:{};return Object(r.a)(Object(r.a)({},t instanceof Function?t():t),o||{})}),[n,c,s]),o.useMemo((function(){var e=s&&s.locale;return s&&s.exist&&!e?a.locale:e}),[s]),s)},function(e,t){var n=o.useContext(i.a);return[o.useMemo((function(){var o,i=t||a[e],c=null!==(o=null==n?void 0:n[e])&&void 0!==o?o:{};return Object(r.a)(Object(r.a)({},"function"==typeof i?i():i),c||{})}),[e,t,n])]})},function(e,t,n){"use strict";var r=n(44),o=n(18),i=n(91),a=n(274),c=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return o(t)&&i(t.prototype,c(e))}},function(e,t,n){"use strict";var r=n(162),o=n(13),i=n(17).String;e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol("symbol detection");return!i(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(e,t,n){"use strict";var r=n(43),o=n(67);e.exports=function(e,t){var n=e[t];return o(n)?void 0:r(n)}},function(e,t,n){"use strict";var r=n(281),o=n(223).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){"use strict";var r,o=n(29),i=n(283),a=n(223),c=n(143),u=n(284),s=n(170),l=n(172),f=l("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"<\/script>"},h=function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t},m=function(){try{r=new ActiveXObject("htmlfile")}catch(e){}var e,t;m="undefined"!=typeof document?document.domain&&r?h(r):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F):h(r);for(var n=a.length;n--;)delete m.prototype[a[n]];return m()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=o(e),n=new d,d.prototype=null,n[f]=e):n=m(),void 0===t?n:i.f(n,t)}},function(e,t,n){"use strict";var r=n(17);e.exports=r},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=n(17);e.exports=r.Promise},function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(42),o=n(96),i=new Map;function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):"rc-util-key"}function c(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function u(e){return"queue"===e?"prependQueue":e?"prepend":"append"}function s(e){return Array.from((i.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function l(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Object(r.a)())return null;var n=t.csp,o=t.prepend,i=t.priority,a=void 0===i?0:i,l=u(o),f="prependQueue"===l,d=document.createElement("style");d.setAttribute("data-rc-order",l),f&&a&&d.setAttribute("data-rc-priority","".concat(a)),null!=n&&n.nonce&&(d.nonce=null==n?void 0:n.nonce),d.innerHTML=e;var p=c(t),h=p.firstChild;if(o){if(f){var m=s(p).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute("data-rc-order")))return!1;var t=Number(e.getAttribute("data-rc-priority")||0);return a>=t}));if(m.length)return p.insertBefore(d,m[m.length-1].nextSibling),d}p.insertBefore(d,h)}else p.appendChild(d);return d}function f(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=c(t);return s(n).find((function(n){return n.getAttribute(a(t))===e}))}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=f(e,t);if(n){var r=c(t);r.removeChild(n)}}function p(e,t){var n=i.get(e);if(!n||!Object(o.a)(document,n)){var r=l("",t),a=r.parentNode;i.set(e,a),e.removeChild(r)}}function h(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=c(n);p(r,n);var o=f(t,n);if(o){var i,u,s;if(null!==(i=n.csp)&&void 0!==i&&i.nonce&&o.nonce!==(null===(u=n.csp)||void 0===u?void 0:u.nonce))o.nonce=null===(s=n.csp)||void 0===s?void 0:s.nonce;return o.innerHTML!==e&&(o.innerHTML=e),o}var d=l(e,n);return d.setAttribute(a(n),t),d}},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="CheckCircleFilled";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="ExclamationCircleFilled";t.a=o.forwardRef(c)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(154);function o(e,t){if(e){if("string"==typeof e)return Object(r.a)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(r.a)(e,t):void 0}}},function(e,t,n){"use strict";var r=n(0),o=Object(r.createContext)({});t.a=o},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(8),o=n(2),i=n(4),a=n(0),c=n(198);function u(e){var t=a.useRef({}),n=a.useState([]),u=Object(i.a)(n,2),s=u[0],l=u[1];return[function(n){var i=!0;e.add(n,(function(e,n){var u=n.key;if(e&&(!t.current[u]||i)){var s=a.createElement(c.a,Object(o.a)({},n,{holder:e}));t.current[u]=s,l((function(e){var t=e.findIndex((function(e){return e.key===n.key}));if(-1===t)return[].concat(Object(r.a)(e),[s]);var o=Object(r.a)(e);return o[t]=s,o}))}i=!1}))},a.createElement(a.Fragment,null,s)]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),o=n(0);function i(e){var t=o.useState(e),n=Object(r.a)(t,2),i=n[0],a=n[1];return o.useEffect((function(){var t=setTimeout((function(){a(e)}),e.length?0:10);return function(){clearTimeout(t)}}),[e]),i}},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(5),a=n.n(i),c=n(0),u=n(70),s=n(119),l=function(){var e=(0,c.useContext(u.b).getPrefixCls)("empty-img-default");return c.createElement("svg",{className:e,width:"184",height:"152",viewBox:"0 0 184 152",xmlns:"http://www.w3.org/2000/svg"},c.createElement("g",{fill:"none",fillRule:"evenodd"},c.createElement("g",{transform:"translate(24 31.67)"},c.createElement("ellipse",{className:"".concat(e,"-ellipse"),cx:"67.797",cy:"106.89",rx:"67.797",ry:"12.668"}),c.createElement("path",{className:"".concat(e,"-path-1"),d:"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"}),c.createElement("path",{className:"".concat(e,"-path-2"),d:"M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",transform:"translate(13.56)"}),c.createElement("path",{className:"".concat(e,"-path-3"),d:"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"}),c.createElement("path",{className:"".concat(e,"-path-4"),d:"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"})),c.createElement("path",{className:"".concat(e,"-path-5"),d:"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"}),c.createElement("g",{className:"".concat(e,"-g"),transform:"translate(149.65 15.383)"},c.createElement("ellipse",{cx:"20.654",cy:"3.167",rx:"2.849",ry:"2.815"}),c.createElement("path",{d:"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"}))))},f=function(){var e=(0,c.useContext(u.b).getPrefixCls)("empty-img-simple");return c.createElement("svg",{className:e,width:"64",height:"41",viewBox:"0 0 64 41",xmlns:"http://www.w3.org/2000/svg"},c.createElement("g",{transform:"translate(0 1)",fill:"none",fillRule:"evenodd"},c.createElement("ellipse",{className:"".concat(e,"-ellipse"),cx:"32",cy:"33",rx:"32",ry:"7"}),c.createElement("g",{className:"".concat(e,"-g"),fillRule:"nonzero"},c.createElement("path",{d:"M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"}),c.createElement("path",{d:"M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",className:"".concat(e,"-path")}))))},d=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},p=c.createElement(l,null),h=c.createElement(f,null),m=function(e){var t=e.className,n=e.prefixCls,i=e.image,l=void 0===i?p:i,f=e.description,m=e.children,v=e.imageStyle,g=d(e,["className","prefixCls","image","description","children","imageStyle"]),b=c.useContext(u.b),y=b.getPrefixCls,w=b.direction;return c.createElement(s.a,{componentName:"Empty"},(function(e){var i,u=y("empty",n),s=void 0!==f?f:e.description,d="string"==typeof s?s:"empty",p=null;return p="string"==typeof l?c.createElement("img",{alt:d,src:l}):l,c.createElement("div",Object(o.a)({className:a()(u,(i={},Object(r.a)(i,"".concat(u,"-normal"),l===h),Object(r.a)(i,"".concat(u,"-rtl"),"rtl"===w),i),t)},g),c.createElement("div",{className:"".concat(u,"-image"),style:v},p),s&&c.createElement("div",{className:"".concat(u,"-description")},s),m&&c.createElement("div",{className:"".concat(u,"-footer")},m))}))};m.PRESENTED_IMAGE_DEFAULT=p,m.PRESENTED_IMAGE_SIMPLE=h;t.a=m},function(e,t,n){"use strict";var r=n(36),o=n(171).EXISTS,i=n(11),a=n(148),c=Function.prototype,u=i(c.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,l=i(s.exec);r&&!o&&a(c,"name",{configurable:!0,get:function(){try{return l(s,u(this))[1]}catch(e){return""}}})},,function(e,t,n){"use strict";var r=n(17),o=n(290),i=n(291),a=n(527),c=n(104),u=function(e){if(e&&e.forEach!==a)try{c(e,"forEach",a)}catch(t){e.forEach=a}};for(var s in o)o[s]&&u(r[s]&&r[s].prototype);u(i)},function(e,t,n){"use strict";n.d(t,"c",(function(){return s})),n.d(t,"b",(function(){return u}));var r=n(39),o=function(){return{height:0,opacity:0}},i=function(e){return{height:e.scrollHeight,opacity:1}},a=function(e,t){return!0===(null==t?void 0:t.deadline)||"height"===t.propertyName},c={motionName:"ant-motion-collapse",onAppearStart:o,onEnterStart:o,onAppearActive:i,onEnterActive:i,onLeaveStart:function(e){return{height:e?e.offsetHeight:0}},onLeaveActive:o,onAppearEnd:a,onEnterEnd:a,onLeaveEnd:a,motionDeadline:500},u=(Object(r.a)("bottomLeft","bottomRight","topLeft","topRight"),function(e){return void 0===e||"topLeft"!==e&&"topRight"!==e?"slide-up":"slide-down"}),s=function(e,t,n){return void 0!==n?n:"".concat(e,"-").concat(t)};t.a=c},function(e,t,n){"use strict";var r=String;e.exports=function(e){try{return r(e)}catch(e){return"Object"}}},function(e,t,n){"use strict";var r=n(37),o=n(11),i=n(167),a=n(77),c=n(101),u=n(282),s=o([].push),l=function(e){var t=1===e,n=2===e,o=3===e,l=4===e,f=6===e,d=7===e,p=5===e||f;return function(h,m,v,g){for(var b,y,w=a(h),O=i(w),x=r(m,v),E=c(O),j=0,k=g||u,C=t?k(h,E):n||d?k(h,0):void 0;E>j;j++)if((p||j in O)&&(y=x(b=O[j],j,w),e))if(t)C[j]=y;else if(y)switch(e){case 3:return!0;case 5:return b;case 6:return j;case 2:s(C,b)}else switch(e){case 4:return!1;case 7:s(C,b)}return f?-1:o||l?l:C}};e.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterReject:l(7)}},function(e,t,n){"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=n(375);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},function(e,t,n){"use strict";var r=n(13),o=n(18),i=/#|\.prototype\./,a=function(e,t){var n=u[c(e)];return n===l||n!==s&&(o(t)?r(t):!!t)},c=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},u=a.data={},s=a.NATIVE="N",l=a.POLYFILL="P";e.exports=a},function(e,t,n){"use strict";var r=n(168),o=n(41),i=n(142);e.exports=function(e,t,n){var a=r(t);a in e?o.f(e,a,i(0,n)):e[a]=n}},function(e,t,n){"use strict";var r=n(224),o=n(18),i=n(78),a=n(19)("toStringTag"),c=Object,u="Arguments"===i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=c(e),a))?n:u?i(t):"Object"===(r=i(t))&&o(t.callee)?"Arguments":r}},function(e,t,n){"use strict";var r=n(278),o=n(41);e.exports=function(e,t,n){return n.get&&r(n.get,t,{getter:!0}),n.set&&r(n.set,t,{setter:!0}),o.f(e,t,n)}},function(e,t,n){"use strict";var r=n(294),o=n(51);e.exports=r(o.proto,"size","get")||function(e){return e.size}},function(e,t,n){"use strict";var r=n(17),o=n(127),i=n(18),a=n(145),c=n(221),u=n(19),s=n(495),l=n(317),f=n(60),d=n(162),p=o&&o.prototype,h=u("species"),m=!1,v=i(r.PromiseRejectionEvent),g=a("Promise",(function(){var e=c(o),t=e!==String(o);if(!t&&66===d)return!0;if(f&&(!p.catch||!p.finally))return!0;if(!d||d<51||!/native code/.test(e)){var n=new o((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[h]=r,!(m=n.then((function(){}))instanceof r))return!0}return!t&&(s||l)&&!v}));e.exports={CONSTRUCTOR:g,REJECTION_EVENT:v,SUBCLASSING:m}},function(e,t,n){"use strict";var r=n(43),o=TypeError,i=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw o("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new i(e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"blue",(function(){return j})),n.d(t,"cyan",(function(){return E})),n.d(t,"geekblue",(function(){return k})),n.d(t,"generate",(function(){return d})),n.d(t,"gold",(function(){return b})),n.d(t,"green",(function(){return x})),n.d(t,"grey",(function(){return _})),n.d(t,"lime",(function(){return O})),n.d(t,"magenta",(function(){return S})),n.d(t,"orange",(function(){return y})),n.d(t,"presetDarkPalettes",(function(){return m})),n.d(t,"presetPalettes",(function(){return h})),n.d(t,"presetPrimaryColors",(function(){return p})),n.d(t,"purple",(function(){return C})),n.d(t,"red",(function(){return v})),n.d(t,"volcano",(function(){return g})),n.d(t,"yellow",(function(){return w}));var r=n(20),o=n(111),i=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function a(e){var t=e.r,n=e.g,o=e.b,i=Object(r.i)(t,n,o);return{h:360*i.h,s:i.s,v:i.v}}function c(e){var t=e.r,n=e.g,o=e.b;return"#".concat(Object(r.g)(t,n,o,!1))}function u(e,t,n){var r=n/100;return{r:(t.r-e.r)*r+e.r,g:(t.g-e.g)*r+e.g,b:(t.b-e.b)*r+e.b}}function s(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-2*t:Math.round(e.h)+2*t:n?Math.round(e.h)+2*t:Math.round(e.h)-2*t)<0?r+=360:r>=360&&(r-=360),r}function l(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-.16*t:4===t?e.s+.16:e.s+.05*t)>1&&(r=1),n&&5===t&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function f(e,t,n){var r;return(r=n?e.v+.05*t:e.v-.15*t)>1&&(r=1),Number(r.toFixed(2))}function d(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=Object(o.a)(e),d=5;d>0;d-=1){var p=a(r),h=c(Object(o.a)({h:s(p,d,!0),s:l(p,d,!0),v:f(p,d,!0)}));n.push(h)}n.push(c(r));for(var m=1;m<=4;m+=1){var v=a(r),g=c(Object(o.a)({h:s(v,m),s:l(v,m),v:f(v,m)}));n.push(g)}return"dark"===t.theme?i.map((function(e){var r=e.index,i=e.opacity;return c(u(Object(o.a)(t.backgroundColor||"#141414"),Object(o.a)(n[r]),100*i))})):n}var p={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},h={},m={};Object.keys(p).forEach((function(e){h[e]=d(p[e]),h[e].primary=h[e][5],m[e]=d(p[e],{theme:"dark",backgroundColor:"#141414"}),m[e].primary=m[e][5]}));var v=h.red,g=h.volcano,b=h.gold,y=h.orange,w=h.yellow,O=h.lime,x=h.green,E=h.cyan,j=h.blue,k=h.geekblue,C=h.purple,S=h.magenta,_=h.grey},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}},function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(529)},function(e,t,n){"use strict";var r=n(0),o=Object(r.createContext)(void 0);t.a=o},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return i}));var r=n(39),o=Object(r.a)("success","processing","error","default","warning"),i=Object(r.a)("pink","red","yellow","orange","cyan","green","blue","purple","geekblue","magenta","volcano","gold","lime")},function(e,t,n){"use strict";var r=n(6),o=n(175),i=n(176),a=n(40),c=n(222),u=n(101),s=n(66),l=n(146),f=n(19),d=n(177),p=n(180),h=d("slice"),m=f("species"),v=Array,g=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(e,t){var n,r,f,d=s(this),h=u(d),b=c(e,h),y=c(void 0===t?h:t,h);if(o(d)&&(n=d.constructor,(i(n)&&(n===v||o(n.prototype))||a(n)&&null===(n=n[m]))&&(n=void 0),n===v||void 0===n))return p(d,b,y);for(r=new(void 0===n?v:n)(g(y-b,0)),f=0;b<y;b++,f++)b in d&&l(r,f,d[b]);return r.length=f,r}})},function(e,t,n){"use strict";var r=n(6),o=n(190);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(e,t,n){"use strict";var r=n(26),o=n(287);r("toPrimitive"),o()},function(e,t,n){"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(e,t,n){"use strict";var r,o,i=n(17),a=n(161),c=i.process,u=i.Deno,s=c&&c.versions||u&&u.version,l=s&&s.v8;l&&(o=(r=l.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),e.exports=o},function(e,t,n){"use strict";var r=n(264);t.a=r.b},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);function o(e,t,n){var o=r.useRef({});return"value"in o.current&&!n(o.current.condition,t)||(o.current.value=e(),o.current.condition=t),o.current.value}},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M799.86 166.31c.02 0 .04.02.08.06l57.69 57.7c.04.03.05.05.06.08a.12.12 0 010 .06c0 .03-.02.05-.06.09L569.93 512l287.7 287.7c.04.04.05.06.06.09a.12.12 0 010 .07c0 .02-.02.04-.06.08l-57.7 57.69c-.03.04-.05.05-.07.06a.12.12 0 01-.07 0c-.03 0-.05-.02-.09-.06L512 569.93l-287.7 287.7c-.04.04-.06.05-.09.06a.12.12 0 01-.07 0c-.02 0-.04-.02-.08-.06l-57.69-57.7c-.04-.03-.05-.05-.06-.07a.12.12 0 010-.07c0-.03.02-.05.06-.09L454.07 512l-287.7-287.7c-.04-.04-.05-.06-.06-.09a.12.12 0 010-.07c0-.02.02-.04.06-.08l57.7-57.69c.03-.04.05-.05.07-.06a.12.12 0 01.07 0c.03 0 .05.02.09.06L512 454.07l287.7-287.7c.04-.04.06-.05.09-.06a.12.12 0 01.07 0z"}}]},name:"close",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="CloseOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(13);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,t,n){"use strict";var r=n(11),o=n(13),i=n(78),a=Object,c=r("".split);e.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"===i(e)?c(e,""):a(e)}:a},function(e,t,n){"use strict";var r=n(272),o=n(120);e.exports=function(e){var t=r(e,"string");return o(t)?t:t+""}},function(e,t,n){"use strict";var r=n(11),o=0,i=Math.random(),a=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},function(e,t,n){"use strict";var r=n(17),o=n(40),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){"use strict";var r=n(36),o=n(28),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,c=o(i,"name"),u=c&&"something"===function(){}.name,s=c&&(!r||r&&a(i,"name").configurable);e.exports={EXISTS:c,PROPER:u,CONFIGURABLE:s}},function(e,t,n){"use strict";var r=n(103),o=n(169),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){"use strict";var r=n(144),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){"use strict";t.f=Object.getOwnPropertySymbols},function(e,t,n){"use strict";var r=n(78);e.exports=Array.isArray||function(e){return"Array"===r(e)}},function(e,t,n){"use strict";var r=n(11),o=n(13),i=n(18),a=n(147),c=n(44),u=n(221),s=function(){},l=[],f=c("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=r(d.exec),h=!d.exec(s),m=function(e){if(!i(e))return!1;try{return f(s,l,e),!0}catch(e){return!1}},v=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!p(d,u(e))}catch(e){return!0}};v.sham=!0,e.exports=!f||o((function(){var e;return m(m.call)||!m(Object)||!m((function(){e=!0}))||e}))?v:m},function(e,t,n){"use strict";var r=n(13),o=n(19),i=n(162),a=o("species");e.exports=function(e){return i>=51||!r((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,n){"use strict";var r=n(281),o=n(223);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){"use strict";var r=n(166),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},function(e,t,n){"use strict";var r=n(11);e.exports=r([].slice)},function(e,t,n){"use strict";n(26)("asyncIterator")},function(e,t,n){"use strict";var r=n(44),o=n(26),i=n(84);o("toStringTag"),i(r("Symbol"),"Symbol")},function(e,t,n){"use strict";var r=n(17);n(84)(r.JSON,"JSON",!0)},function(e,t,n){"use strict";n(84)(Math,"Math",!0)},function(e,t,n){"use strict";var r=n(294),o=n(29),i=n(396);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.prototype,"__proto__","set"))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return o(n),i(r),t?e(n,r):n.__proto__=r,n}}():void 0)},function(e,t,n){"use strict";var r=n(15),o=n(29),i=n(122);e.exports=function(e,t,n){var a,c;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw n;return n}a=r(a,e)}catch(e){c=!0,a=e}if("throw"===t)throw n;if(c)throw a;return o(a),n}},function(e,t,n){"use strict";var r=n(17),o=n(78);e.exports="process"===o(r.process)},function(e,t,n){var r=n(502);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){"use strict";e.exports=n(522)},function(e,t,n){"use strict";var r,o,i=n(15),a=n(11),c=n(49),u=n(323),s=n(237),l=n(103),f=n(124),d=n(92).get,p=n(324),h=n(325),m=l("native-string-replace",String.prototype.replace),v=RegExp.prototype.exec,g=v,b=a("".charAt),y=a("".indexOf),w=a("".replace),O=a("".slice),x=(o=/b*/g,i(v,r=/a/,"a"),i(v,o,"a"),0!==r.lastIndex||0!==o.lastIndex),E=s.BROKEN_CARET,j=void 0!==/()??/.exec("")[1];(x||j||E||p||h)&&(g=function(e){var t,n,r,o,a,s,l,p=this,h=d(p),k=c(e),C=h.raw;if(C)return C.lastIndex=p.lastIndex,t=i(g,C,k),p.lastIndex=C.lastIndex,t;var S=h.groups,_=E&&p.sticky,M=i(u,p),T=p.source,P=0,F=k;if(_&&(M=w(M,"y",""),-1===y(M,"g")&&(M+="g"),F=O(k,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==b(k,p.lastIndex-1))&&(T="(?: "+T+")",F=" "+F,P++),n=new RegExp("^(?:"+T+")",M)),j&&(n=new RegExp("^"+T+"$(?!\\s)",M)),x&&(r=p.lastIndex),o=i(v,_?n:p,F),_?o?(o.input=O(o.input,P),o[0]=O(o[0],P),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:x&&o&&(p.lastIndex=p.global?o.index+o[0].length:r),j&&o&&o.length>1&&i(m,o[0],n,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&S)for(o.groups=s=f(null),a=0;a<S.length;a++)s[(l=S[a])[0]]=o[l[1]];return o}),e.exports=g},function(e,t,n){"use strict";var r=n(7),o=n(35);t.a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=new Set;function a(e,t){var c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,u=i.has(e);if(Object(o.a)(!u,"Warning: There may be circular references"),u)return!1;if(e===t)return!0;if(n&&c>1)return!1;i.add(e);var s=c+1;if(Array.isArray(e)){if(!Array.isArray(t)||e.length!==t.length)return!1;for(var l=0;l<e.length;l++)if(!a(e[l],t[l],s))return!1;return!0}if(e&&t&&"object"===Object(r.a)(e)&&"object"===Object(r.a)(t)){var f=Object.keys(e);return f.length===Object.keys(t).length&&f.every((function(n){return a(e[n],t[n],s)}))}return!1}return a(e,t)}},function(e,t,n){"use strict";n.r(t);var r=n(22),o=n(2),i=n(3),a=n(23),c=n(24),u=n(31),s=n(32),l=n(0),f=n(244),d=n(5),p=n.n(d),h=n(56),m=n(198),v=n(133),g=["getContainer"],b=0,y=Date.now();function w(){var e=b;return b+=1,"rcNotification_".concat(y,"_").concat(e)}var O=function(e){Object(u.a)(n,e);var t=Object(s.a)(n);function n(){var e;Object(a.a)(this,n);for(var r=arguments.length,o=new Array(r),c=0;c<r;c++)o[c]=arguments[c];return(e=t.call.apply(t,[this].concat(o))).state={notices:[]},e.hookRefs=new Map,e.add=function(t,n){var r,o=null!==(r=t.key)&&void 0!==r?r:w(),a=Object(i.a)(Object(i.a)({},t),{},{key:o}),c=e.props.maxCount;e.setState((function(e){var t=e.notices,r=t.map((function(e){return e.notice.key})).indexOf(o),i=t.concat();return-1!==r?i.splice(r,1,{notice:a,holderCallback:n}):(c&&t.length>=c&&(a.key=i[0].notice.key,a.updateMark=w(),a.userPassKey=o,i.shift()),i.push({notice:a,holderCallback:n})),{notices:i}}))},e.remove=function(t){e.setState((function(e){return{notices:e.notices.filter((function(e){var n=e.notice,r=n.key,o=n.userPassKey;return(null!=o?o:r)!==t}))}}))},e.noticePropsMap={},e}return Object(c.a)(n,[{key:"getTransitionName",value:function(){var e=this.props,t=e.prefixCls,n=e.animation,r=this.props.transitionName;return!r&&n&&(r="".concat(t,"-").concat(n)),r}},{key:"render",value:function(){var e=this,t=this.state.notices,n=this.props,r=n.prefixCls,a=n.className,c=n.closeIcon,u=n.style,s=[];return t.forEach((function(n,o){var a=n.notice,u=n.holderCallback,l=o===t.length-1?a.updateMark:void 0,f=a.key,d=a.userPassKey,p=Object(i.a)(Object(i.a)(Object(i.a)({prefixCls:r,closeIcon:c},a),a.props),{},{key:f,noticeKey:d||f,updateMark:l,onClose:function(t){var n;e.remove(t),null===(n=a.onClose)||void 0===n||n.call(a)},onClick:a.onClick,children:a.content});s.push(f),e.noticePropsMap[f]={props:p,holderCallback:u}})),l.createElement("div",{className:p()(r,a),style:u},l.createElement(h.CSSMotionList,{keys:s,motionName:this.getTransitionName(),onVisibleChanged:function(t,n){var r=n.key;t||delete e.noticePropsMap[r]}},(function(t){var n=t.key,a=t.className,c=t.style,u=t.visible,s=e.noticePropsMap[n],f=s.props,d=s.holderCallback;return d?l.createElement("div",{key:n,className:p()(a,"".concat(r,"-hook-holder")),style:Object(i.a)({},c),ref:function(t){void 0!==n&&(t?(e.hookRefs.set(n,t),d(t,f)):e.hookRefs.delete(n))}}):l.createElement(m.a,Object(o.a)({},f,{className:p()(a,null==f?void 0:f.className),style:Object(i.a)(Object(i.a)({},c),null==f?void 0:f.style),visible:u}))})))}}]),n}(l.Component);O.newInstance=void 0,O.defaultProps={prefixCls:"rc-notification",animation:"fade",style:{top:65,left:"50%"}},O.newInstance=function(e,t){var n=e||{},i=n.getContainer,a=Object(r.a)(n,g),c=document.createElement("div");i?i().appendChild(c):document.body.appendChild(c);var u=!1;Object(f.a)(l.createElement(O,Object(o.a)({},a,{ref:function(e){u||(u=!0,t({notice:function(t){e.add(t)},removeNotice:function(t){e.remove(t)},component:e,destroy:function(){Object(f.b)(c),c.parentNode&&c.parentNode.removeChild(c)},useNotification:function(){return Object(v.a)(e)}}))}})),c)};var x=O;t.default=x},function(e,t,n){"use strict";var r=n(2),o={locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"OK",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"},i=n(197),a={lang:Object(r.a)({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},o),timePickerLocale:Object(r.a)({},i.a)};t.a=a},function(e,t,n){"use strict";function r(e){if(Array.isArray(e))return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){return(r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a={placeholder:"Select time",rangePlaceholder:["Start time","End time"]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(2),o=n(1),i=n(23),a=n(24),c=n(31),u=n(32),s=n(0),l=n(47),f=n.n(l),d=n(5),p=n.n(d),h=function(e){Object(c.a)(n,e);var t=Object(u.a)(n);function n(){var e;Object(i.a)(this,n);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var n=e.props,r=n.onClose,o=n.noticeKey;r&&r(o)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return Object(a.a)(n,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){(this.props.duration!==e.duration||this.props.updateMark!==e.updateMark||this.props.visible!==e.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls,i=t.className,a=t.closable,c=t.closeIcon,u=t.style,l=t.onClick,d=t.children,h=t.holder,m="".concat(n,"-notice"),v=Object.keys(this.props).reduce((function(t,n){return"data-"!==n.substr(0,5)&&"aria-"!==n.substr(0,5)&&"role"!==n||(t[n]=e.props[n]),t}),{}),g=s.createElement("div",Object(r.a)({className:p()(m,i,Object(o.a)({},"".concat(m,"-closable"),a)),style:u,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:l},v),s.createElement("div",{className:"".concat(m,"-content")},d),a?s.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(m,"-close")},c||s.createElement("span",{className:"".concat(m,"-close-x")})):null);return h?f.a.createPortal(g,h):g}}]),n}(s.Component);h.defaultProps={onClose:function(){},duration:1.5}},function(e,t,n){"use strict";function r(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(0);t.a=Object(r.createContext)(void 0)},function(e,t,n){"use strict";var r=n(0),o=Object(r.createContext)({});t.a=o},function(e,t,n){"use strict";(function(e){var n=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,r){return e[0]===t&&(n=r,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),r=this.__entries__[n];return r&&r[1]},t.prototype.set=function(t,n){var r=e(this.__entries__,t);~r?this.__entries__[r][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,r=e(n,t);~r&&n.splice(r,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,r=this.__entries__;n<r.length;n++){var o=r[n];e.call(t,o[1],o[0])}},t}()}(),r="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,o=void 0!==e&&e.Math===Math?e:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),i="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(o):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)};var a=["top","right","bottom","left","width","height","size","weight"],c="undefined"!=typeof MutationObserver,u=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,r=!1,o=0;function a(){n&&(n=!1,e()),r&&u()}function c(){i(a)}function u(){var e=Date.now();if(n){if(e-o<2)return;r=!0}else n=!0,r=!1,setTimeout(c,t);o=e}return u}(this.refresh.bind(this),20)}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){r&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),c?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){r&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;a.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),s=function(e,t){for(var n=0,r=Object.keys(t);n<r.length;n++){var o=r[n];Object.defineProperty(e,o,{value:t[o],enumerable:!1,writable:!1,configurable:!0})}return e},l=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||o},f=g(0,0,0,0);function d(e){return parseFloat(e)||0}function p(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+d(e["border-"+n+"-width"])}),0)}function h(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return f;var r=l(e).getComputedStyle(e),o=function(e){for(var t={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var o=r[n],i=e["padding-"+o];t[o]=d(i)}return t}(r),i=o.left+o.right,a=o.top+o.bottom,c=d(r.width),u=d(r.height);if("border-box"===r.boxSizing&&(Math.round(c+i)!==t&&(c-=p(r,"left","right")+i),Math.round(u+a)!==n&&(u-=p(r,"top","bottom")+a)),!function(e){return e===l(e).document.documentElement}(e)){var s=Math.round(c+i)-t,h=Math.round(u+a)-n;1!==Math.abs(s)&&(c-=s),1!==Math.abs(h)&&(u-=h)}return g(o.left,o.top,c,u)}var m="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof l(e).SVGGraphicsElement}:function(e){return e instanceof l(e).SVGElement&&"function"==typeof e.getBBox};function v(e){return r?m(e)?function(e){var t=e.getBBox();return g(0,0,t.width,t.height)}(e):h(e):f}function g(e,t,n,r){return{x:e,y:t,width:n,height:r}}var b=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=v(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),y=function(e,t){var n,r,o,i,a,c,u,l=(r=(n=t).x,o=n.y,i=n.width,a=n.height,c="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,u=Object.create(c.prototype),s(u,{x:r,y:o,width:i,height:a,top:o,right:r+i,bottom:a+o,left:r}),u);s(this,{target:e,contentRect:l})},w=function(){function e(e,t,r){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=r}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof l(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new b(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof l(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new y(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),O="undefined"!=typeof WeakMap?new WeakMap:new n,x=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=u.getInstance(),r=new w(t,n,this);O.set(this,r)};["observe","unobserve","disconnect"].forEach((function(e){x.prototype[e]=function(){var t;return(t=O.get(this))[e].apply(t,arguments)}}));var E=void 0!==o.ResizeObserver?o.ResizeObserver:x;t.a=E}).call(this,n(102))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r={adjustX:1,adjustY:1},o=[0,0],i={left:{points:["cr","cl"],overflow:r,offset:[-4,0],targetOffset:o},right:{points:["cl","cr"],overflow:r,offset:[4,0],targetOffset:o},top:{points:["bc","tc"],overflow:r,offset:[0,-4],targetOffset:o},bottom:{points:["tc","bc"],overflow:r,offset:[0,4],targetOffset:o},topLeft:{points:["bl","tl"],overflow:r,offset:[0,-4],targetOffset:o},leftTop:{points:["tr","tl"],overflow:r,offset:[-4,0],targetOffset:o},topRight:{points:["br","tr"],overflow:r,offset:[0,-4],targetOffset:o},rightTop:{points:["tl","tr"],overflow:r,offset:[4,0],targetOffset:o},bottomRight:{points:["tr","br"],overflow:r,offset:[0,4],targetOffset:o},rightBottom:{points:["bl","br"],overflow:r,offset:[4,0],targetOffset:o},bottomLeft:{points:["tl","bl"],overflow:r,offset:[0,4],targetOffset:o},leftBottom:{points:["br","bl"],overflow:r,offset:[-4,0],targetOffset:o}}},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(7),a=n(5),c=n.n(a),u=n(0),s=n(70),l=n(201),f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};var d=["xs","sm","md","lg","xl","xxl"],p=u.forwardRef((function(e,t){var n,a=u.useContext(s.b),p=a.getPrefixCls,h=a.direction,m=u.useContext(l.a),v=m.gutter,g=m.wrap,b=m.supportFlexGap,y=e.prefixCls,w=e.span,O=e.order,x=e.offset,E=e.push,j=e.pull,k=e.className,C=e.children,S=e.flex,_=e.style,M=f(e,["prefixCls","span","order","offset","push","pull","className","children","flex","style"]),T=p("col",y),P={};d.forEach((function(t){var n,a={},c=e[t];"number"==typeof c?a.span=c:"object"===Object(i.a)(c)&&(a=c||{}),delete M[t],P=Object(o.a)(Object(o.a)({},P),(n={},Object(r.a)(n,"".concat(T,"-").concat(t,"-").concat(a.span),void 0!==a.span),Object(r.a)(n,"".concat(T,"-").concat(t,"-order-").concat(a.order),a.order||0===a.order),Object(r.a)(n,"".concat(T,"-").concat(t,"-offset-").concat(a.offset),a.offset||0===a.offset),Object(r.a)(n,"".concat(T,"-").concat(t,"-push-").concat(a.push),a.push||0===a.push),Object(r.a)(n,"".concat(T,"-").concat(t,"-pull-").concat(a.pull),a.pull||0===a.pull),Object(r.a)(n,"".concat(T,"-rtl"),"rtl"===h),n))}));var F=c()(T,(n={},Object(r.a)(n,"".concat(T,"-").concat(w),void 0!==w),Object(r.a)(n,"".concat(T,"-order-").concat(O),O),Object(r.a)(n,"".concat(T,"-offset-").concat(x),x),Object(r.a)(n,"".concat(T,"-push-").concat(E),E),Object(r.a)(n,"".concat(T,"-pull-").concat(j),j),n),k,P),N={};if(v&&v[0]>0){var A=v[0]/2;N.paddingLeft=A,N.paddingRight=A}if(v&&v[1]>0&&!b){var R=v[1]/2;N.paddingTop=R,N.paddingBottom=R}return S&&(N.flex=function(e){return"number"==typeof e?"".concat(e," ").concat(e," auto"):/^\d+(\.\d+)?(px|em|rem|%)$/.test(e)?"0 0 ".concat(e):e}(S),!1!==g||N.minWidth||(N.minWidth=0)),u.createElement("div",Object(o.a)({},M,{style:Object(o.a)(Object(o.a)({},N),_),className:F,ref:t}),C)}));t.a=p},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(1),o=n(2),i=n(8),a=n(5),c=n.n(a),u=n(56),s=n(0),l=n(70),f=n(139),d=n(12),p=n(134),h=[];function m(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return{key:"string"==typeof e?e:"".concat(n,"-").concat(r),error:e,errorStatus:t}}function v(e){var t=e.help,n=e.helpStatus,a=e.errors,v=void 0===a?h:a,g=e.warnings,b=void 0===g?h:g,y=e.className,w=e.fieldId,O=e.onVisibleChanged,x=s.useContext(d.c).prefixCls,E=s.useContext(l.b).getPrefixCls,j="".concat(x,"-item-explain"),k=E(),C=Object(p.a)(v),S=Object(p.a)(b),_=s.useMemo((function(){return null!=t?[m(t,n,"help")]:[].concat(Object(i.a)(C.map((function(e,t){return m(e,"error","error",t)}))),Object(i.a)(S.map((function(e,t){return m(e,"warning","warning",t)}))))}),[t,n,C,S]),M={};return w&&(M.id="".concat(w,"_help")),s.createElement(u.default,{motionDeadline:f.a.motionDeadline,motionName:"".concat(k,"-show-help"),visible:!!_.length,onVisibleChanged:O},(function(e){var t=e.className,n=e.style;return s.createElement("div",Object(o.a)({},M,{className:c()(j,t,y),style:n,role:"alert"}),s.createElement(u.CSSMotionList,Object(o.a)({keys:_},f.a,{motionName:"".concat(k,"-show-help-item"),component:!1}),(function(e){var t=e.key,n=e.error,o=e.errorStatus,i=e.className,a=e.style;return s.createElement("div",{key:t,className:c()(i,Object(r.a)({},"".concat(j,"-").concat(o),o)),style:a},n)})))}))}},function(e,t,n){"use strict";var r=n(23),o=n(24),i=n(9),a=n(31),c=n(32),u=n(128),s=n(25),l=n(0),f=n(70),d=n(30),p=0,h={};function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=p++,r=t;function o(){(r-=1)<=0?(e(),delete h[n]):h[n]=Object(d.a)(o)}return h[n]=Object(d.a)(o),n}m.cancel=function(e){void 0!==e&&(d.a.cancel(h[e]),delete h[e])},m.ids=h;var v,g=n(38);function b(e){return!e||null===e.offsetParent||e.hidden}function y(e){return e instanceof Document?e.body:Array.from(e.childNodes).find((function(e){return(null==e?void 0:e.nodeType)===Node.ELEMENT_NODE}))}function w(e){var t=(e||"").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);return!(t&&t[1]&&t[2]&&t[3])||!(t[1]===t[2]&&t[2]===t[3])}var O=function(e){Object(a.a)(n,e);var t=Object(c.a)(n);function n(){var e;return Object(r.a)(this,n),(e=t.apply(this,arguments)).containerRef=l.createRef(),e.animationStart=!1,e.destroyed=!1,e.onClick=function(t,n){var r,o,a=e.props,c=a.insertExtraNode;if(!a.disabled&&t&&!b(t)&&!t.className.includes("-leave")){e.extraNode=document.createElement("div");var s=Object(i.a)(e).extraNode,l=e.context.getPrefixCls;s.className="".concat(l(""),"-click-animating-node");var f=e.getAttributeName();if(t.setAttribute(f,"true"),n&&"#fff"!==n&&"#ffffff"!==n&&"rgb(255, 255, 255)"!==n&&"rgba(255, 255, 255, 1)"!==n&&w(n)&&!/rgba\((?:\d*, ){3}0\)/.test(n)&&"transparent"!==n){s.style.borderColor=n;var d=(null===(r=t.getRootNode)||void 0===r?void 0:r.call(t))||t.ownerDocument,p=null!==(o=y(d))&&void 0!==o?o:d;v=Object(u.b)("\n      [".concat(l(""),"-click-animating-without-extra-node='true']::after, .").concat(l(""),"-click-animating-node {\n        --antd-wave-shadow-color: ").concat(n,";\n      }"),"antd-wave",{csp:e.csp,attachTo:p})}c&&t.appendChild(s),["transition","animation"].forEach((function(n){t.addEventListener("".concat(n,"start"),e.onTransitionStart),t.addEventListener("".concat(n,"end"),e.onTransitionEnd)}))}},e.onTransitionStart=function(t){if(!e.destroyed){var n=e.containerRef.current;t&&t.target===n&&!e.animationStart&&e.resetEffect(n)}},e.onTransitionEnd=function(t){t&&"fadeEffect"===t.animationName&&e.resetEffect(t.target)},e.bindAnimationEvent=function(t){if(t&&t.getAttribute&&!t.getAttribute("disabled")&&!t.className.includes("disabled")){var n=function(n){if("INPUT"!==n.target.tagName&&!b(n.target)){e.resetEffect(t);var r=getComputedStyle(t).getPropertyValue("border-top-color")||getComputedStyle(t).getPropertyValue("border-color")||getComputedStyle(t).getPropertyValue("background-color");e.clickWaveTimeoutId=window.setTimeout((function(){return e.onClick(t,r)}),0),m.cancel(e.animationStartId),e.animationStart=!0,e.animationStartId=m((function(){e.animationStart=!1}),10)}};return t.addEventListener("click",n,!0),{cancel:function(){t.removeEventListener("click",n,!0)}}}},e.renderWave=function(t){var n=t.csp,r=e.props.children;if(e.csp=n,!l.isValidElement(r))return r;var o=e.containerRef;return Object(s.c)(r)&&(o=Object(s.a)(r.ref,e.containerRef)),Object(g.a)(r,{ref:o})},e}return Object(o.a)(n,[{key:"componentDidMount",value:function(){this.destroyed=!1;var e=this.containerRef.current;e&&1===e.nodeType&&(this.instance=this.bindAnimationEvent(e))}},{key:"componentWillUnmount",value:function(){this.instance&&this.instance.cancel(),this.clickWaveTimeoutId&&clearTimeout(this.clickWaveTimeoutId),this.destroyed=!0}},{key:"getAttributeName",value:function(){var e=this.context.getPrefixCls,t=this.props.insertExtraNode;return"".concat(e(""),t?"-click-animating":"-click-animating-without-extra-node")}},{key:"resetEffect",value:function(e){var t=this;if(e&&e!==this.extraNode&&e instanceof Element){var n=this.props.insertExtraNode,r=this.getAttributeName();e.setAttribute(r,"false"),v&&(v.innerHTML=""),n&&this.extraNode&&e.contains(this.extraNode)&&e.removeChild(this.extraNode),["transition","animation"].forEach((function(n){e.removeEventListener("".concat(n,"start"),t.onTransitionStart),e.removeEventListener("".concat(n,"end"),t.onTransitionEnd)}))}}},{key:"render",value:function(){return l.createElement(f.a,null,this.renderWave)}}]),n}(l.Component);O.contextType=f.b;t.a=O},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(7);function o(e){var t=function(e,t){if("object"!==Object(r.a)(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,t||"default");if("object"!==Object(r.a)(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===Object(r.a)(t)?t:String(t)}},function(e,t,n){"use strict";var r=n(6),o=n(77),i=n(178);r({target:"Object",stat:!0,forced:n(13)((function(){i(1)}))},{keys:function(e){return i(o(e))}})},function(e,t,n){"use strict";var r=n(6),o=n(60),i=n(36),a=n(17),c=n(125),u=n(11),s=n(145),l=n(28),f=n(231),d=n(91),p=n(120),h=n(272),m=n(13),v=n(123).f,g=n(83).f,b=n(41).f,y=n(524),w=n(525).trim,O=a.Number,x=c.Number,E=O.prototype,j=a.TypeError,k=u("".slice),C=u("".charCodeAt),S=function(e){var t=h(e,"number");return"bigint"==typeof t?t:_(t)},_=function(e){var t,n,r,o,i,a,c,u,s=h(e,"number");if(p(s))throw j("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=w(s),43===(t=C(s,0))||45===t){if(88===(n=C(s,2))||120===n)return NaN}else if(48===t){switch(C(s,1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+s}for(a=(i=k(s,2)).length,c=0;c<a;c++)if((u=C(i,c))<48||u>o)return NaN;return parseInt(i,r)}return+s},M=s("Number",!O(" 0o1")||!O("0b1")||O("+0x1")),T=function(e){return d(E,e)&&m((function(){y(e)}))},P=function(e){var t=arguments.length<1?0:O(S(e));return T(this)?f(Object(t),this,P):t};P.prototype=E,M&&!o&&(E.constructor=P),r({global:!0,constructor:!0,wrap:!0,forced:M},{Number:P});var F=function(e,t){for(var n,r=i?v(t):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;r.length>o;o++)l(t,n=r[o])&&!l(e,n)&&b(e,n,g(t,n))};o&&x&&F(c.Number,x),(M||o)&&F(c.Number,O)},function(e,t,n){"use strict";var r=n(28),o=n(46),i=n(523),a=n(19)("toPrimitive"),c=Date.prototype;r(c,a)||o(c,a,i)},function(e,t,n){"use strict";var r=n(6),o=n(141).filter;r({target:"Array",proto:!0,forced:!n(177)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return g}));var r=n(27),o=n(64),i=n(0),a=n.n(i),c=n(54),u=n(2),s=n(86),l=n(59),f=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(c.createBrowserHistory)(t.props),t}return Object(o.a)(t,e),t.prototype.render=function(){return a.a.createElement(r.Router,{history:this.history,children:this.props.children})},t}(a.a.Component);a.a.Component;var d=function(e,t){return"function"==typeof e?e(t):e},p=function(e,t){return"string"==typeof e?Object(c.createLocation)(e,null,null,t):e},h=function(e){return e},m=a.a.forwardRef;void 0===m&&(m=h);var v=m((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=Object(s.a)(e,["innerRef","navigate","onClick"]),c=i.target,l=Object(u.a)({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||c&&"_self"!==c||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=h!==m&&t||n,a.a.createElement("a",l)}));var g=m((function(e,t){var n=e.component,o=void 0===n?v:n,i=e.replace,f=e.to,g=e.innerRef,b=Object(s.a)(e,["component","replace","to","innerRef"]);return a.a.createElement(r.__RouterContext.Consumer,null,(function(e){e||Object(l.default)(!1);var n=e.history,r=p(d(f,e.location),e.location),s=r?n.createHref(r):"",v=Object(u.a)({},b,{href:s,navigate:function(){var t=d(f,e.location),r=Object(c.createPath)(e.location)===Object(c.createPath)(p(t));(i||r?n.replace:n.push)(t)}});return h!==m?v.ref=t||g:v.innerRef=g,a.a.createElement(o,v)}))})),b=function(e){return e},y=a.a.forwardRef;void 0===y&&(y=b);y((function(e,t){var n=e["aria-current"],o=void 0===n?"page":n,i=e.activeClassName,c=void 0===i?"active":i,f=e.activeStyle,h=e.className,m=e.exact,v=e.isActive,w=e.location,O=e.sensitive,x=e.strict,E=e.style,j=e.to,k=e.innerRef,C=Object(s.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return a.a.createElement(r.__RouterContext.Consumer,null,(function(e){e||Object(l.default)(!1);var n=w||e.location,i=p(d(j,n),n),s=i.pathname,S=s&&s.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),_=S?Object(r.matchPath)(n.pathname,{path:S,exact:m,sensitive:O,strict:x}):null,M=!!(v?v(_,n):_),T="function"==typeof h?h(M):h,P="function"==typeof E?E(M):E;M&&(T=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(T,c),P=Object(u.a)({},P,f));var F=Object(u.a)({"aria-current":M&&o||null,className:T,style:P,to:i},C);return b!==y?F.ref=t||k:F.innerRef=k,a.a.createElement(g,F)}))}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);function o(e){var t=r.useRef();return t.current=e,r.useCallback((function(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return null===(e=t.current)||void 0===e?void 0:e.call.apply(e,[t].concat(r))}),[])}},function(e,t,n){"use strict";var r=n(6),o=n(60),i=n(127),a=n(13),c=n(44),u=n(18),s=n(235),l=n(319),f=n(46),d=i&&i.prototype;if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){d.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=s(this,c("Promise")),n=u(e);return this.then(n?function(n){return l(t,e()).then((function(){return n}))}:e,n?function(n){return l(t,e()).then((function(){throw n}))}:e)}}),!o&&u(i)){var p=c("Promise").prototype.finally;d.finally!==p&&f(d,"finally",p,{unsafe:!0})}},function(e,t,n){"use strict";var r=n(6),o=n(13),i=n(175),a=n(40),c=n(77),u=n(101),s=n(376),l=n(146),f=n(282),d=n(177),p=n(19),h=n(162),m=p("isConcatSpreadable"),v=h>=51||!o((function(){var e=[];return e[m]=!1,e.concat()[0]!==e})),g=function(e){if(!a(e))return!1;var t=e[m];return void 0!==t?!!t:i(e)};r({target:"Array",proto:!0,arity:1,forced:!v||!d("concat")},{concat:function(e){var t,n,r,o,i,a=c(this),d=f(a,0),p=0;for(t=-1,r=arguments.length;t<r;t++)if(g(i=-1===t?a:arguments[t]))for(o=u(i),s(p+o),n=0;n<o;n++,p++)n in i&&l(d,p,i[n]);else s(p+1),l(d,p++,i);return d.length=p,d}})},function(e,t,n){var r=n(351).Symbol;e.exports=r},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,c,u=a(e),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(u[l]=n[l]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(u[c[f]]=n[c[f]])}}return u}},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){"use strict";var r=n(17),o=n(220),i=r["__core-js_shared__"]||o("__core-js_shared__",{});e.exports=i},function(e,t,n){"use strict";var r=n(17),o=Object.defineProperty;e.exports=function(e,t){try{o(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},function(e,t,n){"use strict";var r=n(11),o=n(18),i=n(219),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},function(e,t,n){"use strict";var r=n(144),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t,n){"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){"use strict";var r={};r[n(19)("toStringTag")]="z",e.exports="[object z]"===String(r)},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(60),a=n(171),c=n(18),u=n(395),s=n(226),l=n(185),f=n(84),d=n(104),p=n(46),h=n(19),m=n(126),v=n(292),g=a.PROPER,b=a.CONFIGURABLE,y=v.IteratorPrototype,w=v.BUGGY_SAFARI_ITERATORS,O=h("iterator"),x=function(){return this};e.exports=function(e,t,n,a,h,v,E){u(n,t,a);var j,k,C,S=function(e){if(e===h&&F)return F;if(!w&&e in T)return T[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},_=t+" Iterator",M=!1,T=e.prototype,P=T[O]||T["@@iterator"]||h&&T[h],F=!w&&P||S(h),N="Array"===t&&T.entries||P;if(N&&(j=s(N.call(new e)))!==Object.prototype&&j.next&&(i||s(j)===y||(l?l(j,y):c(j[O])||p(j,O,x)),f(j,_,!0,!0),i&&(m[_]=x)),g&&"values"===h&&P&&"values"!==P.name&&(!i&&b?d(T,"name","values"):(M=!0,F=function(){return o(P,this)})),h)if(k={values:S("values"),keys:v?F:S("keys"),entries:S("entries")},E)for(C in k)(w||M||!(C in T))&&p(T,C,k[C]);else r({target:t,proto:!0,forced:w||M},k);return i&&!E||T[O]===F||p(T,O,F,{name:h}),m[t]=F,k}},function(e,t,n){"use strict";var r=n(28),o=n(18),i=n(77),a=n(172),c=n(293),u=a("IE_PROTO"),s=Object,l=s.prototype;e.exports=c?s.getPrototypeOf:function(e){var t=i(e);if(r(t,u))return t[u];var n=t.constructor;return o(n)&&t instanceof n?n.prototype:t instanceof s?l:null}},function(e,t,n){"use strict";e.exports=function(e,t){return{value:e,done:t}}},function(e,t,n){"use strict";var r=n(147),o=n(122),i=n(67),a=n(126),c=n(19)("iterator");e.exports=function(e){if(!i(e))return o(e,c)||o(e,"@@iterator")||a[r(e)]}},function(e,t,n){"use strict";var r=n(19)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(91),o=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw o("Incorrect invocation")}},function(e,t,n){"use strict";var r=n(18),o=n(40),i=n(185);e.exports=function(e,t,n){var a,c;return i&&r(a=t.constructor)&&a!==n&&o(c=a.prototype)&&c!==n.prototype&&i(e,c),e}},function(e,t,n){"use strict";var r=n(44),o=n(148),i=n(19),a=n(36),c=i("species");e.exports=function(e){var t=r(e);a&&t&&!t[c]&&o(t,c,{configurable:!0,get:function(){return this}})}},function(e,t,n){"use strict";var r=n(51),o=n(61),i=r.Set,a=r.add;e.exports=function(e){var t=new i;return o(e,(function(e){a(t,e)})),t}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&p())}function p(){if(!l){var e=c(d);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||l||c(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(29),o=n(304),i=n(67),a=n(19)("species");e.exports=function(e,t){var n,c=r(e).constructor;return void 0===c||i(n=r(c)[a])?t:o(n)}},function(e,t,n){"use strict";e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,t,n){"use strict";var r=n(13),o=n(17).RegExp,i=r((function(){var e=o("a","y");return e.lastIndex=2,null!==e.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),c=i||r((function(){var e=o("^r","gy");return e.lastIndex=2,null!==e.exec("str")}));e.exports={BROKEN_CARET:c,MISSED_STICKY:a,UNSUPPORTED_Y:i}},function(e,t,n){"use strict";var r=n(6),o=n(13),i=n(77),a=n(226),c=n(293);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!c},{getPrototypeOf:function(e){return a(i(e))}})},function(e,t,n){"use strict";n(6)({target:"Object",stat:!0},{setPrototypeOf:n(185)})},function(e,t,n){"use strict";n(159);var r=n(288),o=n(46),i=n(190),a=n(13),c=n(19),u=n(104),s=c("species"),l=RegExp.prototype;e.exports=function(e,t,n,f){var d=c(e),p=!a((function(){var t={};return t[d]=function(){return 7},7!==""[e](t)})),h=p&&!a((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[s]=function(){return n},n.flags="",n[d]=/./[d]),n.exec=function(){return t=!0,null},n[d](""),!t}));if(!p||!h||n){var m=r(/./[d]),v=t(d,""[e],(function(e,t,n,o,a){var c=r(e),u=t.exec;return u===i||u===l.exec?p&&!a?{done:!0,value:m(t,n,o)}:{done:!0,value:c(n,t,o)}:{done:!1}}));o(String.prototype,e,v[0]),o(l,d,v[1])}f&&u(l[d],"sham",!0)}},function(e,t,n){"use strict";var r=n(297).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){"use strict";var r=n(15),o=n(29),i=n(18),a=n(78),c=n(190),u=TypeError;e.exports=function(e,t){var n=e.exec;if(i(n)){var s=r(n,e,t);return null!==s&&o(s),s}if("RegExp"===a(e))return r(c,e,t);throw u("RegExp#exec called on incompatible receiver")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return c}));var r=n(2),o=n(85),i=Object(r.a)({},o.a.Modal);function a(e){i=e?Object(r.a)(Object(r.a)({},i),e):Object(r.a)({},o.a.Modal)}function c(){return i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return y}));var r,o=n(34),i=n(81),a=n(7),c=n(3),u=n(47),s=Object(c.a)({},u),l=s.version,f=s.render,d=s.unmountComponentAtNode;try{Number((l||"").split(".")[0])>=18&&(r=s.createRoot)}catch(e){}function p(e){var t=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;t&&"object"===Object(a.a)(t)&&(t.usingClientEntryPoint=e)}var h="__rc_react_root__";function m(e,t){r?function(e,t){p(!0);var n=t[h]||r(t);p(!1),n.render(e),t[h]=n}(e,t):function(e,t){f(e,t)}(e,t)}function v(e){return g.apply(this,arguments)}function g(){return(g=Object(i.a)(Object(o.a)().mark((function e(t){return Object(o.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.resolve().then((function(){var e;null===(e=t[h])||void 0===e||e.unmount(),delete t[h]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){d(e)}function y(e){return w.apply(this,arguments)}function w(){return(w=Object(i.a)(Object(o.a)().mark((function e(t){return Object(o.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===r){e.next=2;break}return e.abrupt("return",v(t));case 2:b(t);case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},function(e,t,n){var r=n(554);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return c(i(e,t),t)},e.exports.tokensToFunction=c,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,c="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(c+=e.slice(a,p),a=p+f.length,d)c+=d[1];else{var h=e[a],m=n[2],v=n[3],g=n[4],b=n[5],y=n[6],w=n[7];c&&(r.push(c),c="");var O=null!=m&&null!=h&&h!==m,x="+"===y||"*"===y,E="?"===y||"*"===y,j=n[2]||l,k=g||b;r.push({name:v||i++,prefix:m||"",delimiter:j,optional:E,repeat:x,partial:O,asterisk:!!w,pattern:k?s(k):w?".*":"[^"+u(j)+"]+?"})}}return a<e.length&&(c+=e.substr(a)),c&&r.push(c),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function c(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",c=t||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var f,d=c[l.name];if(null==d){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(r(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?l.prefix:l.delimiter)+f}}else{if(f=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+f+'"');i+=l.prefix+f}}else i+=l}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",c=0;c<e.length;c++){var s=e[c];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",l(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return l(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r=n(6),o=n(415);r({target:"Array",stat:!0,forced:!n(229)((function(e){Array.from(e)}))},{from:o})},function(e,t,n){"use strict";var r=n(171).PROPER,o=n(46),i=n(29),a=n(49),c=n(13),u=n(322),s=RegExp.prototype.toString,l=c((function(){return"/a/b"!==s.call({source:"a",flags:"b"})})),f=r&&"toString"!==s.name;(l||f)&&o(RegExp.prototype,"toString",(function(){var e=i(this);return"/"+a(e.source)+"/"+a(u(e))}),{unsafe:!0})},function(e,t,n){"use strict";var r=n(6),o=n(13),i=n(66),a=n(83).f,c=n(36);r({target:"Object",stat:!0,forced:!c||o((function(){a(1)})),sham:!c},{getOwnPropertyDescriptor:function(e,t){return a(i(e),t)}})},function(e,t,n){"use strict";var r=n(6),o=n(36),i=n(280),a=n(66),c=n(83),u=n(146);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,n,r=a(e),o=c.f,s=i(r),l={},f=0;s.length>f;)void 0!==(n=o(r,t=s[f++]))&&u(l,t,n);return l}})},function(e,t,n){"use strict";var r=n(2),o=n(0),i=n(118),a=(n(35),n(3)),c=n(25),u=n(110),s=n(202),l=new Map;var f=new s.a((function(e){e.forEach((function(e){var t,n=e.target;null===(t=l.get(n))||void 0===t||t.forEach((function(e){return e(n)}))}))}));var d=n(23),p=n(24),h=n(31),m=n(32),v=function(e){Object(h.a)(n,e);var t=Object(m.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){return this.props.children}}]),n}(o.Component),g=o.createContext(null);function b(e,t){var n=e.children,r=e.disabled,i=o.useRef(null),s=o.useRef(null),d=o.useContext(g),p="function"==typeof n,h=p?n(i):n,m=o.useRef({width:-1,height:-1,offsetWidth:-1,offsetHeight:-1}),b=!p&&o.isValidElement(h)&&Object(c.c)(h),y=b?h.ref:null,w=o.useMemo((function(){return Object(c.a)(y,i)}),[y,i]),O=function(){return Object(u.a)(i.current)||Object(u.a)(s.current)};o.useImperativeHandle(t,(function(){return O()}));var x=o.useRef(e);x.current=e;var E=o.useCallback((function(e){var t=x.current,n=t.onResize,r=t.data,o=e.getBoundingClientRect(),i=o.width,c=o.height,u=e.offsetWidth,s=e.offsetHeight,l=Math.floor(i),f=Math.floor(c);if(m.current.width!==l||m.current.height!==f||m.current.offsetWidth!==u||m.current.offsetHeight!==s){var p={width:l,height:f,offsetWidth:u,offsetHeight:s};m.current=p;var h=u===Math.round(i)?i:u,v=s===Math.round(c)?c:s,g=Object(a.a)(Object(a.a)({},p),{},{offsetWidth:h,offsetHeight:v});null==d||d(g,e,r),n&&Promise.resolve().then((function(){n(g,e)}))}}),[]);return o.useEffect((function(){var e,t,n=O();return n&&!r&&(e=n,t=E,l.has(e)||(l.set(e,new Set),f.observe(e)),l.get(e).add(t)),function(){return function(e,t){l.has(e)&&(l.get(e).delete(t),l.get(e).size||(f.unobserve(e),l.delete(e)))}(n,E)}}),[i.current,r]),o.createElement(v,{ref:s},b?o.cloneElement(h,{ref:w}):h)}var y=o.forwardRef(b);function w(e,t){var n=e.children;return("function"==typeof n?[n]:Object(i.a)(n)).map((function(n,i){var a=(null==n?void 0:n.key)||"".concat("rc-observer-key","-").concat(i);return o.createElement(y,Object(r.a)({},e,{key:a,ref:0===i?t:void 0}),n)}))}var O=o.forwardRef(w);O.Collection=function(e){var t=e.children,n=e.onBatchResize,r=o.useRef(0),i=o.useRef([]),a=o.useContext(g),c=o.useCallback((function(e,t,o){r.current+=1;var c=r.current;i.current.push({size:e,element:t,data:o}),Promise.resolve().then((function(){c===r.current&&(null==n||n(i.current),i.current=[])})),null==a||a(e,t,o)}),[n,a]);return o.createElement(g.Provider,{value:c},t)};t.a=O},function(e,t,n){"use strict";var r=n(3),o=n(2),i=n(23),a=n(24),c=n(9),u=n(31),s=n(32),l=n(1),f=n(0),d=n.n(f),p=n(47),h=n.n(p),m=n(30),v=n(96),g=n(110),b=n(25),y=n(112),w=n(42),O=Object(f.forwardRef)((function(e,t){var n=e.didUpdate,r=e.getContainer,o=e.children,i=Object(f.useRef)(),a=Object(f.useRef)();Object(f.useImperativeHandle)(t,(function(){return{}}));var c=Object(f.useRef)(!1);return!c.current&&Object(w.a)()&&(a.current=r(),i.current=a.current.parentNode,c.current=!0),Object(f.useEffect)((function(){null==n||n(e)})),Object(f.useEffect)((function(){return null===a.current.parentNode&&null!==i.current&&i.current.appendChild(a.current),function(){var e,t;null===(e=a.current)||void 0===e||null===(t=e.parentNode)||void 0===t||t.removeChild(a.current)}}),[]),a.current?h.a.createPortal(o,a.current):null})),x=n(5),E=n.n(x);function j(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}var k=n(4),C=n(22),S=n(263),_=n(56);function M(e){var t=e.prefixCls,n=e.motion,r=e.animation,o=e.transitionName;return n||(r?{motionName:"".concat(t,"-").concat(r)}:o?{motionName:o}:null)}function T(e){var t=e.prefixCls,n=e.visible,i=e.zIndex,a=e.mask,c=e.maskMotion,u=e.maskAnimation,s=e.maskTransitionName;if(!a)return null;var l={};return(c||s||u)&&(l=Object(r.a)({motionAppear:!0},M({motion:c,prefixCls:t,transitionName:s,animation:u}))),f.createElement(_.default,Object(o.a)({},l,{visible:n,removeOnLeave:!0}),(function(e){var n=e.className;return f.createElement("div",{style:{zIndex:i},className:E()("".concat(t,"-mask"),n)})}))}var P,F=n(7);function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var L={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function I(){if(void 0!==P)return P;P="";var e=document.createElement("p").style;for(var t in L)t+"Transform"in e&&(P=t);return P}function z(){return I()?"".concat(I(),"TransitionProperty"):"transitionProperty"}function V(){return I()?"".concat(I(),"Transform"):"transform"}function H(e,t){var n=z();n&&(e.style[n]=t,"transitionProperty"!==n&&(e.style.transitionProperty=t))}function W(e,t){var n=V();n&&(e.style[n]=t,"transform"!==n&&(e.style.transform=t))}var B,Y=/matrix\((.*)\)/,U=/matrix3d\((.*)\)/;function $(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t}function q(e,t,n){var r=n;if("object"!==R(t))return void 0!==r?("number"==typeof r&&(r="".concat(r,"px")),void(e.style[t]=r)):B(e,t);for(var o in t)t.hasOwnProperty(o)&&q(e,o,t[o])}function G(e,t){var n=e["page".concat(t?"Y":"X","Offset")],r="scroll".concat(t?"Top":"Left");if("number"!=typeof n){var o=e.document;"number"!=typeof(n=o.documentElement[r])&&(n=o.body[r])}return n}function K(e){return G(e)}function Q(e){return G(e,!0)}function X(e){var t=function(e){var t,n,r,o=e.ownerDocument,i=o.body,a=o&&o.documentElement;return t=e.getBoundingClientRect(),n=Math.floor(t.left),r=Math.floor(t.top),{left:n-=a.clientLeft||i.clientLeft||0,top:r-=a.clientTop||i.clientTop||0}}(e),n=e.ownerDocument,r=n.defaultView||n.parentWindow;return t.left+=K(r),t.top+=Q(r),t}function Z(e){return null!=e&&e==e.window}function J(e){return Z(e)?e.document:9===e.nodeType?e:e.ownerDocument}var ee=new RegExp("^(".concat(/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,")(?!px)[a-z%]+$"),"i"),te=/^(top|right|bottom|left)$/,ne="left";function re(e,t){return"left"===e?t.useCssRight?"right":e:t.useCssBottom?"bottom":e}function oe(e){return"left"===e?"right":"right"===e?"left":"top"===e?"bottom":"bottom"===e?"top":void 0}function ie(e,t,n){"static"===q(e,"position")&&(e.style.position="relative");var r=-999,o=-999,i=re("left",n),a=re("top",n),c=oe(i),u=oe(a);"left"!==i&&(r=999),"top"!==a&&(o=999);var s,l="",f=X(e);("left"in t||"top"in t)&&(l=(s=e).style.transitionProperty||s.style[z()]||"",H(e,"none")),"left"in t&&(e.style[c]="",e.style[i]="".concat(r,"px")),"top"in t&&(e.style[u]="",e.style[a]="".concat(o,"px")),$(e);var d=X(e),p={};for(var h in t)if(t.hasOwnProperty(h)){var m=re(h,n),v="left"===h?r:o,g=f[h]-d[h];p[m]=m===h?v+g:v-g}q(e,p),$(e),("left"in t||"top"in t)&&H(e,l);var b={};for(var y in t)if(t.hasOwnProperty(y)){var w=re(y,n),O=t[y]-f[y];b[w]=y===w?p[w]+O:p[w]-O}q(e,b)}function ae(e,t){var n=X(e),r=function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("transform")||t.getPropertyValue(V());if(n&&"none"!==n){var r=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(r[12]||r[4],0),y:parseFloat(r[13]||r[5],0)}}return{x:0,y:0}}(e),o={x:r.x,y:r.y};"left"in t&&(o.x=r.x+t.left-n.left),"top"in t&&(o.y=r.y+t.top-n.top),function(e,t){var n=window.getComputedStyle(e,null),r=n.getPropertyValue("transform")||n.getPropertyValue(V());if(r&&"none"!==r){var o,i=r.match(Y);if(i)(o=(i=i[1]).split(",").map((function(e){return parseFloat(e,10)})))[4]=t.x,o[5]=t.y,W(e,"matrix(".concat(o.join(","),")"));else(o=r.match(U)[1].split(",").map((function(e){return parseFloat(e,10)})))[12]=t.x,o[13]=t.y,W(e,"matrix3d(".concat(o.join(","),")"))}else W(e,"translateX(".concat(t.x,"px) translateY(").concat(t.y,"px) translateZ(0)"))}(e,o)}function ce(e,t){for(var n=0;n<e.length;n++)t(e[n])}function ue(e){return"border-box"===B(e,"boxSizing")}"undefined"!=typeof window&&(B=window.getComputedStyle?function(e,t,n){var r=n,o="",i=J(e);return(r=r||i.defaultView.getComputedStyle(e,null))&&(o=r.getPropertyValue(t)||r[t]),o}:function(e,t){var n=e.currentStyle&&e.currentStyle[t];if(ee.test(n)&&!te.test(t)){var r=e.style,o=r[ne],i=e.runtimeStyle[ne];e.runtimeStyle[ne]=e.currentStyle[ne],r[ne]="fontSize"===t?"1em":n||0,n=r.pixelLeft+"px",r[ne]=o,e.runtimeStyle[ne]=i}return""===n?"auto":n});var se=["margin","border","padding"];function le(e,t,n){var r,o={},i=e.style;for(r in t)t.hasOwnProperty(r)&&(o[r]=i[r],i[r]=t[r]);for(r in n.call(e),t)t.hasOwnProperty(r)&&(i[r]=o[r])}function fe(e,t,n){var r,o,i,a=0;for(o=0;o<t.length;o++)if(r=t[o])for(i=0;i<n.length;i++){var c=void 0;c="border"===r?"".concat(r).concat(n[i],"Width"):r+n[i],a+=parseFloat(B(e,c))||0}return a}var de={getParent:function(e){var t=e;do{t=11===t.nodeType&&t.host?t.host:t.parentNode}while(t&&1!==t.nodeType&&9!==t.nodeType);return t}};function pe(e,t,n){var r=n;if(Z(e))return"width"===t?de.viewportWidth(e):de.viewportHeight(e);if(9===e.nodeType)return"width"===t?de.docWidth(e):de.docHeight(e);var o="width"===t?["Left","Right"]:["Top","Bottom"],i="width"===t?Math.floor(e.getBoundingClientRect().width):Math.floor(e.getBoundingClientRect().height),a=ue(e),c=0;(null==i||i<=0)&&(i=void 0,(null==(c=B(e,t))||Number(c)<0)&&(c=e.style[t]||0),c=Math.floor(parseFloat(c))||0),void 0===r&&(r=a?1:-1);var u=void 0!==i||a,s=i||c;return-1===r?u?s-fe(e,["border","padding"],o):c:u?1===r?s:s+(2===r?-fe(e,["border"],o):fe(e,["margin"],o)):c+fe(e,se.slice(r),o)}ce(["Width","Height"],(function(e){de["doc".concat(e)]=function(t){var n=t.document;return Math.max(n.documentElement["scroll".concat(e)],n.body["scroll".concat(e)],de["viewport".concat(e)](n))},de["viewport".concat(e)]=function(t){var n="client".concat(e),r=t.document,o=r.body,i=r.documentElement[n];return"CSS1Compat"===r.compatMode&&i||o&&o[n]||i}}));var he={position:"absolute",visibility:"hidden",display:"block"};function me(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,o=t[0];return 0!==o.offsetWidth?r=pe.apply(void 0,t):le(o,he,(function(){r=pe.apply(void 0,t)})),r}function ve(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}ce(["width","height"],(function(e){var t=e.charAt(0).toUpperCase()+e.slice(1);de["outer".concat(t)]=function(t,n){return t&&me(t,e,n?0:1)};var n="width"===e?["Left","Right"]:["Top","Bottom"];de[e]=function(t,r){var o=r;return void 0!==o?t?(ue(t)&&(o+=fe(t,["padding","border"],n)),q(t,e,o)):void 0:t&&me(t,e,-1)}}));var ge={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow},getDocument:J,offset:function(e,t,n){if(void 0===t)return X(e);!function(e,t,n){if(n.ignoreShake){var r=X(e),o=r.left.toFixed(0),i=r.top.toFixed(0),a=t.left.toFixed(0),c=t.top.toFixed(0);if(o===a&&i===c)return}n.useCssRight||n.useCssBottom?ie(e,t,n):n.useCssTransform&&V()in document.body.style?ae(e,t):ie(e,t,n)}(e,t,n||{})},isWindow:Z,each:ce,css:q,clone:function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);if(e.overflow)for(t in e)e.hasOwnProperty(t)&&(n.overflow[t]=e.overflow[t]);return n},mix:ve,getWindowScrollLeft:function(e){return K(e)},getWindowScrollTop:function(e){return Q(e)},merge:function(){for(var e={},t=0;t<arguments.length;t++)ge.mix(e,t<0||arguments.length<=t?void 0:arguments[t]);return e},viewportWidth:0,viewportHeight:0};ve(ge,de);var be=ge.getParent;function ye(e){if(ge.isWindow(e)||9===e.nodeType)return null;var t,n=ge.getDocument(e).body,r=ge.css(e,"position");if(!("fixed"===r||"absolute"===r))return"html"===e.nodeName.toLowerCase()?null:be(e);for(t=be(e);t&&t!==n&&9!==t.nodeType;t=be(t))if("static"!==(r=ge.css(t,"position")))return t;return null}var we=ge.getParent;function Oe(e,t){for(var n={left:0,right:1/0,top:0,bottom:1/0},r=ye(e),o=ge.getDocument(e),i=o.defaultView||o.parentWindow,a=o.body,c=o.documentElement;r;){if(-1!==navigator.userAgent.indexOf("MSIE")&&0===r.clientWidth||r===a||r===c||"visible"===ge.css(r,"overflow")){if(r===a||r===c)break}else{var u=ge.offset(r);u.left+=r.clientLeft,u.top+=r.clientTop,n.top=Math.max(n.top,u.top),n.right=Math.min(n.right,u.left+r.clientWidth),n.bottom=Math.min(n.bottom,u.top+r.clientHeight),n.left=Math.max(n.left,u.left)}r=ye(r)}var s=null;ge.isWindow(e)||9===e.nodeType||(s=e.style.position,"absolute"===ge.css(e,"position")&&(e.style.position="fixed"));var l=ge.getWindowScrollLeft(i),f=ge.getWindowScrollTop(i),d=ge.viewportWidth(i),p=ge.viewportHeight(i),h=c.scrollWidth,m=c.scrollHeight,v=window.getComputedStyle(a);if("hidden"===v.overflowX&&(h=i.innerWidth),"hidden"===v.overflowY&&(m=i.innerHeight),e.style&&(e.style.position=s),t||function(e){if(ge.isWindow(e)||9===e.nodeType)return!1;var t=ge.getDocument(e),n=t.body,r=null;for(r=we(e);r&&r!==n&&r!==t;r=we(r)){if("fixed"===ge.css(r,"position"))return!0}return!1}(e))n.left=Math.max(n.left,l),n.top=Math.max(n.top,f),n.right=Math.min(n.right,l+d),n.bottom=Math.min(n.bottom,f+p);else{var g=Math.max(h,l+d);n.right=Math.min(n.right,g);var b=Math.max(m,f+p);n.bottom=Math.min(n.bottom,b)}return n.top>=0&&n.left>=0&&n.bottom>n.top&&n.right>n.left?n:null}function xe(e){var t,n,r;if(ge.isWindow(e)||9===e.nodeType){var o=ge.getWindow(e);t={left:ge.getWindowScrollLeft(o),top:ge.getWindowScrollTop(o)},n=ge.viewportWidth(o),r=ge.viewportHeight(o)}else t=ge.offset(e),n=ge.outerWidth(e),r=ge.outerHeight(e);return t.width=n,t.height=r,t}function Ee(e,t){var n=t.charAt(0),r=t.charAt(1),o=e.width,i=e.height,a=e.left,c=e.top;return"c"===n?c+=i/2:"b"===n&&(c+=i),"c"===r?a+=o/2:"r"===r&&(a+=o),{left:a,top:c}}function je(e,t,n,r,o){var i=Ee(t,n[1]),a=Ee(e,n[0]),c=[a.left-i.left,a.top-i.top];return{left:Math.round(e.left-c[0]+r[0]-o[0]),top:Math.round(e.top-c[1]+r[1]-o[1])}}function ke(e,t,n){return e.left<n.left||e.left+t.width>n.right}function Ce(e,t,n){return e.top<n.top||e.top+t.height>n.bottom}function Se(e,t,n){var r=[];return ge.each(e,(function(e){r.push(e.replace(t,(function(e){return n[e]})))})),r}function _e(e,t){return e[t]=-e[t],e}function Me(e,t){return(/%$/.test(e)?parseInt(e.substring(0,e.length-1),10)/100*t:parseInt(e,10))||0}function Te(e,t){e[0]=Me(e[0],t.width),e[1]=Me(e[1],t.height)}function Pe(e,t,n,r){var o=n.points,i=n.offset||[0,0],a=n.targetOffset||[0,0],c=n.overflow,u=n.source||e;i=[].concat(i),a=[].concat(a);var s={},l=0,f=Oe(u,!(!(c=c||{})||!c.alwaysByViewport)),d=xe(u);Te(i,d),Te(a,t);var p=je(d,t,o,i,a),h=ge.merge(d,p);if(f&&(c.adjustX||c.adjustY)&&r){if(c.adjustX&&ke(p,d,f)){var m=Se(o,/[lr]/gi,{l:"r",r:"l"}),v=_e(i,0),g=_e(a,0);(function(e,t,n){return e.left>n.right||e.left+t.width<n.left})(je(d,t,m,v,g),d,f)||(l=1,o=m,i=v,a=g)}if(c.adjustY&&Ce(p,d,f)){var b=Se(o,/[tb]/gi,{t:"b",b:"t"}),y=_e(i,1),w=_e(a,1);(function(e,t,n){return e.top>n.bottom||e.top+t.height<n.top})(je(d,t,b,y,w),d,f)||(l=1,o=b,i=y,a=w)}l&&(p=je(d,t,o,i,a),ge.mix(h,p));var O=ke(p,d,f),x=Ce(p,d,f);if(O||x){var E=o;O&&(E=Se(o,/[lr]/gi,{l:"r",r:"l"})),x&&(E=Se(o,/[tb]/gi,{t:"b",b:"t"})),o=E,i=n.offset||[0,0],a=n.targetOffset||[0,0]}s.adjustX=c.adjustX&&O,s.adjustY=c.adjustY&&x,(s.adjustX||s.adjustY)&&(h=function(e,t,n,r){var o=ge.clone(e),i={width:t.width,height:t.height};return r.adjustX&&o.left<n.left&&(o.left=n.left),r.resizeWidth&&o.left>=n.left&&o.left+i.width>n.right&&(i.width-=o.left+i.width-n.right),r.adjustX&&o.left+i.width>n.right&&(o.left=Math.max(n.right-i.width,n.left)),r.adjustY&&o.top<n.top&&(o.top=n.top),r.resizeHeight&&o.top>=n.top&&o.top+i.height>n.bottom&&(i.height-=o.top+i.height-n.bottom),r.adjustY&&o.top+i.height>n.bottom&&(o.top=Math.max(n.bottom-i.height,n.top)),ge.mix(o,i)}(p,d,f,s))}return h.width!==d.width&&ge.css(u,"width",ge.width(u)+h.width-d.width),h.height!==d.height&&ge.css(u,"height",ge.height(u)+h.height-d.height),ge.offset(u,{left:h.left,top:h.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:o,offset:i,targetOffset:a,overflow:s}}function Fe(e,t,n){var r=n.target||t;return Pe(e,xe(r),n,!function(e,t){var n=Oe(e,t),r=xe(e);return!n||r.left+r.width<=n.left||r.top+r.height<=n.top||r.left>=n.right||r.top>=n.bottom}(r,n.overflow&&n.overflow.alwaysByViewport))}Fe.__getOffsetParent=ye,Fe.__getVisibleRectForElement=Oe;var Ne=n(191),Ae=n(255),Re=n(55),De=n(202);function Le(e,t){var n=null,r=null;var o=new De.a((function(e){var o=Object(k.a)(e,1)[0].target;if(document.documentElement.contains(o)){var i=o.getBoundingClientRect(),a=i.width,c=i.height,u=Math.floor(a),s=Math.floor(c);n===u&&r===s||Promise.resolve().then((function(){t({width:u,height:s})})),n=u,r=s}}));return e&&o.observe(e),function(){o.disconnect()}}function Ie(e){return"function"!=typeof e?null:e()}function ze(e){return"object"===Object(F.a)(e)&&e?e:null}var Ve=function(e,t){var n=e.children,r=e.disabled,o=e.target,i=e.align,a=e.onAlign,c=e.monitorWindowResize,u=e.monitorBufferTime,s=void 0===u?0:u,l=d.a.useRef({}),f=d.a.useRef(),p=d.a.Children.only(n),h=d.a.useRef({});h.current.disabled=r,h.current.target=o,h.current.align=i,h.current.onAlign=a;var m=function(e,t){var n=d.a.useRef(!1),r=d.a.useRef(null);function o(){window.clearTimeout(r.current)}return[function i(a){if(o(),n.current&&!0!==a)r.current=window.setTimeout((function(){n.current=!1,i()}),t);else{if(!1===e(a))return;n.current=!0,r.current=window.setTimeout((function(){n.current=!1}),t)}},function(){n.current=!1,o()}]}((function(){var e=h.current,t=e.disabled,n=e.target,r=e.align,o=e.onAlign,i=f.current;if(!t&&n&&i){var a,c=Ie(n),u=ze(n);l.current.element=c,l.current.point=u,l.current.align=r;var s=document.activeElement;return c&&Object(Ae.a)(c)?a=Fe(i,c,r):u&&(a=function(e,t,n){var r,o,i=ge.getDocument(e),a=i.defaultView||i.parentWindow,c=ge.getWindowScrollLeft(a),u=ge.getWindowScrollTop(a),s=ge.viewportWidth(a),l=ge.viewportHeight(a),f={left:r="pageX"in t?t.pageX:c+t.clientX,top:o="pageY"in t?t.pageY:u+t.clientY,width:0,height:0},d=r>=0&&r<=c+s&&o>=0&&o<=u+l,p=[n.points[0],"cc"];return Pe(e,f,A(A({},n),{},{points:p}),d)}(i,u,r)),function(e,t){e!==document.activeElement&&Object(v.a)(t,e)&&"function"==typeof e.focus&&e.focus()}(s,i),o&&a&&o(i,a),!0}return!1}),s),g=Object(k.a)(m,2),w=g[0],O=g[1],x=d.a.useState(),E=Object(k.a)(x,2),j=E[0],C=E[1],S=d.a.useState(),_=Object(k.a)(S,2),M=_[0],T=_[1];return Object(Re.a)((function(){C(Ie(o)),T(ze(o))})),d.a.useEffect((function(){var e,t;l.current.element===j&&((e=l.current.point)===(t=M)||e&&t&&("pageX"in t&&"pageY"in t?e.pageX===t.pageX&&e.pageY===t.pageY:"clientX"in t&&"clientY"in t&&e.clientX===t.clientX&&e.clientY===t.clientY))&&Object(Ne.a)(l.current.align,i)||w()})),d.a.useEffect((function(){return Le(f.current,w)}),[f.current]),d.a.useEffect((function(){return Le(j,w)}),[j]),d.a.useEffect((function(){r?O():w()}),[r]),d.a.useEffect((function(){if(c)return Object(y.a)(window,"resize",w).remove}),[c]),d.a.useEffect((function(){return function(){O()}}),[]),d.a.useImperativeHandle(t,(function(){return{forceAlign:function(){return w(!0)}}})),d.a.isValidElement(p)&&(p=d.a.cloneElement(p,{ref:Object(b.a)(p.ref,f)})),p},He=d.a.forwardRef(Ve);He.displayName="Align";var We=He,Be=n(34),Ye=n(81),Ue=n(58),$e=["measure","alignPre","align",null,"motion"],qe=f.forwardRef((function(e,t){var n=e.visible,i=e.prefixCls,a=e.className,c=e.style,u=e.children,s=e.zIndex,l=e.stretch,d=e.destroyPopupOnHide,p=e.forceRender,h=e.align,v=e.point,g=e.getRootDomNode,b=e.getClassNameFromAlign,y=e.onAlign,w=e.onMouseEnter,O=e.onMouseLeave,x=e.onMouseDown,j=e.onTouchStart,C=e.onClick,S=Object(f.useRef)(),T=Object(f.useRef)(),P=Object(f.useState)(),F=Object(k.a)(P,2),N=F[0],A=F[1],R=function(e){var t=f.useState({width:0,height:0}),n=Object(k.a)(t,2),r=n[0],o=n[1];return[f.useMemo((function(){var t={};if(e){var n=r.width,o=r.height;-1!==e.indexOf("height")&&o?t.height=o:-1!==e.indexOf("minHeight")&&o&&(t.minHeight=o),-1!==e.indexOf("width")&&n?t.width=n:-1!==e.indexOf("minWidth")&&n&&(t.minWidth=n)}return t}),[e,r]),function(e){var t=e.offsetWidth,n=e.offsetHeight,r=e.getBoundingClientRect(),i=r.width,a=r.height;Math.abs(t-i)<1&&Math.abs(n-a)<1&&(t=i,n=a),o({width:t,height:n})}]}(l),D=Object(k.a)(R,2),L=D[0],I=D[1];var z=function(e,t){var n=Object(Ue.a)(null),r=Object(k.a)(n,2),o=r[0],i=r[1],a=Object(f.useRef)();function c(e){i(e,!0)}function u(){m.a.cancel(a.current)}return Object(f.useEffect)((function(){c("measure")}),[e]),Object(f.useEffect)((function(){switch(o){case"measure":t()}o&&(a.current=Object(m.a)(Object(Ye.a)(Object(Be.a)().mark((function e(){var t,n;return Object(Be.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=$e.indexOf(o),(n=$e[t+1])&&-1!==t&&c(n);case 3:case"end":return e.stop()}}),e)})))))}),[o]),Object(f.useEffect)((function(){return function(){u()}}),[]),[o,function(e){u(),a.current=Object(m.a)((function(){c((function(e){switch(o){case"align":return"motion";case"motion":return"stable"}return e})),null==e||e()}))}]}(n,(function(){l&&I(g())})),V=Object(k.a)(z,2),H=V[0],W=V[1],B=Object(f.useState)(0),Y=Object(k.a)(B,2),U=Y[0],$=Y[1],q=Object(f.useRef)();function G(){var e;null===(e=S.current)||void 0===e||e.forceAlign()}function K(e,t){var n=b(t);N!==n&&A(n),$((function(e){return e+1})),"align"===H&&(null==y||y(e,t))}Object(Re.a)((function(){"alignPre"===H&&$(0)}),[H]),Object(Re.a)((function(){"align"===H&&(U<3?G():W((function(){var e;null===(e=q.current)||void 0===e||e.call(q)})))}),[U]);var Q=Object(r.a)({},M(e));function X(){return new Promise((function(e){q.current=e}))}["onAppearEnd","onEnterEnd","onLeaveEnd"].forEach((function(e){var t=Q[e];Q[e]=function(e,n){return W(),null==t?void 0:t(e,n)}})),f.useEffect((function(){Q.motionName||"motion"!==H||W()}),[Q.motionName,H]),f.useImperativeHandle(t,(function(){return{forceAlign:G,getElement:function(){return T.current}}}));var Z=Object(r.a)(Object(r.a)({},L),{},{zIndex:s,opacity:"motion"!==H&&"stable"!==H&&n?0:void 0,pointerEvents:n||"stable"===H?void 0:"none"},c),J=!0;null==h||!h.points||"align"!==H&&"stable"!==H||(J=!1);var ee=u;return f.Children.count(u)>1&&(ee=f.createElement("div",{className:"".concat(i,"-content")},u)),f.createElement(_.default,Object(o.a)({visible:n,ref:T,leavedClassName:"".concat(i,"-hidden")},Q,{onAppearPrepare:X,onEnterPrepare:X,removeOnLeave:d,forceRender:p}),(function(e,t){var n=e.className,o=e.style,c=E()(i,a,N,n);return f.createElement(We,{target:v||g,key:"popup",ref:S,monitorWindowResize:!0,disabled:J,align:h,onAlign:K},f.createElement("div",{ref:t,className:c,onMouseEnter:w,onMouseLeave:O,onMouseDownCapture:x,onTouchStartCapture:j,onClick:C,style:Object(r.a)(Object(r.a)({},o),Z)},ee))}))}));qe.displayName="PopupInner";var Ge=qe,Ke=f.forwardRef((function(e,t){var n=e.prefixCls,i=e.visible,a=e.zIndex,c=e.children,u=e.mobile,s=(u=void 0===u?{}:u).popupClassName,l=u.popupStyle,d=u.popupMotion,p=void 0===d?{}:d,h=u.popupRender,m=e.onClick,v=f.useRef();f.useImperativeHandle(t,(function(){return{forceAlign:function(){},getElement:function(){return v.current}}}));var g=Object(r.a)({zIndex:a},l),b=c;return f.Children.count(c)>1&&(b=f.createElement("div",{className:"".concat(n,"-content")},c)),h&&(b=h(b)),f.createElement(_.default,Object(o.a)({visible:i,ref:v,removeOnLeave:!0},p),(function(e,t){var o=e.className,i=e.style,a=E()(n,s,o);return f.createElement("div",{ref:t,className:a,onClick:m,style:Object(r.a)(Object(r.a)({},i),g)},b)}))}));Ke.displayName="MobilePopupInner";var Qe=Ke,Xe=["visible","mobile"],Ze=f.forwardRef((function(e,t){var n=e.visible,i=e.mobile,a=Object(C.a)(e,Xe),c=Object(f.useState)(n),u=Object(k.a)(c,2),s=u[0],l=u[1],d=Object(f.useState)(!1),p=Object(k.a)(d,2),h=p[0],m=p[1],v=Object(r.a)(Object(r.a)({},a),{},{visible:s});Object(f.useEffect)((function(){l(n),n&&i&&m(Object(S.a)())}),[n,i]);var g=h?f.createElement(Qe,Object(o.a)({},v,{mobile:i,ref:t})):f.createElement(Ge,Object(o.a)({},v,{ref:t}));return f.createElement("div",null,f.createElement(T,v),g)}));Ze.displayName="Popup";var Je=Ze,et=f.createContext(null);function tt(){}function nt(){return""}function rt(e){return e?e.ownerDocument:window.document}var ot=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"];var it,at;t.a=(it=O,at=function(e){Object(u.a)(n,e);var t=Object(s.a)(n);function n(e){var r,a;return Object(i.a)(this,n),r=t.call(this,e),Object(l.a)(Object(c.a)(r),"popupRef",f.createRef()),Object(l.a)(Object(c.a)(r),"triggerRef",f.createRef()),Object(l.a)(Object(c.a)(r),"portalContainer",void 0),Object(l.a)(Object(c.a)(r),"attachId",void 0),Object(l.a)(Object(c.a)(r),"clickOutsideHandler",void 0),Object(l.a)(Object(c.a)(r),"touchOutsideHandler",void 0),Object(l.a)(Object(c.a)(r),"contextMenuOutsideHandler1",void 0),Object(l.a)(Object(c.a)(r),"contextMenuOutsideHandler2",void 0),Object(l.a)(Object(c.a)(r),"mouseDownTimeout",void 0),Object(l.a)(Object(c.a)(r),"focusTime",void 0),Object(l.a)(Object(c.a)(r),"preClickTime",void 0),Object(l.a)(Object(c.a)(r),"preTouchTime",void 0),Object(l.a)(Object(c.a)(r),"delayTimer",void 0),Object(l.a)(Object(c.a)(r),"hasPopupMouseDown",void 0),Object(l.a)(Object(c.a)(r),"onMouseEnter",(function(e){var t=r.props.mouseEnterDelay;r.fireEvents("onMouseEnter",e),r.delaySetPopupVisible(!0,t,t?null:e)})),Object(l.a)(Object(c.a)(r),"onMouseMove",(function(e){r.fireEvents("onMouseMove",e),r.setPoint(e)})),Object(l.a)(Object(c.a)(r),"onMouseLeave",(function(e){r.fireEvents("onMouseLeave",e),r.delaySetPopupVisible(!1,r.props.mouseLeaveDelay)})),Object(l.a)(Object(c.a)(r),"onPopupMouseEnter",(function(){r.clearDelayTimer()})),Object(l.a)(Object(c.a)(r),"onPopupMouseLeave",(function(e){var t;e.relatedTarget&&!e.relatedTarget.setTimeout&&Object(v.a)(null===(t=r.popupRef.current)||void 0===t?void 0:t.getElement(),e.relatedTarget)||r.delaySetPopupVisible(!1,r.props.mouseLeaveDelay)})),Object(l.a)(Object(c.a)(r),"onFocus",(function(e){r.fireEvents("onFocus",e),r.clearDelayTimer(),r.isFocusToShow()&&(r.focusTime=Date.now(),r.delaySetPopupVisible(!0,r.props.focusDelay))})),Object(l.a)(Object(c.a)(r),"onMouseDown",(function(e){r.fireEvents("onMouseDown",e),r.preClickTime=Date.now()})),Object(l.a)(Object(c.a)(r),"onTouchStart",(function(e){r.fireEvents("onTouchStart",e),r.preTouchTime=Date.now()})),Object(l.a)(Object(c.a)(r),"onBlur",(function(e){r.fireEvents("onBlur",e),r.clearDelayTimer(),r.isBlurToHide()&&r.delaySetPopupVisible(!1,r.props.blurDelay)})),Object(l.a)(Object(c.a)(r),"onContextMenu",(function(e){e.preventDefault(),r.fireEvents("onContextMenu",e),r.setPopupVisible(!0,e)})),Object(l.a)(Object(c.a)(r),"onContextMenuClose",(function(){r.isContextMenuToShow()&&r.close()})),Object(l.a)(Object(c.a)(r),"onClick",(function(e){if(r.fireEvents("onClick",e),r.focusTime){var t;if(r.preClickTime&&r.preTouchTime?t=Math.min(r.preClickTime,r.preTouchTime):r.preClickTime?t=r.preClickTime:r.preTouchTime&&(t=r.preTouchTime),Math.abs(t-r.focusTime)<20)return;r.focusTime=0}r.preClickTime=0,r.preTouchTime=0,r.isClickToShow()&&(r.isClickToHide()||r.isBlurToHide())&&e&&e.preventDefault&&e.preventDefault();var n=!r.state.popupVisible;(r.isClickToHide()&&!n||n&&r.isClickToShow())&&r.setPopupVisible(!r.state.popupVisible,e)})),Object(l.a)(Object(c.a)(r),"onPopupMouseDown",(function(){var e;r.hasPopupMouseDown=!0,clearTimeout(r.mouseDownTimeout),r.mouseDownTimeout=window.setTimeout((function(){r.hasPopupMouseDown=!1}),0),r.context&&(e=r.context).onPopupMouseDown.apply(e,arguments)})),Object(l.a)(Object(c.a)(r),"onDocumentClick",(function(e){if(!r.props.mask||r.props.maskClosable){var t=e.target,n=r.getRootDomNode(),o=r.getPopupDomNode();Object(v.a)(n,t)&&!r.isContextMenuOnly()||Object(v.a)(o,t)||r.hasPopupMouseDown||r.close()}})),Object(l.a)(Object(c.a)(r),"getRootDomNode",(function(){var e=r.props.getTriggerDOMNode;if(e)return e(r.triggerRef.current);try{var t=Object(g.a)(r.triggerRef.current);if(t)return t}catch(e){}return h.a.findDOMNode(Object(c.a)(r))})),Object(l.a)(Object(c.a)(r),"getPopupClassNameFromAlign",(function(e){var t=[],n=r.props,o=n.popupPlacement,i=n.builtinPlacements,a=n.prefixCls,c=n.alignPoint,u=n.getPopupClassNameFromAlign;return o&&i&&t.push(function(e,t,n,r){for(var o=n.points,i=Object.keys(e),a=0;a<i.length;a+=1){var c=i[a];if(j(e[c].points,o,r))return"".concat(t,"-placement-").concat(c)}return""}(i,a,e,c)),u&&t.push(u(e)),t.join(" ")})),Object(l.a)(Object(c.a)(r),"getComponent",(function(){var e=r.props,t=e.prefixCls,n=e.destroyPopupOnHide,i=e.popupClassName,a=e.onPopupAlign,c=e.popupMotion,u=e.popupAnimation,s=e.popupTransitionName,l=e.popupStyle,d=e.mask,p=e.maskAnimation,h=e.maskTransitionName,m=e.maskMotion,v=e.zIndex,g=e.popup,b=e.stretch,y=e.alignPoint,w=e.mobile,O=e.forceRender,x=e.onPopupClick,E=r.state,j=E.popupVisible,k=E.point,C=r.getPopupAlign(),S={};return r.isMouseEnterToShow()&&(S.onMouseEnter=r.onPopupMouseEnter),r.isMouseLeaveToHide()&&(S.onMouseLeave=r.onPopupMouseLeave),S.onMouseDown=r.onPopupMouseDown,S.onTouchStart=r.onPopupMouseDown,f.createElement(Je,Object(o.a)({prefixCls:t,destroyPopupOnHide:n,visible:j,point:y&&k,className:i,align:C,onAlign:a,animation:u,getClassNameFromAlign:r.getPopupClassNameFromAlign},S,{stretch:b,getRootDomNode:r.getRootDomNode,style:l,mask:d,zIndex:v,transitionName:s,maskAnimation:p,maskTransitionName:h,maskMotion:m,ref:r.popupRef,motion:c,mobile:w,forceRender:O,onClick:x}),"function"==typeof g?g():g)})),Object(l.a)(Object(c.a)(r),"attachParent",(function(e){m.a.cancel(r.attachId);var t,n=r.props,o=n.getPopupContainer,i=n.getDocument,a=r.getRootDomNode();o?(a||0===o.length)&&(t=o(a)):t=i(r.getRootDomNode()).body,t?t.appendChild(e):r.attachId=Object(m.a)((function(){r.attachParent(e)}))})),Object(l.a)(Object(c.a)(r),"getContainer",(function(){if(!r.portalContainer){var e=(0,r.props.getDocument)(r.getRootDomNode()).createElement("div");e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.width="100%",r.portalContainer=e}return r.attachParent(r.portalContainer),r.portalContainer})),Object(l.a)(Object(c.a)(r),"setPoint",(function(e){r.props.alignPoint&&e&&r.setState({point:{pageX:e.pageX,pageY:e.pageY}})})),Object(l.a)(Object(c.a)(r),"handlePortalUpdate",(function(){r.state.prevPopupVisible!==r.state.popupVisible&&r.props.afterPopupVisibleChange(r.state.popupVisible)})),Object(l.a)(Object(c.a)(r),"triggerContextValue",{onPopupMouseDown:r.onPopupMouseDown}),a="popupVisible"in e?!!e.popupVisible:!!e.defaultPopupVisible,r.state={prevPopupVisible:a,popupVisible:a},ot.forEach((function(e){r["fire".concat(e)]=function(t){r.fireEvents(e,t)}})),r}return Object(a.a)(n,[{key:"componentDidMount",value:function(){this.componentDidUpdate()}},{key:"componentDidUpdate",value:function(){var e,t=this.props;if(this.state.popupVisible)return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(e=t.getDocument(this.getRootDomNode()),this.clickOutsideHandler=Object(y.a)(e,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(e=e||t.getDocument(this.getRootDomNode()),this.touchOutsideHandler=Object(y.a)(e,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(e=e||t.getDocument(this.getRootDomNode()),this.contextMenuOutsideHandler1=Object(y.a)(e,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=Object(y.a)(window,"blur",this.onContextMenuClose)));this.clearOutsideHandler()}},{key:"componentWillUnmount",value:function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout),m.a.cancel(this.attachId)}},{key:"getPopupDomNode",value:function(){var e;return(null===(e=this.popupRef.current)||void 0===e?void 0:e.getElement())||null}},{key:"getPopupAlign",value:function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,o=e.builtinPlacements;return t&&o?function(e,t,n){var o=e[t]||{};return Object(r.a)(Object(r.a)({},o),n)}(o,t,n):n}},{key:"setPopupVisible",value:function(e,t){var n=this.props.alignPoint,r=this.state.popupVisible;this.clearDelayTimer(),r!==e&&("popupVisible"in this.props||this.setState({popupVisible:e,prevPopupVisible:r}),this.props.onPopupVisibleChange(e)),n&&t&&e&&this.setPoint(t)}},{key:"delaySetPopupVisible",value:function(e,t,n){var r=this,o=1e3*t;if(this.clearDelayTimer(),o){var i=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=window.setTimeout((function(){r.setPopupVisible(e,i),r.clearDelayTimer()}),o)}else this.setPopupVisible(e,n)}},{key:"clearDelayTimer",value:function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)}},{key:"clearOutsideHandler",value:function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)}},{key:"createTwoChains",value:function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire".concat(e)]:t[e]||n[e]}},{key:"isClickToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isContextMenuOnly",value:function(){var e=this.props.action;return"contextMenu"===e||1===e.length&&"contextMenu"===e[0]}},{key:"isContextMenuToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")}},{key:"isClickToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isMouseEnterToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")}},{key:"isMouseLeaveToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")}},{key:"isFocusToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")}},{key:"isBlurToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")}},{key:"forcePopupAlign",value:function(){var e;this.state.popupVisible&&(null===(e=this.popupRef.current)||void 0===e||e.forceAlign())}},{key:"fireEvents",value:function(e,t){var n=this.props.children.props[e];n&&n(t);var r=this.props[e];r&&r(t)}},{key:"close",value:function(){this.setPopupVisible(!1)}},{key:"render",value:function(){var e=this.state.popupVisible,t=this.props,n=t.children,o=t.forceRender,i=t.alignPoint,a=t.className,c=t.autoDestroy,u=f.Children.only(n),s={key:"trigger"};this.isContextMenuToShow()?s.onContextMenu=this.onContextMenu:s.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(s.onClick=this.onClick,s.onMouseDown=this.onMouseDown,s.onTouchStart=this.onTouchStart):(s.onClick=this.createTwoChains("onClick"),s.onMouseDown=this.createTwoChains("onMouseDown"),s.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(s.onMouseEnter=this.onMouseEnter,i&&(s.onMouseMove=this.onMouseMove)):s.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?s.onMouseLeave=this.onMouseLeave:s.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(s.onFocus=this.onFocus,s.onBlur=this.onBlur):(s.onFocus=this.createTwoChains("onFocus"),s.onBlur=this.createTwoChains("onBlur"));var l=E()(u&&u.props&&u.props.className,a);l&&(s.className=l);var d=Object(r.a)({},s);Object(b.c)(u)&&(d.ref=Object(b.a)(this.triggerRef,u.ref));var p,h=f.cloneElement(u,d);return(e||this.popupRef.current||o)&&(p=f.createElement(it,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),!e&&c&&(p=null),f.createElement(et.Provider,{value:this.triggerContextValue},h,p)}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.popupVisible,r={};return void 0!==n&&t.popupVisible!==n&&(r.popupVisible=n,r.prevPopupVisible=t.popupVisible),r}}]),n}(f.Component),Object(l.a)(at,"contextType",et),Object(l.a)(at,"defaultProps",{prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:nt,getDocument:rt,onPopupVisibleChange:tt,afterPopupVisibleChange:tt,onPopupAlign:tt,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[],autoDestroy:!1}),at)},function(e,t,n){"use strict";var r=n(222),o=n(101),i=n(146),a=Array,c=Math.max;e.exports=function(e,t,n){for(var u=o(e),s=r(t,u),l=r(void 0===n?u:n,u),f=a(c(l-s,0)),d=0;s<l;s++,d++)i(f,d,e[s]);return f.length=d,f}},function(e,t,n){"use strict";var r=n(19),o=n(124),i=n(41).f,a=r("unscopables"),c=Array.prototype;void 0===c[a]&&i(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){"use strict";var r=n(13);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){return 1},1)}))}},function(e,t,n){"use strict";t.a=function(e){if(!e)return!1;if(e instanceof Element){if(e.offsetParent)return!0;if(e.getBBox){var t=e.getBBox(),n=t.width,r=t.height;if(n||r)return!0}if(e.getBoundingClientRect){var o=e.getBoundingClientRect(),i=o.width,a=o.height;if(i||a)return!0}}return!1}},,function(e,t,n){"use strict";var r=n(7),o=n(2),i=n(8),a=n(4),c=n(53),u=n(58),s=n(25),l=n(0),f=n(12),d=function(){return{status:Object(l.useContext)(f.b).status}},p=n(70),h=n(38),m=n(39),v=n(30);var g=n(87),b=n(1),y=n(129),w=n(80),O=n(130),x=n(109),E=n(55),j=n(5),k=n.n(j),C=n(48),S=n(567),_=n(3),M={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z"}}]},name:"question-circle",theme:"outlined"},T=n(14),P=function(e,t){return l.createElement(T.a,Object(_.a)(Object(_.a)({},e),{},{ref:t,icon:M}))};P.displayName="QuestionCircleOutlined";var F=l.forwardRef(P),N=n(204),A=n(119),R=n(85),D=n(262),L=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};var I=function(e){var t=e.prefixCls,n=e.label,i=e.htmlFor,c=e.labelCol,u=e.labelAlign,s=e.colon,d=e.required,p=e.requiredMark,h=e.tooltip,m=Object(A.b)("Form"),v=Object(a.a)(m,1)[0];return n?l.createElement(f.a.Consumer,{key:"label"},(function(e){var a,f,m=e.vertical,g=e.labelAlign,y=e.labelCol,w=e.labelWrap,O=e.colon,x=c||y||{},E=u||g,j="".concat(t,"-item-label"),C=k()(j,"left"===E&&"".concat(j,"-left"),x.className,Object(b.a)({},"".concat(j,"-wrap"),!!w)),S=n,_=!0===s||!1!==O&&!1!==s;_&&!m&&"string"==typeof n&&""!==n.trim()&&(S=n.replace(/[:|：]\s*$/,""));var M=function(e){return e?"object"!==Object(r.a)(e)||l.isValidElement(e)?{title:e}:e:null}(h);if(M){var T=M.icon,P=void 0===T?l.createElement(F,null):T,A=L(M,["icon"]),I=l.createElement(D.a,Object(o.a)({},A),l.cloneElement(P,{className:"".concat(t,"-item-tooltip"),title:""}));S=l.createElement(l.Fragment,null,S,I)}"optional"!==p||d||(S=l.createElement(l.Fragment,null,S,l.createElement("span",{className:"".concat(t,"-item-optional"),title:""},(null==v?void 0:v.optional)||(null===(f=R.a.Form)||void 0===f?void 0:f.optional))));var z=k()((a={},Object(b.a)(a,"".concat(t,"-item-required"),d),Object(b.a)(a,"".concat(t,"-item-required-mark-optional"),"optional"===p),Object(b.a)(a,"".concat(t,"-item-no-colon"),!_),a));return l.createElement(N.a,Object(o.a)({},x,{className:C}),l.createElement("label",{htmlFor:i,className:z,title:"string"==typeof n?n:""},S))})):null},z=n(205),V=function(e){var t=e.prefixCls,n=e.status,r=e.wrapperCol,i=e.children,a=e.errors,c=e.warnings,u=e._internalItemRender,s=e.extra,d=e.help,p=e.fieldId,h=e.marginBottom,m=e.onErrorVisibleChanged,v="".concat(t,"-item"),g=l.useContext(f.a),b=r||g.wrapperCol||{},y=k()("".concat(v,"-control"),b.className),w=l.useMemo((function(){return Object(o.a)({},g)}),[g]);delete w.labelCol,delete w.wrapperCol;var O=l.createElement("div",{className:"".concat(v,"-control-input")},l.createElement("div",{className:"".concat(v,"-control-input-content")},i)),x=l.useMemo((function(){return{prefixCls:t,status:n}}),[t,n]),E=null!==h||a.length||c.length?l.createElement("div",{style:{display:"flex",flexWrap:"nowrap"}},l.createElement(f.c.Provider,{value:x},l.createElement(z.a,{fieldId:p,errors:a,warnings:c,help:d,helpStatus:n,className:"".concat(v,"-explain-connected"),onVisibleChanged:m})),!!h&&l.createElement("div",{style:{width:0,height:h}})):null,j={};p&&(j.id="".concat(p,"_extra"));var C=s?l.createElement("div",Object(o.a)({},j,{className:"".concat(v,"-extra")}),s):null,S=u&&"pro_table_render"===u.mark&&u.render?u.render(e,{input:O,errorList:E,extra:C}):l.createElement(l.Fragment,null,O,E,C);return l.createElement(f.a.Provider,{value:w},l.createElement(N.a,Object(o.a)({},b,{className:y}),S))},H=n(134),W=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},B={success:y.a,warning:O.a,error:w.a,validating:x.a};function Y(e){var t,n=e.prefixCls,r=e.className,i=e.style,c=e.help,u=e.errors,s=e.warnings,d=e.validateStatus,p=e.meta,h=e.hasFeedback,m=e.hidden,v=e.children,g=e.fieldId,y=e.isRequired,w=e.onSubItemMetaChange,O=W(e,["prefixCls","className","style","help","errors","warnings","validateStatus","meta","hasFeedback","hidden","children","fieldId","isRequired","onSubItemMetaChange"]),x="".concat(n,"-item"),j=l.useContext(f.a).requiredMark,_=l.useRef(null),M=Object(H.a)(u),T=Object(H.a)(s),P=null!=c,F=!!(P||u.length||s.length),N=l.useState(null),A=Object(a.a)(N,2),R=A[0],D=A[1];Object(E.a)((function(){if(F&&_.current){var e=getComputedStyle(_.current);D(parseInt(e.marginBottom,10))}}),[F]);var L="";void 0!==d?L=d:p.validating?L="validating":M.length?L="error":T.length?L="warning":p.touched&&(L="success");var z=l.useMemo((function(){var e;if(h){var t=L&&B[L];e=t?l.createElement("span",{className:k()("".concat(x,"-feedback-icon"),"".concat(x,"-feedback-icon-").concat(L))},l.createElement(t,null)):null}return{status:L,hasFeedback:h,feedbackIcon:e,isFormItemInput:!0}}),[L,h]),Y=(t={},Object(b.a)(t,x,!0),Object(b.a)(t,"".concat(x,"-with-help"),P||M.length||T.length),Object(b.a)(t,"".concat(r),!!r),Object(b.a)(t,"".concat(x,"-has-feedback"),L&&h),Object(b.a)(t,"".concat(x,"-has-success"),"success"===L),Object(b.a)(t,"".concat(x,"-has-warning"),"warning"===L),Object(b.a)(t,"".concat(x,"-has-error"),"error"===L),Object(b.a)(t,"".concat(x,"-is-validating"),"validating"===L),Object(b.a)(t,"".concat(x,"-hidden"),m),t);return l.createElement("div",{className:k()(Y),style:i,ref:_},l.createElement(S.a,Object(o.a)({className:"".concat(x,"-row")},Object(C.a)(O,["_internalItemRender","colon","dependencies","extra","fieldKey","getValueFromEvent","getValueProps","htmlFor","id","initialValue","isListField","label","labelAlign","labelCol","labelWrap","messageVariables","name","normalize","noStyle","preserve","required","requiredMark","rules","shouldUpdate","trigger","tooltip","validateFirst","validateTrigger","valuePropName","wrapperCol"])),l.createElement(I,Object(o.a)({htmlFor:g,required:y,requiredMark:j},e,{prefixCls:n})),l.createElement(V,Object(o.a)({},e,p,{errors:M,warnings:T,prefixCls:n,status:L,help:c,marginBottom:R,onErrorVisibleChanged:function(e){e||D(null)}}),l.createElement(f.f.Provider,{value:w},l.createElement(f.b.Provider,{value:z},v)))),!!R&&l.createElement("div",{className:"".concat(x,"-margin-offset"),style:{marginBottom:-R}}))}Object(m.a)("success","warning","error","validating","");var U=l.memo((function(e){return e.children}),(function(e,t){return e.value===t.value&&e.update===t.update&&e.childProps.length===t.childProps.length&&e.childProps.every((function(e,n){return e===t.childProps[n]}))}));var $=function(e){var t,n,d,m,b,y,w,O,x,E,j=e.name,k=e.noStyle,C=e.dependencies,S=e.prefixCls,_=e.shouldUpdate,M=e.rules,T=e.children,P=e.required,F=e.label,N=e.messageVariables,A=e.trigger,R=void 0===A?"onChange":A,D=e.validateTrigger,L=e.hidden,I=Object(l.useContext)(p.b).getPrefixCls,z=Object(l.useContext)(f.a).name,V="function"==typeof T,H=Object(l.useContext)(f.f),W=Object(l.useContext)(c.FieldContext).validateTrigger,B=void 0!==D?D:W,$=function(e){return!(null==e)}(j),q=I("form",S),G=l.useContext(c.ListContext),K=l.useRef(),Q=(t={},n=l.useState(t),d=Object(a.a)(n,2),m=d[0],b=d[1],y=Object(l.useRef)(null),w=Object(l.useRef)([]),O=Object(l.useRef)(!1),l.useEffect((function(){return O.current=!1,function(){O.current=!0,v.a.cancel(y.current),y.current=null}}),[]),[m,function(e){O.current||(null===y.current&&(w.current=[],y.current=Object(v.a)((function(){y.current=null,b((function(e){var t=e;return w.current.forEach((function(e){t=e(t)})),t}))}))),w.current.push(e))}]),X=Object(a.a)(Q,2),Z=X[0],J=X[1],ee=Object(u.a)((function(){return{errors:[],warnings:[],touched:!1,validating:!1,validated:!1,name:[]}})),te=Object(a.a)(ee,2),ne=te[0],re=te[1],oe=function(e,t){J((function(n){var r=Object(o.a)({},n),a=[].concat(Object(i.a)(e.name.slice(0,-1)),Object(i.a)(t)).join("__SPLIT__");return e.destroy?delete r[a]:r[a]=e,r}))},ie=l.useMemo((function(){var e=Object(i.a)(ne.errors),t=Object(i.a)(ne.warnings);return Object.values(Z).forEach((function(n){e.push.apply(e,Object(i.a)(n.errors||[])),t.push.apply(t,Object(i.a)(n.warnings||[]))})),[e,t]}),[Z,ne.errors,ne.warnings]),ae=Object(a.a)(ie,2),ce=ae[0],ue=ae[1],se=(x=l.useContext(f.a).itemRef,E=l.useRef({}),function(e,t){var n=t&&"object"===Object(r.a)(t)&&t.ref,o=e.join("_");return E.current.name===o&&E.current.originRef===n||(E.current.name=o,E.current.originRef=n,E.current.ref=Object(s.a)(x(e),n)),E.current.ref});function le(t,n,r){return k&&!L?t:l.createElement(Y,Object(o.a)({key:"row"},e,{prefixCls:q,fieldId:n,isRequired:r,errors:ce,warnings:ue,meta:ne,onSubItemMetaChange:oe}),t)}if(!$&&!V&&!C)return le(T);var fe={};return"string"==typeof F?fe.label=F:j&&(fe.label=String(j)),N&&(fe=Object(o.a)(Object(o.a)({},fe),N)),l.createElement(c.Field,Object(o.a)({},e,{messageVariables:fe,trigger:R,validateTrigger:B,onMetaChange:function(e){var t=null==G?void 0:G.getKey(e.name);if(re(e.destroy?{errors:[],warnings:[],touched:!1,validating:!1,validated:!1,name:[]}:e,!0),k&&H){var n=e.name;if(e.destroy)n=K.current||n;else if(void 0!==t){var r=Object(a.a)(t,2),o=r[0],c=r[1];n=[o].concat(Object(i.a)(c)),K.current=n}H(e,n)}}}),(function(t,n,a){var c=Object(g.b)(j).length&&n?n.name:[],u=Object(g.a)(c,z),f=void 0!==P?P:!(!M||!M.some((function(e){if(e&&"object"===Object(r.a)(e)&&e.required&&!e.warningOnly)return!0;if("function"==typeof e){var t=e(a);return t&&t.required&&!t.warningOnly}return!1}))),d=Object(o.a)({},t),p=null;if(Array.isArray(T)&&$)p=T;else if(V&&(!_&&!C||$));else if(!C||V||$)if(Object(h.c)(T)){var m=Object(o.a)(Object(o.a)({},T.props),d);if(m.id||(m.id=u),e.help||ce.length>0||ue.length>0||e.extra){var v=[];(e.help||ce.length>0)&&v.push("".concat(u,"_help")),e.extra&&v.push("".concat(u,"_extra")),m["aria-describedby"]=v.join(" ")}ce.length>0&&(m["aria-invalid"]="true"),f&&(m["aria-required"]="true"),Object(s.c)(T)&&(m.ref=se(c,T)),new Set([].concat(Object(i.a)(Object(g.b)(R)),Object(i.a)(Object(g.b)(B)))).forEach((function(e){m[e]=function(){for(var t,n,r,o,i,a=arguments.length,c=new Array(a),u=0;u<a;u++)c[u]=arguments[u];null===(r=d[e])||void 0===r||(t=r).call.apply(t,[d].concat(c)),null===(i=(o=T.props)[e])||void 0===i||(n=i).call.apply(n,[o].concat(c))}}));var b=[m["aria-required"],m["aria-invalid"],m["aria-describedby"]];p=l.createElement(U,{value:d[e.valuePropName||"value"],update:T,childProps:b},Object(h.a)(T,m))}else p=V&&(_||C)&&!$?T(a):T;else;return le(p,u,f)}))};$.useStatus=d;t.a=$},function(e,t,n){"use strict";var r=n(40),o=n(78),i=n(19)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"===o(e))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(194),o=n(199),i=n(131),a=n(195);function c(e){return Object(r.a)(e)||Object(o.a)(e)||Object(i.a)(e)||Object(a.a)()}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(42),o=function(e){if(Object(r.a)()&&window.document.documentElement){var t=Array.isArray(e)?e:[e],n=window.document.documentElement;return t.some((function(e){return e in n.style}))}return!1};function i(e,t){return Array.isArray(e)||void 0===t?o(e):function(e,t){if(!o(e))return!1;var n=document.createElement("div"),r=n.style[e];return n.style[e]=t,n.style[e]!==r}(e,t)}},function(e,t,n){"use strict";var r=n(1),o=n(4),i=n(2),a=n(5),c=n.n(a),u=n(339),s=n(88),l=n(0),f=n(70),d=n(157),p=n(139),h=n(337),m=n(38),v=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},g=new RegExp("^(".concat(d.a.join("|"),")(-inverse)?$"));function b(e,t){var n=e.type;if((!0===n.__ANT_BUTTON||"button"===e.type)&&e.props.disabled||!0===n.__ANT_SWITCH&&(e.props.disabled||e.props.loading)||!0===n.__ANT_RADIO&&e.props.disabled){var r=function(e,t){var n={},r=Object(i.a)({},e);return t.forEach((function(t){e&&t in e&&(n[t]=e[t],delete r[t])})),{picked:n,omitted:r}}(e.props.style,["position","left","right","top","bottom","float","display","zIndex"]),o=r.picked,a=r.omitted,u=Object(i.a)(Object(i.a)({display:"inline-block"},o),{cursor:"not-allowed",width:e.props.block?"100%":void 0}),s=Object(i.a)(Object(i.a)({},a),{pointerEvents:"none"}),f=Object(m.a)(e,{style:s,className:null});return l.createElement("span",{style:u,className:c()(e.props.className,"".concat(t,"-disabled-compatible-wrapper"))},f)}return e}var y=l.forwardRef((function(e,t){var n,a=l.useContext(f.b),d=a.getPopupContainer,y=a.getPrefixCls,w=a.direction;var O=Object(s.a)(!1,{value:void 0!==e.open?e.open:e.visible,defaultValue:void 0!==e.defaultOpen?e.defaultOpen:e.defaultVisible}),x=Object(o.a)(O,2),E=x[0],j=x[1],k=function(){var t=e.title,n=e.overlay;return!t&&!n&&0!==t},C=function(){var t=e.builtinPlacements,n=e.arrowPointAtCenter,r=void 0!==n&&n,o=e.autoAdjustOverflow,i=void 0===o||o;return t||Object(h.a)({arrowPointAtCenter:r,autoAdjustOverflow:i})},S=e.getPopupContainer,_=e.placement,M=void 0===_?"top":_,T=e.mouseEnterDelay,P=void 0===T?.1:T,F=e.mouseLeaveDelay,N=void 0===F?.1:F,A=v(e,["getPopupContainer","placement","mouseEnterDelay","mouseLeaveDelay"]),R=e.prefixCls,D=e.openClassName,L=e.getTooltipContainer,I=e.overlayClassName,z=e.color,V=e.overlayInnerStyle,H=e.children,W=y("tooltip",R),B=y(),Y=E;"open"in e||"visible"in e||!k()||(Y=!1);var U,$,q=b(Object(m.c)(H)&&!Object(m.b)(H)?H:l.createElement("span",null,H),W),G=q.props,K=G.className&&"string"!=typeof G.className?G.className:c()(G.className,Object(r.a)({},D||"".concat(W,"-open"),!0)),Q=c()(I,(n={},Object(r.a)(n,"".concat(W,"-rtl"),"rtl"===w),Object(r.a)(n,"".concat(W,"-").concat(z),z&&g.test(z)),n)),X=V,Z={};return z&&!g.test(z)&&(X=Object(i.a)(Object(i.a)({},V),{background:z}),Z={"--antd-arrow-background-color":z}),l.createElement(u.default,Object(i.a)({},A,{placement:M,mouseEnterDelay:P,mouseLeaveDelay:N,prefixCls:W,overlayClassName:Q,getTooltipContainer:S||L||d,ref:t,builtinPlacements:C(),overlay:(U=e.title,$=e.overlay,0===U?U:$||U||""),visible:Y,onVisibleChange:function(t){var n,r;j(!k()&&t),k()||(null===(n=e.onOpenChange)||void 0===n||n.call(e,t),null===(r=e.onVisibleChange)||void 0===r||r.call(e,t))},onPopupAlign:function(e,t){var n=C(),r=Object.keys(n).find((function(e){var r,o;return n[e].points[0]===(null===(r=t.points)||void 0===r?void 0:r[0])&&n[e].points[1]===(null===(o=t.points)||void 0===o?void 0:o[1])}));if(r){var o=e.getBoundingClientRect(),i={top:"50%",left:"50%"};/top|Bottom/.test(r)?i.top="".concat(o.height-t.offset[1],"px"):/Top|bottom/.test(r)&&(i.top="".concat(-t.offset[1],"px")),/left|Right/.test(r)?i.left="".concat(o.width-t.offset[0],"px"):/right|Left/.test(r)&&(i.left="".concat(-t.offset[0],"px")),e.style.transformOrigin="".concat(i.left," ").concat(i.top)}},overlayInnerStyle:X,arrowContent:l.createElement("span",{className:"".concat(W,"-arrow-content"),style:Z}),motion:{motionName:Object(p.c)(B,"zoom-big-fast",e.transitionName),motionDeadline:1e3}}),Y?Object(m.a)(q,{className:K}):q)}));t.a=y},function(e,t,n){"use strict";t.a=function(){if("undefined"==typeof navigator||"undefined"==typeof window)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(null==e?void 0:e.substr(0,4))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return F}));var r=n(2),o=n(1),i=n(4),a=n(7),c=n(5),u=n.n(c),s=n(48),l=n(0),f=n.n(l),d=n(70),p=n(69),h=n(52),m=n(90),v=n(38),g=n(39),b=n(206),y=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},w=l.createContext(void 0),O=function(e){var t,n=l.useContext(d.b),i=n.getPrefixCls,a=n.direction,c=e.prefixCls,s=e.size,f=e.className,p=y(e,["prefixCls","size","className"]),h=i("btn-group",c),m="";switch(s){case"large":m="lg";break;case"small":m="sm"}var v=u()(h,(t={},Object(o.a)(t,"".concat(h,"-").concat(m),m),Object(o.a)(t,"".concat(h,"-rtl"),"rtl"===a),t),f);return l.createElement(w.Provider,{value:s},l.createElement("div",Object(r.a)({},p,{className:v})))},x=n(109),E=n(56),j=function(){return{width:0,opacity:0,transform:"scale(0)"}},k=function(e){return{width:e.scrollWidth,opacity:1,transform:"scale(1)"}},C=function(e){var t=e.prefixCls,n=!!e.loading;return e.existIcon?f.a.createElement("span",{className:"".concat(t,"-loading-icon")},f.a.createElement(x.a,null)):f.a.createElement(E.default,{visible:n,motionName:"".concat(t,"-loading-icon-motion"),removeOnLeave:!0,onAppearStart:j,onAppearActive:k,onEnterStart:j,onEnterActive:k,onLeaveStart:k,onLeaveActive:j},(function(e,n){var r=e.className,o=e.style;return f.a.createElement("span",{className:"".concat(t,"-loading-icon"),style:o,ref:n},f.a.createElement(x.a,{className:r}))}))},S=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},_=/^[\u4e00-\u9fa5]{2}$/,M=_.test.bind(_);function T(e){return"text"===e||"link"===e}function P(e,t){var n=!1,r=[];return l.Children.forEach(e,(function(e){var t=Object(a.a)(e),o="string"===t||"number"===t;if(n&&o){var i=r.length-1,c=r[i];r[i]="".concat(c).concat(e)}else r.push(e);n=o})),l.Children.map(r,(function(e){return function(e,t){if(null!=e){var n=t?" ":"";return"string"!=typeof e&&"number"!=typeof e&&"string"==typeof e.type&&M(e.props.children)?Object(v.a)(e,{children:e.props.children.split("").join(n)}):"string"==typeof e?M(e)?l.createElement("span",null,e.split("").join(n)):l.createElement("span",null,e):Object(v.b)(e)?l.createElement("span",null,e):e}}(e,t)}))}Object(g.a)("default","primary","ghost","dashed","link","text"),Object(g.a)("default","circle","round"),Object(g.a)("submit","button","reset");function F(e){return"danger"===e?{danger:!0}:{type:e}}var N=function(e,t){var n,a=e.loading,c=void 0!==a&&a,f=e.prefixCls,v=e.type,g=void 0===v?"default":v,y=e.danger,O=e.shape,x=void 0===O?"default":O,E=e.size,j=e.disabled,k=e.className,_=e.children,F=e.icon,N=e.ghost,A=void 0!==N&&N,R=e.block,D=void 0!==R&&R,L=e.htmlType,I=void 0===L?"button":L,z=S(e,["loading","prefixCls","type","danger","shape","size","disabled","className","children","icon","ghost","block","htmlType"]),V=l.useContext(h.b),H=l.useContext(p.b),W=null!=j?j:H,B=l.useContext(w),Y=l.useState(!!c),U=Object(i.a)(Y,2),$=U[0],q=U[1],G=l.useState(!1),K=Object(i.a)(G,2),Q=K[0],X=K[1],Z=l.useContext(d.b),J=Z.getPrefixCls,ee=Z.autoInsertSpaceInButton,te=Z.direction,ne=t||l.createRef(),re=function(){return 1===l.Children.count(_)&&!F&&!T(g)},oe="boolean"==typeof c?c:(null==c?void 0:c.delay)||!0;l.useEffect((function(){var e=null;return"number"==typeof oe?e=window.setTimeout((function(){e=null,q(oe)}),oe):q(oe),function(){e&&(window.clearTimeout(e),e=null)}}),[oe]),l.useEffect((function(){if(ne&&ne.current&&!1!==ee){var e=ne.current.textContent;re()&&M(e)?Q||X(!0):Q&&X(!1)}}),[ne]);var ie=function(t){var n=e.onClick;$||W?t.preventDefault():null==n||n(t)},ae=J("btn",f),ce=!1!==ee,ue=Object(m.c)(ae,te),se=ue.compactSize,le=ue.compactItemClassnames,fe=se||B||E||V,de=fe&&{large:"lg",small:"sm",middle:void 0}[fe]||"",pe=$?"loading":F,he=Object(s.a)(z,["navigate"]),me=u()(ae,(n={},Object(o.a)(n,"".concat(ae,"-").concat(x),"default"!==x&&x),Object(o.a)(n,"".concat(ae,"-").concat(g),g),Object(o.a)(n,"".concat(ae,"-").concat(de),de),Object(o.a)(n,"".concat(ae,"-icon-only"),!_&&0!==_&&!!pe),Object(o.a)(n,"".concat(ae,"-background-ghost"),A&&!T(g)),Object(o.a)(n,"".concat(ae,"-loading"),$),Object(o.a)(n,"".concat(ae,"-two-chinese-chars"),Q&&ce&&!$),Object(o.a)(n,"".concat(ae,"-block"),D),Object(o.a)(n,"".concat(ae,"-dangerous"),!!y),Object(o.a)(n,"".concat(ae,"-rtl"),"rtl"===te),Object(o.a)(n,"".concat(ae,"-disabled"),void 0!==he.href&&W),n),le,k),ve=F&&!$?F:l.createElement(C,{existIcon:!!F,prefixCls:ae,loading:!!$}),ge=_||0===_?P(_,re()&&ce):null;if(void 0!==he.href)return l.createElement("a",Object(r.a)({},he,{className:me,onClick:ie,ref:ne}),ve,ge);var be=l.createElement("button",Object(r.a)({},z,{type:I,className:me,onClick:ie,disabled:W,ref:ne}),ve,ge);return T(g)?be:l.createElement(b.a,{disabled:!!$},be)},A=l.forwardRef(N);A.Group=O,A.__ANT_BUTTON=!0;t.b=A},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"check-circle",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="CheckCircleOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"}}]},name:"info-circle",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="InfoCircleOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm0 76c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm128.01 198.83c.03 0 .05.01.09.06l45.02 45.01a.2.2 0 01.05.09.12.12 0 010 .07c0 .02-.01.04-.05.08L557.25 512l127.87 127.86a.27.27 0 01.05.06v.02a.12.12 0 010 .07c0 .03-.01.05-.05.09l-45.02 45.02a.2.2 0 01-.09.05.12.12 0 01-.07 0c-.02 0-.04-.01-.08-.05L512 557.25 384.14 685.12c-.04.04-.06.05-.08.05a.12.12 0 01-.07 0c-.03 0-.05-.01-.09-.05l-45.02-45.02a.2.2 0 01-.05-.09.12.12 0 010-.07c0-.02.01-.04.06-.08L466.75 512 338.88 384.14a.27.27 0 01-.05-.06l-.01-.02a.12.12 0 010-.07c0-.03.01-.05.05-.09l45.02-45.02a.2.2 0 01.09-.05.12.12 0 01.07 0c.02 0 .04.01.08.06L512 466.75l127.86-127.86c.04-.05.06-.06.08-.06a.12.12 0 01.07 0z"}}]},name:"close-circle",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="CloseCircleOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"}}]},name:"exclamation-circle",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="ExclamationCircleOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z"}}]},name:"search",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="SearchOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";"undefined"==typeof Promise&&(n(365).enable(),self.Promise=n(367)),"undefined"!=typeof window&&n(368),Object.assign=n(217),n(369),n(410)},function(e,t,n){"use strict";var r=n(366);function o(){}var i=null,a={};function c(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("Promise constructor's argument is not a function");this._x=0,this._y=0,this._z=null,this._A=null,e!==o&&p(e,this)}function u(e,t){for(;3===e._y;)e=e._z;if(c._B&&c._B(e),0===e._y)return 0===e._x?(e._x=1,void(e._A=t)):1===e._x?(e._x=2,void(e._A=[e._A,t])):void e._A.push(t);!function(e,t){r((function(){var n=1===e._y?t.onFulfilled:t.onRejected;if(null!==n){var r=function(e,t){try{return e(t)}catch(e){return i=e,a}}(n,e._z);r===a?l(t.promise,i):s(t.promise,r)}else 1===e._y?s(t.promise,e._z):l(t.promise,e._z)}))}(e,t)}function s(e,t){if(t===e)return l(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"==typeof t||"function"==typeof t)){var n=function(e){try{return e.then}catch(e){return i=e,a}}(t);if(n===a)return l(e,i);if(n===e.then&&t instanceof c)return e._y=3,e._z=t,void f(e);if("function"==typeof n)return void p(n.bind(t),e)}e._y=1,e._z=t,f(e)}function l(e,t){e._y=2,e._z=t,c._C&&c._C(e,t),f(e)}function f(e){if(1===e._x&&(u(e,e._A),e._A=null),2===e._x){for(var t=0;t<e._A.length;t++)u(e,e._A[t]);e._A=null}}function d(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function p(e,t){var n=!1,r=function(e,t,n){try{e(t,n)}catch(e){return i=e,a}}(e,(function(e){n||(n=!0,s(t,e))}),(function(e){n||(n=!0,l(t,e))}));n||r!==a||(n=!0,l(t,i))}e.exports=c,c._B=null,c._C=null,c._D=o,c.prototype.then=function(e,t){if(this.constructor!==c)return function(e,t,n){return new e.constructor((function(r,i){var a=new c(o);a.then(r,i),u(e,new d(t,n,a))}))}(this,e,t);var n=new c(o);return u(this,new d(e,t,n)),n}},function(e,t,n){"use strict";var r=n(15),o=n(40),i=n(120),a=n(122),c=n(275),u=n(19),s=TypeError,l=u("toPrimitive");e.exports=function(e,t){if(!o(e)||i(e))return e;var n,u=a(e,l);if(u){if(void 0===t&&(t="default"),n=r(u,e,t),!o(n)||i(n))return n;throw s("Can't convert object to primitive value")}return void 0===t&&(t="number"),c(e,t)}},function(e,t,n){"use strict";var r="object"==typeof document&&document.all,o=void 0===r&&void 0!==r;e.exports={all:r,IS_HTMLDDA:o}},function(e,t,n){"use strict";var r=n(121);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){"use strict";var r=n(15),o=n(18),i=n(40),a=TypeError;e.exports=function(e,t){var n,c;if("string"===t&&o(n=e.toString)&&!i(c=r(n,e)))return c;if(o(n=e.valueOf)&&!i(c=r(n,e)))return c;if("string"!==t&&o(n=e.toString)&&!i(c=r(n,e)))return c;throw a("Can't convert object to primitive value")}},function(e,t,n){"use strict";var r=n(36),o=n(13),i=n(170);e.exports=!r&&!o((function(){return 7!==Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){"use strict";var r=n(36),o=n(13);e.exports=r&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,t,n){"use strict";var r=n(11),o=n(13),i=n(18),a=n(28),c=n(36),u=n(171).CONFIGURABLE,s=n(221),l=n(92),f=l.enforce,d=l.get,p=String,h=Object.defineProperty,m=r("".slice),v=r("".replace),g=r([].join),b=c&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),y=String(String).split("String"),w=e.exports=function(e,t,n){"Symbol("===m(p(t),0,7)&&(t="["+v(p(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!a(e,"name")||u&&e.name!==t)&&(c?h(e,"name",{value:t,configurable:!0}):e.name=t),b&&n&&a(n,"arity")&&e.length!==n.arity&&h(e,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?c&&h(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=f(e);return a(r,"source")||(r.source=g(y,"string"==typeof t?t:"")),e};Function.prototype.toString=w((function(){return i(this)&&d(this).source||s(this)}),"toString")},function(e,t,n){"use strict";var r=n(28),o=n(280),i=n(83),a=n(41);e.exports=function(e,t,n){for(var c=o(t),u=a.f,s=i.f,l=0;l<c.length;l++){var f=c[l];r(e,f)||n&&r(n,f)||u(e,f,s(t,f))}}},function(e,t,n){"use strict";var r=n(44),o=n(11),i=n(123),a=n(174),c=n(29),u=o([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(c(e)),n=a.f;return n?u(t,n(e)):t}},function(e,t,n){"use strict";var r=n(11),o=n(28),i=n(66),a=n(357).indexOf,c=n(143),u=r([].push);e.exports=function(e,t){var n,r=i(e),s=0,l=[];for(n in r)!o(c,n)&&o(r,n)&&u(l,n);for(;t.length>s;)o(r,n=t[s++])&&(~a(l,n)||u(l,n));return l}},function(e,t,n){"use strict";var r=n(377);e.exports=function(e,t){return new(r(e))(0===t?0:t)}},function(e,t,n){"use strict";var r=n(36),o=n(277),i=n(41),a=n(29),c=n(66),u=n(178);t.f=r&&!o?Object.defineProperties:function(e,t){a(e);for(var n,r=c(t),o=u(t),s=o.length,l=0;s>l;)i.f(e,n=o[l++],r[n]);return e}},function(e,t,n){"use strict";var r=n(44);e.exports=r("document","documentElement")},function(e,t,n){"use strict";var r=n(78),o=n(66),i=n(123).f,a=n(252),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return c&&"Window"===r(e)?function(e){try{return i(e)}catch(e){return a(c)}}(e):i(o(e))}},function(e,t,n){"use strict";var r=n(19);t.f=r},function(e,t,n){"use strict";var r=n(15),o=n(44),i=n(19),a=n(46);e.exports=function(){var e=o("Symbol"),t=e&&e.prototype,n=t&&t.valueOf,c=i("toPrimitive");t&&!t[c]&&a(t,c,(function(e){return r(n,this)}),{arity:1})}},function(e,t,n){"use strict";var r=n(78),o=n(11);e.exports=function(e){if("Function"===r(e))return o(e)}},function(e,t,n){"use strict";var r=n(121);e.exports=r&&!!Symbol.for&&!!Symbol.keyFor},function(e,t,n){"use strict";e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){"use strict";var r=n(170)("span").classList,o=r&&r.constructor&&r.constructor.prototype;e.exports=o===Object.prototype?void 0:o},function(e,t,n){"use strict";var r,o,i,a=n(13),c=n(18),u=n(40),s=n(124),l=n(226),f=n(46),d=n(19),p=n(60),h=d("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(o=l(l(i)))!==Object.prototype&&(r=o):m=!0),!u(r)||a((function(){var e={};return r[h].call(e)!==e}))?r={}:p&&(r=s(r)),c(r[h])||f(r,h,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(e,t,n){"use strict";var r=n(13);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,n){"use strict";var r=n(11),o=n(43);e.exports=function(e,t,n){try{return r(o(Object.getOwnPropertyDescriptor(e,t)[n]))}catch(e){}}},function(e,t,n){"use strict";var r=n(44),o=n(11),i=r("Symbol"),a=i.keyFor,c=o(i.prototype.valueOf);e.exports=i.isRegisteredSymbol||function(e){try{return void 0!==a(c(e))}catch(e){return!1}}},function(e,t,n){"use strict";for(var r=n(103),o=n(44),i=n(11),a=n(120),c=n(19),u=o("Symbol"),s=u.isWellKnownSymbol,l=o("Object","getOwnPropertyNames"),f=i(u.prototype.valueOf),d=r("wks"),p=0,h=l(u),m=h.length;p<m;p++)try{var v=h[p];a(u[v])&&c(v)}catch(e){}e.exports=function(e){if(s&&s(e))return!0;try{for(var t=f(e),n=0,r=l(d),o=r.length;n<o;n++)if(d[r[n]]==t)return!0}catch(e){}return!1}},function(e,t,n){"use strict";var r=n(11),o=n(144),i=n(49),a=n(89),c=r("".charAt),u=r("".charCodeAt),s=r("".slice),l=function(e){return function(t,n){var r,l,f=i(a(t)),d=o(n),p=f.length;return d<0||d>=p?e?"":void 0:(r=u(f,d))<55296||r>56319||d+1===p||(l=u(f,d+1))<56320||l>57343?e?c(f,d):r:e?s(f,d,d+2):l-56320+(r-55296<<10)+65536}};e.exports={codeAt:l(!1),charAt:l(!0)}},function(e,t,n){"use strict";var r=n(19),o=n(126),i=r("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},function(e,t,n){"use strict";var r=n(15),o=n(43),i=n(29),a=n(140),c=n(228),u=TypeError;e.exports=function(e,t){var n=arguments.length<2?c(e):t;if(o(n))return i(r(n,e));throw u(a(e)+" is not iterable")}},function(e,t,n){"use strict";var r=n(6),o=n(17),i=n(11),a=n(145),c=n(46),u=n(301),s=n(93),l=n(230),f=n(18),d=n(67),p=n(40),h=n(13),m=n(229),v=n(84),g=n(231);e.exports=function(e,t,n){var b=-1!==e.indexOf("Map"),y=-1!==e.indexOf("Weak"),w=b?"set":"add",O=o[e],x=O&&O.prototype,E=O,j={},k=function(e){var t=i(x[e]);c(x,e,"add"===e?function(e){return t(this,0===e?0:e),this}:"delete"===e?function(e){return!(y&&!p(e))&&t(this,0===e?0:e)}:"get"===e?function(e){return y&&!p(e)?void 0:t(this,0===e?0:e)}:"has"===e?function(e){return!(y&&!p(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(a(e,!f(O)||!(y||x.forEach&&!h((function(){(new O).entries().next()})))))E=n.getConstructor(t,e,b,w),u.enable();else if(a(e,!0)){var C=new E,S=C[w](y?{}:-0,1)!==C,_=h((function(){C.has(1)})),M=m((function(e){new O(e)})),T=!y&&h((function(){for(var e=new O,t=5;t--;)e[w](t,t);return!e.has(-0)}));M||((E=t((function(e,t){l(e,x);var n=g(new O,e,E);return d(t)||s(t,n[w],{that:n,AS_ENTRIES:b}),n}))).prototype=x,x.constructor=E),(_||T)&&(k("delete"),k("has"),b&&k("get")),(T||S)&&k(w),y&&x.clear&&delete x.clear}return j[e]=E,r({global:!0,constructor:!0,forced:E!==O},j),v(E,e),y||n.setStrong(E,e,b),E}},function(e,t,n){"use strict";var r=n(6),o=n(11),i=n(143),a=n(40),c=n(28),u=n(41).f,s=n(123),l=n(285),f=n(424),d=n(169),p=n(426),h=!1,m=d("meta"),v=0,g=function(e){u(e,m,{value:{objectID:"O"+v++,weakData:{}}})},b=e.exports={enable:function(){b.enable=function(){},h=!0;var e=s.f,t=o([].splice),n={};n[m]=1,e(n).length&&(s.f=function(n){for(var r=e(n),o=0,i=r.length;o<i;o++)if(r[o]===m){t(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:l.f}))},fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!c(e,m)){if(!f(e))return"F";if(!t)return"E";g(e)}return e[m].objectID},getWeakData:function(e,t){if(!c(e,m)){if(!f(e))return!0;if(!t)return!1;g(e)}return e[m].weakData},onFreeze:function(e){return p&&h&&f(e)&&!c(e,m)&&g(e),e}};i[m]=!0},function(e,t,n){"use strict";var r=n(124),o=n(148),i=n(427),a=n(37),c=n(230),u=n(67),s=n(93),l=n(225),f=n(227),d=n(232),p=n(36),h=n(301).fastKey,m=n(92),v=m.set,g=m.getterFor;e.exports={getConstructor:function(e,t,n,l){var f=e((function(e,o){c(e,d),v(e,{type:t,index:r(null),first:void 0,last:void 0,size:0}),p||(e.size=0),u(o)||s(o,e[l],{that:e,AS_ENTRIES:n})})),d=f.prototype,m=g(t),b=function(e,t,n){var r,o,i=m(e),a=y(e,t);return a?a.value=n:(i.last=a={index:o=h(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),p?i.size++:e.size++,"F"!==o&&(i.index[o]=a)),e},y=function(e,t){var n,r=m(e),o=h(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key===t)return n};return i(d,{clear:function(){for(var e=m(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,p?e.size=0:this.size=0},delete:function(e){var t=m(this),n=y(this,e);if(n){var r=n.next,o=n.previous;delete t.index[n.index],n.removed=!0,o&&(o.next=r),r&&(r.previous=o),t.first===n&&(t.first=r),t.last===n&&(t.last=o),p?t.size--:this.size--}return!!n},forEach:function(e){for(var t,n=m(this),r=a(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!y(this,e)}}),i(d,n?{get:function(e){var t=y(this,e);return t&&t.value},set:function(e,t){return b(this,0===e?0:e,t)}}:{add:function(e){return b(this,e=0===e?0:e,e)}}),p&&o(d,"size",{configurable:!0,get:function(){return m(this).size}}),f},setStrong:function(e,t,n){var r=t+" Iterator",o=g(t),i=g(r);l(e,t,(function(e,t){v(this,{type:r,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?f("keys"===t?n.key:"values"===t?n.value:[n.key,n.value],!1):(e.target=void 0,f(void 0,!0))}),n?"entries":"values",!n,!0),d(t)}}},function(e,t,n){"use strict";var r=n(37),o=n(15),i=n(43),a=n(304),c=n(67),u=n(93),s=[].push;e.exports=function(e){var t,n,l,f,d=arguments.length,p=d>1?arguments[1]:void 0;return a(this),(t=void 0!==p)&&i(p),c(e)?new this:(n=[],t?(l=0,f=r(p,d>2?arguments[2]:void 0),u(e,(function(e){o(s,n,f(e,l++))}))):u(e,s,{that:n}),new this(n))}},function(e,t,n){"use strict";var r=n(176),o=n(140),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a constructor")}},function(e,t,n){"use strict";var r=n(180);e.exports=function(){return new this(r(arguments))}},function(e,t,n){"use strict";var r=n(15),o=n(43),i=n(18),a=n(29),c=TypeError;e.exports=function(e,t){var n,u=a(this),s=o(u.get),l=o(u.has),f=o(u.set),d=arguments.length>2?arguments[2]:void 0;if(!i(t)&&!i(d))throw c("At least one callback required");return r(l,u,e)?(n=r(s,u,e),i(t)&&(n=t(n),r(f,u,e,n))):i(d)&&(n=d(),r(f,u,e,n)),n}},function(e,t,n){"use strict";var r=n(45),o=n(51),i=n(233),a=n(149),c=n(105),u=n(61),s=n(94),l=o.has,f=o.remove;e.exports=function(e){var t=r(this),n=c(e),o=i(t);return a(t)<=n.size?u(t,(function(e){n.includes(e)&&f(o,e)})):s(n.getIterator(),(function(e){l(t,e)&&f(o,e)})),o}},function(e,t,n){"use strict";var r=n(45),o=n(51),i=n(149),a=n(105),c=n(61),u=n(94),s=o.Set,l=o.add,f=o.has;e.exports=function(e){var t=r(this),n=a(e),o=new s;return i(t)>n.size?u(n.getIterator(),(function(e){f(t,e)&&l(o,e)})):c(t,(function(e){n.includes(e)&&l(o,e)})),o}},function(e,t,n){"use strict";var r=n(45),o=n(51).has,i=n(149),a=n(105),c=n(61),u=n(94),s=n(186);e.exports=function(e){var t=r(this),n=a(e);if(i(t)<=n.size)return!1!==c(t,(function(e){if(n.includes(e))return!1}),!0);var l=n.getIterator();return!1!==u(l,(function(e){if(o(t,e))return s(l,"normal",!1)}))}},function(e,t,n){"use strict";var r=n(45),o=n(149),i=n(61),a=n(105);e.exports=function(e){var t=r(this),n=a(e);return!(o(t)>n.size)&&!1!==i(t,(function(e){if(!n.includes(e))return!1}),!0)}},function(e,t,n){"use strict";var r=n(45),o=n(51).has,i=n(149),a=n(105),c=n(94),u=n(186);e.exports=function(e){var t=r(this),n=a(e);if(i(t)<n.size)return!1;var s=n.getIterator();return!1!==c(s,(function(e){if(!o(t,e))return u(s,"normal",!1)}))}},function(e,t,n){"use strict";var r=n(45),o=n(51),i=n(233),a=n(105),c=n(94),u=o.add,s=o.has,l=o.remove;e.exports=function(e){var t=r(this),n=a(e).getIterator(),o=i(t);return c(n,(function(e){s(t,e)?l(o,e):u(o,e)})),o}},function(e,t,n){"use strict";var r=n(45),o=n(51).add,i=n(233),a=n(105),c=n(94);e.exports=function(e){var t=r(this),n=a(e).getIterator(),u=i(t);return c(n,(function(e){o(u,e)})),u}},function(e,t,n){"use strict";var r,o,i,a,c=n(17),u=n(179),s=n(37),l=n(18),f=n(28),d=n(13),p=n(284),h=n(180),m=n(170),v=n(490),g=n(315),b=n(187),y=c.setImmediate,w=c.clearImmediate,O=c.process,x=c.Dispatch,E=c.Function,j=c.MessageChannel,k=c.String,C=0,S={};d((function(){r=c.location}));var _=function(e){if(f(S,e)){var t=S[e];delete S[e],t()}},M=function(e){return function(){_(e)}},T=function(e){_(e.data)},P=function(e){c.postMessage(k(e),r.protocol+"//"+r.host)};y&&w||(y=function(e){v(arguments.length,1);var t=l(e)?e:E(e),n=h(arguments,1);return S[++C]=function(){u(t,void 0,n)},o(C),C},w=function(e){delete S[e]},b?o=function(e){O.nextTick(M(e))}:x&&x.now?o=function(e){x.now(M(e))}:j&&!g?(a=(i=new j).port2,i.port1.onmessage=T,o=s(a.postMessage,a)):c.addEventListener&&l(c.postMessage)&&!c.importScripts&&r&&"file:"!==r.protocol&&!d(P)?(o=P,c.addEventListener("message",T,!1)):o="onreadystatechange"in m("script")?function(e){p.appendChild(m("script")).onreadystatechange=function(){p.removeChild(this),_(e)}}:function(e){setTimeout(M(e),0)}),e.exports={set:y,clear:w}},function(e,t,n){"use strict";var r=n(161);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(e,t,n){"use strict";var r=function(){this.head=null,this.tail=null};r.prototype={add:function(e){var t={item:e,next:null},n=this.tail;n?n.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=r},function(e,t,n){"use strict";e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},function(e,t,n){"use strict";var r=n(127),o=n(229),i=n(150).CONSTRUCTOR;e.exports=i||!o((function(e){r.all(e).then(void 0,(function(){}))}))},function(e,t,n){"use strict";var r=n(29),o=n(40),i=n(151);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){var r=n(501),o=n(513)((function(e,t,n){return t=t.toLowerCase(),e+(n?r(t):t)}));e.exports=o},function(e,t){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return n.test(e)}},function(e,t,n){"use strict";var r=n(15),o=n(28),i=n(91),a=n(323),c=RegExp.prototype;e.exports=function(e){var t=e.flags;return void 0!==t||"flags"in c||o(e,"flags")||!i(c,e)?t:r(a,e)}},function(e,t,n){"use strict";var r=n(29);e.exports=function(){var e=r(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";var r=n(13),o=n(17).RegExp;e.exports=r((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},function(e,t,n){"use strict";var r=n(13),o=n(17).RegExp;e.exports=r((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(57);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var c=e.indexOf("#");-1!==c&&(e=e.slice(0,c)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(57),o=n(534),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(c=n(330)),c),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u}).call(this,n(234))},function(e,t,n){"use strict";var r=n(57),o=n(535),i=n(327),a=n(537),c=n(540),u=n(541),s=n(331);e.exports=function(e){return new Promise((function(t,l){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var v=a(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?c(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,l,r),p=null}},p.onabort=function(){p&&(l(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){l(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),l(s(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var g=n(542),b=(e.withCredentials||u(v))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),l(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(536);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(57);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],i=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(i,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(a,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var c=o.concat(i).concat(a),u=Object.keys(t).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";t.a={items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"}},function(e,t,n){"use strict";var r=n(4),o=n(0),i=n(336);t.a=function(){var e=o.useState(!1),t=Object(r.a)(e,2),n=t[0],a=t[1];return o.useEffect((function(){a(Object(i.b)())}),[]),n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a}));var r,o=n(42),i=(n(261),function(){return Object(o.a)()&&window.document.documentElement}),a=function(){if(!i())return!1;if(void 0!==r)return r;var e=document.createElement("div");return e.style.display="flex",e.style.flexDirection="column",e.style.rowGap="1px",e.appendChild(document.createElement("div")),e.appendChild(document.createElement("div")),document.body.appendChild(e),r=1===e.scrollHeight,document.body.removeChild(e),r}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=n(2),o=n(203),i={adjustX:1,adjustY:1},a={adjustX:0,adjustY:0},c=[0,0];function u(e){return"boolean"==typeof e?e?i:a:Object(r.a)(Object(r.a)({},a),e)}function s(e){var t=e.arrowWidth,n=void 0===t?4:t,i=e.horizontalArrowShift,a=void 0===i?16:i,s=e.verticalArrowShift,l=void 0===s?8:s,f=e.autoAdjustOverflow,d=e.arrowPointAtCenter,p={left:{points:["cr","cl"],offset:[-4,0]},right:{points:["cl","cr"],offset:[4,0]},top:{points:["bc","tc"],offset:[0,-4]},bottom:{points:["tc","bc"],offset:[0,4]},topLeft:{points:["bl","tc"],offset:[-(a+n),-4]},leftTop:{points:["tr","cl"],offset:[-4,-(l+n)]},topRight:{points:["br","tc"],offset:[a+n,-4]},rightTop:{points:["tl","cr"],offset:[4,-(l+n)]},bottomRight:{points:["tr","bc"],offset:[a+n,4]},rightBottom:{points:["bl","cr"],offset:[4,l+n]},bottomLeft:{points:["tl","bc"],offset:[-(a+n),4]},leftBottom:{points:["br","cl"],offset:[-4,l+n]}};return Object.keys(p).forEach((function(e){p[e]=d?Object(r.a)(Object(r.a)({},p[e]),{overflow:u(f),targetOffset:c}):Object(r.a)(Object(r.a)({},o.a[e]),{overflow:u(f)}),p[e].ignoreShake=!0})),p}},function(e,t,n){"use strict";n.r(t),n.d(t,"BaseInput",(function(){return p}));var r=n(1),o=n(7),i=n(0),a=n.n(i),c=n(5),u=n.n(c);function s(e){return!(!e.addonBefore&&!e.addonAfter)}function l(e){return!!(e.prefix||e.suffix||e.allowClear)}function f(e,t,n,r){if(n){var o=t;if("click"===t.type){var i=e.cloneNode(!0);return o=Object.create(t,{target:{value:i},currentTarget:{value:i}}),i.value="",void n(o)}if(void 0!==r)return o=Object.create(t,{target:{value:e},currentTarget:{value:e}}),e.value=r,void n(o);n(o)}}function d(e){return null==e?"":String(e)}var p=function(e){var t=e.inputElement,n=e.prefixCls,c=e.prefix,f=e.suffix,d=e.addonBefore,p=e.addonAfter,h=e.className,m=e.style,v=e.affixWrapperClassName,g=e.groupClassName,b=e.wrapperClassName,y=e.disabled,w=e.readOnly,O=e.focused,x=e.triggerFocus,E=e.allowClear,j=e.value,k=e.handleReset,C=e.hidden,S=Object(i.useRef)(null),_=Object(i.cloneElement)(t,{value:j,hidden:C});if(l(e)){var M,T="".concat(n,"-affix-wrapper"),P=u()(T,(M={},Object(r.a)(M,"".concat(T,"-disabled"),y),Object(r.a)(M,"".concat(T,"-focused"),O),Object(r.a)(M,"".concat(T,"-readonly"),w),Object(r.a)(M,"".concat(T,"-input-with-clear-btn"),f&&E&&j),M),!s(e)&&h,v),F=(f||E)&&a.a.createElement("span",{className:"".concat(n,"-suffix")},function(){var e;if(!E)return null;var t=!y&&!w&&j,i="".concat(n,"-clear-icon"),c="object"===Object(o.a)(E)&&null!=E&&E.clearIcon?E.clearIcon:"✖";return a.a.createElement("span",{onClick:k,onMouseDown:function(e){return e.preventDefault()},className:u()(i,(e={},Object(r.a)(e,"".concat(i,"-hidden"),!t),Object(r.a)(e,"".concat(i,"-has-suffix"),!!f),e)),role:"button",tabIndex:-1},c)}(),f);_=a.a.createElement("span",{className:P,style:m,hidden:!s(e)&&C,onClick:function(e){var t;null!==(t=S.current)&&void 0!==t&&t.contains(e.target)&&(null==x||x())},ref:S},c&&a.a.createElement("span",{className:"".concat(n,"-prefix")},c),Object(i.cloneElement)(t,{style:null,value:j,hidden:null}),F)}if(s(e)){var N="".concat(n,"-group"),A="".concat(N,"-addon"),R=u()("".concat(n,"-wrapper"),N,b),D=u()("".concat(n,"-group-wrapper"),h,g);return a.a.createElement("span",{className:D,style:m,hidden:C},a.a.createElement("span",{className:R},d&&a.a.createElement("span",{className:A},d),Object(i.cloneElement)(_,{style:null,hidden:null}),p&&a.a.createElement("span",{className:A},p)))}return _},h=n(8),m=n(2),v=n(4),g=n(22),b=n(48),y=n(88),w=["autoComplete","onChange","onFocus","onBlur","onPressEnter","onKeyDown","prefixCls","disabled","htmlSize","className","maxLength","suffix","showCount","type","inputClassName"],O=Object(i.forwardRef)((function(e,t){var n=e.autoComplete,c=e.onChange,O=e.onFocus,x=e.onBlur,E=e.onPressEnter,j=e.onKeyDown,k=e.prefixCls,C=void 0===k?"rc-input":k,S=e.disabled,_=e.htmlSize,M=e.className,T=e.maxLength,P=e.suffix,F=e.showCount,N=e.type,A=void 0===N?"text":N,R=e.inputClassName,D=Object(g.a)(e,w),L=Object(y.a)(e.defaultValue,{value:e.value}),I=Object(v.a)(L,2),z=I[0],V=I[1],H=Object(i.useState)(!1),W=Object(v.a)(H,2),B=W[0],Y=W[1],U=Object(i.useRef)(null),$=function(e){U.current&&function(e,t){if(e){e.focus(t);var n=(t||{}).cursor;if(n){var r=e.value.length;switch(n){case"start":e.setSelectionRange(0,0);break;case"end":e.setSelectionRange(r,r);break;default:e.setSelectionRange(0,r)}}}}(U.current,e)};Object(i.useImperativeHandle)(t,(function(){return{focus:$,blur:function(){var e;null===(e=U.current)||void 0===e||e.blur()},setSelectionRange:function(e,t,n){var r;null===(r=U.current)||void 0===r||r.setSelectionRange(e,t,n)},select:function(){var e;null===(e=U.current)||void 0===e||e.select()},input:U.current}})),Object(i.useEffect)((function(){Y((function(e){return(!e||!S)&&e}))}),[S]);var q,G=function(t){void 0===e.value&&V(t.target.value),U.current&&f(U.current,t,c)},K=function(e){E&&"Enter"===e.key&&E(e),null==j||j(e)},Q=function(e){Y(!0),null==O||O(e)},X=function(e){Y(!1),null==x||x(e)};return a.a.createElement(p,Object(m.a)({},D,{prefixCls:C,className:M,inputElement:(q=Object(b.a)(e,["prefixCls","onPressEnter","addonBefore","addonAfter","prefix","suffix","allowClear","defaultValue","showCount","affixWrapperClassName","groupClassName","inputClassName","wrapperClassName","htmlSize"]),a.a.createElement("input",Object(m.a)({autoComplete:n},q,{onChange:G,onFocus:Q,onBlur:X,onKeyDown:K,className:u()(C,Object(r.a)({},"".concat(C,"-disabled"),S),R,!s(e)&&!l(e)&&M),ref:U,size:_,type:A}))),handleReset:function(e){V(""),$(),U.current&&f(U.current,e,c)},value:d(z),focused:B,triggerFocus:$,suffix:function(){var e=Number(T)>0;if(P||F){var t=d(z),n=Object(h.a)(t).length,i="object"===Object(o.a)(F)?F.formatter({value:t,count:n,maxLength:T}):"".concat(n).concat(e?" / ".concat(T):"");return a.a.createElement(a.a.Fragment,null,!!F&&a.a.createElement("span",{className:u()("".concat(C,"-show-count-suffix"),Object(r.a)({},"".concat(C,"-show-count-has-suffix"),!!P))},i),P)}return null}(),disabled:S}))}));t.default=O},function(e,t,n){"use strict";n.r(t),n.d(t,"Popup",(function(){return d}));var r=n(2),o=n(7),i=n(3),a=n(22),c=n(0),u=n(251),s=n(203),l=n(5),f=n.n(l);function d(e){var t=e.showArrow,n=e.arrowContent,r=e.children,o=e.prefixCls,i=e.id,a=e.overlayInnerStyle,u=e.className,s=e.style;return c.createElement("div",{className:f()("".concat(o,"-content"),u),style:s},!1!==t&&c.createElement("div",{className:"".concat(o,"-arrow"),key:"arrow"},n),c.createElement("div",{className:"".concat(o,"-inner"),id:i,role:"tooltip",style:a},"function"==typeof r?r():r))}var p=function(e,t){var n=e.overlayClassName,l=e.trigger,f=void 0===l?["hover"]:l,p=e.mouseEnterDelay,h=void 0===p?0:p,m=e.mouseLeaveDelay,v=void 0===m?.1:m,g=e.overlayStyle,b=e.prefixCls,y=void 0===b?"rc-tooltip":b,w=e.children,O=e.onVisibleChange,x=e.afterVisibleChange,E=e.transitionName,j=e.animation,k=e.motion,C=e.placement,S=void 0===C?"right":C,_=e.align,M=void 0===_?{}:_,T=e.destroyTooltipOnHide,P=void 0!==T&&T,F=e.defaultVisible,N=e.getTooltipContainer,A=e.overlayInnerStyle,R=e.arrowContent,D=e.overlay,L=e.id,I=e.showArrow,z=Object(a.a)(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","motion","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer","overlayInnerStyle","arrowContent","overlay","id","showArrow"]),V=Object(c.useRef)(null);Object(c.useImperativeHandle)(t,(function(){return V.current}));var H=Object(i.a)({},z);"visible"in e&&(H.popupVisible=e.visible);var W=!1,B=!1;if("boolean"==typeof P)W=P;else if(P&&"object"===Object(o.a)(P)){var Y=P.keepParent;W=!0===Y,B=!1===Y}return c.createElement(u.a,Object(r.a)({popupClassName:n,prefixCls:y,popup:function(){return c.createElement(d,{showArrow:I,arrowContent:R,key:"content",prefixCls:y,id:L,overlayInnerStyle:A},D)},action:f,builtinPlacements:s.a,popupPlacement:S,ref:V,popupAlign:M,getPopupContainer:N,onPopupVisibleChange:O,afterPopupVisibleChange:x,popupTransitionName:E,popupAnimation:j,popupMotion:k,defaultPopupVisible:F,destroyPopupOnHide:W,autoDestroy:B,mouseLeaveDelay:v,popupStyle:g,mouseEnterDelay:h},H),w)},h=Object(c.forwardRef)(p);t.default=h},function(e,t,n){"use strict";n.r(t),n.d(t,"ResizableTextArea",(function(){return C}));var r,o=n(2),i=n(23),a=n(24),c=n(31),u=n(32),s=n(0),l=n(1),f=n(3),d=n(7),p=n(4),h=n(22),m=n(250),v=n(55),g=n(30),b=n(88),y=n(5),w=n.n(y),O="\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n  pointer-events: none !important;\n",x=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","font-variant","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing","word-break"],E={};function j(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.getAttribute("id")||e.getAttribute("data-reactid")||e.getAttribute("name");if(t&&E[n])return E[n];var r=window.getComputedStyle(e),o=r.getPropertyValue("box-sizing")||r.getPropertyValue("-moz-box-sizing")||r.getPropertyValue("-webkit-box-sizing"),i=parseFloat(r.getPropertyValue("padding-bottom"))+parseFloat(r.getPropertyValue("padding-top")),a=parseFloat(r.getPropertyValue("border-bottom-width"))+parseFloat(r.getPropertyValue("border-top-width")),c=x.map((function(e){return"".concat(e,":").concat(r.getPropertyValue(e))})).join(";"),u={sizingStyle:c,paddingSize:i,borderSize:a,boxSizing:o};return t&&n&&(E[n]=u),u}var k=["prefixCls","onPressEnter","defaultValue","value","autoSize","onResize","className","style","disabled","onChange","onInternalAutoSize"],C=s.forwardRef((function(e,t){var n=e.prefixCls,i=void 0===n?"rc-textarea":n,a=(e.onPressEnter,e.defaultValue),c=e.value,u=e.autoSize,y=e.onResize,x=e.className,E=e.style,C=e.disabled,S=e.onChange,_=(e.onInternalAutoSize,Object(h.a)(e,k)),M=Object(b.a)(a,{value:c,postState:function(e){return null!=e?e:""}}),T=Object(p.a)(M,2),P=T[0],F=T[1],N=s.useRef();s.useImperativeHandle(t,(function(){return{textArea:N.current}}));var A=s.useMemo((function(){return u&&"object"===Object(d.a)(u)?[u.minRows,u.maxRows]:[]}),[u]),R=Object(p.a)(A,2),D=R[0],L=R[1],I=!!u,z=s.useState(2),V=Object(p.a)(z,2),H=V[0],W=V[1],B=s.useState(),Y=Object(p.a)(B,2),U=Y[0],$=Y[1],q=function(){W(0)};Object(v.a)((function(){I&&q()}),[c,D,L,I]),Object(v.a)((function(){if(0===H)W(1);else if(1===H){var e=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;r||((r=document.createElement("textarea")).setAttribute("tab-index","-1"),r.setAttribute("aria-hidden","true"),document.body.appendChild(r)),e.getAttribute("wrap")?r.setAttribute("wrap",e.getAttribute("wrap")):r.removeAttribute("wrap");var i=j(e,t),a=i.paddingSize,c=i.borderSize,u=i.boxSizing,s=i.sizingStyle;r.setAttribute("style","".concat(s,";").concat(O)),r.value=e.value||e.placeholder||"";var l,f=void 0,d=void 0,p=r.scrollHeight;if("border-box"===u?p+=c:"content-box"===u&&(p-=a),null!==n||null!==o){r.value=" ";var h=r.scrollHeight-a;null!==n&&(f=h*n,"border-box"===u&&(f=f+a+c),p=Math.max(f,p)),null!==o&&(d=h*o,"border-box"===u&&(d=d+a+c),l=p>d?"":"hidden",p=Math.min(d,p))}var m={height:p,overflowY:l,resize:"none"};return f&&(m.minHeight=f),d&&(m.maxHeight=d),m}(N.current,!1,D,L);W(2),$(e)}else!function(){try{if(document.activeElement===N.current){var e=N.current,t=e.selectionStart,n=e.selectionEnd,r=e.scrollTop;N.current.setSelectionRange(t,n),N.current.scrollTop=r}}catch(e){}}()}),[H]);var G=s.useRef(),K=function(){g.a.cancel(G.current)};s.useEffect((function(){return K}),[]);var Q=I?U:null,X=Object(f.a)(Object(f.a)({},E),Q);return 0!==H&&1!==H||(X.overflowY="hidden",X.overflowX="hidden"),s.createElement(m.a,{onResize:function(e){2===H&&(null==y||y(e),u&&(K(),G.current=Object(g.a)((function(){q()}))))},disabled:!(u||y)},s.createElement("textarea",Object(o.a)({},_,{ref:N,style:X,className:w()(i,x,Object(l.a)({},"".concat(i,"-disabled"),C)),disabled:C,value:P,onChange:function(e){F(e.target.value),null==S||S(e)}})))})),S=function(e){Object(c.a)(n,e);var t=Object(u.a)(n);function n(e){var r;Object(i.a)(this,n),(r=t.call(this,e)).resizableTextArea=void 0,r.focus=function(){r.resizableTextArea.textArea.focus()},r.saveTextArea=function(e){r.resizableTextArea=e},r.handleChange=function(e){var t=r.props.onChange;r.setValue(e.target.value),t&&t(e)},r.handleKeyDown=function(e){var t=r.props,n=t.onPressEnter,o=t.onKeyDown;13===e.keyCode&&n&&n(e),o&&o(e)};var o=void 0===e.value||null===e.value?e.defaultValue:e.value;return r.state={value:o},r}return Object(a.a)(n,[{key:"setValue",value:function(e,t){"value"in this.props||this.setState({value:e},t)}},{key:"blur",value:function(){this.resizableTextArea.textArea.blur()}},{key:"render",value:function(){return s.createElement(C,Object(o.a)({},this.props,{value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,ref:this.saveTextArea}))}}],[{key:"getDerivedStateFromProps",value:function(e){return"value"in e?{value:e.value}:null}}]),n}(s.Component);t.default=S},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="InfoCircleFilled";t.a=o.forwardRef(c)},function(e,t,n){"use strict";function r(e){return"object"==typeof e&&null!=e&&1===e.nodeType}function o(e,t){return(!t||"hidden"!==e)&&"visible"!==e&&"clip"!==e}function i(e,t){if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){var n=getComputedStyle(e,null);return o(n.overflowY,t)||o(n.overflowX,t)||function(e){var t=function(e){if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(e){return null}}(e);return!!t&&(t.clientHeight<e.scrollHeight||t.clientWidth<e.scrollWidth)}(e)}return!1}function a(e,t,n,r,o,i,a,c){return i<e&&a>t||i>e&&a<t?0:i<=e&&c<=n||a>=t&&c>=n?i-e-r:a>t&&c<n||i<e&&c>n?a-t+o:0}n.r(t);var c=function(e,t){var n=window,o=t.scrollMode,c=t.block,u=t.inline,s=t.boundary,l=t.skipOverflowHiddenElements,f="function"==typeof s?s:function(e){return e!==s};if(!r(e))throw new TypeError("Invalid target");for(var d,p,h=document.scrollingElement||document.documentElement,m=[],v=e;r(v)&&f(v);){if((v=null==(p=(d=v).parentElement)?d.getRootNode().host||null:p)===h){m.push(v);break}null!=v&&v===document.body&&i(v)&&!i(document.documentElement)||null!=v&&i(v,l)&&m.push(v)}for(var g=n.visualViewport?n.visualViewport.width:innerWidth,b=n.visualViewport?n.visualViewport.height:innerHeight,y=window.scrollX||pageXOffset,w=window.scrollY||pageYOffset,O=e.getBoundingClientRect(),x=O.height,E=O.width,j=O.top,k=O.right,C=O.bottom,S=O.left,_="start"===c||"nearest"===c?j:"end"===c?C:j+x/2,M="center"===u?S+E/2:"end"===u?k:S,T=[],P=0;P<m.length;P++){var F=m[P],N=F.getBoundingClientRect(),A=N.height,R=N.width,D=N.top,L=N.right,I=N.bottom,z=N.left;if("if-needed"===o&&j>=0&&S>=0&&C<=b&&k<=g&&j>=D&&C<=I&&S>=z&&k<=L)return T;var V=getComputedStyle(F),H=parseInt(V.borderLeftWidth,10),W=parseInt(V.borderTopWidth,10),B=parseInt(V.borderRightWidth,10),Y=parseInt(V.borderBottomWidth,10),U=0,$=0,q="offsetWidth"in F?F.offsetWidth-F.clientWidth-H-B:0,G="offsetHeight"in F?F.offsetHeight-F.clientHeight-W-Y:0,K="offsetWidth"in F?0===F.offsetWidth?0:R/F.offsetWidth:0,Q="offsetHeight"in F?0===F.offsetHeight?0:A/F.offsetHeight:0;if(h===F)U="start"===c?_:"end"===c?_-b:"nearest"===c?a(w,w+b,b,W,Y,w+_,w+_+x,x):_-b/2,$="start"===u?M:"center"===u?M-g/2:"end"===u?M-g:a(y,y+g,g,H,B,y+M,y+M+E,E),U=Math.max(0,U+w),$=Math.max(0,$+y);else{U="start"===c?_-D-W:"end"===c?_-I+Y+G:"nearest"===c?a(D,I,A,W,Y+G,_,_+x,x):_-(D+A/2)+G/2,$="start"===u?M-z-H:"center"===u?M-(z+R/2)+q/2:"end"===u?M-L+B+q:a(z,L,R,H,B+q,M,M+E,E);var X=F.scrollLeft,Z=F.scrollTop;_+=Z-(U=Math.max(0,Math.min(Z+U/Q,F.scrollHeight-A/Q+G))),M+=X-($=Math.max(0,Math.min(X+$/K,F.scrollWidth-R/K+q)))}T.push({el:F,top:U,left:$})}return T};function u(e){return e===Object(e)&&0!==Object.keys(e).length}t.default=function(e,t){var n=e.isConnected||e.ownerDocument.documentElement.contains(e);if(u(t)&&"function"==typeof t.behavior)return t.behavior(n?c(e,t):[]);if(n){var r=function(e){return!1===e?{block:"end",inline:"nearest"}:u(e)?e:{block:"start",inline:"nearest"}}(t);return function(e,t){void 0===t&&(t="auto");var n="scrollBehavior"in document.body.style;e.forEach((function(e){var r=e.el,o=e.top,i=e.left;r.scroll&&n?r.scroll({top:o,left:i,behavior:t}):(r.scrollTop=o,r.scrollLeft=i)}))}(c(e,r),r.behavior)}}},,function(e,t,n){"use strict";(function(e){function r(){return(r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,t){return(i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,n){return(c=a()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&i(o,n.prototype),o}).apply(null,arguments)}function u(e){var t="function"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return c(e,arguments,o(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),i(r,e)})(e)}n.d(t,"a",(function(){return M}));var s=/%[sdj%]/g,l=function(){};function f(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var n=e.field;t[n]=t[n]||[],t[n].push(e)})),t}function d(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i=n.length;if("function"==typeof e)return e.apply(null,n);if("string"==typeof e){var a=e.replace(s,(function(e){if("%%"===e)return"%";if(o>=i)return e;switch(e){case"%s":return String(n[o++]);case"%d":return Number(n[o++]);case"%j":try{return JSON.stringify(n[o++])}catch(e){return"[Circular]"}break;default:return e}}));return a}return e}function p(e,t){return null==e||(!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e))}function h(e,t,n){var r=0,o=e.length;!function i(a){if(a&&a.length)n(a);else{var c=r;r+=1,c<o?t(e[c],i):n([])}}([])}void 0!==e&&e.env;var m=function(e){var t,n;function r(t,n){var r;return(r=e.call(this,"Async Validation Error")||this).errors=t,r.fields=n,r}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,i(t,n),r}(u(Error));function v(e,t,n,r,o){if(t.first){var i=new Promise((function(t,i){h(function(e){var t=[];return Object.keys(e).forEach((function(n){t.push.apply(t,e[n]||[])})),t}(e),n,(function(e){return r(e),e.length?i(new m(e,f(e))):t(o)}))}));return i.catch((function(e){return e})),i}var a=!0===t.firstFields?Object.keys(e):t.firstFields||[],c=Object.keys(e),u=c.length,s=0,l=[],d=new Promise((function(t,i){var d=function(e){if(l.push.apply(l,e),++s===u)return r(l),l.length?i(new m(l,f(l))):t(o)};c.length||(r(l),t(o)),c.forEach((function(t){var r=e[t];-1!==a.indexOf(t)?h(r,n,d):function(e,t,n){var r=[],o=0,i=e.length;function a(e){r.push.apply(r,e||[]),++o===i&&n(r)}e.forEach((function(e){t(e,a)}))}(r,n,d)}))}));return d.catch((function(e){return e})),d}function g(e,t){return function(n){var r,o;return r=e.fullFields?function(e,t){for(var n=e,r=0;r<t.length;r++){if(null==n)return n;n=n[t[r]]}return n}(t,e.fullFields):t[n.field||e.fullField],(o=n)&&void 0!==o.message?(n.field=n.field||e.fullField,n.fieldValue=r,n):{message:"function"==typeof n?n():n,fieldValue:r,field:n.field||e.fullField}}}function b(e,t){if(t)for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];"object"==typeof o&&"object"==typeof e[n]?e[n]=r({},e[n],o):e[n]=o}return e}var y,w=function(e,t,n,r,o,i){!e.required||n.hasOwnProperty(e.field)&&!p(t,i||e.type)||r.push(d(o.messages.required,e.fullField))},O=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,x=/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,E={integer:function(e){return E.number(e)&&parseInt(e,10)===e},float:function(e){return E.number(e)&&!E.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!E.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&e.length<=320&&!!e.match(O)},url:function(e){return"string"==typeof e&&e.length<=2048&&!!e.match(function(){if(y)return y;var e=function(e){return e&&e.includeBoundaries?"(?:(?<=\\s|^)(?=[a-fA-F\\d:])|(?<=[a-fA-F\\d:])(?=\\s|$))":""},t="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",n="[a-fA-F\\d]{1,4}",r=("\n(?:\n(?:"+n+":){7}(?:"+n+"|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:"+n+":){6}(?:"+t+"|:"+n+"|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:"+n+":){5}(?::"+t+"|(?::"+n+"){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:"+n+":){4}(?:(?::"+n+"){0,1}:"+t+"|(?::"+n+"){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:"+n+":){3}(?:(?::"+n+"){0,2}:"+t+"|(?::"+n+"){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:"+n+":){2}(?:(?::"+n+"){0,3}:"+t+"|(?::"+n+"){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:"+n+":){1}(?:(?::"+n+"){0,4}:"+t+"|(?::"+n+"){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::"+n+"){0,5}:"+t+"|(?::"+n+"){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),o=new RegExp("(?:^"+t+"$)|(?:^"+r+"$)"),i=new RegExp("^"+t+"$"),a=new RegExp("^"+r+"$"),c=function(n){return n&&n.exact?o:new RegExp("(?:"+e(n)+t+e(n)+")|(?:"+e(n)+r+e(n)+")","g")};c.v4=function(n){return n&&n.exact?i:new RegExp(""+e(n)+t+e(n),"g")},c.v6=function(t){return t&&t.exact?a:new RegExp(""+e(t)+r+e(t),"g")};var u=c.v4().source,s=c.v6().source;return y=new RegExp("(?:^"+("(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|"+u+"|"+s+'|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?')+"$)","i")}())},hex:function(e){return"string"==typeof e&&!!e.match(x)}},j={required:w,whitespace:function(e,t,n,r,o){(/^\s+$/.test(t)||""===t)&&r.push(d(o.messages.whitespace,e.fullField))},type:function(e,t,n,r,o){if(e.required&&void 0===t)w(e,t,n,r,o);else{var i=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(i)>-1?E[i](t)||r.push(d(o.messages.types[i],e.fullField,e.type)):i&&typeof t!==e.type&&r.push(d(o.messages.types[i],e.fullField,e.type))}},range:function(e,t,n,r,o){var i="number"==typeof e.len,a="number"==typeof e.min,c="number"==typeof e.max,u=t,s=null,l="number"==typeof t,f="string"==typeof t,p=Array.isArray(t);if(l?s="number":f?s="string":p&&(s="array"),!s)return!1;p&&(u=t.length),f&&(u=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),i?u!==e.len&&r.push(d(o.messages[s].len,e.fullField,e.len)):a&&!c&&u<e.min?r.push(d(o.messages[s].min,e.fullField,e.min)):c&&!a&&u>e.max?r.push(d(o.messages[s].max,e.fullField,e.max)):a&&c&&(u<e.min||u>e.max)&&r.push(d(o.messages[s].range,e.fullField,e.min,e.max))},enum:function(e,t,n,r,o){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&r.push(d(o.messages.enum,e.fullField,e.enum.join(", ")))},pattern:function(e,t,n,r,o){if(e.pattern)if(e.pattern instanceof RegExp)e.pattern.lastIndex=0,e.pattern.test(t)||r.push(d(o.messages.pattern.mismatch,e.fullField,t,e.pattern));else if("string"==typeof e.pattern){new RegExp(e.pattern).test(t)||r.push(d(o.messages.pattern.mismatch,e.fullField,t,e.pattern))}}},k=function(e,t,n,r,o){var i=e.type,a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t,i)&&!e.required)return n();j.required(e,t,r,a,o,i),p(t,i)||j.type(e,t,r,a,o)}n(a)},C={string:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t,"string")&&!e.required)return n();j.required(e,t,r,i,o,"string"),p(t,"string")||(j.type(e,t,r,i,o),j.range(e,t,r,i,o),j.pattern(e,t,r,i,o),!0===e.whitespace&&j.whitespace(e,t,r,i,o))}n(i)},method:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&j.type(e,t,r,i,o)}n(i)},number:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(""===t&&(t=void 0),p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&(j.type(e,t,r,i,o),j.range(e,t,r,i,o))}n(i)},boolean:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&j.type(e,t,r,i,o)}n(i)},regexp:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),p(t)||j.type(e,t,r,i,o)}n(i)},integer:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&(j.type(e,t,r,i,o),j.range(e,t,r,i,o))}n(i)},float:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&(j.type(e,t,r,i,o),j.range(e,t,r,i,o))}n(i)},array:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(null==t&&!e.required)return n();j.required(e,t,r,i,o,"array"),null!=t&&(j.type(e,t,r,i,o),j.range(e,t,r,i,o))}n(i)},object:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&j.type(e,t,r,i,o)}n(i)},enum:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o),void 0!==t&&j.enum(e,t,r,i,o)}n(i)},pattern:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t,"string")&&!e.required)return n();j.required(e,t,r,i,o),p(t,"string")||j.pattern(e,t,r,i,o)}n(i)},date:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t,"date")&&!e.required)return n();var a;if(j.required(e,t,r,i,o),!p(t,"date"))a=t instanceof Date?t:new Date(t),j.type(e,a,r,i,o),a&&j.range(e,a.getTime(),r,i,o)}n(i)},url:k,hex:k,email:k,required:function(e,t,n,r,o){var i=[],a=Array.isArray(t)?"array":typeof t;j.required(e,t,r,i,o,a),n(i)},any:function(e,t,n,r,o){var i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(p(t)&&!e.required)return n();j.required(e,t,r,i,o)}n(i)}};function S(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var _=S(),M=function(){function e(e){this.rules=null,this._messages=_,this.define(e)}var t=e.prototype;return t.define=function(e){var t=this;if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");this.rules={},Object.keys(e).forEach((function(n){var r=e[n];t.rules[n]=Array.isArray(r)?r:[r]}))},t.messages=function(e){return e&&(this._messages=b(S(),e)),this._messages},t.validate=function(t,n,o){var i=this;void 0===n&&(n={}),void 0===o&&(o=function(){});var a=t,c=n,u=o;if("function"==typeof c&&(u=c,c={}),!this.rules||0===Object.keys(this.rules).length)return u&&u(null,a),Promise.resolve(a);if(c.messages){var s=this.messages();s===_&&(s=S()),b(s,c.messages),c.messages=s}else c.messages=this.messages();var l={};(c.keys||Object.keys(this.rules)).forEach((function(e){var n=i.rules[e],o=a[e];n.forEach((function(n){var c=n;"function"==typeof c.transform&&(a===t&&(a=r({},a)),o=a[e]=c.transform(o)),(c="function"==typeof c?{validator:c}:r({},c)).validator=i.getValidationMethod(c),c.validator&&(c.field=e,c.fullField=c.fullField||e,c.type=i.getType(c),l[e]=l[e]||[],l[e].push({rule:c,value:o,source:a,field:e}))}))}));var p={};return v(l,c,(function(t,n){var o,i=t.rule,u=!("object"!==i.type&&"array"!==i.type||"object"!=typeof i.fields&&"object"!=typeof i.defaultField);function s(e,t){return r({},t,{fullField:i.fullField+"."+e,fullFields:i.fullFields?[].concat(i.fullFields,[e]):[e]})}function l(o){void 0===o&&(o=[]);var l=Array.isArray(o)?o:[o];!c.suppressWarning&&l.length&&e.warning("async-validator:",l),l.length&&void 0!==i.message&&(l=[].concat(i.message));var f=l.map(g(i,a));if(c.first&&f.length)return p[i.field]=1,n(f);if(u){if(i.required&&!t.value)return void 0!==i.message?f=[].concat(i.message).map(g(i,a)):c.error&&(f=[c.error(i,d(c.messages.required,i.field))]),n(f);var h={};i.defaultField&&Object.keys(t.value).map((function(e){h[e]=i.defaultField})),h=r({},h,t.rule.fields);var m={};Object.keys(h).forEach((function(e){var t=h[e],n=Array.isArray(t)?t:[t];m[e]=n.map(s.bind(null,e))}));var v=new e(m);v.messages(c.messages),t.rule.options&&(t.rule.options.messages=c.messages,t.rule.options.error=c.error),v.validate(t.value,t.rule.options||c,(function(e){var t=[];f&&f.length&&t.push.apply(t,f),e&&e.length&&t.push.apply(t,e),n(t.length?t:null)}))}else n(f)}if(u=u&&(i.required||!i.required&&t.value),i.field=t.field,i.asyncValidator)o=i.asyncValidator(i,t.value,l,t.source,c);else if(i.validator){try{o=i.validator(i,t.value,l,t.source,c)}catch(e){null==console.error||console.error(e),c.suppressValidatorError||setTimeout((function(){throw e}),0),l(e.message)}!0===o?l():!1===o?l("function"==typeof i.message?i.message(i.fullField||i.field):i.message||(i.fullField||i.field)+" fails"):o instanceof Array?l(o):o instanceof Error&&l(o.message)}o&&o.then&&o.then((function(){return l()}),(function(e){return l(e)}))}),(function(e){!function(e){for(var t,n,r=[],o={},i=0;i<e.length;i++)t=e[i],n=void 0,Array.isArray(t)?r=(n=r).concat.apply(n,t):r.push(t);r.length?(o=f(r),u(r,o)):u(null,a)}(e)}),a)},t.getType=function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!C.hasOwnProperty(e.type))throw new Error(d("Unknown rule type %s",e.type));return e.type||"string"},t.getValidationMethod=function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),n=t.indexOf("message");return-1!==n&&t.splice(n,1),1===t.length&&"required"===t[0]?C.required:C[this.getType(e)]||void 0},e}();M.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");C[e]=t},M.warning=l,M.messages=_,M.validators=C}).call(this,n(234))},function(e,t,n){"use strict";var r=n(557),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function u(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var s=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=u(t),m=u(n),v=0;v<a.length;++v){var g=a[v];if(!(i[g]||r&&r[g]||m&&m[g]||c&&c[g])){var b=d(n,g);try{s(t,g,b)}catch(e){}}}}return t}},function(e,t,n){!function(e,t){"use strict";function n(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var r=n(t);function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var i={error:null},a=function(e){var t,n;function a(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state=i,t.resetErrorBoundary=function(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];null==t.props.onReset||(e=t.props).onReset.apply(e,r),t.reset()},t}n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,o(t,n),a.getDerivedStateFromError=function(e){return{error:e}};var c=a.prototype;return c.reset=function(){this.setState(i)},c.componentDidCatch=function(e,t){var n,r;null==(n=(r=this.props).onError)||n.call(r,e,t)},c.componentDidUpdate=function(e,t){var n,r,o,i,a=this.state.error,c=this.props.resetKeys;null!==a&&null!==t.error&&(void 0===(o=e.resetKeys)&&(o=[]),void 0===(i=c)&&(i=[]),o.length!==i.length||o.some((function(e,t){return!Object.is(e,i[t])})))&&(null==(n=(r=this.props).onResetKeysChange)||n.call(r,e.resetKeys,c),this.reset())},c.render=function(){var e=this.state.error,t=this.props,n=t.fallbackRender,o=t.FallbackComponent,i=t.fallback;if(null!==e){var a={error:e,resetErrorBoundary:this.resetErrorBoundary};if(r.isValidElement(i))return i;if("function"==typeof n)return n(a);if(o)return r.createElement(o,a);throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop")}return this.props.children},a}(r.Component);e.ErrorBoundary=a,e.useErrorHandler=function(e){var t=r.useState(null),n=t[0],o=t[1];if(null!=e)throw e;if(null!=n)throw n;return o},e.withErrorBoundary=function(e,t){var n=function(n){return r.createElement(a,t,r.createElement(e,n))},o=e.displayName||e.name||"Unknown";return n.displayName="withErrorBoundary("+o+")",n},Object.defineProperty(e,"__esModule",{value:!0})}(t,n(0))},function(e,t,n){"use strict";n.d(t,"c",(function(){return _})),n.d(t,"d",(function(){return P})),n.d(t,"a",(function(){return D}));var r,o=n(2),i=n(1),a=n(129),c=n(80),u=n(130),s=n(341),l=n(109),f=n(5),d=n.n(f),p=n(192),h=n(0),m=n(21),v=n(4),g=n(133),b=n(70);var y,w,O,x=3,E=1,j="",k="move-up",C=!1,S=!1;function _(){return E++}function M(e,t){var n=e.prefixCls,o=e.getPopupContainer,i=Object(m.b)(),a=i.getPrefixCls,c=i.getRootPrefixCls,u=i.getIconPrefixCls,s=a("message",n||j),l=c(e.rootPrefixCls,s),f=u();if(r)t({prefixCls:s,rootPrefixCls:l,iconPrefixCls:f,instance:r});else{var d={prefixCls:s,transitionName:C?k:"".concat(l,"-").concat(k),style:{top:y},getContainer:w||o,maxCount:O};p.default.newInstance(d,(function(e){r?t({prefixCls:s,rootPrefixCls:l,iconPrefixCls:f,instance:r}):(r=e,t({prefixCls:s,rootPrefixCls:l,iconPrefixCls:f,instance:e}))}))}}var T={info:s.a,success:a.a,error:c.a,warning:u.a,loading:l.a},P=Object.keys(T);function F(e,t,n){var r,o=void 0!==e.duration?e.duration:x,a=T[e.type],c=d()("".concat(t,"-custom-content"),(r={},Object(i.a)(r,"".concat(t,"-").concat(e.type),e.type),Object(i.a)(r,"".concat(t,"-rtl"),!0===S),r));return{key:e.key,duration:o,style:e.style||{},className:e.className,content:h.createElement(m.a,{iconPrefixCls:n},h.createElement("div",{className:c},e.icon||a&&h.createElement(a,null),h.createElement("span",null,e.content))),onClose:e.onClose,onClick:e.onClick}}var N,A,R={open:function(e){var t=e.key||_(),n=new Promise((function(n){var r=function(){return"function"==typeof e.onClose&&e.onClose(),n(!0)};M(e,(function(n){var i=n.prefixCls,a=n.iconPrefixCls;n.instance.notice(F(Object(o.a)(Object(o.a)({},e),{key:t,onClose:r}),i,a))}))})),i=function(){var n;r&&(r.removeNotice(t),null===(n=e.onClose)||void 0===n||n.call(e))};return i.then=function(e,t){return n.then(e,t)},i.promise=n,i},config:function(e){void 0!==e.top&&(y=e.top,r=null),void 0!==e.duration&&(x=e.duration),void 0!==e.prefixCls&&(j=e.prefixCls),void 0!==e.getContainer&&(w=e.getContainer,r=null),void 0!==e.transitionName&&(k=e.transitionName,r=null,C=!0),void 0!==e.maxCount&&(O=e.maxCount,r=null),void 0!==e.rtl&&(S=e.rtl)},destroy:function(e){if(r)if(e){(0,r.removeNotice)(e)}else{var t=r.destroy;t(),r=null}}};function D(e,t){e[t]=function(n,r,i){return function(e){return"[object Object]"===Object.prototype.toString.call(e)&&!!e.content}(n)?e.open(Object(o.a)(Object(o.a)({},n),{type:t})):("function"==typeof r&&(i=r,r=void 0),e.open({content:n,duration:r,type:t,onClose:i}))}}P.forEach((function(e){return D(R,e)})),R.warn=R.warning,R.useMessage=(N=M,A=F,function(){var e,t,n=null,r={add:function(e,t){null==n||n.component.add(e,t)}},i=Object(g.a)(r),a=Object(v.a)(i,2),c=a[0],u=a[1],s=h.useRef({});return s.current.open=function(r){var i=r.prefixCls,a=e("message",i),u=e(),s=r.key||_(),l=new Promise((function(e){var i=function(){return"function"==typeof r.onClose&&r.onClose(),e(!0)};N(Object(o.a)(Object(o.a)({},r),{prefixCls:a,rootPrefixCls:u,getPopupContainer:t}),(function(e){var t=e.prefixCls,a=e.instance;n=a,c(A(Object(o.a)(Object(o.a)({},r),{key:s,onClose:i}),t))}))})),f=function(){n&&n.removeNotice(s)};return f.then=function(e,t){return l.then(e,t)},f.promise=l,f},P.forEach((function(e){return D(s.current,e)})),[s.current,h.createElement(b.a,{key:"holder"},(function(n){return e=n.getPrefixCls,t=n.getPopupContainer,u}))]});t.b=R},function(e,t,n){"use strict";var r=n(6),o=n(141).map;r({target:"Array",proto:!0,forced:!n(177)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},,function(e,t,n){"use strict";var r=n(6),o=n(528);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},function(e,t,n){var r=n(359),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){var r=n(216),o=n(504),i=n(505),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?o(e):i(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},,function(e,t,n){"use strict";var r=n(66),o=n(222),i=n(101),a=function(e){return function(t,n,a){var c,u=r(t),s=i(u),l=o(a,s);if(e&&n!=n){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t,n){},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(102))},function(e,t,n){var r=n(352),o=n(353);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},function(e,t,n){"use strict";var r=n(6),o=n(141).find,i=n(253),a=!0;"find"in[]&&Array(1).find((function(){a=!1})),r({target:"Array",proto:!0,forced:a},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(e,t,n){"use strict";var r=n(179),o=n(15),i=n(11),a=n(240),c=n(13),u=n(29),s=n(18),l=n(67),f=n(144),d=n(173),p=n(49),h=n(89),m=n(241),v=n(122),g=n(547),b=n(242),y=n(19)("replace"),w=Math.max,O=Math.min,x=i([].concat),E=i([].push),j=i("".indexOf),k=i("".slice),C="$0"==="a".replace(/./,"$0"),S=!!/./[y]&&""===/./[y]("a","$0");a("replace",(function(e,t,n){var i=S?"$":"$0";return[function(e,n){var r=h(this),i=l(e)?void 0:v(e,y);return i?o(i,e,r,n):o(t,p(r),e,n)},function(e,o){var a=u(this),c=p(e);if("string"==typeof o&&-1===j(o,i)&&-1===j(o,"$<")){var l=n(t,a,c,o);if(l.done)return l.value}var h=s(o);h||(o=p(o));var v,y=a.global;y&&(v=a.unicode,a.lastIndex=0);for(var C,S=[];null!==(C=b(a,c))&&(E(S,C),y);){""===p(C[0])&&(a.lastIndex=m(c,d(a.lastIndex),v))}for(var _,M="",T=0,P=0;P<S.length;P++){for(var F,N=p((C=S[P])[0]),A=w(O(f(C.index),c.length),0),R=[],D=1;D<C.length;D++)E(R,void 0===(_=C[D])?_:String(_));var L=C.groups;if(h){var I=x([N],R,A,c);void 0!==L&&E(I,L),F=p(r(o,void 0,I))}else F=g(N,c,A,R,L,o);A>=T&&(M+=k(c,T,A)+F,T=A+N.length)}return M+k(c,T)}]}),!!c((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!C||S)},,function(e,t,n){"use strict";n(270),n(417),n(449),n(483).polyfill()},function(e,t,n){"use strict";var r=n(271),o=[ReferenceError,TypeError,RangeError],i=!1;function a(){i=!1,r._B=null,r._C=null}function c(e,t){return t.some((function(t){return e instanceof t}))}t.disable=a,t.enable=function(e){e=e||{},i&&a();i=!0;var t=0,n=0,u={};function s(t){(e.allRejections||c(u[t].error,e.whitelist||o))&&(u[t].displayId=n++,e.onUnhandled?(u[t].logged=!0,e.onUnhandled(u[t].displayId,u[t].error)):(u[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\n").forEach((function(e){console.warn("  "+e)}))}(u[t].displayId,u[t].error)))}r._B=function(t){2===t._y&&u[t._E]&&(u[t._E].logged?function(t){u[t].logged&&(e.onHandled?e.onHandled(u[t].displayId,u[t].error):u[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+u[t].displayId+"):"),console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id '+u[t].displayId+".")))}(t._E):clearTimeout(u[t._E].timeout),delete u[t._E])},r._C=function(e,n){0===e._x&&(e._E=t++,u[e._E]={displayId:null,error:n,timeout:setTimeout(s.bind(null,e._E),c(n,o)?100:2e3),logged:!1})}}},function(e,t,n){"use strict";(function(t){function n(e){o.length||(r(),!0),o[o.length]=e}e.exports=n;var r,o=[],i=0;function a(){for(;i<o.length;){var e=i;if(i+=1,o[e].call(),i>1024){for(var t=0,n=o.length-i;t<n;t++)o[t]=o[t+i];o.length-=i,i=0}}o.length=0,i=0,!1}var c,u,s,l=void 0!==t?t:self,f=l.MutationObserver||l.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"==typeof f?(c=1,u=new f(a),s=document.createTextNode(""),u.observe(s,{characterData:!0}),r=function(){c=-c,s.data=c}):r=d(a),n.requestFlush=r,n.makeRequestCallFromTimer=d}).call(this,n(102))},function(e,t,n){"use strict";var r=n(271);e.exports=r;var o=l(!0),i=l(!1),a=l(null),c=l(void 0),u=l(0),s=l("");function l(e){var t=new r(r._D);return t._y=1,t._z=e,t}r.resolve=function(e){if(e instanceof r)return e;if(null===e)return a;if(void 0===e)return c;if(!0===e)return o;if(!1===e)return i;if(0===e)return u;if(""===e)return s;if("object"==typeof e||"function"==typeof e)try{var t=e.then;if("function"==typeof t)return new r(t.bind(e))}catch(e){return new r((function(t,n){n(e)}))}return l(e)};var f=function(e){return"function"==typeof Array.from?(f=Array.from,Array.from(e)):(f=function(e){return Array.prototype.slice.call(e)},Array.prototype.slice.call(e))};function d(e){return{status:"fulfilled",value:e}}function p(e){return{status:"rejected",reason:e}}function h(e){if(e&&("object"==typeof e||"function"==typeof e)){if(e instanceof r&&e.then===r.prototype.then)return e.then(d,p);var t=e.then;if("function"==typeof t)return new r(t.bind(e)).then(d,p)}return d(e)}function m(e){if("function"==typeof AggregateError)return new AggregateError(e,"All promises were rejected");var t=new Error("All promises were rejected");return t.name="AggregateError",t.errors=e,t}r.all=function(e){var t=f(e);return new r((function(e,n){if(0===t.length)return e([]);var o=t.length;function i(a,c){if(c&&("object"==typeof c||"function"==typeof c)){if(c instanceof r&&c.then===r.prototype.then){for(;3===c._y;)c=c._z;return 1===c._y?i(a,c._z):(2===c._y&&n(c._z),void c.then((function(e){i(a,e)}),n))}var u=c.then;if("function"==typeof u)return void new r(u.bind(c)).then((function(e){i(a,e)}),n)}t[a]=c,0==--o&&e(t)}for(var a=0;a<t.length;a++)i(a,t[a])}))},r.allSettled=function(e){return r.all(f(e).map(h))},r.reject=function(e){return new r((function(t,n){n(e)}))},r.race=function(e){return new r((function(t,n){f(e).forEach((function(e){r.resolve(e).then(t,n)}))}))},r.prototype.catch=function(e){return this.then(null,e)},r.any=function(e){return new r((function(t,n){var o=f(e),i=!1,a=[];function c(e){i||(i=!0,t(e))}function u(e){a.push(e),a.length===o.length&&n(m(a))}0===o.length?n(m(a)):o.forEach((function(e){r.resolve(e).then(c,u)}))}))}},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"Headers",(function(){return h})),n.d(t,"Request",(function(){return O})),n.d(t,"Response",(function(){return E})),n.d(t,"DOMException",(function(){return k})),n.d(t,"fetch",(function(){return C}));var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==e&&e||{},o="URLSearchParams"in r,i="Symbol"in r&&"iterator"in Symbol,a="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(e){return!1}}(),c="FormData"in r,u="ArrayBuffer"in r;if(u)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(e){return e&&s.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError('Invalid character in header field name: "'+e+'"');return e.toLowerCase()}function d(e){return"string"!=typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return i&&(t[Symbol.iterator]=function(){return t}),t}function h(e){this.map={},e instanceof h?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){if(2!=e.length)throw new TypeError("Headers constructor: expected name/value pair to be length 2, found"+e.length);this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function m(e){if(!e._noBody)return e.bodyUsed?Promise.reject(new TypeError("Already read")):void(e.bodyUsed=!0)}function v(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function g(e){var t=new FileReader,n=v(t);return t.readAsArrayBuffer(e),n}function b(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:a&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:c&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&a&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=b(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||l(e))?this._bodyArrayBuffer=b(e):this._bodyText=e=Object.prototype.toString.call(e):(this._noBody=!0,this._bodyText=""),this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},a&&(this.blob=function(){var e=m(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))}),this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=m(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}if(a)return this.blob().then(g);throw new Error("could not read as ArrayBuffer")},this.text=function(){var e,t,n,r,o,i=m(this);if(i)return i;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=v(t),r=/charset=([A-Za-z0-9_-]+)/.exec(e.type),o=r?r[1]:"utf-8",t.readAsText(e,o),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},c&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(e,t){e=f(e),t=d(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},h.prototype.delete=function(e){delete this.map[f(e)]},h.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},h.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},h.prototype.set=function(e,t){this.map[f(e)]=d(t)},h.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},h.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),p(e)},h.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},h.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),p(e)},i&&(h.prototype[Symbol.iterator]=h.prototype.entries);var w=["CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE"];function O(e,t){if(!(this instanceof O))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var n,o,i=(t=t||{}).body;if(e instanceof O){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new h(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,i||null==e._bodyInit||(i=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new h(t.headers)),this.method=(n=t.method||this.method||"GET",o=n.toUpperCase(),w.indexOf(o)>-1?o:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal||function(){if("AbortController"in r)return(new AbortController).signal}(),this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(i),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==t.cache&&"no-cache"!==t.cache)){var a=/([?&])_=[^&]*/;if(a.test(this.url))this.url=this.url.replace(a,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function x(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function E(e,t){if(!(this instanceof E))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');if(t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.status<200||this.status>599)throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");this.ok=this.status>=200&&this.status<300,this.statusText=void 0===t.statusText?"":""+t.statusText,this.headers=new h(t.headers),this.url=t.url||"",this._initBody(e)}O.prototype.clone=function(){return new O(this,{body:this._bodyInit})},y.call(O.prototype),y.call(E.prototype),E.prototype.clone=function(){return new E(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},E.error=function(){var e=new E(null,{status:200,statusText:""});return e.status=0,e.type="error",e};var j=[301,302,303,307,308];E.redirect=function(e,t){if(-1===j.indexOf(t))throw new RangeError("Invalid status code");return new E(null,{status:t,headers:{location:e}})};var k=r.DOMException;try{new k}catch(e){(k=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),k.prototype.constructor=k}function C(e,t){return new Promise((function(n,o){var i=new O(e,t);if(i.signal&&i.signal.aborted)return o(new k("Aborted","AbortError"));var c=new XMLHttpRequest;function s(){c.abort()}if(c.onload=function(){var e,t,r={status:c.status,statusText:c.statusText,headers:(e=c.getAllResponseHeaders()||"",t=new h,e.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(e){return 0===e.indexOf("\n")?e.substr(1,e.length):e})).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();try{t.append(r,o)}catch(e){console.warn("Response "+e.message)}}})),t)};r.url="responseURL"in c?c.responseURL:r.headers.get("X-Request-URL");var o="response"in c?c.response:c.responseText;setTimeout((function(){n(new E(o,r))}),0)},c.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},c.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},c.onabort=function(){setTimeout((function(){o(new k("Aborted","AbortError"))}),0)},c.open(i.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(t){return e}}(i.url),!0),"include"===i.credentials?c.withCredentials=!0:"omit"===i.credentials&&(c.withCredentials=!1),"responseType"in c&&(a?c.responseType="blob":u&&(c.responseType="arraybuffer")),t&&"object"==typeof t.headers&&!(t.headers instanceof h||r.Headers&&t.headers instanceof r.Headers)){var l=[];Object.getOwnPropertyNames(t.headers).forEach((function(e){l.push(f(e)),c.setRequestHeader(e,d(t.headers[e]))})),i.headers.forEach((function(e,t){-1===l.indexOf(t)&&c.setRequestHeader(t,e)}))}else i.headers.forEach((function(e,t){c.setRequestHeader(t,e)}));i.signal&&(i.signal.addEventListener("abort",s),c.onreadystatechange=function(){4===c.readyState&&i.signal.removeEventListener("abort",s)}),c.send(void 0===i._bodyInit?null:i._bodyInit)}))}C.polyfill=!0,r.fetch||(r.fetch=C,r.Headers=h,r.Request=O,r.Response=E)}.call(this,n(102))},function(e,t,n){"use strict";e.exports=n(370)},function(e,t,n){"use strict";var r=n(371);n(401),n(402),n(403),n(404),n(405),n(406),n(407),n(408),n(409),e.exports=r},function(e,t,n){"use strict";var r=n(372);n(397),n(398),n(399),n(400),e.exports=r},function(e,t,n){"use strict";var r=n(373);n(73),e.exports=r},function(e,t,n){"use strict";n(215),n(72),n(97),n(181),n(98),n(385),n(386),n(99),n(387),n(388),n(389),n(390),n(391),n(392),n(160),n(182),n(393),n(183),n(184),n(394);var r=n(125);e.exports=r.Symbol},function(e,t,n){"use strict";var r=n(17),o=n(18),i=r.WeakMap;e.exports=o(i)&&/native code/.test(String(i))},function(e,t,n){"use strict";var r=Math.ceil,o=Math.floor;e.exports=Math.trunc||function(e){var t=+e;return(t>0?o:r)(t)}},function(e,t,n){"use strict";var r=TypeError;e.exports=function(e){if(e>9007199254740991)throw r("Maximum allowed index exceeded");return e}},function(e,t,n){"use strict";var r=n(175),o=n(176),i=n(40),a=n(19)("species"),c=Array;e.exports=function(e){var t;return r(e)&&(t=e.constructor,(o(t)&&(t===c||r(t.prototype))||i(t)&&null===(t=t[a]))&&(t=void 0)),void 0===t?c:t}},function(e,t,n){"use strict";var r=n(224),o=n(147);e.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(e,t,n){"use strict";var r=n(6),o=n(17),i=n(15),a=n(11),c=n(60),u=n(36),s=n(121),l=n(13),f=n(28),d=n(91),p=n(29),h=n(66),m=n(168),v=n(49),g=n(142),b=n(124),y=n(178),w=n(123),O=n(285),x=n(174),E=n(83),j=n(41),k=n(283),C=n(218),S=n(46),_=n(148),M=n(103),T=n(172),P=n(143),F=n(169),N=n(19),A=n(286),R=n(26),D=n(287),L=n(84),I=n(92),z=n(141).forEach,V=T("hidden"),H=I.set,W=I.getterFor("Symbol"),B=Object.prototype,Y=o.Symbol,U=Y&&Y.prototype,$=o.TypeError,q=o.QObject,G=E.f,K=j.f,Q=O.f,X=C.f,Z=a([].push),J=M("symbols"),ee=M("op-symbols"),te=M("wks"),ne=!q||!q.prototype||!q.prototype.findChild,re=u&&l((function(){return 7!==b(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=G(B,t);r&&delete B[t],K(e,t,n),r&&e!==B&&K(B,t,r)}:K,oe=function(e,t){var n=J[e]=b(U);return H(n,{type:"Symbol",tag:e,description:t}),u||(n.description=t),n},ie=function(e,t,n){e===B&&ie(ee,t,n),p(e);var r=m(t);return p(n),f(J,r)?(n.enumerable?(f(e,V)&&e[V][r]&&(e[V][r]=!1),n=b(n,{enumerable:g(0,!1)})):(f(e,V)||K(e,V,g(1,{})),e[V][r]=!0),re(e,r,n)):K(e,r,n)},ae=function(e,t){p(e);var n=h(t),r=y(n).concat(le(n));return z(r,(function(t){u&&!i(ce,n,t)||ie(e,t,n[t])})),e},ce=function(e){var t=m(e),n=i(X,this,t);return!(this===B&&f(J,t)&&!f(ee,t))&&(!(n||!f(this,t)||!f(J,t)||f(this,V)&&this[V][t])||n)},ue=function(e,t){var n=h(e),r=m(t);if(n!==B||!f(J,r)||f(ee,r)){var o=G(n,r);return!o||!f(J,r)||f(n,V)&&n[V][r]||(o.enumerable=!0),o}},se=function(e){var t=Q(h(e)),n=[];return z(t,(function(e){f(J,e)||f(P,e)||Z(n,e)})),n},le=function(e){var t=e===B,n=Q(t?ee:h(e)),r=[];return z(n,(function(e){!f(J,e)||t&&!f(B,e)||Z(r,J[e])})),r};s||(S(U=(Y=function(){if(d(U,this))throw $("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?v(arguments[0]):void 0,t=F(e),n=function(e){this===B&&i(n,ee,e),f(this,V)&&f(this[V],t)&&(this[V][t]=!1),re(this,t,g(1,e))};return u&&ne&&re(B,t,{configurable:!0,set:n}),oe(t,e)}).prototype,"toString",(function(){return W(this).tag})),S(Y,"withoutSetter",(function(e){return oe(F(e),e)})),C.f=ce,j.f=ie,k.f=ae,E.f=ue,w.f=O.f=se,x.f=le,A.f=function(e){return oe(N(e),e)},u&&(_(U,"description",{configurable:!0,get:function(){return W(this).description}}),c||S(B,"propertyIsEnumerable",ce,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!s,sham:!s},{Symbol:Y}),z(y(te),(function(e){R(e)})),r({target:"Symbol",stat:!0,forced:!s},{useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!u},{create:function(e,t){return void 0===t?b(e):ae(b(e),t)},defineProperty:ie,defineProperties:ae,getOwnPropertyDescriptor:ue}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:se}),D(),L(Y,"Symbol"),P[V]=!0},function(e,t,n){"use strict";var r=n(6),o=n(44),i=n(28),a=n(49),c=n(103),u=n(289),s=c("string-to-symbol-registry"),l=c("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!u},{for:function(e){var t=a(e);if(i(s,t))return s[t];var n=o("Symbol")(t);return s[t]=n,l[n]=t,n}})},function(e,t,n){"use strict";var r=n(6),o=n(28),i=n(120),a=n(140),c=n(103),u=n(289),s=c("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!u},{keyFor:function(e){if(!i(e))throw TypeError(a(e)+" is not a symbol");if(o(s,e))return s[e]}})},function(e,t,n){"use strict";var r=n(6),o=n(44),i=n(179),a=n(15),c=n(11),u=n(13),s=n(18),l=n(120),f=n(180),d=n(383),p=n(121),h=String,m=o("JSON","stringify"),v=c(/./.exec),g=c("".charAt),b=c("".charCodeAt),y=c("".replace),w=c(1..toString),O=/[\uD800-\uDFFF]/g,x=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,j=!p||u((function(){var e=o("Symbol")("stringify detection");return"[null]"!==m([e])||"{}"!==m({a:e})||"{}"!==m(Object(e))})),k=u((function(){return'"\\udf06\\ud834"'!==m("\udf06\ud834")||'"\\udead"'!==m("\udead")})),C=function(e,t){var n=f(arguments),r=d(t);if(s(r)||void 0!==e&&!l(e))return n[1]=function(e,t){if(s(r)&&(t=a(r,this,h(e),t)),!l(t))return t},i(m,null,n)},S=function(e,t,n){var r=g(n,t-1),o=g(n,t+1);return v(x,e)&&!v(E,o)||v(E,e)&&!v(x,r)?"\\u"+w(b(e,0),16):e};m&&r({target:"JSON",stat:!0,arity:3,forced:j||k},{stringify:function(e,t,n){var r=f(arguments),o=i(j?C:m,null,r);return k&&"string"==typeof o?y(o,O,S):o}})},function(e,t,n){"use strict";var r=n(11),o=n(175),i=n(18),a=n(78),c=n(49),u=r([].push);e.exports=function(e){if(i(e))return e;if(o(e)){for(var t=e.length,n=[],r=0;r<t;r++){var s=e[r];"string"==typeof s?u(n,s):"number"!=typeof s&&"Number"!==a(s)&&"String"!==a(s)||u(n,c(s))}var l=n.length,f=!0;return function(e,t){if(f)return f=!1,t;if(o(this))return t;for(var r=0;r<l;r++)if(n[r]===e)return t}}}},function(e,t,n){"use strict";var r=n(6),o=n(121),i=n(13),a=n(174),c=n(77);r({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(e){var t=a.f;return t?t(c(e)):[]}})},function(e,t,n){"use strict";n(26)("hasInstance")},function(e,t,n){"use strict";n(26)("isConcatSpreadable")},function(e,t,n){"use strict";n(26)("match")},function(e,t,n){"use strict";n(26)("matchAll")},function(e,t,n){"use strict";n(26)("replace")},function(e,t,n){"use strict";n(26)("search")},function(e,t,n){"use strict";n(26)("species")},function(e,t,n){"use strict";n(26)("split")},function(e,t,n){"use strict";n(26)("unscopables")},function(e,t,n){"use strict";var r=n(6),o=n(17),i=n(84);r({global:!0},{Reflect:{}}),i(o.Reflect,"Reflect",!0)},function(e,t,n){"use strict";var r=n(292).IteratorPrototype,o=n(124),i=n(142),a=n(84),c=n(126),u=function(){return this};e.exports=function(e,t,n,s){var l=t+" Iterator";return e.prototype=o(r,{next:i(+!s,n)}),a(e,l,!1,!0),c[l]=u,e}},function(e,t,n){"use strict";var r=n(18),o=String,i=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw i("Can't set "+o(e)+" as a prototype")}},function(e,t,n){"use strict";var r=n(19),o=n(41).f,i=r("metadata"),a=Function.prototype;void 0===a[i]&&o(a,i,{value:null})},function(e,t,n){"use strict";var r=n(17),o=n(26),i=n(41).f,a=n(83).f,c=r.Symbol;if(o("asyncDispose"),c){var u=a(c,"asyncDispose");u.enumerable&&u.configurable&&u.writable&&i(c,"asyncDispose",{value:u.value,enumerable:!1,configurable:!1,writable:!1})}},function(e,t,n){"use strict";var r=n(17),o=n(26),i=n(41).f,a=n(83).f,c=r.Symbol;if(o("dispose"),c){var u=a(c,"dispose");u.enumerable&&u.configurable&&u.writable&&i(c,"dispose",{value:u.value,enumerable:!1,configurable:!1,writable:!1})}},function(e,t,n){"use strict";n(26)("metadata")},function(e,t,n){"use strict";n(6)({target:"Symbol",stat:!0},{isRegisteredSymbol:n(295)})},function(e,t,n){"use strict";n(6)({target:"Symbol",stat:!0,forced:!0},{isWellKnownSymbol:n(296)})},function(e,t,n){"use strict";n(26)("matcher")},function(e,t,n){"use strict";n(26)("observable")},function(e,t,n){"use strict";n(6)({target:"Symbol",stat:!0,name:"isRegisteredSymbol"},{isRegistered:n(295)})},function(e,t,n){"use strict";n(6)({target:"Symbol",stat:!0,name:"isWellKnownSymbol",forced:!0},{isWellKnown:n(296)})},function(e,t,n){"use strict";n(26)("metadataKey")},function(e,t,n){"use strict";n(26)("patternMatch")},function(e,t,n){"use strict";n(26)("replaceAll")},function(e,t,n){"use strict";e.exports=n(411)},function(e,t,n){"use strict";var r=n(412);e.exports=r},function(e,t,n){"use strict";var r=n(413);e.exports=r},function(e,t,n){"use strict";var r=n(414);e.exports=r},function(e,t,n){"use strict";n(75),n(246);var r=n(125);e.exports=r.Array.from},function(e,t,n){"use strict";var r=n(37),o=n(15),i=n(77),a=n(416),c=n(298),u=n(176),s=n(101),l=n(146),f=n(299),d=n(228),p=Array;e.exports=function(e){var t=i(e),n=u(this),h=arguments.length,m=h>1?arguments[1]:void 0,v=void 0!==m;v&&(m=r(m,h>2?arguments[2]:void 0));var g,b,y,w,O,x,E=d(t),j=0;if(!E||this===p&&c(E))for(g=s(t),b=n?new this(g):p(g);g>j;j++)x=v?m(t[j],j):t[j],l(b,j,x);else for(O=(w=f(t,E)).next,b=n?new this:[];!(y=o(O,w)).done;j++)x=v?a(w,m,[y.value,j],!0):y.value,l(b,j,x);return b.length=j,b}},function(e,t,n){"use strict";var r=n(29),o=n(186);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){o(e,"throw",t)}}},function(e,t,n){"use strict";e.exports=n(418)},function(e,t,n){"use strict";var r=n(419);n(429),n(430),n(431),n(432),n(433),n(434),n(435),n(436),n(437),n(439),n(440),n(441),n(442),n(443),n(444),n(445),n(446),n(447),n(448),e.exports=r},function(e,t,n){"use strict";var r=n(420);n(428),e.exports=r},function(e,t,n){"use strict";var r=n(421);n(73),e.exports=r},function(e,t,n){"use strict";n(74),n(422),n(72),n(75);var r=n(125);e.exports=r.Map},function(e,t,n){"use strict";n(423)},function(e,t,n){"use strict";n(300)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(302))},function(e,t,n){"use strict";var r=n(13),o=n(40),i=n(78),a=n(425),c=Object.isExtensible,u=r((function(){c(1)}));e.exports=u||a?function(e){return!!o(e)&&((!a||"ArrayBuffer"!==i(e))&&(!c||c(e)))}:c},function(e,t,n){"use strict";var r=n(13);e.exports=r((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},function(e,t,n){"use strict";var r=n(13);e.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,n){"use strict";var r=n(46);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){"use strict";var r=n(6),o=n(11),i=n(43),a=n(89),c=n(93),u=n(68),s=n(60),l=u.Map,f=u.has,d=u.get,p=u.set,h=o([].push);r({target:"Map",stat:!0,forced:s},{groupBy:function(e,t){a(e),i(t);var n=new l,r=0;return c(e,(function(e){var o=t(e,r++);f(n,o)?h(d(n,o),e):p(n,o,[e])})),n}})},function(e,t,n){"use strict";n(6)({target:"Map",stat:!0,forced:!0},{from:n(303)})},function(e,t,n){"use strict";n(6)({target:"Map",stat:!0,forced:!0},{of:n(305)})},function(e,t,n){"use strict";var r=n(6),o=n(50),i=n(68).remove;r({target:"Map",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var e,t=o(this),n=!0,r=0,a=arguments.length;r<a;r++)e=i(t,arguments[r]),n=n&&e;return!!n}})},function(e,t,n){"use strict";var r=n(6),o=n(50),i=n(68),a=i.get,c=i.has,u=i.set;r({target:"Map",proto:!0,real:!0,forced:!0},{emplace:function(e,t){var n,r,i=o(this);return c(i,e)?(n=a(i,e),"update"in t&&(n=t.update(n,e,i),u(i,e,n)),n):(r=t.insert(e,i),u(i,e,r),r)}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(79);r({target:"Map",proto:!0,real:!0,forced:!0},{every:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0);return!1!==a(t,(function(e,r){if(!n(e,r,t))return!1}),!0)}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(68),c=n(79),u=a.Map,s=a.set;r({target:"Map",proto:!0,real:!0,forced:!0},{filter:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=new u;return c(t,(function(e,o){n(e,o,t)&&s(r,o,e)})),r}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(79);r({target:"Map",proto:!0,real:!0,forced:!0},{find:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=a(t,(function(e,r){if(n(e,r,t))return{value:e}}),!0);return r&&r.value}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(79);r({target:"Map",proto:!0,real:!0,forced:!0},{findKey:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=a(t,(function(e,r){if(n(e,r,t))return{key:r}}),!0);return r&&r.key}})},function(e,t,n){"use strict";var r=n(6),o=n(438),i=n(50),a=n(79);r({target:"Map",proto:!0,real:!0,forced:!0},{includes:function(e){return!0===a(i(this),(function(t){if(o(t,e))return!0}),!0)}})},function(e,t,n){"use strict";e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(93),a=n(18),c=n(43),u=n(68).Map;r({target:"Map",stat:!0,forced:!0},{keyBy:function(e,t){var n=new(a(this)?this:u);c(t);var r=c(n.set);return i(e,(function(e){o(r,n,t(e),e)})),n}})},function(e,t,n){"use strict";var r=n(6),o=n(50),i=n(79);r({target:"Map",proto:!0,real:!0,forced:!0},{keyOf:function(e){var t=i(o(this),(function(t,n){if(t===e)return{key:n}}),!0);return t&&t.key}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(68),c=n(79),u=a.Map,s=a.set;r({target:"Map",proto:!0,real:!0,forced:!0},{mapKeys:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=new u;return c(t,(function(e,o){s(r,n(e,o,t),e)})),r}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(68),c=n(79),u=a.Map,s=a.set;r({target:"Map",proto:!0,real:!0,forced:!0},{mapValues:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=new u;return c(t,(function(e,o){s(r,o,n(e,o,t))})),r}})},function(e,t,n){"use strict";var r=n(6),o=n(50),i=n(93),a=n(68).set;r({target:"Map",proto:!0,real:!0,arity:1,forced:!0},{merge:function(e){for(var t=o(this),n=arguments.length,r=0;r<n;)i(arguments[r++],(function(e,n){a(t,e,n)}),{AS_ENTRIES:!0});return t}})},function(e,t,n){"use strict";var r=n(6),o=n(43),i=n(50),a=n(79),c=TypeError;r({target:"Map",proto:!0,real:!0,forced:!0},{reduce:function(e){var t=i(this),n=arguments.length<2,r=n?void 0:arguments[1];if(o(e),a(t,(function(o,i){n?(n=!1,r=o):r=e(r,o,i,t)})),n)throw c("Reduce of empty map with no initial value");return r}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(50),a=n(79);r({target:"Map",proto:!0,real:!0,forced:!0},{some:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0);return!0===a(t,(function(e,r){if(n(e,r,t))return!0}),!0)}})},function(e,t,n){"use strict";var r=n(6),o=n(43),i=n(50),a=n(68),c=TypeError,u=a.get,s=a.has,l=a.set;r({target:"Map",proto:!0,real:!0,forced:!0},{update:function(e,t){var n=i(this),r=arguments.length;o(t);var a=s(n,e);if(!a&&r<3)throw c("Updating absent value");var f=a?u(n,e):o(r>2?arguments[2]:void 0)(e,n);return l(n,e,t(f,e,n)),n}})},function(e,t,n){"use strict";n(6)({target:"Map",proto:!0,real:!0,forced:!0},{upsert:n(306)})},function(e,t,n){"use strict";n(6)({target:"Map",proto:!0,real:!0,name:"upsert",forced:!0},{updateOrInsert:n(306)})},function(e,t,n){"use strict";e.exports=n(450)},function(e,t,n){"use strict";var r=n(451);n(464),n(465),n(466),n(467),n(468),n(469),n(471),n(472),n(473),n(474),n(475),n(476),n(477),n(478),n(479),n(480),n(481),n(482),e.exports=r},function(e,t,n){"use strict";var r=n(452);n(456),n(458),n(459),n(460),n(461),n(462),n(463),e.exports=r},function(e,t,n){"use strict";var r=n(453);n(73),e.exports=r},function(e,t,n){"use strict";n(74),n(72),n(454),n(75);var r=n(125);e.exports=r.Set},function(e,t,n){"use strict";n(455)},function(e,t,n){"use strict";n(300)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(302))},function(e,t,n){"use strict";var r=n(6),o=n(307);r({target:"Set",proto:!0,real:!0,forced:!n(106)("difference")},{difference:o})},function(e,t,n){"use strict";e.exports=function(e){return{iterator:e,next:e.next,done:!1}}},function(e,t,n){"use strict";var r=n(6),o=n(13),i=n(308);r({target:"Set",proto:!0,real:!0,forced:!n(106)("intersection")||o((function(){return"3,2"!==Array.from(new Set([1,2,3]).intersection(new Set([3,2])))}))},{intersection:i})},function(e,t,n){"use strict";var r=n(6),o=n(309);r({target:"Set",proto:!0,real:!0,forced:!n(106)("isDisjointFrom")},{isDisjointFrom:o})},function(e,t,n){"use strict";var r=n(6),o=n(310);r({target:"Set",proto:!0,real:!0,forced:!n(106)("isSubsetOf")},{isSubsetOf:o})},function(e,t,n){"use strict";var r=n(6),o=n(311);r({target:"Set",proto:!0,real:!0,forced:!n(106)("isSupersetOf")},{isSupersetOf:o})},function(e,t,n){"use strict";var r=n(6),o=n(312);r({target:"Set",proto:!0,real:!0,forced:!n(106)("symmetricDifference")},{symmetricDifference:o})},function(e,t,n){"use strict";var r=n(6),o=n(313);r({target:"Set",proto:!0,real:!0,forced:!n(106)("union")},{union:o})},function(e,t,n){"use strict";n(6)({target:"Set",stat:!0,forced:!0},{from:n(303)})},function(e,t,n){"use strict";n(6)({target:"Set",stat:!0,forced:!0},{of:n(305)})},function(e,t,n){"use strict";var r=n(6),o=n(45),i=n(51).add;r({target:"Set",proto:!0,real:!0,forced:!0},{addAll:function(){for(var e=o(this),t=0,n=arguments.length;t<n;t++)i(e,arguments[t]);return e}})},function(e,t,n){"use strict";var r=n(6),o=n(45),i=n(51).remove;r({target:"Set",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var e,t=o(this),n=!0,r=0,a=arguments.length;r<a;r++)e=i(t,arguments[r]),n=n&&e;return!!n}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(45),a=n(61);r({target:"Set",proto:!0,real:!0,forced:!0},{every:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0);return!1!==a(t,(function(e){if(!n(e,e,t))return!1}),!0)}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(307);r({target:"Set",proto:!0,real:!0,forced:!0},{difference:function(e){return o(a,this,i(e))}})},function(e,t,n){"use strict";var r=n(147),o=n(28),i=n(67),a=n(19),c=n(126),u=a("iterator"),s=Object;e.exports=function(e){if(i(e))return!1;var t=s(e);return void 0!==t[u]||"@@iterator"in t||o(c,r(t))}},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(45),a=n(51),c=n(61),u=a.Set,s=a.add;r({target:"Set",proto:!0,real:!0,forced:!0},{filter:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=new u;return c(t,(function(e){n(e,e,t)&&s(r,e)})),r}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(45),a=n(61);r({target:"Set",proto:!0,real:!0,forced:!0},{find:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=a(t,(function(e){if(n(e,e,t))return{value:e}}),!0);return r&&r.value}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(308);r({target:"Set",proto:!0,real:!0,forced:!0},{intersection:function(e){return o(a,this,i(e))}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(309);r({target:"Set",proto:!0,real:!0,forced:!0},{isDisjointFrom:function(e){return o(a,this,i(e))}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(310);r({target:"Set",proto:!0,real:!0,forced:!0},{isSubsetOf:function(e){return o(a,this,i(e))}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(311);r({target:"Set",proto:!0,real:!0,forced:!0},{isSupersetOf:function(e){return o(a,this,i(e))}})},function(e,t,n){"use strict";var r=n(6),o=n(11),i=n(45),a=n(61),c=n(49),u=o([].join),s=o([].push);r({target:"Set",proto:!0,real:!0,forced:!0},{join:function(e){var t=i(this),n=void 0===e?",":c(e),r=[];return a(t,(function(e){s(r,e)})),u(r,n)}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(45),a=n(51),c=n(61),u=a.Set,s=a.add;r({target:"Set",proto:!0,real:!0,forced:!0},{map:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0),r=new u;return c(t,(function(e){s(r,n(e,e,t))})),r}})},function(e,t,n){"use strict";var r=n(6),o=n(43),i=n(45),a=n(61),c=TypeError;r({target:"Set",proto:!0,real:!0,forced:!0},{reduce:function(e){var t=i(this),n=arguments.length<2,r=n?void 0:arguments[1];if(o(e),a(t,(function(o){n?(n=!1,r=o):r=e(r,o,o,t)})),n)throw c("Reduce of empty set with no initial value");return r}})},function(e,t,n){"use strict";var r=n(6),o=n(37),i=n(45),a=n(61);r({target:"Set",proto:!0,real:!0,forced:!0},{some:function(e){var t=i(this),n=o(e,arguments.length>1?arguments[1]:void 0);return!0===a(t,(function(e){if(n(e,e,t))return!0}),!0)}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(312);r({target:"Set",proto:!0,real:!0,forced:!0},{symmetricDifference:function(e){return o(a,this,i(e))}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(107),a=n(313);r({target:"Set",proto:!0,real:!0,forced:!0},{union:function(e){return o(a,this,i(e))}})},function(e,t,n){(function(t){for(var r=n(484),o="undefined"==typeof window?t:window,i=["moz","webkit"],a="AnimationFrame",c=o["request"+a],u=o["cancel"+a]||o["cancelRequest"+a],s=0;!c&&s<i.length;s++)c=o[i[s]+"Request"+a],u=o[i[s]+"Cancel"+a]||o[i[s]+"CancelRequest"+a];if(!c||!u){var l=0,f=0,d=[];c=function(e){if(0===d.length){var t=r(),n=Math.max(0,1e3/60-(t-l));l=n+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(l)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(n))}return d.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return c.call(o,e)},e.exports.cancel=function(){u.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=c,e.cancelAnimationFrame=u}}).call(this,n(102))},function(e,t,n){(function(t){(function(){var n,r,o,i,a,c;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(n()-a)/1e6},r=t.hrtime,i=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),c=1e9*t.uptime(),a=i-c):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,n(234))},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(217),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function w(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||b}function O(){}function x(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=w.prototype;var E=x.prototype=new O;E.constructor=x,r(E,w.prototype),E.isPureReactComponent=!0;var j={current:null},k=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,o={},a=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),l=0;l<u;l++)s[l]=arguments[l+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:j.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g,T=[];function P(e,t,n,r){if(T.length){var o=T.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function F(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>T.length&&T.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var u=!1;if(null===t)u=!0;else switch(c){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var l=n+A(c=t[s],s);u+=e(c,l,r,o)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=v&&t[v]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),s=0;!(c=t.next()).done;)u+=e(c=c.value,l=n+A(c,s++),r,o);else if("object"===c)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(M,"$&/")+"/"),N(e,D,t=P(t,i,r,o)),F(t)}var I={current:null};function z(){var e=I.current;if(null===e)throw Error(g(321));return e}var V={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:j,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,R,t=P(null,null,t,n)),F(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(g(143));return e}},t.Component=w,t.Fragment=c,t.Profiler=s,t.PureComponent=x,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=V,t.cloneElement=function(e,t,n){if(null==e)throw Error(g(267,e));var o=r({},e.props),a=e.key,c=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,u=j.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)k.call(t,l)&&!C.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==s?s[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){s=Array(l);for(var f=0;f<l;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:i,type:e.type,key:a,ref:c,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return z().useCallback(e,t)},t.useContext=function(e,t){return z().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return z().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return z().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return z().useLayoutEffect(e,t)},t.useMemo=function(e,t){return z().useMemo(e,t)},t.useReducer=function(e,t,n){return z().useReducer(e,t,n)},t.useRef=function(e){return z().useRef(e)},t.useState=function(e){return z().useState(e)},t.version="16.14.0"},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(217),i=n(487);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function c(e,t,n,r,o,i,a,c,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var u=!1,s=null,l=!1,f=null,d={onError:function(e){u=!0,s=e}};function p(e,t,n,r,o,i,a,l,f){u=!1,s=null,c.apply(d,arguments)}var h=null,m=null,v=null;function g(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,c,d,h){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var m=s;u=!1,s=null,l||(l=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var b=null,y={};function w(){if(b)for(var e in y){var t=y[e],n=b.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!x[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in x[n]=t,n=t.eventTypes){var o=void 0,i=n[r],c=t,u=r;if(E.hasOwnProperty(u))throw Error(a(99,u));E[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&O(s[o],c,u);o=!0}else i.registrationName?(O(i.registrationName,c,u),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function O(e,t,n){if(j[e])throw Error(a(100,e));j[e]=t,k[e]=t.eventTypes[n].dependencies}var x=[],E={},j={},k={};function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!y.hasOwnProperty(t)||y[t]!==r){if(y[t])throw Error(a(102,t));y[t]=r,n=!0}}n&&w()}var S=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),_=null,M=null,T=null;function P(e){if(e=m(e)){if("function"!=typeof _)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),_(e.stateNode,e.type,t))}}function F(e){M?T?T.push(e):T=[e]:M=e}function N(){if(M){var e=M,t=T;if(T=M=null,P(e),t)for(e=0;e<t.length;e++)P(t[e])}}function A(e,t){return e(t)}function R(e,t,n,r,o){return e(t,n,r,o)}function D(){}var L=A,I=!1,z=!1;function V(){null===M&&null===T||(D(),N())}function H(e,t,n){if(z)return e(t,n);z=!0;try{return L(e,t,n)}finally{z=!1,V()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,B=Object.prototype.hasOwnProperty,Y={},U={};function $(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var G=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(G,K);q[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(G,K);q[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(G,K);q[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var Q=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var o=q.hasOwnProperty(t)?q[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!B.call(U,e)||!B.call(Y,e)&&(W.test(e)?U[e]=!0:(Y[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Q.hasOwnProperty("ReactCurrentDispatcher")||(Q.ReactCurrentDispatcher={current:null}),Q.hasOwnProperty("ReactCurrentBatchConfig")||(Q.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,oe=J?Symbol.for("react.profiler"):60114,ie=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,ce=J?Symbol.for("react.concurrent_mode"):60111,ue=J?Symbol.for("react.forward_ref"):60112,se=J?Symbol.for("react.suspense"):60113,le=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case le:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ge(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Z,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function be(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Oe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=be(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function je(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function ke(e,t){je(e,t);var n=be(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Se(e,t.type,n):t.hasOwnProperty("defaultValue")&&Se(e,t.type,be(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Se(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _e(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+be(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Te(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Pe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:be(n)}}function Fe(e,t){var n=be(t.value),r=be(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ne(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",Re="http://www.w3.org/2000/svg";function De(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?De(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ie,ze=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Re||"innerHTML"in e)e.innerHTML=t;else{for((Ie=Ie||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ie.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function He(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:He("Animation","AnimationEnd"),animationiteration:He("Animation","AnimationIteration"),animationstart:He("Animation","AnimationStart"),transitionend:He("Transition","TransitionEnd")},Be={},Ye={};function Ue(e){if(Be[e])return Be[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ye)return Be[e]=n[t];return e}S&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var $e=Ue("animationend"),qe=Ue("animationiteration"),Ge=Ue("animationstart"),Ke=Ue("transitionend"),Qe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var c=!1,u=o.child;u;){if(u===n){c=!0,n=o,r=i;break}if(u===r){c=!0,r=o,n=i;break}u=u.sibling}if(!c){for(u=i.child;u;){if(u===n){c=!0,n=i,r=o;break}if(u===r){c=!0,r=i,n=o;break}u=u.sibling}if(!c)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)g(e,t[r],n[r]);else t&&g(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ct(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(l)throw e=f,l=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!S)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var lt=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>lt.length&&lt.push(e)}function dt(e,t,n,r){if(lt.length){var o=lt.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Sn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var c=null,u=0;u<x.length;u++){var s=x[u];s&&(s=s.extractEvents(r,t,i,o,a))&&(c=rt(c,s))}ct(c)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Gt(t,"scroll",!0);break;case"focus":case"blur":Gt(t,"focus",!0),Gt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Gt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Qe.indexOf(e)&&qt(e,t)}n.set(e,null)}}var mt,vt,gt,bt=!1,yt=[],wt=null,Ot=null,xt=null,Et=new Map,jt=new Map,kt=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),St="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function _t(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Mt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":xt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":jt.delete(t.pointerId)}}function Tt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=_t(t,n,r,o,i),null!==t&&(null!==(t=_n(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Pt(e){var t=Sn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){gt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=_n(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){Ft(e)&&n.delete(t)}function At(){for(bt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=_n(e.blockedOn))&&mt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==wt&&Ft(wt)&&(wt=null),null!==Ot&&Ft(Ot)&&(Ot=null),null!==xt&&Ft(xt)&&(xt=null),Et.forEach(Nt),jt.forEach(Nt)}function Rt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,At)))}function Dt(e){function t(t){return Rt(t,e)}if(0<yt.length){Rt(yt[0],e);for(var n=1;n<yt.length;n++){var r=yt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Rt(wt,e),null!==Ot&&Rt(Ot,e),null!==xt&&Rt(xt,e),Et.forEach(t),jt.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)Pt(n),null===n.blockedOn&&kt.shift()}var Lt={},It=new Map,zt=new Map,Vt=["abort","abort",$e,"animationEnd",qe,"animationIteration",Ge,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Ht(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},zt.set(r,t),It.set(r,i),Lt[o]=i}}Ht("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ht("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ht(Vt,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Bt=0;Bt<Wt.length;Bt++)zt.set(Wt[Bt],0);var Yt=i.unstable_UserBlockingPriority,Ut=i.unstable_runWithPriority,$t=!0;function qt(e,t){Gt(t,e,!1)}function Gt(e,t,n){var r=zt.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Qt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){I||D();var o=Xt,i=I;I=!0;try{R(o,e,t,n,r)}finally{(I=i)||V()}}function Qt(e,t,n,r){Ut(Yt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if($t)if(0<yt.length&&-1<Ct.indexOf(e))e=_t(null,e,t,n,r),yt.push(e);else{var o=Zt(e,t,n,r);if(null===o)Mt(e,r);else if(-1<Ct.indexOf(e))e=_t(o,e,t,n,r),yt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=Tt(wt,e,t,n,r,o),!0;case"dragenter":return Ot=Tt(Ot,e,t,n,r,o),!0;case"mouseover":return xt=Tt(xt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Et.set(i,Tt(Et.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,jt.set(i,Tt(jt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Mt(e,r),e=dt(e,r,null,t);try{H(pt,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=Sn(n=ut(r)))){var o=Je(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{H(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var cn=Ae;function un(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function sn(){}function ln(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=ln();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ln((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function gn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function bn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function On(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function xn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),jn="__reactInternalInstance$"+En,kn="__reactEventHandlers$"+En,Cn="__reactContainere$"+En;function Sn(e){var t=e[jn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[jn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=xn(e);null!==e;){if(n=e[jn])return n;e=xn(e)}return t}n=(e=n).parentNode}return null}function _n(e){return!(e=e[jn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Mn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Tn(e){return e[kn]||null}function Pn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Fn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Nn(e,t,n){(t=Fn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Pn(t);for(t=n.length;0<t--;)Nn(n[t],"captured",e);for(t=0;t<n.length;t++)Nn(n[t],"bubbled",e)}}function Rn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Fn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Dn(e){e&&e.dispatchConfig.registrationName&&Rn(e._targetInst,null,e)}function Ln(e){ot(e,An)}var In=null,zn=null,Vn=null;function Hn(){if(Vn)return Vn;var e,t,n=zn,r=n.length,o="value"in In?In.value:In.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Vn=o.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function Bn(){return!1}function Yn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:Bn,this.isPropagationStopped=Bn,this}function Un(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function $n(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function qn(e){e.eventPool=[],e.getPooled=Un,e.release=$n}o(Yn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:Bn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Bn,this._dispatchInstances=this._dispatchListeners=null}}),Yn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Yn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,qn(n),n},qn(Yn);var Gn=Yn.extend({data:null}),Kn=Yn.extend({data:null}),Qn=[9,13,27,32],Xn=S&&"CompositionEvent"in window,Zn=null;S&&"documentMode"in document&&(Zn=document.documentMode);var Jn=S&&"TextEvent"in window&&!Zn,er=S&&(!Xn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Qn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var cr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Xn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Hn()):(zn="value"in(In=r)?In.value:In.textContent,ar=!0)),i=Gn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Ln(i),o=i):o=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Xn&&or(e,t)?(e=Hn(),Vn=zn=In=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,Ln(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var lr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Yn.getPooled(lr.change,e,t,n)).type="change",F(n),Ln(e),e}var dr=null,pr=null;function hr(e){ct(e)}function mr(e){if(Oe(Mn(e)))return e}function vr(e,t){if("change"===e)return t}var gr=!1;function br(){dr&&(dr.detachEvent("onpropertychange",yr),pr=dr=null)}function yr(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,ut(e)),I)ct(e);else{I=!0;try{A(hr,e)}finally{I=!1,V()}}}function wr(e,t,n){"focus"===e?(br(),pr=n,(dr=t).attachEvent("onpropertychange",yr)):"blur"===e&&br()}function Or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function xr(e,t){if("click"===e)return mr(t)}function Er(e,t){if("input"===e||"change"===e)return mr(t)}S&&(gr=st("input")&&(!document.documentMode||9<document.documentMode));var jr={eventTypes:lr,_isInputEventSupported:gr,extractEvents:function(e,t,n,r){var o=t?Mn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(sr(o))if(gr)a=Er;else{a=Or;var c=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=xr);if(a&&(a=a(e,t)))return fr(a,n,r);c&&c(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Se(o,"number",o.value)}},kr=Yn.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function _r(){return Sr}var Mr=0,Tr=0,Pr=!1,Fr=!1,Nr=kr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:_r,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Mr;return Mr=e.screenX,Pr?"mousemove"===e.type?e.screenX-t:0:(Pr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Tr;return Tr=e.screenY,Fr?"mousemove"===e.type?e.screenY-t:0:(Fr=!0,0)}}),Ar=Nr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Rr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Dr={eventTypes:Rr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Sn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var c=Nr,u=Rr.mouseLeave,s=Rr.mouseEnter,l="mouse";else"pointerout"!==e&&"pointerover"!==e||(c=Ar,u=Rr.pointerLeave,s=Rr.pointerEnter,l="pointer");if(e=null==a?i:Mn(a),i=null==t?i:Mn(t),(u=c.getPooled(u,a,n,r)).type=l+"leave",u.target=e,u.relatedTarget=i,(n=c.getPooled(s,t,n,r)).type=l+"enter",n.target=i,n.relatedTarget=e,l=t,(r=a)&&l)e:{for(s=l,a=0,e=c=r;e;e=Pn(e))a++;for(e=0,t=s;t;t=Pn(t))e++;for(;0<a-e;)c=Pn(c),a--;for(;0<e-a;)s=Pn(s),e--;for(;a--;){if(c===s||c===s.alternate)break e;c=Pn(c),s=Pn(s)}c=null}else c=null;for(s=c,c=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)c.push(r),r=Pn(r);for(r=[];l&&l!==s&&(null===(a=l.alternate)||a!==s);)r.push(l),l=Pn(l);for(l=0;l<c.length;l++)Rn(c[l],"bubbled",u);for(l=r.length;0<l--;)Rn(r[l],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Ir=Object.prototype.hasOwnProperty;function zr(e,t){if(Lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Ir.call(t,n[r])||!Lr(e[n[r]],t[n[r]]))return!1;return!0}var Vr=S&&"documentMode"in document&&11>=document.documentMode,Hr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wr=null,Br=null,Yr=null,Ur=!1;function $r(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Ur||null==Wr||Wr!==ln(n)?null:("selectionStart"in(n=Wr)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Yr&&zr(Yr,n)?null:(Yr=n,(e=Yn.getPooled(Hr.select,Br,e,t)).type="select",e.target=Wr,Ln(e),e))}var qr={eventTypes:Hr,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ze(o),i=k.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?Mn(t):window,e){case"focus":(sr(o)||"true"===o.contentEditable)&&(Wr=o,Br=t,Yr=null);break;case"blur":Yr=Br=Wr=null;break;case"mousedown":Ur=!0;break;case"contextmenu":case"mouseup":case"dragend":return Ur=!1,$r(n,r);case"selectionchange":if(Vr)break;case"keydown":case"keyup":return $r(n,r)}return null}},Gr=Yn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Yn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Qr=kr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=kr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:_r,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Nr.extend({dataTransfer:null}),no=kr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:_r}),ro=Yn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Nr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Lt,extractEvents:function(e,t,n,r){var o=It.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Qr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Nr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case $e:case qe:case Ge:e=Gr;break;case Ke:e=ro;break;case"scroll":e=kr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ar;break;default:e=Yn}return Ln(t=e.getPooled(o,t,n,r)),t}};if(b)throw Error(a(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=Tn,m=_n,v=Mn,C({SimpleEventPlugin:io,EnterLeaveEventPlugin:Dr,ChangeEventPlugin:jr,SelectEventPlugin:qr,BeforeInputEventPlugin:cr});var ao=[],co=-1;function uo(e){0>co||(e.current=ao[co],ao[co]=null,co--)}function so(e,t){co++,ao[co]=e.current,e.current=t}var lo={},fo={current:lo},po={current:!1},ho=lo;function mo(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function go(){uo(po),uo(fo)}function bo(e,t,n){if(fo.current!==lo)throw Error(a(168));so(fo,t),so(po,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,ho=fo.current,so(fo,e),so(po,po.current),!0}function Oo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),so(fo,e)):uo(po),so(po,n)}var xo=i.unstable_runWithPriority,Eo=i.unstable_scheduleCallback,jo=i.unstable_cancelCallback,ko=i.unstable_requestPaint,Co=i.unstable_now,So=i.unstable_getCurrentPriorityLevel,_o=i.unstable_ImmediatePriority,Mo=i.unstable_UserBlockingPriority,To=i.unstable_NormalPriority,Po=i.unstable_LowPriority,Fo=i.unstable_IdlePriority,No={},Ao=i.unstable_shouldYield,Ro=void 0!==ko?ko:function(){},Do=null,Lo=null,Io=!1,zo=Co(),Vo=1e4>zo?Co:function(){return Co()-zo};function Ho(){switch(So()){case _o:return 99;case Mo:return 98;case To:return 97;case Po:return 96;case Fo:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return _o;case 98:return Mo;case 97:return To;case 96:return Po;case 95:return Fo;default:throw Error(a(332))}}function Bo(e,t){return e=Wo(e),xo(e,t)}function Yo(e,t,n){return e=Wo(e),Eo(e,t,n)}function Uo(e){return null===Do?(Do=[e],Lo=Eo(_o,qo)):Do.push(e),No}function $o(){if(null!==Lo){var e=Lo;Lo=null,jo(e)}qo()}function qo(){if(!Io&&null!==Do){Io=!0;var e=0;try{var t=Do;Bo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Eo(_o,$o),t}finally{Io=!1}}}function Go(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ko(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Qo={current:null},Xo=null,Zo=null,Jo=null;function ei(){Jo=Zo=Xo=null}function ti(e){var t=Qo.current;uo(Qo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Xo=e,Jo=Zo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ta=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zo){if(null===Xo)throw Error(a(308));Zo=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zo=Zo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ci(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ui(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.alternate;null!==n&&ci(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,c=i.shared.pending;if(null!==c){if(null!==a){var u=a.next;a.next=c.next,c.next=u}a=c,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=c))}if(null!==a){u=a.next;var s=i.baseState,l=0,f=null,d=null,p=null;if(null!==u)for(var h=u;;){if((c=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=s):p=p.next=m,c>l&&(l=c)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),iu(c,h.suspenseConfig);e:{var v=e,g=h;switch(c=t,m=n,g.tag){case 1:if("function"==typeof(v=g.payload)){s=v.call(m,s,c);break e}s=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(c="function"==typeof(v=g.payload)?v.call(m,s,c):v))break e;s=o({},s,c);break e;case 2:ii=!0}}null!==h.callback&&(e.effectTag|=32,null===(c=i.effects)?i.effects=[h]:c.push(h))}if(null===(h=h.next)||h===u){if(null===(c=i.shared.pending))break;h=a.next=c.next,c.next=u,i.baseQueue=a=c,i.shared.pending=null}}null===p?f=s:p.next=d,i.baseState=f,i.baseQueue=p,au(l),e.expirationTime=l,e.memoizedState=s}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=Q.ReactCurrentBatchConfig,hi=(new r.Component).refs;function mi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=$c(),o=pi.suspense;(o=ui(r=qc(r,e,o),o)).payload=t,null!=n&&(o.callback=n),si(e,o),Gc(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=$c(),o=pi.suspense;(o=ui(r=qc(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),si(e,o),Gc(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=$c(),r=pi.suspense;(r=ui(n=qc(n,e,r),r)).tag=2,null!=t&&(r.callback=t),si(e,r),Gc(e,n)}};function gi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!zr(n,r)||!zr(o,i))}function bi(e,t,n){var r=!1,o=lo,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=vo(t)?ho:fo.current,i=(r=null!=(r=t.contextTypes))?mo(e,o):lo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function yi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=hi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=vo(t)?ho:fo.current,o.context=mo(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(mi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Oi=Array.isArray;function xi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===hi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ei(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ji(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function c(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=xi(e,t,n),r.return=e,r):((r=Su(n.type,n.key,n.props,null,e.mode,r)).ref=xi(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Tu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=_u(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Su(t.type,t.key,t.props,null,e.mode,n)).ref=xi(e,null,t),n.return=e,n;case te:return(t=Tu(t,e.mode,n)).return=e,t}if(Oi(t)||me(t))return(t=_u(t,e.mode,n,null)).return=e,t;Ei(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case te:return n.key===o?l(e,t,n,r):null}if(Oi(n)||me(n))return null!==o?null:f(e,t,n,r,null);Ei(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case te:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Oi(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);Ei(t,r)}return null}function m(o,a,c,u){for(var s=null,l=null,f=a,m=a=0,v=null;null!==f&&m<c.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,c[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===l?s=g:l.sibling=g,l=g,f=v}if(m===c.length)return n(o,f),s;if(null===f){for(;m<c.length;m++)null!==(f=d(o,c[m],u))&&(a=i(f,a,m),null===l?s=f:l.sibling=f,l=f);return s}for(f=r(o,f);m<c.length;m++)null!==(v=h(f,o,m,c[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?s=v:l.sibling=v,l=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,c,u,s){var l=me(u);if("function"!=typeof l)throw Error(a(150));if(null==(u=l.call(u)))throw Error(a(151));for(var f=l=null,m=c,v=c=0,g=null,b=u.next();null!==m&&!b.done;v++,b=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var y=p(o,m,b.value,s);if(null===y){null===m&&(m=g);break}e&&m&&null===y.alternate&&t(o,m),c=i(y,c,v),null===f?l=y:f.sibling=y,f=y,m=g}if(b.done)return n(o,m),l;if(null===m){for(;!b.done;v++,b=u.next())null!==(b=d(o,b.value,s))&&(c=i(b,c,v),null===f?l=b:f.sibling=b,f=b);return l}for(m=r(o,m);!b.done;v++,b=u.next())null!==(b=h(m,o,v,b.value,s))&&(e&&null!==b.alternate&&m.delete(null===b.key?v:b.key),c=i(b,c,v),null===f?l=b:f.sibling=b,f=b);return e&&m.forEach((function(e){return t(o,e)})),l}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;s&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case ee:e:{for(l=i.key,s=r;null!==s;){if(s.key===l){switch(s.tag){case 7:if(i.type===ne){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=xi(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===ne?((r=_u(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Su(i.type,i.key,i.props,null,e.mode,u)).ref=xi(e,r,i),u.return=e,e=u)}return c(e);case te:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Tu(i,e.mode,u)).return=e,e=r}return c(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Mu(i,e.mode,u)).return=e,e=r),c(e);if(Oi(i))return m(e,r,i,u);if(me(i))return v(e,r,i,u);if(l&&Ei(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var ki=ji(!0),Ci=ji(!1),Si={},_i={current:Si},Mi={current:Si},Ti={current:Si};function Pi(e){if(e===Si)throw Error(a(174));return e}function Fi(e,t){switch(so(Ti,t),so(Mi,e),so(_i,Si),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(_i),so(_i,t)}function Ni(){uo(_i),uo(Mi),uo(Ti)}function Ai(e){Pi(Ti.current);var t=Pi(_i.current),n=Le(t,e.type);t!==n&&(so(Mi,e),so(_i,n))}function Ri(e){Mi.current===e&&(uo(_i),uo(Mi))}var Di={current:0};function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ii(e,t){return{responder:e,props:t}}var zi=Q.ReactCurrentDispatcher,Vi=Q.ReactCurrentBatchConfig,Hi=0,Wi=null,Bi=null,Yi=null,Ui=!1;function $i(){throw Error(a(321))}function qi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Lr(e[n],t[n]))return!1;return!0}function Gi(e,t,n,r,o,i){if(Hi=i,Wi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,zi.current=null===e||null===e.memoizedState?ga:ba,e=n(r,o),t.expirationTime===Hi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Yi=Bi=null,t.updateQueue=null,zi.current=ya,e=n(r,o)}while(t.expirationTime===Hi)}if(zi.current=va,t=null!==Bi&&null!==Bi.next,Hi=0,Yi=Bi=Wi=null,Ui=!1,t)throw Error(a(300));return e}function Ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Yi?Wi.memoizedState=Yi=e:Yi=Yi.next=e,Yi}function Qi(){if(null===Bi){var e=Wi.alternate;e=null!==e?e.memoizedState:null}else e=Bi.next;var t=null===Yi?Wi.memoizedState:Yi.next;if(null!==t)Yi=t,Bi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Bi=e).memoizedState,baseState:Bi.baseState,baseQueue:Bi.baseQueue,queue:Bi.queue,next:null},null===Yi?Wi.memoizedState=Yi=e:Yi=Yi.next=e}return Yi}function Xi(e,t){return"function"==typeof t?t(e):t}function Zi(e){var t=Qi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Bi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var c=o.next;o.next=i.next,i.next=c}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=c=i=null,s=o;do{var l=s.expirationTime;if(l<Hi){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(c=u=f,i=r):u=u.next=f,l>Wi.expirationTime&&(Wi.expirationTime=l,au(l))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),iu(l,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=c,Lr(r,t.memoizedState)||(Ta=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Ji(e){var t=Qi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var c=o=o.next;do{i=e(i,c.action),c=c.next}while(c!==o);Lr(i,t.memoizedState)||(Ta=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Ki();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xi,lastRenderedState:e}).dispatch=ma.bind(null,Wi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Wi.updateQueue)?(t={lastEffect:null},Wi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Qi().memoizedState}function ra(e,t,n,r){var o=Ki();Wi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Qi();r=void 0===r?null:r;var i=void 0;if(null!==Bi){var a=Bi.memoizedState;if(i=a.destroy,null!==r&&qi(r,a.deps))return void ta(t,n,i,r)}Wi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function ca(e,t){return oa(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function sa(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,ua.bind(null,t,e),n)}function la(){}function fa(e,t){return Ki().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Qi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Qi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Ho();Bo(98>r?98:r,(function(){e(!0)})),Bo(97<r?97:r,(function(){var r=Vi.suspense;Vi.suspense=void 0===t?null:t;try{e(!1),n()}finally{Vi.suspense=r}}))}function ma(e,t,n){var r=$c(),o=pi.suspense;o={expirationTime:r=qc(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Wi||null!==i&&i===Wi)Ui=!0,o.expirationTime=Hi,Wi.expirationTime=Hi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,c=i(a,n);if(o.eagerReducer=i,o.eagerState=c,Lr(c,a))return}catch(e){}Gc(e,r)}}var va={readContext:oi,useCallback:$i,useContext:$i,useEffect:$i,useImperativeHandle:$i,useLayoutEffect:$i,useMemo:$i,useReducer:$i,useRef:$i,useState:$i,useDebugValue:$i,useResponder:$i,useDeferredValue:$i,useTransition:$i},ga={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,Wi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ki().memoizedState=e},useState:ea,useDebugValue:la,useResponder:Ii,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Vi.suspense;Vi.suspense=void 0===t?null:t;try{o(e)}finally{Vi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:ca,useMemo:pa,useReducer:Zi,useRef:na,useState:function(){return Zi(Xi)},useDebugValue:la,useResponder:Ii,useDeferredValue:function(e,t){var n=Zi(Xi),r=n[0],o=n[1];return aa((function(){var n=Vi.suspense;Vi.suspense=void 0===t?null:t;try{o(e)}finally{Vi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Xi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ya={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:ca,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Xi)},useDebugValue:la,useResponder:Ii,useDeferredValue:function(e,t){var n=Ji(Xi),r=n[0],o=n[1];return aa((function(){var n=Vi.suspense;Vi.suspense=void 0===t?null:t;try{o(e)}finally{Vi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Xi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,Oa=null,xa=!1;function Ea(e,t){var n=ju(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ja(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ka(e){if(xa){var t=Oa;if(t){var n=t;if(!ja(e,t)){if(!(t=On(n.nextSibling))||!ja(e,t))return e.effectTag=-1025&e.effectTag|2,xa=!1,void(wa=e);Ea(wa,n)}wa=e,Oa=On(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,xa=!1,wa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Sa(e){if(e!==wa)return!1;if(!xa)return Ca(e),xa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!bn(t,e.memoizedProps))for(t=Oa;t;)Ea(e,t),t=On(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Oa=On(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Oa=null}}else Oa=wa?On(e.stateNode.nextSibling):null;return!0}function _a(){Oa=wa=null,xa=!1}var Ma=Q.ReactCurrentOwner,Ta=!1;function Pa(e,t,n,r){t.child=null===e?Ci(t,null,n,r):ki(t,e.child,n,r)}function Fa(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Gi(e,t,n,r,i,o),null===e||Ta?(t.effectTag|=1,Pa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function Na(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||ku(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Su(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Aa(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:zr)(o,r)&&e.ref===t.ref)?Ga(e,t,i):(t.effectTag|=1,(e=Cu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Aa(e,t,n,r,o,i){return null!==e&&zr(e.memoizedProps,r)&&e.ref===t.ref&&(Ta=!1,o<i)?(t.expirationTime=e.expirationTime,Ga(e,t,i)):Da(e,t,n,r,i)}function Ra(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Da(e,t,n,r,o){var i=vo(n)?ho:fo.current;return i=mo(t,i),ri(t,o),n=Gi(e,t,n,r,i,o),null===e||Ta?(t.effectTag|=1,Pa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function La(e,t,n,r,o){if(vo(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),bi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,c=t.memoizedProps;a.props=c;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=oi(s):s=mo(t,s=vo(n)?ho:fo.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||u!==s)&&yi(t,a,r,s),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),u=t.memoizedState,c!==r||d!==u||po.current||ii?("function"==typeof l&&(mi(t,n,l,r),u=t.memoizedState),(c=ii||gi(t,n,c,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=c):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ci(e,t),c=t.memoizedProps,a.props=t.type===t.elementType?c:Ko(t.type,c),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=oi(s):s=mo(t,s=vo(n)?ho:fo.current),(f="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||u!==s)&&yi(t,a,r,s),ii=!1,u=t.memoizedState,a.state=u,fi(t,r,a,o),d=t.memoizedState,c!==r||u!==d||po.current||ii?("function"==typeof l&&(mi(t,n,l,r),d=t.memoizedState),(l=ii||gi(t,n,c,r,u,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=l):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ia(e,t,n,r,i,o)}function Ia(e,t,n,r,o,i){Ra(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Oo(t,n,!1),Ga(e,t,i);r=t.stateNode,Ma.current=t;var c=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=ki(t,e.child,null,i),t.child=ki(t,null,c,i)):Pa(e,t,c,i),t.memoizedState=r.state,o&&Oo(t,n,!0),t.child}function za(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Fi(e,t.containerInfo)}var Va,Ha,Wa,Ba={dehydrated:null,retryTime:0};function Ya(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Di.current,c=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(c=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),so(Di,1&a),null===e){if(void 0!==i.fallback&&ka(t),c){if(c=i.fallback,(i=_u(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=_u(c,o,n,null)).return=t,i.sibling=n,t.memoizedState=Ba,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ci(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,c){if(i=i.fallback,(n=Cu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(c=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=c;null!==c;)c.return=n,c=c.sibling;return(o=Cu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ba,t.child=n,o}return n=ki(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,c){if(c=i.fallback,(i=_u(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=_u(c,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Ba,t.child=i,n}return t.memoizedState=null,t.child=ki(t,e,i.children,n)}function Ua(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function $a(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function qa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Pa(e,t,r.children,n),0!=(2&(r=Di.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ua(e,n);else if(19===e.tag)Ua(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Di,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$a(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$a(t,!0,n,null,i,t.lastEffect);break;case"together":$a(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ga(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Cu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ka(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qa(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&go(),null;case 3:return Ni(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Sa(t)||(t.effectTag|=4),null;case 5:Ri(t),n=Pi(Ti.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ha(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Pi(_i.current),Sa(t)){r=t.stateNode,i=t.type;var c=t.memoizedProps;switch(r[jn]=t,r[kn]=c,i){case"iframe":case"object":case"embed":qt("load",r);break;case"video":case"audio":for(e=0;e<Qe.length;e++)qt(Qe[e],r);break;case"source":qt("error",r);break;case"img":case"image":case"link":qt("error",r),qt("load",r);break;case"form":qt("reset",r),qt("submit",r);break;case"details":qt("toggle",r);break;case"input":Ee(r,c),qt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!c.multiple},qt("invalid",r),un(n,"onChange");break;case"textarea":Pe(r,c),qt("invalid",r),un(n,"onChange")}for(var u in on(i,c),e=null,c)if(c.hasOwnProperty(u)){var s=c[u];"children"===u?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):j.hasOwnProperty(u)&&null!=s&&un(n,u)}switch(i){case"input":we(r),Ce(r,c,!0);break;case"textarea":we(r),Ne(r);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===cn&&(e=De(i)),e===cn?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[jn]=t,e[kn]=r,Va(e,t),t.stateNode=e,u=an(i,r),i){case"iframe":case"object":case"embed":qt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Qe.length;s++)qt(Qe[s],e);s=r;break;case"source":qt("error",e),s=r;break;case"img":case"image":case"link":qt("error",e),qt("load",e),s=r;break;case"form":qt("reset",e),qt("submit",e),s=r;break;case"details":qt("toggle",e),s=r;break;case"input":Ee(e,r),s=xe(e,r),qt("invalid",e),un(n,"onChange");break;case"option":s=_e(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=o({},r,{value:void 0}),qt("invalid",e),un(n,"onChange");break;case"textarea":Pe(e,r),s=Te(e,r),qt("invalid",e),un(n,"onChange");break;default:s=r}on(i,s);var l=s;for(c in l)if(l.hasOwnProperty(c)){var f=l[c];"style"===c?nn(e,f):"dangerouslySetInnerHTML"===c?null!=(f=f?f.__html:void 0)&&ze(e,f):"children"===c?"string"==typeof f?("textarea"!==i||""!==f)&&Ve(e,f):"number"==typeof f&&Ve(e,""+f):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(j.hasOwnProperty(c)?null!=f&&un(n,c):null!=f&&X(e,c,f,u))}switch(i){case"input":we(e),Ce(e,r,!1);break;case"textarea":we(e),Ne(e);break;case"option":null!=r.value&&e.setAttribute("value",""+be(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Me(e,!!r.multiple,n,!1):null!=r.defaultValue&&Me(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}gn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Wa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Pi(Ti.current),Pi(_i.current),Sa(t)?(n=t.stateNode,r=t.memoizedProps,n[jn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[jn]=t,t.stateNode=n)}return null;case 13:return uo(Di),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Sa(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Di.current)?Sc===wc&&(Sc=Oc):(Sc!==wc&&Sc!==Oc||(Sc=xc),0!==Fc&&null!==jc&&(Nu(jc,Cc),Au(jc,Fc)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ni(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&go(),null;case 19:if(uo(Di),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(c=r.rendering)){if(i)Ka(r,!1);else if(Sc!==wc||null!==e&&0!=(64&e.effectTag))for(c=t.child;null!==c;){if(null!==(e=Li(c))){for(t.effectTag|=64,Ka(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)c=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=c,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,c=e.dependencies,i.dependencies=null===c?null:{expirationTime:c.expirationTime,firstContext:c.firstContext,responders:c.responders}),r=r.sibling;return so(Di,1&Di.current|2),t.child}c=c.sibling}}else{if(!i)if(null!==(e=Li(c))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ka(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ka(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Vo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Vo(),n.sibling=null,t=Di.current,so(Di,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Xa(e){switch(e.tag){case 1:vo(e.type)&&go();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ni(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Ri(e),null;case 13:return uo(Di),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Di),null;case 4:return Ni(),null;case 10:return ti(e),null;default:return null}}function Za(e,t){return{value:e,source:t,stack:ge(t)}}Va=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var c,u,s=t.stateNode;switch(Pi(_i.current),e=null,n){case"input":a=xe(s,a),r=xe(s,r),e=[];break;case"option":a=_e(s,a),r=_e(s,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Te(s,a),r=Te(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(c in on(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c)for(u in s=a[c])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(j.hasOwnProperty(c)?e||(e=[]):(e=e||[]).push(c,null));for(c in r){var l=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&l!==s&&(null!=l||null!=s))if("style"===c)if(s){for(u in s)!s.hasOwnProperty(u)||l&&l.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in l)l.hasOwnProperty(u)&&s[u]!==l[u]&&(n||(n={}),n[u]=l[u])}else n||(e||(e=[]),e.push(c,n)),n=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,s=s?s.__html:void 0,null!=l&&s!==l&&(e=e||[]).push(c,l)):"children"===c?s===l||"string"!=typeof l&&"number"!=typeof l||(e=e||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(j.hasOwnProperty(c)?(null!=l&&un(i,c),e||s===l||(e=[])):(e=e||[]).push(c,l))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Wa=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function ec(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ge(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tc(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){bu(e,t)}else t.current=null}function nc(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function oc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ic(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void oc(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&gn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Dt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function ac(e,t,n){switch("function"==typeof xu&&xu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Bo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){bu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tc(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){bu(e,t)}}(t,n);break;case 5:tc(t);break;case 4:lc(e,t,n)}}function cc(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&cc(t)}function uc(e){return 5===e.tag||3===e.tag||4===e.tag}function sc(e){e:{for(var t=e.return;null!==t;){if(uc(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ve(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||uc(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function lc(e,t,n){for(var r,o,i=t,c=!1;;){if(!c){c=i.return;e:for(;;){if(null===c)throw Error(a(160));switch(r=c.stateNode,c.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}c=c.return}c=!0}if(5===i.tag||6===i.tag){e:for(var u=e,s=i,l=n,f=s;;)if(ac(u,f,l),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,s=i.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(ac(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(c=!1)}i.sibling.return=i.return,i=i.sibling}}function fc(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rc(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[kn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&je(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var c=i[o],u=i[o+1];"style"===c?nn(n,u):"dangerouslySetInnerHTML"===c?ze(n,u):"children"===c?Ve(n,u):X(n,c,u,t)}switch(e){case"input":ke(n,r);break;case"textarea":Fe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Dt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ac=Vo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dc(t);case 19:return void dc(t);case 17:return}throw Error(a(163))}function dc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pc="function"==typeof WeakMap?WeakMap:Map;function hc(e,t,n){(n=ui(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Dc||(Dc=!0,Lc=r),ec(e,t)},n}function mc(e,t,n){(n=ui(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ec(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ic?Ic=new Set([this]):Ic.add(this),ec(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vc,gc=Math.ceil,bc=Q.ReactCurrentDispatcher,yc=Q.ReactCurrentOwner,wc=0,Oc=3,xc=4,Ec=0,jc=null,kc=null,Cc=0,Sc=wc,_c=null,Mc=1073741823,Tc=1073741823,Pc=null,Fc=0,Nc=!1,Ac=0,Rc=null,Dc=!1,Lc=null,Ic=null,zc=!1,Vc=null,Hc=90,Wc=null,Bc=0,Yc=null,Uc=0;function $c(){return 0!=(48&Ec)?1073741821-(Vo()/10|0):0!==Uc?Uc:Uc=1073741821-(Vo()/10|0)}function qc(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ho();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ec))return Cc;if(null!==n)e=Go(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Go(e,150,100);break;case 97:case 96:e=Go(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==jc&&e===Cc&&--e,e}function Gc(e,t){if(50<Bc)throw Bc=0,Yc=null,Error(a(185));if(null!==(e=Kc(e,t))){var n=Ho();1073741823===t?0!=(8&Ec)&&0==(48&Ec)?Jc(e):(Xc(e),0===Ec&&$o()):Xc(e),0==(4&Ec)||98!==n&&99!==n||(null===Wc?Wc=new Map([[e,t]]):(void 0===(n=Wc.get(e))||n>t)&&Wc.set(e,t))}}function Kc(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(jc===o&&(au(t),Sc===xc&&Nu(o,Cc)),Au(o,t)),o}function Qc(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Fu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xc(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Uo(Jc.bind(null,e));else{var t=Qc(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=$c();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==No&&jo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Uo(Jc.bind(null,e)):Yo(r,Zc.bind(null,e),{timeout:10*(1073741821-t)-Vo()}),e.callbackNode=t}}}function Zc(e,t){if(Uc=0,t)return Ru(e,t=$c()),Xc(e),null;var n=Qc(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ec))throw Error(a(327));if(mu(),e===jc&&n===Cc||nu(e,n),null!==kc){var r=Ec;Ec|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ei(),Ec=r,bc.current=o,1===Sc)throw t=_c,nu(e,n),Nu(e,n),Xc(e),t;if(null===kc)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Sc,jc=null,r){case wc:case 1:throw Error(a(345));case 2:Ru(e,2<n?2:n);break;case Oc:if(Nu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Mc&&10<(o=Ac+500-Vo())){if(Nc){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Qc(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=yn(du.bind(null,e),o);break}du(e);break;case xc:if(Nu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Nc&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Qc(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Tc?r=10*(1073741821-Tc)-Vo():1073741823===Mc?r=0:(r=10*(1073741821-Mc)-5e3,0>(r=(o=Vo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*gc(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=yn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Mc&&null!==Pc){i=Mc;var c=Pc;if(0>=(r=0|c.busyMinDurationMs)?r=0:(o=0|c.busyDelayMs,r=(i=Vo()-(10*(1073741821-i)-(0|c.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Nu(e,n),e.timeoutHandle=yn(du.bind(null,e),r);break}}du(e);break;default:throw Error(a(329))}if(Xc(e),e.callbackNode===t)return Zc.bind(null,e)}}return null}function Jc(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ec))throw Error(a(327));if(mu(),e===jc&&t===Cc||nu(e,t),null!==kc){var n=Ec;Ec|=16;for(var r=ou();;)try{cu();break}catch(t){ru(e,t)}if(ei(),Ec=n,bc.current=r,1===Sc)throw n=_c,nu(e,t),Nu(e,t),Xc(e),n;if(null!==kc)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,jc=null,du(e),Xc(e)}return null}function eu(e,t){var n=Ec;Ec|=1;try{return e(t)}finally{0===(Ec=n)&&$o()}}function tu(e,t){var n=Ec;Ec&=-2,Ec|=8;try{return e(t)}finally{0===(Ec=n)&&$o()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==kc)for(n=kc.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Ni(),uo(po),uo(fo);break;case 5:Ri(r);break;case 4:Ni();break;case 13:case 19:uo(Di);break;case 10:ti(r)}n=n.return}jc=e,kc=Cu(e.current,null),Cc=t,Sc=wc,_c=null,Tc=Mc=1073741823,Pc=null,Fc=0,Nc=!1}function ru(e,t){for(;;){try{if(ei(),zi.current=va,Ui)for(var n=Wi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Hi=0,Yi=Bi=Wi=null,Ui=!1,null===kc||null===kc.return)return Sc=1,_c=t,kc=null;e:{var o=e,i=kc.return,a=kc,c=t;if(t=Cc,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c;if(0==(2&a.mode)){var s=a.alternate;s?(a.updateQueue=s.updateQueue,a.memoizedState=s.memoizedState,a.expirationTime=s.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var l=0!=(1&Di.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!l)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var g=ui(1073741823,null);g.tag=2,si(a,g)}a.expirationTime=1073741823;break e}c=void 0,a=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new pc,c=new Set,b.set(u,c)):void 0===(c=b.get(u))&&(c=new Set,b.set(u,c)),!c.has(a)){c.add(a);var y=yu.bind(null,o,u,a);u.then(y,y)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);c=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ge(a))}5!==Sc&&(Sc=2),c=Za(c,a),f=i;do{switch(f.tag){case 3:u=c,f.effectTag|=4096,f.expirationTime=t,li(f,hc(f,u,t));break e;case 1:u=c;var w=f.type,O=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==O&&"function"==typeof O.componentDidCatch&&(null===Ic||!Ic.has(O)))){f.effectTag|=4096,f.expirationTime=t,li(f,mc(f,u,t));break e}}f=f.return}while(null!==f)}kc=lu(kc)}catch(e){t=e;continue}break}}function ou(){var e=bc.current;return bc.current=va,null===e?va:e}function iu(e,t){e<Mc&&2<e&&(Mc=e),null!==t&&e<Tc&&2<e&&(Tc=e,Pc=t)}function au(e){e>Fc&&(Fc=e)}function cu(){for(;null!==kc;)kc=su(kc)}function uu(){for(;null!==kc&&!Ao();)kc=su(kc)}function su(e){var t=vc(e.alternate,e,Cc);return e.memoizedProps=e.pendingProps,null===t&&(t=lu(e)),yc.current=null,t}function lu(e){kc=e;do{var t=kc.alternate;if(e=kc.return,0==(2048&kc.effectTag)){if(t=Qa(t,kc,Cc),1===Cc||1!==kc.childExpirationTime){for(var n=0,r=kc.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}kc.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=kc.firstEffect),null!==kc.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=kc.firstEffect),e.lastEffect=kc.lastEffect),1<kc.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=kc:e.firstEffect=kc,e.lastEffect=kc))}else{if(null!==(t=Xa(kc)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=kc.sibling))return t;kc=e}while(null!==kc);return Sc===wc&&(Sc=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=Ho();return Bo(99,pu.bind(null,e,t)),null}function pu(e,t){do{mu()}while(null!==Vc);if(0!=(48&Ec))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===jc&&(kc=jc=null,Cc=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Ec;Ec|=32,yc.current=null,mn=$t;var c=pn();if(hn(c)){if("selectionStart"in c)var u={start:c.selectionStart,end:c.selectionEnd};else e:{var s=(u=(u=c.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var l=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,v=0,g=c,b=null;t:for(;;){for(var y;g!==u||0!==l&&3!==g.nodeType||(p=d+l),g!==f||0!==s&&3!==g.nodeType||(h=d+s),3===g.nodeType&&(d+=g.nodeValue.length),null!==(y=g.firstChild);)b=g,g=y;for(;;){if(g===c)break t;if(b===u&&++m===l&&(p=d),b===f&&++v===s&&(h=d),null!==(y=g.nextSibling))break;b=(g=b).parentNode}g=y}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:c,selectionRange:u},$t=!1,Rc=o;do{try{hu()}catch(e){if(null===Rc)throw Error(a(330));bu(Rc,e),Rc=Rc.nextEffect}}while(null!==Rc);Rc=o;do{try{for(c=e,u=t;null!==Rc;){var w=Rc.effectTag;if(16&w&&Ve(Rc.stateNode,""),128&w){var O=Rc.alternate;if(null!==O){var x=O.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&w){case 2:sc(Rc),Rc.effectTag&=-3;break;case 6:sc(Rc),Rc.effectTag&=-3,fc(Rc.alternate,Rc);break;case 1024:Rc.effectTag&=-1025;break;case 1028:Rc.effectTag&=-1025,fc(Rc.alternate,Rc);break;case 4:fc(Rc.alternate,Rc);break;case 8:lc(c,l=Rc,u),cc(l)}Rc=Rc.nextEffect}}catch(e){if(null===Rc)throw Error(a(330));bu(Rc,e),Rc=Rc.nextEffect}}while(null!==Rc);if(x=vn,O=pn(),w=x.focusedElem,u=x.selectionRange,O!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&hn(w)&&(O=u.start,void 0===(x=u.end)&&(x=O),"selectionStart"in w?(w.selectionStart=O,w.selectionEnd=Math.min(x,w.value.length)):(x=(O=w.ownerDocument||document)&&O.defaultView||window).getSelection&&(x=x.getSelection(),l=w.textContent.length,c=Math.min(u.start,l),u=void 0===u.end?c:Math.min(u.end,l),!x.extend&&c>u&&(l=u,u=c,c=l),l=dn(w,c),f=dn(w,u),l&&f&&(1!==x.rangeCount||x.anchorNode!==l.node||x.anchorOffset!==l.offset||x.focusNode!==f.node||x.focusOffset!==f.offset)&&((O=O.createRange()).setStart(l.node,l.offset),x.removeAllRanges(),c>u?(x.addRange(O),x.extend(f.node,f.offset)):(O.setEnd(f.node,f.offset),x.addRange(O))))),O=[];for(x=w;x=x.parentNode;)1===x.nodeType&&O.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<O.length;w++)(x=O[w]).element.scrollLeft=x.left,x.element.scrollTop=x.top}$t=!!mn,vn=mn=null,e.current=n,Rc=o;do{try{for(w=e;null!==Rc;){var E=Rc.effectTag;if(36&E&&ic(w,Rc.alternate,Rc),128&E){O=void 0;var j=Rc.ref;if(null!==j){var k=Rc.stateNode;switch(Rc.tag){case 5:O=k;break;default:O=k}"function"==typeof j?j(O):j.current=O}}Rc=Rc.nextEffect}}catch(e){if(null===Rc)throw Error(a(330));bu(Rc,e),Rc=Rc.nextEffect}}while(null!==Rc);Rc=null,Ro(),Ec=i}else e.current=n;if(zc)zc=!1,Vc=e,Hc=t;else for(Rc=o;null!==Rc;)t=Rc.nextEffect,Rc.nextEffect=null,Rc=t;if(0===(t=e.firstPendingTime)&&(Ic=null),1073741823===t?e===Yc?Bc++:(Bc=0,Yc=e):Bc=0,"function"==typeof Ou&&Ou(n.stateNode,r),Xc(e),Dc)throw Dc=!1,e=Lc,Lc=null,e;return 0!=(8&Ec)||$o(),null}function hu(){for(;null!==Rc;){var e=Rc.effectTag;0!=(256&e)&&nc(Rc.alternate,Rc),0==(512&e)||zc||(zc=!0,Yo(97,(function(){return mu(),null}))),Rc=Rc.nextEffect}}function mu(){if(90!==Hc){var e=97<Hc?97:Hc;return Hc=90,Bo(e,vu)}}function vu(){if(null===Vc)return!1;var e=Vc;if(Vc=null,0!=(48&Ec))throw Error(a(331));var t=Ec;for(Ec|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rc(5,n),oc(5,n)}}catch(t){if(null===e)throw Error(a(330));bu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ec=t,$o(),!0}function gu(e,t,n){si(e,t=hc(e,t=Za(n,t),1073741823)),null!==(e=Kc(e,1073741823))&&Xc(e)}function bu(e,t){if(3===e.tag)gu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){gu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ic||!Ic.has(r))){si(n,e=mc(n,e=Za(t,e),1073741823)),null!==(n=Kc(n,1073741823))&&Xc(n);break}}n=n.return}}function yu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),jc===e&&Cc===n?Sc===xc||Sc===Oc&&1073741823===Mc&&Vo()-Ac<500?nu(e,Cc):Nc=!0:Fu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xc(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=qc(t=$c(),e,null)),null!==(e=Kc(e,t))&&Xc(e)}vc=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Ta=!0;else{if(r<n){switch(Ta=!1,t.tag){case 3:za(t),_a();break;case 5:if(Ai(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:Fi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,so(Qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ya(e,t,n):(so(Di,1&Di.current),null!==(t=Ga(e,t,n))?t.sibling:null);so(Di,1&Di.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return qa(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),so(Di,Di.current),!r)return null}return Ga(e,t,n)}Ta=!1}}else Ta=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ri(t,n),o=Gi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var c=r.getDerivedStateFromProps;"function"==typeof c&&mi(t,r,c,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=Ia(null,t,r,!0,i,n)}else t.tag=0,Pa(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return ku(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=Da(null,t,o,e,n);break e;case 1:t=La(null,t,o,e,n);break e;case 11:t=Fa(null,t,o,e,n);break e;case 14:t=Na(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(za(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ci(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)_a(),t=Ga(e,t,n);else{if((o=t.stateNode.hydrate)&&(Oa=On(t.stateNode.containerInfo.firstChild),wa=t,o=xa=!0),o)for(n=Ci(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Pa(e,t,r,n),_a();t=t.child}return t;case 5:return Ai(t),null===e&&ka(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,c=o.children,bn(r,o)?c=null:null!==i&&bn(r,i)&&(t.effectTag|=16),Ra(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Pa(e,t,c,n),t=t.child),t;case 6:return null===e&&ka(t),null;case 13:return Ya(e,t,n);case 4:return Fi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ki(t,null,r,n):Pa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Pa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Pa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,c=t.memoizedProps,i=o.value;var u=t.type._context;if(so(Qo,u._currentValue),u._currentValue=i,null!==c)if(u=c.value,0===(i=Lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(c.children===o.children&&!po.current){t=Ga(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){c=u.child;for(var l=s.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&i)){1===u.tag&&((l=ui(n,null)).tag=2,si(u,l)),u.expirationTime<n&&(u.expirationTime=n),null!==(l=u.alternate)&&l.expirationTime<n&&(l.expirationTime=n),ni(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}l=l.next}}else c=10===u.tag&&u.type===t.type?null:u.child;if(null!==c)c.return=u;else for(c=u;null!==c;){if(c===t){c=null;break}if(null!==(u=c.sibling)){u.return=c.return,c=u;break}c=c.return}u=c}Pa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Pa(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),Na(e,t,o,i=Ko(o.type,i),r,n);case 15:return Aa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ri(t,n),bi(t,r,o),wi(t,r,o,n),Ia(null,t,r,!0,e,n);case 19:return qa(e,t,n)}throw Error(a(156,t.tag))};var Ou=null,xu=null;function Eu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function ju(e,t,n,r){return new Eu(e,t,n,r)}function ku(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var n=e.alternate;return null===n?((n=ju(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Su(e,t,n,r,o,i){var c=2;if(r=e,"function"==typeof e)ku(e)&&(c=1);else if("string"==typeof e)c=5;else e:switch(e){case ne:return _u(n.children,o,i,t);case ce:c=8,o|=7;break;case re:c=8,o|=1;break;case oe:return(e=ju(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case se:return(e=ju(13,n,t,o)).type=se,e.elementType=se,e.expirationTime=i,e;case le:return(e=ju(19,n,t,o)).elementType=le,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:c=10;break e;case ae:c=9;break e;case ue:c=11;break e;case fe:c=14;break e;case de:c=16,r=null;break e;case pe:c=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=ju(c,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function _u(e,t,n,r){return(e=ju(7,e,r,t)).expirationTime=n,e}function Mu(e,t,n){return(e=ju(6,e,null,t)).expirationTime=n,e}function Tu(e,t,n){return(t=ju(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Pu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Fu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Nu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Au(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Ru(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Du(e,t,n,r){var o=t.current,i=$c(),c=pi.suspense;i=qc(i,o,c);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(vo(s)){n=yo(n,s,u);break e}}n=u}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,c)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),Gc(o,i),i}function Lu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Iu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function zu(e,t){Iu(e,t),(e=e.alternate)&&Iu(e,t)}function Vu(e,t,n){var r=new Pu(e,t,n=null!=n&&!0===n.hydrate),o=ju(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Ct.forEach((function(e){ht(e,t,n)})),St.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var c=o;o=function(){var e=Lu(a);c.call(e)}}Du(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Vu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Lu(a);u.call(e)}}tu((function(){Du(t,a,e,o)}))}return Lu(a)}function Bu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Hu(t))throw Error(a(200));return Bu(e,t,null,n)}Vu.prototype.render=function(e){Du(e,this._internalRoot,null,null)},Vu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Du(null,e,null,(function(){t[Cn]=null}))},mt=function(e){if(13===e.tag){var t=Go($c(),150,100);Gc(e,t),zu(e,t)}},vt=function(e){13===e.tag&&(Gc(e,3),zu(e,3))},gt=function(e){if(13===e.tag){var t=$c();Gc(e,t=qc(t,e,null)),zu(e,t)}},_=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Tn(r);if(!o)throw Error(a(90));Oe(r),ke(r,o)}}}break;case"textarea":Fe(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},A=eu,R=function(e,t,n,r,o){var i=Ec;Ec|=4;try{return Bo(98,e.bind(null,t,n,r,o))}finally{0===(Ec=i)&&$o()}},D=function(){0==(49&Ec)&&(function(){if(null!==Wc){var e=Wc;Wc=null,e.forEach((function(e,t){Ru(t,e),Xc(t)})),$o()}}(),mu())},L=function(e,t){var n=Ec;Ec|=2;try{return e(t)}finally{0===(Ec=n)&&$o()}};var Uu,$u,qu={Events:[_n,Mn,Tn,C,E,Ln,function(e){ot(e,Dn)},F,N,Xt,ct,mu,{current:!1}]};$u=(Uu={findFiberByHostInstance:Sn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ou=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},xu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Uu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Q.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $u?$u(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=qu,t.createPortal=Yu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Ec))throw Error(a(187));var n=Ec;Ec|=1;try{return Bo(99,e.bind(null,t))}finally{Ec=n,$o()}},t.hydrate=function(e,t,n){if(!Hu(t))throw Error(a(200));return Wu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Hu(t))throw Error(a(200));return Wu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Hu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){Wu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Yu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Hu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Wu(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(488)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,c;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,l=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(l,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(l,0))},o=function(e,t){s=setTimeout(e,t)},i=function(){clearTimeout(s)},a=function(){return!1},c=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var b=!1,y=null,w=-1,O=5,x=0;a=function(){return t.unstable_now()>=x},c=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):O=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,j=E.port2;E.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();x=e+O;try{y(!0,e)?j.postMessage(null):(b=!1,y=null)}catch(e){throw j.postMessage(null),e}}else b=!1},r=function(e){y=e,b||(b=!0,j.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],c=i+1,u=e[c];if(void 0!==a&&0>_(a,n))void 0!==u&&0>_(u,a)?(e[r]=u,e[c]=n,r=c):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],T=[],P=1,F=null,N=3,A=!1,R=!1,D=!1;function L(e){for(var t=C(T);null!==t;){if(null===t.callback)S(T);else{if(!(t.startTime<=e))break;S(T),t.sortIndex=t.expirationTime,k(M,t)}t=C(T)}}function I(e){if(D=!1,L(e),!R)if(null!==C(M))R=!0,r(z);else{var t=C(T);null!==t&&o(I,t.startTime-e)}}function z(e,n){R=!1,D&&(D=!1,i()),A=!0;var r=N;try{for(L(n),F=C(M);null!==F&&(!(F.expirationTime>n)||e&&!a());){var c=F.callback;if(null!==c){F.callback=null,N=F.priorityLevel;var u=c(F.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?F.callback=u:F===C(M)&&S(M),L(n)}else S(M);F=C(M)}if(null!==F)var s=!0;else{var l=C(T);null!==l&&o(I,l.startTime-n),s=!1}return s}finally{F=null,N=r,A=!1}}function V(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var H=c;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||A||(R=!0,r(z))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return C(M)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=H,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var c=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?c+u:c,a="number"==typeof a.timeout?a.timeout:V(e)}else a=V(e),u=c;return e={id:P++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>c?(e.sortIndex=u,k(T,e),null===C(M)&&e===C(T)&&(D?i():D=!0,o(I,u-c))):(e.sortIndex=a,k(M,e),R||A||(R=!0,r(z))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=C(M);return n!==F&&null!==F&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<F.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){"use strict";var r,o,i,a=n(6),c=n(60),u=n(187),s=n(17),l=n(15),f=n(46),d=n(185),p=n(84),h=n(232),m=n(43),v=n(18),g=n(40),b=n(230),y=n(235),w=n(314).set,O=n(491),x=n(494),E=n(236),j=n(316),k=n(92),C=n(127),S=n(150),_=n(151),M=S.CONSTRUCTOR,T=S.REJECTION_EVENT,P=S.SUBCLASSING,F=k.getterFor("Promise"),N=k.set,A=C&&C.prototype,R=C,D=A,L=s.TypeError,I=s.document,z=s.process,V=_.f,H=V,W=!!(I&&I.createEvent&&s.dispatchEvent),B=function(e){var t;return!(!g(e)||!v(t=e.then))&&t},Y=function(e,t){var n,r,o,i=t.value,a=1===t.state,c=a?e.ok:e.fail,u=e.resolve,s=e.reject,f=e.domain;try{c?(a||(2===t.rejection&&K(t),t.rejection=1),!0===c?n=i:(f&&f.enter(),n=c(i),f&&(f.exit(),o=!0)),n===e.promise?s(L("Promise-chain cycle")):(r=B(n))?l(r,n,u,s):u(n)):s(i)}catch(e){f&&!o&&f.exit(),s(e)}},U=function(e,t){e.notified||(e.notified=!0,O((function(){for(var n,r=e.reactions;n=r.get();)Y(n,e);e.notified=!1,t&&!e.rejection&&q(e)})))},$=function(e,t,n){var r,o;W?((r=I.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),s.dispatchEvent(r)):r={promise:t,reason:n},!T&&(o=s["on"+e])?o(r):"unhandledrejection"===e&&x("Unhandled promise rejection",n)},q=function(e){l(w,s,(function(){var t,n=e.facade,r=e.value;if(G(e)&&(t=E((function(){u?z.emit("unhandledRejection",r,n):$("unhandledrejection",n,r)})),e.rejection=u||G(e)?2:1,t.error))throw t.value}))},G=function(e){return 1!==e.rejection&&!e.parent},K=function(e){l(w,s,(function(){var t=e.facade;u?z.emit("rejectionHandled",t):$("rejectionhandled",t,e.value)}))},Q=function(e,t,n){return function(r){e(t,r,n)}},X=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,U(e,!0))},Z=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw L("Promise can't be resolved itself");var r=B(t);r?O((function(){var n={done:!1};try{l(r,t,Q(Z,n,e),Q(X,n,e))}catch(t){X(n,t,e)}})):(e.value=t,e.state=1,U(e,!1))}catch(t){X({done:!1},t,e)}}};if(M&&(D=(R=function(e){b(this,D),m(e),l(r,this);var t=F(this);try{e(Q(Z,t),Q(X,t))}catch(e){X(t,e)}}).prototype,(r=function(e){N(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:new j,rejection:!1,state:0,value:void 0})}).prototype=f(D,"then",(function(e,t){var n=F(this),r=V(y(this,R));return n.parent=!0,r.ok=!v(e)||e,r.fail=v(t)&&t,r.domain=u?z.domain:void 0,0===n.state?n.reactions.add(r):O((function(){Y(r,n)})),r.promise})),o=function(){var e=new r,t=F(e);this.promise=e,this.resolve=Q(Z,t),this.reject=Q(X,t)},_.f=V=function(e){return e===R||void 0===e?new o(e):H(e)},!c&&v(C)&&A!==Object.prototype)){i=A.then,P||f(A,"then",(function(e,t){var n=this;return new R((function(e,t){l(i,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete A.constructor}catch(e){}d&&d(A,D)}a({global:!0,constructor:!0,wrap:!0,forced:M},{Promise:R}),p(R,"Promise",!1,!0),h("Promise")},function(e,t,n){"use strict";var r=TypeError;e.exports=function(e,t){if(e<t)throw r("Not enough arguments");return e}},function(e,t,n){"use strict";var r,o,i,a,c,u=n(17),s=n(37),l=n(83).f,f=n(314).set,d=n(316),p=n(315),h=n(492),m=n(493),v=n(187),g=u.MutationObserver||u.WebKitMutationObserver,b=u.document,y=u.process,w=u.Promise,O=l(u,"queueMicrotask"),x=O&&O.value;if(!x){var E=new d,j=function(){var e,t;for(v&&(e=y.domain)&&e.exit();t=E.get();)try{t()}catch(e){throw E.head&&r(),e}e&&e.enter()};p||v||m||!g||!b?!h&&w&&w.resolve?((a=w.resolve(void 0)).constructor=w,c=s(a.then,a),r=function(){c(j)}):v?r=function(){y.nextTick(j)}:(f=s(f,u),r=function(){f(j)}):(o=!0,i=b.createTextNode(""),new g(j).observe(i,{characterData:!0}),r=function(){i.data=o=!o}),x=function(e){E.head||r(),E.add(e)}}e.exports=x},function(e,t,n){"use strict";var r=n(161);e.exports=/ipad|iphone|ipod/i.test(r)&&"undefined"!=typeof Pebble},function(e,t,n){"use strict";var r=n(161);e.exports=/web0s(?!.*chrome)/i.test(r)},function(e,t,n){"use strict";e.exports=function(e,t){try{1===arguments.length?console.error(e):console.error(e,t)}catch(e){}}},function(e,t,n){"use strict";var r=n(317),o=n(187);e.exports=!r&&!o&&"object"==typeof window&&"object"==typeof document},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(43),a=n(151),c=n(236),u=n(93);r({target:"Promise",stat:!0,forced:n(318)},{all:function(e){var t=this,n=a.f(t),r=n.resolve,s=n.reject,l=c((function(){var n=i(t.resolve),a=[],c=0,l=1;u(e,(function(e){var i=c++,u=!1;l++,o(n,t,e).then((function(e){u||(u=!0,a[i]=e,--l||r(a))}),s)})),--l||r(a)}));return l.error&&s(l.value),n.promise}})},function(e,t,n){"use strict";var r=n(6),o=n(60),i=n(150).CONSTRUCTOR,a=n(127),c=n(44),u=n(18),s=n(46),l=a&&a.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&u(a)){var f=c("Promise").prototype.catch;l.catch!==f&&s(l,"catch",f,{unsafe:!0})}},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(43),a=n(151),c=n(236),u=n(93);r({target:"Promise",stat:!0,forced:n(318)},{race:function(e){var t=this,n=a.f(t),r=n.reject,s=c((function(){var a=i(t.resolve);u(e,(function(e){o(a,t,e).then(n.resolve,r)}))}));return s.error&&r(s.value),n.promise}})},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(151);r({target:"Promise",stat:!0,forced:n(150).CONSTRUCTOR},{reject:function(e){var t=i.f(this);return o(t.reject,void 0,e),t.promise}})},function(e,t,n){"use strict";var r=n(6),o=n(44),i=n(60),a=n(127),c=n(150).CONSTRUCTOR,u=n(319),s=o("Promise"),l=i&&!c;r({target:"Promise",stat:!0,forced:i||c},{resolve:function(e){return u(l&&this===s?a:this,e)}})},function(e,t,n){var r=n(188),o=n(506);e.exports=function(e){return o(r(e).toLowerCase())}},function(e,t,n){var r=n(216),o=n(503),i=n(354),a=n(360),c=r?r.prototype:void 0,u=c?c.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(a(t))return u?u.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(216),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,c=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,c),n=e[c];try{e[c]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[c]=n:delete e[c]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(507)("toUpperCase");e.exports=r},function(e,t,n){var r=n(508),o=n(321),i=n(510),a=n(188);e.exports=function(e){return function(t){t=a(t);var n=o(t)?i(t):void 0,c=n?n[0]:t.charAt(0),u=n?r(n,1).join(""):t.slice(1);return c[e]()+u}}},function(e,t,n){var r=n(509);e.exports=function(e,t,n){var o=e.length;return n=void 0===n?o:n,!t&&n>=o?e:r(e,t,n)}},function(e,t){e.exports=function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}},function(e,t,n){var r=n(511),o=n(321),i=n(512);e.exports=function(e){return o(e)?i(e):r(e)}},function(e,t){e.exports=function(e){return e.split("")}},function(e,t){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^\\ud800-\\udfff]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",c="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+r+"|"+o+")"+"?",s="[\\ufe0e\\ufe0f]?"+u+("(?:\\u200d(?:"+[i,a,c].join("|")+")[\\ufe0e\\ufe0f]?"+u+")*"),l="(?:"+[i+r+"?",r,a,c,n].join("|")+")",f=RegExp(o+"(?="+o+")|"+l+s,"g");e.exports=function(e){return e.match(f)||[]}},function(e,t,n){var r=n(514),o=n(515),i=n(518),a=RegExp("['’]","g");e.exports=function(e){return function(t){return r(i(o(t).replace(a,"")),e,"")}}},function(e,t){e.exports=function(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}},function(e,t,n){var r=n(516),o=n(188),i=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,a=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");e.exports=function(e){return(e=o(e))&&e.replace(i,r).replace(a,"")}},function(e,t,n){var r=n(517)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});e.exports=r},function(e,t){e.exports=function(e){return function(t){return null==e?void 0:e[t]}}},function(e,t,n){var r=n(519),o=n(520),i=n(188),a=n(521);e.exports=function(e,t,n){return e=i(e),void 0===(t=n?void 0:t)?o(e)?a(e):r(e):e.match(t)||[]}},function(e,t){var n=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;e.exports=function(e){return e.match(n)||[]}},function(e,t){var n=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;e.exports=function(e){return n.test(e)}},function(e,t){var n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",r="["+n+"]",o="\\d+",i="[\\u2700-\\u27bf]",a="[a-z\\xdf-\\xf6\\xf8-\\xff]",c="[^\\ud800-\\udfff"+n+o+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",u="(?:\\ud83c[\\udde6-\\uddff]){2}",s="[\\ud800-\\udbff][\\udc00-\\udfff]",l="[A-Z\\xc0-\\xd6\\xd8-\\xde]",f="(?:"+a+"|"+c+")",d="(?:"+l+"|"+c+")",p="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",h="[\\ufe0e\\ufe0f]?"+p+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",u,s].join("|")+")[\\ufe0e\\ufe0f]?"+p+")*"),m="(?:"+[i,u,s].join("|")+")"+h,v=RegExp([l+"?"+a+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[r,l,"$"].join("|")+")",d+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[r,l+f,"$"].join("|")+")",l+"?"+f+"+(?:['’](?:d|ll|m|re|s|t|ve))?",l+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",o,m].join("|"),"g");e.exports=function(e){return e.match(v)||[]}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,O=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case g:case v:case s:return e;default:return t}}case i:return t}}}function E(e){return x(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||x(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===l},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===c},t.isSuspense=function(e){return x(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===l||e.$$typeof===p||e.$$typeof===y||e.$$typeof===w||e.$$typeof===O||e.$$typeof===b)},t.typeOf=x},function(e,t,n){"use strict";var r=n(29),o=n(275),i=TypeError;e.exports=function(e){if(r(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw i("Incorrect hint");return o(this,e)}},function(e,t,n){"use strict";var r=n(11);e.exports=r(1..valueOf)},function(e,t,n){"use strict";var r=n(11),o=n(89),i=n(49),a=n(526),c=r("".replace),u=RegExp("^["+a+"]+"),s=RegExp("(^|[^"+a+"])["+a+"]+$"),l=function(e){return function(t){var n=i(o(t));return 1&e&&(n=c(n,u,"")),2&e&&(n=c(n,s,"$1")),n}};e.exports={start:l(1),end:l(2),trim:l(3)}},function(e,t,n){"use strict";e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,t,n){"use strict";var r=n(141).forEach,o=n(254)("forEach");e.exports=o?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},function(e,t,n){"use strict";var r=n(36),o=n(11),i=n(15),a=n(13),c=n(178),u=n(174),s=n(218),l=n(77),f=n(167),d=Object.assign,p=Object.defineProperty,h=o([].concat);e.exports=!d||a((function(){if(r&&1!==d({b:1},d(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol("assign detection");return e[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e})),7!==d({},e)[n]||"abcdefghijklmnopqrst"!==c(d({},t)).join("")}))?function(e,t){for(var n=l(e),o=arguments.length,a=1,d=u.f,p=s.f;o>a;)for(var m,v=f(arguments[a++]),g=d?h(c(v),d(v)):c(v),b=g.length,y=0;b>y;)m=g[y++],r&&!i(p,v,m)||(n[m]=v[m]);return n}:d},function(e,t,n){"use strict";var r=n(57),o=n(326),i=n(530),a=n(332);function c(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=c(n(329));u.Axios=i,u.create=function(e){return c(a(u.defaults,e))},u.Cancel=n(333),u.CancelToken=n(543),u.isCancel=n(328),u.all=function(e){return Promise.all(e)},u.spread=n(544),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(57),o=n(327),i=n(531),a=n(532),c=n(332);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=c(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=c(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(57);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(57),o=n(533),i=n(328),a=n(329);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(57);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(57);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(331);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(538),o=n(539);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(57),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(57);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(57);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var c=[];c.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&c.push("expires="+new Date(n).toGMTString()),r.isString(o)&&c.push("path="+o),r.isString(i)&&c.push("domain="+i),!0===a&&c.push("secure"),document.cookie=c.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(333);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(36),o=n(17),i=n(11),a=n(145),c=n(231),u=n(104),s=n(123).f,l=n(91),f=n(258),d=n(49),p=n(322),h=n(237),m=n(546),v=n(46),g=n(13),b=n(28),y=n(92).enforce,w=n(232),O=n(19),x=n(324),E=n(325),j=O("match"),k=o.RegExp,C=k.prototype,S=o.SyntaxError,_=i(C.exec),M=i("".charAt),T=i("".replace),P=i("".indexOf),F=i("".slice),N=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,A=/a/g,R=/a/g,D=new k(A)!==A,L=h.MISSED_STICKY,I=h.UNSUPPORTED_Y,z=r&&(!D||L||x||E||g((function(){return R[j]=!1,k(A)!==A||k(R)===R||"/a/i"!==String(k(A,"i"))})));if(a("RegExp",z)){for(var V=function(e,t){var n,r,o,i,a,s,h=l(C,this),m=f(e),v=void 0===t,g=[],w=e;if(!h&&m&&v&&e.constructor===V)return e;if((m||l(C,e))&&(e=e.source,v&&(t=p(w))),e=void 0===e?"":d(e),t=void 0===t?"":d(t),w=e,x&&"dotAll"in A&&(r=!!t&&P(t,"s")>-1)&&(t=T(t,/s/g,"")),n=t,L&&"sticky"in A&&(o=!!t&&P(t,"y")>-1)&&I&&(t=T(t,/y/g,"")),E&&(e=(i=function(e){for(var t,n=e.length,r=0,o="",i=[],a={},c=!1,u=!1,s=0,l="";r<=n;r++){if("\\"===(t=M(e,r)))t+=M(e,++r);else if("]"===t)c=!1;else if(!c)switch(!0){case"["===t:c=!0;break;case"("===t:_(N,F(e,r+1))&&(r+=2,u=!0),o+=t,s++;continue;case">"===t&&u:if(""===l||b(a,l))throw new S("Invalid capture group name");a[l]=!0,i[i.length]=[l,s],u=!1,l="";continue}u?l+=t:o+=t}return[o,i]}(e))[0],g=i[1]),a=c(k(e,t),h?this:C,V),(r||o||g.length)&&(s=y(a),r&&(s.dotAll=!0,s.raw=V(function(e){for(var t,n=e.length,r=0,o="",i=!1;r<=n;r++)"\\"!==(t=M(e,r))?i||"."!==t?("["===t?i=!0:"]"===t&&(i=!1),o+=t):o+="[\\s\\S]":o+=t+M(e,++r);return o}(e),n)),o&&(s.sticky=!0),g.length&&(s.groups=g)),e!==w)try{u(a,"source",""===w?"(?:)":w)}catch(e){}return a},H=s(k),W=0;H.length>W;)m(V,k,H[W++]);C.constructor=V,V.prototype=C,v(o,"RegExp",V,{constructor:!0})}w("RegExp")},function(e,t,n){"use strict";var r=n(41).f;e.exports=function(e,t,n){n in e||r(e,n,{configurable:!0,get:function(){return t[n]},set:function(e){t[n]=e}})}},function(e,t,n){"use strict";var r=n(11),o=n(77),i=Math.floor,a=r("".charAt),c=r("".replace),u=r("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,l=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,n,r,f,d){var p=n+e.length,h=r.length,m=l;return void 0!==f&&(f=o(f),m=s),c(d,m,(function(o,c){var s;switch(a(c,0)){case"$":return"$";case"&":return e;case"`":return u(t,0,n);case"'":return u(t,p);case"<":s=f[u(c,1,-1)];break;default:var l=+c;if(0===l)return o;if(l>h){var d=i(l/10);return 0===d?o:d<=h?void 0===r[d-1]?a(c,1):r[d-1]+a(c,1):o}s=r[l-1]}return void 0===s?"":s}))}},function(e,t,n){"use strict";var r=n(6),o=n(11),i=n(167),a=n(66),c=n(254),u=o([].join);r({target:"Array",proto:!0,forced:i!==Object||!c("join",",")},{join:function(e){return u(a(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(179),o=n(15),i=n(11),a=n(240),c=n(29),u=n(67),s=n(258),l=n(89),f=n(235),d=n(241),p=n(173),h=n(49),m=n(122),v=n(252),g=n(242),b=n(190),y=n(237),w=n(13),O=y.UNSUPPORTED_Y,x=Math.min,E=[].push,j=i(/./.exec),k=i(E),C=i("".slice);a("split",(function(e,t,n){var i;return i="c"==="abbc".split(/(b)*/)[1]||4!=="test".split(/(?:)/,-1).length||2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var i=h(l(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!s(e))return o(t,i,e,a);for(var c,u,f,d=[],p=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),m=0,g=new RegExp(e.source,p+"g");(c=o(b,g,i))&&!((u=g.lastIndex)>m&&(k(d,C(i,m,c.index)),c.length>1&&c.index<i.length&&r(E,d,v(c,1)),f=c[0].length,m=u,d.length>=a));)g.lastIndex===c.index&&g.lastIndex++;return m===i.length?!f&&j(g,"")||k(d,""):k(d,C(i,m)),d.length>a?v(d,0,a):d}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:o(t,this,e,n)}:t,[function(t,n){var r=l(this),a=u(t)?void 0:m(t,e);return a?o(a,t,r,n):o(i,h(r),t,n)},function(e,r){var o=c(this),a=h(e),u=n(i,o,a,r,i!==t);if(u.done)return u.value;var s=f(o,RegExp),l=o.unicode,m=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(O?"g":"y"),v=new s(O?"^(?:"+o.source+")":o,m),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===a.length)return null===g(v,a)?[a]:[];for(var y=0,w=0,E=[];w<a.length;){v.lastIndex=O?0:w;var j,S=g(v,O?C(a,w):a);if(null===S||(j=x(p(v.lastIndex+(O?w:0)),a.length))===y)w=d(a,w,l);else{if(k(E,C(a,y,w)),E.length===b)return E;for(var _=1;_<=S.length-1;_++)if(k(E,S[_]),E.length===b)return E;w=y=j}}return k(E,C(a,y)),E}]}),!!w((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),O)},function(e,t,n){"use strict";var r=n(15),o=n(240),i=n(29),a=n(67),c=n(173),u=n(49),s=n(89),l=n(122),f=n(241),d=n(242);o("match",(function(e,t,n){return[function(t){var n=s(this),o=a(t)?void 0:l(t,e);return o?r(o,t,n):new RegExp(t)[e](u(n))},function(e){var r=i(this),o=u(e),a=n(t,r,o);if(a.done)return a.value;if(!r.global)return d(r,o);var s=r.unicode;r.lastIndex=0;for(var l,p=[],h=0;null!==(l=d(r,o));){var m=u(l[0]);p[h]=m,""===m&&(r.lastIndex=f(o,c(r.lastIndex),s)),h++}return 0===h?null:p}]}))},,function(e,t,n){"use strict";var r=n(553);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports=n(556)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,O=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case g:case v:case s:return e;default:return t}}case i:return t}}}function E(e){return x(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||x(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===l},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===c},t.isSuspense=function(e){return x(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===l||e.$$typeof===p||e.$$typeof===y||e.$$typeof===w||e.$$typeof===O||e.$$typeof===b)},t.typeOf=x},function(e,t,n){"use strict";e.exports=n(558)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,O=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case g:case v:case s:return e;default:return t}}case i:return t}}}function E(e){return x(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||x(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===l},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===c},t.isSuspense=function(e){return x(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===l||e.$$typeof===p||e.$$typeof===y||e.$$typeof===w||e.$$typeof===O||e.$$typeof===b)},t.typeOf=x},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(33))},,function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 10-56 0z"}}]},name:"lock",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="LockOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";var r=n(3),o=n(0),i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M705.6 124.9a8 8 0 00-11.6 7.2v64.2c0 5.5 2.9 10.6 7.5 13.6a352.2 352.2 0 0162.2 49.8c32.7 32.8 58.4 70.9 76.3 113.3a355 355 0 0127.9 138.7c0 48.1-9.4 94.8-27.9 138.7a355.92 355.92 0 01-76.3 113.3 353.06 353.06 0 01-113.2 76.4c-43.8 18.6-90.5 28-138.5 28s-94.7-9.4-138.5-28a353.06 353.06 0 01-113.2-76.4A355.92 355.92 0 01184 650.4a355 355 0 01-27.9-138.7c0-48.1 9.4-94.8 27.9-138.7 17.9-42.4 43.6-80.5 76.3-113.3 19-19 39.8-35.6 62.2-49.8 4.7-2.9 7.5-8.1 7.5-13.6V132c0-6-6.3-9.8-11.6-7.2C178.5 195.2 82 339.3 80 506.3 77.2 745.1 272.5 943.5 511.2 944c239 .5 432.8-193.3 432.8-432.4 0-169.2-97-315.7-238.4-386.7zM480 560h64c4.4 0 8-3.6 8-8V88c0-4.4-3.6-8-8-8h-64c-4.4 0-8 3.6-8 8v464c0 4.4 3.6 8 8 8z"}}]},name:"poweroff",theme:"outlined"},a=n(14),c=function(e,t){return o.createElement(a.a,Object(r.a)(Object(r.a)({},e),{},{ref:t,icon:i}))};c.displayName="PoweroffOutlined";t.a=o.forwardRef(c)},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return u}));var r=n(20),o=n(153),i=n(111),a=n(10),c=function(){function e(t,n){var o;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=Object(r.e)(t)),this.originalInput=t;var a=Object(i.a)(t);this.originalInput=t,this.r=a.r,this.g=a.g,this.b=a.b,this.a=a.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(o=n.format)&&void 0!==o?o:a.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=a.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=Object(a.b)(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){return 0===this.toHsl().s},e.prototype.toHsv=function(){var e=Object(r.i)(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=Object(r.i)(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),o=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(o,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(o,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=Object(r.h)(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=Object(r.h)(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),o=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(o,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(o,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),Object(r.g)(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),Object(r.l)(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toHexShortString=function(e){return void 0===e&&(e=!1),1===this.a?this.toHexString(e):this.toHex8String(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*Object(a.a)(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*Object(a.a)(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+Object(r.g)(this.r,this.g,this.b,!1),t=0,n=Object.entries(o.a);t<n.length;t++){var i=n[t],a=i[0];if(e===i[1])return a}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=Object(a.c)(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=Object(a.c)(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=Object(a.c)(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=Object(a.c)(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),o=new e(t).toRgb(),i=n/100;return new e({r:(o.r-r.r)*i+r.r,g:(o.g-r.g)*i+r.g,b:(o.b-r.b)*i+r.b,a:(o.a-r.a)*i+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),o=360/n,i=[this];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,i.push(new e(r));return i},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,o=n.s,i=n.v,a=[],c=1/t;t--;)a.push(new e({h:r,s:o,v:i})),i=(i+c)%1;return a},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),o=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/o,g:(n.g*n.a+r.g*r.a*(1-n.a))/o,b:(n.b*n.a+r.b*r.a*(1-n.a))/o,a:o})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,o=[this],i=360/t,a=1;a<t;a++)o.push(new e({h:(r+a*i)%360,s:n.s,l:n.l}));return o},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();function u(e,t){return void 0===e&&(e=""),void 0===t&&(t={}),new c(e,t)}},,function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(4),a=n(165),c=n(5),u=n.n(c),s=n(48),l=n(0),f=n(70),d=n(157),p=n(206),h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},m=function(e){var t,n=e.prefixCls,i=e.className,a=e.checked,c=e.onChange,s=e.onClick,d=h(e,["prefixCls","className","checked","onChange","onClick"]),p=(0,l.useContext(f.b).getPrefixCls)("tag",n),m=u()(p,(t={},Object(r.a)(t,"".concat(p,"-checkable"),!0),Object(r.a)(t,"".concat(p,"-checkable-checked"),a),t),i);return l.createElement("span",Object(o.a)({},d,{className:m,onClick:function(e){null==c||c(!a),null==s||s(e)}}))},v=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},g=new RegExp("^(".concat(d.a.join("|"),")(-inverse)?$")),b=new RegExp("^(".concat(d.b.join("|"),")$")),y=function(e,t){var n,c=e.prefixCls,d=e.className,h=e.style,m=e.children,y=e.icon,w=e.color,O=e.onClose,x=e.closeIcon,E=e.closable,j=void 0!==E&&E,k=v(e,["prefixCls","className","style","children","icon","color","onClose","closeIcon","closable"]),C=l.useContext(f.b),S=C.getPrefixCls,_=C.direction,M=l.useState(!0),T=Object(i.a)(M,2),P=T[0],F=T[1];l.useEffect((function(){"visible"in k&&F(k.visible)}),[k.visible]);var N=function(){return!!w&&(g.test(w)||b.test(w))},A=Object(o.a)({backgroundColor:w&&!N()?w:void 0},h),R=N(),D=S("tag",c),L=u()(D,(n={},Object(r.a)(n,"".concat(D,"-").concat(w),R),Object(r.a)(n,"".concat(D,"-has-color"),w&&!R),Object(r.a)(n,"".concat(D,"-hidden"),!P),Object(r.a)(n,"".concat(D,"-rtl"),"rtl"===_),n),d),I=function(e){e.stopPropagation(),null==O||O(e),e.defaultPrevented||"visible"in k||F(!1)},z="onClick"in k||m&&"a"===m.type,V=Object(s.a)(k,["visible"]),H=y||null,W=H?l.createElement(l.Fragment,null,H,l.createElement("span",null,m)):m,B=l.createElement("span",Object(o.a)({},V,{ref:t,className:L,style:A}),W,j?x?l.createElement("span",{className:"".concat(D,"-close-icon"),onClick:I},x):l.createElement(a.a,{className:"".concat(D,"-close-icon"),onClick:I}):null);return z?l.createElement(p.a,null,B):B},w=l.forwardRef(y);w.CheckableTag=m;t.a=w},,function(e,t,n){"use strict";var r=n(2),o=n(1),i=n(7),a=n(4),c=n(5),u=n.n(c),s=n(0),l=n(70),f=n(335),d=n(113),p=n(39),h=n(201),m=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object(p.a)("top","middle","bottom","stretch"),Object(p.a)("start","end","center","space-around","space-between","space-evenly");function v(e,t){var n=s.useState("string"==typeof e?e:""),r=Object(a.a)(n,2),o=r[0],c=r[1];return s.useEffect((function(){!function(){if("string"==typeof e&&c(e),"object"===Object(i.a)(e))for(var n=0;n<d.b.length;n++){var r=d.b[n];if(t[r]){var o=e[r];if(void 0!==o)return void c(o)}}}()}),[JSON.stringify(e),t]),o}var g=s.forwardRef((function(e,t){var n,c=e.prefixCls,p=e.justify,g=e.align,b=e.className,y=e.style,w=e.children,O=e.gutter,x=void 0===O?0:O,E=e.wrap,j=m(e,["prefixCls","justify","align","className","style","children","gutter","wrap"]),k=s.useContext(l.b),C=k.getPrefixCls,S=k.direction,_=s.useState({xs:!0,sm:!0,md:!0,lg:!0,xl:!0,xxl:!0}),M=Object(a.a)(_,2),T=M[0],P=M[1],F=s.useState({xs:!1,sm:!1,md:!1,lg:!1,xl:!1,xxl:!1}),N=Object(a.a)(F,2),A=N[0],R=N[1],D=v(g,A),L=v(p,A),I=Object(f.a)(),z=s.useRef(x);s.useEffect((function(){var e=d.a.subscribe((function(e){R(e);var t=z.current||0;(!Array.isArray(t)&&"object"===Object(i.a)(t)||Array.isArray(t)&&("object"===Object(i.a)(t[0])||"object"===Object(i.a)(t[1])))&&P(e)}));return function(){return d.a.unsubscribe(e)}}),[]);var V,H=C("row",c),W=(V=[void 0,void 0],(Array.isArray(x)?x:[x,void 0]).forEach((function(e,t){if("object"===Object(i.a)(e))for(var n=0;n<d.b.length;n++){var r=d.b[n];if(T[r]&&void 0!==e[r]){V[t]=e[r];break}}else V[t]=e})),V),B=u()(H,(n={},Object(o.a)(n,"".concat(H,"-no-wrap"),!1===E),Object(o.a)(n,"".concat(H,"-").concat(L),L),Object(o.a)(n,"".concat(H,"-").concat(D),D),Object(o.a)(n,"".concat(H,"-rtl"),"rtl"===S),n),b),Y={},U=null!=W[0]&&W[0]>0?W[0]/-2:void 0,$=null!=W[1]&&W[1]>0?W[1]/-2:void 0;if(U&&(Y.marginLeft=U,Y.marginRight=U),I){var q=Object(a.a)(W,2);Y.rowGap=q[1]}else $&&(Y.marginTop=$,Y.marginBottom=$);var G=Object(a.a)(W,2),K=G[0],Q=G[1],X=s.useMemo((function(){return{gutter:[K,Q],wrap:E,supportFlexGap:I}}),[K,Q,E,I]);return s.createElement(h.a.Provider,{value:X},s.createElement("div",Object(r.a)({},j,{className:B,style:Object(r.a)(Object(r.a)({},Y),y),ref:t}),w))}));t.a=g},function(e,t,n){"use strict";var r=n(1),o=n(129),i=n(80),a=n(130),c=n(3),u=n(0),s={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zM480 416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416zm32 352a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"warning",theme:"filled"},l=n(14),f=function(e,t){return u.createElement(l.a,Object(c.a)(Object(c.a)({},e),{},{ref:t,icon:s}))};f.displayName="WarningFilled";var d=u.forwardRef(f),p=n(5),h=n.n(p),m=n(70),v=function(){return u.createElement("svg",{width:"252",height:"294"},u.createElement("defs",null,u.createElement("path",{d:"M0 .387h251.772v251.772H0z"})),u.createElement("g",{fill:"none",fillRule:"evenodd"},u.createElement("g",{transform:"translate(0 .012)"},u.createElement("mask",{fill:"#fff"}),u.createElement("path",{d:"M0 127.32v-2.095C0 56.279 55.892.387 124.838.387h2.096c68.946 0 124.838 55.892 124.838 124.838v2.096c0 68.946-55.892 124.838-124.838 124.838h-2.096C55.892 252.16 0 196.267 0 127.321",fill:"#E4EBF7",mask:"url(#b)"})),u.createElement("path",{d:"M39.755 130.84a8.276 8.276 0 1 1-16.468-1.66 8.276 8.276 0 0 1 16.468 1.66",fill:"#FFF"}),u.createElement("path",{d:"M36.975 134.297l10.482 5.943M48.373 146.508l-12.648 10.788",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{d:"M39.875 159.352a5.667 5.667 0 1 1-11.277-1.136 5.667 5.667 0 0 1 11.277 1.136M57.588 143.247a5.708 5.708 0 1 1-11.358-1.145 5.708 5.708 0 0 1 11.358 1.145M99.018 26.875l29.82-.014a4.587 4.587 0 1 0-.003-9.175l-29.82.013a4.587 4.587 0 1 0 .003 9.176M110.424 45.211l29.82-.013a4.588 4.588 0 0 0-.004-9.175l-29.82.013a4.587 4.587 0 1 0 .004 9.175",fill:"#FFF"}),u.createElement("path",{d:"M112.798 26.861v-.002l15.784-.006a4.588 4.588 0 1 0 .003 9.175l-15.783.007v-.002a4.586 4.586 0 0 0-.004-9.172M184.523 135.668c-.553 5.485-5.447 9.483-10.931 8.93-5.485-.553-9.483-5.448-8.93-10.932.552-5.485 5.447-9.483 10.932-8.93 5.485.553 9.483 5.447 8.93 10.932",fill:"#FFF"}),u.createElement("path",{d:"M179.26 141.75l12.64 7.167M193.006 156.477l-15.255 13.011",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{d:"M184.668 170.057a6.835 6.835 0 1 1-13.6-1.372 6.835 6.835 0 0 1 13.6 1.372M203.34 153.325a6.885 6.885 0 1 1-13.7-1.382 6.885 6.885 0 0 1 13.7 1.382",fill:"#FFF"}),u.createElement("path",{d:"M151.931 192.324a2.222 2.222 0 1 1-4.444 0 2.222 2.222 0 0 1 4.444 0zM225.27 116.056a2.222 2.222 0 1 1-4.445 0 2.222 2.222 0 0 1 4.444 0zM216.38 151.08a2.223 2.223 0 1 1-4.446-.001 2.223 2.223 0 0 1 4.446 0zM176.917 107.636a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM195.291 92.165a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM202.058 180.711a2.223 2.223 0 1 1-4.446 0 2.223 2.223 0 0 1 4.446 0z",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{stroke:"#FFF",strokeWidth:"2",d:"M214.404 153.302l-1.912 20.184-10.928 5.99M173.661 174.792l-6.356 9.814h-11.36l-4.508 6.484M174.941 125.168v-15.804M220.824 117.25l-12.84 7.901-15.31-7.902V94.39"}),u.createElement("path",{d:"M166.588 65.936h-3.951a4.756 4.756 0 0 1-4.743-4.742 4.756 4.756 0 0 1 4.743-4.743h3.951a4.756 4.756 0 0 1 4.743 4.743 4.756 4.756 0 0 1-4.743 4.742",fill:"#FFF"}),u.createElement("path",{d:"M174.823 30.03c0-16.281 13.198-29.48 29.48-29.48 16.28 0 29.48 13.199 29.48 29.48 0 16.28-13.2 29.48-29.48 29.48-16.282 0-29.48-13.2-29.48-29.48",fill:"#1890FF"}),u.createElement("path",{d:"M205.952 38.387c.5.5.785 1.142.785 1.928s-.286 1.465-.785 1.964c-.572.5-1.214.75-2 .75-.785 0-1.429-.285-1.929-.785-.572-.5-.82-1.143-.82-1.929s.248-1.428.82-1.928c.5-.5 1.144-.75 1.93-.75.785 0 1.462.25 1.999.75m4.285-19.463c1.428 1.249 2.143 2.963 2.143 5.142 0 1.712-.427 3.13-1.219 4.25-.067.096-.137.18-.218.265-.416.429-1.41 1.346-2.956 2.699a5.07 5.07 0 0 0-1.428 1.75 5.207 5.207 0 0 0-.536 2.357v.5h-4.107v-.5c0-1.357.215-2.536.714-3.5.464-.964 1.857-2.464 4.178-4.536l.43-.5c.643-.785.964-1.643.964-2.535 0-1.18-.358-2.108-1-2.785-.678-.68-1.643-1.001-2.858-1.001-1.536 0-2.642.464-3.357 1.43-.37.5-.621 1.135-.76 1.904a1.999 1.999 0 0 1-1.971 1.63h-.004c-1.277 0-2.257-1.183-1.98-2.43.337-1.518 1.02-2.78 2.073-3.784 1.536-1.5 3.607-2.25 6.25-2.25 2.32 0 4.214.607 5.642 1.894",fill:"#FFF"}),u.createElement("path",{d:"M52.04 76.131s21.81 5.36 27.307 15.945c5.575 10.74-6.352 9.26-15.73 4.935-10.86-5.008-24.7-11.822-11.577-20.88",fill:"#FFB594"}),u.createElement("path",{d:"M90.483 67.504l-.449 2.893c-.753.49-4.748-2.663-4.748-2.663l-1.645.748-1.346-5.684s6.815-4.589 8.917-5.018c2.452-.501 9.884.94 10.7 2.278 0 0 1.32.486-2.227.69-3.548.203-5.043.447-6.79 3.132-1.747 2.686-2.412 3.624-2.412 3.624",fill:"#FFC6A0"}),u.createElement("path",{d:"M128.055 111.367c-2.627-7.724-6.15-13.18-8.917-15.478-3.5-2.906-9.34-2.225-11.366-4.187-1.27-1.231-3.215-1.197-3.215-1.197s-14.98-3.158-16.828-3.479c-2.37-.41-2.124-.714-6.054-1.405-1.57-1.907-2.917-1.122-2.917-1.122l-7.11-1.383c-.853-1.472-2.423-1.023-2.423-1.023l-2.468-.897c-1.645 9.976-7.74 13.796-7.74 13.796 1.795 1.122 15.703 8.3 15.703 8.3l5.107 37.11s-3.321 5.694 1.346 9.109c0 0 19.883-3.743 34.921-.329 0 0 3.047-2.546.972-8.806.523-3.01 1.394-8.263 1.736-11.622.385.772 2.019 1.918 3.14 3.477 0 0 9.407-7.365 11.052-14.012-.832-.723-1.598-1.585-2.267-2.453-.567-.736-.358-2.056-.765-2.717-.669-1.084-1.804-1.378-1.907-1.682",fill:"#FFF"}),u.createElement("path",{d:"M101.09 289.998s4.295 2.041 7.354 1.021c2.821-.94 4.53.668 7.08 1.178 2.55.51 6.874 1.1 11.686-1.26-.103-5.51-6.889-3.98-11.96-6.713-2.563-1.38-3.784-4.722-3.598-8.799h-9.402s-1.392 10.52-1.16 14.573",fill:"#CBD1D1"}),u.createElement("path",{d:"M101.067 289.826s2.428 1.271 6.759.653c3.058-.437 3.712.481 7.423 1.031 3.712.55 10.724-.069 11.823-.894.413 1.1-.343 2.063-.343 2.063s-1.512.603-4.812.824c-2.03.136-5.8.291-7.607-.503-1.787-1.375-5.247-1.903-5.728-.241-3.918.95-7.355-.286-7.355-.286l-.16-2.647z",fill:"#2B0849"}),u.createElement("path",{d:"M108.341 276.044h3.094s-.103 6.702 4.536 8.558c-4.64.618-8.558-2.303-7.63-8.558",fill:"#A4AABA"}),u.createElement("path",{d:"M57.542 272.401s-2.107 7.416-4.485 12.306c-1.798 3.695-4.225 7.492 5.465 7.492 6.648 0 8.953-.48 7.423-6.599-1.53-6.12.266-13.199.266-13.199h-8.669z",fill:"#CBD1D1"}),u.createElement("path",{d:"M51.476 289.793s2.097 1.169 6.633 1.169c6.083 0 8.249-1.65 8.249-1.65s.602 1.114-.619 2.165c-.993.855-3.597 1.591-7.39 1.546-4.145-.048-5.832-.566-6.736-1.168-.825-.55-.687-1.58-.137-2.062",fill:"#2B0849"}),u.createElement("path",{d:"M58.419 274.304s.033 1.519-.314 2.93c-.349 1.42-1.078 3.104-1.13 4.139-.058 1.151 4.537 1.58 5.155.034.62-1.547 1.294-6.427 1.913-7.252.619-.825-4.903-2.119-5.624.15",fill:"#A4AABA"}),u.createElement("path",{d:"M99.66 278.514l13.378.092s1.298-54.52 1.853-64.403c.554-9.882 3.776-43.364 1.002-63.128l-12.547-.644-22.849.78s-.434 3.966-1.195 9.976c-.063.496-.682.843-.749 1.365-.075.585.423 1.354.32 1.966-2.364 14.08-6.377 33.104-8.744 46.677-.116.666-1.234 1.009-1.458 2.691-.04.302.211 1.525.112 1.795-6.873 18.744-10.949 47.842-14.277 61.885l14.607-.014s2.197-8.57 4.03-16.97c2.811-12.886 23.111-85.01 23.111-85.01l3.016-.521 1.043 46.35s-.224 1.234.337 2.02c.56.785-.56 1.123-.392 2.244l.392 1.794s-.449 7.178-.898 11.89c-.448 4.71-.092 39.165-.092 39.165",fill:"#7BB2F9"}),u.createElement("path",{d:"M76.085 221.626c1.153.094 4.038-2.019 6.955-4.935M106.36 225.142s2.774-1.11 6.103-3.883",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M107.275 222.1s2.773-1.11 6.102-3.884",stroke:"#648BD8",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M74.74 224.767s2.622-.591 6.505-3.365M86.03 151.634c-.27 3.106.3 8.525-4.336 9.123M103.625 149.88s.11 14.012-1.293 15.065c-2.219 1.664-2.99 1.944-2.99 1.944M99.79 150.438s.035 12.88-1.196 24.377M93.673 175.911s7.212-1.664 9.431-1.664M74.31 205.861a212.013 212.013 0 0 1-.979 4.56s-1.458 1.832-1.009 3.776c.449 1.944-.947 2.045-4.985 15.355-1.696 5.59-4.49 18.591-6.348 27.597l-.231 1.12M75.689 197.807a320.934 320.934 0 0 1-.882 4.754M82.591 152.233L81.395 162.7s-1.097.15-.5 2.244c.113 1.346-2.674 15.775-5.18 30.43M56.12 274.418h13.31",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M116.241 148.22s-17.047-3.104-35.893.2c.158 2.514-.003 4.15-.003 4.15s14.687-2.818 35.67-.312c.252-2.355.226-4.038.226-4.038",fill:"#192064"}),u.createElement("path",{d:"M106.322 151.165l.003-4.911a.81.81 0 0 0-.778-.815c-2.44-.091-5.066-.108-7.836-.014a.818.818 0 0 0-.789.815l-.003 4.906a.81.81 0 0 0 .831.813c2.385-.06 4.973-.064 7.73.017a.815.815 0 0 0 .842-.81",fill:"#FFF"}),u.createElement("path",{d:"M105.207 150.233l.002-3.076a.642.642 0 0 0-.619-.646 94.321 94.321 0 0 0-5.866-.01.65.65 0 0 0-.63.647v3.072a.64.64 0 0 0 .654.644 121.12 121.12 0 0 1 5.794.011c.362.01.665-.28.665-.642",fill:"#192064"}),u.createElement("path",{d:"M100.263 275.415h12.338M101.436 270.53c.006 3.387.042 5.79.111 6.506M101.451 264.548a915.75 915.75 0 0 0-.015 4.337M100.986 174.965l.898 44.642s.673 1.57-.225 2.692c-.897 1.122 2.468.673.898 2.243-1.57 1.57.897 1.122 0 3.365-.596 1.489-.994 21.1-1.096 35.146",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M46.876 83.427s-.516 6.045 7.223 5.552c11.2-.712 9.218-9.345 31.54-21.655-.786-2.708-2.447-4.744-2.447-4.744s-11.068 3.11-22.584 8.046c-6.766 2.9-13.395 6.352-13.732 12.801M104.46 91.057l.941-5.372-8.884-11.43-5.037 5.372-1.74 7.834a.321.321 0 0 0 .108.32c.965.8 6.5 5.013 14.347 3.544a.332.332 0 0 0 .264-.268",fill:"#FFC6A0"}),u.createElement("path",{d:"M93.942 79.387s-4.533-2.853-2.432-6.855c1.623-3.09 4.513 1.133 4.513 1.133s.52-3.642 3.121-3.642c.52-1.04 1.561-4.162 1.561-4.162s11.445 2.601 13.526 3.121c0 5.203-2.304 19.424-7.84 19.861-8.892.703-12.449-9.456-12.449-9.456",fill:"#FFC6A0"}),u.createElement("path",{d:"M113.874 73.446c2.601-2.081 3.47-9.722 3.47-9.722s-2.479-.49-6.64-2.05c-4.683-2.081-12.798-4.747-17.48.976-9.668 3.223-2.05 19.823-2.05 19.823l2.713-3.021s-3.935-3.287-2.08-6.243c2.17-3.462 3.92 1.073 3.92 1.073s.637-2.387 3.581-3.342c.355-.71 1.036-2.674 1.432-3.85a1.073 1.073 0 0 1 1.263-.704c2.4.558 8.677 2.019 11.356 2.662.522.125.871.615.82 1.15l-.305 3.248z",fill:"#520038"}),u.createElement("path",{d:"M104.977 76.064c-.103.61-.582 1.038-1.07.956-.489-.083-.801-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.644.698 1.254M112.132 77.694c-.103.61-.582 1.038-1.07.956-.488-.083-.8-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.643.698 1.254",fill:"#552950"}),u.createElement("path",{stroke:"#DB836E",strokeWidth:"1.118",strokeLinecap:"round",strokeLinejoin:"round",d:"M110.13 74.84l-.896 1.61-.298 4.357h-2.228"}),u.createElement("path",{d:"M110.846 74.481s1.79-.716 2.506.537",stroke:"#5C2552",strokeWidth:"1.118",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M92.386 74.282s.477-1.114 1.113-.716c.637.398 1.274 1.433.558 1.99-.717.556.159 1.67.159 1.67",stroke:"#DB836E",strokeWidth:"1.118",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M103.287 72.93s1.83 1.113 4.137.954",stroke:"#5C2552",strokeWidth:"1.118",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M103.685 81.762s2.227 1.193 4.376 1.193M104.64 84.308s.954.398 1.511.318M94.693 81.205s2.308 7.4 10.424 7.639",stroke:"#DB836E",strokeWidth:"1.118",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M81.45 89.384s.45 5.647-4.935 12.787M69 82.654s-.726 9.282-8.204 14.206",stroke:"#E4EBF7",strokeWidth:"1.101",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M129.405 122.865s-5.272 7.403-9.422 10.768",stroke:"#E4EBF7",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M119.306 107.329s.452 4.366-2.127 32.062",stroke:"#E4EBF7",strokeWidth:"1.101",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M150.028 151.232h-49.837a1.01 1.01 0 0 1-1.01-1.01v-31.688c0-.557.452-1.01 1.01-1.01h49.837c.558 0 1.01.453 1.01 1.01v31.688a1.01 1.01 0 0 1-1.01 1.01",fill:"#F2D7AD"}),u.createElement("path",{d:"M150.29 151.232h-19.863v-33.707h20.784v32.786a.92.92 0 0 1-.92.92",fill:"#F4D19D"}),u.createElement("path",{d:"M123.554 127.896H92.917a.518.518 0 0 1-.425-.816l6.38-9.113c.193-.277.51-.442.85-.442h31.092l-7.26 10.371z",fill:"#F2D7AD"}),u.createElement("path",{fill:"#CC9B6E",d:"M123.689 128.447H99.25v-.519h24.169l7.183-10.26.424.298z"}),u.createElement("path",{d:"M158.298 127.896h-18.669a2.073 2.073 0 0 1-1.659-.83l-7.156-9.541h19.965c.49 0 .95.23 1.244.622l6.69 8.92a.519.519 0 0 1-.415.83",fill:"#F4D19D"}),u.createElement("path",{fill:"#CC9B6E",d:"M157.847 128.479h-19.384l-7.857-10.475.415-.31 7.7 10.266h19.126zM130.554 150.685l-.032-8.177.519-.002.032 8.177z"}),u.createElement("path",{fill:"#CC9B6E",d:"M130.511 139.783l-.08-21.414.519-.002.08 21.414zM111.876 140.932l-.498-.143 1.479-5.167.498.143zM108.437 141.06l-2.679-2.935 2.665-3.434.41.318-2.397 3.089 2.384 2.612zM116.607 141.06l-.383-.35 2.383-2.612-2.397-3.089.41-.318 2.665 3.434z"}),u.createElement("path",{d:"M154.316 131.892l-3.114-1.96.038 3.514-1.043.092c-1.682.115-3.634.23-4.789.23-1.902 0-2.693 2.258 2.23 2.648l-2.645-.596s-2.168 1.317.504 2.3c0 0-1.58 1.217.561 2.58-.584 3.504 5.247 4.058 7.122 3.59 1.876-.47 4.233-2.359 4.487-5.16.28-3.085-.89-5.432-3.35-7.238",fill:"#FFC6A0"}),u.createElement("path",{d:"M153.686 133.577s-6.522.47-8.36.372c-1.836-.098-1.904 2.19 2.359 2.264 3.739.15 5.451-.044 5.451-.044",stroke:"#DB836E",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M145.16 135.877c-1.85 1.346.561 2.355.561 2.355s3.478.898 6.73.617",stroke:"#DB836E",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M151.89 141.71s-6.28.111-6.73-2.132c-.223-1.346.45-1.402.45-1.402M146.114 140.868s-1.103 3.16 5.44 3.533M151.202 129.932v3.477M52.838 89.286c3.533-.337 8.423-1.248 13.582-7.754",stroke:"#DB836E",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M168.567 248.318a6.647 6.647 0 0 1-6.647-6.647v-66.466a6.647 6.647 0 1 1 13.294 0v66.466a6.647 6.647 0 0 1-6.647 6.647",fill:"#5BA02E"}),u.createElement("path",{d:"M176.543 247.653a6.647 6.647 0 0 1-6.646-6.647v-33.232a6.647 6.647 0 1 1 13.293 0v33.232a6.647 6.647 0 0 1-6.647 6.647",fill:"#92C110"}),u.createElement("path",{d:"M186.443 293.613H158.92a3.187 3.187 0 0 1-3.187-3.187v-46.134a3.187 3.187 0 0 1 3.187-3.187h27.524a3.187 3.187 0 0 1 3.187 3.187v46.134a3.187 3.187 0 0 1-3.187 3.187",fill:"#F2D7AD"}),u.createElement("path",{d:"M88.979 89.48s7.776 5.384 16.6 2.842",stroke:"#E4EBF7",strokeWidth:"1.101",strokeLinecap:"round",strokeLinejoin:"round"})))},g=function(){return u.createElement("svg",{width:"254",height:"294"},u.createElement("defs",null,u.createElement("path",{d:"M0 .335h253.49v253.49H0z"}),u.createElement("path",{d:"M0 293.665h253.49V.401H0z"})),u.createElement("g",{fill:"none",fillRule:"evenodd"},u.createElement("g",{transform:"translate(0 .067)"},u.createElement("mask",{fill:"#fff"}),u.createElement("path",{d:"M0 128.134v-2.11C0 56.608 56.273.334 125.69.334h2.11c69.416 0 125.69 56.274 125.69 125.69v2.11c0 69.417-56.274 125.69-125.69 125.69h-2.11C56.273 253.824 0 197.551 0 128.134",fill:"#E4EBF7",mask:"url(#b)"})),u.createElement("path",{d:"M39.989 132.108a8.332 8.332 0 1 1-16.581-1.671 8.332 8.332 0 0 1 16.58 1.671",fill:"#FFF"}),u.createElement("path",{d:"M37.19 135.59l10.553 5.983M48.665 147.884l-12.734 10.861",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{d:"M40.11 160.816a5.706 5.706 0 1 1-11.354-1.145 5.706 5.706 0 0 1 11.354 1.145M57.943 144.6a5.747 5.747 0 1 1-11.436-1.152 5.747 5.747 0 0 1 11.436 1.153M99.656 27.434l30.024-.013a4.619 4.619 0 1 0-.004-9.238l-30.024.013a4.62 4.62 0 0 0 .004 9.238M111.14 45.896l30.023-.013a4.62 4.62 0 1 0-.004-9.238l-30.024.013a4.619 4.619 0 1 0 .004 9.238",fill:"#FFF"}),u.createElement("path",{d:"M113.53 27.421v-.002l15.89-.007a4.619 4.619 0 1 0 .005 9.238l-15.892.007v-.002a4.618 4.618 0 0 0-.004-9.234M150.167 70.091h-3.979a4.789 4.789 0 0 1-4.774-4.775 4.788 4.788 0 0 1 4.774-4.774h3.979a4.789 4.789 0 0 1 4.775 4.774 4.789 4.789 0 0 1-4.775 4.775",fill:"#FFF"}),u.createElement("path",{d:"M171.687 30.234c0-16.392 13.289-29.68 29.681-29.68 16.392 0 29.68 13.288 29.68 29.68 0 16.393-13.288 29.681-29.68 29.681s-29.68-13.288-29.68-29.68",fill:"#FF603B"}),u.createElement("path",{d:"M203.557 19.435l-.676 15.035a1.514 1.514 0 0 1-3.026 0l-.675-15.035a2.19 2.19 0 1 1 4.377 0m-.264 19.378c.513.477.77 1.1.77 1.87s-.257 1.393-.77 1.907c-.55.476-1.21.733-1.943.733a2.545 2.545 0 0 1-1.87-.77c-.55-.514-.806-1.136-.806-1.87 0-.77.256-1.393.806-1.87.513-.513 1.137-.733 1.87-.733.77 0 1.43.22 1.943.733",fill:"#FFF"}),u.createElement("path",{d:"M119.3 133.275c4.426-.598 3.612-1.204 4.079-4.778.675-5.18-3.108-16.935-8.262-25.118-1.088-10.72-12.598-11.24-12.598-11.24s4.312 4.895 4.196 16.199c1.398 5.243.804 14.45.804 14.45s5.255 11.369 11.78 10.487",fill:"#FFB594"}),u.createElement("path",{d:"M100.944 91.61s1.463-.583 3.211.582c8.08 1.398 10.368 6.706 11.3 11.368 1.864 1.282 1.864 2.33 1.864 3.496.365.777 1.515 3.03 1.515 3.03s-7.225 1.748-10.954 6.758c-1.399-6.41-6.936-25.235-6.936-25.235",fill:"#FFF"}),u.createElement("path",{d:"M94.008 90.5l1.019-5.815-9.23-11.874-5.233 5.581-2.593 9.863s8.39 5.128 16.037 2.246",fill:"#FFB594"}),u.createElement("path",{d:"M82.931 78.216s-4.557-2.868-2.445-6.892c1.632-3.107 4.537 1.139 4.537 1.139s.524-3.662 3.139-3.662c.523-1.046 1.569-4.184 1.569-4.184s11.507 2.615 13.6 3.138c-.001 5.23-2.317 19.529-7.884 19.969-8.94.706-12.516-9.508-12.516-9.508",fill:"#FFC6A0"}),u.createElement("path",{d:"M102.971 72.243c2.616-2.093 3.489-9.775 3.489-9.775s-2.492-.492-6.676-2.062c-4.708-2.092-12.867-4.771-17.575.982-9.54 4.41-2.062 19.93-2.062 19.93l2.729-3.037s-3.956-3.304-2.092-6.277c2.183-3.48 3.943 1.08 3.943 1.08s.64-2.4 3.6-3.36c.356-.714 1.04-2.69 1.44-3.872a1.08 1.08 0 0 1 1.27-.707c2.41.56 8.723 2.03 11.417 2.676.524.126.876.619.825 1.156l-.308 3.266z",fill:"#520038"}),u.createElement("path",{d:"M101.22 76.514c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.961.491.083.805.647.702 1.26M94.26 75.074c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.96.491.082.805.646.702 1.26",fill:"#552950"}),u.createElement("path",{stroke:"#DB836E",strokeWidth:"1.063",strokeLinecap:"round",strokeLinejoin:"round",d:"M99.206 73.644l-.9 1.62-.3 4.38h-2.24"}),u.createElement("path",{d:"M99.926 73.284s1.8-.72 2.52.54",stroke:"#5C2552",strokeWidth:"1.117",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M81.367 73.084s.48-1.12 1.12-.72c.64.4 1.28 1.44.56 2s.16 1.68.16 1.68",stroke:"#DB836E",strokeWidth:"1.117",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M92.326 71.724s1.84 1.12 4.16.96",stroke:"#5C2552",strokeWidth:"1.117",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M92.726 80.604s2.24 1.2 4.4 1.2M93.686 83.164s.96.4 1.52.32M83.687 80.044s1.786 6.547 9.262 7.954",stroke:"#DB836E",strokeWidth:"1.063",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M95.548 91.663s-1.068 2.821-8.298 2.105c-7.23-.717-10.29-5.044-10.29-5.044",stroke:"#E4EBF7",strokeWidth:"1.136",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M78.126 87.478s6.526 4.972 16.47 2.486c0 0 9.577 1.02 11.536 5.322 5.36 11.77.543 36.835 0 39.962 3.496 4.055-.466 8.483-.466 8.483-15.624-3.548-35.81-.6-35.81-.6-4.849-3.546-1.223-9.044-1.223-9.044L62.38 110.32c-2.485-15.227.833-19.803 3.549-20.743 3.03-1.049 8.04-1.282 8.04-1.282.496-.058 1.08-.076 1.37-.233 2.36-1.282 2.787-.583 2.787-.583",fill:"#FFF"}),u.createElement("path",{d:"M65.828 89.81s-6.875.465-7.59 8.156c-.466 8.857 3.03 10.954 3.03 10.954s6.075 22.102 16.796 22.957c8.39-2.176 4.758-6.702 4.661-11.42-.233-11.304-7.108-16.897-7.108-16.897s-4.212-13.75-9.789-13.75",fill:"#FFC6A0"}),u.createElement("path",{d:"M71.716 124.225s.855 11.264 9.828 6.486c4.765-2.536 7.581-13.828 9.789-22.568 1.456-5.768 2.58-12.197 2.58-12.197l-4.973-1.709s-2.408 5.516-7.769 12.275c-4.335 5.467-9.144 11.11-9.455 17.713",fill:"#FFC6A0"}),u.createElement("path",{d:"M108.463 105.191s1.747 2.724-2.331 30.535c2.376 2.216 1.053 6.012-.233 7.51",stroke:"#E4EBF7",strokeWidth:"1.085",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M123.262 131.527s-.427 2.732-11.77 1.981c-15.187-1.006-25.326-3.25-25.326-3.25l.933-5.8s.723.215 9.71-.068c11.887-.373 18.714-6.07 24.964-1.022 4.039 3.263 1.489 8.16 1.489 8.16",fill:"#FFC6A0"}),u.createElement("path",{d:"M70.24 90.974s-5.593-4.739-11.054 2.68c-3.318 7.223.517 15.284 2.664 19.578-.31 3.729 2.33 4.311 2.33 4.311s.108.895 1.516 2.68c4.078-7.03 6.72-9.166 13.711-12.546-.328-.656-1.877-3.265-1.825-3.767.175-1.69-1.282-2.623-1.282-2.623s-.286-.156-1.165-2.738c-.788-2.313-2.036-5.177-4.895-7.575",fill:"#FFF"}),u.createElement("path",{d:"M90.232 288.027s4.855 2.308 8.313 1.155c3.188-1.063 5.12.755 8.002 1.331 2.881.577 7.769 1.243 13.207-1.424-.117-6.228-7.786-4.499-13.518-7.588-2.895-1.56-4.276-5.336-4.066-9.944H91.544s-1.573 11.89-1.312 16.47",fill:"#CBD1D1"}),u.createElement("path",{d:"M90.207 287.833s2.745 1.437 7.639.738c3.456-.494 3.223.66 7.418 1.282 4.195.621 13.092-.194 14.334-1.126.466 1.242-.388 2.33-.388 2.33s-1.709.682-5.438.932c-2.295.154-8.098.276-10.14-.621-2.02-1.554-4.894-1.515-6.06-.234-4.427 1.075-7.184-.31-7.184-.31l-.181-2.991z",fill:"#2B0849"}),u.createElement("path",{d:"M98.429 272.257h3.496s-.117 7.574 5.127 9.671c-5.244.7-9.672-2.602-8.623-9.671",fill:"#A4AABA"}),u.createElement("path",{d:"M44.425 272.046s-2.208 7.774-4.702 12.899c-1.884 3.874-4.428 7.854 5.729 7.854 6.97 0 9.385-.503 7.782-6.917-1.604-6.415.279-13.836.279-13.836h-9.088z",fill:"#CBD1D1"}),u.createElement("path",{d:"M38.066 290.277s2.198 1.225 6.954 1.225c6.376 0 8.646-1.73 8.646-1.73s.63 1.168-.649 2.27c-1.04.897-3.77 1.668-7.745 1.621-4.347-.05-6.115-.593-7.062-1.224-.864-.577-.72-1.657-.144-2.162",fill:"#2B0849"}),u.createElement("path",{d:"M45.344 274.041s.035 1.592-.329 3.07c-.365 1.49-1.13 3.255-1.184 4.34-.061 1.206 4.755 1.657 5.403.036.65-1.622 1.357-6.737 2.006-7.602.648-.865-5.14-2.222-5.896.156",fill:"#A4AABA"}),u.createElement("path",{d:"M89.476 277.57l13.899.095s1.349-56.643 1.925-66.909c.576-10.267 3.923-45.052 1.042-65.585l-13.037-.669-23.737.81s-.452 4.12-1.243 10.365c-.065.515-.708.874-.777 1.417-.078.608.439 1.407.332 2.044-2.455 14.627-5.797 32.736-8.256 46.837-.121.693-1.282 1.048-1.515 2.796-.042.314.22 1.584.116 1.865-7.14 19.473-12.202 52.601-15.66 67.19l15.176-.015s2.282-10.145 4.185-18.871c2.922-13.389 24.012-88.32 24.012-88.32l3.133-.954-.158 48.568s-.233 1.282.35 2.098c.583.815-.581 1.167-.408 2.331l.408 1.864s-.466 7.458-.932 12.352c-.467 4.895 1.145 40.69 1.145 40.69",fill:"#7BB2F9"}),u.createElement("path",{d:"M64.57 218.881c1.197.099 4.195-2.097 7.225-5.127M96.024 222.534s2.881-1.152 6.34-4.034",stroke:"#648BD8",strokeWidth:"1.085",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M96.973 219.373s2.882-1.153 6.34-4.034",stroke:"#648BD8",strokeWidth:"1.032",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M63.172 222.144s2.724-.614 6.759-3.496M74.903 146.166c-.281 3.226.31 8.856-4.506 9.478M93.182 144.344s.115 14.557-1.344 15.65c-2.305 1.73-3.107 2.02-3.107 2.02M89.197 144.923s.269 13.144-1.01 25.088M83.525 170.71s6.81-1.051 9.116-1.051M46.026 270.045l-.892 4.538M46.937 263.289l-.815 4.157M62.725 202.503c-.33 1.618-.102 1.904-.449 3.438 0 0-2.756 1.903-2.29 3.923.466 2.02-.31 3.424-4.505 17.252-1.762 5.807-4.233 18.922-6.165 28.278-.03.144-.521 2.646-1.14 5.8M64.158 194.136c-.295 1.658-.6 3.31-.917 4.938M71.33 146.787l-1.244 10.877s-1.14.155-.519 2.33c.117 1.399-2.778 16.39-5.382 31.615M44.242 273.727H58.07",stroke:"#648BD8",strokeWidth:"1.085",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M106.18 142.117c-3.028-.489-18.825-2.744-36.219.2a.625.625 0 0 0-.518.644c.063 1.307.044 2.343.015 2.995a.617.617 0 0 0 .716.636c3.303-.534 17.037-2.412 35.664-.266.347.04.66-.214.692-.56.124-1.347.16-2.425.17-3.029a.616.616 0 0 0-.52-.62",fill:"#192064"}),u.createElement("path",{d:"M96.398 145.264l.003-5.102a.843.843 0 0 0-.809-.847 114.104 114.104 0 0 0-8.141-.014.85.85 0 0 0-.82.847l-.003 5.097c0 .476.388.857.864.845 2.478-.064 5.166-.067 8.03.017a.848.848 0 0 0 .876-.843",fill:"#FFF"}),u.createElement("path",{d:"M95.239 144.296l.002-3.195a.667.667 0 0 0-.643-.672c-1.9-.061-3.941-.073-6.094-.01a.675.675 0 0 0-.654.672l-.002 3.192c0 .376.305.677.68.669 1.859-.042 3.874-.043 6.02.012.376.01.69-.291.691-.668",fill:"#192064"}),u.createElement("path",{d:"M90.102 273.522h12.819M91.216 269.761c.006 3.519-.072 5.55 0 6.292M90.923 263.474c-.009 1.599-.016 2.558-.016 4.505M90.44 170.404l.932 46.38s.7 1.631-.233 2.796c-.932 1.166 2.564.7.932 2.33-1.63 1.633.933 1.166 0 3.497-.618 1.546-1.031 21.921-1.138 36.513",stroke:"#648BD8",strokeWidth:"1.085",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M73.736 98.665l2.214 4.312s2.098.816 1.865 2.68l.816 2.214M64.297 116.611c.233-.932 2.176-7.147 12.585-10.488M77.598 90.042s7.691 6.137 16.547 2.72",stroke:"#E4EBF7",strokeWidth:"1.085",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M91.974 86.954s5.476-.816 7.574-4.545c1.297-.345.72 2.212-.33 3.671-.7.971-1.01 1.554-1.01 1.554s.194.31.155.816c-.053.697-.175.653-.272 1.048-.081.335.108.657 0 1.049-.046.17-.198.5-.382.878-.12.249-.072.687-.2.948-.231.469-1.562 1.87-2.622 2.855-3.826 3.554-5.018 1.644-6.001-.408-.894-1.865-.661-5.127-.874-6.875-.35-2.914-2.622-3.03-1.923-4.429.343-.685 2.87.69 3.263 1.748.757 2.04 2.952 1.807 2.622 1.69",fill:"#FFC6A0"}),u.createElement("path",{d:"M99.8 82.429c-.465.077-.35.272-.97 1.243-.622.971-4.817 2.932-6.39 3.224-2.589.48-2.278-1.56-4.254-2.855-1.69-1.107-3.562-.638-1.398 1.398.99.932.932 1.107 1.398 3.205.335 1.506-.64 3.67.7 5.593",stroke:"#DB836E",strokeWidth:".774",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M79.543 108.673c-2.1 2.926-4.266 6.175-5.557 8.762",stroke:"#E59788",strokeWidth:".774",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M87.72 124.768s-2.098-1.942-5.127-2.719c-3.03-.777-3.574-.155-5.516.078-1.942.233-3.885-.932-3.652.7.233 1.63 5.05 1.01 5.206 2.097.155 1.087-6.37 2.796-8.313 2.175-.777.777.466 1.864 2.02 2.175.233 1.554 2.253 1.554 2.253 1.554s.699 1.01 2.641 1.088c2.486 1.32 8.934-.7 10.954-1.554 2.02-.855-.466-5.594-.466-5.594",fill:"#FFC6A0"}),u.createElement("path",{d:"M73.425 122.826s.66 1.127 3.167 1.418c2.315.27 2.563.583 2.563.583s-2.545 2.894-9.07 2.272M72.416 129.274s3.826.097 4.933-.718M74.98 130.75s1.961.136 3.36-.505M77.232 131.916s1.748.019 2.914-.505M73.328 122.321s-.595-1.032 1.262-.427c1.671.544 2.833.055 5.128.155 1.389.061 3.067-.297 3.982.15 1.606.784 3.632 2.181 3.632 2.181s10.526 1.204 19.033-1.127M78.864 108.104s-8.39 2.758-13.168 12.12",stroke:"#E59788",strokeWidth:".774",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M109.278 112.533s3.38-3.613 7.575-4.662",stroke:"#E4EBF7",strokeWidth:"1.085",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M107.375 123.006s9.697-2.745 11.445-.88",stroke:"#E59788",strokeWidth:".774",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M194.605 83.656l3.971-3.886M187.166 90.933l3.736-3.655M191.752 84.207l-4.462-4.56M198.453 91.057l-4.133-4.225M129.256 163.074l3.718-3.718M122.291 170.039l3.498-3.498M126.561 163.626l-4.27-4.27M132.975 170.039l-3.955-3.955",stroke:"#BFCDDD",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M190.156 211.779h-1.604a4.023 4.023 0 0 1-4.011-4.011V175.68a4.023 4.023 0 0 1 4.01-4.01h1.605a4.023 4.023 0 0 1 4.011 4.01v32.088a4.023 4.023 0 0 1-4.01 4.01",fill:"#A3B4C6"}),u.createElement("path",{d:"M237.824 212.977a4.813 4.813 0 0 1-4.813 4.813h-86.636a4.813 4.813 0 0 1 0-9.626h86.636a4.813 4.813 0 0 1 4.813 4.813",fill:"#A3B4C6"}),u.createElement("mask",{fill:"#fff"}),u.createElement("path",{fill:"#A3B4C6",mask:"url(#d)",d:"M154.098 190.096h70.513v-84.617h-70.513z"}),u.createElement("path",{d:"M224.928 190.096H153.78a3.219 3.219 0 0 1-3.208-3.209V167.92a3.219 3.219 0 0 1 3.208-3.21h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.219 3.219 0 0 1-3.21 3.209M224.928 130.832H153.78a3.218 3.218 0 0 1-3.208-3.208v-18.968a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.218 3.218 0 0 1-3.21 3.208",fill:"#BFCDDD",mask:"url(#d)"}),u.createElement("path",{d:"M159.563 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 120.546h-22.461a.802.802 0 0 1-.802-.802v-3.208c0-.443.359-.803.802-.803h22.46c.444 0 .803.36.803.803v3.208c0 .443-.36.802-.802.802",fill:"#FFF",mask:"url(#d)"}),u.createElement("path",{d:"M224.928 160.464H153.78a3.218 3.218 0 0 1-3.208-3.209v-18.967a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.209v18.967a3.218 3.218 0 0 1-3.21 3.209",fill:"#BFCDDD",mask:"url(#d)"}),u.createElement("path",{d:"M173.455 130.832h49.301M164.984 130.832h6.089M155.952 130.832h6.75M173.837 160.613h49.3M165.365 160.613h6.089M155.57 160.613h6.751",stroke:"#7C90A5",strokeWidth:"1.124",strokeLinecap:"round",strokeLinejoin:"round",mask:"url(#d)"}),u.createElement("path",{d:"M159.563 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M166.98 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M174.397 151.038a2.407 2.407 0 1 1 .001-4.814 2.407 2.407 0 0 1 0 4.814M222.539 151.038h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802M159.563 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 179.987h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802",fill:"#FFF",mask:"url(#d)"}),u.createElement("path",{d:"M203.04 221.108h-27.372a2.413 2.413 0 0 1-2.406-2.407v-11.448a2.414 2.414 0 0 1 2.406-2.407h27.372a2.414 2.414 0 0 1 2.407 2.407V218.7a2.413 2.413 0 0 1-2.407 2.407",fill:"#BFCDDD",mask:"url(#d)"}),u.createElement("path",{d:"M177.259 207.217v11.52M201.05 207.217v11.52",stroke:"#A3B4C6",strokeWidth:"1.124",strokeLinecap:"round",strokeLinejoin:"round",mask:"url(#d)"}),u.createElement("path",{d:"M162.873 267.894a9.422 9.422 0 0 1-9.422-9.422v-14.82a9.423 9.423 0 0 1 18.845 0v14.82a9.423 9.423 0 0 1-9.423 9.422",fill:"#5BA02E",mask:"url(#d)"}),u.createElement("path",{d:"M171.22 267.83a9.422 9.422 0 0 1-9.422-9.423v-3.438a9.423 9.423 0 0 1 18.845 0v3.438a9.423 9.423 0 0 1-9.422 9.423",fill:"#92C110",mask:"url(#d)"}),u.createElement("path",{d:"M181.31 293.666h-27.712a3.209 3.209 0 0 1-3.209-3.21V269.79a3.209 3.209 0 0 1 3.209-3.21h27.711a3.209 3.209 0 0 1 3.209 3.21v20.668a3.209 3.209 0 0 1-3.209 3.209",fill:"#F2D7AD",mask:"url(#d)"})))},b=function(){return u.createElement("svg",{width:"251",height:"294"},u.createElement("g",{fill:"none",fillRule:"evenodd"},u.createElement("path",{d:"M0 129.023v-2.084C0 58.364 55.591 2.774 124.165 2.774h2.085c68.574 0 124.165 55.59 124.165 124.165v2.084c0 68.575-55.59 124.166-124.165 124.166h-2.085C55.591 253.189 0 197.598 0 129.023",fill:"#E4EBF7"}),u.createElement("path",{d:"M41.417 132.92a8.231 8.231 0 1 1-16.38-1.65 8.231 8.231 0 0 1 16.38 1.65",fill:"#FFF"}),u.createElement("path",{d:"M38.652 136.36l10.425 5.91M49.989 148.505l-12.58 10.73",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{d:"M41.536 161.28a5.636 5.636 0 1 1-11.216-1.13 5.636 5.636 0 0 1 11.216 1.13M59.154 145.261a5.677 5.677 0 1 1-11.297-1.138 5.677 5.677 0 0 1 11.297 1.138M100.36 29.516l29.66-.013a4.562 4.562 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 0 0 .005 9.126M111.705 47.754l29.659-.013a4.563 4.563 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 1 0 .005 9.126",fill:"#FFF"}),u.createElement("path",{d:"M114.066 29.503V29.5l15.698-.007a4.563 4.563 0 1 0 .004 9.126l-15.698.007v-.002a4.562 4.562 0 0 0-.004-9.122M185.405 137.723c-.55 5.455-5.418 9.432-10.873 8.882-5.456-.55-9.432-5.418-8.882-10.873.55-5.455 5.418-9.432 10.873-8.882 5.455.55 9.432 5.418 8.882 10.873",fill:"#FFF"}),u.createElement("path",{d:"M180.17 143.772l12.572 7.129M193.841 158.42L178.67 171.36",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{d:"M185.55 171.926a6.798 6.798 0 1 1-13.528-1.363 6.798 6.798 0 0 1 13.527 1.363M204.12 155.285a6.848 6.848 0 1 1-13.627-1.375 6.848 6.848 0 0 1 13.626 1.375",fill:"#FFF"}),u.createElement("path",{d:"M152.988 194.074a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0zM225.931 118.217a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM217.09 153.051a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.42 0zM177.84 109.842a2.21 2.21 0 1 1-4.422 0 2.21 2.21 0 0 1 4.421 0zM196.114 94.454a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM202.844 182.523a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0z",stroke:"#FFF",strokeWidth:"2"}),u.createElement("path",{stroke:"#FFF",strokeWidth:"2",d:"M215.125 155.262l-1.902 20.075-10.87 5.958M174.601 176.636l-6.322 9.761H156.98l-4.484 6.449M175.874 127.28V111.56M221.51 119.404l-12.77 7.859-15.228-7.86V96.668"}),u.createElement("path",{d:"M180.68 29.32C180.68 13.128 193.806 0 210 0c16.193 0 29.32 13.127 29.32 29.32 0 16.194-13.127 29.322-29.32 29.322-16.193 0-29.32-13.128-29.32-29.321",fill:"#A26EF4"}),u.createElement("path",{d:"M221.45 41.706l-21.563-.125a1.744 1.744 0 0 1-1.734-1.754l.071-12.23a1.744 1.744 0 0 1 1.754-1.734l21.562.125c.964.006 1.74.791 1.735 1.755l-.071 12.229a1.744 1.744 0 0 1-1.754 1.734",fill:"#FFF"}),u.createElement("path",{d:"M215.106 29.192c-.015 2.577-2.049 4.654-4.543 4.64-2.494-.014-4.504-2.115-4.489-4.693l.04-6.925c.016-2.577 2.05-4.654 4.543-4.64 2.494.015 4.504 2.116 4.49 4.693l-.04 6.925zm-4.53-14.074a6.877 6.877 0 0 0-6.916 6.837l-.043 7.368a6.877 6.877 0 0 0 13.754.08l.042-7.368a6.878 6.878 0 0 0-6.837-6.917zM167.566 68.367h-3.93a4.73 4.73 0 0 1-4.717-4.717 4.73 4.73 0 0 1 4.717-4.717h3.93a4.73 4.73 0 0 1 4.717 4.717 4.73 4.73 0 0 1-4.717 4.717",fill:"#FFF"}),u.createElement("path",{d:"M168.214 248.838a6.611 6.611 0 0 1-6.61-6.611v-66.108a6.611 6.611 0 0 1 13.221 0v66.108a6.611 6.611 0 0 1-6.61 6.61",fill:"#5BA02E"}),u.createElement("path",{d:"M176.147 248.176a6.611 6.611 0 0 1-6.61-6.61v-33.054a6.611 6.611 0 1 1 13.221 0v33.053a6.611 6.611 0 0 1-6.61 6.611",fill:"#92C110"}),u.createElement("path",{d:"M185.994 293.89h-27.376a3.17 3.17 0 0 1-3.17-3.17v-45.887a3.17 3.17 0 0 1 3.17-3.17h27.376a3.17 3.17 0 0 1 3.17 3.17v45.886a3.17 3.17 0 0 1-3.17 3.17",fill:"#F2D7AD"}),u.createElement("path",{d:"M81.972 147.673s6.377-.927 17.566-1.28c11.729-.371 17.57 1.086 17.57 1.086s3.697-3.855.968-8.424c1.278-12.077 5.982-32.827.335-48.273-1.116-1.339-3.743-1.512-7.536-.62-1.337.315-7.147-.149-7.983-.1l-15.311-.347s-3.487-.17-8.035-.508c-1.512-.113-4.227-1.683-5.458-.338-.406.443-2.425 5.669-1.97 16.077l8.635 35.642s-3.141 3.61 1.219 7.085",fill:"#FFF"}),u.createElement("path",{d:"M75.768 73.325l-.9-6.397 11.982-6.52s7.302-.118 8.038 1.205c.737 1.324-5.616.993-5.616.993s-1.836 1.388-2.615 2.5c-1.654 2.363-.986 6.471-8.318 5.986-1.708.284-2.57 2.233-2.57 2.233",fill:"#FFC6A0"}),u.createElement("path",{d:"M52.44 77.672s14.217 9.406 24.973 14.444c1.061.497-2.094 16.183-11.892 11.811-7.436-3.318-20.162-8.44-21.482-14.496-.71-3.258 2.543-7.643 8.401-11.76M141.862 80.113s-6.693 2.999-13.844 6.876c-3.894 2.11-10.137 4.704-12.33 7.988-6.224 9.314 3.536 11.22 12.947 7.503 6.71-2.651 28.999-12.127 13.227-22.367",fill:"#FFB594"}),u.createElement("path",{d:"M76.166 66.36l3.06 3.881s-2.783 2.67-6.31 5.747c-7.103 6.195-12.803 14.296-15.995 16.44-3.966 2.662-9.754 3.314-12.177-.118-3.553-5.032.464-14.628 31.422-25.95",fill:"#FFC6A0"}),u.createElement("path",{d:"M64.674 85.116s-2.34 8.413-8.912 14.447c.652.548 18.586 10.51 22.144 10.056 5.238-.669 6.417-18.968 1.145-20.531-.702-.208-5.901-1.286-8.853-2.167-.87-.26-1.611-1.71-3.545-.936l-1.98-.869zM128.362 85.826s5.318 1.956 7.325 13.734c-.546.274-17.55 12.35-21.829 7.805-6.534-6.94-.766-17.393 4.275-18.61 4.646-1.121 5.03-1.37 10.23-2.929",fill:"#FFF"}),u.createElement("path",{d:"M78.18 94.656s.911 7.41-4.914 13.078",stroke:"#E4EBF7",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M87.397 94.68s3.124 2.572 10.263 2.572c7.14 0 9.074-3.437 9.074-3.437",stroke:"#E4EBF7",strokeWidth:".932",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M117.184 68.639l-6.781-6.177s-5.355-4.314-9.223-.893c-3.867 3.422 4.463 2.083 5.653 4.165 1.19 2.082.848 1.143-2.083.446-5.603-1.331-2.082.893 2.975 5.355 2.091 1.845 6.992.955 6.992.955l2.467-3.851z",fill:"#FFC6A0"}),u.createElement("path",{d:"M105.282 91.315l-.297-10.937-15.918-.027-.53 10.45c-.026.403.17.788.515.999 2.049 1.251 9.387 5.093 15.799.424.287-.21.443-.554.431-.91",fill:"#FFB594"}),u.createElement("path",{d:"M107.573 74.24c.817-1.147.982-9.118 1.015-11.928a1.046 1.046 0 0 0-.965-1.055l-4.62-.365c-7.71-1.044-17.071.624-18.253 6.346-5.482 5.813-.421 13.244-.421 13.244s1.963 3.566 4.305 6.791c.756 1.041.398-3.731 3.04-5.929 5.524-4.594 15.899-7.103 15.899-7.103",fill:"#5C2552"}),u.createElement("path",{d:"M88.426 83.206s2.685 6.202 11.602 6.522c7.82.28 8.973-7.008 7.434-17.505l-.909-5.483c-6.118-2.897-15.478.54-15.478.54s-.576 2.044-.19 5.504c-2.276 2.066-1.824 5.618-1.824 5.618s-.905-1.922-1.98-2.321c-.86-.32-1.897.089-2.322 1.98-1.04 4.632 3.667 5.145 3.667 5.145",fill:"#FFC6A0"}),u.createElement("path",{stroke:"#DB836E",strokeWidth:"1.145",strokeLinecap:"round",strokeLinejoin:"round",d:"M100.843 77.099l1.701-.928-1.015-4.324.674-1.406"}),u.createElement("path",{d:"M105.546 74.092c-.022.713-.452 1.279-.96 1.263-.51-.016-.904-.607-.882-1.32.021-.713.452-1.278.96-1.263.51.016.904.607.882 1.32M97.592 74.349c-.022.713-.452 1.278-.961 1.263-.509-.016-.904-.607-.882-1.32.022-.713.452-1.279.961-1.263.51.016.904.606.882 1.32",fill:"#552950"}),u.createElement("path",{d:"M91.132 86.786s5.269 4.957 12.679 2.327",stroke:"#DB836E",strokeWidth:"1.145",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M99.776 81.903s-3.592.232-1.44-2.79c1.59-1.496 4.897-.46 4.897-.46s1.156 3.906-3.457 3.25",fill:"#DB836E"}),u.createElement("path",{d:"M102.88 70.6s2.483.84 3.402.715M93.883 71.975s2.492-1.144 4.778-1.073",stroke:"#5C2552",strokeWidth:"1.526",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M86.32 77.374s.961.879 1.458 2.106c-.377.48-1.033 1.152-.236 1.809M99.337 83.719s1.911.151 2.509-.254",stroke:"#DB836E",strokeWidth:"1.145",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M87.782 115.821l15.73-3.012M100.165 115.821l10.04-2.008",stroke:"#E4EBF7",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M66.508 86.763s-1.598 8.83-6.697 14.078",stroke:"#E4EBF7",strokeWidth:"1.114",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M128.31 87.934s3.013 4.121 4.06 11.785",stroke:"#E4EBF7",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M64.09 84.816s-6.03 9.912-13.607 9.903",stroke:"#DB836E",strokeWidth:".795",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M112.366 65.909l-.142 5.32s5.993 4.472 11.945 9.202c4.482 3.562 8.888 7.455 10.985 8.662 4.804 2.766 8.9 3.355 11.076 1.808 4.071-2.894 4.373-9.878-8.136-15.263-4.271-1.838-16.144-6.36-25.728-9.73",fill:"#FFC6A0"}),u.createElement("path",{d:"M130.532 85.488s4.588 5.757 11.619 6.214",stroke:"#DB836E",strokeWidth:".75",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M121.708 105.73s-.393 8.564-1.34 13.612",stroke:"#E4EBF7",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M115.784 161.512s-3.57-1.488-2.678-7.14",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M101.52 290.246s4.326 2.057 7.408 1.03c2.842-.948 4.564.673 7.132 1.186 2.57.514 6.925 1.108 11.772-1.269-.104-5.551-6.939-4.01-12.048-6.763-2.582-1.39-3.812-4.757-3.625-8.863h-9.471s-1.402 10.596-1.169 14.68",fill:"#CBD1D1"}),u.createElement("path",{d:"M101.496 290.073s2.447 1.281 6.809.658c3.081-.44 3.74.485 7.479 1.039 3.739.554 10.802-.07 11.91-.9.415 1.108-.347 2.077-.347 2.077s-1.523.608-4.847.831c-2.045.137-5.843.293-7.663-.507-1.8-1.385-5.286-1.917-5.77-.243-3.947.958-7.41-.288-7.41-.288l-.16-2.667z",fill:"#2B0849"}),u.createElement("path",{d:"M108.824 276.19h3.116s-.103 6.751 4.57 8.62c-4.673.624-8.62-2.32-7.686-8.62",fill:"#A4AABA"}),u.createElement("path",{d:"M57.65 272.52s-2.122 7.47-4.518 12.396c-1.811 3.724-4.255 7.548 5.505 7.548 6.698 0 9.02-.483 7.479-6.648-1.541-6.164.268-13.296.268-13.296H57.65z",fill:"#CBD1D1"}),u.createElement("path",{d:"M51.54 290.04s2.111 1.178 6.682 1.178c6.128 0 8.31-1.662 8.31-1.662s.605 1.122-.624 2.18c-1 .862-3.624 1.603-7.444 1.559-4.177-.049-5.876-.57-6.786-1.177-.831-.554-.692-1.593-.138-2.078",fill:"#2B0849"}),u.createElement("path",{d:"M58.533 274.438s.034 1.529-.315 2.95c-.352 1.431-1.087 3.127-1.139 4.17-.058 1.16 4.57 1.592 5.194.035.623-1.559 1.303-6.475 1.927-7.306.622-.831-4.94-2.135-5.667.15",fill:"#A4AABA"}),u.createElement("path",{d:"M100.885 277.015l13.306.092s1.291-54.228 1.843-64.056c.552-9.828 3.756-43.13.997-62.788l-12.48-.64-22.725.776s-.433 3.944-1.19 9.921c-.062.493-.677.838-.744 1.358-.075.582.42 1.347.318 1.956-2.35 14.003-6.343 32.926-8.697 46.425-.116.663-1.227 1.004-1.45 2.677-.04.3.21 1.516.112 1.785-6.836 18.643-10.89 47.584-14.2 61.551l14.528-.014s2.185-8.524 4.008-16.878c2.796-12.817 22.987-84.553 22.987-84.553l3-.517 1.037 46.1s-.223 1.228.334 2.008c.558.782-.556 1.117-.39 2.233l.39 1.784s-.446 7.14-.892 11.826c-.446 4.685-.092 38.954-.092 38.954",fill:"#7BB2F9"}),u.createElement("path",{d:"M77.438 220.434c1.146.094 4.016-2.008 6.916-4.91M107.55 223.931s2.758-1.103 6.069-3.862",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M108.459 220.905s2.759-1.104 6.07-3.863",stroke:"#648BD8",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M76.099 223.557s2.608-.587 6.47-3.346M87.33 150.82c-.27 3.088.297 8.478-4.315 9.073M104.829 149.075s.11 13.936-1.286 14.983c-2.207 1.655-2.975 1.934-2.975 1.934M101.014 149.63s.035 12.81-1.19 24.245M94.93 174.965s7.174-1.655 9.38-1.655M75.671 204.754c-.316 1.55-.64 3.067-.973 4.535 0 0-1.45 1.822-1.003 3.756.446 1.934-.943 2.034-4.96 15.273-1.686 5.559-4.464 18.49-6.313 27.447-.078.38-4.018 18.06-4.093 18.423M77.043 196.743a313.269 313.269 0 0 1-.877 4.729M83.908 151.414l-1.19 10.413s-1.091.148-.496 2.23c.111 1.34-2.66 15.692-5.153 30.267M57.58 272.94h13.238",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"}),u.createElement("path",{d:"M117.377 147.423s-16.955-3.087-35.7.199c.157 2.501-.002 4.128-.002 4.128s14.607-2.802 35.476-.31c.251-2.342.226-4.017.226-4.017",fill:"#192064"}),u.createElement("path",{d:"M107.511 150.353l.004-4.885a.807.807 0 0 0-.774-.81c-2.428-.092-5.04-.108-7.795-.014a.814.814 0 0 0-.784.81l-.003 4.88c0 .456.371.82.827.808a140.76 140.76 0 0 1 7.688.017.81.81 0 0 0 .837-.806",fill:"#FFF"}),u.createElement("path",{d:"M106.402 149.426l.002-3.06a.64.64 0 0 0-.616-.643 94.135 94.135 0 0 0-5.834-.009.647.647 0 0 0-.626.643l-.001 3.056c0 .36.291.648.651.64 1.78-.04 3.708-.041 5.762.012.36.009.662-.279.662-.64",fill:"#192064"}),u.createElement("path",{d:"M101.485 273.933h12.272M102.652 269.075c.006 3.368.04 5.759.11 6.47M102.667 263.125c-.009 1.53-.015 2.98-.016 4.313M102.204 174.024l.893 44.402s.669 1.561-.224 2.677c-.892 1.116 2.455.67.893 2.231-1.562 1.562.893 1.116 0 3.347-.592 1.48-.988 20.987-1.09 34.956",stroke:"#648BD8",strokeWidth:"1.051",strokeLinecap:"round",strokeLinejoin:"round"})))},y={success:o.a,error:i.a,info:a.a,warning:d},w={404:v,500:g,403:b},O=Object.keys(w),x=function(e){var t=e.prefixCls,n=e.icon,r=e.status,o=h()("".concat(t,"-icon"));if(O.includes("".concat(r))){var i=w[r];return u.createElement("div",{className:"".concat(o," ").concat(t,"-image")},u.createElement(i,null))}var a=u.createElement(y[r]);return null===n||!1===n?null:u.createElement("div",{className:o},n||a)},E=function(e){var t=e.prefixCls,n=e.extra;return n?u.createElement("div",{className:"".concat(t,"-extra")},n):null},j=function(e){var t=e.prefixCls,n=e.className,o=e.subTitle,i=e.title,a=e.style,c=e.children,s=e.status,l=void 0===s?"info":s,f=e.icon,d=e.extra,p=u.useContext(m.b),v=p.getPrefixCls,g=p.direction,b=v("result",t),y=h()(b,"".concat(b,"-").concat(l),n,Object(r.a)({},"".concat(b,"-rtl"),"rtl"===g));return u.createElement("div",{className:y,style:a},u.createElement(x,{prefixCls:b,status:l,icon:f}),u.createElement("div",{className:"".concat(b,"-title")},i),o&&u.createElement("div",{className:"".concat(b,"-subtitle")},o),u.createElement(E,{prefixCls:b,extra:d}),c&&u.createElement("div",{className:"".concat(b,"-content")},c))};j.PRESENTED_IMAGE_403=w[403],j.PRESENTED_IMAGE_404=w[404],j.PRESENTED_IMAGE_500=w[500];t.a=j}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy9JY29uQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy90d29Ub25lUHJpbWFyeUNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9jb21wb25lbnRzL0FudGRJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2NvbnZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbG9jYWxlLXByb3ZpZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL25vdGlmaWNhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9ub3RpZmljYXRpb24vaG9va3MvdXNlTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbmZpZy1wcm92aWRlci9jc3NWYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3JlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3JhZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9fdXRpbC9yZWFjdE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvX3V0aWwvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9jYW5Vc2VEb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL29taXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9GaWVsZENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvdHlwZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvdmFsaWRhdGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL3ZhbHVlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9GaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL05hbWVNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXNlRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91dGlscy9hc3luY1V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvRm9ybUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91c2VXYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL2hvb2tzL3VzZUxheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9Eb21XcmFwcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvdXRpbC9tb3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VEb21Nb3Rpb25FdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlU3RlcFF1ZXVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlTmV4dEZyYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlU3RhdHVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvQ1NTTW90aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvdXRpbC9kaWZmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvQ1NTTW90aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvaG9va3MvdXNlU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy91dGlscy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvX3V0aWwvc3RhdHVzVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWFwLWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL0Rpc2FibGVkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9jb25maWctcHJvdmlkZXIvY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL2hvb2tzL3VzZUZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvZm9ybS9Gb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2Zvcm0vRm9ybUxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL2hvb2tzL3VzZUZvcm1JbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hcC1pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY2FsZW5kYXIvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2xvY2FsZS9kZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2Zvcm0vdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VNZXJnZWRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3NwYWNlL0NvbXBhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLXNpbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc2V0LXJlY29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LW1ldGhvZC1hY2NlcHQtc2V0LWxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXNldC1saWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3V0aWxzL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Mb2FkaW5nT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0xvYWRpbmdPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L21vZHVsZS9mb3JtYXQtaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvRG9tL2FkZEV2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvX3V0aWwvcmVzcG9uc2l2ZU9ic2VydmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvaW5wdXQvR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvaW5wdXQvaG9va3MvdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2lucHV0L0lucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2lucHV0L3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0V5ZUludmlzaWJsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeWVJbnZpc2libGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeWVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvRXllT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvaW5wdXQvUGFzc3dvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvaW5wdXQvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2lucHV0L0NsZWFyYWJsZUxhYmVsZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9pbnB1dC9UZXh0QXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9pbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvQ2hpbGRyZW4vdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvZGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvRG9tL2R5bmFtaWNDU1MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2hlY2tDaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NoZWNrQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL3VzZU5vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL2hvb2tzL3VzZURlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2VtcHR5L2VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2VtcHR5L3NpbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9lbXB0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL21vdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY29sb3JzL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3RybC90aW55Y29sb3IvZGlzdC9tb2R1bGUvY3NzLWNvbG9yLW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9fdXRpbC9jb2xvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2J1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VNZW1vLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvaXNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL05vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1waWNrZXIvZXMvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2RhdGUtcGlja2VyL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGltZS1waWNrZXIvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvTm90aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvZm9ybS92YWxpZGF0ZU1lc3NhZ2VzQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9ncmlkL1Jvd0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10b29sdGlwL2VzL3BsYWNlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvZ3JpZC9jb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvZm9ybS9FcnJvckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvX3V0aWwvcmFmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL3dhdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWNsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9tb2RhbC9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvUmVhY3QvcmVuZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1yZXNpemUtb2JzZXJ2ZXIvZXMvdXRpbHMvb2JzZXJ2ZXJVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1yZXNpemUtb2JzZXJ2ZXIvZXMvU2luZ2xlT2JzZXJ2ZXIvRG9tV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtcmVzaXplLW9ic2VydmVyL2VzL0NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXJlc2l6ZS1vYnNlcnZlci9lcy9TaW5nbGVPYnNlcnZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtcmVzaXplLW9ic2VydmVyL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy91dGlscy9hbGlnblV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvdXRpbHMvbGVnYWN5VXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9Qb3B1cC9NYXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWFsaWduL2VzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWFsaWduL2VzL0FsaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1hbGlnbi9lcy9ob29rcy91c2VCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWFsaWduL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10cmlnZ2VyL2VzL1BvcHVwL3VzZVZpc2libGVTdGF0dXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvUG9wdXAvUG9wdXBJbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9Qb3B1cC91c2VTdHJldGNoU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvUG9wdXAvTW9iaWxlUG9wdXBJbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9Qb3B1cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10cmlnZ2VyL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vaXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2Zvcm0vaG9va3MvdXNlRm9ybUl0ZW1TdGF0dXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vUXVlc3Rpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvUXVlc3Rpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL0Zvcm1JdGVtTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvZm9ybS9Gb3JtSXRlbUlucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2Zvcm0vRm9ybUl0ZW0vSXRlbUhvbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL0Zvcm1JdGVtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2Zvcm0vaG9va3MvdXNlRnJhbWVTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9mb3JtL2hvb2tzL3VzZUl0ZW1SZWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vc3R5bGVDaGVja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3Rvb2x0aXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvaXNNb2JpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvYnV0dG9uL2J1dHRvbi1ncm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9idXR0b24vTG9hZGluZ0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvYnV0dG9uL2J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DaGVja0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DaGVja0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0luZm9DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvSW5mb0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9TZWFyY2hPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvU2VhcmNoT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWFwcC1wb2x5ZmlsbC9pZTExLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlL2xpYi9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYWtlLWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWlzLXJlZ2lzdGVyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1pcy13ZWxsLWtub3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hcC11cHNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1kaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtaW50ZXJzZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtaXMtZGlzam9pbnQtZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWlzLXN1YnNldC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWlzLXN1cGVyc2V0LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3ltbWV0cmljLWRpZmZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC11bmlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXN0YXRpY3MtaW5jb3JyZWN0LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2FtZWxDYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXBhZ2luYXRpb24vZXMvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL2hvb2tzL3VzZUZsZXhHYXBTdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL3N0eWxlQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9fdXRpbC9wbGFjZW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1pbnB1dC9lcy91dGlscy9jb21tb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQvZXMvQmFzZUlucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1pbnB1dC9lcy9JbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtaW5wdXQvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRvb2x0aXAvZXMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRvb2x0aXAvZXMvVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdG9vbHRpcC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGV4dGFyZWEvZXMvY2FsY3VsYXRlTm9kZUhlaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGV4dGFyZWEvZXMvUmVzaXphYmxlVGV4dEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRleHRhcmVhL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0luZm9DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0luZm9DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXB1dGUtc2Nyb2xsLWludG8tdmlldy9kaXN0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2Nyb2xsLWludG8tdmlldy1pZi1uZWVkZWQvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9kaXN0LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWVycm9yLWJvdW5kYXJ5L2Rpc3QvcmVhY3QtZXJyb3ItYm91bmRhcnkudW1kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL21lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbWVzc2FnZS9ob29rcy91c2VNZXNzYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYXBwLXBvbHlmaWxsL2llOS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS9saWIvcmVqZWN0aW9uLXRyYWNraW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc2FwL2Jyb3dzZXItcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlL2xpYi9lczYtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZlYXR1cmVzL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mdWxsL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9hY3R1YWwvc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3N0YWJsZS9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXMvc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmtleS1mb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWpzb24tcmVwbGFjZXItZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5mdW5jdGlvbi5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuYXN5bmMtZGlzcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuZGlzcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc3ltYm9sLmlzLXJlZ2lzdGVyZWQtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5pcy13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuaXMtcmVnaXN0ZXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuaXMtd2VsbC1rbm93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWV0YWRhdGEta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5wYXR0ZXJuLW1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5yZXBsYWNlLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mZWF0dXJlcy9hcnJheS9mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2Z1bGwvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9hY3R1YWwvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zdGFibGUvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lcy9hcnJheS9mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mZWF0dXJlcy9tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZnVsbC9tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvYWN0dWFsL21hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zdGFibGUvbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzL21hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmdyb3VwLWJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZW1wbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuZmluZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLXplcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmtleS1ieS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAua2V5LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5tYXAta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAubWFwLXZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAubWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAudXBkYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC51cHNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnVwZGF0ZS1vci1pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZmVhdHVyZXMvc2V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2Z1bGwvc2V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2FjdHVhbC9zZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc3RhYmxlL3NldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lcy9zZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmRpZmZlcmVuY2UudjIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1kaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmludGVyc2VjdGlvbi52Mi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtZGlzam9pbnQtZnJvbS52Mi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtc3Vic2V0LW9mLnYyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5pcy1zdXBlcnNldC1vZi52Mi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuc3ltbWV0cmljLWRpZmZlcmVuY2UudjIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnVuaW9uLnYyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuYWRkLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmRpZmZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmludGVyc2VjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtZGlzam9pbnQtZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtc3Vic2V0LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5pcy1zdXBlcnNldC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LnN5bW1ldHJpYy1kaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC51bmlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuY2F0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLnJhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLnJlamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UucmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VwcGVyRmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ2FzZUZpcnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ29tcG91bmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYnVyci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWJ1cnJMZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC93b3Jkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVdvcmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGVXb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3VuaWNvZGVXb3Jkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb3h5LWFjY2Vzc29yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3ZpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0xvY2tPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvTG9ja091dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1Bvd2Vyb2ZmT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL1Bvd2Vyb2ZmT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L21vZHVsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90YWcvQ2hlY2thYmxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RhZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9ncmlkL3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9XYXJuaW5nRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9XYXJuaW5nRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3Jlc3VsdC9ub0ZvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3Jlc3VsdC9zZXJ2ZXJFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9yZXN1bHQvdW5hdXRob3JpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3Jlc3VsdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsInRoaXMiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInB1c2giLCJfb2JqZWN0U3ByZWFkMiIsImZvckVhY2giLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiYXJyYXlXaXRoSG9sZXMiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl94IiwiX3IiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwiZXJyIiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFyZ1R5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsInRvU3RyaW5nIiwiaW5jbHVkZXMiLCJqb2luIiwiZGVmYXVsdCIsImdsb2JhbCIsImYiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJkZWZpbmVCdWlsdEluIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0IiwiZG9udENhbGxHZXRTZXQiLCJmb3JjZWQiLCJ1bmRlZmluZWQiLCJzaGFtIiwiX3R5cGVvZiIsImNvbnN0cnVjdG9yIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyYXlMaWtlVG9BcnJheSIsIml0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJib3VuZDAxIiwibiIsIm1heCIsImluZGV4T2YiLCJwYXJzZUZsb2F0IiwiaXNPbmVQb2ludFplcm8iLCJpc1BlcmNlbnQiLCJpc1BlcmNlbnRhZ2UiLCJNYXRoIiwibWluIiwicGFyc2VJbnQiLCJTdHJpbmciLCJhYnMiLCJjbGFtcDAxIiwidmFsIiwiYm91bmRBbHBoYSIsImEiLCJpc05hTiIsImNvbnZlcnRUb1BlcmNlbnRhZ2UiLCJjb25jYXQiLCJOdW1iZXIiLCJwYWQyIiwiYyIsIk5BVElWRV9CSU5EIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvbiIsInVuY3VycnlUaGlzV2l0aEJpbmQiLCJmbiIsIkZvcm1Db250ZXh0IiwibGFiZWxBbGlnbiIsInZlcnRpY2FsIiwiaXRlbVJlZiIsIk5vU3R5bGVJdGVtQ29udGV4dCIsIkZvcm1Qcm92aWRlciIsInByb3BzIiwicHJvdmlkZXJQcm9wcyIsIkZvcm1JdGVtUHJlZml4Q29udGV4dCIsInByZWZpeENscyIsIkZvcm1JdGVtSW5wdXRDb250ZXh0IiwiTm9Gb3JtU3R5bGUiLCJfcmVmIiwiY2hpbGRyZW4iLCJzdGF0dXMiLCJvdmVycmlkZSIsImZvcm1JdGVtSW5wdXRDb250ZXh0IiwibmV3Rm9ybUl0ZW1JbnB1dENvbnRleHQiLCJuZXdDb250ZXh0IiwiaXNGb3JtSXRlbUlucHV0IiwiaGFzRmVlZGJhY2siLCJmZWVkYmFja0ljb24iLCJQcm92aWRlciIsImV4ZWMiLCJlcnJvciIsImlzSWNvbkRlZmluaXRpb24iLCJuYW1lIiwidGhlbWUiLCJpY29uIiwibm9ybWFsaXplQXR0cnMiLCJhdHRycyIsInJlZHVjZSIsImFjYyIsImNsYXNzTmFtZSIsImNsYXNzIiwiZ2V0U2Vjb25kYXJ5Q29sb3IiLCJwcmltYXJ5Q29sb3IiLCJub3JtYWxpemVUd29Ub25lQ29sb3JzIiwidHdvVG9uZUNvbG9yIiwiaWNvblN0eWxlcyIsIl9leGNsdWRlZCIsInR3b1RvbmVDb2xvclBhbGV0dGUiLCJzZWNvbmRhcnlDb2xvciIsImNhbGN1bGF0ZWQiLCJ2YWxpZCIsIm1lc3NhZ2UiLCJvbkNsaWNrIiwic3R5bGUiLCJyZXN0UHJvcHMiLCJjb2xvcnMiLCJzdHlsZVN0ciIsIl91c2VDb250ZXh0IiwiY3NwIiwicHJlcGVuZCIsImdlbmVyYXRlIiwibm9kZSIsInJvb3RQcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJ0YWciLCJtYXAiLCJjaGlsZCIsImluZGV4Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwiZGlzcGxheU5hbWUiLCJnZXRUd29Ub25lQ29sb3JzIiwic2V0VHdvVG9uZUNvbG9ycyIsInNldFR3b1RvbmVDb2xvciIsIl9ub3JtYWxpemVUd29Ub25lQ29sbyIsIl9ub3JtYWxpemVUd29Ub25lQ29sbzIiLCJJY29uIiwicmVmIiwiX2NsYXNzTmFtZXMiLCJzcGluIiwicm90YXRlIiwidGFiSW5kZXgiLCJfUmVhY3QkdXNlQ29udGV4dCIsIkNvbnRleHQiLCJfUmVhY3QkdXNlQ29udGV4dCRwcmUiLCJyb290Q2xhc3NOYW1lIiwiY2xhc3NTdHJpbmciLCJpY29uVGFiSW5kZXgiLCJzdmdTdHlsZSIsIm1zVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwicm9sZSIsImdldFR3b1RvbmVDb2xvciIsImNoZWNrIiwiaXQiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiJGRvY3VtZW50QWxsIiwiZG9jdW1lbnRBbGwiLCJhbGwiLCJJU19IVE1MRERBIiwiYXJndW1lbnQiLCJzaGFyZWQiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwicmdiVG9SZ2IiLCJyIiwiZyIsImIiLCJyZ2JUb0hzbCIsImgiLCJzIiwibCIsImQiLCJodWUycmdiIiwicCIsInEiLCJ0IiwiaHNsVG9SZ2IiLCJyZ2JUb0hzdiIsInYiLCJoc3ZUb1JnYiIsImZsb29yIiwibW9kIiwicmdiVG9IZXgiLCJhbGxvdzNDaGFyIiwiaGV4Iiwicm91bmQiLCJzdGFydHNXaXRoIiwiY2hhckF0IiwicmdiYVRvSGV4IiwiYWxsb3c0Q2hhciIsImNvbnZlcnREZWNpbWFsVG9IZXgiLCJyZ2JhVG9BcmdiSGV4IiwiY29udmVydEhleFRvRGVjaW1hbCIsInBhcnNlSW50RnJvbUhleCIsIm51bWJlcklucHV0VG9PYmplY3QiLCJjb2xvciIsIl9wcm9wcyRsb2NhbGUiLCJsb2NhbGUiLCJfQU5UX01BUktfXyIsIk1vZGFsIiwiZ2V0TWVtb2l6ZWRDb250ZXh0VmFsdWUiLCJleGlzdCIsImRlZmF1bHRHZXRDb250YWluZXIiLCJkZWZhdWx0Q2xvc2VJY29uIiwibWF4Q291bnQiLCJub3RpZmljYXRpb25JbnN0YW5jZSIsImRlZmF1bHREdXJhdGlvbiIsImRlZmF1bHRUb3AiLCJkZWZhdWx0Qm90dG9tIiwiZGVmYXVsdFByZWZpeENscyIsImRlZmF1bHRQbGFjZW1lbnQiLCJydGwiLCJnZXRQbGFjZW1lbnRTdHlsZSIsInBsYWNlbWVudCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsImFyZ3MiLCJjYWxsYmFjayIsIl9hcmdzJHBsYWNlbWVudCIsIl9hcmdzJGdldENvbnRhaW5lciIsImdldENvbnRhaW5lciIsImN1c3RvbWl6ZVByZWZpeENscyIsIl9nbG9iYWxDb25maWciLCJnbG9iYWxDb25maWciLCJnZXRQcmVmaXhDbHMiLCJnZXRJY29uUHJlZml4Q2xzIiwiaWNvblByZWZpeENscyIsImNhY2hlS2V5IiwiY2FjaGVJbnN0YW5jZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImluc3RhbmNlIiwibm90aWZpY2F0aW9uQ2xhc3MiLCJuZXdJbnN0YW5jZSIsIm5vdGlmaWNhdGlvbiIsInR5cGVUb0ljb24iLCJzdWNjZXNzIiwiQ2hlY2tDaXJjbGVPdXRsaW5lZCIsImluZm8iLCJJbmZvQ2lyY2xlT3V0bGluZWQiLCJDbG9zZUNpcmNsZU91dGxpbmVkIiwid2FybmluZyIsIkV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQiLCJkdXJhdGlvbkFyZyIsImR1cmF0aW9uIiwidHlwZSIsImRlc2NyaXB0aW9uIiwiYnRuIiwib25DbG9zZSIsIl9hcmdzJGNsb3NlSWNvbiIsImNsb3NlSWNvbiIsImljb25Ob2RlIiwiY2xvc2VJY29uVG9SZW5kZXIiLCJDbG9zZU91dGxpbmVkIiwiYXV0b01hcmdpblRhZyIsImNvbnRlbnQiLCJjbG9zYWJsZSIsImdldE5vdGlmaWNhdGlvbkluc3RhbmNlIiwiZ2V0UkNOb3RpY2VQcm9wcyIsImFwaSIsIm9wZW4iLCJub3RpY2UiLCJjbG9zZSIsInJlbW92ZU5vdGljZSIsImNvbmZpZyIsImRlc3Ryb3kiLCJ3YXJuIiwidXNlTm90aWZpY2F0aW9uIiwiaW5uZXJJbnN0YW5jZSIsInByb3h5IiwiYWRkIiwibm90aWNlUHJvcHMiLCJob2xkZXJDYWxsYmFjayIsImNvbXBvbmVudCIsIl91c2VSQ05vdGlmaWNhdGlvbiIsIl91c2VSQ05vdGlmaWNhdGlvbjIiLCJob29rTm90aWZ5IiwiaG9sZGVyIiwiaG9va0FwaVJlZiIsImN1cnJlbnQiLCJtZXJnZWRQcmVmaXhDbHMiLCJjb250ZXh0IiwiZHluYW1pY1N0eWxlTWFyayIsIkRhdGUiLCJub3ciLCJyYW5kb20iLCJyZWdpc3RlclRoZW1lIiwiZ2xvYmFsUHJlZml4Q2xzIiwidmFyaWFibGVzIiwiZm9ybWF0Q29sb3IiLCJ1cGRhdGVyIiwiY2xvbmUiLCJ0b1JnYlN0cmluZyIsImZpbGxDb2xvciIsImNvbG9yVmFsIiwiYmFzZUNvbG9yIiwiY29sb3JQYWxldHRlcyIsInNldEFscGhhIiwicHJpbWFyeUNvbG9ycyIsImxpZ2h0ZW4iLCJ0aW50IiwiZ2V0QWxwaGEiLCJwcmltYXJ5QWN0aXZlQ29sb3IiLCJkYXJrZW4iLCJzdWNjZXNzQ29sb3IiLCJ3YXJuaW5nQ29sb3IiLCJlcnJvckNvbG9yIiwiaW5mb0NvbG9yIiwiY3NzTGlzdCIsInRyaW0iLCJnZXRTdHlsZSIsImNhblVzZURvbSIsImdsb2JhbEljb25QcmVmaXhDbHMiLCJQQVNTRURfUFJPUFMiLCJnZXRHbG9iYWxQcmVmaXhDbHMiLCJnZXRHbG9iYWxJY29uUHJlZml4Q2xzIiwic3VmZml4Q2xzIiwiZ2V0Um9vdFByZWZpeENscyIsInJvb3RQcmVmaXhDbHMiLCJyZXBsYWNlIiwiYXV0b0luc2VydFNwYWNlSW5CdXR0b24iLCJmb3JtIiwiY29tcG9uZW50U2l6ZSIsImRpcmVjdGlvbiIsInNwYWNlIiwidmlydHVhbCIsImRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCIsImxlZ2FjeUxvY2FsZSIsInBhcmVudENvbnRleHQiLCJjb21wb25lbnREaXNhYmxlZCIsInByb3BOYW1lIiwicHJvcFZhbHVlIiwibWVtb2VkQ29uZmlnIiwidXNlTWVtbyIsInByZXZDb25maWciLCJjdXJyZW50Q29uZmlnIiwicHJldktleXMiLCJjdXJyZW50S2V5cyIsInNvbWUiLCJtZW1vSWNvbkNvbnRleHRWYWx1ZSIsImNoaWxkTm9kZSIsInZhbGlkYXRlTWVzc2FnZXMiLCJfYSIsIl9iIiwiX2MiLCJGb3JtIiwiZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMiLCJTaXplQ29udGV4dCIsInNpemUiLCJEaXNhYmxlZENvbnRleHQiLCJkaXNhYmxlZCIsIkxvY2FsZVJlY2VpdmVyIiwiXyIsIl9fIiwiQ29uZmlnQ29udGV4dCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX2NsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImZpbGxSZWYiLCJjb21wb3NlUmVmIiwiX2xlbiIsInJlZnMiLCJfa2V5IiwicmVmTGlzdCIsInVzZUNvbXBvc2VSZWYiLCJfbGVuMiIsIl9rZXkyIiwicHJldiIsImV2ZXJ5Iiwic3VwcG9ydFJlZiIsIm5vZGVPckNvbXBvbmVudCIsIl90eXBlJHByb3RvdHlwZSIsIl9ub2RlT3JDb21wb25lbnQkcHJvdCIsInJlbmRlciIsInBhdGgiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiTkFNRSIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJnZXQiLCJzZXQiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY3JlYXRlQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJnZXRVbmlxdWVJZCIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsImVtaXR0ZXIiLCJfcHJvdG8iLCJnZXRDaGlsZENvbnRleHQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJ4IiwieSIsIkNvbXBvbmVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX1JlYWN0JENvbXBvbmVudDIiLCJfdGhpczIiLCJvYnNlcnZlZEJpdHMiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29udGV4dFR5cGVzIiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiaGlzdG9yeUNvbnRleHQiLCJSb3V0ZXIiLCJsb2NhdGlvbiIsImhpc3RvcnkiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJ1bmxpc3RlbiIsImxpc3RlbiIsImNvbXB1dGVSb290TWF0Y2giLCJwYXRobmFtZSIsInVybCIsInBhcmFtcyIsImlzRXhhY3QiLCJtYXRjaCIsIk1lbW9yeVJvdXRlciIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJvblVubW91bnQiLCJQcm9tcHQiLCJfcmVmJHdoZW4iLCJ3aGVuIiwibWV0aG9kIiwiYmxvY2siLCJyZWxlYXNlIiwiY2FjaGUiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiZ2VuZXJhdG9yIiwiY29tcGlsZSIsImNvbXBpbGVQYXRoIiwicHJldHR5IiwiUmVkaXJlY3QiLCJjb21wdXRlZE1hdGNoIiwidG8iLCJfcmVmJHB1c2giLCJwcmV2TG9jYXRpb24iLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0Iiwic3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwic2Vuc2l0aXZlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImVuZCIsInBhdGhDYWNoZSIsInJlc3VsdCIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJ2YWx1ZXMiLCJzbGljZSIsIm1lbW8iLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwiQ2hpbGRyZW4iLCJjb3VudCIsImlzRW1wdHlDaGlsZHJlbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJiYXNlbmFtZSIsImJhc2UiLCJzdWJzdHIiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTdGF0aWNSb3V0ZXIiLCJoYW5kbGVQdXNoIiwibmF2aWdhdGVUbyIsImhhbmRsZVJlcGxhY2UiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsImFjdGlvbiIsIl90aGlzJHByb3BzJGJhc2VuYW1lIiwiX3RoaXMkcHJvcHMkY29udGV4dCIsImFkZEJhc2VuYW1lIiwiX3RoaXMkcHJvcHMyIiwiX3RoaXMkcHJvcHMyJGJhc2VuYW1lIiwiX3RoaXMkcHJvcHMyJGNvbnRleHQiLCJfdGhpcyRwcm9wczIkbG9jYXRpb24iLCJyZXN0IiwiY3JlYXRlSHJlZiIsImdvIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiU3dpdGNoIiwiZWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwiZnJvbSIsImNsb25lRWxlbWVudCIsIndpdGhSb3V0ZXIiLCJDIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwiV3JhcHBlZENvbXBvbmVudCIsInVzZUNvbnRleHQiLCJ1c2VIaXN0b3J5IiwidXNlTG9jYXRpb24iLCJ1c2VQYXJhbXMiLCJ1c2VSb3V0ZU1hdGNoIiwidW5jdXJyeVRoaXMiLCJ0b09iamVjdCIsImlzT2JqZWN0IiwiJFN0cmluZyIsIiRUeXBlRXJyb3IiLCJyYWYiLCJzZXRUaW1lb3V0IiwiY2FmIiwibnVtIiwiY2xlYXJUaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaGFuZGxlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyYWZVVUlEIiwicmFmSWRzIiwiTWFwIiwiY2xlYW51cCIsImlkIiwiZGVsZXRlIiwid3JhcHBlclJhZiIsInRpbWVzIiwiY2FsbFJlZiIsImxlZnRUaW1lcyIsInJlYWxJZCIsImNhbmNlbCIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJpbnB1dCIsImhhc093blByb3AiLCJpc09iamVjdEVtcHR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImsiLCJpc1VuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNEYXRlIiwicmVzIiwiYXJyTGVuIiwiZXh0ZW5kIiwiY3JlYXRlVVRDIiwiZm9ybWF0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImdldFBhcnNpbmdGbGFncyIsIm0iLCJfcGYiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0Iiwib3ZlcmZsb3ciLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZEVyYSIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJlcmEiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsImdldFRpbWUiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwiZnVuIiwibGVuIiwibW9tZW50UHJvcGVydGllcyIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJjb3B5Q29uZmlnIiwicHJvcCIsIm1vbWVudFByb3BlcnRpZXNMZW4iLCJfaXNBTW9tZW50T2JqZWN0IiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIk1vbWVudCIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50IiwibXNnIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiY29uc29sZSIsImRlcHJlY2F0ZSIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsImFyZ0xlbiIsIkVycm9yIiwic3RhY2siLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJ6ZXJvRmlsbCIsIm51bWJlciIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwicG93IiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJmdW5jIiwibG9jYWxlRGF0YSIsImZvcm1hdE1vbWVudCIsImV4cGFuZEZvcm1hdCIsImFycmF5IiwibW9tIiwib3V0cHV0IiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsImxhc3RJbmRleCIsInRlc3QiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwidW5pdCIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkUHJvcCIsIm5vcm1hbGl6ZWRJbnB1dCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJwcmlvcml0eSIsImlzTGVhcFllYXIiLCJ5ZWFyIiwiYWJzRmxvb3IiLCJjZWlsIiwidG9JbnQiLCJhcmd1bWVudEZvckNvZXJjaW9uIiwiY29lcmNlZE51bWJlciIsImlzRmluaXRlIiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJtb250aCIsImRhdGUiLCJkYXlzSW5Nb250aCIsInJlZ2V4ZXMiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFdvcmQiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwiUmVnRXhwIiwicmVnZXhFc2NhcGUiLCJwMSIsInAyIiwicDMiLCJwNCIsInRva2VucyIsImFkZFBhcnNlVG9rZW4iLCJ0b2tlbkxlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHMiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJzcGxpdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiX21vbnRoc1JlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsImRheXNJblllYXIiLCJwYXJzZVR3b0RpZ2l0WWVhciIsImdldFNldFllYXIiLCJjcmVhdGVEYXRlIiwiTSIsIm1zIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImNyZWF0ZVVUQ0RhdGUiLCJVVEMiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZ2V0VVRDRGF5IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwid2VlayIsIndlZWtkYXkiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwiZGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrT2Zmc2V0Iiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsInNoaWZ0V2Vla2RheXMiLCJ3cyIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwiZGF5IiwiY29tcHV0ZVdlZWtkYXlzUGFyc2UiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJtaW5QaWVjZXMiLCJfd2Vla2RheXNSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiaEZvcm1hdCIsImhvdXJzIiwibG93ZXJjYXNlIiwibWludXRlcyIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsInNlY29uZHMiLCJrSW5wdXQiLCJfaXNQbSIsImlzUE0iLCJfbWVyaWRpZW0iLCJwb3MiLCJwb3MxIiwicG9zMiIsImdsb2JhbExvY2FsZSIsImdldFNldEhvdXIiLCJiYXNlQ29uZmlnIiwiY2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwicmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInNzIiwibW0iLCJoaCIsImRkIiwidyIsInd3IiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwiYXJyMiIsIm1pbmwiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiaXNMb2NhbGVOYW1lU2FuZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwibmFtZXMiLCJqIiwiY2hvb3NlTG9jYWxlIiwiY2hlY2tPdmVyZmxvdyIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImV4dGVuZGVkSXNvUmVnZXgiLCJiYXNpY0lzb1JlZ2V4IiwidHpSZWdleCIsImlzb0RhdGVzIiwiaXNvVGltZXMiLCJhc3BOZXRKc29uUmVnZXgiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjb25maWdGcm9tSVNPIiwiYWxsb3dUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJ0ekZvcm1hdCIsInN0cmluZyIsImlzb0RhdGVzTGVuIiwiaXNvVGltZXNMZW4iLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImdldERheSIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsImRlZmF1bHRzIiwiY29uZmlnRnJvbUFycmF5IiwiY3VycmVudERhdGUiLCJleHBlY3RlZFdlZWtkYXkiLCJ5ZWFyVG9Vc2UiLCJub3dWYWx1ZSIsIl91c2VVVEMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldERhdGUiLCJjdXJyZW50RGF0ZUFycmF5Iiwid2Vla1llYXIiLCJ0ZW1wIiwid2Vla2RheU92ZXJmbG93IiwiY3VyV2VlayIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiZ2ciLCJfZGF5T2ZZZWFyIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX25leHREYXkiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJob3VyIiwiaXNQbSIsIm1lcmlkaWVtSG91ciIsIm1lcmlkaWVtRml4V3JhcCIsImVyYXNDb252ZXJ0WWVhciIsInByZXBhcmVDb25maWciLCJwcmVwYXJzZSIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJ2YWxpZEZvcm1hdEZvdW5kIiwiYmVzdEZvcm1hdElzVmFsaWQiLCJjb25maWdmTGVuIiwic2NvcmUiLCJjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkiLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsImNvbmZpZ0Zyb21TdHJpbmciLCJkYXlPckRhdGUiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsImNvbmZpZ0Zyb21PYmplY3QiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiaXNvV2VlayIsImRheXMiLCJtaWxsaXNlY29uZHMiLCJ1bml0SGFzRGVjaW1hbCIsIm9yZGVyTGVuIiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsIm9mZnNldCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsInNpZ24iLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJtYXRjaGVyIiwicGFydHMiLCJtYXRjaGVzIiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJkaWZmIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwiY3JlYXRlRHVyYXRpb24iLCJyZXQiLCJkaWZmUmVzIiwicGFyc2VJc28iLCJpc0JlZm9yZSIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJpbnAiLCJpc0FmdGVyIiwiY3JlYXRlQWRkZXIiLCJwZXJpb2QiLCJ0bXAiLCJhZGRTdWJ0cmFjdCIsImlzQWRkaW5nIiwiaW52YWxpZCIsInN1YnRyYWN0IiwiaXNTdHJpbmciLCJpc01vbWVudElucHV0IiwiYXJyYXlUZXN0IiwiZGF0YVR5cGVUZXN0IiwiaXRlbSIsImlzTnVtYmVyT3JTdHJpbmdBcnJheSIsInByb3BlcnR5Iiwib2JqZWN0VGVzdCIsInByb3BlcnR5VGVzdCIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eUxlbiIsImlzTW9tZW50SW5wdXRPYmplY3QiLCJpc0NhbGVuZGFyU3BlYyIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwibmV3TG9jYWxlRGF0YSIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwibGFuZyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwibWF0Y2hFcmFBYmJyIiwiZXJhc0FiYnJSZWdleCIsImNvbXB1dGVFcmFzUGFyc2UiLCJhYmJyUGllY2VzIiwibmFtZVBpZWNlcyIsIm5hcnJvd1BpZWNlcyIsImVyYXMiLCJuYXJyb3ciLCJfZXJhc1JlZ2V4IiwiX2VyYXNOYW1lUmVnZXgiLCJfZXJhc0FiYnJSZWdleCIsIl9lcmFzTmFycm93UmVnZXgiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0dGVyIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJ3ZWVrc1RhcmdldCIsInNldFdlZWtBbGwiLCJkYXlPZlllYXJEYXRhIiwiZXJhc05hbWVSZWdleCIsImVyYXNOYXJyb3dSZWdleCIsImVyYXNQYXJzZSIsIl9lcmFZZWFyT3JkaW5hbFJlZ2V4IiwiZXJhWWVhck9yZGluYWxQYXJzZSIsImlzb1dlZWtZZWFyIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsInByb3RvIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0IiwidGhhdCIsInpvbmVEZWx0YSIsImVuZE9mIiwic3RhcnRPZkRhdGUiLCJpc29XZWVrZGF5IiwiaW5wdXRTdHJpbmciLCJwb3N0Zm9ybWF0Iiwid2l0aG91dFN1ZmZpeCIsImh1bWFuaXplIiwiZnJvbU5vdyIsInRvTm93IiwiaW52YWxpZEF0IiwibG9jYWxJbnB1dCIsImlzQmV0d2VlbiIsImluY2x1c2l2aXR5IiwibG9jYWxGcm9tIiwibG9jYWxUbyIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJwYXJzaW5nRmxhZ3MiLCJwcmlvcml0aXplZCIsInVuaXRzT2JqIiwidSIsImdldFByaW9yaXRpemVkVW5pdHMiLCJwcmlvcml0aXplZExlbiIsInRvQXJyYXkiLCJ0b0RhdGUiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJpbnNwZWN0IiwicHJlZml4Iiwic3VmZml4Iiwiem9uZSIsImlzTG9jYWwiLCJmb3IiLCJ0b0pTT04iLCJ1bml4IiwiY3JlYXRpb25EYXRhIiwiZXJhTmFtZSIsInNpbmNlIiwidW50aWwiLCJlcmFOYXJyb3ciLCJlcmFBYmJyIiwiZXJhWWVhciIsImRpciIsImlzb1dlZWtzIiwid2Vla0luZm8iLCJ3ZWVrc0luV2Vla1llYXIiLCJpc29XZWVrc0luWWVhciIsImlzb1dlZWtzSW5JU09XZWVrWWVhciIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJwYXJzZVpvbmUiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEU1QiLCJpc1V0Y09mZnNldCIsInpvbmVBYmJyIiwiem9uZU5hbWUiLCJkYXRlcyIsImlzRFNUU2hpZnRlZCIsIl9pc0RTVFNoaWZ0ZWQiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbmd0aERpZmYiLCJkaWZmcyIsImNvbXBhcmVBcnJheXMiLCJwcm90byQxIiwiZ2V0JDEiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsInRvayIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsIl9lcmFzIiwiaXNGb3JtYXQiLCJfbW9udGhzU2hvcnQiLCJfbW9udGhzUGFyc2VFeGFjdCIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJfd2Vla2RheXMiLCJfd2Vla2RheXNNaW4iLCJfd2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJpc0xvd2VyIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFic0NlaWwiLCJkYXlzVG9Nb250aHMiLCJtb250aHNUb0RheXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwidG90YWwiLCJ0b0ZpeGVkIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwiYXJnV2l0aFN1ZmZpeCIsImFyZ1RocmVzaG9sZHMiLCJ3aXRoU3VmZml4IiwidGgiLCJwb3NOZWdEdXJhdGlvbiIsInJlbGF0aXZlVGltZSQxIiwidG9Jc29TdHJpbmciLCJ2ZXJzaW9uIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwicmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiREFURSIsIlRJTUUiLCJUSU1FX1NFQ09ORFMiLCJUSU1FX01TIiwiV0VFSyIsIk1PTlRIIiwiZmFjdG9yeSIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJPcCIsImRlc2MiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJlamVjdCIsImludm9rZSIsInJlY29yZCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJ3YXJuZWQiLCJwcmVXYXJuaW5nRm5zIiwibm90ZSIsIndhcm5pbmdPbmNlIiwibm90ZU9uY2UiLCJwcmVNZXNzYWdlIiwicmVzZXRXYXJuZWQiLCJmYWlscyIsImFDYWxsYWJsZSIsImlzRnJhZ21lbnQiLCJyZXBsYWNlRWxlbWVudCIsInJlcGxhY2VtZW50IiwidHVwbGUiLCJpc0NhbGxhYmxlIiwiREVTQ1JJUFRPUlMiLCJJRThfRE9NX0RFRklORSIsIlY4X1BST1RPVFlQRV9ERUZJTkVfQlVHIiwiYW5PYmplY3QiLCJ0b1Byb3BlcnR5S2V5IiwiJGRlZmluZVByb3BlcnR5IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk8iLCJQIiwiQXR0cmlidXRlcyIsImRvY3VtZW50IiwidHJ5VG9TdHJpbmciLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJoYXMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIm1ha2VCdWlsdEluIiwic2ltcGxlIiwidW5zYWZlIiwibm9uQ29uZmlndXJhYmxlIiwibm9uV3JpdGFibGUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIm9taXQiLCJmaWVsZHMiLCJjbGFzc29mIiwiU2V0UHJvdG90eXBlIiwiU2V0IiwicmVtb3ZlIiwiU2l6ZUNvbnRleHRQcm92aWRlciIsIm9yaWdpblNpemUiLCJIT09LX01BUksiLCJnZXRGaWVsZFZhbHVlIiwiZ2V0RmllbGRzVmFsdWUiLCJnZXRGaWVsZEVycm9yIiwiZ2V0RmllbGRXYXJuaW5nIiwiZ2V0RmllbGRzRXJyb3IiLCJpc0ZpZWxkc1RvdWNoZWQiLCJpc0ZpZWxkVG91Y2hlZCIsImlzRmllbGRWYWxpZGF0aW5nIiwiaXNGaWVsZHNWYWxpZGF0aW5nIiwicmVzZXRGaWVsZHMiLCJzZXRGaWVsZHMiLCJzZXRGaWVsZFZhbHVlIiwic2V0RmllbGRzVmFsdWUiLCJ2YWxpZGF0ZUZpZWxkcyIsInN1Ym1pdCIsImdldEludGVybmFsSG9va3MiLCJkaXNwYXRjaCIsImluaXRFbnRpdHlWYWx1ZSIsInJlZ2lzdGVyRmllbGQiLCJ1c2VTdWJzY3JpYmUiLCJzZXRJbml0aWFsVmFsdWVzIiwiZGVzdHJveUZvcm0iLCJzZXRDYWxsYmFja3MiLCJyZWdpc3RlcldhdGNoIiwiZ2V0RmllbGRzIiwic2V0VmFsaWRhdGVNZXNzYWdlcyIsInNldFByZXNlcnZlIiwiZ2V0SW5pdGlhbFZhbHVlIiwiaXNGb3JtSW5zdGFuY2UiLCJfaW5pdCIsInR5cGVUZW1wbGF0ZSIsInJlcXVpcmVkIiwiZW51bSIsIndoaXRlc3BhY2UiLCJwYXJzZSIsInR5cGVzIiwiYm9vbGVhbiIsImludGVnZXIiLCJmbG9hdCIsImVtYWlsIiwicmFuZ2UiLCJwYXR0ZXJuIiwibWlzbWF0Y2giLCJBc3luY1ZhbGlkYXRvciIsInJlcGxhY2VNZXNzYWdlIiwidGVtcGxhdGUiLCJrdiIsInN0ciIsInZhbGlkYXRlUnVsZSIsIl94MiIsIl94MyIsIl94NCIsIl94NSIsIl92YWxpZGF0ZVJ1bGUiLCJfY2FsbGVlMiIsInJ1bGUiLCJtZXNzYWdlVmFyaWFibGVzIiwiY2xvbmVSdWxlIiwib3JpZ2luVmFsaWRhdG9yIiwic3ViUnVsZUZpZWxkIiwidmFsaWRhdG9yIiwibWVzc2FnZXMiLCJzdWJSZXN1bHRzIiwiZmlsbFZhcmlhYmxlUmVzdWx0IiwiX2NvbnRleHQyIiwicnVsZUluZGV4IiwiZGVmYXVsdEZpZWxkIiwidmFsaWRhdGUiLCJ0MCIsImVycm9ycyIsIl9yZWY0IiwibWVyZ2VkTWVzc2FnZSIsInN1YlZhbHVlIiwidmFsaWRhdGVSdWxlcyIsIm5hbWVQYXRoIiwicnVsZXMiLCJ2YWxpZGF0ZUZpcnN0Iiwic3VtbWFyeVByb21pc2UiLCJmaWxsZWRSdWxlcyIsImN1cnJlbnRSdWxlIiwib3JpZ2luVmFsaWRhdG9yRnVuYyIsImhhc1Byb21pc2UiLCJwcm9taXNlIiwiY2F0Y2giLCJfcmVmMiIsIncxIiwid2FybmluZ09ubHkiLCJpMSIsIncyIiwiaTIiLCJfcmVmMyIsIl9jYWxsZWUiLCJfY29udGV4dCIsIl94NiIsIl94NyIsInJ1bGVQcm9taXNlcyIsIl94OSIsIl9maW5pc2hPbkZpcnN0RmFpbGVkIiwiZmluaXNoT25GaXJzdEZhaWxlZCIsIl94OCIsIl9maW5pc2hPbkFsbEZhaWxlZCIsImZpbmlzaE9uQWxsRmFpbGVkIiwiX2NhbGxlZTMiLCJfY29udGV4dDMiLCJlcnJvcnNMaXN0IiwiX3JlZjUiLCJfY2FsbGVlNCIsIl9jb250ZXh0NCIsInJ1bGVFcnJvciIsImdldE5hbWVQYXRoIiwiY2xvbmVCeU5hbWVQYXRoTGlzdCIsInN0b3JlIiwibmFtZVBhdGhMaXN0IiwibmV3U3RvcmUiLCJjb250YWluc05hbWVQYXRoIiwibWF0Y2hOYW1lUGF0aCIsImNoYW5nZWROYW1lUGF0aCIsIm5hbWVVbml0IiwiZGVmYXVsdEdldFZhbHVlRnJvbUV2ZW50IiwidmFsdWVQcm9wTmFtZSIsImV2ZW50IiwibW92ZUluZGV4IiwidG9JbmRleCIsIkVNUFRZX0VSUk9SUyIsInJlcXVpcmVVcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJwcmV2VmFsdWUiLCJuZXh0VmFsdWUiLCJGaWVsZCIsIl9zdXBlciIsInJlc2V0Q291bnQiLCJjYW5jZWxSZWdpc3RlckZ1bmMiLCJtb3VudGVkIiwidG91Y2hlZCIsImRpcnR5IiwidmFsaWRhdGVQcm9taXNlIiwicHJldlZhbGlkYXRpbmciLCJ3YXJuaW5ncyIsImNhbmNlbFJlZ2lzdGVyIiwicHJlc2VydmUiLCJpc0xpc3RGaWVsZCIsIl9maWVsZENvbnRleHQkcHJlZml4TiIsImZpZWxkQ29udGV4dCIsInByZWZpeE5hbWUiLCJnZXRSdWxlcyIsIl90aGlzJHByb3BzMyIsIl90aGlzJHByb3BzMyRydWxlcyIsInJlZnJlc2giLCJtZXRhQ2FjaGUiLCJ0cmlnZ2VyTWV0YUV2ZW50Iiwib25NZXRhQ2hhbmdlIiwibWV0YSIsImdldE1ldGEiLCJpc0VxdWFsIiwib25TdG9yZUNoYW5nZSIsInByZXZTdG9yZSIsIl90aGlzJHByb3BzNCIsIl90aGlzJHByb3BzNCRkZXBlbmRlbiIsImRlcGVuZGVuY2llcyIsIm9uUmVzZXQiLCJjdXJWYWx1ZSIsIm5hbWVQYXRoTWF0Y2giLCJyZVJlbmRlciIsInZhbGlkYXRpbmciLCJkZXBlbmRlbmN5IiwicmVsYXRlZEZpZWxkcyIsImN1cnJlbnRWYWx1ZSIsInRyaWdnZXJOYW1lIiwiX3JlZjIkdmFsaWRhdGVPbmx5IiwidmFsaWRhdGVPbmx5Iiwicm9vdFByb21pc2UiLCJfdGhpcyRwcm9wczUiLCJfdGhpcyRwcm9wczUkdmFsaWRhdGUiLCJmaWx0ZXJlZFJ1bGVzIiwidmFsaWRhdGVUcmlnZ2VyIiwicnVsZUVycm9ycyIsIl9ydWxlRXJyb3JzJGZvckVhY2giLCJuZXh0RXJyb3JzIiwibmV4dFdhcm5pbmdzIiwiX3JlZjMkZXJyb3JzIiwiaXNGaWVsZERpcnR5IiwiaW5pdGlhbFZhbHVlIiwiZ2V0RXJyb3JzIiwiZ2V0V2FybmluZ3MiLCJpc0xpc3QiLCJpc1ByZXNlcnZlIiwidmFsaWRhdGVkIiwiZ2V0T25seUNoaWxkIiwiZ2V0Q29udHJvbGxlZCIsImNoaWxkTGlzdCIsImNoaWxkUHJvcHMiLCJfdGhpcyRwcm9wczYiLCJ0cmlnZ2VyIiwiZ2V0VmFsdWVGcm9tRXZlbnQiLCJub3JtYWxpemUiLCJnZXRWYWx1ZVByb3BzIiwibWVyZ2VkVmFsaWRhdGVUcmlnZ2VyIiwiX2dldEludGVybmFsSG9va3MiLCJtZXJnZWRHZXRWYWx1ZVByb3BzIiwib3JpZ2luVHJpZ2dlckZ1bmMiLCJjb250cm9sIiwidmFsaWRhdGVUcmlnZ2VyTGlzdCIsIm9yaWdpblRyaWdnZXIiLCJfdGhpcyRwcm9wczciLCJmb3JjZVVwZGF0ZSIsInJldHVybkNoaWxkTm9kZSIsIl90aGlzJGdldE9ubHlDaGlsZCIsImNvbnRleHRUeXBlIiwiRmllbGRDb250ZXh0IiwiZGVmYXVsdFByb3BzIiwibGlzdENvbnRleHQiLCJ3cmFwcGVyTGlzdENvbnRleHQiLCJrZXlNYW5hZ2VyIiwicGFyZW50UHJlZml4TmFtZSIsImdldEtleSIsInBhdGhOYW1lIiwiX3JlZjMkdmFsdWUiLCJvbkNoYW5nZSIsImdldE5ld1ZhbHVlIiwib3BlcmF0aW9ucyIsImluZGV4U2V0Iiwia2V5c0luZGV4IiwidmFsdWVJbmRleCIsIm1vdmUiLCJsaXN0VmFsdWUiLCJTUExJVCIsImNlbGwiLCJOYW1lTWFwIiwia3ZzIiwiZW50cmllcyIsImNlbGxzIiwiX2NlbGwkbWF0Y2giLCJfY2VsbCRtYXRjaDIiLCJqc29uIiwiRm9ybVN0b3JlIiwiZm9yY2VSb290VXBkYXRlIiwiZm9ybUhvb2tlZCIsInN1YnNjcmliYWJsZSIsImZpZWxkRW50aXRpZXMiLCJpbml0aWFsVmFsdWVzIiwiY2FsbGJhY2tzIiwibGFzdFZhbGlkYXRlUHJvbWlzZSIsImdldEZvcm0iLCJwcmV2V2l0aG91dFByZXNlcnZlcyIsImluaXQiLCJfdGhpcyRwcmV2V2l0aG91dFByZXMiLCJuZXh0U3RvcmUiLCJ1cGRhdGVTdG9yZSIsImdldEZpZWxkRW50aXRpZXMiLCJlbnRpdHkiLCJpc01lcmdlZFByZXNlcnZlIiwiaW5pdFZhbHVlIiwid2F0Y2hMaXN0Iiwibm90aWZ5V2F0Y2giLCJhbGxWYWx1ZXMiLCJ0aW1lb3V0SWQiLCJ3YXJuaW5nVW5ob29rZWQiLCJwdXJlIiwiZ2V0RmllbGRzTWFwIiwiZ2V0RmllbGRFbnRpdGllc0Zvck5hbWVQYXRoTGlzdCIsIm5hbWVMaXN0IiwiSU5WQUxJREFURV9OQU1FX1BBVEgiLCJmaWx0ZXJGdW5jIiwiZmlsdGVyZWROYW1lTGlzdCIsIl9lbnRpdHkkaXNMaXN0RmllbGQiLCJhcmcwIiwiYXJnMSIsImlzQWxsRmllbGRzVG91Y2hlZCIsInNob3J0TmFtZVBhdGgiLCJmaWVsZE5hbWVQYXRoIiwidXBkYXRlIiwibGlzdCIsImlzTmFtZVBhdGhMaXN0VG91Y2hlZCIsImVudGl0aWVzIiwibmFtZVBhdGhMaXN0RW50aXRpZXMiLCJ0ZXN0RmllbGQiLCJyZXNldFdpdGhGaWVsZEluaXRpYWxWYWx1ZSIsInJlY29yZHMiLCJyZXF1aXJlZEZpZWxkRW50aXRpZXMiLCJyZXNldFdpdGhGaWVsZHMiLCJvcmlnaW5WYWx1ZSIsInNraXBFeGlzdCIsIl9yZXF1aXJlZEZpZWxkRW50aXRpZSIsIm5vdGlmeU9ic2VydmVycyIsImZpZWxkRGF0YSIsImZpZWxkUHJlc2VydmUiLCJtZXJnZWRQcmVzZXJ2ZSIsInN1Yk5hbWVQYXRoIiwiX3ByZXZTdG9yZSIsInRyaWdnZXJEZXBlbmRlbmNpZXNVcGRhdGUiLCJ1cGRhdGVWYWx1ZSIsIl9uYW1lUGF0aCIsIm1lcmdlZEluZm8iLCJjaGlsZHJlbkZpZWxkcyIsImdldERlcGVuZGVuY3lDaGlsZHJlbkZpZWxkcyIsIm9uVmFsdWVzQ2hhbmdlIiwidHJpZ2dlck9uRmllbGRzQ2hhbmdlIiwicm9vdE5hbWVQYXRoIiwiZGVwZW5kZW5jaWVzMmZpZWxkcyIsImRlcGVuZGVuY3lOYW1lUGF0aCIsImZpbGxDaGlsZHJlbiIsImZpbGVkRXJyb3JzIiwib25GaWVsZHNDaGFuZ2UiLCJjaGFuZ2VkRmllbGRzIiwiZmllbGROYW1lIiwiYXJnMiIsInByb3ZpZGVOYW1lTGlzdCIsInByb21pc2VMaXN0IiwiVE1QX1NQTElUIiwidmFsaWRhdGVOYW1lUGF0aExpc3QiLCJyZWN1cnNpdmUiLCJtZXJnZWRFcnJvcnMiLCJtZXJnZWRXYXJuaW5ncyIsIl9yZWY2IiwiaGFzRXJyb3IiLCJyZXN1bHRzIiwiYWxsUHJvbWlzZUZpbmlzaCIsInJlc3VsdE5hbWVQYXRoTGlzdCIsIl9yZWY3IiwicmV0dXJuUHJvbWlzZSIsImVycm9yTGlzdCIsImVycm9yRmllbGRzIiwib3V0T2ZEYXRlIiwidHJpZ2dlck5hbWVQYXRoTGlzdCIsIm9uRmluaXNoIiwib25GaW5pc2hGYWlsZWQiLCJmb3JtUmVmIiwiX1JlYWN0JHVzZVN0YXRlIiwiZm9ybVN0b3JlIiwidHJpZ2dlckZvcm1DaGFuZ2UiLCJ0cmlnZ2VyRm9ybUZpbmlzaCIsInJlZ2lzdGVyRm9ybSIsInVucmVnaXN0ZXJGb3JtIiwib25Gb3JtQ2hhbmdlIiwib25Gb3JtRmluaXNoIiwiZm9ybUNvbnRleHQiLCJmb3Jtc1JlZiIsImZvcm1zIiwibmV3Rm9ybXMiLCJfcmVmJGNvbXBvbmVudCIsIl9yZWYkdmFsaWRhdGVUcmlnZ2VyIiwiX29uRmllbGRzQ2hhbmdlIiwiX29uRmluaXNoIiwiX3VzZUZvcm0iLCJmb3JtSW5zdGFuY2UiLCJfZm9ybUluc3RhbmNlJGdldEludGUiLCJjaGlsZHJlbk5vZGUiLCJtb3VudFJlZiIsImNoaWxkcmVuUmVuZGVyUHJvcHMiLCJwcmV2RmllbGRzUmVmIiwic291cmNlS2V5cyIsInRhcmdldEtleXMiLCJzb3VyY2VWYWx1ZSIsInRhcmdldFZhbHVlIiwiaXNTaW1pbGFyIiwiZm9ybUNvbnRleHRWYWx1ZSIsIndyYXBwZXJOb2RlIiwib25TdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIl9yZXN0UHJvcHMkb25SZXNldCIsInN0cmluZ2lmeSIsIkpTT04iLCJ1c2VXYXRjaFdhcm5pbmciLCJfYXJncyQiLCJfYXJncyQyIiwiX2Zvcm0iLCJfdXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwic2V0VmFsdWUiLCJ2YWx1ZVN0ciIsInZhbHVlU3RyUmVmIiwiaXNWYWxpZEZvcm0iLCJuYW1lUGF0aFJlZiIsIm5leHRWYWx1ZVN0ciIsIlJlZkZvcm0iLCJMaXN0IiwidXNlRm9ybSIsInVzZVdhdGNoIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInZhbHVlRXF1YWwiLCJhVmFsdWUiLCJiVmFsdWUiLCJzdHJpcExlYWRpbmdTbGFzaCIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwicGFyc2VQYXRoIiwic2VhcmNoIiwiaGFzaCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0IiwibGlzdGVuZXJzIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwidWEiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsInVuYmxvY2siLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInN1YnN0cmluZyIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwiYmFzZVRhZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJ1c2VJbnRlcm5hbExheW91dEVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsImRlcHMiLCJmaXJzdE1vdW50UmVmIiwidXNlTGF5b3V0VXBkYXRlRWZmZWN0IiwiZmlyc3RNb3VudCIsIk1vdGlvblByb3ZpZGVyIiwiRG9tV3JhcHBlciIsIm1ha2VQcmVmaXhNYXAiLCJzdHlsZVByb3AiLCJldmVudE5hbWUiLCJwcmVmaXhlcyIsImRvbVN1cHBvcnQiLCJ3aW4iLCJ2ZW5kb3JQcmVmaXhlcyIsImFuaW1hdGlvbmVuZCIsInRyYW5zaXRpb25lbmQiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiX2RvY3VtZW50JGNyZWF0ZUVsZW1lIiwicHJlZml4ZWRFdmVudE5hbWVzIiwiZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUiLCJwcmVmaXhNYXAiLCJzdHlsZVByb3BMaXN0IiwiaW50ZXJuYWxBbmltYXRpb25FbmROYW1lIiwiaW50ZXJuYWxUcmFuc2l0aW9uRW5kTmFtZSIsInN1cHBvcnRUcmFuc2l0aW9uIiwiYW5pbWF0aW9uRW5kTmFtZSIsInRyYW5zaXRpb25FbmROYW1lIiwiZ2V0VHJhbnNpdGlvbk5hbWUiLCJ0cmFuc2l0aW9uTmFtZSIsInRyYW5zaXRpb25UeXBlIiwiRlVMTF9TVEVQX1FVRVVFIiwiU0lNUExFX1NURVBfUVVFVUUiLCJzdGVwIiwidXNlU3RhdGUiLCJzZXRTdGVwIiwiX3VzZU5leHRGcmFtZSIsIm5leHRGcmFtZVJlZiIsImNhbmNlbE5leHRGcmFtZSIsIm5leHRGcmFtZSIsImRlbGF5IiwibmV4dEZyYW1lSWQiLCJpc0NhbmNlbGVkIiwidXNlTmV4dEZyYW1lIiwiX3VzZU5leHRGcmFtZTIiLCJTVEVQX1FVRVVFIiwicHJlcGFyZU9ubHkiLCJuZXh0U3RlcCIsImRvTmV4dCIsInVzZVN0YXR1cyIsInN1cHBvcnRNb3Rpb24iLCJ2aXNpYmxlIiwiZ2V0RWxlbWVudCIsIl9yZWYkbW90aW9uRW50ZXIiLCJtb3Rpb25FbnRlciIsIl9yZWYkbW90aW9uQXBwZWFyIiwibW90aW9uQXBwZWFyIiwiX3JlZiRtb3Rpb25MZWF2ZSIsIm1vdGlvbkxlYXZlIiwibW90aW9uRGVhZGxpbmUiLCJtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5Iiwib25BcHBlYXJQcmVwYXJlIiwib25FbnRlclByZXBhcmUiLCJvbkxlYXZlUHJlcGFyZSIsIm9uQXBwZWFyU3RhcnQiLCJvbkVudGVyU3RhcnQiLCJvbkxlYXZlU3RhcnQiLCJvbkFwcGVhckFjdGl2ZSIsIm9uRW50ZXJBY3RpdmUiLCJvbkxlYXZlQWN0aXZlIiwib25BcHBlYXJFbmQiLCJvbkVudGVyRW5kIiwib25MZWF2ZUVuZCIsIm9uVmlzaWJsZUNoYW5nZWQiLCJhc3luY1Zpc2libGUiLCJzZXRBc3luY1Zpc2libGUiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInNldFN0YXR1cyIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2Iiwic2V0U3R5bGUiLCJtb3VudGVkUmVmIiwiZGVhZGxpbmVSZWYiLCJnZXREb21FbGVtZW50IiwiYWN0aXZlUmVmIiwidXBkYXRlTW90aW9uRW5kU3RhdHVzIiwib25JbnRlcm5hbE1vdGlvbkVuZCIsImRlYWRsaW5lIiwiY2FuRW5kIiwiY3VycmVudEFjdGl2ZSIsIl91c2VEb21Nb3Rpb25FdmVudHMiLCJjYWNoZUVsZW1lbnRSZWYiLCJjYWxsYmFja1JlZiIsInJlbW92ZU1vdGlvbkV2ZW50cyIsInVzZURvbU1vdGlvbkV2ZW50cyIsInBhdGNoTW90aW9uRXZlbnRzIiwiZ2V0RXZlbnRIYW5kbGVycyIsInRhcmdldFN0YXR1cyIsImV2ZW50SGFuZGxlcnMiLCJfdXNlU3RlcFF1ZXVlIiwidXNlU3RlcFF1ZXVlIiwibmV3U3RlcCIsIm9uUHJlcGFyZSIsIl9ldmVudEhhbmRsZXJzJHN0ZXAiLCJfdXNlU3RlcFF1ZXVlMiIsInN0YXJ0U3RlcCIsImFjdGl2ZSIsIm5leHRTdGF0dXMiLCJpc01vdW50ZWQiLCJuZXh0RXZlbnRIYW5kbGVycyIsImZpcnN0TW91bnRDaGFuZ2VSZWYiLCJtZXJnZWRTdHlsZSIsInRyYW5zaXRpb25TdXBwb3J0IiwiQ1NTTW90aW9uIiwiX3Byb3BzJHZpc2libGUiLCJfcHJvcHMkcmVtb3ZlT25MZWF2ZSIsInJlbW92ZU9uTGVhdmUiLCJmb3JjZVJlbmRlciIsIm1vdGlvbk5hbWUiLCJsZWF2ZWRDbGFzc05hbWUiLCJldmVudFByb3BzIiwiY29udGV4dE1vdGlvbiIsImlzU3VwcG9ydFRyYW5zaXRpb24iLCJtb3Rpb24iLCJub2RlUmVmIiwid3JhcHBlck5vZGVSZWYiLCJfdXNlU3RhdHVzIiwiSFRNTEVsZW1lbnQiLCJmaW5kRE9NTm9kZSIsIl91c2VTdGF0dXMyIiwic3RhdHVzU3RlcCIsInN0YXR1c1N0eWxlIiwibWVyZ2VkVmlzaWJsZSIsInJlbmRlcmVkUmVmIiwibW90aW9uQ2hpbGRyZW4iLCJzZXROb2RlUmVmIiwibWVyZ2VkUHJvcHMiLCJkaXNwbGF5Iiwic3RhdHVzU3VmZml4IiwibW90aW9uQ2xzIiwid3JhcEtleVRvT2JqZWN0Iiwia2V5T2JqIiwicGFyc2VLZXlzIiwiZGlmZktleXMiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50TGVuIiwicHJldktleU9iamVjdHMiLCJjdXJyZW50S2V5T2JqZWN0cyIsImhpdCIsImN1cnJlbnRLZXlPYmoiLCJkdXBsaWNhdGVkS2V5cyIsIm1hdGNoS2V5IiwiX2V4Y2x1ZGVkMiIsIk1PVElPTl9QUk9QX05BTUVTIiwiQ1NTTW90aW9uTGlzdCIsImtleUVudGl0aWVzIiwicmVtb3ZlS2V5IiwibmV4dEtleUVudGl0aWVzIiwiX29uVmlzaWJsZUNoYW5nZWQiLCJvbkFsbFJlbW92ZWQiLCJtb3Rpb25Qcm9wcyIsImNoYW5nZWRWaXNpYmxlIiwicGFyc2VkS2V5T2JqZWN0cyIsInByZXZFbnRpdHkiLCJmaW5kIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwibWVyZ2UiLCJhc3NpZ25WYWx1ZSIsImRlZXBNZXJnZSIsInRoaXNBcmciLCJ1c2VTYWZlU3RhdGUiLCJkZXN0cm95UmVmIiwiX1JlYWN0JHVzZVN0YXRlMiIsImlnbm9yZURlc3Ryb3kiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJpdGVyYXRlU2ltcGxlIiwiU2V0SGVscGVycyIsImludGVycnVwdGlibGUiLCJpbnRlcm5hbFNldCIsInBhdGhzIiwicmVtb3ZlSWZVbmRlZmluZWQiLCJfcGF0aHMiLCJyZXN0UGF0aCIsImNyZWF0ZUVtcHR5Iiwic291cmNlcyIsInNyYyIsImludGVybmFsTWVyZ2UiLCJwYXJlbnRMb29wU2V0IiwibG9vcFNldCIsImlzQXJyIiwiZ2V0U3RhdHVzQ2xhc3NOYW1lcyIsImdldE1lcmdlZFN0YXR1cyIsImNvbnRleHRTdGF0dXMiLCJjdXN0b21TdGF0dXMiLCJfaW5oZXJpdHNMb29zZSIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiTWFwUHJvdG90eXBlIiwiRGlzYWJsZWRDb250ZXh0UHJvdmlkZXIiLCJvcmlnaW5EaXNhYmxlZCIsIkNvbmZpZ0NvbnN1bWVyIiwidG9OYW1lUGF0aFN0ciIsIl91c2VSY0Zvcm0iLCJyY0Zvcm0iLCJpdGVtc1JlZiIsIndyYXBGb3JtIiwiX19JTlRFUk5BTF9fIiwibmFtZVBhdGhTdHIiLCJzY3JvbGxUb0ZpZWxkIiwiZmllbGRJZCIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsTW9kZSIsImdldEZpZWxkSW5zdGFuY2UiLCJfX3Jlc3QiLCJjb250ZXh0U2l6ZSIsImNvbnRleHREaXNhYmxlZCIsImNvbnRleHRGb3JtIiwiX3Byb3BzJGNsYXNzTmFtZSIsIl9wcm9wcyRzaXplIiwiX3Byb3BzJGRpc2FibGVkIiwiY29sb24iLCJsYWJlbFdyYXAiLCJsYWJlbENvbCIsIndyYXBwZXJDb2wiLCJoaWRlUmVxdWlyZWRNYXJrIiwiX3Byb3BzJGxheW91dCIsImxheW91dCIsInNjcm9sbFRvRmlyc3RFcnJvciIsInJlcXVpcmVkTWFyayIsInJlc3RGb3JtUHJvcHMiLCJjb250ZXh0VmFsaWRhdGVNZXNzYWdlcyIsIm1lcmdlZFJlcXVpcmVkTWFyayIsIm1lcmdlZENvbG9uIiwiZm9ybUNsYXNzTmFtZSIsImVycm9ySW5mbyIsImRlZmF1bHRTY3JvbGxUb0ZpcnN0RXJyb3IiLCJjb250ZXh0VmFsdWUiLCJvcGVyYXRpb24iLCJmaWVsZEtleSIsIkl0ZW0iLCJFcnJvckxpc3QiLCJ1c2VGb3JtSW5zdGFuY2UiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJET01JdGVyYWJsZXMiLCJET01Ub2tlbkxpc3RQcm90b3R5cGUiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIndlbGxLbm93blN5bWJvbCIsIklURVJBVE9SIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiaGFuZGxlUHJvdG90eXBlIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkNPTExFQ1RJT05fTkFNRSIsIk1FVEhPRF9OQU1FIiwidG9JbmRleGVkT2JqZWN0IiwiYWRkVG9VbnNjb3BhYmxlcyIsIkl0ZXJhdG9ycyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJkZWZpbmVJdGVyYXRvciIsImNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QiLCJJU19QVVJFIiwic2V0SW50ZXJuYWxTdGF0ZSIsImdldEludGVybmFsU3RhdGUiLCJnZXR0ZXJGb3IiLCJpdGVyYXRlZCIsImtpbmQiLCJBcmd1bWVudHMiLCJwb2ludCIsIiRPYmplY3QiLCJzdHJpbmdTbGljZSIsIk1hcEhlbHBlcnMiLCJBbnRkSWNvbiIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIlRBRyIsImxvY2FsZVZhbHVlcyIsIlBhZ2luYXRpb24iLCJEYXRlUGlja2VyIiwiVGltZVBpY2tlciIsIkNhbGVuZGFyIiwicGxhY2Vob2xkZXIiLCJUYWJsZSIsImZpbHRlclRpdGxlIiwiZmlsdGVyQ29uZmlybSIsImZpbHRlclJlc2V0IiwiZmlsdGVyRW1wdHlUZXh0IiwiZmlsdGVyQ2hlY2thbGwiLCJmaWx0ZXJTZWFyY2hQbGFjZWhvbGRlciIsImVtcHR5VGV4dCIsInNlbGVjdEFsbCIsInNlbGVjdEludmVydCIsInNlbGVjdE5vbmUiLCJzZWxlY3Rpb25BbGwiLCJzb3J0VGl0bGUiLCJleHBhbmQiLCJjb2xsYXBzZSIsInRyaWdnZXJEZXNjIiwidHJpZ2dlckFzYyIsImNhbmNlbFNvcnQiLCJva1RleHQiLCJjYW5jZWxUZXh0IiwianVzdE9rVGV4dCIsIlBvcGNvbmZpcm0iLCJUcmFuc2ZlciIsInRpdGxlcyIsInNlYXJjaFBsYWNlaG9sZGVyIiwiaXRlbVVuaXQiLCJpdGVtc1VuaXQiLCJzZWxlY3RDdXJyZW50IiwicmVtb3ZlQ3VycmVudCIsInJlbW92ZUFsbCIsIlVwbG9hZCIsInVwbG9hZGluZyIsInJlbW92ZUZpbGUiLCJ1cGxvYWRFcnJvciIsInByZXZpZXdGaWxlIiwiZG93bmxvYWRGaWxlIiwiRW1wdHkiLCJUZXh0IiwiZWRpdCIsImNvcHkiLCJjb3BpZWQiLCJQYWdlSGVhZGVyIiwiYmFjayIsIm9wdGlvbmFsIiwiSW1hZ2UiLCJwcmV2aWV3IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJmb3JtSXRlbU5hbWVCbGFja0xpc3QiLCJjYW5kaWRhdGUiLCJnZXRGaWVsZElkIiwiZm9ybU5hbWUiLCJtZXJnZWRJZCIsImhhc1ZhbHVlIiwidXNlTWVyZ2VkU3RhdGUiLCJkZWZhdWx0U3RhdGVWYWx1ZSIsIm9wdGlvbiIsInBvc3RTdGF0ZSIsImlubmVyVmFsdWUiLCJzZXRJbm5lclZhbHVlIiwibWVyZ2VkVmFsdWUiLCJwb3N0TWVyZ2VkVmFsdWUiLCJvbkNoYW5nZUZuIiwic2V0UHJldlZhbHVlIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJTcGFjZUNvbXBhY3RJdGVtQ29udGV4dCIsInVzZUNvbXBhY3RJdGVtQ29udGV4dCIsImNvbXBhY3RJdGVtQ29udGV4dCIsImNvbXBhY3RJdGVtQ2xhc3NuYW1lcyIsImNvbXBhY3REaXJlY3Rpb24iLCJpc0ZpcnN0SXRlbSIsImlzTGFzdEl0ZW0iLCJjb21wYWN0U2l6ZSIsIk5vQ29tcGFjdFN0eWxlIiwiQ29tcGFjdEl0ZW0iLCJvdGhlclByb3BzIiwiX2NsYXNzTmFtZXMyIiwiZGlyZWN0aW9uQ29uZmlnIiwiY2x4IiwiY2hpbGROb2RlcyIsIm5vZGVzIiwiaXNQcm90b3R5cGVPZiIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJUWVBFIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwibGVuZ3RoT2ZBcnJheUxpa2UiLCJnZXRJdGVyYXRvciIsImdldEl0ZXJhdG9yTWV0aG9kIiwiaXRlcmF0b3JDbG9zZSIsIlJlc3VsdCIsInN0b3BwZWQiLCJSZXN1bHRQcm90b3R5cGUiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJBU19FTlRSSUVTIiwiSVNfUkVDT1JEIiwiSVNfSVRFUkFUT1IiLCJJTlRFUlJVUFRFRCIsImNhbGxGbiIsIklURVJBVE9SX0lOU1RFQURfT0ZfUkVDT1JEIiwiY29udGFpbnMiLCJyb290IiwicGFyZW50Tm9kZSIsIiQiLCJkZWZpbmVCdWlsdEluQWNjZXNzb3IiLCJOYXRpdmVTeW1ib2wiLCJTeW1ib2xQcm90b3R5cGUiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwidGhpc1N5bWJvbFZhbHVlIiwic3ltYm9sRGVzY3JpcHRpdmVTdHJpbmciLCJzeW1ib2wiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJ0b0xlbmd0aCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsImdldEl0ZXJhdG9yRGlyZWN0IiwiJFJhbmdlRXJyb3IiLCJSYW5nZUVycm9yIiwiU2V0UmVjb3JkIiwibnVtU2l6ZSIsImludFNpemUiLCJnZXRCdWlsdEluIiwiY3JlYXRlU2V0TGlrZSIsImVycm9yMiIsImlzSXRlcmFibGUiLCJpc1NldExpa2UiLCJTVkdFbGVtZW50IiwiaXNET00iLCJpbnB1dFRvUkdCIiwicmdiIiwic3RyaW5nSW5wdXRUb09iamVjdCIsImlzVmFsaWRDU1NVbml0IiwiQ1NTX1VOSVQiLCJQRVJNSVNTSVZFX01BVENIMyIsIlBFUk1JU1NJVkVfTUFUQ0g0IiwibWF0Y2hlcnMiLCJyZ2JhIiwiaHNsIiwiaHNsYSIsImhzdiIsImhzdmEiLCJoZXgzIiwiaGV4NiIsImhleDQiLCJoZXg4IiwibmFtZWQiLCJhZGRFdmVudExpc3RlbmVyV3JhcCIsImV2ZW50VHlwZSIsImNiIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJyZXNwb25zaXZlQXJyYXkiLCJyZXNwb25zaXZlTWFwIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInh4bCIsInN1YnNjcmliZXJzIiwic3ViVWlkIiwic2NyZWVucyIsInJlc3BvbnNpdmVPYnNlcnZlIiwibWF0Y2hIYW5kbGVycyIsInBvaW50TWFwIiwic3Vic2NyaWJlIiwicmVnaXN0ZXIiLCJ1bnN1YnNjcmliZSIsInVucmVnaXN0ZXIiLCJzY3JlZW4iLCJtYXRjaE1lZGlhUXVlcnkiLCJtcWwiLCJyZW1vdmVMaXN0ZW5lciIsImNsZWFyIiwibWF0Y2hNZWRpYSIsImFkZExpc3RlbmVyIiwiY2xzIiwiY29tcGFjdCIsImZvcm1JdGVtQ29udGV4dCIsImdyb3VwRm9ybUl0ZW1Db250ZXh0Iiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwib25Gb2N1cyIsIm9uQmx1ciIsInVzZVJlbW92ZVBhc3N3b3JkVGltZW91dCIsImlucHV0UmVmIiwidHJpZ2dlck9uTW91bnQiLCJyZW1vdmVQYXNzd29yZFRpbWVvdXRSZWYiLCJyZW1vdmVQYXNzd29yZFRpbWVvdXQiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0aW1lciIsInJlc29sdmVPbkNoYW5nZSIsImN1cnJlbnRUYXJnZXQiLCJjbG9uZU5vZGUiLCJfY2xhc3NOYW1lczQiLCJfcHJvcHMkYm9yZGVyZWQiLCJib3JkZXJlZCIsImN1c3RvbVNpemUiLCJjdXN0b21EaXNhYmxlZCIsImFsbG93Q2xlYXIiLCJhZGRvbkFmdGVyIiwiYWRkb25CZWZvcmUiLCJfdXNlQ29tcGFjdEl0ZW1Db250ZXgiLCJtZXJnZWRTaXplIiwibWVyZ2VkRGlzYWJsZWQiLCJtZXJnZWRTdGF0dXMiLCJpbnB1dEhhc1ByZWZpeFN1ZmZpeCIsImhhc1ByZWZpeFN1ZmZpeCIsInByZXZIYXNQcmVmaXhTdWZmaXgiLCJtZXJnZWRBbGxvd0NsZWFyIiwic3VmZml4Tm9kZSIsIkZyYWdtZW50IiwiY2xlYXJJY29uIiwiQ2xvc2VDaXJjbGVGaWxsZWQiLCJhdXRvQ29tcGxldGUiLCJpbnB1dENsYXNzTmFtZSIsImFmZml4V3JhcHBlckNsYXNzTmFtZSIsIndyYXBwZXJDbGFzc05hbWUiLCJncm91cENsYXNzTmFtZSIsIkFjdGlvbk1hcCIsImNsaWNrIiwiaG92ZXIiLCJfcHJvcHMkdmlzaWJpbGl0eVRvZ2ciLCJ2aXNpYmlsaXR5VG9nZ2xlIiwidmlzaWJpbGl0eUNvbnRyb2xsZWQiLCJzZXRWaXNpYmxlIiwib25WaXNpYmxlQ2hhbmdlIiwicHJldlN0YXRlIiwibmV3U3RhdGUiLCJyZW5kZXJQYXNzd29yZCIsImN1c3RvbWl6ZUlucHV0UHJlZml4Q2xzIiwiaW5wdXRQcmVmaXhDbHMiLCJzdWZmaXhJY29uIiwiX2ljb25Qcm9wcyIsIl9wcm9wcyRhY3Rpb24iLCJfcHJvcHMkaWNvblJlbmRlciIsImljb25SZW5kZXIiLCJpY29uVHJpZ2dlciIsImljb25Qcm9wcyIsImdldEljb24iLCJvbWl0dGVkUHJvcHMiLCJidXR0b24iLCJjdXN0b21pemVTaXplIiwiX3Byb3BzJGVudGVyQnV0dG9uIiwiZW50ZXJCdXR0b24iLCJsb2FkaW5nIiwiY3VzdG9tT25TZWFyY2giLCJvblNlYXJjaCIsImN1c3RvbU9uQ2hhbmdlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsImNvbXBvc2VkUmVmIiwib25Nb3VzZURvd24iLCJhY3RpdmVFbGVtZW50Iiwic2VhcmNoSWNvbiIsIlNlYXJjaE91dGxpbmVkIiwiYnRuQ2xhc3NOYW1lIiwiZW50ZXJCdXR0b25Bc0VsZW1lbnQiLCJpc0FudGRCdXR0b24iLCJfX0FOVF9CVVRUT04iLCJvblByZXNzRW50ZXIiLCJDbGVhcmFibGVJbnB1dFR5cGUiLCJDbGVhcmFibGVMYWJlbGVkSW5wdXQiLCJyZWFkT25seSIsImhhbmRsZVJlc2V0IiwibmVlZENsZWFyIiwic3RhdHVzQ29udGV4dCIsImZvY3VzZWQiLCJoaWRkZW4iLCJhZmZpeFdyYXBwZXJDbHMiLCJyZW5kZXJDbGVhckljb24iLCJpbnB1dFR5cGUiLCJyZW5kZXJUZXh0QXJlYVdpdGhDbGVhckljb24iLCJmaXhFbW9qaUxlbmd0aCIsIm1heExlbmd0aCIsInNldFRyaWdnZXJWYWx1ZSIsImlzQ3Vyc29ySW5FbmQiLCJwcmVWYWx1ZSIsInRyaWdnZXJWYWx1ZSIsIm5ld1RyaWdnZXJWYWx1ZSIsIl9hJGJvcmRlcmVkIiwiX2Ekc2hvd0NvdW50Iiwic2hvd0NvdW50IiwiX1JlYWN0JHVzZUNvbnRleHQyIiwiaW5uZXJSZWYiLCJjbGVhcmFibGVJbnB1dFJlZiIsImNvbXBvc2l0aW5nIiwic2V0Q29tcG9zaXRpbmciLCJfUmVhY3QkdXNlU3RhdGUzIiwiX1JlYWN0JHVzZVN0YXRlNCIsInNldEZvY3VzZWQiLCJvbGRDb21wb3NpdGlvblZhbHVlUmVmIiwib2xkU2VsZWN0aW9uU3RhcnRSZWYiLCJfdXNlTWVyZ2VkU3RhdGUiLCJfdXNlTWVyZ2VkU3RhdGUyIiwiaGFuZGxlU2V0VmFsdWUiLCJoYXNNYXhMZW5ndGgiLCJyZXNpemFibGVUZXh0QXJlYSIsImZvY3VzIiwiY3Vyc29yIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJ0cmlnZ2VyRm9jdXMiLCJ0ZXh0QXJlYSIsImJsdXIiLCJyZXNpemUiLCJzZWxlY3Rpb25TdGFydCIsImZpeENvbnRyb2xsZWRWYWx1ZSIsInRleHRhcmVhTm9kZSIsInZhbHVlTGVuZ3RoIiwiZGF0YUNvdW50IiwiZm9ybWF0dGVyIiwiR3JvdXAiLCJTZWFyY2giLCJUZXh0QXJlYSIsIlBhc3N3b3JkIiwia2VlcEVtcHR5IiwiX3Byb3BzJGNvbXBvbmVudE5hbWUiLCJjb21wb25lbnROYW1lIiwiZGVmYXVsdExvY2FsZSIsImFudExvY2FsZSIsImxvY2FsZUZyb21Db250ZXh0IiwibG9jYWxlQ29kZSIsIlY4X1ZFUlNJT04iLCJWIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRvbWFpbiIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIkYiLCJQcm9wZXJ0aWVzIiwiY29udGFpbmVyQ2FjaGUiLCJnZXRNYXJrIiwiYXR0YWNoVG8iLCJib2R5IiwiZ2V0T3JkZXIiLCJmaW5kU3R5bGVzIiwiY29udGFpbmVyIiwidGFnTmFtZSIsImluamVjdENTUyIsImNzcyIsIl9vcHRpb24kcHJpb3JpdHkiLCJtZXJnZWRPcmRlciIsImlzUHJlcGVuZFF1ZXVlIiwic3R5bGVOb2RlIiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiZXhpc3RTdHlsZSIsIm5vZGVQcmlvcml0eSIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiZmluZEV4aXN0Tm9kZSIsInJlbW92ZUNTUyIsImV4aXN0Tm9kZSIsInJlbW92ZUNoaWxkIiwic3luY1JlYWxDb250YWluZXIiLCJjYWNoZWRSZWFsQ29udGFpbmVyIiwicGxhY2Vob2xkZXJTdHlsZSIsInVwZGF0ZUNTUyIsIl9vcHRpb24kY3NwIiwiX29wdGlvbiRjc3AyIiwiX29wdGlvbiRjc3AzIiwibmV3Tm9kZSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIkljb25Db250ZXh0IiwiY3JlYXRlZFJlZiIsImVsZW1lbnRzIiwic2V0RWxlbWVudHMiLCJkaXYiLCJub3RpY2VFbGUiLCJvcmlnaW5FbGVtZW50cyIsImZpbmRJbmRleCIsImVsZSIsImNsb25lTGlzdCIsInVzZURlYm91bmNlIiwiY2FjaGVWYWx1ZSIsInNldENhY2hlVmFsdWUiLCJ0aW1lb3V0Iiwidmlld0JveCIsInhtbG5zIiwiZmlsbFJ1bGUiLCJjeCIsImN5IiwicngiLCJyeSIsImRlZmF1bHRFbXB0eUltZyIsInNpbXBsZUVtcHR5SW1nIiwiX2EkaW1hZ2UiLCJpbWFnZSIsImltYWdlU3R5bGUiLCJjb250ZXh0TG9jYWxlIiwiZGVzIiwiYWx0IiwiaW1hZ2VOb2RlIiwiUFJFU0VOVEVEX0lNQUdFX0RFRkFVTFQiLCJQUkVTRU5URURfSU1BR0VfU0lNUExFIiwiRlVOQ1RJT05fTkFNRV9FWElTVFMiLCJFWElTVFMiLCJmdW5jdGlvblRvU3RyaW5nIiwibmFtZVJFIiwicmVnRXhwRXhlYyIsImdldENvbGxhcHNlZEhlaWdodCIsIm9wYWNpdHkiLCJnZXRSZWFsSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0Iiwic2tpcE9wYWNpdHlUcmFuc2l0aW9uIiwicHJvcGVydHlOYW1lIiwiY29sbGFwc2VNb3Rpb24iLCJvZmZzZXRIZWlnaHQiLCJnZXRUcmFuc2l0aW9uRGlyZWN0aW9uIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInNwZWNpZmljQ3JlYXRlIiwiYm91bmRGdW5jdGlvbiIsImZpbHRlclJlamVjdCIsImJpdG1hcCIsInRydW5jIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIlBPTFlGSUxMIiwiTkFUSVZFIiwicHJvcGVydHlLZXkiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0cnlHZXQiLCJjYWxsZWUiLCJ1bmN1cnJ5VGhpc0FjY2Vzc29yIiwiTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yIiwiaW5zcGVjdFNvdXJjZSIsIklTX0JST1dTRVIiLCJJU19ERU5PIiwiTmF0aXZlUHJvbWlzZVByb3RvdHlwZSIsIlNQRUNJRVMiLCJTVUJDTEFTU0lORyIsIk5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJDT05TVFJVQ1RPUiIsIlJFSkVDVElPTl9FVkVOVCIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJkYXJrQ29sb3JNYXAiLCJ0b0hzdiIsInRvSGV4IiwibWl4IiwicmdiMSIsInJnYjIiLCJhbW91bnQiLCJnZXRIdWUiLCJsaWdodCIsImh1ZSIsImdldFNhdHVyYXRpb24iLCJzYXR1cmF0aW9uIiwib3B0cyIsInBhdHRlcm5zIiwicENvbG9yIiwiY29sb3JTdHJpbmciLCJfaHN2IiwiX2NvbG9yU3RyaW5nIiwiYmFja2dyb3VuZENvbG9yIiwicHJlc2V0UHJpbWFyeUNvbG9ycyIsInJlZCIsInZvbGNhbm8iLCJvcmFuZ2UiLCJnb2xkIiwieWVsbG93IiwibGltZSIsImdyZWVuIiwiY3lhbiIsImJsdWUiLCJnZWVrYmx1ZSIsInB1cnBsZSIsIm1hZ2VudGEiLCJncmV5IiwicHJlc2V0UGFsZXR0ZXMiLCJwcmVzZXREYXJrUGFsZXR0ZXMiLCJwcmltYXJ5IiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW55ZWxsb3ciLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXJibHVzaCIsImxhdmVuZGVyIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZWdyZWVuIiwibGluZW4iLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicmViZWNjYXB1cnBsZSIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvd2dyZWVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJMb2NhbGVDb250ZXh0IiwiUHJlc2V0U3RhdHVzQ29sb3JUeXBlcyIsIlByZXNldENvbG9yVHlwZXMiLCJpc0NvbnN0cnVjdG9yIiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlUHJvcGVydHkiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwibmF0aXZlU2xpY2UiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiJEFycmF5Iiwic3RhcnQiLCJmaW4iLCJkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSIsInByb2Nlc3MiLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsImNhY2hlUmVmIiwidG9QcmltaXRpdmUiLCJpc1N5bWJvbCIsInBvc3RmaXgiLCJnZXREZXNjcmlwdG9yIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFIiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJjYWxsZWQiLCJmb28iLCJzZXRUb1N0cmluZ1RhZyIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiZ2V0TWV0aG9kIiwiaW5uZXJSZXN1bHQiLCJpbm5lckVycm9yIiwiYmFzZVRvU3RyaW5nIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwiVU5TVVBQT1JURURfRE9UX0FMTCIsIlVOU1VQUE9SVEVEX05DRyIsIm5hdGl2ZVJlcGxhY2UiLCJuYXRpdmVFeGVjIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImdyb3VwIiwicmUiLCJyYXciLCJncm91cHMiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsIm9iajEiLCJvYmoyIiwic2hhbGxvdyIsInJlZlNldCIsImRlZXBFcXVhbCIsImxldmVsIiwiY2lyY3VsYXIiLCJuZXdMZXZlbCIsInNlZWQiLCJnZXRVdWlkIiwiX0NvbXBvbmVudCIsIk5vdGlmaWNhdGlvbiIsIm5vdGljZXMiLCJob29rUmVmcyIsIm9yaWdpbk5vdGljZSIsIl9vcmlnaW5Ob3RpY2Uka2V5IiwicHJldmlvdXNTdGF0ZSIsIm5vdGljZUluZGV4IiwidXBkYXRlZE5vdGljZXMiLCJ1cGRhdGVNYXJrIiwidXNlclBhc3NLZXkiLCJfcmVmMiRub3RpY2UiLCJub3RpY2VQcm9wc01hcCIsIm5vdGljZUtleXMiLCJub3RpY2VLZXkiLCJfbm90aWNlJG9uQ2xvc2UiLCJtb3Rpb25DbGFzc05hbWUiLCJtb3Rpb25TdHlsZSIsIl90aGlzMiRub3RpY2VQcm9wc01hcCIsIk5vdGljZSIsInRvZGF5IiwiYmFja1RvVG9kYXkiLCJ0aW1lU2VsZWN0IiwiZGF0ZVNlbGVjdCIsIndlZWtTZWxlY3QiLCJtb250aFNlbGVjdCIsInllYXJTZWxlY3QiLCJkZWNhZGVTZWxlY3QiLCJ5ZWFyRm9ybWF0IiwiZGF5Rm9ybWF0IiwiZGF0ZVRpbWVGb3JtYXQiLCJtb250aEJlZm9yZVllYXIiLCJwcmV2aW91c01vbnRoIiwibmV4dE1vbnRoIiwicHJldmlvdXNZZWFyIiwibmV4dFllYXIiLCJwcmV2aW91c0RlY2FkZSIsIm5leHREZWNhZGUiLCJwcmV2aW91c0NlbnR1cnkiLCJuZXh0Q2VudHVyeSIsInllYXJQbGFjZWhvbGRlciIsInF1YXJ0ZXJQbGFjZWhvbGRlciIsIm1vbnRoUGxhY2Vob2xkZXIiLCJ3ZWVrUGxhY2Vob2xkZXIiLCJyYW5nZVBsYWNlaG9sZGVyIiwicmFuZ2VZZWFyUGxhY2Vob2xkZXIiLCJyYW5nZVF1YXJ0ZXJQbGFjZWhvbGRlciIsInJhbmdlTW9udGhQbGFjZWhvbGRlciIsInJhbmdlV2Vla1BsYWNlaG9sZGVyIiwidGltZVBpY2tlckxvY2FsZSIsIl9hcnJheVdpdGhIb2xlcyIsIl9ub25JdGVyYWJsZVJlc3QiLCJfc2V0UHJvdG90eXBlT2YiLCJjbG9zZVRpbWVyIiwiY2xlYXJDbG9zZVRpbWVyIiwic3RhcnRDbG9zZVRpbWVyIiwicmVzdGFydENsb3NlVGltZXIiLCJjb21wb25lbnRDbGFzcyIsImRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyIsImNyZWF0ZVBvcnRhbCIsIl9pdGVyYWJsZVRvQXJyYXkiLCJSb3dDb250ZXh0IiwiTWFwU2hpbSIsImdldEluZGV4IiwiY2xhc3NfMSIsIl9fZW50cmllc19fIiwiY3R4IiwiaXNCcm93c2VyIiwiZ2xvYmFsJDEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSIsInRyYW5zaXRpb25LZXlzIiwibXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIiLCJjb25uZWN0ZWRfIiwibXV0YXRpb25FdmVudHNBZGRlZF8iLCJtdXRhdGlvbnNPYnNlcnZlcl8iLCJvYnNlcnZlcnNfIiwib25UcmFuc2l0aW9uRW5kXyIsImxlYWRpbmdDYWxsIiwidHJhaWxpbmdDYWxsIiwibGFzdENhbGxUaW1lIiwicmVzb2x2ZVBlbmRpbmciLCJ0aW1lb3V0Q2FsbGJhY2siLCJ0aW1lU3RhbXAiLCJ0aHJvdHRsZSIsImFkZE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjb25uZWN0XyIsInJlbW92ZU9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZGlzY29ubmVjdF8iLCJ1cGRhdGVPYnNlcnZlcnNfIiwiYWN0aXZlT2JzZXJ2ZXJzIiwiZ2F0aGVyQWN0aXZlIiwiaGFzQWN0aXZlIiwiYnJvYWRjYXN0QWN0aXZlIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlXyIsImRlZmluZUNvbmZpZ3VyYWJsZSIsImdldFdpbmRvd09mIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZW1wdHlSZWN0IiwiY3JlYXRlUmVjdEluaXQiLCJ0b0Zsb2F0IiwiZ2V0Qm9yZGVyc1NpemUiLCJzdHlsZXMiLCJwb3NpdGlvbnMiLCJwb3NpdGlvbiIsImdldEhUTUxFbGVtZW50Q29udGVudFJlY3QiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJwYWRkaW5ncyIsInBvc2l0aW9uc18xIiwiZ2V0UGFkZGluZ3MiLCJob3JpelBhZCIsInZlcnRQYWQiLCJib3hTaXppbmciLCJkb2N1bWVudEVsZW1lbnQiLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImlzU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiZ2V0QkJveCIsImdldENvbnRlbnRSZWN0IiwiYmJveCIsImdldFNWR0NvbnRlbnRSZWN0IiwiUmVzaXplT2JzZXJ2YXRpb24iLCJicm9hZGNhc3RXaWR0aCIsImJyb2FkY2FzdEhlaWdodCIsImNvbnRlbnRSZWN0XyIsInJlY3QiLCJicm9hZGNhc3RSZWN0IiwiUmVzaXplT2JzZXJ2ZXJFbnRyeSIsInJlY3RJbml0IiwiQ29uc3RyIiwiY29udGVudFJlY3QiLCJET01SZWN0UmVhZE9ubHkiLCJSZXNpemVPYnNlcnZlclNQSSIsImNvbnRyb2xsZXIiLCJjYWxsYmFja0N0eCIsImFjdGl2ZU9ic2VydmF0aW9uc18iLCJvYnNlcnZhdGlvbnNfIiwiY2FsbGJhY2tfIiwiY29udHJvbGxlcl8iLCJjYWxsYmFja0N0eF8iLCJFbGVtZW50Iiwib2JzZXJ2YXRpb25zIiwidW5vYnNlcnZlIiwiY2xlYXJBY3RpdmUiLCJvYnNlcnZhdGlvbiIsIlJlc2l6ZU9ic2VydmVyIiwiYXV0b0FkanVzdE92ZXJmbG93IiwiYWRqdXN0WCIsImFkanVzdFkiLCJ0YXJnZXRPZmZzZXQiLCJwbGFjZW1lbnRzIiwicG9pbnRzIiwidG9wTGVmdCIsImxlZnRUb3AiLCJ0b3BSaWdodCIsInJpZ2h0VG9wIiwiYm90dG9tUmlnaHQiLCJyaWdodEJvdHRvbSIsImJvdHRvbUxlZnQiLCJsZWZ0Qm90dG9tIiwic2l6ZXMiLCJDb2wiLCJndXR0ZXIiLCJzdXBwb3J0RmxleEdhcCIsInNwYW4iLCJvcmRlciIsInB1bGwiLCJmbGV4Iiwib3RoZXJzIiwic2l6ZUNsYXNzT2JqIiwiX2V4dGVuZHMyIiwic2l6ZVByb3BzIiwicHJvcFNpemUiLCJob3Jpem9udGFsR3V0dGVyIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ2ZXJ0aWNhbEd1dHRlciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFyc2VGbGV4IiwibWluV2lkdGgiLCJFTVBUWV9MSVNUIiwidG9FcnJvckVudGl0eSIsImVycm9yU3RhdHVzIiwiaGVscCIsImhlbHBTdGF0dXMiLCJfcmVmJGVycm9ycyIsIl9yZWYkd2FybmluZ3MiLCJiYXNlQ2xhc3NOYW1lIiwiZGVib3VuY2VFcnJvcnMiLCJkZWJvdW5jZVdhcm5pbmdzIiwiZnVsbEtleUxpc3QiLCJoZWxwUHJvcHMiLCJob2xkZXJQcm9wcyIsImhvbGRlckNsYXNzTmFtZSIsImhvbGRlclN0eWxlIiwiaXRlbVByb3BzIiwiaXRlbUNsYXNzTmFtZSIsIml0ZW1TdHlsZSIsImlkcyIsImRlbGF5RnJhbWVzIiwibXlJZCIsInJlc3RGcmFtZXMiLCJpbnRlcm5hbENhbGxiYWNrIiwicGlkIiwic3R5bGVGb3JQc2V1ZG8iLCJpc0hpZGRlbiIsIm9mZnNldFBhcmVudCIsImdldFZhbGlkYXRlQ29udGFpbmVyIiwibm9kZVJvb3QiLCJEb2N1bWVudCIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImlzTm90R3JleSIsIldhdmUiLCJjb250YWluZXJSZWYiLCJhbmltYXRpb25TdGFydCIsImRlc3Ryb3llZCIsIndhdmVDb2xvciIsImluc2VydEV4dHJhTm9kZSIsImV4dHJhTm9kZSIsImF0dHJpYnV0ZU5hbWUiLCJnZXRBdHRyaWJ1dGVOYW1lIiwiYm9yZGVyQ29sb3IiLCJnZXRSb290Tm9kZSIsIm5vZGVCb2R5Iiwib25UcmFuc2l0aW9uU3RhcnQiLCJvblRyYW5zaXRpb25FbmQiLCJyZXNldEVmZmVjdCIsImFuaW1hdGlvbk5hbWUiLCJiaW5kQW5pbWF0aW9uRXZlbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY2xpY2tXYXZlVGltZW91dElkIiwiYW5pbWF0aW9uU3RhcnRJZCIsInJlbmRlcldhdmUiLCJfdG9Qcm9wZXJ0eUtleSIsImhpbnQiLCJwcmltIiwibmF0aXZlS2V5cyIsImluaGVyaXRJZlJlcXVpcmVkIiwidGhpc051bWJlclZhbHVlIiwiTmF0aXZlTnVtYmVyIiwiUHVyZU51bWJlck5hbWVzcGFjZSIsIk51bWJlclByb3RvdHlwZSIsImNoYXJDb2RlQXQiLCJ0b051bWVyaWMiLCJwcmltVmFsdWUiLCJ0b051bWJlciIsImZpcnN0IiwidGhpcmQiLCJyYWRpeCIsIm1heENvZGUiLCJkaWdpdHMiLCJjb2RlIiwiRk9SQ0VEIiwiY2FsbGVkV2l0aE5ldyIsImR1bW15IiwiTnVtYmVyV3JhcHBlciIsImRhdGVUb1ByaW1pdGl2ZSIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90b3R5cGUiLCIkZmlsdGVyIiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiZm9yd2FyZFJlZiIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwiZXgiLCJkZWZhdWx0UHJldmVudGVkIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiRjb21wb25lbnQiLCJpc0R1cGxpY2F0ZU5hdmlnYXRpb24iLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsInVzZUV2ZW50IiwiZm5SZWYiLCJfZm5SZWYkY3VycmVudCIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInByb21pc2VSZXNvbHZlIiwicmVhbCIsIm9uRmluYWxseSIsImRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJhcml0eSIsIkEiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiRnVuY3Rpb25OYW1lIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkl0ZXJhdG9yc0NvcmUiLCJQUk9QRVJfRlVOQ1RJT05fTkFNRSIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJTQUZFX0NMT1NJTkciLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIlByb3RvdHlwZSIsIldyYXBwZXIiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJDT05TVFJVQ1RPUl9OQU1FIiwiaXRlcmF0ZSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJvbmNlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImFDb25zdHJ1Y3RvciIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCIkUmVnRXhwIiwiTUlTU0VEX1NUSUNLWSIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwicmVnZXhwRXhlYyIsIlJlZ0V4cFByb3RvdHlwZSIsIlNIQU0iLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwidW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kIiwibmF0aXZlTWV0aG9kIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJ1bmN1cnJpZWROYXRpdmVNZXRob2QiLCIkZXhlYyIsInVuaWNvZGUiLCJSIiwicnVudGltZUxvY2FsZSIsImNoYW5nZUNvbmZpcm1Mb2NhbGUiLCJuZXdMb2NhbGUiLCJnZXRDb25maXJtTG9jYWxlIiwiY3JlYXRlUm9vdCIsImZ1bGxDbG9uZSIsInJlYWN0UmVuZGVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInRvZ2dsZVdhcm5pbmciLCJza2lwIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJNQVJLIiwibW9kZXJuUmVuZGVyIiwibGVnYWN5UmVuZGVyIiwibW9kZXJuVW5tb3VudCIsIl9tb2Rlcm5Vbm1vdW50IiwiX2NvbnRhaW5lciRNQVJLIiwidW5tb3VudCIsImxlZ2FjeVVubW91bnQiLCJfdW5tb3VudCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0IiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsIiR0b1N0cmluZyIsImdldFJlZ0V4cEZsYWdzIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZWxlbWVudExpc3RlbmVycyIsInJlc2l6ZU9ic2VydmVyIiwiX2VsZW1lbnRMaXN0ZW5lcnMkZ2V0IiwiQ29sbGVjdGlvbkNvbnRleHQiLCJTaW5nbGVPYnNlcnZlciIsImVsZW1lbnRSZWYiLCJ3cmFwcGVyUmVmIiwib25Db2xsZWN0aW9uUmVzaXplIiwiaXNSZW5kZXJQcm9wcyIsIm1lcmdlZENoaWxkcmVuIiwic2l6ZVJlZiIsIm9mZnNldFdpZHRoIiwiY2FuUmVmIiwib3JpZ2luUmVmIiwibWVyZ2VkUmVmIiwiZ2V0RG9tIiwicHJvcHNSZWYiLCJvbkludGVybmFsUmVzaXplIiwiX3Byb3BzUmVmJGN1cnJlbnQiLCJvblJlc2l6ZSIsIl90YXJnZXQkZ2V0Qm91bmRpbmdDbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImZpeGVkV2lkdGgiLCJmaXhlZEhlaWdodCIsIm1lcmdlZE9mZnNldFdpZHRoIiwibWVyZ2VkT2Zmc2V0SGVpZ2h0Iiwic2l6ZUluZm8iLCJjdXJyZW50RWxlbWVudCIsIlJlZlJlc2l6ZU9ic2VydmVyIiwiQ29sbGVjdGlvbiIsIm9uQmF0Y2hSZXNpemUiLCJyZXNpemVJZFJlZiIsInJlc2l6ZUluZm9zUmVmIiwiY3VycmVudElkIiwiZGlkVXBkYXRlIiwicGFyZW50UmVmIiwiaW5pdFJlZiIsIl9jb250YWluZXJSZWYkY3VycmVudCIsIl9jb250YWluZXJSZWYkY3VycmVudDIiLCJpc1BvaW50c0VxIiwiYTEiLCJhMiIsImlzQWxpZ25Qb2ludCIsImdldE1vdGlvbiIsIk1hc2siLCJ6SW5kZXgiLCJtYXNrIiwibWFza01vdGlvbiIsIm1hc2tBbmltYXRpb24iLCJtYXNrVHJhbnNpdGlvbk5hbWUiLCJ2ZW5kb3JQcmVmaXgiLCJqc0Nzc01hcCIsIldlYmtpdCIsIk1veiIsImdldFZlbmRvclByZWZpeCIsImdldFRyYW5zZm9ybU5hbWUiLCJzZXRUcmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJzZXRUcmFuc2Zvcm0iLCJnZXRDb21wdXRlZFN0eWxlWCIsIm1hdHJpeDJkIiwibWF0cml4M2QiLCJmb3JjZVJlbGF5b3V0IiwiZWxlbSIsIm9yaWdpbmFsU3R5bGUiLCJlbCIsImdldFNjcm9sbCIsImdldFNjcm9sbExlZnQiLCJnZXRTY3JvbGxUb3AiLCJnZXRPZmZzZXQiLCJib3giLCJkb2MiLCJkb2NFbGVtIiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsImdldENsaWVudFBvc2l0aW9uIiwiaXNXaW5kb3ciLCJfUkVfTlVNX05PX1BYIiwiUkVfUE9TIiwiTEVGVCIsImdldE9mZnNldERpcmVjdGlvbiIsInVzZUNzc1JpZ2h0IiwidXNlQ3NzQm90dG9tIiwib3Bwb3NpdGVPZmZzZXREaXJlY3Rpb24iLCJzZXRMZWZ0VG9wIiwicHJlc2V0SCIsInByZXNldFYiLCJob3Jpem9udGFsUHJvcGVydHkiLCJ2ZXJ0aWNhbFByb3BlcnR5Iiwib3Bwb3NpdGVIb3Jpem9udGFsUHJvcGVydHkiLCJvcHBvc2l0ZVZlcnRpY2FsUHJvcGVydHkiLCJvcmlnaW5hbFRyYW5zaXRpb24iLCJvcmlnaW5hbE9mZnNldCIsIm9sZCIsInByZXNldCIsIl9kaXIiLCJfb2ZmIiwic2V0VHJhbnNmb3JtJDEiLCJvcmlnaW5hbFhZIiwibWF0cml4IiwiZ2V0VHJhbnNmb3JtWFkiLCJyZXN1bHRYWSIsInh5IiwibWF0Y2gyZCIsInNldFRyYW5zZm9ybVhZIiwiZWFjaCIsImlzQm9yZGVyQm94Rm4iLCJjcyIsImNvbXB1dGVkU3R5bGUiLCJyc0xlZnQiLCJwaXhlbExlZnQiLCJCT1hfTU9ERUxTIiwic3dhcCIsImdldFBCTVdpZHRoIiwid2hpY2giLCJjc3NQcm9wIiwiZG9tVXRpbHMiLCJnZXRQYXJlbnQiLCJwYXJlbnQiLCJob3N0IiwiZ2V0V0giLCJleHRyYSIsInZpZXdwb3J0V2lkdGgiLCJ2aWV3cG9ydEhlaWdodCIsImRvY1dpZHRoIiwiZG9jSGVpZ2h0IiwiYm9yZGVyQm94VmFsdWUiLCJpc0JvcmRlckJveCIsImNzc0JveFZhbHVlIiwiYm9yZGVyQm94VmFsdWVPcklzQm9yZGVyQm94IiwicmVmV2luIiwiZG9jdW1lbnRFbGVtZW50UHJvcCIsImNvbXBhdE1vZGUiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImdldFdISWdub3JlRGlzcGxheSIsImluY2x1ZGVNYXJnaW4iLCJ1dGlscyIsImdldFdpbmRvdyIsImdldERvY3VtZW50IiwiaWdub3JlU2hha2UiLCJvcmlPZmZzZXQiLCJvTGVmdCIsIm9Ub3AiLCJ0TGVmdCIsInRUb3AiLCJ1c2VDc3NUcmFuc2Zvcm0iLCJzZXRPZmZzZXQiLCJnZXRXaW5kb3dTY3JvbGxMZWZ0IiwiZ2V0V2luZG93U2Nyb2xsVG9wIiwiZ2V0T2Zmc2V0UGFyZW50IiwicG9zaXRpb25TdHlsZSIsIm5vZGVOYW1lIiwiZ2V0UGFyZW50JDEiLCJnZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQiLCJhbHdheXNCeVZpZXdwb3J0IiwidmlzaWJsZVJlY3QiLCJJbmZpbml0eSIsIm9yaWdpbmFsUG9zaXRpb24iLCJzY3JvbGxYIiwic2Nyb2xsWSIsImRvY3VtZW50V2lkdGgiLCJzY3JvbGxXaWR0aCIsImRvY3VtZW50SGVpZ2h0IiwiYm9keVN0eWxlIiwib3ZlcmZsb3dYIiwiaW5uZXJXaWR0aCIsIm92ZXJmbG93WSIsImlubmVySGVpZ2h0IiwiaXNBbmNlc3RvckZpeGVkIiwibWF4VmlzaWJsZVdpZHRoIiwibWF4VmlzaWJsZUhlaWdodCIsImdldFJlZ2lvbiIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImdldEFsaWduT2Zmc2V0IiwicmVnaW9uIiwiYWxpZ24iLCJIIiwiZ2V0RWxGdXR1cmVQb3MiLCJlbFJlZ2lvbiIsInJlZk5vZGVSZWdpb24iLCJpc0ZhaWxYIiwiZWxGdXR1cmVQb3MiLCJpc0ZhaWxZIiwiZmxpcCIsInJlZyIsImZsaXBPZmZzZXQiLCJjb252ZXJ0T2Zmc2V0Iiwib2Zmc2V0TGVuIiwibm9ybWFsaXplT2Zmc2V0IiwiZG9BbGlnbiIsInRndFJlZ2lvbiIsImlzVGd0UmVnaW9uVmlzaWJsZSIsIm5ld092ZXJmbG93Q2ZnIiwiZmFpbCIsIm5ld0VsUmVnaW9uIiwibmV3UG9pbnRzIiwibmV3T2Zmc2V0IiwibmV3VGFyZ2V0T2Zmc2V0IiwiaXNDb21wbGV0ZUZhaWxYIiwiX25ld1BvaW50cyIsIl9uZXdPZmZzZXQiLCJfbmV3VGFyZ2V0T2Zmc2V0IiwiaXNDb21wbGV0ZUZhaWxZIiwiaXNTdGlsbEZhaWxYIiwiaXNTdGlsbEZhaWxZIiwiX25ld1BvaW50czIiLCJyZXNpemVXaWR0aCIsInJlc2l6ZUhlaWdodCIsImFkanVzdEZvclZpZXdwb3J0IiwiYWxpZ25FbGVtZW50IiwicmVmTm9kZSIsInRhcmdldFJlZ2lvbiIsImlzT3V0T2ZWaXNpYmxlUmVjdCIsIl9fZ2V0T2Zmc2V0UGFyZW50IiwiX19nZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQiLCJtb25pdG9yUmVzaXplIiwicHJldldpZHRoIiwicHJldkhlaWdodCIsImdldFBvaW50Iiwib25BbGlnbiIsIm1vbml0b3JXaW5kb3dSZXNpemUiLCJfcmVmJG1vbml0b3JCdWZmZXJUaW0iLCJtb25pdG9yQnVmZmVyVGltZSIsInVzZVJlZiIsIm9ubHkiLCJmb3JjZUFsaWduUHJvcHNSZWYiLCJfdXNlQnVmZmVyIiwiY2FsbGVkUmVmIiwidGltZW91dFJlZiIsImNhbmNlbFRyaWdnZXIiLCJmb3JjZSIsInVzZUJ1ZmZlciIsIl9mb3JjZUFsaWduUHJvcHNSZWYkYyIsImxhdGVzdERpc2FibGVkIiwibGF0ZXN0VGFyZ2V0IiwibGF0ZXN0QWxpZ24iLCJsYXRlc3RPbkFsaWduIiwiX3Jlc3VsdCIsIl9lbGVtZW50IiwiX3BvaW50IiwiaXNWaXNpYmxlIiwidGd0UG9pbnQiLCJwYWdlWCIsInBhZ2VZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwb2ludEluVmlldyIsInJlc3RvcmVGb2N1cyIsIl91c2VCdWZmZXIyIiwiX2ZvcmNlQWxpZ24iLCJjYW5jZWxGb3JjZUFsaWduIiwic2V0RWxlbWVudCIsInNldFBvaW50IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsImZvcmNlQWxpZ24iLCJSY0FsaWduIiwiU3RhdHVzUXVldWUiLCJQb3B1cElubmVyIiwic3RyZXRjaCIsImRlc3Ryb3lQb3B1cE9uSGlkZSIsImdldFJvb3REb21Ob2RlIiwiZ2V0Q2xhc3NOYW1lRnJvbUFsaWduIiwib25Ub3VjaFN0YXJ0IiwiYWxpZ25SZWYiLCJhbGlnbmVkQ2xhc3NOYW1lIiwic2V0QWxpZ25lZENsYXNzTmFtZSIsIl91c2VTdHJldGNoU3R5bGUiLCJ0YXJnZXRTaXplIiwic2V0VGFyZ2V0U2l6ZSIsInNpemVTdHlsZSIsIm1pbkhlaWdodCIsInRndFdpZHRoIiwidGd0SGVpZ2h0IiwiX2VsZW1lbnQkZ2V0Qm91bmRpbmdDIiwidXNlU3RyZXRjaFN0eWxlIiwiX3VzZVN0cmV0Y2hTdHlsZTIiLCJzdHJldGNoU3R5bGUiLCJtZWFzdXJlU3RyZXRjaFN0eWxlIiwiX3VzZVZpc2libGVTdGF0dXMiLCJzZXRJbnRlcm5hbFN0YXR1cyIsInJhZlJlZiIsImNhbmNlbFJhZiIsImRvTWVhc3VyZSIsInVzZVZpc2libGVTdGF0dXMiLCJfdXNlVmlzaWJsZVN0YXR1czIiLCJnb05leHRTdGF0dXMiLCJhbGlnblRpbWVzIiwic2V0QWxpZ25UaW1lcyIsInByZXBhcmVSZXNvbHZlUmVmIiwiX2FsaWduUmVmJGN1cnJlbnQiLCJvbkludGVybmFsQWxpZ24iLCJwb3B1cERvbU5vZGUiLCJtYXRjaEFsaWduIiwibmV4dEFsaWduZWRDbGFzc05hbWUiLCJfcHJlcGFyZVJlc29sdmVSZWYkY3UiLCJvblNob3dQcmVwYXJlIiwib3JpZ2luSGFuZGxlciIsInBvaW50ZXJFdmVudHMiLCJhbGlnbkRpc2FibGVkIiwibW90aW9uUmVmIiwibWVyZ2VkQ2xhc3NOYW1lIiwib25Nb3VzZURvd25DYXB0dXJlIiwib25Ub3VjaFN0YXJ0Q2FwdHVyZSIsIk1vYmlsZVBvcHVwSW5uZXIiLCJfcHJvcHMkbW9iaWxlIiwibW9iaWxlIiwicG9wdXBDbGFzc05hbWUiLCJwb3B1cFN0eWxlIiwiX3Byb3BzJG1vYmlsZSRwb3B1cE1vIiwicG9wdXBNb3Rpb24iLCJwb3B1cFJlbmRlciIsIlBvcHVwIiwiaW5uZXJWaXNpYmxlIiwic2VySW5uZXJWaXNpYmxlIiwiaW5Nb2JpbGUiLCJzZXRJbk1vYmlsZSIsImNsb25lUHJvcHMiLCJpc01vYmlsZSIsInBvcHVwTm9kZSIsInJldHVybkVtcHR5U3RyaW5nIiwicmV0dXJuRG9jdW1lbnQiLCJBTExfSEFORExFUlMiLCJQb3J0YWxDb21wb25lbnQiLCJUcmlnZ2VyIiwiX3BvcHVwVmlzaWJsZSIsIm1vdXNlRW50ZXJEZWxheSIsImZpcmVFdmVudHMiLCJkZWxheVNldFBvcHVwVmlzaWJsZSIsIm1vdXNlTGVhdmVEZWxheSIsImNsZWFyRGVsYXlUaW1lciIsIl90aGlzJHBvcHVwUmVmJGN1cnJlbiIsInJlbGF0ZWRUYXJnZXQiLCJwb3B1cFJlZiIsImlzRm9jdXNUb1Nob3ciLCJmb2N1c1RpbWUiLCJmb2N1c0RlbGF5IiwicHJlQ2xpY2tUaW1lIiwicHJlVG91Y2hUaW1lIiwiaXNCbHVyVG9IaWRlIiwiYmx1ckRlbGF5Iiwic2V0UG9wdXBWaXNpYmxlIiwiaXNDb250ZXh0TWVudVRvU2hvdyIsInByZVRpbWUiLCJpc0NsaWNrVG9TaG93IiwiaXNDbGlja1RvSGlkZSIsIm5leHRWaXNpYmxlIiwicG9wdXBWaXNpYmxlIiwiX3RoaXMkY29udGV4dCIsImhhc1BvcHVwTW91c2VEb3duIiwibW91c2VEb3duVGltZW91dCIsIm9uUG9wdXBNb3VzZURvd24iLCJtYXNrQ2xvc2FibGUiLCJnZXRQb3B1cERvbU5vZGUiLCJpc0NvbnRleHRNZW51T25seSIsImdldFRyaWdnZXJET01Ob2RlIiwidHJpZ2dlclJlZiIsImRvbU5vZGUiLCJwb3B1cFBsYWNlbWVudCIsImJ1aWx0aW5QbGFjZW1lbnRzIiwiYWxpZ25Qb2ludCIsImdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduIiwiZ2V0QWxpZ25Qb3B1cENsYXNzTmFtZSIsIm9uUG9wdXBBbGlnbiIsInBvcHVwQW5pbWF0aW9uIiwicG9wdXBUcmFuc2l0aW9uTmFtZSIsInBvcHVwIiwib25Qb3B1cENsaWNrIiwiX3RoaXMkc3RhdGUiLCJnZXRQb3B1cEFsaWduIiwibW91c2VQcm9wcyIsImlzTW91c2VFbnRlclRvU2hvdyIsIm9uUG9wdXBNb3VzZUVudGVyIiwiaXNNb3VzZUxlYXZlVG9IaWRlIiwib25Qb3B1cE1vdXNlTGVhdmUiLCJwb3B1cENvbnRhaW5lciIsImF0dGFjaElkIiwibW91bnROb2RlIiwiZ2V0UG9wdXBDb250YWluZXIiLCJhdHRhY2hQYXJlbnQiLCJwb3J0YWxDb250YWluZXIiLCJwcmV2UG9wdXBWaXNpYmxlIiwiYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UiLCJkZWZhdWx0UG9wdXBWaXNpYmxlIiwiY3VycmVudERvY3VtZW50IiwiY2xpY2tPdXRzaWRlSGFuZGxlciIsIm9uRG9jdW1lbnRDbGljayIsInRvdWNoT3V0c2lkZUhhbmRsZXIiLCJjb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSIsIm9uQ29udGV4dE1lbnVDbG9zZSIsImNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyIiwiY2xlYXJPdXRzaWRlSGFuZGxlciIsIl90aGlzJHBvcHVwUmVmJGN1cnJlbjIiLCJwb3B1cEFsaWduIiwicGxhY2VtZW50U3RyIiwiYmFzZUFsaWduIiwiZ2V0QWxpZ25Gcm9tUGxhY2VtZW50Iiwib25Qb3B1cFZpc2libGVDaGFuZ2UiLCJkZWxheVMiLCJkZWxheVRpbWVyIiwiY2hpbGRQcm9zIiwic2hvd0FjdGlvbiIsImhpZGVBY3Rpb24iLCJfdGhpcyRwcm9wczgiLCJfdGhpcyRwcm9wczkiLCJfdGhpcyRwcm9wczEwIiwiX3RoaXMkcG9wdXBSZWYkY3VycmVuMyIsImNoaWxkQ2FsbGJhY2siLCJfdGhpcyRwcm9wczExIiwiYXV0b0Rlc3Ryb3kiLCJuZXdDaGlsZFByb3BzIiwib25Db250ZXh0TWVudSIsImNyZWF0ZVR3b0NoYWlucyIsIm9uTW91c2VNb3ZlIiwiY2hpbGRyZW5DbGFzc05hbWUiLCJwb3J0YWwiLCJoYW5kbGVQb3J0YWxVcGRhdGUiLCJnZXRDb21wb25lbnQiLCJ0cmlnZ2VyQ29udGV4dFZhbHVlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIl9nZXRCQm94IiwiX3dpZHRoIiwiX2hlaWdodCIsImxhYmVsIiwiaHRtbEZvciIsInRvb2x0aXAiLCJfdXNlTG9jYWxlUmVjZWl2ZXIiLCJmb3JtTG9jYWxlIiwiY29udGV4dExhYmVsQWxpZ24iLCJjb250ZXh0TGFiZWxDb2wiLCJjb250ZXh0Q29sb24iLCJtZXJnZWRMYWJlbENvbCIsIm1lcmdlZExhYmVsQWxpZ24iLCJsYWJlbENsc0Jhc2ljIiwibGFiZWxDb2xDbGFzc05hbWUiLCJsYWJlbENoaWxkcmVuIiwiY29tcHV0ZWRDb2xvbiIsInRvb2x0aXBQcm9wcyIsInRvVG9vbHRpcFByb3BzIiwiX3Rvb2x0aXBQcm9wcyRpY29uIiwicmVzdFRvb2x0aXBQcm9wcyIsInRvb2x0aXBOb2RlIiwibGFiZWxDbGFzc05hbWUiLCJmb3JtSXRlbVJlbmRlciIsIl9pbnRlcm5hbEl0ZW1SZW5kZXIiLCJtYXJnaW5Cb3R0b20iLCJvbkVycm9yVmlzaWJsZUNoYW5nZWQiLCJtZXJnZWRXcmFwcGVyQ29sIiwic3ViRm9ybUNvbnRleHQiLCJpbnB1dERvbSIsImVycm9yTGlzdERvbSIsImZsZXhXcmFwIiwiZXh0cmFQcm9wcyIsImV4dHJhRG9tIiwiZG9tIiwiaWNvbk1hcCIsIkNoZWNrQ2lyY2xlRmlsbGVkIiwiRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQiLCJMb2FkaW5nT3V0bGluZWQiLCJJdGVtSG9sZGVyIiwiX2l0ZW1DbGFzc05hbWUiLCJ2YWxpZGF0ZVN0YXR1cyIsIm9uU3ViSXRlbU1ldGFDaGFuZ2UiLCJpdGVtUHJlZml4Q2xzIiwiaGFzSGVscCIsInNldE1hcmdpbkJvdHRvbSIsIm1lcmdlZFZhbGlkYXRlU3RhdHVzIiwiZm9ybUl0ZW1TdGF0dXNDb250ZXh0IiwiSWNvbk5vZGUiLCJNZW1vSW5wdXQiLCJGb3JtSXRlbSIsImZyYW1lUmVmIiwiYmF0Y2hSZWYiLCJub1N0eWxlIiwiX3Byb3BzJHRyaWdnZXIiLCJub3RpZnlQYXJlbnRNZXRhQ2hhbmdlIiwiY29udGV4dFZhbGlkYXRlVHJpZ2dlciIsImhhc05hbWUiLCJoYXNWYWxpZE5hbWUiLCJmaWVsZEtleVBhdGhSZWYiLCJfdXNlRnJhbWVTdGF0ZSIsIl91c2VGcmFtZVN0YXRlMiIsInN1YkZpZWxkRXJyb3JzIiwic2V0U3ViRmllbGRFcnJvcnMiLCJzZXRNZXRhIiwic3ViTWV0YSIsInVuaXF1ZUtleXMiLCJwcmV2U3ViRmllbGRFcnJvcnMiLCJtZXJnZWROYW1lS2V5IiwiX1JlYWN0JHVzZU1lbW8iLCJ3YXJuaW5nTGlzdCIsInN1YkZpZWxkRXJyb3IiLCJfUmVhY3QkdXNlTWVtbzIiLCJnZXRJdGVtUmVmIiwiY2hpbGRyZW5SZWYiLCJuYW1lU3RyIiwicmVuZGVyTGF5b3V0IiwiYmFzZUNoaWxkcmVuIiwibmV4dE1ldGEiLCJrZXlJbmZvIiwiX2tleUluZm8iLCJyZW5kZXJNZXRhIiwibWVyZ2VkTmFtZSIsInJ1bGVFbnRpdHkiLCJtZXJnZWRDb250cm9sIiwiZGVzY3JpYmVkYnlBcnIiLCJfYTIiLCJfYzIiLCJ3YXRjaGluZ0NoaWxkUHJvcHMiLCJNQVRDSCIsImlzUmVnRXhwIiwiX3RvQXJyYXkiLCJpc1N0eWxlTmFtZVN1cHBvcnQiLCJzdHlsZU5hbWUiLCJzdHlsZU5hbWVMaXN0IiwiaXNTdHlsZVN1cHBvcnQiLCJzdHlsZVZhbHVlIiwib3JpZ2luIiwiaXNTdHlsZVZhbHVlU3VwcG9ydCIsIlByZXNldENvbG9yUmVnZXgiLCJnZXREaXNhYmxlZENvbXBhdGlibGVDaGlsZHJlbiIsImVsZW1lbnRUeXBlIiwiX19BTlRfU1dJVENIIiwiX19BTlRfUkFESU8iLCJfc3BsaXRPYmplY3QiLCJwaWNrZWQiLCJvbWl0dGVkIiwic3BsaXRPYmplY3QiLCJzcGFuU3R5bGUiLCJidXR0b25TdHlsZSIsIlRvb2x0aXAiLCJnZXRDb250ZXh0UG9wdXBDb250YWluZXIiLCJkZWZhdWx0T3BlbiIsImRlZmF1bHRWaXNpYmxlIiwic2V0T3BlbiIsImlzTm9UaXRsZSIsIm92ZXJsYXkiLCJnZXRUb29sdGlwUGxhY2VtZW50cyIsIl9wcm9wcyRhcnJvd1BvaW50QXRDZSIsImFycm93UG9pbnRBdENlbnRlciIsIl9wcm9wcyRhdXRvQWRqdXN0T3ZlciIsIl9wcm9wcyRwbGFjZW1lbnQiLCJfcHJvcHMkbW91c2VFbnRlckRlbGEiLCJfcHJvcHMkbW91c2VMZWF2ZURlbGEiLCJvcGVuQ2xhc3NOYW1lIiwiZ2V0VG9vbHRpcENvbnRhaW5lciIsIm92ZXJsYXlDbGFzc05hbWUiLCJvdmVybGF5SW5uZXJTdHlsZSIsInRlbXBPcGVuIiwiY2hpbGRDbHMiLCJjdXN0b21PdmVybGF5Q2xhc3NOYW1lIiwiZm9ybWF0dGVkT3ZlcmxheUlubmVyU3R5bGUiLCJhcnJvd0NvbnRlbnRTdHlsZSIsImJhY2tncm91bmQiLCJ2aXMiLCJvbk9wZW5DaGFuZ2UiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJhcnJvd0NvbnRlbnQiLCJhZ2VudCIsInZlbmRvciIsIm9wZXJhIiwiR3JvdXBTaXplQ29udGV4dCIsInNpemVDbHMiLCJnZXRDb2xsYXBzZWRXaWR0aCIsImdldFJlYWxXaWR0aCIsImV4aXN0SWNvbiIsInJ4VHdvQ05DaGFyIiwiaXNUd29DTkNoYXIiLCJpc1VuQm9yZGVyZWRCdXR0b25UeXBlIiwic3BhY2VDaGlsZHJlbiIsIm5lZWRJbnNlcnRlZCIsImlzUHJldkNoaWxkUHVyZSIsImlzQ3VycmVudENoaWxkUHVyZSIsImxhc3RDaGlsZCIsIlNQQUNFIiwiaW5zZXJ0U3BhY2UiLCJjb252ZXJ0TGVnYWN5UHJvcHMiLCJkYW5nZXIiLCJfcHJvcHMkbG9hZGluZyIsIl9wcm9wcyR0eXBlIiwiX3Byb3BzJHNoYXBlIiwic2hhcGUiLCJfcHJvcHMkZ2hvc3QiLCJnaG9zdCIsIl9wcm9wcyRibG9jayIsIl9wcm9wcyRodG1sVHlwZSIsImh0bWxUeXBlIiwiZ3JvdXBTaXplIiwiaW5uZXJMb2FkaW5nIiwic2V0TG9hZGluZyIsImhhc1R3b0NOQ2hhciIsInNldEhhc1R3b0NOQ2hhciIsImJ1dHRvblJlZiIsImlzTmVlZEluc2VydGVkIiwibG9hZGluZ09yRGVsYXkiLCJidXR0b25UZXh0IiwidGV4dENvbnRlbnQiLCJoYW5kbGVDbGljayIsImF1dG9JbnNlcnRTcGFjZSIsInNpemVGdWxsbmFtZSIsImxhcmdlIiwic21hbGwiLCJtaWRkbGUiLCJpY29uVHlwZSIsImxpbmtCdXR0b25SZXN0UHJvcHMiLCJraWRzIiwiYnV0dG9uTm9kZSIsIkJ1dHRvbiIsImVuYWJsZSIsImFzYXAiLCJMQVNUX0VSUk9SIiwiSVNfRVJST1IiLCJfeSIsIl96IiwiX0EiLCJkb1Jlc29sdmUiLCJkZWZlcnJlZCIsIl9CIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwidHJ5Q2FsbE9uZSIsImhhbmRsZVJlc29sdmVkIiwiZ2V0VGhlbiIsImZpbmFsZSIsIl9DIiwiSGFuZGxlciIsInRyeUNhbGxUd28iLCJyZWFzb24iLCJfRCIsInNhZmVUaGVuIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsInByZWYiLCJleG90aWNUb1ByaW0iLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIkNPTkZJR1VSQUJMRV9MRU5HVEgiLCJURU1QTEFURSIsImV4Y2VwdGlvbnMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJvcmlnaW5hbEFycmF5Iiwib2JqZWN0S2V5cyIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYXJyYXlTbGljZSIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJrZXlGb3IiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNsYXNzTGlzdCIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJpc1JlZ2lzdGVyZWRTeW1ib2wiLCIkaXNXZWxsS25vd25TeW1ib2wiLCJpc1dlbGxLbm93blN5bWJvbCIsInN5bWJvbEtleXMiLCJzeW1ib2xLZXlzTGVuZ3RoIiwic3ltYm9sS2V5Iiwia2V5c0xlbmd0aCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwiY29kZUF0IiwidXNpbmdJdGVyYXRvciIsIkludGVybmFsTWV0YWRhdGFNb2R1bGUiLCJhbkluc3RhbmNlIiwid3JhcHBlciIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsIk5hdGl2ZUNvbnN0cnVjdG9yIiwiTmF0aXZlUHJvdG90eXBlIiwiZXhwb3J0ZWQiLCJmaXhNZXRob2QiLCJnZXRDb25zdHJ1Y3RvciIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsInNldFN0cm9uZyIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaSU5HIiwiUkVRVUlSRUQiLCJNRVRBREFUQSIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsImZhc3RLZXkiLCJnZXRXZWFrRGF0YSIsIm9uRnJlZXplIiwiZGVmaW5lQnVpbHRJbnMiLCJzZXRTcGVjaWVzIiwiaW50ZXJuYWxTdGF0ZUdldHRlckZvciIsInByZXZpb3VzIiwiZ2V0RW50cnkiLCJyZW1vdmVkIiwiSVRFUkFUT1JfTkFNRSIsImdldEludGVybmFsQ29sbGVjdGlvblN0YXRlIiwiZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlIiwibWFwcGluZyIsIm1hcEZuIiwibmV4dEl0ZW0iLCJ1cGRhdGVGbiIsImluc2VydEZuIiwiYVNldCIsImdldFNldFJlY29yZCIsIml0ZXJhdGVTZXQiLCJvdGhlclJlYyIsImtleXNJdGVyIiwiJGxvY2F0aW9uIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwiSVNfSU9TIiwiSVNfTk9ERSIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiRGlzcGF0Y2giLCJNZXNzYWdlQ2hhbm5lbCIsImNvdW50ZXIiLCJydW5uZXIiLCJldmVudExpc3RlbmVyIiwiZ2xvYmFsUG9zdE1lc3NhZ2VEZWZlciIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsIlF1ZXVlIiwiaGVhZCIsInRhaWwiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwiY2FwaXRhbGl6ZSIsImNhbWVsQ2FzZSIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkIiwicmVIYXNVbmljb2RlIiwicmVnRXhwRmxhZ3MiLCJoYXNJbmRpY2VzIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsInVuaWNvZGVTZXRzIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInNldHRsZSIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJDYW5jZWwiLCJpdGVtc19wZXJfcGFnZSIsImp1bXBfdG8iLCJqdW1wX3RvX2NvbmZpcm0iLCJwYWdlIiwicHJldl9wYWdlIiwibmV4dF9wYWdlIiwicHJldl81IiwibmV4dF81IiwicHJldl8zIiwibmV4dF8zIiwicGFnZV9zaXplIiwiZmxleGlibGUiLCJzZXRGbGV4aWJsZSIsImZsZXhHYXBTdXBwb3J0ZWQiLCJjYW5Vc2VEb2NFbGVtZW50IiwiZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCIsImZsZXhEaXJlY3Rpb24iLCJyb3dHYXAiLCJhdXRvQWRqdXN0T3ZlcmZsb3dFbmFibGVkIiwiYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQiLCJnZXRPdmVyZmxvd09wdGlvbnMiLCJnZXRQbGFjZW1lbnRzIiwiX2NvbmZpZyRhcnJvd1dpZHRoIiwiYXJyb3dXaWR0aCIsIl9jb25maWckaG9yaXpvbnRhbEFyciIsImhvcml6b250YWxBcnJvd1NoaWZ0IiwiX2NvbmZpZyR2ZXJ0aWNhbEFycm93IiwidmVydGljYWxBcnJvd1NoaWZ0IiwicGxhY2VtZW50TWFwIiwiaGFzQWRkb24iLCJpbnB1dEVsZW1lbnQiLCJhZmZpeFdyYXBwZXJQcmVmaXhDbHMiLCJjbGVhckljb25DbHMiLCJnZXRDbGVhckljb24iLCJ3cmFwcGVyQ2xzIiwiYWRkb25DbHMiLCJtZXJnZWRXcmFwcGVyQ2xhc3NOYW1lIiwibWVyZ2VkR3JvdXBDbGFzc05hbWUiLCJvbktleURvd24iLCJfcHJvcHMkcHJlZml4Q2xzIiwiaHRtbFNpemUiLCJfaW5wdXRSZWYkY3VycmVudCIsIl9pbnB1dFJlZiRjdXJyZW50MiIsInNlbGVjdCIsIl9pbnB1dFJlZiRjdXJyZW50MyIsImhhbmRsZUNoYW5nZSIsImhhbmRsZUtleURvd24iLCJoYW5kbGVGb2N1cyIsImhhbmRsZUJsdXIiLCJnZXRTdWZmaXgiLCJzaG93QXJyb3ciLCJvdmVybGF5U3R5bGUiLCJhZnRlclZpc2libGVDaGFuZ2UiLCJfcHJvcHMkYWxpZ24iLCJfcHJvcHMkZGVzdHJveVRvb2x0aXAiLCJkZXN0cm95VG9vbHRpcE9uSGlkZSIsImRvbVJlZiIsImRlc3Ryb3lUb29sdGlwIiwia2VlcFBhcmVudCIsImhpZGRlblRleHRhcmVhIiwiSElEREVOX1RFWFRBUkVBX1NUWUxFIiwiU0laSU5HX1NUWUxFIiwiY29tcHV0ZWRTdHlsZUNhY2hlIiwiY2FsY3VsYXRlTm9kZVN0eWxpbmciLCJ1c2VDYWNoZSIsInBhZGRpbmdTaXplIiwiYm9yZGVyU2l6ZSIsInNpemluZ1N0eWxlIiwibm9kZUluZm8iLCJhdXRvU2l6ZSIsIm9uSW50ZXJuYWxBdXRvU2l6ZSIsInNldE1lcmdlZFZhbHVlIiwidGV4dGFyZWFSZWYiLCJtaW5Sb3dzIiwibWF4Um93cyIsIm5lZWRBdXRvU2l6ZSIsInJlc2l6ZVN0YXRlIiwic2V0UmVzaXplU3RhdGUiLCJhdXRvU2l6ZVN0eWxlIiwic2V0QXV0b1NpemVTdHlsZSIsInN0YXJ0UmVzaXplIiwidGV4dGFyZWFTdHlsZXMiLCJ1aVRleHROb2RlIiwiX2NhbGN1bGF0ZU5vZGVTdHlsaW5nIiwibWF4SGVpZ2h0Iiwic2luZ2xlUm93SGVpZ2h0IiwiY2FsY3VsYXRlQXV0b1NpemVTdHlsZSIsIl90ZXh0YXJlYVJlZiRjdXJyZW50Iiwic2VsZWN0aW9uRW5kIiwic2Nyb2xsVG9wIiwiZml4RmlyZWZveEF1dG9TY3JvbGwiLCJyZXNpemVSYWZSZWYiLCJjbGVhblJhZiIsIm1lcmdlZEF1dG9TaXplU3R5bGUiLCJzYXZlVGV4dEFyZWEiLCJrZXlDb2RlIiwiZnJhbWVFbGVtZW50IiwiaW5saW5lIiwiYm91bmRhcnkiLCJza2lwT3ZlcmZsb3dIaWRkZW5FbGVtZW50cyIsInNjcm9sbGluZ0VsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwidmlzdWFsVmlld3BvcnQiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiSSIsIlQiLCJCIiwiRCIsIlgiLCJZIiwiTiIsImJvcmRlckxlZnRXaWR0aCIsInoiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIkciLCJKIiwiSyIsIlEiLCJVIiwiWiIsInNjcm9sbExlZnQiLCJpc09wdGlvbnNPYmplY3QiLCJpc1RhcmdldEF0dGFjaGVkIiwiaXNDb25uZWN0ZWQiLCJiZWhhdmlvciIsImNvbXB1dGVPcHRpb25zIiwiZ2V0T3B0aW9ucyIsImFjdGlvbnMiLCJjYW5TbW9vdGhTY3JvbGwiLCJzY3JvbGwiLCJkZWZhdWx0QmVoYXZpb3IiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsIkNsYXNzIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsImZvcm1hdFJlZ0V4cCIsImNvbnZlcnRGaWVsZHNFcnJvciIsImlzRW1wdHlWYWx1ZSIsImlzTmF0aXZlU3RyaW5nVHlwZSIsImFzeW5jU2VyaWFsQXJyYXkiLCJhcnJMZW5ndGgiLCJvcmlnaW5hbCIsIkFzeW5jVmFsaWRhdGlvbkVycm9yIiwiX0Vycm9yIiwiYXN5bmNNYXAiLCJvYmpBcnIiLCJfcGVuZGluZyIsImZsYXR0ZW5PYmpBcnIiLCJmaXJzdEZpZWxkcyIsIm9iakFycktleXMiLCJvYmpBcnJMZW5ndGgiLCJwZW5kaW5nIiwiYXN5bmNQYXJhbGxlbEFycmF5IiwiY29tcGxlbWVudEVycm9yIiwib2UiLCJmaWVsZFZhbHVlIiwiZnVsbEZpZWxkcyIsImZ1bGxGaWVsZCIsInVybFJlZyIsInJlcXVpcmVkJDEiLCJwYXR0ZXJuJDIiLCJnZXRZZWFyIiwiaW5jbHVkZUJvdW5kYXJpZXMiLCJ2NCIsInY2c2VnIiwidjYiLCJ2NDZFeGFjdCIsInY0ZXhhY3QiLCJ2NmV4YWN0IiwiaXAiLCJpcHY0IiwiaXB2NiIsImdldFVybFJlZ2V4IiwicnVsZVR5cGUiLCJ2YWxpZGF0b3JzIiwiZGF0ZU9iamVjdCIsImFueSIsIm5ld01lc3NhZ2VzIiwiY2xvbmVkIiwiU2NoZW1hIiwiX21lc3NhZ2VzIiwic291cmNlXyIsIm9jIiwibWVzc2FnZXMkMSIsInNlcmllcyIsImdldFZhbGlkYXRpb25NZXRob2QiLCJnZXRUeXBlIiwiZG9JdCIsImRlZXAiLCJhZGRGdWxsRmllbGQiLCJzY2hlbWEiLCJzdXBwcmVzc1dhcm5pbmciLCJmaWxsZWRFcnJvcnMiLCJmaWVsZHNTY2hlbWEiLCJwYXJlZEZpZWxkc1NjaGVtYSIsImZpZWxkU2NoZW1hIiwiZmllbGRTY2hlbWFMaXN0IiwiZXJycyIsImZpbmFsRXJyb3JzIiwiYXN5bmNWYWxpZGF0b3IiLCJzdXBwcmVzc1ZhbGlkYXRvckVycm9yIiwiX2Vycm9ycyIsIm1lc3NhZ2VJbmRleCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIk1lbW8iLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiUmVhY3QiLCJfaW50ZXJvcE5hbWVzcGFjZSIsIl9fZXNNb2R1bGUiLCJmcmVlemUiLCJSZWFjdF9fbmFtZXNwYWNlIiwiaW5pdGlhbFN0YXRlIiwiRXJyb3JCb3VuZGFyeSIsIl9hcmdzIiwicmVzZXRFcnJvckJvdW5kYXJ5IiwiY29tcG9uZW50RGlkQ2F0Y2giLCJfdGhpcyRwcm9wcyRvbkVycm9yIiwib25FcnJvciIsIl90aGlzJHByb3BzJG9uUmVzZXRLZSIsInJlc2V0S2V5cyIsImlzIiwib25SZXNldEtleXNDaGFuZ2UiLCJmYWxsYmFja1JlbmRlciIsIkZhbGxiYWNrQ29tcG9uZW50IiwiZmFsbGJhY2siLCJ1c2VFcnJvckhhbmRsZXIiLCJnaXZlbkVycm9yIiwic2V0RXJyb3IiLCJ3aXRoRXJyb3JCb3VuZGFyeSIsImVycm9yQm91bmRhcnlQcm9wcyIsIldyYXBwZWQiLCJtZXNzYWdlSW5zdGFuY2UiLCJsb2NhbFByZWZpeENscyIsImhhc1RyYW5zaXRpb25OYW1lIiwiZ2V0S2V5VGhlbkluY3JlYXNlS2V5IiwiZ2V0UkNOb3RpZmljYXRpb25JbnN0YW5jZSIsImluc3RhbmNlQ29uZmlnIiwiSW5mb0NpcmNsZUZpbGxlZCIsInR5cGVMaXN0IiwiSWNvbkNvbXBvbmVudCIsIm1lc3NhZ2VDbGFzcyIsImdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UiLCJjbG9zZVByb21pc2UiLCJmaWxsZWQiLCJyZWplY3RlZCIsIm1lc3NhZ2VLZXkiLCJhdHRhY2hUeXBlQXBpIiwib3JpZ2luYWxBcGkiLCJpc0FyZ3NQcm9wcyIsInVzZU1lc3NhZ2UiLCIkbWFwIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsIndlYnBhY2tQb2x5ZmlsbCIsIklTX0lOQ0xVREVTIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0TGlrZSIsIiRmaW5kIiwiU0tJUFNfSE9MRVMiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJzdHJpbmdJbmRleE9mIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwibWF5YmVDYWxsTmF0aXZlIiwiVU5TQUZFX1NVQlNUSVRVVEUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJlcGxhY2VyIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicG9seWZpbGwiLCJERUZBVUxUX1dISVRFTElTVCIsImVuYWJsZWQiLCJkaXNhYmxlIiwibWF0Y2hXaGl0ZWxpc3QiLCJkaXNwbGF5SWQiLCJyZWplY3Rpb25zIiwib25VbmhhbmRsZWQiLCJhbGxSZWplY3Rpb25zIiwid2hpdGVsaXN0IiwibG9nZ2VkIiwibGluZSIsImxvZ0Vycm9yIiwiX0UiLCJvbkhhbmRsZWQiLCJyYXdBc2FwIiwidGFzayIsInJlcXVlc3RGbHVzaCIsImZsdXNoIiwic2NhbiIsIm5ld0xlbmd0aCIsInRvZ2dsZSIsInNjb3BlIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwibWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyIiwidGltZW91dEhhbmRsZSIsImhhbmRsZVRpbWVyIiwiaW50ZXJ2YWxIYW5kbGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjcmVhdGVUZXh0Tm9kZSIsIlRSVUUiLCJ2YWx1ZVByb21pc2UiLCJGQUxTRSIsIk5VTEwiLCJVTkRFRklORUQiLCJaRVJPIiwiRU1QVFlTVFJJTkciLCJvblNldHRsZWRGdWxmaWxsIiwib25TZXR0bGVkUmVqZWN0IiwibWFwQWxsU2V0dGxlZCIsImdldEFnZ3JlZ2F0ZUVycm9yIiwiQWdncmVnYXRlRXJyb3IiLCJyZW1haW5pbmciLCJhbGxTZXR0bGVkIiwicmFjZSIsInByb21pc2VzIiwiaGFzUmVzb2x2ZWQiLCJyZWplY3Rpb25SZWFzb25zIiwicmVzb2x2ZU9uY2UiLCJyZWplY3Rpb25DaGVjayIsInN1cHBvcnQiLCJCbG9iIiwidmlld0NsYXNzZXMiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiSGVhZGVycyIsImFwcGVuZCIsImhlYWRlciIsImNvbnN1bWVkIiwiX25vQm9keSIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwib25sb2FkIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJ1ZmZlckNsb25lIiwiYnVmIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsIl9ib2R5QmxvYiIsIl9ib2R5Rm9ybURhdGEiLCJEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsImlzQ29uc3VtZWQiLCJieXRlT2Zmc2V0IiwidGV4dCIsImVuY29kaW5nIiwicmVhZEFzVGV4dCIsImNoYXJzIiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiZm9ybURhdGEiLCJkZWNvZGUiLCJSZXF1ZXN0IiwidXBjYXNlZCIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwiQWJvcnRDb250cm9sbGVyIiwicmVmZXJyZXIiLCJyZVBhcmFtU2VhcmNoIiwiYnl0ZXMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJSZXNwb25zZSIsImJvZHlJbml0IiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiRE9NRXhjZXB0aW9uIiwiZmV0Y2giLCJhYm9ydGVkIiwieGhyIiwiYWJvcnRYaHIiLCJyYXdIZWFkZXJzIiwiZml4VXJsIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiJGZvckVhY2giLCJISURERU4iLCJRT2JqZWN0IiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJnZXRSZXBsYWNlckZ1bmN0aW9uIiwiJHN0cmluZ2lmeSIsIm51bWJlclRvU3RyaW5nIiwidGVzdGVyIiwibG93IiwiaGkiLCJXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04iLCJJTExfRk9STUVEX1VOSUNPREUiLCJzdHJpbmdpZnlXaXRoU3ltYm9sc0ZpeCIsIiRyZXBsYWNlciIsImZpeElsbEZvcm1lZCIsInJhd0xlbmd0aCIsIkVOVU1FUkFCTEVfTkVYVCIsImlzUmVnaXN0ZXJlZCIsImlzV2VsbEtub3duIiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImFycmF5TGlrZSIsIklTX0NPTlNUUlVDVE9SIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJFTlRSSUVTIiwiY29sbGVjdGlvbiIsIkFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSIsIiRpc0V4dGVuc2libGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicHJldmVudEV4dGVuc2lvbnMiLCJncm91cEJ5Iiwib2YiLCJhTWFwIiwiZGVsZXRlQWxsIiwid2FzRGVsZXRlZCIsImFsbERlbGV0ZWQiLCJlbXBsYWNlIiwiaW5zZXJ0ZWQiLCJpbnNlcnQiLCJuZXdNYXAiLCJmaW5kS2V5Iiwic2FtZVZhbHVlWmVybyIsInNlYXJjaEVsZW1lbnQiLCJrZXlCeSIsImtleURlcml2YXRpdmUiLCJrZXlPZiIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJub0luaXRpYWwiLCJhY2N1bXVsYXRvciIsImlzUHJlc2VudEluTWFwIiwidXBzZXJ0IiwidXBkYXRlT3JJbnNlcnQiLCJkaWZmZXJlbmNlIiwic2V0TWV0aG9kQWNjZXB0U2V0TGlrZSIsImludGVyc2VjdGlvbiIsImlzRGlzam9pbnRGcm9tIiwiaXNTdWJzZXRPZiIsImlzU3VwZXJzZXRPZiIsInN5bW1ldHJpY0RpZmZlcmVuY2UiLCJ1bmlvbiIsImFkZEFsbCIsInRvU2V0TGlrZSIsIiRkaWZmZXJlbmNlIiwibmV3U2V0IiwiJGludGVyc2VjdGlvbiIsIiRpc0Rpc2pvaW50RnJvbSIsIiRpc1N1YnNldE9mIiwiJGlzU3VwZXJzZXRPZiIsImFycmF5Sm9pbiIsInNlcCIsIiRzeW1tZXRyaWNEaWZmZXJlbmNlIiwiJHVuaW9uIiwidmVuZG9ycyIsIl9ub3ciLCJjcCIsImNhbmNlbGxlZCIsImdldE5hbm9TZWNvbmRzIiwiaHJ0aW1lIiwibG9hZFRpbWUiLCJtb2R1bGVMb2FkVGltZSIsIm5vZGVMb2FkVGltZSIsInVwVGltZSIsInBlcmZvcm1hbmNlIiwiaHIiLCJ1cHRpbWUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiaXNSZWFjdENvbXBvbmVudCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsImtleVByZWZpeCIsImVzY2FwZSIsImFhIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsInVzZUNhbGxiYWNrIiwidXNlRGVidWdWYWx1ZSIsInVzZVJlZHVjZXIiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImthIiwicGEiLCJxYSIsInJhIiwic2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInRhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJzYW5pdGl6ZVVSTCIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIlhhIiwiU2EiLCJUYSIsIlJhIiwic2V0QXR0cmlidXRlTlMiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsInBiIiwicWIiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiUmIiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJzaWJsaW5nIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwibWMiLCJuYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiTGMiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJoeWRyYXRlIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIlZjIiwiV2MiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJiZCIsImNkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwia2QiLCJsZCIsInNldFByb3BlcnR5IiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaW1nIiwia2V5Z2VuIiwibGluayIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJvZCIsInBkIiwicWQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwieGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJpc1RydXN0ZWQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwiZG9jdW1lbnRNb2RlIiwibGUiLCJtZSIsIm5lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInBlIiwicWUiLCJkZXRhaWwiLCJzZSIsInZlIiwidGUiLCJjaGFyIiwidWUiLCJ3ZSIsImRhdGV0aW1lIiwidGVsIiwieGUiLCJ5ZSIsImNoYW5nZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJkZXRhY2hFdmVudCIsIkhlIiwiSWUiLCJhdHRhY2hFdmVudCIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJidXR0b25zIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJqZiIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImhnIiwiaWciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwiZWZmZWN0cyIsInZnIiwid2ciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJnaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImdpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsInBpIiwicWkiLCJyZXRyeVRpbWUiLCJqaSIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiV2Vha1NldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiSWoiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJ3ZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwidmIiLCJVaiIsIlZqIiwiV2oiLCJvYiIsIlhqIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiWmoiLCJwZW5kaW5nQ2hpbGRyZW4iLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJKYyIsIl9pbnRlcm5hbFJvb3QiLCJnayIsImlrIiwiaGsiLCJqayIsImtrIiwicXVlcnlTZWxlY3RvckFsbCIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJuYXRpdmVUaGVuIiwibWljcm90YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsInBlcmZvcm0iLCJQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24iLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsIk5BVElWRV9QUk9NSVNFX1NVQkNMQVNTSU5HIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJQcm9taXNlUHJvdG90eXBlIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJpc1RoZW5hYmxlIiwiY2FsbFJlYWN0aW9uIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm5vdGlmeSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJyZWFjdGlvbnMiLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwiZXhlY3V0b3IiLCJQcm9taXNlV3JhcHBlciIsInBhc3NlZCIsIm1hY3JvdGFzayIsIklTX0lPU19QRUJCTEUiLCJJU19XRUJPU19XRUJLSVQiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJQZWJibGUiLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwiYWxyZWFkeUNhbGxlZCIsIlByb21pc2VDb25zdHJ1Y3RvcldyYXBwZXIiLCJDSEVDS19XUkFQUEVSIiwidXBwZXJGaXJzdCIsImFycmF5TWFwIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsIml0ZXJhdGVlIiwib2JqZWN0UHJvdG8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJjcmVhdGVDYXNlRmlyc3QiLCJjYXN0U2xpY2UiLCJoYXNVbmljb2RlIiwic3RyaW5nVG9BcnJheSIsInN0clN5bWJvbHMiLCJjaHIiLCJ0cmFpbGluZyIsImJhc2VTbGljZSIsImFzY2lpVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwicnNBc3RyYWwiLCJyc0NvbWJvIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJlT3B0TW9kIiwicnNTZXEiLCJyc1N5bWJvbCIsInJlVW5pY29kZSIsImFycmF5UmVkdWNlIiwiZGVidXJyIiwid29yZHMiLCJyZUFwb3MiLCJpbml0QWNjdW0iLCJkZWJ1cnJMZXR0ZXIiLCJyZUxhdGluIiwicmVDb21ib01hcmsiLCJiYXNlUHJvcGVydHlPZiIsImFzY2lpV29yZHMiLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImd1YXJkIiwicmVBc2NpaVdvcmQiLCJyZUhhc1VuaWNvZGVXb3JkIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQnJlYWsiLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzTW9kaWZpZXIiLCJyc0Vtb2ppIiwicmVVbmljb2RlV29yZCIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwid2hpdGVzcGFjZXMiLCJsdHJpbSIsInJ0cmltIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCIkYXNzaWduIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJmdWxmaWxsZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiY29sdW1uTnVtYmVyIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJob3N0bmFtZSIsInJlcXVlc3RVUkwiLCJleHBpcmVzIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJyZXNvbHZlUHJvbWlzZSIsInByb3h5QWNjZXNzb3IiLCJOYXRpdmVSZWdFeHAiLCJTeW50YXhFcnJvciIsIklTX05DRyIsIkNPUlJFQ1RfTkVXIiwiQkFTRV9GT1JDRUQiLCJSZWdFeHBXcmFwcGVyIiwicmF3RmxhZ3MiLCJoYW5kbGVkIiwidGhpc0lzUmVnRXhwIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NBcmVVbmRlZmluZWQiLCJyYXdQYXR0ZXJuIiwiYnJhY2tldHMiLCJuY2ciLCJncm91cGlkIiwiZ3JvdXBuYW1lIiwiaGFuZGxlTkNHIiwiaGFuZGxlRG90QWxsIiwiVGFyZ2V0IiwiU291cmNlIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsInRhaWxQb3MiLCJuYXRpdmVKb2luIiwiY2FsbFJlZ0V4cEV4ZWMiLCIkcHVzaCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwib3JpZ2luYWxFeGVjIiwibmF0aXZlTWF0Y2giLCJtYXRjaFN0ciIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJiaWdpbnQiLCJib29sIiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJtb21lbnQiLCJtb250aHNQYXJzZUV4YWN0Iiwid2Vla2RheXNQYXJzZUV4YWN0IiwibGwiLCJsbGwiLCJsbGxsIiwiVGlueUNvbG9yIiwib3JpZ2luYWxJbnB1dCIsInJvdW5kQSIsImdyYWRpZW50VHlwZSIsImlzRGFyayIsImdldEJyaWdodG5lc3MiLCJpc0xpZ2h0IiwidG9SZ2IiLCJnZXRMdW1pbmFuY2UiLCJSc1JHQiIsIkdzUkdCIiwiQnNSR0IiLCJhbHBoYSIsImlzTW9ub2Nocm9tZSIsInRvSHNsIiwidG9Ic3ZTdHJpbmciLCJ0b0hzbFN0cmluZyIsInRvSGV4U3RyaW5nIiwidG9IZXg4IiwidG9IZXg4U3RyaW5nIiwidG9IZXhTaG9ydFN0cmluZyIsImFsbG93U2hvcnRDaGFyIiwidG9QZXJjZW50YWdlUmdiIiwiZm10IiwidG9QZXJjZW50YWdlUmdiU3RyaW5nIiwicm5kIiwidG9OYW1lIiwiZm9ybWF0U2V0IiwiZm9ybWF0dGVkU3RyaW5nIiwiaGFzQWxwaGEiLCJicmlnaHRlbiIsInNoYWRlIiwiZGVzYXR1cmF0ZSIsInNhdHVyYXRlIiwiZ3JleXNjYWxlIiwiYW5hbG9nb3VzIiwic2xpY2VzIiwiY29tcGxlbWVudCIsIm1vbm9jaHJvbWF0aWMiLCJtb2RpZmljYXRpb24iLCJzcGxpdGNvbXBsZW1lbnQiLCJvbkJhY2tncm91bmQiLCJ0cmlhZCIsInBvbHlhZCIsInRldHJhZCIsImluY3JlbWVudCIsImVxdWFscyIsInRpbnljb2xvciIsIlByZXNldFN0YXR1c0NvbG9yUmVnZXgiLCJfYSRjbG9zYWJsZSIsImlzUHJlc2V0Q29sb3IiLCJ0YWdTdHlsZSIsInByZXNldENvbG9yIiwidGFnQ2xhc3NOYW1lIiwiaGFuZGxlQ2xvc2VDbGljayIsImlzTmVlZFdhdmUiLCJ0YWdQcm9wcyIsInRhZ05vZGUiLCJUYWciLCJDaGVja2FibGVUYWciLCJ1c2VNZXJnZVByb3BCeVNjcmVlbiIsIm9yaVByb3AiLCJzZXRQcm9wIiwiYnJlYWtwb2ludCIsImN1clZhbCIsImNsYWNNZXJnZUFsaWduT3JKdXN0aWZ5IiwiUm93IiwianVzdGlmeSIsIl9wcm9wcyRndXR0ZXIiLCJzZXRTY3JlZW5zIiwiX1JlYWN0JHVzZVN0YXRlNSIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJjdXJTY3JlZW5zIiwic2V0Q3VyU2NyZWVucyIsIm1lcmdlQWxpZ24iLCJtZXJnZUp1c3RpZnkiLCJndXR0ZXJSZWYiLCJjdXJyZW50R3V0dGVyIiwiZ3V0dGVycyIsInJvd1N0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiX2d1dHRlcnMiLCJtYXJnaW5Ub3AiLCJfZ3V0dGVyczIiLCJndXR0ZXJIIiwiZ3V0dGVyViIsInJvd0NvbnRleHQiLCJzdHJva2UiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJJY29uTWFwIiwiRXhjZXB0aW9uTWFwIiwibm9Gb3VuZCIsInNlcnZlckVycm9yIiwidW5hdXRob3JpemVkIiwiRXhjZXB0aW9uU3RhdHVzIiwiU1ZHQ29tcG9uZW50IiwiY3VzdG9taXplQ2xhc3NOYW1lIiwic3ViVGl0bGUiLCJfcmVmMyRzdGF0dXMiLCJQUkVTRU5URURfSU1BR0VfNDAzIiwiUFJFU0VOVEVEX0lNQUdFXzQwNCIsIlBSRVNFTlRFRF9JTUFHRV81MDAiXSwibWFwcGluZ3MiOiJzRkFHRUEsRUFBT0MsUUFBVSxFQUFRLE0sNkJDSDNCLCtDQUNlLFNBQVNDLEVBQWdCQyxFQUFLQyxFQUFLQyxHQVloRCxPQVhBRCxFQUFNLFlBQWNBLE1BQ1RELEVBQ1RHLE9BQU9DLGVBQWVKLEVBQUtDLEVBQUssQ0FDOUJDLE1BQU9BLEVBQ1BHLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBR1pQLEVBQUlDLEdBQU9DLEVBRU5GLEksNkJDYk0sU0FBU1EsSUFZdEIsT0FYQUEsRUFBV0wsT0FBT00sT0FBU04sT0FBT00sT0FBT0MsT0FBUyxTQUFVQyxHQUMxRCxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUN6QyxJQUFJRyxFQUFTRixVQUFVRCxHQUN2QixJQUFLLElBQUlYLEtBQU9jLEVBQ1ZaLE9BQU9hLFVBQVVDLGVBQWVDLEtBQUtILEVBQVFkLEtBQy9DVSxFQUFPVixHQUFPYyxFQUFPZCxJQUkzQixPQUFPVSxJQUVPUSxNQUFNQyxLQUFNUCxXQVo5QixtQyw2QkNBQSw2Q0FDQSxTQUFTUSxFQUFRQyxFQUFRQyxHQUN2QixJQUFJQyxFQUFPckIsT0FBT3FCLEtBQUtGLEdBQ3ZCLEdBQUluQixPQUFPc0Isc0JBQXVCLENBQ2hDLElBQUlDLEVBQVV2QixPQUFPc0Isc0JBQXNCSCxHQUMzQ0MsSUFBbUJHLEVBQVVBLEVBQVFDLFFBQU8sU0FBVUMsR0FD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QVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQ25DLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FFUixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN0RixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdEYsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxLQUFNLElBQVUsS0FDMUIsSUFBVSxLQUFNLElBQVUsS0FDMUIsSUFBVSxLQUFNLElBQVUs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LEVBQ1hLLE9BQVFBLEVBQ1JjLEtBQU1BLElBQ1MsZ0JBQW9CLE1BQU8sQ0FDMUNLLFVBQVcsR0FBRzFDLE9BQU9rQixFQUFXLFdBQy9Cd3NHLEdBQVFpb0YsR0FBeUIsZ0JBQW9CLE1BQU8sQ0FDN0RqekwsVUFBVyxHQUFHMUMsT0FBT2tCLEVBQVcsY0FDL0J5MEwsR0FBd0IsZ0JBQW9CLEVBQU8sQ0FDcER6MEwsVUFBV0EsRUFDWHk1RyxNQUFPQSxJQUNMcjVHLEdBQXlCLGdCQUFvQixNQUFPLENBQ3REb0IsVUFBVyxHQUFHMUMsT0FBT2tCLEVBQVcsYUFDL0JJLEtBRUwsRUFBT3UwTCxvQkFBc0JULEVBQWEsS0FDMUMsRUFBT1Usb0JBQXNCVixFQUFhLEtBQzFDLEVBQU9XLG9CQUFzQlgsRUFBYSxLQUMzQiIsImZpbGUiOiJqcy84LjFmNzQzNTkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSBcIi4vZGVmaW5lUHJvcGVydHkuanNcIjtcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IG51bGwgPT0gYXJyID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSBfaSkge1xuICAgIHZhciBfcyxcbiAgICAgIF9lLFxuICAgICAgX3gsXG4gICAgICBfcixcbiAgICAgIF9hcnIgPSBbXSxcbiAgICAgIF9uID0gITAsXG4gICAgICBfZCA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoX3ggPSAoX2kgPSBfaS5jYWxsKGFycikpLm5leHQsIDAgPT09IGkpIHtcbiAgICAgICAgaWYgKE9iamVjdChfaSkgIT09IF9pKSByZXR1cm47XG4gICAgICAgIF9uID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoX24gPSAoX3MgPSBfeC5jYWxsKF9pKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9ICEwLCBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBudWxsICE9IF9pW1wicmV0dXJuXCJdICYmIChfciA9IF9pW1wicmV0dXJuXCJdKCksIE9iamVjdChfcikgIT09IF9yKSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cbn0iLCIvKiFcblx0Q29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG5cdExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG5cdGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cdHZhciBuYXRpdmVDb2RlU3RyaW5nID0gJ1tuYXRpdmUgY29kZV0nO1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGlmIChhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKGFyZy50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAmJiAhYXJnLnRvU3RyaW5nLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ1tuYXRpdmUgY29kZV0nKSkge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn0iLCIvKipcbiAqIFRha2UgaW5wdXQgZnJvbSBbMCwgbl0gYW5kIHJldHVybiBpdCBhcyBbMCwgMV1cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvdW5kMDEobiwgbWF4KSB7XG4gICAgaWYgKGlzT25lUG9pbnRaZXJvKG4pKSB7XG4gICAgICAgIG4gPSAnMTAwJSc7XG4gICAgfVxuICAgIHZhciBpc1BlcmNlbnQgPSBpc1BlcmNlbnRhZ2Uobik7XG4gICAgbiA9IG1heCA9PT0gMzYwID8gbiA6IE1hdGgubWluKG1heCwgTWF0aC5tYXgoMCwgcGFyc2VGbG9hdChuKSkpO1xuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBwZXJjZW50YWdlIGludG8gbnVtYmVyXG4gICAgaWYgKGlzUGVyY2VudCkge1xuICAgICAgICBuID0gcGFyc2VJbnQoU3RyaW5nKG4gKiBtYXgpLCAxMCkgLyAxMDA7XG4gICAgfVxuICAgIC8vIEhhbmRsZSBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnNcbiAgICBpZiAoTWF0aC5hYnMobiAtIG1heCkgPCAwLjAwMDAwMSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5XG4gICAgaWYgKG1heCA9PT0gMzYwKSB7XG4gICAgICAgIC8vIElmIG4gaXMgYSBodWUgZ2l2ZW4gaW4gZGVncmVlcyxcbiAgICAgICAgLy8gd3JhcCBhcm91bmQgb3V0LW9mLXJhbmdlIHZhbHVlcyBpbnRvIFswLCAzNjBdIHJhbmdlXG4gICAgICAgIC8vIHRoZW4gY29udmVydCBpbnRvIFswLCAxXS5cbiAgICAgICAgbiA9IChuIDwgMCA/IChuICUgbWF4KSArIG1heCA6IG4gJSBtYXgpIC8gcGFyc2VGbG9hdChTdHJpbmcobWF4KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiBuIG5vdCBhIGh1ZSBnaXZlbiBpbiBkZWdyZWVzXG4gICAgICAgIC8vIENvbnZlcnQgaW50byBbMCwgMV0gcmFuZ2UgaWYgaXQgaXNuJ3QgYWxyZWFkeS5cbiAgICAgICAgbiA9IChuICUgbWF4KSAvIHBhcnNlRmxvYXQoU3RyaW5nKG1heCkpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cbi8qKlxuICogRm9yY2UgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcDAxKHZhbCkge1xuICAgIHJldHVybiBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCB2YWwpKTtcbn1cbi8qKlxuICogTmVlZCB0byBoYW5kbGUgMS4wIGFzIDEwMCUsIHNpbmNlIG9uY2UgaXQgaXMgYSBudW1iZXIsIHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiBpdCBhbmQgMVxuICogPGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzQyMjA3Mi9qYXZhc2NyaXB0LWhvdy10by1kZXRlY3QtbnVtYmVyLWFzLWEtZGVjaW1hbC1pbmNsdWRpbmctMS0wPlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPbmVQb2ludFplcm8obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ3N0cmluZycgJiYgbi5pbmRleE9mKCcuJykgIT09IC0xICYmIHBhcnNlRmxvYXQobikgPT09IDE7XG59XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBzdHJpbmcgcGFzc2VkIGluIGlzIGEgcGVyY2VudGFnZVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQZXJjZW50YWdlKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdzdHJpbmcnICYmIG4uaW5kZXhPZignJScpICE9PSAtMTtcbn1cbi8qKlxuICogUmV0dXJuIGEgdmFsaWQgYWxwaGEgdmFsdWUgWzAsMV0gd2l0aCBhbGwgaW52YWxpZCB2YWx1ZXMgYmVpbmcgc2V0IHRvIDFcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvdW5kQWxwaGEoYSkge1xuICAgIGEgPSBwYXJzZUZsb2F0KGEpO1xuICAgIGlmIChpc05hTihhKSB8fCBhIDwgMCB8fCBhID4gMSkge1xuICAgICAgICBhID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59XG4vKipcbiAqIFJlcGxhY2UgYSBkZWNpbWFsIHdpdGggaXQncyBwZXJjZW50YWdlIHZhbHVlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9QZXJjZW50YWdlKG4pIHtcbiAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChOdW1iZXIobikgKiAxMDAsIFwiJVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG4vKipcbiAqIEZvcmNlIGEgaGV4IHZhbHVlIHRvIGhhdmUgMiBjaGFyYWN0ZXJzXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWQyKGMpIHtcbiAgICByZXR1cm4gYy5sZW5ndGggPT09IDEgPyAnMCcgKyBjIDogU3RyaW5nKGMpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpc1dpdGhCaW5kID0gTkFUSVZFX0JJTkQgJiYgRnVuY3Rpb25Qcm90b3R5cGUuYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIGFzIFJjRm9ybVByb3ZpZGVyIH0gZnJvbSAncmMtZmllbGQtZm9ybSc7XG5pbXBvcnQgb21pdCBmcm9tIFwicmMtdXRpbC9lcy9vbWl0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBGb3JtQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgbGFiZWxBbGlnbjogJ3JpZ2h0JyxcbiAgdmVydGljYWw6IGZhbHNlLFxuICBpdGVtUmVmOiBmdW5jdGlvbiBpdGVtUmVmKCkge31cbn0pO1xuZXhwb3J0IHZhciBOb1N0eWxlSXRlbUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCB2YXIgRm9ybVByb3ZpZGVyID0gZnVuY3Rpb24gRm9ybVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBwcm92aWRlclByb3BzID0gb21pdChwcm9wcywgWydwcmVmaXhDbHMnXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSY0Zvcm1Qcm92aWRlciwgX2V4dGVuZHMoe30sIHByb3ZpZGVyUHJvcHMpKTtcbn07XG5leHBvcnQgdmFyIEZvcm1JdGVtUHJlZml4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgcHJlZml4Q2xzOiAnJ1xufSk7XG5leHBvcnQgdmFyIEZvcm1JdGVtSW5wdXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0IHZhciBOb0Zvcm1TdHlsZSA9IGZ1bmN0aW9uIE5vRm9ybVN0eWxlKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBzdGF0dXMgPSBfcmVmLnN0YXR1cyxcbiAgICBvdmVycmlkZSA9IF9yZWYub3ZlcnJpZGU7XG4gIHZhciBmb3JtSXRlbUlucHV0Q29udGV4dCA9IHVzZUNvbnRleHQoRm9ybUl0ZW1JbnB1dENvbnRleHQpO1xuICB2YXIgbmV3Rm9ybUl0ZW1JbnB1dENvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3Q29udGV4dCA9IF9leHRlbmRzKHt9LCBmb3JtSXRlbUlucHV0Q29udGV4dCk7XG4gICAgaWYgKG92ZXJyaWRlKSB7XG4gICAgICBkZWxldGUgbmV3Q29udGV4dC5pc0Zvcm1JdGVtSW5wdXQ7XG4gICAgfVxuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIGRlbGV0ZSBuZXdDb250ZXh0LnN0YXR1cztcbiAgICAgIGRlbGV0ZSBuZXdDb250ZXh0Lmhhc0ZlZWRiYWNrO1xuICAgICAgZGVsZXRlIG5ld0NvbnRleHQuZmVlZGJhY2tJY29uO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Q29udGV4dDtcbiAgfSwgW3N0YXR1cywgb3ZlcnJpZGUsIGZvcm1JdGVtSW5wdXRDb250ZXh0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSXRlbUlucHV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuZXdGb3JtSXRlbUlucHV0Q29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59OyIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHsgZ2VuZXJhdGUgYXMgZ2VuZXJhdGVDb2xvciB9IGZyb20gJ0BhbnQtZGVzaWduL2NvbG9ycyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm4gZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0IHsgdXBkYXRlQ1NTIH0gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2R5bmFtaWNDU1NcIjtcbmltcG9ydCBJY29uQ29udGV4dCBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2xvZGFzaC9jYW1lbENhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmcodmFsaWQsIG1lc3NhZ2UpIHtcbiAgd2Fybih2YWxpZCwgXCJbQGFudC1kZXNpZ24vaWNvbnNdIFwiLmNvbmNhdChtZXNzYWdlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNJY29uRGVmaW5pdGlvbih0YXJnZXQpIHtcbiAgcmV0dXJuIF90eXBlb2YodGFyZ2V0KSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldC5uYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGFyZ2V0LnRoZW1lID09PSAnc3RyaW5nJyAmJiAoX3R5cGVvZih0YXJnZXQuaWNvbikgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXR0cnMoKSB7XG4gIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciB2YWwgPSBhdHRyc1trZXldO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgIGFjYy5jbGFzc05hbWUgPSB2YWw7XG4gICAgICAgIGRlbGV0ZSBhY2MuY2xhc3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZGVsZXRlIGFjY1trZXldO1xuICAgICAgICBhY2NbY2FtZWxDYXNlKGtleSldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSwga2V5LCByb290UHJvcHMpIHtcbiAgaWYgKCFyb290UHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobm9kZS50YWcsIF9vYmplY3RTcHJlYWQoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCBub3JtYWxpemVBdHRycyhub2RlLmF0dHJzKSksIChub2RlLmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIGdlbmVyYXRlKGNoaWxkLCBcIlwiLmNvbmNhdChrZXksIFwiLVwiKS5jb25jYXQobm9kZS50YWcsIFwiLVwiKS5jb25jYXQoaW5kZXgpKTtcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG5vZGUudGFnLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgIGtleToga2V5XG4gIH0sIG5vcm1hbGl6ZUF0dHJzKG5vZGUuYXR0cnMpKSwgcm9vdFByb3BzKSwgKG5vZGUuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlKGNoaWxkLCBcIlwiLmNvbmNhdChrZXksIFwiLVwiKS5jb25jYXQobm9kZS50YWcsIFwiLVwiKS5jb25jYXQoaW5kZXgpKTtcbiAgfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlY29uZGFyeUNvbG9yKHByaW1hcnlDb2xvcikge1xuICAvLyBjaG9vc2UgdGhlIHNlY29uZCBjb2xvclxuICByZXR1cm4gZ2VuZXJhdGVDb2xvcihwcmltYXJ5Q29sb3IpWzBdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnModHdvVG9uZUNvbG9yKSB7XG4gIGlmICghdHdvVG9uZUNvbG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHR3b1RvbmVDb2xvcikgPyB0d29Ub25lQ29sb3IgOiBbdHdvVG9uZUNvbG9yXTtcbn1cbi8vIFRoZXNlIHByb3BzIG1ha2Ugc3VyZSB0aGF0IHRoZSBTVkcgYmVoYXZpb3VycyBsaWtlIGdlbmVyYWwgdGV4dC5cbi8vIFJlZmVyZW5jZTogaHR0cHM6Ly9ibG9nLnByb3RvdHlwci5pby9hbGlnbi1zdmctaWNvbnMtdG8tdGV4dC1hbmQtc2F5LWdvb2RieWUtdG8tZm9udC1pY29ucy1kNDRiM2Q3YjI2YjRcbmV4cG9ydCB2YXIgc3ZnQmFzZVByb3BzID0ge1xuICB3aWR0aDogJzFlbScsXG4gIGhlaWdodDogJzFlbScsXG4gIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gIGZvY3VzYWJsZTogJ2ZhbHNlJ1xufTtcbmV4cG9ydCB2YXIgaWNvblN0eWxlcyA9IFwiXFxuLmFudGljb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjEyNWVtO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuLmFudGljb24gPiAqIHtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG4uYW50aWNvbiBzdmcge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uYW50aWNvbjo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5hbnRpY29uIC5hbnRpY29uLWljb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5hbnRpY29uW3RhYmluZGV4XSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5hbnRpY29uLXNwaW46OmJlZm9yZSxcXG4uYW50aWNvbi1zcGluIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBsb2FkaW5nQ2lyY2xlIDFzIGluZmluaXRlIGxpbmVhcjtcXG4gIGFuaW1hdGlvbjogbG9hZGluZ0NpcmNsZSAxcyBpbmZpbml0ZSBsaW5lYXI7XFxufVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBsb2FkaW5nQ2lyY2xlIHtcXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgbG9hZGluZ0NpcmNsZSB7XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgfVxcbn1cXG5cIjtcbmV4cG9ydCB2YXIgdXNlSW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gdXNlSW5zZXJ0U3R5bGVzKCkge1xuICB2YXIgc3R5bGVTdHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGljb25TdHlsZXM7XG4gIHZhciBfdXNlQ29udGV4dCA9IHVzZUNvbnRleHQoSWNvbkNvbnRleHQpLFxuICAgIGNzcCA9IF91c2VDb250ZXh0LmNzcDtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB1cGRhdGVDU1Moc3R5bGVTdHIsICdAYW50LWRlc2lnbi1pY29ucycsIHtcbiAgICAgIHByZXBlbmQ6IHRydWUsXG4gICAgICBjc3A6IGNzcFxuICAgIH0pO1xuICB9LCBbXSk7XG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xudmFyIF9leGNsdWRlZCA9IFtcImljb25cIiwgXCJjbGFzc05hbWVcIiwgXCJvbkNsaWNrXCIsIFwic3R5bGVcIiwgXCJwcmltYXJ5Q29sb3JcIiwgXCJzZWNvbmRhcnlDb2xvclwiXTtcbmltcG9ydCB7IGdlbmVyYXRlLCBnZXRTZWNvbmRhcnlDb2xvciwgaXNJY29uRGVmaW5pdGlvbiwgd2FybmluZywgdXNlSW5zZXJ0U3R5bGVzIH0gZnJvbSAnLi4vdXRpbHMnO1xudmFyIHR3b1RvbmVDb2xvclBhbGV0dGUgPSB7XG4gIHByaW1hcnlDb2xvcjogJyMzMzMnLFxuICBzZWNvbmRhcnlDb2xvcjogJyNFNkU2RTYnLFxuICBjYWxjdWxhdGVkOiBmYWxzZVxufTtcbmZ1bmN0aW9uIHNldFR3b1RvbmVDb2xvcnMoX3JlZikge1xuICB2YXIgcHJpbWFyeUNvbG9yID0gX3JlZi5wcmltYXJ5Q29sb3IsXG4gICAgc2Vjb25kYXJ5Q29sb3IgPSBfcmVmLnNlY29uZGFyeUNvbG9yO1xuICB0d29Ub25lQ29sb3JQYWxldHRlLnByaW1hcnlDb2xvciA9IHByaW1hcnlDb2xvcjtcbiAgdHdvVG9uZUNvbG9yUGFsZXR0ZS5zZWNvbmRhcnlDb2xvciA9IHNlY29uZGFyeUNvbG9yIHx8IGdldFNlY29uZGFyeUNvbG9yKHByaW1hcnlDb2xvcik7XG4gIHR3b1RvbmVDb2xvclBhbGV0dGUuY2FsY3VsYXRlZCA9ICEhc2Vjb25kYXJ5Q29sb3I7XG59XG5mdW5jdGlvbiBnZXRUd29Ub25lQ29sb3JzKCkge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgdHdvVG9uZUNvbG9yUGFsZXR0ZSk7XG59XG52YXIgSWNvbkJhc2UgPSBmdW5jdGlvbiBJY29uQmFzZShwcm9wcykge1xuICB2YXIgaWNvbiA9IHByb3BzLmljb24sXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgcHJpbWFyeUNvbG9yID0gcHJvcHMucHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yID0gcHJvcHMuc2Vjb25kYXJ5Q29sb3IsXG4gICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuICB2YXIgY29sb3JzID0gdHdvVG9uZUNvbG9yUGFsZXR0ZTtcbiAgaWYgKHByaW1hcnlDb2xvcikge1xuICAgIGNvbG9ycyA9IHtcbiAgICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3I6IHNlY29uZGFyeUNvbG9yIHx8IGdldFNlY29uZGFyeUNvbG9yKHByaW1hcnlDb2xvcilcbiAgICB9O1xuICB9XG4gIHVzZUluc2VydFN0eWxlcygpO1xuICB3YXJuaW5nKGlzSWNvbkRlZmluaXRpb24oaWNvbiksIFwiaWNvbiBzaG91bGQgYmUgaWNvbiBkZWZpbml0b24sIGJ1dCBnb3QgXCIuY29uY2F0KGljb24pKTtcbiAgaWYgKCFpc0ljb25EZWZpbml0aW9uKGljb24pKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHRhcmdldCA9IGljb247XG4gIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5pY29uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGFyZ2V0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0YXJnZXQpLCB7fSwge1xuICAgICAgaWNvbjogdGFyZ2V0Lmljb24oY29sb3JzLnByaW1hcnlDb2xvciwgY29sb3JzLnNlY29uZGFyeUNvbG9yKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBnZW5lcmF0ZSh0YXJnZXQuaWNvbiwgXCJzdmctXCIuY29uY2F0KHRhcmdldC5uYW1lKSwgX29iamVjdFNwcmVhZCh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgJ2RhdGEtaWNvbic6IHRhcmdldC5uYW1lLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICB9LCByZXN0UHJvcHMpKTtcbn07XG5JY29uQmFzZS5kaXNwbGF5TmFtZSA9ICdJY29uUmVhY3QnO1xuSWNvbkJhc2UuZ2V0VHdvVG9uZUNvbG9ycyA9IGdldFR3b1RvbmVDb2xvcnM7XG5JY29uQmFzZS5zZXRUd29Ub25lQ29sb3JzID0gc2V0VHdvVG9uZUNvbG9ycztcbmV4cG9ydCBkZWZhdWx0IEljb25CYXNlOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlYWN0SWNvbiBmcm9tICcuL0ljb25CYXNlJztcbmltcG9ydCB7IG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnMgfSBmcm9tICcuLi91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gc2V0VHdvVG9uZUNvbG9yKHR3b1RvbmVDb2xvcikge1xuICB2YXIgX25vcm1hbGl6ZVR3b1RvbmVDb2xvID0gbm9ybWFsaXplVHdvVG9uZUNvbG9ycyh0d29Ub25lQ29sb3IpLFxuICAgIF9ub3JtYWxpemVUd29Ub25lQ29sbzIgPSBfc2xpY2VkVG9BcnJheShfbm9ybWFsaXplVHdvVG9uZUNvbG8sIDIpLFxuICAgIHByaW1hcnlDb2xvciA9IF9ub3JtYWxpemVUd29Ub25lQ29sbzJbMF0sXG4gICAgc2Vjb25kYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzFdO1xuICByZXR1cm4gUmVhY3RJY29uLnNldFR3b1RvbmVDb2xvcnMoe1xuICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yOiBzZWNvbmRhcnlDb2xvclxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUd29Ub25lQ29sb3IoKSB7XG4gIHZhciBjb2xvcnMgPSBSZWFjdEljb24uZ2V0VHdvVG9uZUNvbG9ycygpO1xuICBpZiAoIWNvbG9ycy5jYWxjdWxhdGVkKSB7XG4gICAgcmV0dXJuIGNvbG9ycy5wcmltYXJ5Q29sb3I7XG4gIH1cbiAgcmV0dXJuIFtjb2xvcnMucHJpbWFyeUNvbG9yLCBjb2xvcnMuc2Vjb25kYXJ5Q29sb3JdO1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImljb25cIiwgXCJzcGluXCIsIFwicm90YXRlXCIsIFwidGFiSW5kZXhcIiwgXCJvbkNsaWNrXCIsIFwidHdvVG9uZUNvbG9yXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQ29udGV4dCBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFJlYWN0SWNvbiBmcm9tICcuL0ljb25CYXNlJztcbmltcG9ydCB7IGdldFR3b1RvbmVDb2xvciwgc2V0VHdvVG9uZUNvbG9yIH0gZnJvbSAnLi90d29Ub25lUHJpbWFyeUNvbG9yJztcbmltcG9ydCB7IG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnMgfSBmcm9tICcuLi91dGlscyc7XG4vLyBJbml0aWFsIHNldHRpbmdcbi8vIHNob3VsZCBtb3ZlIGl0IHRvIGFudGQgbWFpbiByZXBvP1xuc2V0VHdvVG9uZUNvbG9yKCcjMTg5MGZmJyk7XG52YXIgSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICBzcGluID0gcHJvcHMuc3BpbixcbiAgICByb3RhdGUgPSBwcm9wcy5yb3RhdGUsXG4gICAgdGFiSW5kZXggPSBwcm9wcy50YWJJbmRleCxcbiAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICB0d29Ub25lQ29sb3IgPSBwcm9wcy50d29Ub25lQ29sb3IsXG4gICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHQpLFxuICAgIF9SZWFjdCR1c2VDb250ZXh0JHByZSA9IF9SZWFjdCR1c2VDb250ZXh0LnByZWZpeENscyxcbiAgICBwcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dCRwcmUgPT09IHZvaWQgMCA/ICdhbnRpY29uJyA6IF9SZWFjdCR1c2VDb250ZXh0JHByZSxcbiAgICByb290Q2xhc3NOYW1lID0gX1JlYWN0JHVzZUNvbnRleHQucm9vdENsYXNzTmFtZTtcbiAgdmFyIGNsYXNzU3RyaW5nID0gY2xhc3NOYW1lcyhyb290Q2xhc3NOYW1lLCBwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChpY29uLm5hbWUpLCAhIWljb24ubmFtZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zcGluXCIpLCAhIXNwaW4gfHwgaWNvbi5uYW1lID09PSAnbG9hZGluZycpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIHZhciBpY29uVGFiSW5kZXggPSB0YWJJbmRleDtcbiAgaWYgKGljb25UYWJJbmRleCA9PT0gdW5kZWZpbmVkICYmIG9uQ2xpY2spIHtcbiAgICBpY29uVGFiSW5kZXggPSAtMTtcbiAgfVxuICB2YXIgc3ZnU3R5bGUgPSByb3RhdGUgPyB7XG4gICAgbXNUcmFuc2Zvcm06IFwicm90YXRlKFwiLmNvbmNhdChyb3RhdGUsIFwiZGVnKVwiKSxcbiAgICB0cmFuc2Zvcm06IFwicm90YXRlKFwiLmNvbmNhdChyb3RhdGUsIFwiZGVnKVwiKVxuICB9IDogdW5kZWZpbmVkO1xuICB2YXIgX25vcm1hbGl6ZVR3b1RvbmVDb2xvID0gbm9ybWFsaXplVHdvVG9uZUNvbG9ycyh0d29Ub25lQ29sb3IpLFxuICAgIF9ub3JtYWxpemVUd29Ub25lQ29sbzIgPSBfc2xpY2VkVG9BcnJheShfbm9ybWFsaXplVHdvVG9uZUNvbG8sIDIpLFxuICAgIHByaW1hcnlDb2xvciA9IF9ub3JtYWxpemVUd29Ub25lQ29sbzJbMF0sXG4gICAgc2Vjb25kYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzFdO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgcm9sZTogXCJpbWdcIixcbiAgICBcImFyaWEtbGFiZWxcIjogaWNvbi5uYW1lXG4gIH0sIHJlc3RQcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgdGFiSW5kZXg6IGljb25UYWJJbmRleCxcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIGNsYXNzTmFtZTogY2xhc3NTdHJpbmdcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0SWNvbiwge1xuICAgIGljb246IGljb24sXG4gICAgcHJpbWFyeUNvbG9yOiBwcmltYXJ5Q29sb3IsXG4gICAgc2Vjb25kYXJ5Q29sb3I6IHNlY29uZGFyeUNvbG9yLFxuICAgIHN0eWxlOiBzdmdTdHlsZVxuICB9KSk7XG59KTtcbkljb24uZGlzcGxheU5hbWUgPSAnQW50ZEljb24nO1xuSWNvbi5nZXRUd29Ub25lQ29sb3IgPSBnZXRUd29Ub25lQ29sb3I7XG5JY29uLnNldFR3b1RvbmVDb2xvciA9IHNldFR3b1RvbmVDb2xvcjtcbmV4cG9ydCBkZWZhdWx0IEljb247IiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGNhbGwsIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IHRoaXMgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSAkZG9jdW1lbnRBbGwuSVNfSFRNTEREQSA/IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbFsnZm9yJ10gfHwgU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKVxuICAgICAgPyBTeW1ib2xbbmFtZV1cbiAgICAgIDogY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiaW1wb3J0IHsgYm91bmQwMSwgcGFkMiB9IGZyb20gJy4vdXRpbCc7XG4vLyBgcmdiVG9Ic2xgLCBgcmdiVG9Ic3ZgLCBgaHNsVG9SZ2JgLCBgaHN2VG9SZ2JgIG1vZGlmaWVkIGZyb206XG4vLyA8aHR0cDovL21qaWphY2tzb24uY29tLzIwMDgvMDIvcmdiLXRvLWhzbC1hbmQtcmdiLXRvLWhzdi1jb2xvci1tb2RlbC1jb252ZXJzaW9uLWFsZ29yaXRobXMtaW4tamF2YXNjcmlwdD5cbi8qKlxuICogSGFuZGxlIGJvdW5kcyAvIHBlcmNlbnRhZ2UgY2hlY2tpbmcgdG8gY29uZm9ybSB0byBDU1MgY29sb3Igc3BlY1xuICogPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvPlxuICogKkFzc3VtZXM6KiByLCBnLCBiIGluIFswLCAyNTVdIG9yIFswLCAxXVxuICogKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiBbMCwgMjU1XVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9SZ2IociwgZywgYikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IGJvdW5kMDEociwgMjU1KSAqIDI1NSxcbiAgICAgICAgZzogYm91bmQwMShnLCAyNTUpICogMjU1LFxuICAgICAgICBiOiBib3VuZDAxKGIsIDI1NSkgKiAyNTUsXG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTTC5cbiAqICpBc3N1bWVzOiogciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiBbMCwgMjU1XSBvciBbMCwgMV1cbiAqICpSZXR1cm5zOiogeyBoLCBzLCBsIH0gaW4gWzAsMV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSHNsKHIsIGcsIGIpIHtcbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBoID0gMDtcbiAgICB2YXIgcyA9IDA7XG4gICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICAgIHMgPSAwO1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjpcbiAgICAgICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIGw6IGwgfTtcbn1cbmZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgdCkge1xuICAgIGlmICh0IDwgMCkge1xuICAgICAgICB0ICs9IDE7XG4gICAgfVxuICAgIGlmICh0ID4gMSkge1xuICAgICAgICB0IC09IDE7XG4gICAgfVxuICAgIGlmICh0IDwgMSAvIDYpIHtcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDYgKiB0KTtcbiAgICB9XG4gICAgaWYgKHQgPCAxIC8gMikge1xuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG4gICAgaWYgKHQgPCAyIC8gMykge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDY7XG4gICAgfVxuICAgIHJldHVybiBwO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBIU0wgY29sb3IgdmFsdWUgdG8gUkdCLlxuICpcbiAqICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCBsIGFyZSBjb250YWluZWQgWzAsIDFdIG9yIFswLCAxMDBdXG4gKiAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGgsIHMsIGwpIHtcbiAgICB2YXIgcjtcbiAgICB2YXIgZztcbiAgICB2YXIgYjtcbiAgICBoID0gYm91bmQwMShoLCAzNjApO1xuICAgIHMgPSBib3VuZDAxKHMsIDEwMCk7XG4gICAgbCA9IGJvdW5kMDEobCwgMTAwKTtcbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAvLyBhY2hyb21hdGljXG4gICAgICAgIGcgPSBsO1xuICAgICAgICBiID0gbDtcbiAgICAgICAgciA9IGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgICAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMSAvIDMpO1xuICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEgLyAzKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcjogciAqIDI1NSwgZzogZyAqIDI1NSwgYjogYiAqIDI1NSB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNWXG4gKlxuICogKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV0gb3IgWzAsIDFdXG4gKiAqUmV0dXJuczoqIHsgaCwgcywgdiB9IGluIFswLDFdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hzdihyLCBnLCBiKSB7XG4gICAgciA9IGJvdW5kMDEociwgMjU1KTtcbiAgICBnID0gYm91bmQwMShnLCAyNTUpO1xuICAgIGIgPSBib3VuZDAxKGIsIDI1NSk7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICB2YXIgaCA9IDA7XG4gICAgdmFyIHYgPSBtYXg7XG4gICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgdmFyIHMgPSBtYXggPT09IDAgPyAwIDogZCAvIG1heDtcbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgaCA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICAgICAgICBjYXNlIHI6XG4gICAgICAgICAgICAgICAgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOlxuICAgICAgICAgICAgICAgIGggPSAoYiAtIHIpIC8gZCArIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6XG4gICAgICAgICAgICAgICAgaCA9IChyIC0gZykgLyBkICsgNDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cbiAgICByZXR1cm4geyBoOiBoLCBzOiBzLCB2OiB2IH07XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEhTViBjb2xvciB2YWx1ZSB0byBSR0IuXG4gKlxuICogKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIHYgYXJlIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDEwMF1cbiAqICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHN2VG9SZ2IoaCwgcywgdikge1xuICAgIGggPSBib3VuZDAxKGgsIDM2MCkgKiA2O1xuICAgIHMgPSBib3VuZDAxKHMsIDEwMCk7XG4gICAgdiA9IGJvdW5kMDEodiwgMTAwKTtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoaCk7XG4gICAgdmFyIGYgPSBoIC0gaTtcbiAgICB2YXIgcCA9IHYgKiAoMSAtIHMpO1xuICAgIHZhciBxID0gdiAqICgxIC0gZiAqIHMpO1xuICAgIHZhciB0ID0gdiAqICgxIC0gKDEgLSBmKSAqIHMpO1xuICAgIHZhciBtb2QgPSBpICUgNjtcbiAgICB2YXIgciA9IFt2LCBxLCBwLCBwLCB0LCB2XVttb2RdO1xuICAgIHZhciBnID0gW3QsIHYsIHYsIHEsIHAsIHBdW21vZF07XG4gICAgdmFyIGIgPSBbcCwgcCwgdCwgdiwgdiwgcV1bbW9kXTtcbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQiBjb2xvciB0byBoZXhcbiAqXG4gKiBBc3N1bWVzIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XVxuICogUmV0dXJucyBhIDMgb3IgNiBjaGFyYWN0ZXIgaGV4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChyLCBnLCBiLCBhbGxvdzNDaGFyKSB7XG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChnKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKE1hdGgucm91bmQoYikudG9TdHJpbmcoMTYpKSxcbiAgICBdO1xuICAgIC8vIFJldHVybiBhIDMgY2hhcmFjdGVyIGhleCBpZiBwb3NzaWJsZVxuICAgIGlmIChhbGxvdzNDaGFyICYmXG4gICAgICAgIGhleFswXS5zdGFydHNXaXRoKGhleFswXS5jaGFyQXQoMSkpICYmXG4gICAgICAgIGhleFsxXS5zdGFydHNXaXRoKGhleFsxXS5jaGFyQXQoMSkpICYmXG4gICAgICAgIGhleFsyXS5zdGFydHNXaXRoKGhleFsyXS5jaGFyQXQoMSkpKSB7XG4gICAgICAgIHJldHVybiBoZXhbMF0uY2hhckF0KDApICsgaGV4WzFdLmNoYXJBdCgwKSArIGhleFsyXS5jaGFyQXQoMCk7XG4gICAgfVxuICAgIHJldHVybiBoZXguam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgcGx1cyBhbHBoYSB0cmFuc3BhcmVuY3kgdG8gaGV4XG4gKlxuICogQXNzdW1lcyByLCBnLCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBhbmRcbiAqIGEgaW4gWzAsIDFdLiBSZXR1cm5zIGEgNCBvciA4IGNoYXJhY3RlciByZ2JhIGhleFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuZXhwb3J0IGZ1bmN0aW9uIHJnYmFUb0hleChyLCBnLCBiLCBhLCBhbGxvdzRDaGFyKSB7XG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChnKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKE1hdGgucm91bmQoYikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihjb252ZXJ0RGVjaW1hbFRvSGV4KGEpKSxcbiAgICBdO1xuICAgIC8vIFJldHVybiBhIDQgY2hhcmFjdGVyIGhleCBpZiBwb3NzaWJsZVxuICAgIGlmIChhbGxvdzRDaGFyICYmXG4gICAgICAgIGhleFswXS5zdGFydHNXaXRoKGhleFswXS5jaGFyQXQoMSkpICYmXG4gICAgICAgIGhleFsxXS5zdGFydHNXaXRoKGhleFsxXS5jaGFyQXQoMSkpICYmXG4gICAgICAgIGhleFsyXS5zdGFydHNXaXRoKGhleFsyXS5jaGFyQXQoMSkpICYmXG4gICAgICAgIGhleFszXS5zdGFydHNXaXRoKGhleFszXS5jaGFyQXQoMSkpKSB7XG4gICAgICAgIHJldHVybiBoZXhbMF0uY2hhckF0KDApICsgaGV4WzFdLmNoYXJBdCgwKSArIGhleFsyXS5jaGFyQXQoMCkgKyBoZXhbM10uY2hhckF0KDApO1xuICAgIH1cbiAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHRvIGFuIEFSR0IgSGV4OCBzdHJpbmdcbiAqIFJhcmVseSB1c2VkLCBidXQgcmVxdWlyZWQgZm9yIFwidG9GaWx0ZXIoKVwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JhVG9BcmdiSGV4KHIsIGcsIGIsIGEpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKGNvbnZlcnREZWNpbWFsVG9IZXgoYSkpLFxuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgIF07XG4gICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbn1cbi8qKiBDb252ZXJ0cyBhIGRlY2ltYWwgdG8gYSBoZXggdmFsdWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0RGVjaW1hbFRvSGV4KGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGQpICogMjU1KS50b1N0cmluZygxNik7XG59XG4vKiogQ29udmVydHMgYSBoZXggdmFsdWUgdG8gYSBkZWNpbWFsICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEhleFRvRGVjaW1hbChoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50RnJvbUhleChoKSAvIDI1NTtcbn1cbi8qKiBQYXJzZSBhIGJhc2UtMTYgaGV4IHZhbHVlIGludG8gYSBiYXNlLTEwIGludGVnZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUludEZyb21IZXgodmFsKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTYpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlcklucHV0VG9PYmplY3QoY29sb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByOiBjb2xvciA+PiAxNixcbiAgICAgICAgZzogKGNvbG9yICYgMHhmZjAwKSA+PiA4LFxuICAgICAgICBiOiBjb2xvciAmIDB4ZmYsXG4gICAgfTtcbn1cbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vX3V0aWwvd2FybmluZyc7XG5pbXBvcnQgeyBjaGFuZ2VDb25maXJtTG9jYWxlIH0gZnJvbSAnLi4vbW9kYWwvbG9jYWxlJztcbmltcG9ydCBMb2NhbGVDb250ZXh0IGZyb20gJy4vY29udGV4dCc7XG5leHBvcnQgdmFyIEFOVF9NQVJLID0gJ2ludGVybmFsTWFyayc7XG52YXIgTG9jYWxlUHJvdmlkZXIgPSBmdW5jdGlvbiBMb2NhbGVQcm92aWRlcihwcm9wcykge1xuICB2YXIgX3Byb3BzJGxvY2FsZSA9IHByb3BzLmxvY2FsZSxcbiAgICBsb2NhbGUgPSBfcHJvcHMkbG9jYWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRsb2NhbGUsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBfQU5UX01BUktfXyA9IHByb3BzLl9BTlRfTUFSS19fO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoX0FOVF9NQVJLX18gPT09IEFOVF9NQVJLLCAnTG9jYWxlUHJvdmlkZXInLCAnYExvY2FsZVByb3ZpZGVyYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBsb2NhbGVgIHdpdGggYENvbmZpZ1Byb3ZpZGVyYCBpbnN0ZWFkOiBodHRwOi8vdS5hbnQuZGVzaWduL2xvY2FsZScpIDogdm9pZCAwO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgY2hhbmdlQ29uZmlybUxvY2FsZShsb2NhbGUgJiYgbG9jYWxlLk1vZGFsKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hhbmdlQ29uZmlybUxvY2FsZSgpO1xuICAgIH07XG4gIH0sIFtsb2NhbGVdKTtcbiAgdmFyIGdldE1lbW9pemVkQ29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBsb2NhbGUpLCB7XG4gICAgICBleGlzdDogdHJ1ZVxuICAgIH0pO1xuICB9LCBbbG9jYWxlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhbGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGdldE1lbW9pemVkQ29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn07XG5leHBvcnQgZGVmYXVsdCBMb2NhbGVQcm92aWRlcjsiLCJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVnZW5lcmF0b3JSdW50aW1lXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX19hd2FpdGVyID0gdGhpcyAmJiB0aGlzLl9fYXdhaXRlciB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIH1cbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufTtcbmltcG9ydCBDaGVja0NpcmNsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DaGVja0NpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgQ2xvc2VDaXJjbGVPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2xvc2VDaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IENsb3NlT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlT3V0bGluZWRcIjtcbmltcG9ydCBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgSW5mb0NpcmNsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9JbmZvQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tICdyYy1ub3RpZmljYXRpb24nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENvbmZpZ1Byb3ZpZGVyLCB7IGdsb2JhbENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgY3JlYXRlVXNlTm90aWZpY2F0aW9uIGZyb20gJy4vaG9va3MvdXNlTm90aWZpY2F0aW9uJztcbnZhciBub3RpZmljYXRpb25JbnN0YW5jZSA9IHt9O1xudmFyIGRlZmF1bHREdXJhdGlvbiA9IDQuNTtcbnZhciBkZWZhdWx0VG9wID0gMjQ7XG52YXIgZGVmYXVsdEJvdHRvbSA9IDI0O1xudmFyIGRlZmF1bHRQcmVmaXhDbHMgPSAnJztcbnZhciBkZWZhdWx0UGxhY2VtZW50ID0gJ3RvcFJpZ2h0JztcbnZhciBkZWZhdWx0R2V0Q29udGFpbmVyO1xudmFyIGRlZmF1bHRDbG9zZUljb247XG52YXIgcnRsID0gZmFsc2U7XG52YXIgbWF4Q291bnQ7XG5mdW5jdGlvbiBzZXROb3RpZmljYXRpb25Db25maWcob3B0aW9ucykge1xuICB2YXIgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgIHBsYWNlbWVudCA9IG9wdGlvbnMucGxhY2VtZW50LFxuICAgIGJvdHRvbSA9IG9wdGlvbnMuYm90dG9tLFxuICAgIHRvcCA9IG9wdGlvbnMudG9wLFxuICAgIGdldENvbnRhaW5lciA9IG9wdGlvbnMuZ2V0Q29udGFpbmVyLFxuICAgIGNsb3NlSWNvbiA9IG9wdGlvbnMuY2xvc2VJY29uLFxuICAgIHByZWZpeENscyA9IG9wdGlvbnMucHJlZml4Q2xzO1xuICBpZiAocHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0UHJlZml4Q2xzID0gcHJlZml4Q2xzO1xuICB9XG4gIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdER1cmF0aW9uID0gZHVyYXRpb247XG4gIH1cbiAgaWYgKHBsYWNlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdFBsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgfSBlbHNlIGlmIChvcHRpb25zLnJ0bCkge1xuICAgIGRlZmF1bHRQbGFjZW1lbnQgPSAndG9wTGVmdCc7XG4gIH1cbiAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdEJvdHRvbSA9IGJvdHRvbTtcbiAgfVxuICBpZiAodG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0VG9wID0gdG9wO1xuICB9XG4gIGlmIChnZXRDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRHZXRDb250YWluZXIgPSBnZXRDb250YWluZXI7XG4gIH1cbiAgaWYgKGNsb3NlSWNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdENsb3NlSWNvbiA9IGNsb3NlSWNvbjtcbiAgfVxuICBpZiAob3B0aW9ucy5ydGwgIT09IHVuZGVmaW5lZCkge1xuICAgIHJ0bCA9IG9wdGlvbnMucnRsO1xuICB9XG4gIGlmIChvcHRpb25zLm1heENvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBtYXhDb3VudCA9IG9wdGlvbnMubWF4Q291bnQ7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFBsYWNlbWVudFN0eWxlKHBsYWNlbWVudCkge1xuICB2YXIgdG9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0VG9wO1xuICB2YXIgYm90dG9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0Qm90dG9tO1xuICB2YXIgc3R5bGU7XG4gIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBib3R0b206ICdhdXRvJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RvcExlZnQnOlxuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBib3R0b206ICdhdXRvJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RvcFJpZ2h0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogJ2F1dG8nXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2JvdHRvbUxlZnQnOlxuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldE5vdGlmaWNhdGlvbkluc3RhbmNlKGFyZ3MsIGNhbGxiYWNrKSB7XG4gIHZhciBfYXJncyRwbGFjZW1lbnQgPSBhcmdzLnBsYWNlbWVudCxcbiAgICBwbGFjZW1lbnQgPSBfYXJncyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRQbGFjZW1lbnQgOiBfYXJncyRwbGFjZW1lbnQsXG4gICAgdG9wID0gYXJncy50b3AsXG4gICAgYm90dG9tID0gYXJncy5ib3R0b20sXG4gICAgX2FyZ3MkZ2V0Q29udGFpbmVyID0gYXJncy5nZXRDb250YWluZXIsXG4gICAgZ2V0Q29udGFpbmVyID0gX2FyZ3MkZ2V0Q29udGFpbmVyID09PSB2b2lkIDAgPyBkZWZhdWx0R2V0Q29udGFpbmVyIDogX2FyZ3MkZ2V0Q29udGFpbmVyLFxuICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IGFyZ3MucHJlZml4Q2xzO1xuICB2YXIgX2dsb2JhbENvbmZpZyA9IGdsb2JhbENvbmZpZygpLFxuICAgIGdldFByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0UHJlZml4Q2xzLFxuICAgIGdldEljb25QcmVmaXhDbHMgPSBfZ2xvYmFsQ29uZmlnLmdldEljb25QcmVmaXhDbHM7XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ25vdGlmaWNhdGlvbicsIGN1c3RvbWl6ZVByZWZpeENscyB8fCBkZWZhdWx0UHJlZml4Q2xzKTtcbiAgdmFyIGljb25QcmVmaXhDbHMgPSBnZXRJY29uUHJlZml4Q2xzKCk7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChwbGFjZW1lbnQpO1xuICB2YXIgY2FjaGVJbnN0YW5jZSA9IG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XTtcbiAgaWYgKGNhY2hlSW5zdGFuY2UpIHtcbiAgICBQcm9taXNlLnJlc29sdmUoY2FjaGVJbnN0YW5jZSkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgcHJlZml4Q2xzOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vdGljZVwiKSxcbiAgICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5vdGlmaWNhdGlvbkNsYXNzID0gY2xhc3NOYW1lcyhcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQocGxhY2VtZW50KSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgcnRsID09PSB0cnVlKSk7XG4gIG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgTm90aWZpY2F0aW9uLm5ld0luc3RhbmNlKHtcbiAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgY2xhc3NOYW1lOiBub3RpZmljYXRpb25DbGFzcyxcbiAgICAgIHN0eWxlOiBnZXRQbGFjZW1lbnRTdHlsZShwbGFjZW1lbnQsIHRvcCwgYm90dG9tKSxcbiAgICAgIGdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyLFxuICAgICAgbWF4Q291bnQ6IG1heENvdW50XG4gICAgfSwgZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgcmVzb2x2ZShub3RpZmljYXRpb24pO1xuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBwcmVmaXhDbHM6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbm90aWNlXCIpLFxuICAgICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgICBpbnN0YW5jZTogbm90aWZpY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG52YXIgdHlwZVRvSWNvbiA9IHtcbiAgc3VjY2VzczogQ2hlY2tDaXJjbGVPdXRsaW5lZCxcbiAgaW5mbzogSW5mb0NpcmNsZU91dGxpbmVkLFxuICBlcnJvcjogQ2xvc2VDaXJjbGVPdXRsaW5lZCxcbiAgd2FybmluZzogRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFxufTtcbmZ1bmN0aW9uIGdldFJDTm90aWNlUHJvcHMoYXJncywgcHJlZml4Q2xzLCBpY29uUHJlZml4Q2xzKSB7XG4gIHZhciBkdXJhdGlvbkFyZyA9IGFyZ3MuZHVyYXRpb24sXG4gICAgaWNvbiA9IGFyZ3MuaWNvbixcbiAgICB0eXBlID0gYXJncy50eXBlLFxuICAgIGRlc2NyaXB0aW9uID0gYXJncy5kZXNjcmlwdGlvbixcbiAgICBtZXNzYWdlID0gYXJncy5tZXNzYWdlLFxuICAgIGJ0biA9IGFyZ3MuYnRuLFxuICAgIG9uQ2xvc2UgPSBhcmdzLm9uQ2xvc2UsXG4gICAgb25DbGljayA9IGFyZ3Mub25DbGljayxcbiAgICBrZXkgPSBhcmdzLmtleSxcbiAgICBzdHlsZSA9IGFyZ3Muc3R5bGUsXG4gICAgY2xhc3NOYW1lID0gYXJncy5jbGFzc05hbWUsXG4gICAgX2FyZ3MkY2xvc2VJY29uID0gYXJncy5jbG9zZUljb24sXG4gICAgY2xvc2VJY29uID0gX2FyZ3MkY2xvc2VJY29uID09PSB2b2lkIDAgPyBkZWZhdWx0Q2xvc2VJY29uIDogX2FyZ3MkY2xvc2VJY29uLFxuICAgIHByb3BzID0gYXJncy5wcm9wcztcbiAgdmFyIGR1cmF0aW9uID0gZHVyYXRpb25BcmcgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHREdXJhdGlvbiA6IGR1cmF0aW9uQXJnO1xuICB2YXIgaWNvbk5vZGUgPSBudWxsO1xuICBpZiAoaWNvbikge1xuICAgIGljb25Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uXCIpXG4gICAgfSwgYXJncy5pY29uKTtcbiAgfSBlbHNlIGlmICh0eXBlKSB7XG4gICAgaWNvbk5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCh0eXBlVG9JY29uW3R5cGVdIHx8IG51bGwsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uIFwiKS5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uLVwiKS5jb25jYXQodHlwZSlcbiAgICB9KTtcbiAgfVxuICB2YXIgY2xvc2VJY29uVG9SZW5kZXIgPSB0eXBlb2YgY2xvc2VJY29uID09PSAndW5kZWZpbmVkJyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsb3NlLXhcIilcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VPdXRsaW5lZCwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jbG9zZS1pY29uXCIpXG4gIH0pKSA6IGNsb3NlSWNvbjtcbiAgdmFyIGF1dG9NYXJnaW5UYWcgPSAhZGVzY3JpcHRpb24gJiYgaWNvbk5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlLXNpbmdsZS1saW5lLWF1dG8tbWFyZ2luXCIpXG4gIH0pIDogbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25maWdQcm92aWRlciwge1xuICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENsc1xuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogaWNvbk5vZGUgPyBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdpdGgtaWNvblwiKSA6ICcnLFxuICAgICAgcm9sZTogXCJhbGVydFwiXG4gICAgfSwgaWNvbk5vZGUsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlXCIpXG4gICAgfSwgYXV0b01hcmdpblRhZywgbWVzc2FnZSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kZXNjcmlwdGlvblwiKVxuICAgIH0sIGRlc2NyaXB0aW9uKSwgYnRuID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1idG5cIilcbiAgICB9LCBidG4pIDogbnVsbCkpLFxuICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICBjbG9zYWJsZTogdHJ1ZSxcbiAgICBjbG9zZUljb246IGNsb3NlSWNvblRvUmVuZGVyLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBrZXk6IGtleSxcbiAgICBzdHlsZTogc3R5bGUgfHwge30sXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQodHlwZSksICEhdHlwZSkpLFxuICAgIHByb3BzOiBwcm9wc1xuICB9O1xufVxuZnVuY3Rpb24gbm90aWNlKGFyZ3MpIHtcbiAgZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2UoYXJncywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICBpY29uUHJlZml4Q2xzID0gX3JlZi5pY29uUHJlZml4Q2xzLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlO1xuICAgIGluc3RhbmNlLm5vdGljZShnZXRSQ05vdGljZVByb3BzKGFyZ3MsIHByZWZpeENscywgaWNvblByZWZpeENscykpO1xuICB9KTtcbn1cbnZhciBhcGkgPSB7XG4gIG9wZW46IG5vdGljZSxcbiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKGtleSkge1xuICAgIE9iamVjdC5rZXlzKG5vdGlmaWNhdGlvbkluc3RhbmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZUtleSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV0pLnRoZW4oZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIGluc3RhbmNlLnJlbW92ZU5vdGljZShrZXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIGNvbmZpZzogc2V0Tm90aWZpY2F0aW9uQ29uZmlnLFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIE9iamVjdC5rZXlzKG5vdGlmaWNhdGlvbkluc3RhbmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZUtleSkge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgfSk7XG4gICAgICBkZWxldGUgbm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldOyAvLyBsZ3RtW2pzL21pc3NpbmctYXdhaXRdXG4gICAgfSk7XG4gIH1cbn07XG5cblsnc3VjY2VzcycsICdpbmZvJywgJ3dhcm5pbmcnLCAnZXJyb3InXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIGFwaVt0eXBlXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuIGFwaS5vcGVuKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgdHlwZTogdHlwZVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuYXBpLndhcm4gPSBhcGkud2FybmluZztcbmFwaS51c2VOb3RpZmljYXRpb24gPSBjcmVhdGVVc2VOb3RpZmljYXRpb24oZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpO1xuLyoqIEBpbnRlcm5hbCB0ZXN0IE9ubHkgZnVuY3Rpb24uIE5vdCB3b3JrIG9uIHByb2R1Y3Rpb24gKi9cbmV4cG9ydCB2YXIgZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRJbnN0YW5jZShjYWNoZUtleSkge1xuICByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSA6IG51bGwpO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sIF9jYWxsZWUpO1xuICB9KSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgYXBpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgdXNlUkNOb3RpZmljYXRpb24gZnJvbSBcInJjLW5vdGlmaWNhdGlvbi9lcy91c2VOb3RpZmljYXRpb25cIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnN1bWVyIH0gZnJvbSAnLi4vLi4vY29uZmlnLXByb3ZpZGVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVVzZU5vdGlmaWNhdGlvbihnZXROb3RpZmljYXRpb25JbnN0YW5jZSwgZ2V0UkNOb3RpY2VQcm9wcykge1xuICB2YXIgdXNlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gdXNlTm90aWZpY2F0aW9uKCkge1xuICAgIC8vIFdlIGNhbiBvbmx5IGdldCBjb250ZW50IGJ5IHJlbmRlclxuICAgIHZhciBnZXRQcmVmaXhDbHM7XG4gICAgLy8gV2UgY3JlYXRlIGEgcHJveHkgdG8gaGFuZGxlIGRlbGF5IGNyZWF0ZWQgaW5zdGFuY2VcbiAgICB2YXIgaW5uZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgdmFyIHByb3h5ID0ge1xuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQobm90aWNlUHJvcHMsIGhvbGRlckNhbGxiYWNrKSB7XG4gICAgICAgIGlubmVySW5zdGFuY2UgPT09IG51bGwgfHwgaW5uZXJJbnN0YW5jZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJJbnN0YW5jZS5jb21wb25lbnQuYWRkKG5vdGljZVByb3BzLCBob2xkZXJDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgX3VzZVJDTm90aWZpY2F0aW9uID0gdXNlUkNOb3RpZmljYXRpb24ocHJveHkpLFxuICAgICAgX3VzZVJDTm90aWZpY2F0aW9uMiA9IF9zbGljZWRUb0FycmF5KF91c2VSQ05vdGlmaWNhdGlvbiwgMiksXG4gICAgICBob29rTm90aWZ5ID0gX3VzZVJDTm90aWZpY2F0aW9uMlswXSxcbiAgICAgIGhvbGRlciA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMV07XG4gICAgZnVuY3Rpb24gbm90aWZ5KGFyZ3MpIHtcbiAgICAgIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBhcmdzLnByZWZpeENscztcbiAgICAgIHZhciBtZXJnZWRQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ25vdGlmaWNhdGlvbicsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICBnZXROb3RpZmljYXRpb25JbnN0YW5jZShfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgcHJlZml4Q2xzOiBtZXJnZWRQcmVmaXhDbHNcbiAgICAgIH0pLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlO1xuICAgICAgICBpbm5lckluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIGhvb2tOb3RpZnkoZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBGaWxsIGZ1bmN0aW9uc1xuICAgIHZhciBob29rQXBpUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgICBob29rQXBpUmVmLmN1cnJlbnQub3BlbiA9IG5vdGlmeTtcbiAgICBbJ3N1Y2Nlc3MnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgaG9va0FwaVJlZi5jdXJyZW50W3R5cGVdID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tBcGlSZWYuY3VycmVudC5vcGVuKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hvb2tBcGlSZWYuY3VycmVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIHtcbiAgICAgIGtleTogXCJob2xkZXJcIlxuICAgIH0sIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBnZXRQcmVmaXhDbHMgPSBjb250ZXh0LmdldFByZWZpeENscztcbiAgICAgIHJldHVybiBob2xkZXI7XG4gICAgfSldO1xuICB9O1xuICByZXR1cm4gdXNlTm90aWZpY2F0aW9uO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQsIHByZWZlci1kZXN0cnVjdHVyaW5nICovXG5pbXBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gJ0BhbnQtZGVzaWduL2NvbG9ycyc7XG5pbXBvcnQgeyBUaW55Q29sb3IgfSBmcm9tICdAY3RybC90aW55Y29sb3InO1xuaW1wb3J0IGNhblVzZURvbSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tXCI7XG5pbXBvcnQgeyB1cGRhdGVDU1MgfSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZHluYW1pY0NTU1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vX3V0aWwvd2FybmluZyc7XG52YXIgZHluYW1pY1N0eWxlTWFyayA9IFwiLWFudC1cIi5jb25jYXQoRGF0ZS5ub3coKSwgXCItXCIpLmNvbmNhdChNYXRoLnJhbmRvbSgpKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZShnbG9iYWxQcmVmaXhDbHMsIHRoZW1lKSB7XG4gIHZhciB2YXJpYWJsZXMgPSB7fTtcbiAgdmFyIGZvcm1hdENvbG9yID0gZnVuY3Rpb24gZm9ybWF0Q29sb3IoY29sb3IsIHVwZGF0ZXIpIHtcbiAgICB2YXIgY2xvbmUgPSBjb2xvci5jbG9uZSgpO1xuICAgIGNsb25lID0gKHVwZGF0ZXIgPT09IG51bGwgfHwgdXBkYXRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXBkYXRlcihjbG9uZSkpIHx8IGNsb25lO1xuICAgIHJldHVybiBjbG9uZS50b1JnYlN0cmluZygpO1xuICB9O1xuICB2YXIgZmlsbENvbG9yID0gZnVuY3Rpb24gZmlsbENvbG9yKGNvbG9yVmFsLCB0eXBlKSB7XG4gICAgdmFyIGJhc2VDb2xvciA9IG5ldyBUaW55Q29sb3IoY29sb3JWYWwpO1xuICAgIHZhciBjb2xvclBhbGV0dGVzID0gZ2VuZXJhdGUoYmFzZUNvbG9yLnRvUmdiU3RyaW5nKCkpO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvclwiKV0gPSBmb3JtYXRDb2xvcihiYXNlQ29sb3IpO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1kaXNhYmxlZFwiKV0gPSBjb2xvclBhbGV0dGVzWzFdO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1ob3ZlclwiKV0gPSBjb2xvclBhbGV0dGVzWzRdO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1hY3RpdmVcIildID0gY29sb3JQYWxldHRlc1s2XTtcbiAgICB2YXJpYWJsZXNbXCJcIi5jb25jYXQodHlwZSwgXCItY29sb3Itb3V0bGluZVwiKV0gPSBiYXNlQ29sb3IuY2xvbmUoKS5zZXRBbHBoYSgwLjIpLnRvUmdiU3RyaW5nKCk7XG4gICAgdmFyaWFibGVzW1wiXCIuY29uY2F0KHR5cGUsIFwiLWNvbG9yLWRlcHJlY2F0ZWQtYmdcIildID0gY29sb3JQYWxldHRlc1swXTtcbiAgICB2YXJpYWJsZXNbXCJcIi5jb25jYXQodHlwZSwgXCItY29sb3ItZGVwcmVjYXRlZC1ib3JkZXJcIildID0gY29sb3JQYWxldHRlc1syXTtcbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09PSBQcmltYXJ5IENvbG9yID09PT09PT09PT09PT09PT1cbiAgaWYgKHRoZW1lLnByaW1hcnlDb2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS5wcmltYXJ5Q29sb3IsICdwcmltYXJ5Jyk7XG4gICAgdmFyIHByaW1hcnlDb2xvciA9IG5ldyBUaW55Q29sb3IodGhlbWUucHJpbWFyeUNvbG9yKTtcbiAgICB2YXIgcHJpbWFyeUNvbG9ycyA9IGdlbmVyYXRlKHByaW1hcnlDb2xvci50b1JnYlN0cmluZygpKTtcbiAgICAvLyBMZWdhY3kgLSBXZSBzaG91bGQgdXNlIHNlbWFudGljIG5hbWluZyBzdGFuZGFyZFxuICAgIHByaW1hcnlDb2xvcnMuZm9yRWFjaChmdW5jdGlvbiAoY29sb3IsIGluZGV4KSB7XG4gICAgICB2YXJpYWJsZXNbXCJwcmltYXJ5LVwiLmNvbmNhdChpbmRleCArIDEpXSA9IGNvbG9yO1xuICAgIH0pO1xuICAgIC8vIERlcHJlY2F0ZWRcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1sLTM1J10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5saWdodGVuKDM1KTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1sLTIwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5saWdodGVuKDIwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC10LTIwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy50aW50KDIwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC10LTUwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy50aW50KDUwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1mLTEyJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5zZXRBbHBoYShjLmdldEFscGhhKCkgKiAwLjEyKTtcbiAgICB9KTtcbiAgICB2YXIgcHJpbWFyeUFjdGl2ZUNvbG9yID0gbmV3IFRpbnlDb2xvcihwcmltYXJ5Q29sb3JzWzBdKTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItYWN0aXZlLWRlcHJlY2F0ZWQtZi0zMCddID0gZm9ybWF0Q29sb3IocHJpbWFyeUFjdGl2ZUNvbG9yLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuc2V0QWxwaGEoYy5nZXRBbHBoYSgpICogMC4zKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItYWN0aXZlLWRlcHJlY2F0ZWQtZC0wMiddID0gZm9ybWF0Q29sb3IocHJpbWFyeUFjdGl2ZUNvbG9yLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuZGFya2VuKDIpO1xuICAgIH0pO1xuICB9XG4gIC8vID09PT09PT09PT09PT09PT0gU3VjY2VzcyBDb2xvciA9PT09PT09PT09PT09PT09XG4gIGlmICh0aGVtZS5zdWNjZXNzQ29sb3IpIHtcbiAgICBmaWxsQ29sb3IodGhlbWUuc3VjY2Vzc0NvbG9yLCAnc3VjY2VzcycpO1xuICB9XG4gIC8vID09PT09PT09PT09PT09PT0gV2FybmluZyBDb2xvciA9PT09PT09PT09PT09PT09XG4gIGlmICh0aGVtZS53YXJuaW5nQ29sb3IpIHtcbiAgICBmaWxsQ29sb3IodGhlbWUud2FybmluZ0NvbG9yLCAnd2FybmluZycpO1xuICB9XG4gIC8vID09PT09PT09PT09PT09PT09IEVycm9yIENvbG9yID09PT09PT09PT09PT09PT09XG4gIGlmICh0aGVtZS5lcnJvckNvbG9yKSB7XG4gICAgZmlsbENvbG9yKHRoZW1lLmVycm9yQ29sb3IsICdlcnJvcicpO1xuICB9XG4gIC8vID09PT09PT09PT09PT09PT09IEluZm8gQ29sb3IgPT09PT09PT09PT09PT09PT09XG4gIGlmICh0aGVtZS5pbmZvQ29sb3IpIHtcbiAgICBmaWxsQ29sb3IodGhlbWUuaW5mb0NvbG9yLCAnaW5mbycpO1xuICB9XG4gIC8vIENvbnZlcnQgdG8gY3NzIHZhcmlhYmxlc1xuICB2YXIgY3NzTGlzdCA9IE9iamVjdC5rZXlzKHZhcmlhYmxlcykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gXCItLVwiLmNvbmNhdChnbG9iYWxQcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoa2V5LCBcIjogXCIpLmNvbmNhdCh2YXJpYWJsZXNba2V5XSwgXCI7XCIpO1xuICB9KTtcbiAgcmV0dXJuIFwiXFxuICA6cm9vdCB7XFxuICAgIFwiLmNvbmNhdChjc3NMaXN0LmpvaW4oJ1xcbicpLCBcIlxcbiAgfVxcbiAgXCIpLnRyaW0oKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclRoZW1lKGdsb2JhbFByZWZpeENscywgdGhlbWUpIHtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoZ2xvYmFsUHJlZml4Q2xzLCB0aGVtZSk7XG4gIGlmIChjYW5Vc2VEb20oKSkge1xuICAgIHVwZGF0ZUNTUyhzdHlsZSwgXCJcIi5jb25jYXQoZHluYW1pY1N0eWxlTWFyaywgXCItZHluYW1pYy10aGVtZVwiKSk7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0NvbmZpZ1Byb3ZpZGVyJywgJ1NTUiBkbyBub3Qgc3VwcG9ydCBkeW5hbWljIHRoZW1lIHdpdGggY3NzIHZhcmlhYmxlcy4nKSA6IHZvaWQgMDtcbiAgfVxufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IEljb25Db250ZXh0IGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9jb21wb25lbnRzL0NvbnRleHRcIjtcbmltcG9ydCB1c2VNZW1vIGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZU1lbW9cIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcInJjLXV0aWwvZXMvdXRpbHMvc2V0XCI7XG5pbXBvcnQgVmFsaWRhdGVNZXNzYWdlc0NvbnRleHQgZnJvbSAnLi4vZm9ybS92YWxpZGF0ZU1lc3NhZ2VzQ29udGV4dCc7XG5pbXBvcnQgTG9jYWxlUHJvdmlkZXIsIHsgQU5UX01BUksgfSBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXInO1xuaW1wb3J0IExvY2FsZVJlY2VpdmVyIGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlcic7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tICcuLi9sb2NhbGUvZGVmYXVsdCc7XG5pbXBvcnQgbWVzc2FnZSBmcm9tICcuLi9tZXNzYWdlJztcbmltcG9ydCBub3RpZmljYXRpb24gZnJvbSAnLi4vbm90aWZpY2F0aW9uJztcbmltcG9ydCB7IENvbmZpZ0NvbnN1bWVyLCBDb25maWdDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCB7IHJlZ2lzdGVyVGhlbWUgfSBmcm9tICcuL2Nzc1ZhcmlhYmxlcyc7XG5pbXBvcnQgeyBEaXNhYmxlZENvbnRleHRQcm92aWRlciB9IGZyb20gJy4vRGlzYWJsZWRDb250ZXh0JztcbmltcG9ydCBTaXplQ29udGV4dCwgeyBTaXplQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi9TaXplQ29udGV4dCc7XG5leHBvcnQgeyBDb25maWdDb250ZXh0LCBDb25maWdDb25zdW1lciB9O1xuZXhwb3J0IHZhciBjb25maWdDb25zdW1lclByb3BzID0gWydnZXRUYXJnZXRDb250YWluZXInLCAnZ2V0UG9wdXBDb250YWluZXInLCAncm9vdFByZWZpeENscycsICdnZXRQcmVmaXhDbHMnLCAncmVuZGVyRW1wdHknLCAnY3NwJywgJ2F1dG9JbnNlcnRTcGFjZUluQnV0dG9uJywgJ2xvY2FsZScsICdwYWdlSGVhZGVyJ107XG4vLyBUaGVzZSBwcm9wcyBpcyB1c2VkIGJ5IGB1c2VDb250ZXh0YCBkaXJlY3RseSBpbiBzdWIgY29tcG9uZW50XG52YXIgUEFTU0VEX1BST1BTID0gWydnZXRUYXJnZXRDb250YWluZXInLCAnZ2V0UG9wdXBDb250YWluZXInLCAncmVuZGVyRW1wdHknLCAncGFnZUhlYWRlcicsICdpbnB1dCcsICdwYWdpbmF0aW9uJywgJ2Zvcm0nXTtcbmV4cG9ydCB2YXIgZGVmYXVsdFByZWZpeENscyA9ICdhbnQnO1xuZXhwb3J0IHZhciBkZWZhdWx0SWNvblByZWZpeENscyA9ICdhbnRpY29uJztcbnZhciBnbG9iYWxQcmVmaXhDbHM7XG52YXIgZ2xvYmFsSWNvblByZWZpeENscztcbmZ1bmN0aW9uIGdldEdsb2JhbFByZWZpeENscygpIHtcbiAgcmV0dXJuIGdsb2JhbFByZWZpeENscyB8fCBkZWZhdWx0UHJlZml4Q2xzO1xufVxuZnVuY3Rpb24gZ2V0R2xvYmFsSWNvblByZWZpeENscygpIHtcbiAgcmV0dXJuIGdsb2JhbEljb25QcmVmaXhDbHMgfHwgZGVmYXVsdEljb25QcmVmaXhDbHM7XG59XG52YXIgc2V0R2xvYmFsQ29uZmlnID0gZnVuY3Rpb24gc2V0R2xvYmFsQ29uZmlnKF9yZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgIGljb25QcmVmaXhDbHMgPSBfcmVmLmljb25QcmVmaXhDbHMsXG4gICAgdGhlbWUgPSBfcmVmLnRoZW1lO1xuICBpZiAocHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBnbG9iYWxQcmVmaXhDbHMgPSBwcmVmaXhDbHM7XG4gIH1cbiAgaWYgKGljb25QcmVmaXhDbHMgIT09IHVuZGVmaW5lZCkge1xuICAgIGdsb2JhbEljb25QcmVmaXhDbHMgPSBpY29uUHJlZml4Q2xzO1xuICB9XG4gIGlmICh0aGVtZSkge1xuICAgIHJlZ2lzdGVyVGhlbWUoZ2V0R2xvYmFsUHJlZml4Q2xzKCksIHRoZW1lKTtcbiAgfVxufTtcbmV4cG9ydCB2YXIgZ2xvYmFsQ29uZmlnID0gZnVuY3Rpb24gZ2xvYmFsQ29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGdldFByZWZpeENsczogZnVuY3Rpb24gZ2V0UHJlZml4Q2xzKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gICAgICBpZiAoY3VzdG9taXplUHJlZml4Q2xzKSByZXR1cm4gY3VzdG9taXplUHJlZml4Q2xzO1xuICAgICAgcmV0dXJuIHN1ZmZpeENscyA/IFwiXCIuY29uY2F0KGdldEdsb2JhbFByZWZpeENscygpLCBcIi1cIikuY29uY2F0KHN1ZmZpeENscykgOiBnZXRHbG9iYWxQcmVmaXhDbHMoKTtcbiAgICB9LFxuICAgIGdldEljb25QcmVmaXhDbHM6IGdldEdsb2JhbEljb25QcmVmaXhDbHMsXG4gICAgZ2V0Um9vdFByZWZpeENsczogZnVuY3Rpb24gZ2V0Um9vdFByZWZpeENscyhyb290UHJlZml4Q2xzLCBjdXN0b21pemVQcmVmaXhDbHMpIHtcbiAgICAgIC8vIEN1c3RvbWl6ZSByb290UHJlZml4Q2xzIGlzIGZpcnN0IHByaW9yaXR5XG4gICAgICBpZiAocm9vdFByZWZpeENscykge1xuICAgICAgICByZXR1cm4gcm9vdFByZWZpeENscztcbiAgICAgIH1cbiAgICAgIC8vIElmIEdsb2JhbCBwcmVmaXhDbHMgcHJvdmlkZWQsIHVzZSB0aGlzXG4gICAgICBpZiAoZ2xvYmFsUHJlZml4Q2xzKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxQcmVmaXhDbHM7XG4gICAgICB9XG4gICAgICAvLyBbTGVnYWN5XSBJZiBjdXN0b21pemUgcHJlZml4Q2xzIHByb3ZpZGVkLCB3ZSBjdXQgaXQgdG8gZ2V0IHRoZSBwcmVmaXhDbHNcbiAgICAgIGlmIChjdXN0b21pemVQcmVmaXhDbHMgJiYgY3VzdG9taXplUHJlZml4Q2xzLmluY2x1ZGVzKCctJykpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbWl6ZVByZWZpeENscy5yZXBsYWNlKC9eKC4qKS1bXi1dKiQvLCAnJDEnKTtcbiAgICAgIH1cbiAgICAgIC8vIEZhbGxiYWNrIHRvIGRlZmF1bHQgcHJlZml4Q2xzXG4gICAgICByZXR1cm4gZ2V0R2xvYmFsUHJlZml4Q2xzKCk7XG4gICAgfVxuICB9O1xufTtcbnZhciBQcm92aWRlckNoaWxkcmVuID0gZnVuY3Rpb24gUHJvdmlkZXJDaGlsZHJlbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBjc3AgPSBwcm9wcy5jc3AsXG4gICAgYXV0b0luc2VydFNwYWNlSW5CdXR0b24gPSBwcm9wcy5hdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbixcbiAgICBmb3JtID0gcHJvcHMuZm9ybSxcbiAgICBsb2NhbGUgPSBwcm9wcy5sb2NhbGUsXG4gICAgY29tcG9uZW50U2l6ZSA9IHByb3BzLmNvbXBvbmVudFNpemUsXG4gICAgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgIHNwYWNlID0gcHJvcHMuc3BhY2UsXG4gICAgdmlydHVhbCA9IHByb3BzLnZpcnR1YWwsXG4gICAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoID0gcHJvcHMuZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoLFxuICAgIGxlZ2FjeUxvY2FsZSA9IHByb3BzLmxlZ2FjeUxvY2FsZSxcbiAgICBwYXJlbnRDb250ZXh0ID0gcHJvcHMucGFyZW50Q29udGV4dCxcbiAgICBpY29uUHJlZml4Q2xzID0gcHJvcHMuaWNvblByZWZpeENscyxcbiAgICBjb21wb25lbnREaXNhYmxlZCA9IHByb3BzLmNvbXBvbmVudERpc2FibGVkO1xuICB2YXIgZ2V0UHJlZml4Q2xzID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gICAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscztcbiAgICBpZiAoY3VzdG9taXplUHJlZml4Q2xzKSByZXR1cm4gY3VzdG9taXplUHJlZml4Q2xzO1xuICAgIHZhciBtZXJnZWRQcmVmaXhDbHMgPSBwcmVmaXhDbHMgfHwgcGFyZW50Q29udGV4dC5nZXRQcmVmaXhDbHMoJycpO1xuICAgIHJldHVybiBzdWZmaXhDbHMgPyBcIlwiLmNvbmNhdChtZXJnZWRQcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc3VmZml4Q2xzKSA6IG1lcmdlZFByZWZpeENscztcbiAgfSwgW3BhcmVudENvbnRleHQuZ2V0UHJlZml4Q2xzLCBwcm9wcy5wcmVmaXhDbHNdKTtcbiAgdmFyIGNvbmZpZyA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBwYXJlbnRDb250ZXh0KSwge1xuICAgIGNzcDogY3NwLFxuICAgIGF1dG9JbnNlcnRTcGFjZUluQnV0dG9uOiBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbixcbiAgICBsb2NhbGU6IGxvY2FsZSB8fCBsZWdhY3lMb2NhbGUsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgc3BhY2U6IHNwYWNlLFxuICAgIHZpcnR1YWw6IHZpcnR1YWwsXG4gICAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgsXG4gICAgZ2V0UHJlZml4Q2xzOiBnZXRQcmVmaXhDbHNcbiAgfSk7XG4gIC8vIFBhc3MgdGhlIHByb3BzIHVzZWQgYnkgYHVzZUNvbnRleHRgIGRpcmVjdGx5IHdpdGggY2hpbGQgY29tcG9uZW50LlxuICAvLyBUaGVzZSBwcm9wcyBzaG91bGQgbWVyZ2VkIGludG8gYGNvbmZpZ2AuXG4gIFBBU1NFRF9QUk9QUy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgaWYgKHByb3BWYWx1ZSkge1xuICAgICAgY29uZmlnW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8yNzYxN1xuICB2YXIgbWVtb2VkQ29uZmlnID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSwgY29uZmlnLCBmdW5jdGlvbiAocHJldkNvbmZpZywgY3VycmVudENvbmZpZykge1xuICAgIHZhciBwcmV2S2V5cyA9IE9iamVjdC5rZXlzKHByZXZDb25maWcpO1xuICAgIHZhciBjdXJyZW50S2V5cyA9IE9iamVjdC5rZXlzKGN1cnJlbnRDb25maWcpO1xuICAgIHJldHVybiBwcmV2S2V5cy5sZW5ndGggIT09IGN1cnJlbnRLZXlzLmxlbmd0aCB8fCBwcmV2S2V5cy5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBwcmV2Q29uZmlnW2tleV0gIT09IGN1cnJlbnRDb25maWdba2V5XTtcbiAgICB9KTtcbiAgfSk7XG4gIHZhciBtZW1vSWNvbkNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVmaXhDbHM6IGljb25QcmVmaXhDbHMsXG4gICAgICBjc3A6IGNzcFxuICAgIH07XG4gIH0sIFtpY29uUHJlZml4Q2xzLCBjc3BdKTtcbiAgdmFyIGNoaWxkTm9kZSA9IGNoaWxkcmVuO1xuICB2YXIgdmFsaWRhdGVNZXNzYWdlcyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICByZXR1cm4gbWVyZ2UoKChfYSA9IGRlZmF1bHRMb2NhbGUuRm9ybSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fSwgKChfYyA9IChfYiA9IG1lbW9lZENvbmZpZy5sb2NhbGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5Gb3JtKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMpIHx8IHt9LCAoKF9kID0gbWVtb2VkQ29uZmlnLmZvcm0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC52YWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fSwgKGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybS52YWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fSk7XG4gIH0sIFttZW1vZWRDb25maWcsIGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybS52YWxpZGF0ZU1lc3NhZ2VzXSk7XG4gIGlmIChPYmplY3Qua2V5cyh2YWxpZGF0ZU1lc3NhZ2VzKS5sZW5ndGggPiAwKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVmFsaWRhdGVNZXNzYWdlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB2YWxpZGF0ZU1lc3NhZ2VzXG4gICAgfSwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChsb2NhbGUpIHtcbiAgICBjaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhbGVQcm92aWRlciwge1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBfQU5UX01BUktfXzogQU5UX01BUktcbiAgICB9LCBjaGlsZE5vZGUpO1xuICB9XG4gIGlmIChpY29uUHJlZml4Q2xzIHx8IGNzcCkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogbWVtb0ljb25Db250ZXh0VmFsdWVcbiAgICB9LCBjaGlsZE5vZGUpO1xuICB9XG4gIGlmIChjb21wb25lbnRTaXplKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2l6ZUNvbnRleHRQcm92aWRlciwge1xuICAgICAgc2l6ZTogY29tcG9uZW50U2l6ZVxuICAgIH0sIGNoaWxkTm9kZSk7XG4gIH1cbiAgaWYgKGNvbXBvbmVudERpc2FibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEaXNhYmxlZENvbnRleHRQcm92aWRlciwge1xuICAgICAgZGlzYWJsZWQ6IGNvbXBvbmVudERpc2FibGVkXG4gICAgfSwgY2hpbGROb2RlKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBtZW1vZWRDb25maWdcbiAgfSwgY2hpbGROb2RlKTtcbn07XG52YXIgQ29uZmlnUHJvdmlkZXIgPSBmdW5jdGlvbiBDb25maWdQcm92aWRlcihwcm9wcykge1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9wcy5kaXJlY3Rpb24pIHtcbiAgICAgIG1lc3NhZ2UuY29uZmlnKHtcbiAgICAgICAgcnRsOiBwcm9wcy5kaXJlY3Rpb24gPT09ICdydGwnXG4gICAgICB9KTtcbiAgICAgIG5vdGlmaWNhdGlvbi5jb25maWcoe1xuICAgICAgICBydGw6IHByb3BzLmRpcmVjdGlvbiA9PT0gJ3J0bCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLmRpcmVjdGlvbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYWxlUmVjZWl2ZXIsIG51bGwsIGZ1bmN0aW9uIChfLCBfXywgbGVnYWN5TG9jYWxlKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyQ2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgcGFyZW50Q29udGV4dDogY29udGV4dCxcbiAgICAgICAgbGVnYWN5TG9jYWxlOiBsZWdhY3lMb2NhbGVcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH0pO1xufTtcbi8qKiBAcHJpdmF0ZSBpbnRlcm5hbCBVc2FnZS4gZG8gbm90IHVzZSBpbiB5b3VyIHByb2R1Y3Rpb24gKi9cbkNvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnRleHQgPSBDb25maWdDb250ZXh0O1xuQ29uZmlnUHJvdmlkZXIuU2l6ZUNvbnRleHQgPSBTaXplQ29udGV4dDtcbkNvbmZpZ1Byb3ZpZGVyLmNvbmZpZyA9IHNldEdsb2JhbENvbmZpZztcbmV4cG9ydCBkZWZhdWx0IENvbmZpZ1Byb3ZpZGVyOyIsImltcG9ydCBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHRvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5pbXBvcnQgeyBpc01lbW8gfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgdXNlTWVtbyBmcm9tIFwiLi9ob29rcy91c2VNZW1vXCI7XG5leHBvcnQgZnVuY3Rpb24gZmlsbFJlZihyZWYsIG5vZGUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYobm9kZSk7XG4gIH0gZWxzZSBpZiAoX3R5cGVvZihyZWYpID09PSAnb2JqZWN0JyAmJiByZWYgJiYgJ2N1cnJlbnQnIGluIHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gbm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHJlZnMgaW50byBvbmUgcmVmIGZ1bmN0aW9uIHRvIHN1cHBvcnQgcmVmIHBhc3NpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlUmVmKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVmcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICByZWZzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHZhciByZWZMaXN0ID0gcmVmcy5maWx0ZXIoZnVuY3Rpb24gKHJlZikge1xuICAgIHJldHVybiByZWY7XG4gIH0pO1xuICBpZiAocmVmTGlzdC5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiByZWZMaXN0WzBdO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJlZnMuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICBmaWxsUmVmKHJlZiwgbm9kZSk7XG4gICAgfSk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlQ29tcG9zZVJlZigpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCByZWZzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgcmVmc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG4gIHJldHVybiB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29tcG9zZVJlZi5hcHBseSh2b2lkIDAsIHJlZnMpO1xuICB9LCByZWZzLCBmdW5jdGlvbiAocHJldiwgbmV4dCkge1xuICAgIHJldHVybiBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGggfHwgcHJldi5ldmVyeShmdW5jdGlvbiAocmVmLCBpKSB7XG4gICAgICByZXR1cm4gcmVmICE9PSBuZXh0W2ldO1xuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0UmVmKG5vZGVPckNvbXBvbmVudCkge1xuICB2YXIgX3R5cGUkcHJvdG90eXBlLCBfbm9kZU9yQ29tcG9uZW50JHByb3Q7XG4gIHZhciB0eXBlID0gaXNNZW1vKG5vZGVPckNvbXBvbmVudCkgPyBub2RlT3JDb21wb25lbnQudHlwZS50eXBlIDogbm9kZU9yQ29tcG9uZW50LnR5cGU7XG5cbiAgLy8gRnVuY3Rpb24gY29tcG9uZW50IG5vZGVcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmICEoKF90eXBlJHByb3RvdHlwZSA9IHR5cGUucHJvdG90eXBlKSAhPT0gbnVsbCAmJiBfdHlwZSRwcm90b3R5cGUgIT09IHZvaWQgMCAmJiBfdHlwZSRwcm90b3R5cGUucmVuZGVyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENsYXNzIGNvbXBvbmVudFxuICBpZiAodHlwZW9mIG5vZGVPckNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhKChfbm9kZU9yQ29tcG9uZW50JHByb3QgPSBub2RlT3JDb21wb25lbnQucHJvdG90eXBlKSAhPT0gbnVsbCAmJiBfbm9kZU9yQ29tcG9uZW50JHByb3QgIT09IHZvaWQgMCAmJiBfbm9kZU9yQ29tcG9uZW50JHByb3QucmVuZGVyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qIGVzbGludC1lbmFibGUgKi8iLCIndXNlIHN0cmljdCc7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhc093bihTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiIC8vICdnbG9iYWwgcHJvcGVyJ1xuPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbmdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IC8vIEJyb3dzZXJcbjogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCAvLyBub2RlLmpzXG46IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9IFwiX19nbG9iYWxfdW5pcXVlX2lkX19cIjtcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59IC8vIElubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG5cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gXCJfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LVwiICsgZ2V0VW5pcXVlSWQoKSArIFwiX19cIjtcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDsgLy8gTm8gY2hhbmdlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCBcImNhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgXCIgKyBcIjMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiBcIiArIGNoYW5nZWRCaXRzKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX1JlYWN0JENvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIgPSBfUmVhY3QkQ29tcG9uZW50Mi5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLm9ic2VydmVkQml0cyA9IHZvaWQgMDtcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG4vLyBNSVQgTGljZW5zZVxudmFyIGNyZWF0ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxudmFyIGNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy51bmxpc3Rlbikge1xuICAgICAgLy8gQW55IHByZS1tb3VudCBsb2NhdGlvbiBjaGFuZ2VzIGhhdmUgYmVlbiBjYXB0dXJlZCBhdFxuICAgICAgLy8gdGhpcyBwb2ludCwgc28gdW5yZWdpc3RlciB0aGUgbGlzdGVuZXIuXG4gICAgICB0aGlzLnVubGlzdGVuKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIHRoaXMudW5saXN0ZW4gPSB0aGlzLnByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMyLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwkMSA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbCQxW2tleV0gJiYgZ2xvYmFsJDFba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbCQxW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbCQxW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWhhc293biAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IFR5cGUoYXJndW1lbnQpIGlzIE9iamVjdGBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc09iamVjdChhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcigkU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsInZhciByYWYgPSBmdW5jdGlvbiByYWYoY2FsbGJhY2spIHtcbiAgcmV0dXJuICtzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNik7XG59O1xudmFyIGNhZiA9IGZ1bmN0aW9uIGNhZihudW0pIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChudW0pO1xufTtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAncmVxdWVzdEFuaW1hdGlvbkZyYW1lJyBpbiB3aW5kb3cpIHtcbiAgcmFmID0gZnVuY3Rpb24gcmFmKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICB9O1xuICBjYWYgPSBmdW5jdGlvbiBjYWYoaGFuZGxlKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUpO1xuICB9O1xufVxudmFyIHJhZlVVSUQgPSAwO1xudmFyIHJhZklkcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGNsZWFudXAoaWQpIHtcbiAgcmFmSWRzLmRlbGV0ZShpZCk7XG59XG52YXIgd3JhcHBlclJhZiA9IGZ1bmN0aW9uIHdyYXBwZXJSYWYoY2FsbGJhY2spIHtcbiAgdmFyIHRpbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICByYWZVVUlEICs9IDE7XG4gIHZhciBpZCA9IHJhZlVVSUQ7XG4gIGZ1bmN0aW9uIGNhbGxSZWYobGVmdFRpbWVzKSB7XG4gICAgaWYgKGxlZnRUaW1lcyA9PT0gMCkge1xuICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgIGNsZWFudXAoaWQpO1xuXG4gICAgICAvLyBUcmlnZ2VyXG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZXh0IHJhZlxuICAgICAgdmFyIHJlYWxJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxSZWYobGVmdFRpbWVzIC0gMSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQmluZCByZWFsIHJhZiBpZFxuICAgICAgcmFmSWRzLnNldChpZCwgcmVhbElkKTtcbiAgICB9XG4gIH1cbiAgY2FsbFJlZih0aW1lcyk7XG4gIHJldHVybiBpZDtcbn07XG53cmFwcGVyUmFmLmNhbmNlbCA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgcmVhbElkID0gcmFmSWRzLmdldChpZCk7XG4gIGNsZWFudXAocmVhbElkKTtcbiAgcmV0dXJuIGNhZihyZWFsSWQpO1xufTtcbmV4cG9ydCBkZWZhdWx0IHdyYXBwZXJSYWY7IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59IiwiaW1wb3J0IGdldFByb3RvdHlwZU9mIGZyb20gXCIuL2dldFByb3RvdHlwZU9mLmpzXCI7XG5pbXBvcnQgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IGZyb20gXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiO1xuaW1wb3J0IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIi4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHtcbiAgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgIHZhciBTdXBlciA9IGdldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgcmVzdWx0O1xuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7XG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0iLCIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMjkuNFxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCAhPSBudWxsICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGFyckxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VuczogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdzogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0OiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRFcmE6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGg6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBpc286IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzOiBbXSxcbiAgICAgICAgICAgIGVyYTogbnVsbCxcbiAgICAgICAgICAgIG1lcmlkaWVtOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMjogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2g6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyksXG4gICAgICAgICAgICAgICAgbGVuID0gdC5sZW5ndGggPj4+IDAsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pLFxuICAgICAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICAgICAgIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRXJhICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICAgICAgaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gKGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXSksXG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgbW9tZW50UHJvcGVydGllc0xlbiA9IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllc0xlbiA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50KG9iaikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uc29sZS53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgYXJnLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIGFyZ0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGFyZ3VtZW50c1swXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgICAgIG1zZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuQXJndW1lbnRzOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0KGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY29uZmlnLCBpKSkge1xuICAgICAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAgIC9cXGR7MSwyfS8uc291cmNlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSxcbiAgICAgICAgICAgIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhcihrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgK1xuICAgICAgICAgICAgYWJzTnVtYmVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPVxuICAgICAgICAgICAgLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xOezEsNX18WVlZWVlZfFlZWVlZfFlZWVl8WVl8eXsyLDR9fHlvP3xnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZyxcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZyxcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zID0ge30sXG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4odG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKFxuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pXG4gICAgICAgICAgICAgICAgICAgID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPVxuICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyxcbiAgICAgICAgICAgICAgICByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXJcbiAgICAgICAgICAgIC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdNTU1NJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdNTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnREQnIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ2RkZGQnXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2suc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0b2s7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJycpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJyxcbiAgICAgICAgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG4gICAgZnVuY3Rpb24gb3JkaW5hbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgIHc6ICdhIHdlZWsnLFxuICAgICAgICB3dzogJyVkIHdlZWtzJyxcbiAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dClcbiAgICAgICAgICAgID8gb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSlcbiAgICAgICAgICAgIDogb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZShkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRBbGlhcyh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdLFxuICAgICAgICAgICAgdTtcbiAgICAgICAgZm9yICh1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcCh1bml0c09iaiwgdSkpIHtcbiAgICAgICAgICAgICAgICB1bml0cy5wdXNoKHsgdW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldChtb20sIHVuaXQpIHtcbiAgICAgICAgcmV0dXJuIG1vbS5pc1ZhbGlkKClcbiAgICAgICAgICAgID8gbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKClcbiAgICAgICAgICAgIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG1vbS5pc1ZhbGlkKCkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHVuaXQgPT09ICdGdWxsWWVhcicgJiZcbiAgICAgICAgICAgICAgICBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmXG4gICAgICAgICAgICAgICAgbW9tLm1vbnRoKCkgPT09IDEgJiZcbiAgICAgICAgICAgICAgICBtb20uZGF0ZSgpID09PSAyOVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9tLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoKHZhbHVlLCBtb20ubW9udGgoKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0KHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBwcmlvcml0aXplZExlbiA9IHByaW9yaXRpemVkLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmlvcml0aXplZExlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSA9IC9cXGQvLCAvLyAgICAgICAwIC0gOVxuICAgICAgICBtYXRjaDIgPSAvXFxkXFxkLywgLy8gICAgICAwMCAtIDk5XG4gICAgICAgIG1hdGNoMyA9IC9cXGR7M30vLCAvLyAgICAgMDAwIC0gOTk5XG4gICAgICAgIG1hdGNoNCA9IC9cXGR7NH0vLCAvLyAgICAwMDAwIC0gOTk5OVxuICAgICAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMiA9IC9cXGRcXGQ/LywgLy8gICAgICAgMCAtIDk5XG4gICAgICAgIG1hdGNoM3RvNCA9IC9cXGRcXGRcXGRcXGQ/LywgLy8gICAgIDk5OSAtIDk5OTlcbiAgICAgICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vLCAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMyA9IC9cXGR7MSwzfS8sIC8vICAgICAgIDAgLSA5OTlcbiAgICAgICAgbWF0Y2gxdG80ID0gL1xcZHsxLDR9LywgLy8gICAgICAgMCAtIDk5OTlcbiAgICAgICAgbWF0Y2gxdG82ID0gL1srLV0/XFxkezEsNn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoVW5zaWduZWQgPSAvXFxkKy8sIC8vICAgICAgIDAgLSBpbmZcbiAgICAgICAgbWF0Y2hTaWduZWQgPSAvWystXT9cXGQrLywgLy8gICAgLWluZiAtIGluZlxuICAgICAgICBtYXRjaE9mZnNldCA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naSwgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vLCAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuICAgICAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAgICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgICAgICBtYXRjaFdvcmQgPVxuICAgICAgICAgICAgL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2ksXG4gICAgICAgIHJlZ2V4ZXM7XG5cbiAgICByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KVxuICAgICAgICAgICAgPyByZWdleFxuICAgICAgICAgICAgOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpc1N0cmljdCAmJiBzdHJpY3RSZWdleCA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShcbiAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnXFxcXCcsICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZnVuYyA9IGNhbGxiYWNrLFxuICAgICAgICAgICAgdG9rZW5MZW47XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDAsXG4gICAgICAgIE1PTlRIID0gMSxcbiAgICAgICAgREFURSA9IDIsXG4gICAgICAgIEhPVVIgPSAzLFxuICAgICAgICBNSU5VVEUgPSA0LFxuICAgICAgICBTRUNPTkQgPSA1LFxuICAgICAgICBNSUxMSVNFQ09ORCA9IDYsXG4gICAgICAgIFdFRUsgPSA3LFxuICAgICAgICBXRUVLREFZID0gODtcblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxXG4gICAgICAgICAgICA/IGlzTGVhcFllYXIoeWVhcilcbiAgICAgICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICAgICAgOiAyOFxuICAgICAgICAgICAgOiAzMSAtICgobW9kTW9udGggJSA3KSAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9XG4gICAgICAgICAgICAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPVxuICAgICAgICAgICAgJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vLFxuICAgICAgICBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1xuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICAgICAodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFtcbiAgICAgICAgICAgICAgICAgIE1PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/IHplcm9GaWxsKHksIDQpIDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCA0XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgNV0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgICAgIGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSh5KSB7XG4gICAgICAgIHZhciBkYXRlLCBhcmdzO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLFxuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlayxcbiAgICAgICAgICAgIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgIFsndycsICd3dycsICdXJywgJ1dXJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID1cbiAgICAgICAgICAgICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1xuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1tcbiAgICAgICAgICAgICAgICAgIG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgID8gd2Vla2RheXNbbS5kYXkoKV1cbiAgICAgICAgICAgIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydChtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXVxuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluKG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV1cbiAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sXG4gICAgICAgICAgICBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBtaW5wLFxuICAgICAgICAgICAgc2hvcnRwLFxuICAgICAgICAgICAgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykpO1xuICAgICAgICAgICAgc2hvcnRwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5cyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIGhGb3JtYXQuYXBwbHkodGhpcykgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgdGhpcy5ob3VycygpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbShcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzKCksXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKCksXG4gICAgICAgICAgICAgICAgbG93ZXJjYXNlXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaSxcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgICAgICAvLyB0aGlzIHJ1bGUuXG4gICAgICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0oaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSxcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge30sXG4gICAgICAgIGxvY2FsZUZhbWlsaWVzID0ge30sXG4gICAgICAgIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIGNvbW1vblByZWZpeChhcnIxLCBhcnIyKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbWlubCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtaW5sOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbmV4dCAmJlxuICAgICAgICAgICAgICAgICAgICBuZXh0Lmxlbmd0aCA+PSBqICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vblByZWZpeChzcGxpdCwgbmV4dCkgPj0gaiAtIDFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbGVOYW1lU2FuZShuYW1lKSB7XG4gICAgICAgIC8vIFByZXZlbnQgbmFtZXMgdGhhdCBsb29rIGxpa2UgZmlsZXN5c3RlbSBwYXRocywgaS5lIGNvbnRhaW4gJy8nIG9yICdcXCdcbiAgICAgICAgcmV0dXJuIG5hbWUubWF0Y2goJ15bXi9cXFxcXFxcXF0qJCcpICE9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsLFxuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmU7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJlxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgJiZcbiAgICAgICAgICAgIGlzTG9jYWxlTmFtZVNhbmUobmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIG5vdCBmb3VuZCB0byBhdm9pZCByZXBlYXRpbmcgZXhwZW5zaXZlIGZpbGUgcmVxdWlyZSBjYWxsIGNhdXNpbmcgaGlnaCBDUFVcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBmaW5kIGVuLVVTLCBlbl9VUywgZW4tdXMgZm9yIGV2ZXJ5IGZvcm1hdCBjYWxsXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG51bGw7IC8vIG51bGwgbWVhbnMgbm90IGZvdW5kXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZShrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0xvY2FsZSAnICsga2V5ICsgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICAnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcblxuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCAmJiBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNoaWxkIGxvY2FsZSBpbi1wbGFjZSB0byBhdm9pZCBtZW1vcnktbGVha3NcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldChtZXJnZUNvbmZpZ3MobG9jYWxlc1tuYW1lXS5fY29uZmlnLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlTG9jYWxlIGlzIGNhbGxlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBhYmJyIHNvIGl0IHdpbGwgaGF2ZSBhIG5hbWUgKGdldHRlcnMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBvdGhlcndpc2UpLlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdyxcbiAgICAgICAgICAgIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgICAgICA/IE1PTlRIXG4gICAgICAgICAgICAgICAgICAgIDogYVtEQVRFXSA8IDEgfHwgYVtEQVRFXSA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKVxuICAgICAgICAgICAgICAgICAgICA/IERBVEVcbiAgICAgICAgICAgICAgICAgICAgOiBhW0hPVVJdIDwgMCB8fFxuICAgICAgICAgICAgICAgICAgICAgIGFbSE9VUl0gPiAyNCB8fFxuICAgICAgICAgICAgICAgICAgICAgIChhW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtNSU5VVEVdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW1NFQ09ORF0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdICE9PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgPyBIT1VSXG4gICAgICAgICAgICAgICAgICAgIDogYVtNSU5VVEVdIDwgMCB8fCBhW01JTlVURV0gPiA1OVxuICAgICAgICAgICAgICAgICAgICA/IE1JTlVURVxuICAgICAgICAgICAgICAgICAgICA6IGFbU0VDT05EXSA8IDAgfHwgYVtTRUNPTkRdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgPyBTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgOiBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTlcbiAgICAgICAgICAgICAgICAgICAgPyBNSUxMSVNFQ09ORFxuICAgICAgICAgICAgICAgICAgICA6IC0xO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJlxuICAgICAgICAgICAgICAgIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPVxuICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIGJhc2ljSXNvUmVnZXggPVxuICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZHwpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LyxcbiAgICAgICAgaXNvRGF0ZXMgPSBbXG4gICAgICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTScsIC9cXGR7Nn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVknLCAvXFxkezR9LywgZmFsc2VdLFxuICAgICAgICBdLFxuICAgICAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgICAgIGlzb1RpbWVzID0gW1xuICAgICAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEgnLCAvXFxkXFxkL10sXG4gICAgICAgIF0sXG4gICAgICAgIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoLT9cXGQrKS9pLFxuICAgICAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgICAgIHJmYzI4MjIgPVxuICAgICAgICAgICAgL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLyxcbiAgICAgICAgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgICAgIFVUOiAwLFxuICAgICAgICAgICAgR01UOiAwLFxuICAgICAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUFNUOiAtOCAqIDYwLFxuICAgICAgICB9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLFxuICAgICAgICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgICAgICAgIHRpbWVGb3JtYXQsXG4gICAgICAgICAgICB0ekZvcm1hdCxcbiAgICAgICAgICAgIGlzb0RhdGVzTGVuID0gaXNvRGF0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgaXNvVGltZXNMZW4gPSBpc29UaW1lcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgeWVhclN0cixcbiAgICAgICAgbW9udGhTdHIsXG4gICAgICAgIGRheVN0cixcbiAgICAgICAgaG91clN0cixcbiAgICAgICAgbWludXRlU3RyLFxuICAgICAgICBzZWNvbmRTdHJcbiAgICApIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKSxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXHNcXHMqLywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVuZGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMF0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzFdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsyXVxuICAgICAgICAgICAgICAgICkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCksXG4gICAgICAgICAgICAgICAgbSA9IGhtICUgMTAwLFxuICAgICAgICAgICAgICAgIGggPSAoaG0gLSBtKSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSksXG4gICAgICAgICAgICBwYXJzZWRBcnJheTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgICAgICAgICAgbWF0Y2hbNF0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbNV0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbN11cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIDEpIEFTUC5ORVQsIDIpIElTTywgMykgUkZDIDI4MjIgZm9ybWF0cywgb3IgNCkgb3B0aW9uYWwgZmFsbGJhY2sgaWYgcGFyc2luZyBpc24ndCBzdHJpY3RcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9zdHJpY3QpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgICAgICdkaXNjb3VyYWdlZC4gUGxlYXNlIHJlZmVyIHRvIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgaW5wdXQgPSBbXSxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlLFxuICAgICAgICAgICAgZXhwZWN0ZWRXZWVrZGF5LFxuICAgICAgICAgICAgeWVhclRvVXNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8XG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID1cbiAgICAgICAgICAgICAgICBjb25maWcuX2FbaV0gPT0gbnVsbCA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBpbnB1dFxuICAgICAgICApO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQ1xuICAgICAgICAgICAgPyBjb25maWcuX2QuZ2V0VVRDRGF5KClcbiAgICAgICAgICAgIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX3cgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3csIGN1cldlZWs7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyhcbiAgICAgICAgICAgICAgICB3LkdHLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSxcbiAgICAgICAgICAgICAgICB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIHRva2VucyxcbiAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMCxcbiAgICAgICAgICAgIGVyYSxcbiAgICAgICAgICAgIHRva2VuTGVuO1xuXG4gICAgICAgIHRva2VucyA9XG4gICAgICAgICAgICBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW5zLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHxcbiAgICAgICAgICAgICAgICBbXSlbMF07XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPVxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoXG4gICAgICAgICAgICBjb25maWcuX2xvY2FsZSxcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSxcbiAgICAgICAgICAgIGNvbmZpZy5fbWVyaWRpZW1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBoYW5kbGUgZXJhXG4gICAgICAgIGVyYSA9IGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYTtcbiAgICAgICAgaWYgKGVyYSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhc0NvbnZlcnRZZWFyKGVyYSwgY29uZmlnLl9hW1lFQVJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUsXG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kLFxuICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ2ZMZW4gPSBjb25maWcuX2YubGVuZ3RoO1xuXG4gICAgICAgIGlmIChjb25maWdmTGVuID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnZkxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoIWJlc3RGb3JtYXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0IHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRGb3JtYXRGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpLFxuICAgICAgICAgICAgZGF5T3JEYXRlID0gaS5kYXkgPT09IHVuZGVmaW5lZCA/IGkuZGF0ZSA6IGkuZGF5O1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoXG4gICAgICAgICAgICBbaS55ZWFyLCBpLm1vbnRoLCBkYXlPckRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHsgbnVsbElucHV0OiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IHRydWUgfHwgZm9ybWF0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArbmV3IERhdGUoKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gW1xuICAgICAgICAneWVhcicsXG4gICAgICAgICdxdWFydGVyJyxcbiAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgJ3dlZWsnLFxuICAgICAgICAnZGF5JyxcbiAgICAgICAgJ2hvdXInLFxuICAgICAgICAnbWludXRlJyxcbiAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIHZhciBrZXksXG4gICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IGZhbHNlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG9yZGVyTGVuID0gb3JkZXJpbmcubGVuZ3RoO1xuICAgICAgICBmb3IgKGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChtLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9yZGVyTGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9XG4gICAgICAgICAgICArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICsgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICsgcXVhcnRlcnMgKiAzICsgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKSxcbiAgICAgICAgICAgICAgICBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHNpZ24gK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvciArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn5vZmZzZXQgJSA2MCwgMilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKSxcbiAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBtaW51dGVzO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNodW5rID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICBwYXJ0cyA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBtaW51dGVzID09PSAwID8gMCA6IHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID1cbiAgICAgICAgICAgICAgICAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZShpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9LFxuICAgICAgICAgICAgb3RoZXI7XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiYgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gL14oLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKTooXFxkKykoPzo6KFxcZCspKFxcLlxcZCopPyk/JC8sXG4gICAgICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAgICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgICAgICBpc29SZWdleCA9XG4gICAgICAgICAgICAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQ6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE06IGlucHV0Ll9tb250aHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSB8fCAhaXNOYU4oK2lucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gK2lucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSAraW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgZDogdG9JbnQobWF0Y2hbREFURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBoOiB0b0ludChtYXRjaFtIT1VSXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG06IHRvSW50KG1hdGNoW01JTlVURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBzOiB0b0ludChtYXRjaFtTRUNPTkRdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXM6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24sIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE06IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3OiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGg6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgczogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi50bylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfaXNWYWxpZCcpKSB7XG4gICAgICAgICAgICByZXQuX2lzVmFsaWQgPSBpbnB1dC5faXNWYWxpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9XG4gICAgICAgICAgICBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICsgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gK2Jhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsO1xuICAgICAgICAgICAgICAgIHZhbCA9IHBlcmlvZDtcbiAgICAgICAgICAgICAgICBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyksXG4gICAgICAgIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gdHlwZSBNb21lbnRJbnB1dCA9IE1vbWVudCB8IERhdGUgfCBzdHJpbmcgfCBudW1iZXIgfCAobnVtYmVyIHwgc3RyaW5nKVtdIHwgTW9tZW50SW5wdXRPYmplY3QgfCB2b2lkOyAvLyBudWxsIHwgdW5kZWZpbmVkXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dChpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNNb21lbnQoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc0RhdGUoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc1N0cmluZyhpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSBudWxsIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3llYXJzJyxcbiAgICAgICAgICAgICAgICAneWVhcicsXG4gICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICdtb250aHMnLFxuICAgICAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAgICAgJ00nLFxuICAgICAgICAgICAgICAgICdkYXlzJyxcbiAgICAgICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICAgICAnZCcsXG4gICAgICAgICAgICAgICAgJ2RhdGVzJyxcbiAgICAgICAgICAgICAgICAnZGF0ZScsXG4gICAgICAgICAgICAgICAgJ0QnLFxuICAgICAgICAgICAgICAgICdob3VycycsXG4gICAgICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgICAgICdoJyxcbiAgICAgICAgICAgICAgICAnbWludXRlcycsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICAgICAgICAgJ20nLFxuICAgICAgICAgICAgICAgICdzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAncycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAnbXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgIHByb3BlcnR5TGVuID0gcHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnR5TGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB7XG4gICAgICAgIHZhciBhcnJheVRlc3QgPSBpc0FycmF5KGlucHV0KSxcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJyYXlUZXN0KSB7XG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPVxuICAgICAgICAgICAgICAgIGlucHV0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyKGl0ZW0pICYmIGlzU3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5VGVzdCAmJiBkYXRhVHlwZVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNDYWxlbmRhclNwZWMoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICdzYW1lRGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dERheScsXG4gICAgICAgICAgICAgICAgJ2xhc3REYXknLFxuICAgICAgICAgICAgICAgICduZXh0V2VlaycsXG4gICAgICAgICAgICAgICAgJ2xhc3RXZWVrJyxcbiAgICAgICAgICAgICAgICAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTZcbiAgICAgICAgICAgID8gJ3NhbWVFbHNlJ1xuICAgICAgICAgICAgOiBkaWZmIDwgLTFcbiAgICAgICAgICAgID8gJ2xhc3RXZWVrJ1xuICAgICAgICAgICAgOiBkaWZmIDwgMFxuICAgICAgICAgICAgPyAnbGFzdERheSdcbiAgICAgICAgICAgIDogZGlmZiA8IDFcbiAgICAgICAgICAgID8gJ3NhbWVEYXknXG4gICAgICAgICAgICA6IGRpZmYgPCAyXG4gICAgICAgICAgICA/ICduZXh0RGF5J1xuICAgICAgICAgICAgOiBkaWZmIDwgN1xuICAgICAgICAgICAgPyAnbmV4dFdlZWsnXG4gICAgICAgICAgICA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIHNpbmdsZSBwYXJhbWV0ZXIsIGZvcm1hdHMgb25seSBvdmVybG9hZCB0byB0aGUgY2FsZW5kYXIgZnVuY3Rpb25cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01vbWVudElucHV0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2FsZW5kYXJTcGVjKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgZm9ybWF0cyAmJlxuICAgICAgICAgICAgICAgIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSlcbiAgICAgICAgICAgICAgICAgICAgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpXG4gICAgICAgICAgICAgICAgICAgIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICAgICAgICBvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4oZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzBdID09PSAnKCdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmXG4gICAgICAgICAgICAgICAgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZihpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsIHpvbmVEZWx0YSwgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzO1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZGF0ZSgpIDwgYi5kYXRlKCkpIHtcbiAgICAgICAgICAgIC8vIGVuZC1vZi1tb250aCBjYWxjdWxhdGlvbnMgd29yayBjb3JyZWN0IHdoZW4gdGhlIHN0YXJ0IG1vbnRoIGhhcyBtb3JlXG4gICAgICAgICAgICAvLyBkYXlzIHRoYW4gdGhlIGVuZCBtb250aC5cbiAgICAgICAgICAgIHJldHVybiAtbW9udGhEaWZmKGIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9IChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZSxcbiAgICAgICAgICAgIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgIHV0Y1xuICAgICAgICAgICAgICAgICAgICA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nXG4gICAgICAgICAgICAgICAgICAgIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKVxuICAgICAgICAgICAgICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgbSxcbiAgICAgICAgICAgIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnLFxuICAgICAgICAgICAgem9uZSA9ICcnLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgIGRhdGV0aW1lLFxuICAgICAgICAgICAgc3VmZml4O1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgeWVhciA9IDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKClcbiAgICAgICAgICAgICAgICA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGNcbiAgICAgICAgICAgICAgICA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgdG86IHRoaXMsIGZyb206IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IGZyb206IHRoaXMsIHRvOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDAsXG4gICAgICAgIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQsXG4gICAgICAgIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFLFxuICAgICAgICBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoKGRpdmlkZW5kICUgZGl2aXNvcikgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMyksXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPVxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUiAtXG4gICAgICAgICAgICAgICAgICAgIG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICAgICApIC1cbiAgICAgICAgICAgICAgICAgICAgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbS55ZWFyKCksXG4gICAgICAgICAgICBtLm1vbnRoKCksXG4gICAgICAgICAgICBtLmRhdGUoKSxcbiAgICAgICAgICAgIG0uaG91cigpLFxuICAgICAgICAgICAgbS5taW51dGUoKSxcbiAgICAgICAgICAgIG0uc2Vjb25kKCksXG4gICAgICAgICAgICBtLm1pbGxpc2Vjb25kKCksXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdOJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OJywgMCwgMCwgJ2VyYU5hbWUnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTk4nLCAwLCAwLCAnZXJhTmFycm93Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneScsIDFdLCAneW8nLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eScsIDJdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXknLCAzXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5eScsIDRdLCAwLCAnZXJhWWVhcicpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTicsIG1hdGNoRXJhTmFtZSk7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTk4nLCBtYXRjaEVyYU5hcnJvdyk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFxuICAgICAgICBbJ04nLCAnTk4nLCAnTk5OJywgJ05OTk4nLCAnTk5OTk4nXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgdmFyIGVyYSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgICAgIGlmIChlcmEpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmEgPSBlcmE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRFcmEgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBhZGRSZWdleFRva2VuKCd5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneW8nLCBtYXRjaEVyYVllYXJPcmRpbmFsKTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWyd5JywgJ3l5JywgJ3l5eScsICd5eXl5J10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWyd5byddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KSB7XG4gICAgICAgICAgICBtYXRjaCA9IGlucHV0Lm1hdGNoKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UoaW5wdXQsIG1hdGNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhcyhtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLl9lcmFzIHx8IGdldExvY2FsZSgnZW4nKS5fZXJhcztcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS5zaW5jZSkuc3RhcnRPZignZGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0uc2luY2UgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gK0luZmluaXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnVudGlsKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVyYXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc1BhcnNlKGVyYU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhYmJyLFxuICAgICAgICAgICAgbmFycm93O1xuICAgICAgICBlcmFOYW1lID0gZXJhTmFtZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgbmFtZSA9IGVyYXNbaV0ubmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgYWJiciA9IGVyYXNbaV0uYWJici50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgbmFycm93ID0gZXJhc1tpXS5uYXJyb3cudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJiciA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hcnJvdyA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChbbmFtZSwgYWJiciwgbmFycm93XS5pbmRleE9mKGVyYU5hbWUpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNDb252ZXJ0WWVhcihlcmEsIHllYXIpIHtcbiAgICAgICAgdmFyIGRpciA9IGVyYS5zaW5jZSA8PSBlcmEudW50aWwgPyArMSA6IC0xO1xuICAgICAgICBpZiAoeWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3MoZXJhLnNpbmNlKS55ZWFyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3MoZXJhLnNpbmNlKS55ZWFyKCkgKyAoeWVhciAtIGVyYS5vZmZzZXQpICogZGlyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFtZSgpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYXJyb3coKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYUFiYnIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhWWVhcigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZGlyLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBkaXIgPSBlcmFzW2ldLnNpbmNlIDw9IGVyYXNbaV0udW50aWwgPyArMSA6IC0xO1xuXG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB8fFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnllYXIoKSAtIGhvb2tzKGVyYXNbaV0uc2luY2UpLnllYXIoKSkgKiBkaXIgK1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLm9mZnNldFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hbWVSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFtZVJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFtZVJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc0FiYnJSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc0FiYnJSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hcnJvd1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFycm93UmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFBYmJyKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzQWJiclJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hbWUoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFycm93KGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhWWVhck9yZGluYWwoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4IHx8IG1hdGNoVW5zaWduZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUVyYXNQYXJzZSgpIHtcbiAgICAgICAgdmFyIGFiYnJQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG5hbWVQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgbmFtZVBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFtZSkpO1xuICAgICAgICAgICAgYWJiclBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicikpO1xuICAgICAgICAgICAgbmFycm93UGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYXJyb3cpKTtcblxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFycm93KSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lcmFzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYW1lUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBuYW1lUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc0FiYnJSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGFiYnJQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFycm93UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG5hcnJvd1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbih0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtZZWFyJywgJ0dHJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla1llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3lcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMuaXNvV2VlaygpLFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrZGF5KCksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMuaXNvV2Vla1llYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luV2Vla1llYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy53ZWVrWWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGxcbiAgICAgICAgICAgID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpXG4gICAgICAgICAgICA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgKHRoaXMubW9udGgoKSAlIDMpKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdFxuICAgICAgICAgICAgPyBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2VcbiAgICAgICAgICAgIDogbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgICAgICBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1XG4gICAgICAgICAgICApICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZChpbnB1dCAtIGRheU9mWWVhciwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuLCBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG5cbiAgICBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJicigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gPSB0bztcbiAgICBwcm90by50b05vdyA9IHRvTm93O1xuICAgIHByb3RvLmdldCA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLmZvciAhPSBudWxsKSB7XG4gICAgICAgIHByb3RvW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdNb21lbnQ8JyArIHRoaXMuZm9ybWF0KCkgKyAnPic7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RvLnRvSlNPTiA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by5lcmFOYW1lID0gZ2V0RXJhTmFtZTtcbiAgICBwcm90by5lcmFOYXJyb3cgPSBnZXRFcmFOYXJyb3c7XG4gICAgcHJvdG8uZXJhQWJiciA9IGdldEVyYUFiYnI7XG4gICAgcHJvdG8uZXJhWWVhciA9IGdldEVyYVllYXI7XG4gICAgcHJvdG8ueWVhciA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgPSBwcm90by53ZWVrcyA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayA9IHByb3RvLmlzb1dlZWtzID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLndlZWtzSW5XZWVrWWVhciA9IGdldFdlZWtzSW5XZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5JU09XZWVrWWVhciA9IGdldElTT1dlZWtzSW5JU09XZWVrWWVhcjtcbiAgICBwcm90by5kYXRlID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgPSBwcm90by5kYXlzID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgPSBkZXByZWNhdGUoXG4gICAgICAgICdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldERheU9mTW9udGhcbiAgICApO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsXG4gICAgICAgIGdldFNldE1vbnRoXG4gICAgKTtcbiAgICBwcm90by55ZWFycyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRZZWFyXG4gICAgKTtcbiAgICBwcm90by56b25lID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLFxuICAgICAgICBnZXRTZXRab25lXG4gICAgKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoXG4gICAgICAgICdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJyxcbiAgICAgICAgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkXG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXgoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ID0gc2V0O1xuICAgIHByb3RvJDEuZXJhcyA9IGxvY2FsZUVyYXM7XG4gICAgcHJvdG8kMS5lcmFzUGFyc2UgPSBsb2NhbGVFcmFzUGFyc2U7XG4gICAgcHJvdG8kMS5lcmFzQ29udmVydFllYXIgPSBsb2NhbGVFcmFzQ29udmVydFllYXI7XG4gICAgcHJvdG8kMS5lcmFzQWJiclJlZ2V4ID0gZXJhc0FiYnJSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYW1lUmVnZXggPSBlcmFzTmFtZVJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hcnJvd1JlZ2V4ID0gZXJhc05hcnJvd1JlZ2V4O1xuXG4gICAgcHJvdG8kMS5tb250aHMgPSBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCA9IGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgPSBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzID0gbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiA9IGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCA9IGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlID0gbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCA9IHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggPSB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ID0gd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyhmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0KGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyhsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbihsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogK0luZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQW5ubyBEb21pbmknLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdCZWZvcmUgQ2hyaXN0JyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdCQycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0JDJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIHRvSW50KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICApO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsXG4gICAgICAgIGdldExvY2FsZVxuICAgICk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMShkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzLFxuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzLFxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsXG4gICAgICAgICAgICBzZWNvbmRzLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMClcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gKGRheXMgKiA0ODAwKSAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gKG1vbnRocyAqIDE0NjA5NykgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXMsXG4gICAgICAgICAgICBtb250aHMsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAvIDcgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAyNCArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAxNDQwICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG4gICAgZnVuY3Rpb24gdmFsdWVPZiQxKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyhhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKSxcbiAgICAgICAgYXNTZWNvbmRzID0gbWFrZUFzKCdzJyksXG4gICAgICAgIGFzTWludXRlcyA9IG1ha2VBcygnbScpLFxuICAgICAgICBhc0hvdXJzID0gbWFrZUFzKCdoJyksXG4gICAgICAgIGFzRGF5cyA9IG1ha2VBcygnZCcpLFxuICAgICAgICBhc1dlZWtzID0gbWFrZUFzKCd3JyksXG4gICAgICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJyksXG4gICAgICAgIGFzUXVhcnRlcnMgPSBtYWtlQXMoJ1EnKSxcbiAgICAgICAgYXNZZWFycyA9IG1ha2VBcygneScpO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyksXG4gICAgICAgIHNlY29uZHMgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyksXG4gICAgICAgIG1pbnV0ZXMgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyksXG4gICAgICAgIGhvdXJzID0gbWFrZUdldHRlcignaG91cnMnKSxcbiAgICAgICAgZGF5cyA9IG1ha2VHZXR0ZXIoJ2RheXMnKSxcbiAgICAgICAgbW9udGhzID0gbWFrZUdldHRlcignbW9udGhzJyksXG4gICAgICAgIHllYXJzID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgICB0aHJlc2hvbGRzID0ge1xuICAgICAgICAgICAgc3M6IDQ0LCAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgICAgIHM6IDQ1LCAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICAgICAgbTogNDUsIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICAgICAgaDogMjIsIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICAgICAgZDogMjYsIC8vIGRheXMgdG8gbW9udGgvd2Vla1xuICAgICAgICAgICAgdzogbnVsbCwgLy8gd2Vla3MgdG8gbW9udGhcbiAgICAgICAgICAgIE06IDExLCAvLyBtb250aHMgdG8geWVhclxuICAgICAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMShwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgdGhyZXNob2xkcywgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKSxcbiAgICAgICAgICAgIHNlY29uZHMgPSByb3VuZChkdXJhdGlvbi5hcygncycpKSxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKSxcbiAgICAgICAgICAgIGhvdXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSksXG4gICAgICAgICAgICBkYXlzID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSksXG4gICAgICAgICAgICBtb250aHMgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKSxcbiAgICAgICAgICAgIHdlZWtzID0gcm91bmQoZHVyYXRpb24uYXMoJ3cnKSksXG4gICAgICAgICAgICB5ZWFycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpLFxuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8IHRocmVzaG9sZHMucyAmJiBbJ3NzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPD0gMSAmJiBbJ20nXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8IHRocmVzaG9sZHMubSAmJiBbJ21tJywgbWludXRlc10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDw9IDEgJiYgWydoJ10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDwgdGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPD0gMSAmJiBbJ2QnXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8IHRocmVzaG9sZHMuZCAmJiBbJ2RkJywgZGF5c10pO1xuXG4gICAgICAgIGlmICh0aHJlc2hvbGRzLncgIT0gbnVsbCkge1xuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgYSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8PSAxICYmIFsndyddKSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8IHRocmVzaG9sZHMudyAmJiBbJ3d3Jywgd2Vla3NdKTtcbiAgICAgICAgfVxuICAgICAgICBhID0gYSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8PSAxICYmIFsnTSddKSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8IHRocmVzaG9sZHMuTSAmJiBbJ01NJywgbW9udGhzXSkgfHxcbiAgICAgICAgICAgICh5ZWFycyA8PSAxICYmIFsneSddKSB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyhyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJvdW5kaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplKGFyZ1dpdGhTdWZmaXgsIGFyZ1RocmVzaG9sZHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd2l0aFN1ZmZpeCA9IGZhbHNlLFxuICAgICAgICAgICAgdGggPSB0aHJlc2hvbGRzLFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFyZ1RocmVzaG9sZHMgPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICAgICAgYXJnV2l0aFN1ZmZpeCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB3aXRoU3VmZml4ID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1RocmVzaG9sZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aCA9IE9iamVjdC5hc3NpZ24oe30sIHRocmVzaG9sZHMsIGFyZ1RocmVzaG9sZHMpO1xuICAgICAgICAgICAgaWYgKGFyZ1RocmVzaG9sZHMucyAhPSBudWxsICYmIGFyZ1RocmVzaG9sZHMuc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoLnNzID0gYXJnVGhyZXNob2xkcy5zIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgdGgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICh4ID4gMCkgLSAoeCA8IDApIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDAsXG4gICAgICAgICAgICBkYXlzID0gYWJzJDEodGhpcy5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnMkMSh0aGlzLl9tb250aHMpLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpLFxuICAgICAgICAgICAgdG90YWxTaWduLFxuICAgICAgICAgICAgeW1TaWduLFxuICAgICAgICAgICAgZGF5c1NpZ24sXG4gICAgICAgICAgICBobXNTaWduO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG5cbiAgICAgICAgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0b3RhbFNpZ24gK1xuICAgICAgICAgICAgJ1AnICtcbiAgICAgICAgICAgICh5ZWFycyA/IHltU2lnbiArIHllYXJzICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChtb250aHMgPyB5bVNpZ24gKyBtb250aHMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKGRheXMgPyBkYXlzU2lnbiArIGRheXMgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzIHx8IG1pbnV0ZXMgfHwgc2Vjb25kcyA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgPyBobXNTaWduICsgaG91cnMgKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG1pbnV0ZXMgPyBobXNTaWduICsgbWludXRlcyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoc2Vjb25kcyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLFxuICAgICAgICB0b0lTT1N0cmluZyQxXG4gICAgKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQpICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8hIG1vbWVudC5qc1xuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjI5LjQnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuID0gcHJvdG87XG4gICAgaG9va3MubWluID0gbWluO1xuICAgIGhvb2tzLm1heCA9IG1heDtcbiAgICBob29rcy5ub3cgPSBub3c7XG4gICAgaG9va3MudXRjID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScsIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gIFwidXNlIHN0cmljdFwiOyAvKiEgcmVnZW5lcmF0b3ItcnVudGltZSAtLSBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gLS0gbGljZW5zZSAoTUlUKTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9MSUNFTlNFICovXG4gIF9yZWdlbmVyYXRvclJ1bnRpbWUgPSBmdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9O1xuICB2YXIgZXhwb3J0cyA9IHt9LFxuICAgIE9wID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAob2JqLCBrZXksIGRlc2MpIHtcbiAgICAgIG9ialtrZXldID0gZGVzYy52YWx1ZTtcbiAgICB9LFxuICAgICRTeW1ib2wgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LFxuICAgIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3IsXG4gICAgICBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSksXG4gICAgICBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShnZW5lcmF0b3IsIFwiX2ludm9rZVwiLCB7XG4gICAgICB2YWx1ZTogbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KVxuICAgIH0pLCBnZW5lcmF0b3I7XG4gIH1cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwibm9ybWFsXCIsXG4gICAgICAgIGFyZzogZm4uY2FsbChvYmosIGFyZylcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInRocm93XCIsXG4gICAgICAgIGFyZzogZXJyXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkgJiYgKEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUpO1xuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAoXCJ0aHJvd1wiICE9PSByZWNvcmQudHlwZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZyxcbiAgICAgICAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIFwib2JqZWN0XCIgPT0gX3R5cGVvZih2YWx1ZSkgJiYgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSA/IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KSA6IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHVud3JhcHBlZCkge1xuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZCwgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgIH1cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2ludm9rZVwiLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUobWV0aG9kLCBhcmcpIHtcbiAgICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9IHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoXCJleGVjdXRpbmdcIiA9PT0gc3RhdGUpIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICBpZiAoXCJjb21wbGV0ZWRcIiA9PT0gc3RhdGUpIHtcbiAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gbWV0aG9kKSB0aHJvdyBhcmc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgICAgICBkb25lOiAhMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZm9yIChjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZCwgY29udGV4dC5hcmcgPSBhcmc7Oykge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcIm5leHRcIiA9PT0gY29udGV4dC5tZXRob2QpIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztlbHNlIGlmIChcInRocm93XCIgPT09IGNvbnRleHQubWV0aG9kKSB7XG4gICAgICAgICAgaWYgKFwic3VzcGVuZGVkU3RhcnRcIiA9PT0gc3RhdGUpIHRocm93IHN0YXRlID0gXCJjb21wbGV0ZWRcIiwgY29udGV4dC5hcmc7XG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG4gICAgICAgIH0gZWxzZSBcInJldHVyblwiID09PSBjb250ZXh0Lm1ldGhvZCAmJiBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIHN0YXRlID0gXCJleGVjdXRpbmdcIjtcbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAoXCJub3JtYWxcIiA9PT0gcmVjb3JkLnR5cGUpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPSBjb250ZXh0LmRvbmUgPyBcImNvbXBsZXRlZFwiIDogXCJzdXNwZW5kZWRZaWVsZFwiLCByZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUgJiYgKHN0YXRlID0gXCJjb21wbGV0ZWRcIiwgY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZE5hbWUgPSBjb250ZXh0Lm1ldGhvZCxcbiAgICAgIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZE5hbWVdO1xuICAgIGlmICh1bmRlZmluZWQgPT09IG1ldGhvZCkgcmV0dXJuIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBcInRocm93XCIgPT09IG1ldGhvZE5hbWUgJiYgZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0gJiYgKGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIiwgY29udGV4dC5hcmcgPSB1bmRlZmluZWQsIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpLCBcInRocm93XCIgPT09IGNvbnRleHQubWV0aG9kKSB8fCBcInJldHVyblwiICE9PSBtZXRob2ROYW1lICYmIChjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnXCIgKyBtZXRob2ROYW1lICsgXCInIG1ldGhvZFwiKSksIENvbnRpbnVlU2VudGluZWw7XG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcbiAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgcmV0dXJuIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcsIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICByZXR1cm4gaW5mbyA/IGluZm8uZG9uZSA/IChjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZSwgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTtcbiAgfVxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRyeUxvYzogbG9jc1swXVxuICAgIH07XG4gICAgMSBpbiBsb2NzICYmIChlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV0pLCAyIGluIGxvY3MgJiYgKGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdLCBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIiwgZGVsZXRlIHJlY29yZC5hcmcsIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlIHx8IFwiXCIgPT09IGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGl0ZXJhYmxlLm5leHQpIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgZm9yICg7ICsraSA8IGl0ZXJhYmxlLmxlbmd0aDspIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHJldHVybiBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV0sIG5leHQuZG9uZSA9ICExLCBuZXh0O1xuICAgICAgICAgICAgcmV0dXJuIG5leHQudmFsdWUgPSB1bmRlZmluZWQsIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKF90eXBlb2YoaXRlcmFibGUpICsgXCIgaXMgbm90IGl0ZXJhYmxlXCIpO1xuICB9XG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lUHJvcGVydHkoR3AsIFwiY29uc3RydWN0b3JcIiwge1xuICAgIHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICBjb25maWd1cmFibGU6ICEwXG4gIH0pLCBkZWZpbmVQcm9wZXJ0eShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCB7XG4gICAgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLFxuICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgfSksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSwgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBnZW5GdW4gJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiAhIWN0b3IgJiYgKGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8IFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSk7XG4gIH0sIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uIChnZW5GdW4pIHtcbiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLCBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCksIGdlbkZ1bjtcbiAgfSwgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19hd2FpdDogYXJnXG4gICAgfTtcbiAgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKSwgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24gKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIHZvaWQgMCA9PT0gUHJvbWlzZUltcGwgJiYgKFByb21pc2VJbXBsID0gUHJvbWlzZSk7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSwgUHJvbWlzZUltcGwpO1xuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICB9KTtcbiAgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKSwgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIiksIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pLCBleHBvcnRzLmtleXMgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFyIG9iamVjdCA9IE9iamVjdCh2YWwpLFxuICAgICAga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIGtleXMucHVzaChrZXkpO1xuICAgIHJldHVybiBrZXlzLnJldmVyc2UoKSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGZvciAoOyBrZXlzLmxlbmd0aDspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gbmV4dC52YWx1ZSA9IGtleSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgfTtcbiAgfSwgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXMsIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldChza2lwVGVtcFJlc2V0KSB7XG4gICAgICBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZCwgdGhpcy5kb25lID0gITEsIHRoaXMuZGVsZWdhdGUgPSBudWxsLCB0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLmFyZyA9IHVuZGVmaW5lZCwgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksICFza2lwVGVtcFJlc2V0KSBmb3IgKHZhciBuYW1lIGluIHRoaXMpIFwidFwiID09PSBuYW1lLmNoYXJBdCgwKSAmJiBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJiAhaXNOYU4oK25hbWUuc2xpY2UoMSkpICYmICh0aGlzW25hbWVdID0gdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSBcInRocm93XCIsIHJlY29yZC5hcmcgPSBleGNlcHRpb24sIGNvbnRleHQubmV4dCA9IGxvYywgY2F1Z2h0ICYmIChjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCksICEhY2F1Z2h0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0sXG4gICAgICAgICAgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKFwicm9vdFwiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIiksXG4gICAgICAgICAgICBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNGaW5hbGx5KSB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmaW5hbGx5RW50cnkgJiYgKFwiYnJlYWtcIiA9PT0gdHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHR5cGUpICYmIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYyAmJiAoZmluYWxseUVudHJ5ID0gbnVsbCk7XG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA/ICh0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYywgQ29udGludWVTZW50aW5lbCkgOiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUpIHRocm93IHJlY29yZC5hcmc7XG4gICAgICByZXR1cm4gXCJicmVha1wiID09PSByZWNvcmQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHJlY29yZC50eXBlID8gdGhpcy5uZXh0ID0gcmVjb3JkLmFyZyA6IFwicmV0dXJuXCIgPT09IHJlY29yZC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZywgdGhpcy5tZXRob2QgPSBcInJldHVyblwiLCB0aGlzLm5leHQgPSBcImVuZFwiKSA6IFwibm9ybWFsXCIgPT09IHJlY29yZC50eXBlICYmIGFmdGVyTG9jICYmICh0aGlzLm5leHQgPSBhZnRlckxvYyksIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcbiAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHJldHVybiB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uIF9jYXRjaCh0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdW5kZWZpbmVkKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH0sIGV4cG9ydHM7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIHdhcm5lZCA9IHt9O1xudmFyIHByZVdhcm5pbmdGbnMgPSBbXTtcblxuLyoqXG4gKiBQcmUgd2FybmluZyBlbmFibGUgeW91IHRvIHBhcnNlIGNvbnRlbnQgYmVmb3JlIGNvbnNvbGUuZXJyb3IuXG4gKiBNb2RpZnkgdG8gbnVsbCB3aWxsIHByZXZlbnQgd2FybmluZy5cbiAqL1xuZXhwb3J0IHZhciBwcmVNZXNzYWdlID0gZnVuY3Rpb24gcHJlTWVzc2FnZShmbikge1xuICBwcmVXYXJuaW5nRm5zLnB1c2goZm4pO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBtZXNzYWdlKSB7XG4gIC8vIFN1cHBvcnQgdWdsaWZ5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF2YWxpZCAmJiBjb25zb2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZmluYWxNZXNzYWdlID0gcHJlV2FybmluZ0Zucy5yZWR1Y2UoZnVuY3Rpb24gKG1zZywgcHJlTWVzc2FnZUZuKSB7XG4gICAgICByZXR1cm4gcHJlTWVzc2FnZUZuKG1zZyAhPT0gbnVsbCAmJiBtc2cgIT09IHZvaWQgMCA/IG1zZyA6ICcnLCAnd2FybmluZycpO1xuICAgIH0sIG1lc3NhZ2UpO1xuICAgIGlmIChmaW5hbE1lc3NhZ2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJXYXJuaW5nOiBcIi5jb25jYXQoZmluYWxNZXNzYWdlKSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbm90ZSh2YWxpZCwgbWVzc2FnZSkge1xuICAvLyBTdXBwb3J0IHVnbGlmeVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdmFsaWQgJiYgY29uc29sZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGZpbmFsTWVzc2FnZSA9IHByZVdhcm5pbmdGbnMucmVkdWNlKGZ1bmN0aW9uIChtc2csIHByZU1lc3NhZ2VGbikge1xuICAgICAgcmV0dXJuIHByZU1lc3NhZ2VGbihtc2cgIT09IG51bGwgJiYgbXNnICE9PSB2b2lkIDAgPyBtc2cgOiAnJywgJ25vdGUnKTtcbiAgICB9LCBtZXNzYWdlKTtcbiAgICBpZiAoZmluYWxNZXNzYWdlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJOb3RlOiBcIi5jb25jYXQoZmluYWxNZXNzYWdlKSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbGwobWV0aG9kLCB2YWxpZCwgbWVzc2FnZSkge1xuICBpZiAoIXZhbGlkICYmICF3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICBtZXRob2QoZmFsc2UsIG1lc3NhZ2UpO1xuICAgIHdhcm5lZFttZXNzYWdlXSA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKHdhcm5pbmcsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBub3RlT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKG5vdGUsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbndhcm5pbmdPbmNlLnByZU1lc3NhZ2UgPSBwcmVNZXNzYWdlO1xud2FybmluZ09uY2UucmVzZXRXYXJuZWQgPSByZXNldFdhcm5lZDtcbndhcm5pbmdPbmNlLm5vdGVPbmNlID0gbm90ZU9uY2U7XG5leHBvcnQgZGVmYXVsdCB3YXJuaW5nT25jZTtcbi8qIGVzbGludC1lbmFibGUgKi8iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIGlzVmFsaWRFbGVtZW50ID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQ7XG5leHBvcnQgeyBpc1ZhbGlkRWxlbWVudCB9O1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnJhZ21lbnQoY2hpbGQpIHtcbiAgcmV0dXJuIGNoaWxkICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBjaGlsZC50eXBlID09PSBSZWFjdC5GcmFnbWVudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRWxlbWVudChlbGVtZW50LCByZXBsYWNlbWVudCwgcHJvcHMpIHtcbiAgaWYgKCFpc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiByZXBsYWNlbWVudDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicgPyBwcm9wcyhlbGVtZW50LnByb3BzIHx8IHt9KSA6IHByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUVsZW1lbnQoZWxlbWVudCwgcHJvcHMpIHtcbiAgcmV0dXJuIHJlcGxhY2VFbGVtZW50KGVsZW1lbnQsIGVsZW1lbnQsIHByb3BzKTtcbn0iLCIvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjE3NjE2NS93YXlzLXRvLWdldC1zdHJpbmctbGl0ZXJhbC10eXBlLW9mLWFycmF5LXZhbHVlcy13aXRob3V0LWVudW0tb3ZlcmhlYWRcbmV4cG9ydCB2YXIgdHVwbGUgPSBmdW5jdGlvbiB0dXBsZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICByZXR1cm4gYXJncztcbn07XG5leHBvcnQgdmFyIHR1cGxlTnVtID0gZnVuY3Rpb24gdHVwbGVOdW0oKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuICByZXR1cm4gYXJncztcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCkgfHwgaXQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYW5Vc2VEb20oKSB7XG4gIHJldHVybiAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDYWxsYWJsZShhcmd1bWVudCkgaXMgdHJ1ZWBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSkgOiBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWhlbHBlcnMnKS5oYXM7XG5cbi8vIFBlcmZvcm0gPyBSZXF1aXJlSW50ZXJuYWxTbG90KE0sIFtbU2V0RGF0YV1dKVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaGFzKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zLmVudW1lcmFibGU7XG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIGlmIChpc0NhbGxhYmxlKHZhbHVlKSkgbWFrZUJ1aWx0SW4odmFsdWUsIG5hbWUsIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5nbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZUdsb2JhbFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW9wdGlvbnMudW5zYWZlKSBkZWxldGUgT1trZXldO1xuICAgICAgZWxzZSBpZiAoT1trZXldKSBzaW1wbGUgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogIW9wdGlvbnMubm9uQ29uZmlndXJhYmxlLFxuICAgICAgd3JpdGFibGU6ICFvcHRpb25zLm5vbldyaXRhYmxlXG4gICAgfSk7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9taXQob2JqLCBmaWVsZHMpIHtcbiAgdmFyIGNsb25lID0gX29iamVjdFNwcmVhZCh7fSwgb2JqKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGRzKSkge1xuICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlbGV0ZSBjbG9uZVtrZXldO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBjbG9uZTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1oZWxwZXJzJykuaGFzO1xuXG4vLyBQZXJmb3JtID8gUmVxdWlyZUludGVybmFsU2xvdChNLCBbW01hcERhdGFdXSlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGhhcyhpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zZXQgLS0gc2FmZVxudmFyIFNldFByb3RvdHlwZSA9IFNldC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc2V0IC0tIHNhZmVcbiAgU2V0OiBTZXQsXG4gIGFkZDogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlLmFkZCksXG4gIGhhczogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlLmhhcyksXG4gIHJlbW92ZTogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlWydkZWxldGUnXSksXG4gIHByb3RvOiBTZXRQcm90b3R5cGVcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgU2l6ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuZXhwb3J0IHZhciBTaXplQ29udGV4dFByb3ZpZGVyID0gZnVuY3Rpb24gU2l6ZUNvbnRleHRQcm92aWRlcihfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgc2l6ZSA9IF9yZWYuc2l6ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNpemVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAob3JpZ2luU2l6ZSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTaXplQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHNpemUgfHwgb3JpZ2luU2l6ZVxuICAgIH0sIGNoaWxkcmVuKTtcbiAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU2l6ZUNvbnRleHQ7IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBIT09LX01BUksgPSAnUkNfRk9STV9JTlRFUk5BTF9IT09LUyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudmFyIHdhcm5pbmdGdW5jID0gZnVuY3Rpb24gd2FybmluZ0Z1bmMoKSB7XG4gIHdhcm5pbmcoZmFsc2UsICdDYW4gbm90IGZpbmQgRm9ybUNvbnRleHQuIFBsZWFzZSBtYWtlIHN1cmUgeW91IHdyYXAgRmllbGQgdW5kZXIgRm9ybS4nKTtcbn07XG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgZ2V0RmllbGRWYWx1ZTogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkc1ZhbHVlOiB3YXJuaW5nRnVuYyxcbiAgZ2V0RmllbGRFcnJvcjogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkV2FybmluZzogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkc0Vycm9yOiB3YXJuaW5nRnVuYyxcbiAgaXNGaWVsZHNUb3VjaGVkOiB3YXJuaW5nRnVuYyxcbiAgaXNGaWVsZFRvdWNoZWQ6IHdhcm5pbmdGdW5jLFxuICBpc0ZpZWxkVmFsaWRhdGluZzogd2FybmluZ0Z1bmMsXG4gIGlzRmllbGRzVmFsaWRhdGluZzogd2FybmluZ0Z1bmMsXG4gIHJlc2V0RmllbGRzOiB3YXJuaW5nRnVuYyxcbiAgc2V0RmllbGRzOiB3YXJuaW5nRnVuYyxcbiAgc2V0RmllbGRWYWx1ZTogd2FybmluZ0Z1bmMsXG4gIHNldEZpZWxkc1ZhbHVlOiB3YXJuaW5nRnVuYyxcbiAgdmFsaWRhdGVGaWVsZHM6IHdhcm5pbmdGdW5jLFxuICBzdWJtaXQ6IHdhcm5pbmdGdW5jLFxuICBnZXRJbnRlcm5hbEhvb2tzOiBmdW5jdGlvbiBnZXRJbnRlcm5hbEhvb2tzKCkge1xuICAgIHdhcm5pbmdGdW5jKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiB3YXJuaW5nRnVuYyxcbiAgICAgIGluaXRFbnRpdHlWYWx1ZTogd2FybmluZ0Z1bmMsXG4gICAgICByZWdpc3RlckZpZWxkOiB3YXJuaW5nRnVuYyxcbiAgICAgIHVzZVN1YnNjcmliZTogd2FybmluZ0Z1bmMsXG4gICAgICBzZXRJbml0aWFsVmFsdWVzOiB3YXJuaW5nRnVuYyxcbiAgICAgIGRlc3Ryb3lGb3JtOiB3YXJuaW5nRnVuYyxcbiAgICAgIHNldENhbGxiYWNrczogd2FybmluZ0Z1bmMsXG4gICAgICByZWdpc3RlcldhdGNoOiB3YXJuaW5nRnVuYyxcbiAgICAgIGdldEZpZWxkczogd2FybmluZ0Z1bmMsXG4gICAgICBzZXRWYWxpZGF0ZU1lc3NhZ2VzOiB3YXJuaW5nRnVuYyxcbiAgICAgIHNldFByZXNlcnZlOiB3YXJuaW5nRnVuYyxcbiAgICAgIGdldEluaXRpYWxWYWx1ZTogd2FybmluZ0Z1bmNcbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCBkZWZhdWx0IENvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIExpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBMaXN0Q29udGV4dDsiLCJleHBvcnQgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtSW5zdGFuY2UoZm9ybSkge1xuICByZXR1cm4gZm9ybSAmJiAhIWZvcm0uX2luaXQ7XG59IiwidmFyIHR5cGVUZW1wbGF0ZSA9IFwiJyR7bmFtZX0nIGlzIG5vdCBhIHZhbGlkICR7dHlwZX1cIjtcbmV4cG9ydCB2YXIgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMgPSB7XG4gIGRlZmF1bHQ6IFwiVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAnJHtuYW1lfSdcIixcbiAgcmVxdWlyZWQ6IFwiJyR7bmFtZX0nIGlzIHJlcXVpcmVkXCIsXG4gIGVudW06IFwiJyR7bmFtZX0nIG11c3QgYmUgb25lIG9mIFske2VudW19XVwiLFxuICB3aGl0ZXNwYWNlOiBcIicke25hbWV9JyBjYW5ub3QgYmUgZW1wdHlcIixcbiAgZGF0ZToge1xuICAgIGZvcm1hdDogXCInJHtuYW1lfScgaXMgaW52YWxpZCBmb3IgZm9ybWF0IGRhdGVcIixcbiAgICBwYXJzZTogXCInJHtuYW1lfScgY291bGQgbm90IGJlIHBhcnNlZCBhcyBkYXRlXCIsXG4gICAgaW52YWxpZDogXCInJHtuYW1lfScgaXMgaW52YWxpZCBkYXRlXCJcbiAgfSxcbiAgdHlwZXM6IHtcbiAgICBzdHJpbmc6IHR5cGVUZW1wbGF0ZSxcbiAgICBtZXRob2Q6IHR5cGVUZW1wbGF0ZSxcbiAgICBhcnJheTogdHlwZVRlbXBsYXRlLFxuICAgIG9iamVjdDogdHlwZVRlbXBsYXRlLFxuICAgIG51bWJlcjogdHlwZVRlbXBsYXRlLFxuICAgIGRhdGU6IHR5cGVUZW1wbGF0ZSxcbiAgICBib29sZWFuOiB0eXBlVGVtcGxhdGUsXG4gICAgaW50ZWdlcjogdHlwZVRlbXBsYXRlLFxuICAgIGZsb2F0OiB0eXBlVGVtcGxhdGUsXG4gICAgcmVnZXhwOiB0eXBlVGVtcGxhdGUsXG4gICAgZW1haWw6IHR5cGVUZW1wbGF0ZSxcbiAgICB1cmw6IHR5cGVUZW1wbGF0ZSxcbiAgICBoZXg6IHR5cGVUZW1wbGF0ZVxuICB9LFxuICBzdHJpbmc6IHtcbiAgICBsZW46IFwiJyR7bmFtZX0nIG11c3QgYmUgZXhhY3RseSAke2xlbn0gY2hhcmFjdGVyc1wiLFxuICAgIG1pbjogXCInJHtuYW1lfScgbXVzdCBiZSBhdCBsZWFzdCAke21pbn0gY2hhcmFjdGVyc1wiLFxuICAgIG1heDogXCInJHtuYW1lfScgY2Fubm90IGJlIGxvbmdlciB0aGFuICR7bWF4fSBjaGFyYWN0ZXJzXCIsXG4gICAgcmFuZ2U6IFwiJyR7bmFtZX0nIG11c3QgYmUgYmV0d2VlbiAke21pbn0gYW5kICR7bWF4fSBjaGFyYWN0ZXJzXCJcbiAgfSxcbiAgbnVtYmVyOiB7XG4gICAgbGVuOiBcIicke25hbWV9JyBtdXN0IGVxdWFsICR7bGVufVwiLFxuICAgIG1pbjogXCInJHtuYW1lfScgY2Fubm90IGJlIGxlc3MgdGhhbiAke21pbn1cIixcbiAgICBtYXg6IFwiJyR7bmFtZX0nIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJHttYXh9XCIsXG4gICAgcmFuZ2U6IFwiJyR7bmFtZX0nIG11c3QgYmUgYmV0d2VlbiAke21pbn0gYW5kICR7bWF4fVwiXG4gIH0sXG4gIGFycmF5OiB7XG4gICAgbGVuOiBcIicke25hbWV9JyBtdXN0IGJlIGV4YWN0bHkgJHtsZW59IGluIGxlbmd0aFwiLFxuICAgIG1pbjogXCInJHtuYW1lfScgY2Fubm90IGJlIGxlc3MgdGhhbiAke21pbn0gaW4gbGVuZ3RoXCIsXG4gICAgbWF4OiBcIicke25hbWV9JyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICR7bWF4fSBpbiBsZW5ndGhcIixcbiAgICByYW5nZTogXCInJHtuYW1lfScgbXVzdCBiZSBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9IGluIGxlbmd0aFwiXG4gIH0sXG4gIHBhdHRlcm46IHtcbiAgICBtaXNtYXRjaDogXCInJHtuYW1lfScgZG9lcyBub3QgbWF0Y2ggcGF0dGVybiAke3BhdHRlcm59XCJcbiAgfVxufTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWVcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3JcIjtcbmltcG9ydCBSYXdBc3luY1ZhbGlkYXRvciBmcm9tICdhc3luYy12YWxpZGF0b3InO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0IHsgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMgfSBmcm9tICcuL21lc3NhZ2VzJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcInJjLXV0aWwvZXMvdXRpbHMvc2V0XCI7XG4vLyBSZW1vdmUgaW5jb3JyZWN0IG9yaWdpbmFsIHRzIGRlZmluZVxudmFyIEFzeW5jVmFsaWRhdG9yID0gUmF3QXN5bmNWYWxpZGF0b3I7XG4vKipcbiAqIFJlcGxhY2Ugd2l0aCB0ZW1wbGF0ZS5cbiAqICAgYEknbSAke25hbWV9YCArIHsgbmFtZTogJ2JhbWJvbycgfSA9IEknbSBiYW1ib29cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZU1lc3NhZ2UodGVtcGxhdGUsIGt2KSB7XG4gIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXCRcXHtcXHcrXFx9L2csIGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIga2V5ID0gc3RyLnNsaWNlKDIsIC0xKTtcbiAgICByZXR1cm4ga3Zba2V5XTtcbiAgfSk7XG59XG52YXIgQ09ERV9MT0dJQ19FUlJPUiA9ICdDT0RFX0xPR0lDX0VSUk9SJztcbmZ1bmN0aW9uIHZhbGlkYXRlUnVsZShfeCwgX3gyLCBfeDMsIF94NCwgX3g1KSB7XG4gIHJldHVybiBfdmFsaWRhdGVSdWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG4vKipcbiAqIFdlIHVzZSBgYXN5bmMtdmFsaWRhdG9yYCB0byB2YWxpZGF0ZSB0aGUgdmFsdWUuXG4gKiBCdXQgb25seSBjaGVjayBvbmUgdmFsdWUgaW4gYSB0aW1lIHRvIGF2b2lkIG5hbWVQYXRoIHZhbGlkYXRlIGlzc3VlLlxuICovXG5mdW5jdGlvbiBfdmFsaWRhdGVSdWxlKCkge1xuICBfdmFsaWRhdGVSdWxlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMihuYW1lLCB2YWx1ZSwgcnVsZSwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcykge1xuICAgIHZhciBjbG9uZVJ1bGUsIG9yaWdpblZhbGlkYXRvciwgc3ViUnVsZUZpZWxkLCB2YWxpZGF0b3IsIG1lc3NhZ2VzLCByZXN1bHQsIHN1YlJlc3VsdHMsIGt2LCBmaWxsVmFyaWFibGVSZXN1bHQ7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGNsb25lUnVsZSA9IF9vYmplY3RTcHJlYWQoe30sIHJ1bGUpOyAvLyBCdWcgb2YgYGFzeW5jLXZhbGlkYXRvcmBcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L2ZpZWxkLWZvcm0vaXNzdWVzLzMxNlxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvZmllbGQtZm9ybS9pc3N1ZXMvMzEzXG4gICAgICAgICAgZGVsZXRlIGNsb25lUnVsZS5ydWxlSW5kZXg7XG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNDA0OTcjaXNzdWVjb21tZW50LTE0MjIyODIzNzhcbiAgICAgICAgICBBc3luY1ZhbGlkYXRvci53YXJuaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChjbG9uZVJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBvcmlnaW5WYWxpZGF0b3IgPSBjbG9uZVJ1bGUudmFsaWRhdG9yO1xuICAgICAgICAgICAgY2xvbmVSdWxlLnZhbGlkYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luVmFsaWRhdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoQ09ERV9MT0dJQ19FUlJPUik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFdlIHNob3VsZCBzcGVjaWFsIGhhbmRsZSBhcnJheSB2YWxpZGF0ZVxuICAgICAgICAgIHN1YlJ1bGVGaWVsZCA9IG51bGw7XG4gICAgICAgICAgaWYgKGNsb25lUnVsZSAmJiBjbG9uZVJ1bGUudHlwZSA9PT0gJ2FycmF5JyAmJiBjbG9uZVJ1bGUuZGVmYXVsdEZpZWxkKSB7XG4gICAgICAgICAgICBzdWJSdWxlRmllbGQgPSBjbG9uZVJ1bGUuZGVmYXVsdEZpZWxkO1xuICAgICAgICAgICAgZGVsZXRlIGNsb25lUnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbGlkYXRvciA9IG5ldyBBc3luY1ZhbGlkYXRvcihfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIFtjbG9uZVJ1bGVdKSk7XG4gICAgICAgICAgbWVzc2FnZXMgPSBtZXJnZShkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcywgb3B0aW9ucy52YWxpZGF0ZU1lc3NhZ2VzKTtcbiAgICAgICAgICB2YWxpZGF0b3IubWVzc2FnZXMobWVzc2FnZXMpO1xuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTA7XG4gICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMztcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbGlkYXRvci52YWxpZGF0ZShfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIHZhbHVlKSwgX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucykpKTtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE4O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTU7XG4gICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyW1wiY2F0Y2hcIl0oMTApO1xuICAgICAgICAgIGlmIChfY29udGV4dDIudDAuZXJyb3JzKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDIudDAuZXJyb3JzLm1hcChmdW5jdGlvbiAoX3JlZjQsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gX3JlZjQubWVzc2FnZTtcbiAgICAgICAgICAgICAgdmFyIG1lcmdlZE1lc3NhZ2UgPSBtZXNzYWdlID09PSBDT0RFX0xPR0lDX0VSUk9SID8gbWVzc2FnZXMuZGVmYXVsdCA6IG1lc3NhZ2U7XG4gICAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQobWVyZ2VkTWVzc2FnZSkgP1xuICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgICAgICAgIC8vIFdyYXAgUmVhY3ROb2RlIHdpdGggYGtleWBcbiAgICAgICAgICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KG1lcmdlZE1lc3NhZ2UsIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZXJyb3JfXCIuY29uY2F0KGluZGV4KVxuICAgICAgICAgICAgICB9KSA6IG1lcmdlZE1lc3NhZ2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgaWYgKCEoIXJlc3VsdC5sZW5ndGggJiYgc3ViUnVsZUZpZWxkKSkge1xuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIxO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoZnVuY3Rpb24gKHN1YlZhbHVlLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVSdWxlKFwiXCIuY29uY2F0KG5hbWUsIFwiLlwiKS5jb25jYXQoaSksIHN1YlZhbHVlLCBzdWJSdWxlRmllbGQsIG9wdGlvbnMsIG1lc3NhZ2VWYXJpYWJsZXMpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICBzdWJSZXN1bHRzID0gX2NvbnRleHQyLnNlbnQ7XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgc3ViUmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGVycm9ycykge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocHJldiksIF90b0NvbnN1bWFibGVBcnJheShlcnJvcnMpKTtcbiAgICAgICAgICB9LCBbXSkpO1xuICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgIC8vIFJlcGxhY2UgbWVzc2FnZSB3aXRoIHZhcmlhYmxlc1xuICAgICAgICAgIGt2ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBydWxlKSwge30sIHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBlbnVtOiAocnVsZS5lbnVtIHx8IFtdKS5qb2luKCcsICcpXG4gICAgICAgICAgfSwgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgICAgZmlsbFZhcmlhYmxlUmVzdWx0ID0gcmVzdWx0Lm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXBsYWNlTWVzc2FnZShlcnJvciwga3YpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIGZpbGxWYXJpYWJsZVJlc3VsdCk7XG4gICAgICAgIGNhc2UgMjY6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1sxMCwgMTVdXSk7XG4gIH0pKTtcbiAgcmV0dXJuIF92YWxpZGF0ZVJ1bGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCB2YWx1ZSwgcnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpIHtcbiAgdmFyIG5hbWUgPSBuYW1lUGF0aC5qb2luKCcuJyk7XG4gIC8vIEZpbGwgcnVsZSB3aXRoIGNvbnRleHRcbiAgdmFyIGZpbGxlZFJ1bGVzID0gcnVsZXMubWFwKGZ1bmN0aW9uIChjdXJyZW50UnVsZSwgcnVsZUluZGV4KSB7XG4gICAgdmFyIG9yaWdpblZhbGlkYXRvckZ1bmMgPSBjdXJyZW50UnVsZS52YWxpZGF0b3I7XG4gICAgdmFyIGNsb25lUnVsZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY3VycmVudFJ1bGUpLCB7fSwge1xuICAgICAgcnVsZUluZGV4OiBydWxlSW5kZXhcbiAgICB9KTtcbiAgICAvLyBSZXBsYWNlIHZhbGlkYXRvciBpZiBuZWVkZWRcbiAgICBpZiAob3JpZ2luVmFsaWRhdG9yRnVuYykge1xuICAgICAgY2xvbmVSdWxlLnZhbGlkYXRvciA9IGZ1bmN0aW9uIChydWxlLCB2YWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBoYXNQcm9taXNlID0gZmFsc2U7XG4gICAgICAgIC8vIFdyYXAgY2FsbGJhY2sgb25seSBhY2NlcHQgd2hlbiBwcm9taXNlIG5vdCBwcm92aWRlZFxuICAgICAgICB2YXIgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24gd3JhcHBlZENhbGxiYWNrKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gV2FpdCBhIHRpY2sgdG8gbWFrZSBzdXJlIHJldHVybiB0eXBlIGlzIGEgcHJvbWlzZVxuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2FybmluZyghaGFzUHJvbWlzZSwgJ1lvdXIgdmFsaWRhdG9yIGZ1bmN0aW9uIGhhcyBhbHJlYWR5IHJldHVybiBhIHByb21pc2UuIGBjYWxsYmFja2Agd2lsbCBiZSBpZ25vcmVkLicpO1xuICAgICAgICAgICAgaWYgKCFoYXNQcm9taXNlKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEdldCBwcm9taXNlXG4gICAgICAgIHZhciBwcm9taXNlID0gb3JpZ2luVmFsaWRhdG9yRnVuYyhydWxlLCB2YWwsIHdyYXBwZWRDYWxsYmFjayk7XG4gICAgICAgIGhhc1Byb21pc2UgPSBwcm9taXNlICYmIHR5cGVvZiBwcm9taXNlLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHByb21pc2UuY2F0Y2ggPT09ICdmdW5jdGlvbic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAxLiBVc2UgcHJvbWlzZSBhcyB0aGUgZmlyc3QgcHJpb3JpdHkuXG4gICAgICAgICAqIDIuIElmIHByb21pc2Ugbm90IGV4aXN0LCB1c2UgY2FsbGJhY2sgd2l0aCB3YXJuaW5nIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHdhcm5pbmcoaGFzUHJvbWlzZSwgJ2BjYWxsYmFja2AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHJldHVybiBhIHByb21pc2UgaW5zdGVhZC4nKTtcbiAgICAgICAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIgfHwgJyAnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lUnVsZTtcbiAgfSkuc29ydChmdW5jdGlvbiAoX3JlZiwgX3JlZjIpIHtcbiAgICB2YXIgdzEgPSBfcmVmLndhcm5pbmdPbmx5LFxuICAgICAgaTEgPSBfcmVmLnJ1bGVJbmRleDtcbiAgICB2YXIgdzIgPSBfcmVmMi53YXJuaW5nT25seSxcbiAgICAgIGkyID0gX3JlZjIucnVsZUluZGV4O1xuICAgIGlmICghIXcxID09PSAhIXcyKSB7XG4gICAgICAvLyBMZXQga2VlcCBvcmlnaW4gb3JkZXJcbiAgICAgIHJldHVybiBpMSAtIGkyO1xuICAgIH1cbiAgICBpZiAodzEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH0pO1xuICAvLyBEbyB2YWxpZGF0ZSBydWxlc1xuICB2YXIgc3VtbWFyeVByb21pc2U7XG4gIGlmICh2YWxpZGF0ZUZpcnN0ID09PSB0cnVlKSB7XG4gICAgLy8gPj4+Pj4gVmFsaWRhdGUgYnkgc2VyaWFsaXphdGlvblxuICAgIHN1bW1hcnlQcm9taXNlID0gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBpLCBydWxlLCBlcnJvcnM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBpZiAoIShpIDwgZmlsbGVkUnVsZXMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBydWxlID0gZmlsbGVkUnVsZXNbaV07XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1O1xuICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVSdWxlKG5hbWUsIHZhbHVlLCBydWxlLCBvcHRpb25zLCBtZXNzYWdlVmFyaWFibGVzKTtcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgZXJyb3JzID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgaWYgKCFlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVqZWN0KFt7XG4gICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgICAgICAgcnVsZTogcnVsZVxuICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIik7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3g2LCBfeDcpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0oKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gPj4+Pj4gVmFsaWRhdGUgYnkgcGFyYWxsZWxcbiAgICB2YXIgcnVsZVByb21pc2VzID0gZmlsbGVkUnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGVSdWxlKG5hbWUsIHZhbHVlLCBydWxlLCBvcHRpb25zLCBtZXNzYWdlVmFyaWFibGVzKS50aGVuKGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlcnJvcnM6IGVycm9ycyxcbiAgICAgICAgICBydWxlOiBydWxlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzdW1tYXJ5UHJvbWlzZSA9ICh2YWxpZGF0ZUZpcnN0ID8gZmluaXNoT25GaXJzdEZhaWxlZChydWxlUHJvbWlzZXMpIDogZmluaXNoT25BbGxGYWlsZWQocnVsZVByb21pc2VzKSkudGhlbihmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgICAvLyBBbHdheXMgY2hhbmdlIHRvIHJlamVjdGlvbiBmb3IgRmllbGQgdG8gY2F0Y2hcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcnMpO1xuICAgIH0pO1xuICB9XG4gIC8vIEludGVybmFsIGNhdGNoIGVycm9yIHRvIGF2b2lkIGNvbnNvbGUgZXJyb3IgbG9nLlxuICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHN1bW1hcnlQcm9taXNlO1xufVxuZnVuY3Rpb24gZmluaXNoT25BbGxGYWlsZWQoX3g4KSB7XG4gIHJldHVybiBfZmluaXNoT25BbGxGYWlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF9maW5pc2hPbkFsbEZhaWxlZCgpIHtcbiAgX2ZpbmlzaE9uQWxsRmFpbGVkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhydWxlUHJvbWlzZXMpIHtcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoXCJyZXR1cm5cIiwgUHJvbWlzZS5hbGwocnVsZVByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChlcnJvcnNMaXN0KSB7XG4gICAgICAgICAgICB2YXIgX3JlZjU7XG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gKF9yZWY1ID0gW10pLmNvbmNhdC5hcHBseShfcmVmNSwgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9yc0xpc3QpKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICAgICAgfSkpO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlMyk7XG4gIH0pKTtcbiAgcmV0dXJuIF9maW5pc2hPbkFsbEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gZmluaXNoT25GaXJzdEZhaWxlZChfeDkpIHtcbiAgcmV0dXJuIF9maW5pc2hPbkZpcnN0RmFpbGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfZmluaXNoT25GaXJzdEZhaWxlZCgpIHtcbiAgX2ZpbmlzaE9uRmlyc3RGYWlsZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHJ1bGVQcm9taXNlcykge1xuICAgIHZhciBjb3VudDtcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkge1xuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KFwicmV0dXJuXCIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBydWxlUHJvbWlzZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJ1bGVFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChydWxlRXJyb3IuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbcnVsZUVycm9yXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBydWxlUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlNCk7XG4gIH0pKTtcbiAgcmV0dXJuIF9maW5pc2hPbkZpcnN0RmFpbGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBnZXRWYWx1ZSBmcm9tIFwicmMtdXRpbC9lcy91dGlscy9nZXRcIjtcbmltcG9ydCBzZXRWYWx1ZSBmcm9tIFwicmMtdXRpbC9lcy91dGlscy9zZXRcIjtcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3R5cGVVdGlsJztcbmV4cG9ydCB7IGdldFZhbHVlLCBzZXRWYWx1ZSB9O1xuLyoqXG4gKiBDb252ZXJ0IG5hbWUgdG8gaW50ZXJuYWwgc3VwcG9ydGVkIGZvcm1hdC5cbiAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGtlZXAgc2luY2Ugd2Ugc3RpbGwgdGhpbmtpbmcgaWYgbmVlZCBzdXBwb3J0IGxpa2UgYGEuYi5jYCBmb3JtYXQuXG4gKiAnYScgPT4gWydhJ11cbiAqIDEyMyA9PiBbMTIzXVxuICogWydhJywgMTIzXSA9PiBbJ2EnLCAxMjNdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lUGF0aChwYXRoKSB7XG4gIHJldHVybiB0b0FycmF5KHBhdGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lQnlOYW1lUGF0aExpc3Qoc3RvcmUsIG5hbWVQYXRoTGlzdCkge1xuICB2YXIgbmV3U3RvcmUgPSB7fTtcbiAgbmFtZVBhdGhMaXN0LmZvckVhY2goZnVuY3Rpb24gKG5hbWVQYXRoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoKTtcbiAgICBuZXdTdG9yZSA9IHNldFZhbHVlKG5ld1N0b3JlLCBuYW1lUGF0aCwgdmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIG5ld1N0b3JlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBuYW1lUGF0aCkge1xuICByZXR1cm4gbmFtZVBhdGhMaXN0ICYmIG5hbWVQYXRoTGlzdC5zb21lKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgcmV0dXJuIG1hdGNoTmFtZVBhdGgocGF0aCwgbmFtZVBhdGgpO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaE5hbWVQYXRoKG5hbWVQYXRoLCBjaGFuZ2VkTmFtZVBhdGgpIHtcbiAgaWYgKCFuYW1lUGF0aCB8fCAhY2hhbmdlZE5hbWVQYXRoIHx8IG5hbWVQYXRoLmxlbmd0aCAhPT0gY2hhbmdlZE5hbWVQYXRoLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbmFtZVBhdGguZXZlcnkoZnVuY3Rpb24gKG5hbWVVbml0LCBpKSB7XG4gICAgcmV0dXJuIGNoYW5nZWROYW1lUGF0aFtpXSA9PT0gbmFtZVVuaXQ7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2ltaWxhcihzb3VyY2UsIHRhcmdldCkge1xuICBpZiAoc291cmNlID09PSB0YXJnZXQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIXNvdXJjZSAmJiB0YXJnZXQgfHwgc291cmNlICYmICF0YXJnZXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFzb3VyY2UgfHwgIXRhcmdldCB8fCBfdHlwZW9mKHNvdXJjZSkgIT09ICdvYmplY3QnIHx8IF90eXBlb2YodGFyZ2V0KSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIgdGFyZ2V0S2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gIHZhciBrZXlzID0gbmV3IFNldChbXS5jb25jYXQoc291cmNlS2V5cywgdGFyZ2V0S2V5cykpO1xuICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KGtleXMpLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc291cmNlVmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB2YXIgdGFyZ2V0VmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBpZiAodHlwZW9mIHNvdXJjZVZhbHVlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0YXJnZXRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VWYWx1ZSA9PT0gdGFyZ2V0VmFsdWU7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRHZXRWYWx1ZUZyb21FdmVudCh2YWx1ZVByb3BOYW1lKSB7XG4gIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBfdHlwZW9mKGV2ZW50LnRhcmdldCkgPT09ICdvYmplY3QnICYmIHZhbHVlUHJvcE5hbWUgaW4gZXZlbnQudGFyZ2V0KSB7XG4gICAgcmV0dXJuIGV2ZW50LnRhcmdldFt2YWx1ZVByb3BOYW1lXTtcbiAgfVxuICByZXR1cm4gZXZlbnQ7XG59XG4vKipcbiAqIE1vdmVzIGFuIGFycmF5IGl0ZW0gZnJvbSBvbmUgcG9zaXRpb24gaW4gYW4gYXJyYXkgdG8gYW5vdGhlci5cbiAqXG4gKiBOb3RlOiBUaGlzIGlzIGEgcHVyZSBmdW5jdGlvbiBzbyBhIG5ldyBhcnJheSB3aWxsIGJlIHJldHVybmVkLCBpbnN0ZWFkXG4gKiBvZiBhbHRlcmluZyB0aGUgYXJyYXkgYXJndW1lbnQuXG4gKlxuICogQHBhcmFtIGFycmF5ICAgICAgICAgQXJyYXkgaW4gd2hpY2ggdG8gbW92ZSBhbiBpdGVtLiAgICAgICAgIChyZXF1aXJlZClcbiAqIEBwYXJhbSBtb3ZlSW5kZXggICAgIFRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byBtb3ZlLiAgICAgICAgICAocmVxdWlyZWQpXG4gKiBAcGFyYW0gdG9JbmRleCAgICAgICBUaGUgaW5kZXggdG8gbW92ZSBpdGVtIGF0IG1vdmVJbmRleCB0by4gKHJlcXVpcmVkKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbW92ZShhcnJheSwgbW92ZUluZGV4LCB0b0luZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGlmIChtb3ZlSW5kZXggPCAwIHx8IG1vdmVJbmRleCA+PSBsZW5ndGggfHwgdG9JbmRleCA8IDAgfHwgdG9JbmRleCA+PSBsZW5ndGgpIHtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgdmFyIGl0ZW0gPSBhcnJheVttb3ZlSW5kZXhdO1xuICB2YXIgZGlmZiA9IG1vdmVJbmRleCAtIHRvSW5kZXg7XG4gIGlmIChkaWZmID4gMCkge1xuICAgIC8vIG1vdmUgbGVmdFxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFycmF5LnNsaWNlKDAsIHRvSW5kZXgpKSwgW2l0ZW1dLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UodG9JbmRleCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCBsZW5ndGgpKSk7XG4gIH1cbiAgaWYgKGRpZmYgPCAwKSB7XG4gICAgLy8gbW92ZSByaWdodFxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFycmF5LnNsaWNlKDAsIG1vdmVJbmRleCkpLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UobW92ZUluZGV4ICsgMSwgdG9JbmRleCArIDEpKSwgW2l0ZW1dLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UodG9JbmRleCArIDEsIGxlbmd0aCkpKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJuYW1lXCJdO1xuaW1wb3J0IHRvQ2hpbGRyZW5BcnJheSBmcm9tIFwicmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwicmMtdXRpbC9lcy9pc0VxdWFsXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmllbGRDb250ZXh0LCB7IEhPT0tfTUFSSyB9IGZyb20gJy4vRmllbGRDb250ZXh0JztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuL0xpc3RDb250ZXh0JztcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3V0aWxzL3R5cGVVdGlsJztcbmltcG9ydCB7IHZhbGlkYXRlUnVsZXMgfSBmcm9tICcuL3V0aWxzL3ZhbGlkYXRlVXRpbCc7XG5pbXBvcnQgeyBjb250YWluc05hbWVQYXRoLCBkZWZhdWx0R2V0VmFsdWVGcm9tRXZlbnQsIGdldE5hbWVQYXRoLCBnZXRWYWx1ZSB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbnZhciBFTVBUWV9FUlJPUlMgPSBbXTtcbmZ1bmN0aW9uIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2LCBuZXh0LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5mbykge1xuICBpZiAodHlwZW9mIHNob3VsZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzaG91bGRVcGRhdGUocHJldiwgbmV4dCwgJ3NvdXJjZScgaW4gaW5mbyA/IHtcbiAgICAgIHNvdXJjZTogaW5mby5zb3VyY2VcbiAgICB9IDoge30pO1xuICB9XG4gIHJldHVybiBwcmV2VmFsdWUgIT09IG5leHRWYWx1ZTtcbn1cbi8vIFdlIHVzZSBDbGFzcyBpbnN0ZWFkIG9mIEhvb2tzIGhlcmUgc2luY2UgaXQgd2lsbCBjb3N0IG11Y2ggY29kZSBieSB1c2luZyBIb29rcy5cbnZhciBGaWVsZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmllbGQsIF9SZWFjdCRDb21wb25lbnQpO1xuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZpZWxkKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN1YnNjcmlwdGlvbnMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGZ1bmN0aW9uIEZpZWxkKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWVsZCk7XG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgLy8gUmVnaXN0ZXIgb24gaW5pdFxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgcmVzZXRDb3VudDogMFxuICAgIH07XG4gICAgX3RoaXMuY2FuY2VsUmVnaXN0ZXJGdW5jID0gbnVsbDtcbiAgICBfdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogRm9sbG93IHN0YXRlIHNob3VsZCBub3QgbWFuYWdlbWVudCBpbiBTdGF0ZSBzaW5jZSBpdCB3aWxsIGFzeW5jIHVwZGF0ZSBieSBSZWFjdC5cbiAgICAgKiBUaGlzIG1ha2VzIGZpcnN0IHJlbmRlciBvZiBmb3JtIGNhbiBub3QgZ2V0IGNvcnJlY3Qgc3RhdGUgdmFsdWUuXG4gICAgICovXG4gICAgX3RoaXMudG91Y2hlZCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIE1hcmsgd2hlbiB0b3VjaGVkICYgdmFsaWRhdGVkLiBDdXJyZW50bHkgb25seSB1c2VkIGZvciBgZGVwZW5kZW5jaWVzYC5cbiAgICAgKiBOb3RlIHRoYXQgd2UgZG8gbm90IHRoaW5rIGZpZWxkIHdpdGggYGluaXRpYWxWYWx1ZWAgaXMgZGlydHlcbiAgICAgKiBidXQgdGhpcyB3aWxsIGJlIGJ5IGBpc0ZpZWxkRGlydHlgIGZ1bmMuXG4gICAgICovXG4gICAgX3RoaXMuZGlydHkgPSBmYWxzZTtcbiAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSB2b2lkIDA7XG4gICAgX3RoaXMucHJldlZhbGlkYXRpbmcgPSB2b2lkIDA7XG4gICAgX3RoaXMuZXJyb3JzID0gRU1QVFlfRVJST1JTO1xuICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuICAgIF90aGlzLmNhbmNlbFJlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIHByZXNlcnZlID0gX3RoaXMkcHJvcHMucHJlc2VydmUsXG4gICAgICAgIGlzTGlzdEZpZWxkID0gX3RoaXMkcHJvcHMuaXNMaXN0RmllbGQsXG4gICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lO1xuICAgICAgaWYgKF90aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYykge1xuICAgICAgICBfdGhpcy5jYW5jZWxSZWdpc3RlckZ1bmMoaXNMaXN0RmllbGQsIHByZXNlcnZlLCBnZXROYW1lUGF0aChuYW1lKSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5jYW5jZWxSZWdpc3RlckZ1bmMgPSBudWxsO1xuICAgIH07XG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBVdGlscyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgX3RoaXMuZ2V0TmFtZVBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wczIubmFtZSxcbiAgICAgICAgZmllbGRDb250ZXh0ID0gX3RoaXMkcHJvcHMyLmZpZWxkQ29udGV4dDtcbiAgICAgIHZhciBfZmllbGRDb250ZXh0JHByZWZpeE4gPSBmaWVsZENvbnRleHQucHJlZml4TmFtZSxcbiAgICAgICAgcHJlZml4TmFtZSA9IF9maWVsZENvbnRleHQkcHJlZml4TiA9PT0gdm9pZCAwID8gW10gOiBfZmllbGRDb250ZXh0JHByZWZpeE47XG4gICAgICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmVmaXhOYW1lKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5hbWUpKSA6IFtdO1xuICAgIH07XG4gICAgX3RoaXMuZ2V0UnVsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMyRydWxlcyA9IF90aGlzJHByb3BzMy5ydWxlcyxcbiAgICAgICAgcnVsZXMgPSBfdGhpcyRwcm9wczMkcnVsZXMgPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHMzJHJ1bGVzLFxuICAgICAgICBmaWVsZENvbnRleHQgPSBfdGhpcyRwcm9wczMuZmllbGRDb250ZXh0O1xuICAgICAgcmV0dXJuIHJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gcnVsZShmaWVsZENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBfdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICAvKipcbiAgICAgICAqIENsZWFuIHVwIGN1cnJlbnQgbm9kZS5cbiAgICAgICAqL1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHJlc2V0Q291bnQgPSBfcmVmLnJlc2V0Q291bnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzZXRDb3VudDogcmVzZXRDb3VudCArIDFcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gRXZlbnQgc2hvdWxkIG9ubHkgdHJpZ2dlciB3aGVuIG1ldGEgY2hhbmdlZFxuICAgIF90aGlzLm1ldGFDYWNoZSA9IG51bGw7XG4gICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCA9IGZ1bmN0aW9uIChkZXN0cm95KSB7XG4gICAgICB2YXIgb25NZXRhQ2hhbmdlID0gX3RoaXMucHJvcHMub25NZXRhQ2hhbmdlO1xuICAgICAgaWYgKG9uTWV0YUNoYW5nZSkge1xuICAgICAgICB2YXIgbWV0YSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMuZ2V0TWV0YSgpKSwge30sIHtcbiAgICAgICAgICBkZXN0cm95OiBkZXN0cm95XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzRXF1YWwoX3RoaXMubWV0YUNhY2hlLCBtZXRhKSkge1xuICAgICAgICAgIG9uTWV0YUNoYW5nZShtZXRhKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5tZXRhQ2FjaGUgPSBtZXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMubWV0YUNhY2hlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT0gRmllbGQgRW50aXR5IEludGVyZmFjZXMgPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFRyaWdnZXIgYnkgc3RvcmUgdXBkYXRlLiBDaGVjayBpZiBuZWVkIHVwZGF0ZSB0aGUgY29tcG9uZW50XG4gICAgX3RoaXMub25TdG9yZUNoYW5nZSA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwgaW5mbykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICBzaG91bGRVcGRhdGUgPSBfdGhpcyRwcm9wczQuc2hvdWxkVXBkYXRlLFxuICAgICAgICBfdGhpcyRwcm9wczQkZGVwZW5kZW4gPSBfdGhpcyRwcm9wczQuZGVwZW5kZW5jaWVzLFxuICAgICAgICBkZXBlbmRlbmNpZXMgPSBfdGhpcyRwcm9wczQkZGVwZW5kZW4gPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHM0JGRlcGVuZGVuLFxuICAgICAgICBvblJlc2V0ID0gX3RoaXMkcHJvcHM0Lm9uUmVzZXQ7XG4gICAgICB2YXIgc3RvcmUgPSBpbmZvLnN0b3JlO1xuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHZhciBwcmV2VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShwcmV2U3RvcmUpO1xuICAgICAgdmFyIGN1clZhbHVlID0gX3RoaXMuZ2V0VmFsdWUoc3RvcmUpO1xuICAgICAgdmFyIG5hbWVQYXRoTWF0Y2ggPSBuYW1lUGF0aExpc3QgJiYgY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIG5hbWVQYXRoKTtcbiAgICAgIC8vIGBzZXRGaWVsZHNWYWx1ZWAgaXMgYSBxdWljayBhY2Nlc3MgdG8gdXBkYXRlIHJlbGF0ZWQgc3RhdHVzXG4gICAgICBpZiAoaW5mby50eXBlID09PSAndmFsdWVVcGRhdGUnICYmIGluZm8uc291cmNlID09PSAnZXh0ZXJuYWwnICYmIHByZXZWYWx1ZSAhPT0gY3VyVmFsdWUpIHtcbiAgICAgICAgX3RoaXMudG91Y2hlZCA9IHRydWU7XG4gICAgICAgIF90aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuZXJyb3JzID0gRU1QVFlfRVJST1JTO1xuICAgICAgICBfdGhpcy53YXJuaW5ncyA9IEVNUFRZX0VSUk9SUztcbiAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChpbmZvLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICAgIGlmICghbmFtZVBhdGhMaXN0IHx8IG5hbWVQYXRoTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy50b3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gRU1QVFlfRVJST1JTO1xuICAgICAgICAgICAgX3RoaXMud2FybmluZ3MgPSBFTVBUWV9FUlJPUlM7XG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyTWV0YUV2ZW50KCk7XG4gICAgICAgICAgICBvblJlc2V0ID09PSBudWxsIHx8IG9uUmVzZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uUmVzZXQoKTtcbiAgICAgICAgICAgIF90aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbiBjYXNlIGZpZWxkIHdpdGggYHByZXNlcnZlID0gZmFsc2VgIG5lc3QgZGVwcyBsaWtlOlxuICAgICAgICAgKiAtIEEgPSAxID0+IHNob3cgQlxuICAgICAgICAgKiAtIEIgPSAxID0+IHNob3cgQ1xuICAgICAgICAgKiAtIFJlc2V0IEEsIG5lZWQgY2xlYW4gQiwgQ1xuICAgICAgICAgKi9cbiAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnc2V0RmllbGQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChuYW1lUGF0aE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0gaW5mby5kYXRhO1xuICAgICAgICAgICAgICBpZiAoJ3RvdWNoZWQnIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50b3VjaGVkID0gZGF0YS50b3VjaGVkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgndmFsaWRhdGluZycgaW4gZGF0YSAmJiAhKCdvcmlnaW5SQ0ZpZWxkJyBpbiBkYXRhKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkYXRlUHJvbWlzZSA9IGRhdGEudmFsaWRhdGluZyA/IFByb21pc2UucmVzb2x2ZShbXSkgOiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgnZXJyb3JzJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gZGF0YS5lcnJvcnMgfHwgRU1QVFlfRVJST1JTO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgnd2FybmluZ3MnIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy53YXJuaW5ncyA9IGRhdGEud2FybmluZ3MgfHwgRU1QVFlfRVJST1JTO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuICAgICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBIYW5kbGUgdXBkYXRlIGJ5IGBzZXRGaWVsZGAgd2l0aCBgc2hvdWxkVXBkYXRlYFxuICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSAmJiAhbmFtZVBhdGgubGVuZ3RoICYmIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2U3RvcmUsIHN0b3JlLCBwcmV2VmFsdWUsIGN1clZhbHVlLCBpbmZvKSkge1xuICAgICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RlcGVuZGVuY2llc1VwZGF0ZSc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmlnZ2VyIHdoZW4gbWFya2VkIGBkZXBlbmRlbmNpZXNgIHVwZGF0ZWQuIFJlbGF0ZWQgZmllbGRzIHdpbGwgYWxsIHVwZGF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZGVwZW5kZW5jeUxpc3QgPSBkZXBlbmRlbmNpZXMubWFwKGdldE5hbWVQYXRoKTtcbiAgICAgICAgICAgIC8vIE5vIG5lZWQgZm9yIGBuYW1lUGF0aE1hdGhgIGNoZWNrIGFuZCBgc2hvdWxkVXBkYXRlYCBjaGVjaywgc2luY2UgYHZhbHVlVXBkYXRlYCB3aWxsIGJlXG4gICAgICAgICAgICAvLyBlbWl0dGVkIGVhcmxpZXIgYW5kIHRoZXkgd2lsbCB3b3JrIHRoZXJlXG4gICAgICAgICAgICAvLyBJZiBzZXQgaXQgbWF5IGNhdXNlIHVubmVjZXNzYXJ5IHR3aWNlIHJlcmVuZGVyaW5nXG4gICAgICAgICAgICBpZiAoZGVwZW5kZW5jeUxpc3Quc29tZShmdW5jdGlvbiAoZGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICByZXR1cm4gY29udGFpbnNOYW1lUGF0aChpbmZvLnJlbGF0ZWRGaWVsZHMsIGRlcGVuZGVuY3kpO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIDEuIElmIGBuYW1lUGF0aGAgZXhpc3RzIGluIGBuYW1lUGF0aExpc3RgLCBtZWFucyBpdCdzIHJlbGF0ZWQgdmFsdWUgYW5kIHNob3VsZCB1cGRhdGVcbiAgICAgICAgICAvLyAgICAgIEZvciBleGFtcGxlIDxMaXN0IG5hbWU9XCJsaXN0XCI+PEZpZWxkIG5hbWU9e1snbGlzdCcsIDBdfT48L0xpc3Q+XG4gICAgICAgICAgLy8gICAgICBJZiBgbmFtZVBhdGhMaXN0YCBpcyBbWydsaXN0J11dIChMaXN0IHZhbHVlIHVwZGF0ZSksIEZpZWxkIHNob3VsZCBiZSB1cGRhdGVkXG4gICAgICAgICAgLy8gICAgICBJZiBgbmFtZVBhdGhMaXN0YCBpcyBbWydsaXN0JywgMF1dIChGaWVsZCB2YWx1ZSB1cGRhdGUpLCBMaXN0IHNob3VsZG4ndCBiZSB1cGRhdGVkXG4gICAgICAgICAgLy8gMi5cbiAgICAgICAgICAvLyAgIDIuMSBJZiBgZGVwZW5kZW5jaWVzYCBpcyBzZXQsIGBuYW1lYCBpcyBub3Qgc2V0IGFuZCBgc2hvdWxkVXBkYXRlYCBpcyBub3Qgc2V0LFxuICAgICAgICAgIC8vICAgICAgIGRvbid0IHVzZSBgc2hvdWxkVXBkYXRlYC4gYGRlcGVuZGVuY2llc2AgaXMgdmlldyBhcyBhIHNob3J0Y3V0IGlmIGBzaG91bGRVcGRhdGVgXG4gICAgICAgICAgLy8gICAgICAgaXMgbm90IHByb3ZpZGVkXG4gICAgICAgICAgLy8gICAyLjIgSWYgYHNob3VsZFVwZGF0ZWAgcHJvdmlkZWQsIHVzZSBjdXN0b21pemUgbG9naWMgdG8gdXBkYXRlIHRoZSBmaWVsZFxuICAgICAgICAgIC8vICAgICAgIGVsc2UgdG8gY2hlY2sgaWYgdmFsdWUgY2hhbmdlZFxuICAgICAgICAgIGlmIChuYW1lUGF0aE1hdGNoIHx8ICghZGVwZW5kZW5jaWVzLmxlbmd0aCB8fCBuYW1lUGF0aC5sZW5ndGggfHwgc2hvdWxkVXBkYXRlKSAmJiByZXF1aXJlVXBkYXRlKHNob3VsZFVwZGF0ZSwgcHJldlN0b3JlLCBzdG9yZSwgcHJldlZhbHVlLCBjdXJWYWx1ZSwgaW5mbykpIHtcbiAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFVwZGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3RoaXMudmFsaWRhdGVSdWxlcyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAvLyBXZSBzaG91bGQgZml4ZWQgbmFtZVBhdGggJiB2YWx1ZSB0byBhdm9pZCBkZXZlbG9wZXIgY2hhbmdlIHRoZW4gYnkgZm9ybSBmdW5jdGlvblxuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgdmFyIF9yZWYyID0gb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdHJpZ2dlck5hbWUgPSBfcmVmMi50cmlnZ2VyTmFtZSxcbiAgICAgICAgX3JlZjIkdmFsaWRhdGVPbmx5ID0gX3JlZjIudmFsaWRhdGVPbmx5LFxuICAgICAgICB2YWxpZGF0ZU9ubHkgPSBfcmVmMiR2YWxpZGF0ZU9ubHkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkdmFsaWRhdGVPbmx5O1xuICAgICAgLy8gRm9yY2UgY2hhbmdlIHRvIGFzeW5jIHRvIGF2b2lkIHJ1bGUgT09EIHVuZGVyIHJlbmRlclByb3BzIGZpZWxkXG4gICAgICB2YXIgcm9vdFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wczUkdmFsaWRhdGUgPSBfdGhpcyRwcm9wczUudmFsaWRhdGVGaXJzdCxcbiAgICAgICAgICB2YWxpZGF0ZUZpcnN0ID0gX3RoaXMkcHJvcHM1JHZhbGlkYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF90aGlzJHByb3BzNSR2YWxpZGF0ZSxcbiAgICAgICAgICBtZXNzYWdlVmFyaWFibGVzID0gX3RoaXMkcHJvcHM1Lm1lc3NhZ2VWYXJpYWJsZXM7XG4gICAgICAgIHZhciBmaWx0ZXJlZFJ1bGVzID0gX3RoaXMuZ2V0UnVsZXMoKTtcbiAgICAgICAgaWYgKHRyaWdnZXJOYW1lKSB7XG4gICAgICAgICAgZmlsdGVyZWRSdWxlcyA9IGZpbHRlcmVkUnVsZXMuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZGF0ZVRyaWdnZXIgPSBydWxlLnZhbGlkYXRlVHJpZ2dlcjtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVUcmlnZ2VyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRyaWdnZXJMaXN0ID0gdG9BcnJheSh2YWxpZGF0ZVRyaWdnZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJMaXN0LmluY2x1ZGVzKHRyaWdnZXJOYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvbWlzZSA9IHZhbGlkYXRlUnVsZXMobmFtZVBhdGgsIGN1cnJlbnRWYWx1ZSwgZmlsdGVyZWRSdWxlcywgb3B0aW9ucywgdmFsaWRhdGVGaXJzdCwgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJ1bGVFcnJvcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IEVNUFRZX0VSUk9SUztcbiAgICAgICAgICBpZiAoX3RoaXMudmFsaWRhdGVQcm9taXNlID09PSByb290UHJvbWlzZSkge1xuICAgICAgICAgICAgdmFyIF9ydWxlRXJyb3JzJGZvckVhY2g7XG4gICAgICAgICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgLy8gR2V0IGVycm9ycyAmIHdhcm5pbmdzXG4gICAgICAgICAgICB2YXIgbmV4dEVycm9ycyA9IFtdO1xuICAgICAgICAgICAgdmFyIG5leHRXYXJuaW5ncyA9IFtdO1xuICAgICAgICAgICAgKF9ydWxlRXJyb3JzJGZvckVhY2ggPSBydWxlRXJyb3JzLmZvckVhY2gpID09PSBudWxsIHx8IF9ydWxlRXJyb3JzJGZvckVhY2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ydWxlRXJyb3JzJGZvckVhY2guY2FsbChydWxlRXJyb3JzLCBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgICAgICAgdmFyIHdhcm5pbmdPbmx5ID0gX3JlZjMucnVsZS53YXJuaW5nT25seSxcbiAgICAgICAgICAgICAgICBfcmVmMyRlcnJvcnMgPSBfcmVmMy5lcnJvcnMsXG4gICAgICAgICAgICAgICAgZXJyb3JzID0gX3JlZjMkZXJyb3JzID09PSB2b2lkIDAgPyBFTVBUWV9FUlJPUlMgOiBfcmVmMyRlcnJvcnM7XG4gICAgICAgICAgICAgIGlmICh3YXJuaW5nT25seSkge1xuICAgICAgICAgICAgICAgIG5leHRXYXJuaW5ncy5wdXNoLmFwcGx5KG5leHRXYXJuaW5ncywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRFcnJvcnMucHVzaC5hcHBseShuZXh0RXJyb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkoZXJyb3JzKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gbmV4dEVycm9ycztcbiAgICAgICAgICAgIF90aGlzLndhcm5pbmdzID0gbmV4dFdhcm5pbmdzO1xuICAgICAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHZhbGlkYXRlT25seSkge1xuICAgICAgICByZXR1cm4gcm9vdFByb21pc2U7XG4gICAgICB9XG4gICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSByb290UHJvbWlzZTtcbiAgICAgIF90aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuICAgICAgLy8gRm9yY2UgdHJpZ2dlciByZS1yZW5kZXIgc2luY2Ugd2UgbmVlZCBzeW5jIHJlbmRlclByb3BzIHdpdGggbmV3IG1ldGFcbiAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICByZXR1cm4gcm9vdFByb21pc2U7XG4gICAgfTtcbiAgICBfdGhpcy5pc0ZpZWxkVmFsaWRhdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhIV90aGlzLnZhbGlkYXRlUHJvbWlzZTtcbiAgICB9O1xuICAgIF90aGlzLmlzRmllbGRUb3VjaGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnRvdWNoZWQ7XG4gICAgfTtcbiAgICBfdGhpcy5pc0ZpZWxkRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUb3VjaGVkIG9yIHZhbGlkYXRlIG9yIGhhcyBpbml0aWFsVmFsdWVcbiAgICAgIGlmIChfdGhpcy5kaXJ0eSB8fCBfdGhpcy5wcm9wcy5pbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEZvcm0gc2V0IGluaXRpYWxWYWx1ZVxuICAgICAgdmFyIGZpZWxkQ29udGV4dCA9IF90aGlzLnByb3BzLmZpZWxkQ29udGV4dDtcbiAgICAgIHZhciBfZmllbGRDb250ZXh0JGdldEludGUgPSBmaWVsZENvbnRleHQuZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICBnZXRJbml0aWFsVmFsdWUgPSBfZmllbGRDb250ZXh0JGdldEludGUuZ2V0SW5pdGlhbFZhbHVlO1xuICAgICAgaWYgKGdldEluaXRpYWxWYWx1ZShfdGhpcy5nZXROYW1lUGF0aCgpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgX3RoaXMuZ2V0RXJyb3JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmVycm9ycztcbiAgICB9O1xuICAgIF90aGlzLmdldFdhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLndhcm5pbmdzO1xuICAgIH07XG4gICAgX3RoaXMuaXNMaXN0RmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuaXNMaXN0RmllbGQ7XG4gICAgfTtcbiAgICBfdGhpcy5pc0xpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuaXNMaXN0O1xuICAgIH07XG4gICAgX3RoaXMuaXNQcmVzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5wcmVzZXJ2ZTtcbiAgICB9O1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENoaWxkIENvbXBvbmVudCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIF90aGlzLmdldE1ldGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBNYWtlIGVycm9yICYgdmFsaWRhdGluZyBpbiBjYWNoZSB0byBzYXZlIHBlcmZcbiAgICAgIF90aGlzLnByZXZWYWxpZGF0aW5nID0gX3RoaXMuaXNGaWVsZFZhbGlkYXRpbmcoKTtcbiAgICAgIHZhciBtZXRhID0ge1xuICAgICAgICB0b3VjaGVkOiBfdGhpcy5pc0ZpZWxkVG91Y2hlZCgpLFxuICAgICAgICB2YWxpZGF0aW5nOiBfdGhpcy5wcmV2VmFsaWRhdGluZyxcbiAgICAgICAgZXJyb3JzOiBfdGhpcy5lcnJvcnMsXG4gICAgICAgIHdhcm5pbmdzOiBfdGhpcy53YXJuaW5ncyxcbiAgICAgICAgbmFtZTogX3RoaXMuZ2V0TmFtZVBhdGgoKSxcbiAgICAgICAgdmFsaWRhdGVkOiBfdGhpcy52YWxpZGF0ZVByb21pc2UgPT09IG51bGxcbiAgICAgIH07XG4gICAgICByZXR1cm4gbWV0YTtcbiAgICB9O1xuICAgIC8vIE9ubHkgcmV0dXJuIHZhbGlkYXRlIGNoaWxkIG5vZGUuIElmIGludmFsaWRhdGUsIHdpbGwgZG8gbm90aGluZyBhYm91dCBmaWVsZC5cbiAgICBfdGhpcy5nZXRPbmx5Q2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICAgIC8vIFN1cHBvcnQgcmVuZGVyIHByb3BzXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBtZXRhID0gX3RoaXMuZ2V0TWV0YSgpO1xuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5nZXRPbmx5Q2hpbGQoY2hpbGRyZW4oX3RoaXMuZ2V0Q29udHJvbGxlZCgpLCBtZXRhLCBfdGhpcy5wcm9wcy5maWVsZENvbnRleHQpKSksIHt9LCB7XG4gICAgICAgICAgaXNGdW5jdGlvbjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIEZpbGVkIGVsZW1lbnQgb25seVxuICAgICAgdmFyIGNoaWxkTGlzdCA9IHRvQ2hpbGRyZW5BcnJheShjaGlsZHJlbik7XG4gICAgICBpZiAoY2hpbGRMaXN0Lmxlbmd0aCAhPT0gMSB8fCAhIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZExpc3RbMF0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGQ6IGNoaWxkTGlzdCxcbiAgICAgICAgICBpc0Z1bmN0aW9uOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hpbGQ6IGNoaWxkTGlzdFswXSxcbiAgICAgICAgaXNGdW5jdGlvbjogZmFsc2VcbiAgICAgIH07XG4gICAgfTtcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRmllbGQgQ29udHJvbCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBfdGhpcy5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICAgICAgdmFyIGdldEZpZWxkc1ZhbHVlID0gX3RoaXMucHJvcHMuZmllbGRDb250ZXh0LmdldEZpZWxkc1ZhbHVlO1xuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHJldHVybiBnZXRWYWx1ZShzdG9yZSB8fCBnZXRGaWVsZHNWYWx1ZSh0cnVlKSwgbmFtZVBhdGgpO1xuICAgIH07XG4gICAgX3RoaXMuZ2V0Q29udHJvbGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjaGlsZFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzNi50cmlnZ2VyLFxuICAgICAgICB2YWxpZGF0ZVRyaWdnZXIgPSBfdGhpcyRwcm9wczYudmFsaWRhdGVUcmlnZ2VyLFxuICAgICAgICBnZXRWYWx1ZUZyb21FdmVudCA9IF90aGlzJHByb3BzNi5nZXRWYWx1ZUZyb21FdmVudCxcbiAgICAgICAgbm9ybWFsaXplID0gX3RoaXMkcHJvcHM2Lm5vcm1hbGl6ZSxcbiAgICAgICAgdmFsdWVQcm9wTmFtZSA9IF90aGlzJHByb3BzNi52YWx1ZVByb3BOYW1lLFxuICAgICAgICBnZXRWYWx1ZVByb3BzID0gX3RoaXMkcHJvcHM2LmdldFZhbHVlUHJvcHMsXG4gICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzNi5maWVsZENvbnRleHQ7XG4gICAgICB2YXIgbWVyZ2VkVmFsaWRhdGVUcmlnZ2VyID0gdmFsaWRhdGVUcmlnZ2VyICE9PSB1bmRlZmluZWQgPyB2YWxpZGF0ZVRyaWdnZXIgOiBmaWVsZENvbnRleHQudmFsaWRhdGVUcmlnZ2VyO1xuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3MsXG4gICAgICAgIGdldEZpZWxkc1ZhbHVlID0gZmllbGRDb250ZXh0LmdldEZpZWxkc1ZhbHVlO1xuICAgICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzID0gZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICBkaXNwYXRjaCA9IF9nZXRJbnRlcm5hbEhvb2tzLmRpc3BhdGNoO1xuICAgICAgdmFyIHZhbHVlID0gX3RoaXMuZ2V0VmFsdWUoKTtcbiAgICAgIHZhciBtZXJnZWRHZXRWYWx1ZVByb3BzID0gZ2V0VmFsdWVQcm9wcyB8fCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHZhbHVlUHJvcE5hbWUsIHZhbCk7XG4gICAgICB9O1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIHZhciBvcmlnaW5UcmlnZ2VyRnVuYyA9IGNoaWxkUHJvcHNbdHJpZ2dlcl07XG4gICAgICB2YXIgY29udHJvbCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY2hpbGRQcm9wcyksIG1lcmdlZEdldFZhbHVlUHJvcHModmFsdWUpKTtcbiAgICAgIC8vIEFkZCB0cmlnZ2VyXG4gICAgICBjb250cm9sW3RyaWdnZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBNYXJrIGFzIHRvdWNoZWRcbiAgICAgICAgX3RoaXMudG91Y2hlZCA9IHRydWU7XG4gICAgICAgIF90aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFZhbHVlRnJvbUV2ZW50KSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZUZyb21FdmVudC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1ZhbHVlID0gZGVmYXVsdEdldFZhbHVlRnJvbUV2ZW50LmFwcGx5KHZvaWQgMCwgW3ZhbHVlUHJvcE5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gbm9ybWFsaXplKG5ld1ZhbHVlLCB2YWx1ZSwgZ2V0RmllbGRzVmFsdWUodHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAndXBkYXRlVmFsdWUnLFxuICAgICAgICAgIG5hbWVQYXRoOiBuYW1lUGF0aCxcbiAgICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcmlnaW5UcmlnZ2VyRnVuYykge1xuICAgICAgICAgIG9yaWdpblRyaWdnZXJGdW5jLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvLyBBZGQgdmFsaWRhdGVUcmlnZ2VyXG4gICAgICB2YXIgdmFsaWRhdGVUcmlnZ2VyTGlzdCA9IHRvQXJyYXkobWVyZ2VkVmFsaWRhdGVUcmlnZ2VyIHx8IFtdKTtcbiAgICAgIHZhbGlkYXRlVHJpZ2dlckxpc3QuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlck5hbWUpIHtcbiAgICAgICAgLy8gV3JhcCBhZGRpdGlvbmFsIGZ1bmN0aW9uIG9mIGNvbXBvbmVudCwgc28gdGhhdCB3ZSBjYW4gZ2V0IGxhdGVzdCB2YWx1ZSBmcm9tIHN0b3JlXG4gICAgICAgIHZhciBvcmlnaW5UcmlnZ2VyID0gY29udHJvbFt0cmlnZ2VyTmFtZV07XG4gICAgICAgIGNvbnRyb2xbdHJpZ2dlck5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvcmlnaW5UcmlnZ2VyKSB7XG4gICAgICAgICAgICBvcmlnaW5UcmlnZ2VyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQWx3YXlzIHVzZSBsYXRlc3QgcnVsZXNcbiAgICAgICAgICB2YXIgcnVsZXMgPSBfdGhpcy5wcm9wcy5ydWxlcztcbiAgICAgICAgICBpZiAocnVsZXMgJiYgcnVsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBXZSBkaXNwYXRjaCB2YWxpZGF0ZSB0byByb290LFxuICAgICAgICAgICAgLy8gc2luY2UgaXQgd2lsbCB1cGRhdGUgcmVsYXRlZCBkYXRhIHdpdGggb3RoZXIgZmllbGQgd2l0aCBzYW1lIG5hbWVcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3ZhbGlkYXRlRmllbGQnLFxuICAgICAgICAgICAgICBuYW1lUGF0aDogbmFtZVBhdGgsXG4gICAgICAgICAgICAgIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29udHJvbDtcbiAgICB9O1xuICAgIGlmIChwcm9wcy5maWVsZENvbnRleHQpIHtcbiAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gcHJvcHMuZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG4gICAgICB2YXIgX2dldEludGVybmFsSG9va3MyID0gZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICBpbml0RW50aXR5VmFsdWUgPSBfZ2V0SW50ZXJuYWxIb29rczIuaW5pdEVudGl0eVZhbHVlO1xuICAgICAgaW5pdEVudGl0eVZhbHVlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhGaWVsZCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvdWxkVXBkYXRlID0gX3RoaXMkcHJvcHM3LnNob3VsZFVwZGF0ZSxcbiAgICAgICAgZmllbGRDb250ZXh0ID0gX3RoaXMkcHJvcHM3LmZpZWxkQ29udGV4dDtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgICAvLyBSZWdpc3RlciBvbiBpbml0XG4gICAgICBpZiAoZmllbGRDb250ZXh0KSB7XG4gICAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG4gICAgICAgIHZhciBfZ2V0SW50ZXJuYWxIb29rczMgPSBnZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICAgICAgcmVnaXN0ZXJGaWVsZCA9IF9nZXRJbnRlcm5hbEhvb2tzMy5yZWdpc3RlckZpZWxkO1xuICAgICAgICB0aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYyA9IHJlZ2lzdGVyRmllbGQodGhpcyk7XG4gICAgICB9XG4gICAgICAvLyBPbmUgbW9yZSByZW5kZXIgZm9yIGNvbXBvbmVudCBpbiBjYXNlIGZpZWxkcyBub3QgcmVhZHlcbiAgICAgIGlmIChzaG91bGRVcGRhdGUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2FuY2VsUmVnaXN0ZXIoKTtcbiAgICAgIHRoaXMudHJpZ2dlck1ldGFFdmVudCh0cnVlKTtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZVJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZVJlbmRlcigpIHtcbiAgICAgIGlmICghdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcmVzZXRDb3VudCA9IHRoaXMuc3RhdGUucmVzZXRDb3VudDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgX3RoaXMkZ2V0T25seUNoaWxkID0gdGhpcy5nZXRPbmx5Q2hpbGQoY2hpbGRyZW4pLFxuICAgICAgICBjaGlsZCA9IF90aGlzJGdldE9ubHlDaGlsZC5jaGlsZCxcbiAgICAgICAgaXNGdW5jdGlvbiA9IF90aGlzJGdldE9ubHlDaGlsZC5pc0Z1bmN0aW9uO1xuICAgICAgLy8gTm90IG5lZWQgdG8gYGNsb25lRWxlbWVudGAgc2luY2UgdXNlciBjYW4gaGFuZGxlIHRoaXMgaW4gcmVuZGVyIGZ1bmN0aW9uIHNlbGZcbiAgICAgIHZhciByZXR1cm5DaGlsZE5vZGU7XG4gICAgICBpZiAoaXNGdW5jdGlvbikge1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSBjaGlsZDtcbiAgICAgIH0gZWxzZSBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuQ2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgdGhpcy5nZXRDb250cm9sbGVkKGNoaWxkLnByb3BzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKCFjaGlsZCwgJ2BjaGlsZHJlbmAgb2YgRmllbGQgaXMgbm90IHZhbGlkYXRlIFJlYWN0RWxlbWVudC4nKTtcbiAgICAgICAgcmV0dXJuQ2hpbGROb2RlID0gY2hpbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAga2V5OiByZXNldENvdW50XG4gICAgICB9LCByZXR1cm5DaGlsZE5vZGUpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRmllbGQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5GaWVsZC5jb250ZXh0VHlwZSA9IEZpZWxkQ29udGV4dDtcbkZpZWxkLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHJpZ2dlcjogJ29uQ2hhbmdlJyxcbiAgdmFsdWVQcm9wTmFtZTogJ3ZhbHVlJ1xufTtcbmZ1bmN0aW9uIFdyYXBwZXJGaWVsZChfcmVmNSkge1xuICB2YXIgbmFtZSA9IF9yZWY1Lm5hbWUsXG4gICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY1LCBfZXhjbHVkZWQpO1xuICB2YXIgZmllbGRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChGaWVsZENvbnRleHQpO1xuICB2YXIgbGlzdENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgdmFyIG5hbWVQYXRoID0gbmFtZSAhPT0gdW5kZWZpbmVkID8gZ2V0TmFtZVBhdGgobmFtZSkgOiB1bmRlZmluZWQ7XG4gIHZhciBrZXkgPSAna2VlcCc7XG4gIGlmICghcmVzdFByb3BzLmlzTGlzdEZpZWxkKSB7XG4gICAga2V5ID0gXCJfXCIuY29uY2F0KChuYW1lUGF0aCB8fCBbXSkuam9pbignXycpKTtcbiAgfVxuICAvLyBXYXJuaW5nIGlmIGl0J3MgYSBkaXJlY3RseSBsaXN0IGZpZWxkLlxuICAvLyBXZSBjYW4gc3RpbGwgc3VwcG9ydCBtdWx0aXBsZSBsZXZlbCBmaWVsZCBwcmVzZXJ2ZS5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcmVzdFByb3BzLnByZXNlcnZlID09PSBmYWxzZSAmJiByZXN0UHJvcHMuaXNMaXN0RmllbGQgJiYgbmFtZVBhdGgubGVuZ3RoIDw9IDEpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCAnYHByZXNlcnZlYCBzaG91bGQgbm90IGFwcGx5IG9uIEZvcm0uTGlzdCBmaWVsZHMuJyk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkLCBfZXh0ZW5kcyh7XG4gICAga2V5OiBrZXksXG4gICAgbmFtZTogbmFtZVBhdGgsXG4gICAgaXNMaXN0RmllbGQ6ICEhbGlzdENvbnRleHRcbiAgfSwgcmVzdFByb3BzLCB7XG4gICAgZmllbGRDb250ZXh0OiBmaWVsZENvbnRleHRcbiAgfSkpO1xufVxuZXhwb3J0IGRlZmF1bHQgV3JhcHBlckZpZWxkOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0IEZpZWxkQ29udGV4dCBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgeyBtb3ZlIGFzIF9tb3ZlLCBnZXROYW1lUGF0aCB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuL0xpc3RDb250ZXh0JztcbnZhciBMaXN0ID0gZnVuY3Rpb24gTGlzdChfcmVmKSB7XG4gIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgIGluaXRpYWxWYWx1ZSA9IF9yZWYuaW5pdGlhbFZhbHVlLFxuICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBydWxlcyA9IF9yZWYucnVsZXMsXG4gICAgdmFsaWRhdGVUcmlnZ2VyID0gX3JlZi52YWxpZGF0ZVRyaWdnZXIsXG4gICAgaXNMaXN0RmllbGQgPSBfcmVmLmlzTGlzdEZpZWxkO1xuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRmllbGRDb250ZXh0KTtcbiAgdmFyIHdyYXBwZXJMaXN0Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICB2YXIga2V5UmVmID0gUmVhY3QudXNlUmVmKHtcbiAgICBrZXlzOiBbXSxcbiAgICBpZDogMFxuICB9KTtcbiAgdmFyIGtleU1hbmFnZXIgPSBrZXlSZWYuY3VycmVudDtcbiAgdmFyIHByZWZpeE5hbWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50UHJlZml4TmFtZSA9IGdldE5hbWVQYXRoKGNvbnRleHQucHJlZml4TmFtZSkgfHwgW107XG4gICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGFyZW50UHJlZml4TmFtZSksIF90b0NvbnN1bWFibGVBcnJheShnZXROYW1lUGF0aChuYW1lKSkpO1xuICB9LCBbY29udGV4dC5wcmVmaXhOYW1lLCBuYW1lXSk7XG4gIHZhciBmaWVsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb250ZXh0KSwge30sIHtcbiAgICAgIHByZWZpeE5hbWU6IHByZWZpeE5hbWVcbiAgICB9KTtcbiAgfSwgW2NvbnRleHQsIHByZWZpeE5hbWVdKTtcbiAgLy8gTGlzdCBjb250ZXh0XG4gIHZhciBsaXN0Q29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRLZXk6IGZ1bmN0aW9uIGdldEtleShuYW1lUGF0aCkge1xuICAgICAgICB2YXIgbGVuID0gcHJlZml4TmFtZS5sZW5ndGg7XG4gICAgICAgIHZhciBwYXRoTmFtZSA9IG5hbWVQYXRoW2xlbl07XG4gICAgICAgIHJldHVybiBba2V5TWFuYWdlci5rZXlzW3BhdGhOYW1lXSwgbmFtZVBhdGguc2xpY2UobGVuICsgMSldO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtwcmVmaXhOYW1lXSk7XG4gIC8vIFVzZXIgc2hvdWxkIG5vdCBwYXNzIGBjaGlsZHJlbmAgYXMgb3RoZXIgdHlwZS5cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHdhcm5pbmcoZmFsc2UsICdGb3JtLkxpc3Qgb25seSBhY2NlcHRzIGZ1bmN0aW9uIGFzIGNoaWxkcmVuLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBzaG91bGRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRVcGRhdGUocHJldlZhbHVlLCBuZXh0VmFsdWUsIF9yZWYyKSB7XG4gICAgdmFyIHNvdXJjZSA9IF9yZWYyLnNvdXJjZTtcbiAgICBpZiAoc291cmNlID09PSAnaW50ZXJuYWwnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBwcmV2VmFsdWUgIT09IG5leHRWYWx1ZTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGxpc3RDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmaWVsZENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGQsIHtcbiAgICBuYW1lOiBbXSxcbiAgICBzaG91bGRVcGRhdGU6IHNob3VsZFVwZGF0ZSxcbiAgICBydWxlczogcnVsZXMsXG4gICAgdmFsaWRhdGVUcmlnZ2VyOiB2YWxpZGF0ZVRyaWdnZXIsXG4gICAgaW5pdGlhbFZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgaXNMaXN0OiB0cnVlLFxuICAgIGlzTGlzdEZpZWxkOiBpc0xpc3RGaWVsZCAhPT0gbnVsbCAmJiBpc0xpc3RGaWVsZCAhPT0gdm9pZCAwID8gaXNMaXN0RmllbGQgOiAhIXdyYXBwZXJMaXN0Q29udGV4dFxuICB9LCBmdW5jdGlvbiAoX3JlZjMsIG1ldGEpIHtcbiAgICB2YXIgX3JlZjMkdmFsdWUgPSBfcmVmMy52YWx1ZSxcbiAgICAgIHZhbHVlID0gX3JlZjMkdmFsdWUgPT09IHZvaWQgMCA/IFtdIDogX3JlZjMkdmFsdWUsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYzLm9uQ2hhbmdlO1xuICAgIHZhciBnZXRGaWVsZFZhbHVlID0gY29udGV4dC5nZXRGaWVsZFZhbHVlO1xuICAgIHZhciBnZXROZXdWYWx1ZSA9IGZ1bmN0aW9uIGdldE5ld1ZhbHVlKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IGdldEZpZWxkVmFsdWUocHJlZml4TmFtZSB8fCBbXSk7XG4gICAgICByZXR1cm4gdmFsdWVzIHx8IFtdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWx3YXlzIGdldCBsYXRlc3QgdmFsdWUgaW4gY2FzZSB1c2VyIHVwZGF0ZSBmaWVsZHMgYnkgYGZvcm1gIGFwaS5cbiAgICAgKi9cbiAgICB2YXIgb3BlcmF0aW9ucyA9IHtcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGRlZmF1bHRWYWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgLy8gTWFwcGluZyBrZXlzXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGdldE5ld1ZhbHVlKCk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIGtleU1hbmFnZXIua2V5cyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoa2V5TWFuYWdlci5rZXlzLnNsaWNlKDAsIGluZGV4KSksIFtrZXlNYW5hZ2VyLmlkXSwgX3RvQ29uc3VtYWJsZUFycmF5KGtleU1hbmFnZXIua2V5cy5zbGljZShpbmRleCkpKTtcbiAgICAgICAgICBvbkNoYW5nZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5ld1ZhbHVlLnNsaWNlKDAsIGluZGV4KSksIFtkZWZhdWx0VmFsdWVdLCBfdG9Db25zdW1hYmxlQXJyYXkobmV3VmFsdWUuc2xpY2UoaW5kZXgpKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBuZXdWYWx1ZS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgdGhlIGFkZCBmdW5jdGlvbiBzaG91bGQgYmUgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXIuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleU1hbmFnZXIua2V5cyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoa2V5TWFuYWdlci5rZXlzKSwgW2tleU1hbmFnZXIuaWRdKTtcbiAgICAgICAgICBvbkNoYW5nZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5ld1ZhbHVlKSwgW2RlZmF1bHRWYWx1ZV0pKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlNYW5hZ2VyLmlkICs9IDE7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoaW5kZXgpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0TmV3VmFsdWUoKTtcbiAgICAgICAgdmFyIGluZGV4U2V0ID0gbmV3IFNldChBcnJheS5pc0FycmF5KGluZGV4KSA/IGluZGV4IDogW2luZGV4XSk7XG4gICAgICAgIGlmIChpbmRleFNldC5zaXplIDw9IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAga2V5TWFuYWdlci5rZXlzID0ga2V5TWFuYWdlci5rZXlzLmZpbHRlcihmdW5jdGlvbiAoXywga2V5c0luZGV4KSB7XG4gICAgICAgICAgcmV0dXJuICFpbmRleFNldC5oYXMoa2V5c0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRyaWdnZXIgc3RvcmUgY2hhbmdlXG4gICAgICAgIG9uQ2hhbmdlKG5ld1ZhbHVlLmZpbHRlcihmdW5jdGlvbiAoXywgdmFsdWVJbmRleCkge1xuICAgICAgICAgIHJldHVybiAhaW5kZXhTZXQuaGFzKHZhbHVlSW5kZXgpO1xuICAgICAgICB9KSk7XG4gICAgICB9LFxuICAgICAgbW92ZTogZnVuY3Rpb24gbW92ZShmcm9tLCB0bykge1xuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0TmV3VmFsdWUoKTtcbiAgICAgICAgLy8gRG8gbm90IGhhbmRsZSBvdXQgb2YgcmFuZ2VcbiAgICAgICAgaWYgKGZyb20gPCAwIHx8IGZyb20gPj0gbmV3VmFsdWUubGVuZ3RoIHx8IHRvIDwgMCB8fCB0byA+PSBuZXdWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAga2V5TWFuYWdlci5rZXlzID0gX21vdmUoa2V5TWFuYWdlci5rZXlzLCBmcm9tLCB0byk7XG4gICAgICAgIC8vIFRyaWdnZXIgc3RvcmUgY2hhbmdlXG4gICAgICAgIG9uQ2hhbmdlKF9tb3ZlKG5ld1ZhbHVlLCBmcm9tLCB0bykpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGxpc3RWYWx1ZSA9IHZhbHVlIHx8IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShsaXN0VmFsdWUpKSB7XG4gICAgICBsaXN0VmFsdWUgPSBbXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQ3VycmVudCB2YWx1ZSBvZiAnXCIuY29uY2F0KHByZWZpeE5hbWUuam9pbignID4gJyksIFwiJyBpcyBub3QgYW4gYXJyYXkgdHlwZS5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW4obGlzdFZhbHVlLm1hcChmdW5jdGlvbiAoX18sIGluZGV4KSB7XG4gICAgICB2YXIga2V5ID0ga2V5TWFuYWdlci5rZXlzW2luZGV4XTtcbiAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlNYW5hZ2VyLmtleXNbaW5kZXhdID0ga2V5TWFuYWdlci5pZDtcbiAgICAgICAga2V5ID0ga2V5TWFuYWdlci5rZXlzW2luZGV4XTtcbiAgICAgICAga2V5TWFuYWdlci5pZCArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogaW5kZXgsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBpc0xpc3RGaWVsZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9KSwgb3BlcmF0aW9ucywgbWV0YSk7XG4gIH0pKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbnZhciBTUExJVCA9ICdfX0BmaWVsZF9zcGxpdF9fJztcbi8qKlxuICogQ29udmVydCBuYW1lIHBhdGggaW50byBzdHJpbmcgdG8gZmFzdCB0aGUgZmV0Y2ggc3BlZWQgb2YgTWFwLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUobmFtZVBhdGgpIHtcbiAgcmV0dXJuIG5hbWVQYXRoLm1hcChmdW5jdGlvbiAoY2VsbCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChfdHlwZW9mKGNlbGwpLCBcIjpcIikuY29uY2F0KGNlbGwpO1xuICB9KVxuICAvLyBNYWdpYyBzcGxpdFxuICAuam9pbihTUExJVCk7XG59XG4vKipcbiAqIE5hbWVNYXAgbGlrZSBhIGBNYXBgIGJ1dCBhY2NlcHRzIGBzdHJpbmdbXWAgYXMga2V5LlxuICovXG52YXIgTmFtZU1hcCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE5hbWVNYXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hbWVNYXApO1xuICAgIHRoaXMua3ZzID0gbmV3IE1hcCgpO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhOYW1lTWFwLCBbe1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMua3ZzLnNldChub3JtYWxpemUoa2V5KSwgdmFsdWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMua3ZzLmdldChub3JtYWxpemUoa2V5KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoa2V5LCB1cGRhdGVyKSB7XG4gICAgICB2YXIgb3JpZ2luID0gdGhpcy5nZXQoa2V5KTtcbiAgICAgIHZhciBuZXh0ID0gdXBkYXRlcihvcmlnaW4pO1xuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldChrZXksIG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgIHRoaXMua3ZzLmRlbGV0ZShub3JtYWxpemUoa2V5KSk7XG4gICAgfVxuICAgIC8vIFNpbmNlIHdlIG9ubHkgdXNlIHRoaXMgaW4gdGVzdCwgbGV0IHNpbXBseSByZWFsaXplIHRoaXNcbiAgfSwge1xuICAgIGtleTogXCJtYXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFwKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMua3ZzLmVudHJpZXMoKSkubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgIGtleSA9IF9yZWYyWzBdLFxuICAgICAgICAgIHZhbHVlID0gX3JlZjJbMV07XG4gICAgICAgIHZhciBjZWxscyA9IGtleS5zcGxpdChTUExJVCk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAga2V5OiBjZWxscy5tYXAoZnVuY3Rpb24gKGNlbGwpIHtcbiAgICAgICAgICAgIHZhciBfY2VsbCRtYXRjaCA9IGNlbGwubWF0Y2goL14oW146XSopOiguKikkLyksXG4gICAgICAgICAgICAgIF9jZWxsJG1hdGNoMiA9IF9zbGljZWRUb0FycmF5KF9jZWxsJG1hdGNoLCAzKSxcbiAgICAgICAgICAgICAgdHlwZSA9IF9jZWxsJG1hdGNoMlsxXSxcbiAgICAgICAgICAgICAgdW5pdCA9IF9jZWxsJG1hdGNoMlsyXTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlID09PSAnbnVtYmVyJyA/IE51bWJlcih1bml0KSA6IHVuaXQ7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICB2YXIganNvbiA9IHt9O1xuICAgICAgdGhpcy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBrZXkgPSBfcmVmMy5rZXksXG4gICAgICAgICAgdmFsdWUgPSBfcmVmMy52YWx1ZTtcbiAgICAgICAganNvbltrZXkuam9pbignLicpXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBOYW1lTWFwO1xufSgpO1xuZXhwb3J0IGRlZmF1bHQgTmFtZU1hcDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xudmFyIF9leGNsdWRlZCA9IFtcIm5hbWVcIl07XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgeyBhbGxQcm9taXNlRmluaXNoIH0gZnJvbSAnLi91dGlscy9hc3luY1V0aWwnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tIFwicmMtdXRpbC9lcy91dGlscy9zZXRcIjtcbmltcG9ydCB7IGRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzIH0gZnJvbSAnLi91dGlscy9tZXNzYWdlcyc7XG5pbXBvcnQgTmFtZU1hcCBmcm9tICcuL3V0aWxzL05hbWVNYXAnO1xuaW1wb3J0IHsgY2xvbmVCeU5hbWVQYXRoTGlzdCwgY29udGFpbnNOYW1lUGF0aCwgZ2V0TmFtZVBhdGgsIGdldFZhbHVlLCBtYXRjaE5hbWVQYXRoLCBzZXRWYWx1ZSB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbmV4cG9ydCB2YXIgRm9ybVN0b3JlID0gLyojX19QVVJFX18qL19jcmVhdGVDbGFzcyhmdW5jdGlvbiBGb3JtU3RvcmUoZm9yY2VSb290VXBkYXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtU3RvcmUpO1xuICB0aGlzLmZvcm1Ib29rZWQgPSBmYWxzZTtcbiAgdGhpcy5mb3JjZVJvb3RVcGRhdGUgPSB2b2lkIDA7XG4gIHRoaXMuc3Vic2NyaWJhYmxlID0gdHJ1ZTtcbiAgdGhpcy5zdG9yZSA9IHt9O1xuICB0aGlzLmZpZWxkRW50aXRpZXMgPSBbXTtcbiAgdGhpcy5pbml0aWFsVmFsdWVzID0ge307XG4gIHRoaXMuY2FsbGJhY2tzID0ge307XG4gIHRoaXMudmFsaWRhdGVNZXNzYWdlcyA9IG51bGw7XG4gIHRoaXMucHJlc2VydmUgPSBudWxsO1xuICB0aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICB0aGlzLmdldEZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEZpZWxkVmFsdWU6IF90aGlzLmdldEZpZWxkVmFsdWUsXG4gICAgICBnZXRGaWVsZHNWYWx1ZTogX3RoaXMuZ2V0RmllbGRzVmFsdWUsXG4gICAgICBnZXRGaWVsZEVycm9yOiBfdGhpcy5nZXRGaWVsZEVycm9yLFxuICAgICAgZ2V0RmllbGRXYXJuaW5nOiBfdGhpcy5nZXRGaWVsZFdhcm5pbmcsXG4gICAgICBnZXRGaWVsZHNFcnJvcjogX3RoaXMuZ2V0RmllbGRzRXJyb3IsXG4gICAgICBpc0ZpZWxkc1RvdWNoZWQ6IF90aGlzLmlzRmllbGRzVG91Y2hlZCxcbiAgICAgIGlzRmllbGRUb3VjaGVkOiBfdGhpcy5pc0ZpZWxkVG91Y2hlZCxcbiAgICAgIGlzRmllbGRWYWxpZGF0aW5nOiBfdGhpcy5pc0ZpZWxkVmFsaWRhdGluZyxcbiAgICAgIGlzRmllbGRzVmFsaWRhdGluZzogX3RoaXMuaXNGaWVsZHNWYWxpZGF0aW5nLFxuICAgICAgcmVzZXRGaWVsZHM6IF90aGlzLnJlc2V0RmllbGRzLFxuICAgICAgc2V0RmllbGRzOiBfdGhpcy5zZXRGaWVsZHMsXG4gICAgICBzZXRGaWVsZFZhbHVlOiBfdGhpcy5zZXRGaWVsZFZhbHVlLFxuICAgICAgc2V0RmllbGRzVmFsdWU6IF90aGlzLnNldEZpZWxkc1ZhbHVlLFxuICAgICAgdmFsaWRhdGVGaWVsZHM6IF90aGlzLnZhbGlkYXRlRmllbGRzLFxuICAgICAgc3VibWl0OiBfdGhpcy5zdWJtaXQsXG4gICAgICBfaW5pdDogdHJ1ZSxcbiAgICAgIGdldEludGVybmFsSG9va3M6IF90aGlzLmdldEludGVybmFsSG9va3NcbiAgICB9O1xuICB9O1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gSW50ZXJuYWwgSG9va3MgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIHRoaXMuZ2V0SW50ZXJuYWxIb29rcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBIT09LX01BUkspIHtcbiAgICAgIF90aGlzLmZvcm1Ib29rZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcGF0Y2g6IF90aGlzLmRpc3BhdGNoLFxuICAgICAgICBpbml0RW50aXR5VmFsdWU6IF90aGlzLmluaXRFbnRpdHlWYWx1ZSxcbiAgICAgICAgcmVnaXN0ZXJGaWVsZDogX3RoaXMucmVnaXN0ZXJGaWVsZCxcbiAgICAgICAgdXNlU3Vic2NyaWJlOiBfdGhpcy51c2VTdWJzY3JpYmUsXG4gICAgICAgIHNldEluaXRpYWxWYWx1ZXM6IF90aGlzLnNldEluaXRpYWxWYWx1ZXMsXG4gICAgICAgIGRlc3Ryb3lGb3JtOiBfdGhpcy5kZXN0cm95Rm9ybSxcbiAgICAgICAgc2V0Q2FsbGJhY2tzOiBfdGhpcy5zZXRDYWxsYmFja3MsXG4gICAgICAgIHNldFZhbGlkYXRlTWVzc2FnZXM6IF90aGlzLnNldFZhbGlkYXRlTWVzc2FnZXMsXG4gICAgICAgIGdldEZpZWxkczogX3RoaXMuZ2V0RmllbGRzLFxuICAgICAgICBzZXRQcmVzZXJ2ZTogX3RoaXMuc2V0UHJlc2VydmUsXG4gICAgICAgIGdldEluaXRpYWxWYWx1ZTogX3RoaXMuZ2V0SW5pdGlhbFZhbHVlLFxuICAgICAgICByZWdpc3RlcldhdGNoOiBfdGhpcy5yZWdpc3RlcldhdGNoXG4gICAgICB9O1xuICAgIH1cbiAgICB3YXJuaW5nKGZhbHNlLCAnYGdldEludGVybmFsSG9va3NgIGlzIGludGVybmFsIHVzYWdlLiBTaG91bGQgbm90IGNhbGwgZGlyZWN0bHkuJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG4gIHRoaXMudXNlU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliYWJsZSkge1xuICAgIF90aGlzLnN1YnNjcmliYWJsZSA9IHN1YnNjcmliYWJsZTtcbiAgfTtcbiAgLyoqXG4gICAqIFJlY29yZCBwcmV2IEZvcm0gdW5tb3VudCBmaWVsZEVudGl0aWVzIHdoaWNoIGNvbmZpZyBwcmVzZXJ2ZSBmYWxzZS5cbiAgICogVGhpcyBuZWVkIHRvIGJlIHJlZmlsbCB3aXRoIGluaXRpYWxWYWx1ZXMgaW5zdGVhZCBvZiBzdG9yZSB2YWx1ZS5cbiAgICovXG4gIHRoaXMucHJldldpdGhvdXRQcmVzZXJ2ZXMgPSBudWxsO1xuICAvKipcbiAgICogRmlyc3QgdGltZSBgc2V0SW5pdGlhbFZhbHVlc2Agc2hvdWxkIHVwZGF0ZSBzdG9yZSB3aXRoIGluaXRpYWwgdmFsdWVcbiAgICovXG4gIHRoaXMuc2V0SW5pdGlhbFZhbHVlcyA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzLCBpbml0KSB7XG4gICAgX3RoaXMuaW5pdGlhbFZhbHVlcyA9IGluaXRpYWxWYWx1ZXMgfHwge307XG4gICAgaWYgKGluaXQpIHtcbiAgICAgIHZhciBfdGhpcyRwcmV2V2l0aG91dFByZXM7XG4gICAgICB2YXIgbmV4dFN0b3JlID0gbWVyZ2UoaW5pdGlhbFZhbHVlcywgX3RoaXMuc3RvcmUpO1xuICAgICAgLy8gV2Ugd2lsbCB0YWtlIGNvbnNpZGVyIHByZXYgZm9ybSB1bm1vdW50IGZpZWxkcy5cbiAgICAgIC8vIFdoZW4gdGhlIGZpZWxkIGlzIG5vdCBgcHJlc2VydmVgLCB3ZSBuZWVkIGZpbGwgdGhpcyB3aXRoIGluaXRpYWxWYWx1ZXMgaW5zdGVhZCBvZiBzdG9yZS5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cbiAgICAgIChfdGhpcyRwcmV2V2l0aG91dFByZXMgPSBfdGhpcy5wcmV2V2l0aG91dFByZXNlcnZlcykgPT09IG51bGwgfHwgX3RoaXMkcHJldldpdGhvdXRQcmVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwcmV2V2l0aG91dFByZXMubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBuYW1lUGF0aCA9IF9yZWYua2V5O1xuICAgICAgICBuZXh0U3RvcmUgPSBzZXRWYWx1ZShuZXh0U3RvcmUsIG5hbWVQYXRoLCBnZXRWYWx1ZShpbml0aWFsVmFsdWVzLCBuYW1lUGF0aCkpO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5wcmV2V2l0aG91dFByZXNlcnZlcyA9IG51bGw7XG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShuZXh0U3RvcmUpO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5kZXN0cm95Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldldpdGhvdXRQcmVzZXJ2ZXMgPSBuZXcgTmFtZU1hcCgpO1xuICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICBpZiAoIV90aGlzLmlzTWVyZ2VkUHJlc2VydmUoZW50aXR5LmlzUHJlc2VydmUoKSkpIHtcbiAgICAgICAgcHJldldpdGhvdXRQcmVzZXJ2ZXMuc2V0KGVudGl0eS5nZXROYW1lUGF0aCgpLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5wcmV2V2l0aG91dFByZXNlcnZlcyA9IHByZXZXaXRob3V0UHJlc2VydmVzO1xuICB9O1xuICB0aGlzLmdldEluaXRpYWxWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgIHZhciBpbml0VmFsdWUgPSBnZXRWYWx1ZShfdGhpcy5pbml0aWFsVmFsdWVzLCBuYW1lUGF0aCk7XG4gICAgLy8gTm90IGNsb25lRGVlcCB3aGVuIHdpdGhvdXQgYG5hbWVQYXRoYFxuICAgIHJldHVybiBuYW1lUGF0aC5sZW5ndGggPyBtZXJnZShpbml0VmFsdWUpIDogaW5pdFZhbHVlO1xuICB9O1xuICB0aGlzLnNldENhbGxiYWNrcyA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHtcbiAgICBfdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gIH07XG4gIHRoaXMuc2V0VmFsaWRhdGVNZXNzYWdlcyA9IGZ1bmN0aW9uICh2YWxpZGF0ZU1lc3NhZ2VzKSB7XG4gICAgX3RoaXMudmFsaWRhdGVNZXNzYWdlcyA9IHZhbGlkYXRlTWVzc2FnZXM7XG4gIH07XG4gIHRoaXMuc2V0UHJlc2VydmUgPSBmdW5jdGlvbiAocHJlc2VydmUpIHtcbiAgICBfdGhpcy5wcmVzZXJ2ZSA9IHByZXNlcnZlO1xuICB9O1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBXYXRjaCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHRoaXMud2F0Y2hMaXN0ID0gW107XG4gIHRoaXMucmVnaXN0ZXJXYXRjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIF90aGlzLndhdGNoTGlzdC5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMud2F0Y2hMaXN0ID0gX3RoaXMud2F0Y2hMaXN0LmZpbHRlcihmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuICE9PSBjYWxsYmFjaztcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG4gIHRoaXMubm90aWZ5V2F0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5hbWVQYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICAvLyBObyBuZWVkIHRvIGNvc3QgcGVyZiB3aGVuIG5vdGhpbmcgbmVlZCB0byB3YXRjaFxuICAgIGlmIChfdGhpcy53YXRjaExpc3QubGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gX3RoaXMuZ2V0RmllbGRzVmFsdWUoKTtcbiAgICAgIHZhciBhbGxWYWx1ZXMgPSBfdGhpcy5nZXRGaWVsZHNWYWx1ZSh0cnVlKTtcbiAgICAgIF90aGlzLndhdGNoTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayh2YWx1ZXMsIGFsbFZhbHVlcywgbmFtZVBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PSBEZXYgV2FybmluZyA9PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgdGhpcy53YXJuaW5nVW5ob29rZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV90aGlzLnRpbWVvdXRJZCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgX3RoaXMudGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIGlmICghX3RoaXMuZm9ybUhvb2tlZCkge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdJbnN0YW5jZSBjcmVhdGVkIGJ5IGB1c2VGb3JtYCBpcyBub3QgY29ubmVjdGVkIHRvIGFueSBGb3JtIGVsZW1lbnQuIEZvcmdldCB0byBwYXNzIGBmb3JtYCBwcm9wPycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU3RvcmUgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdGhpcy51cGRhdGVTdG9yZSA9IGZ1bmN0aW9uIChuZXh0U3RvcmUpIHtcbiAgICBfdGhpcy5zdG9yZSA9IG5leHRTdG9yZTtcbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBGaWVsZHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvKipcbiAgICogR2V0IHJlZ2lzdGVyZWQgZmllbGQgZW50aXRpZXMuXG4gICAqIEBwYXJhbSBwdXJlIE9ubHkgcmV0dXJuIGZpZWxkIHdoaWNoIGhhcyBhIGBuYW1lYC4gRGVmYXVsdDogZmFsc2VcbiAgICovXG4gIHRoaXMuZ2V0RmllbGRFbnRpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgaWYgKCFwdXJlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZmllbGRFbnRpdGllcztcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzLmZpZWxkRW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLmdldE5hbWVQYXRoKCkubGVuZ3RoO1xuICAgIH0pO1xuICB9O1xuICB0aGlzLmdldEZpZWxkc01hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgdmFyIGNhY2hlID0gbmV3IE5hbWVNYXAoKTtcbiAgICBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHB1cmUpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgbmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuICAgICAgY2FjaGUuc2V0KG5hbWVQYXRoLCBmaWVsZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9O1xuICB0aGlzLmdldEZpZWxkRW50aXRpZXNGb3JOYW1lUGF0aExpc3QgPSBmdW5jdGlvbiAobmFtZUxpc3QpIHtcbiAgICBpZiAoIW5hbWVMaXN0KSB7XG4gICAgICByZXR1cm4gX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKTtcbiAgICB9XG4gICAgdmFyIGNhY2hlID0gX3RoaXMuZ2V0RmllbGRzTWFwKHRydWUpO1xuICAgIHJldHVybiBuYW1lTGlzdC5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKG5hbWUpO1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChuYW1lUGF0aCkgfHwge1xuICAgICAgICBJTlZBTElEQVRFX05BTUVfUEFUSDogZ2V0TmFtZVBhdGgobmFtZSlcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG4gIHRoaXMuZ2V0RmllbGRzVmFsdWUgPSBmdW5jdGlvbiAobmFtZUxpc3QsIGZpbHRlckZ1bmMpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICBpZiAobmFtZUxpc3QgPT09IHRydWUgJiYgIWZpbHRlckZ1bmMpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zdG9yZTtcbiAgICB9XG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzRm9yTmFtZVBhdGhMaXN0KEFycmF5LmlzQXJyYXkobmFtZUxpc3QpID8gbmFtZUxpc3QgOiBudWxsKTtcbiAgICB2YXIgZmlsdGVyZWROYW1lTGlzdCA9IFtdO1xuICAgIGZpZWxkRW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICB2YXIgX2VudGl0eSRpc0xpc3RGaWVsZDtcbiAgICAgIHZhciBuYW1lUGF0aCA9ICdJTlZBTElEQVRFX05BTUVfUEFUSCcgaW4gZW50aXR5ID8gZW50aXR5LklOVkFMSURBVEVfTkFNRV9QQVRIIDogZW50aXR5LmdldE5hbWVQYXRoKCk7XG4gICAgICAvLyBJZ25vcmUgd2hlbiBpdCdzIGEgbGlzdCBpdGVtIGFuZCBub3Qgc3BlY2lmaWMgdGhlIG5hbWVQYXRoLFxuICAgICAgLy8gc2luY2UgcGFyZW50IGZpZWxkIGlzIGFscmVhZHkgdGFrZSBpbiBjb3VudFxuICAgICAgaWYgKCFuYW1lTGlzdCAmJiAoKF9lbnRpdHkkaXNMaXN0RmllbGQgPSBlbnRpdHkuaXNMaXN0RmllbGQpID09PSBudWxsIHx8IF9lbnRpdHkkaXNMaXN0RmllbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbnRpdHkkaXNMaXN0RmllbGQuY2FsbChlbnRpdHkpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWZpbHRlckZ1bmMpIHtcbiAgICAgICAgZmlsdGVyZWROYW1lTGlzdC5wdXNoKG5hbWVQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtZXRhID0gJ2dldE1ldGEnIGluIGVudGl0eSA/IGVudGl0eS5nZXRNZXRhKCkgOiBudWxsO1xuICAgICAgICBpZiAoZmlsdGVyRnVuYyhtZXRhKSkge1xuICAgICAgICAgIGZpbHRlcmVkTmFtZUxpc3QucHVzaChuYW1lUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2xvbmVCeU5hbWVQYXRoTGlzdChfdGhpcy5zdG9yZSwgZmlsdGVyZWROYW1lTGlzdC5tYXAoZ2V0TmFtZVBhdGgpKTtcbiAgfTtcbiAgdGhpcy5nZXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcbiAgICByZXR1cm4gZ2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoKTtcbiAgfTtcbiAgdGhpcy5nZXRGaWVsZHNFcnJvciA9IGZ1bmN0aW9uIChuYW1lTGlzdCkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuICAgIHZhciBmaWVsZEVudGl0aWVzID0gX3RoaXMuZ2V0RmllbGRFbnRpdGllc0Zvck5hbWVQYXRoTGlzdChuYW1lTGlzdCk7XG4gICAgcmV0dXJuIGZpZWxkRW50aXRpZXMubWFwKGZ1bmN0aW9uIChlbnRpdHksIGluZGV4KSB7XG4gICAgICBpZiAoZW50aXR5ICYmICEoJ0lOVkFMSURBVEVfTkFNRV9QQVRIJyBpbiBlbnRpdHkpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogZW50aXR5LmdldE5hbWVQYXRoKCksXG4gICAgICAgICAgZXJyb3JzOiBlbnRpdHkuZ2V0RXJyb3JzKCksXG4gICAgICAgICAgd2FybmluZ3M6IGVudGl0eS5nZXRXYXJuaW5ncygpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBnZXROYW1lUGF0aChuYW1lTGlzdFtpbmRleF0pLFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICB3YXJuaW5nczogW11cbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG4gIHRoaXMuZ2V0RmllbGRFcnJvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG4gICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgdmFyIGZpZWxkRXJyb3IgPSBfdGhpcy5nZXRGaWVsZHNFcnJvcihbbmFtZVBhdGhdKVswXTtcbiAgICByZXR1cm4gZmllbGRFcnJvci5lcnJvcnM7XG4gIH07XG4gIHRoaXMuZ2V0RmllbGRXYXJuaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcbiAgICB2YXIgZmllbGRFcnJvciA9IF90aGlzLmdldEZpZWxkc0Vycm9yKFtuYW1lUGF0aF0pWzBdO1xuICAgIHJldHVybiBmaWVsZEVycm9yLndhcm5pbmdzO1xuICB9O1xuICB0aGlzLmlzRmllbGRzVG91Y2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHZhciBhcmcwID0gYXJnc1swXSxcbiAgICAgIGFyZzEgPSBhcmdzWzFdO1xuICAgIHZhciBuYW1lUGF0aExpc3Q7XG4gICAgdmFyIGlzQWxsRmllbGRzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmFtZVBhdGhMaXN0ID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcwKSkge1xuICAgICAgICBuYW1lUGF0aExpc3QgPSBhcmcwLm1hcChnZXROYW1lUGF0aCk7XG4gICAgICAgIGlzQWxsRmllbGRzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZVBhdGhMaXN0ID0gbnVsbDtcbiAgICAgICAgaXNBbGxGaWVsZHNUb3VjaGVkID0gYXJnMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZVBhdGhMaXN0ID0gYXJnMC5tYXAoZ2V0TmFtZVBhdGgpO1xuICAgICAgaXNBbGxGaWVsZHNUb3VjaGVkID0gYXJnMTtcbiAgICB9XG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuICAgIHZhciBpc0ZpZWxkVG91Y2hlZCA9IGZ1bmN0aW9uIGlzRmllbGRUb3VjaGVkKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuaXNGaWVsZFRvdWNoZWQoKTtcbiAgICB9O1xuICAgIC8vID09PT09IFdpbGwgZ2V0IGZ1bGx5IGNvbXBhcmUgd2hlbiBub3QgY29uZmlnIG5hbWVQYXRoTGlzdCA9PT09PVxuICAgIGlmICghbmFtZVBhdGhMaXN0KSB7XG4gICAgICByZXR1cm4gaXNBbGxGaWVsZHNUb3VjaGVkID8gZmllbGRFbnRpdGllcy5ldmVyeShpc0ZpZWxkVG91Y2hlZCkgOiBmaWVsZEVudGl0aWVzLnNvbWUoaXNGaWVsZFRvdWNoZWQpO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSBhIG5lc3QgdHJlZSBmb3IgdmFsaWRhdGVcbiAgICB2YXIgbWFwID0gbmV3IE5hbWVNYXAoKTtcbiAgICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAoc2hvcnROYW1lUGF0aCkge1xuICAgICAgbWFwLnNldChzaG9ydE5hbWVQYXRoLCBbXSk7XG4gICAgfSk7XG4gICAgZmllbGRFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIGZpZWxkTmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuICAgICAgLy8gRmluZCBtYXRjaGVkIGVudGl0eSBhbmQgcHV0IGludG8gbGlzdFxuICAgICAgbmFtZVBhdGhMaXN0LmZvckVhY2goZnVuY3Rpb24gKHNob3J0TmFtZVBhdGgpIHtcbiAgICAgICAgaWYgKHNob3J0TmFtZVBhdGguZXZlcnkoZnVuY3Rpb24gKG5hbWVVbml0LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkTmFtZVBhdGhbaV0gPT09IG5hbWVVbml0O1xuICAgICAgICB9KSkge1xuICAgICAgICAgIG1hcC51cGRhdGUoc2hvcnROYW1lUGF0aCwgZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxpc3QpLCBbZmllbGRdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gQ2hlY2sgaWYgTmFtZU1hcCB2YWx1ZSBpcyB0b3VjaGVkXG4gICAgdmFyIGlzTmFtZVBhdGhMaXN0VG91Y2hlZCA9IGZ1bmN0aW9uIGlzTmFtZVBhdGhMaXN0VG91Y2hlZChlbnRpdGllcykge1xuICAgICAgcmV0dXJuIGVudGl0aWVzLnNvbWUoaXNGaWVsZFRvdWNoZWQpO1xuICAgIH07XG4gICAgdmFyIG5hbWVQYXRoTGlzdEVudGl0aWVzID0gbWFwLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9yZWYyLnZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBpc0FsbEZpZWxkc1RvdWNoZWQgPyBuYW1lUGF0aExpc3RFbnRpdGllcy5ldmVyeShpc05hbWVQYXRoTGlzdFRvdWNoZWQpIDogbmFtZVBhdGhMaXN0RW50aXRpZXMuc29tZShpc05hbWVQYXRoTGlzdFRvdWNoZWQpO1xuICB9O1xuICB0aGlzLmlzRmllbGRUb3VjaGVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICByZXR1cm4gX3RoaXMuaXNGaWVsZHNUb3VjaGVkKFtuYW1lXSk7XG4gIH07XG4gIHRoaXMuaXNGaWVsZHNWYWxpZGF0aW5nID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKCk7XG4gICAgaWYgKCFuYW1lTGlzdCkge1xuICAgICAgcmV0dXJuIGZpZWxkRW50aXRpZXMuc29tZShmdW5jdGlvbiAodGVzdEZpZWxkKSB7XG4gICAgICAgIHJldHVybiB0ZXN0RmllbGQuaXNGaWVsZFZhbGlkYXRpbmcoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKTtcbiAgICByZXR1cm4gZmllbGRFbnRpdGllcy5zb21lKGZ1bmN0aW9uICh0ZXN0RmllbGQpIHtcbiAgICAgIHZhciBmaWVsZE5hbWVQYXRoID0gdGVzdEZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICByZXR1cm4gY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIGZpZWxkTmFtZVBhdGgpICYmIHRlc3RGaWVsZC5pc0ZpZWxkVmFsaWRhdGluZygpO1xuICAgIH0pO1xuICB9O1xuICB0aGlzLmlzRmllbGRWYWxpZGF0aW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICByZXR1cm4gX3RoaXMuaXNGaWVsZHNWYWxpZGF0aW5nKFtuYW1lXSk7XG4gIH07XG4gIC8qKlxuICAgKiBSZXNldCBGaWVsZCB3aXRoIGZpZWxkIGBpbml0aWFsVmFsdWVgIHByb3AuXG4gICAqIENhbiBwYXNzIGBlbnRpdGllc2Agb3IgYG5hbWVQYXRoTGlzdGAgb3IganVzdCBub3RoaW5nLlxuICAgKi9cbiAgdGhpcy5yZXNldFdpdGhGaWVsZEluaXRpYWxWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5mbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gQ3JlYXRlIGNhY2hlXG4gICAgdmFyIGNhY2hlID0gbmV3IE5hbWVNYXAoKTtcbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSk7XG4gICAgZmllbGRFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGZpZWxkLnByb3BzLmluaXRpYWxWYWx1ZTtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICAvLyBSZWNvcmQgb25seSBpZiBoYXMgYGluaXRpYWxWYWx1ZWBcbiAgICAgIGlmIChpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcmVjb3JkcyA9IGNhY2hlLmdldChuYW1lUGF0aCkgfHwgbmV3IFNldCgpO1xuICAgICAgICByZWNvcmRzLmFkZCh7XG4gICAgICAgICAgZW50aXR5OiBmaWVsZCxcbiAgICAgICAgICB2YWx1ZTogaW5pdGlhbFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZS5zZXQobmFtZVBhdGgsIHJlY29yZHMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFJlc2V0XG4gICAgdmFyIHJlc2V0V2l0aEZpZWxkcyA9IGZ1bmN0aW9uIHJlc2V0V2l0aEZpZWxkcyhlbnRpdGllcykge1xuICAgICAgZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGZpZWxkLnByb3BzLmluaXRpYWxWYWx1ZTtcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcbiAgICAgICAgICB2YXIgZm9ybUluaXRpYWxWYWx1ZSA9IF90aGlzLmdldEluaXRpYWxWYWx1ZShuYW1lUGF0aCk7XG4gICAgICAgICAgaWYgKGZvcm1Jbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gV2FybmluZyBpZiBjb25mbGljdCB3aXRoIGZvcm0gaW5pdGlhbFZhbHVlcyBhbmQgZG8gbm90IG1vZGlmeSB2YWx1ZVxuICAgICAgICAgICAgd2FybmluZyhmYWxzZSwgXCJGb3JtIGFscmVhZHkgc2V0ICdpbml0aWFsVmFsdWVzJyB3aXRoIHBhdGggJ1wiLmNvbmNhdChuYW1lUGF0aC5qb2luKCcuJyksIFwiJy4gRmllbGQgY2FuIG5vdCBvdmVyd3JpdGUgaXQuXCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlY29yZHMgPSBjYWNoZS5nZXQobmFtZVBhdGgpO1xuICAgICAgICAgICAgaWYgKHJlY29yZHMgJiYgcmVjb3Jkcy5zaXplID4gMSkge1xuICAgICAgICAgICAgICAvLyBXYXJuaW5nIGlmIG11bHRpcGxlIGZpZWxkIHNldCBgaW5pdGlhbFZhbHVlYGFuZCBkbyBub3QgbW9kaWZ5IHZhbHVlXG4gICAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiTXVsdGlwbGUgRmllbGQgd2l0aCBwYXRoICdcIi5jb25jYXQobmFtZVBhdGguam9pbignLicpLCBcIicgc2V0ICdpbml0aWFsVmFsdWUnLiBDYW4gbm90IGRlY2lkZSB3aGljaCBvbmUgdG8gcGljay5cIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZWNvcmRzKSB7XG4gICAgICAgICAgICAgIHZhciBvcmlnaW5WYWx1ZSA9IF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpO1xuICAgICAgICAgICAgICAvLyBTZXQgYGluaXRpYWxWYWx1ZWBcbiAgICAgICAgICAgICAgaWYgKCFpbmZvLnNraXBFeGlzdCB8fCBvcmlnaW5WYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkocmVjb3JkcylbMF0udmFsdWUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgcmVxdWlyZWRGaWVsZEVudGl0aWVzO1xuICAgIGlmIChpbmZvLmVudGl0aWVzKSB7XG4gICAgICByZXF1aXJlZEZpZWxkRW50aXRpZXMgPSBpbmZvLmVudGl0aWVzO1xuICAgIH0gZWxzZSBpZiAoaW5mby5uYW1lUGF0aExpc3QpIHtcbiAgICAgIHJlcXVpcmVkRmllbGRFbnRpdGllcyA9IFtdO1xuICAgICAgaW5mby5uYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZVBhdGgpIHtcbiAgICAgICAgdmFyIHJlY29yZHMgPSBjYWNoZS5nZXQobmFtZVBhdGgpO1xuICAgICAgICBpZiAocmVjb3Jkcykge1xuICAgICAgICAgIHZhciBfcmVxdWlyZWRGaWVsZEVudGl0aWU7XG4gICAgICAgICAgKF9yZXF1aXJlZEZpZWxkRW50aXRpZSA9IHJlcXVpcmVkRmllbGRFbnRpdGllcykucHVzaC5hcHBseShfcmVxdWlyZWRGaWVsZEVudGl0aWUsIF90b0NvbnN1bWFibGVBcnJheShfdG9Db25zdW1hYmxlQXJyYXkocmVjb3JkcykubWFwKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5lbnRpdHk7XG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVpcmVkRmllbGRFbnRpdGllcyA9IGZpZWxkRW50aXRpZXM7XG4gICAgfVxuICAgIHJlc2V0V2l0aEZpZWxkcyhyZXF1aXJlZEZpZWxkRW50aXRpZXMpO1xuICB9O1xuICB0aGlzLnJlc2V0RmllbGRzID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuICAgIGlmICghbmFtZUxpc3QpIHtcbiAgICAgIF90aGlzLnVwZGF0ZVN0b3JlKG1lcmdlKF90aGlzLmluaXRpYWxWYWx1ZXMpKTtcbiAgICAgIF90aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlKCk7XG4gICAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBudWxsLCB7XG4gICAgICAgIHR5cGU6ICdyZXNldCdcbiAgICAgIH0pO1xuICAgICAgX3RoaXMubm90aWZ5V2F0Y2goKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUmVzZXQgYnkgYG5hbWVMaXN0YFxuICAgIHZhciBuYW1lUGF0aExpc3QgPSBuYW1lTGlzdC5tYXAoZ2V0TmFtZVBhdGgpO1xuICAgIG5hbWVQYXRoTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IF90aGlzLmdldEluaXRpYWxWYWx1ZShuYW1lUGF0aCk7XG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgsIGluaXRpYWxWYWx1ZSkpO1xuICAgIH0pO1xuICAgIF90aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlKHtcbiAgICAgIG5hbWVQYXRoTGlzdDogbmFtZVBhdGhMaXN0XG4gICAgfSk7XG4gICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgbmFtZVBhdGhMaXN0LCB7XG4gICAgICB0eXBlOiAncmVzZXQnXG4gICAgfSk7XG4gICAgX3RoaXMubm90aWZ5V2F0Y2gobmFtZVBhdGhMaXN0KTtcbiAgfTtcbiAgdGhpcy5zZXRGaWVsZHMgPSBmdW5jdGlvbiAoZmllbGRzKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuICAgIHZhciBuYW1lUGF0aExpc3QgPSBbXTtcbiAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGREYXRhKSB7XG4gICAgICB2YXIgbmFtZSA9IGZpZWxkRGF0YS5uYW1lLFxuICAgICAgICBkYXRhID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGZpZWxkRGF0YSwgX2V4Y2x1ZGVkKTtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKG5hbWUpO1xuICAgICAgbmFtZVBhdGhMaXN0LnB1c2gobmFtZVBhdGgpO1xuICAgICAgLy8gVmFsdWVcbiAgICAgIGlmICgndmFsdWUnIGluIGRhdGEpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBkYXRhLnZhbHVlKSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBbbmFtZVBhdGhdLCB7XG4gICAgICAgIHR5cGU6ICdzZXRGaWVsZCcsXG4gICAgICAgIGRhdGE6IGZpZWxkRGF0YVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX3RoaXMubm90aWZ5V2F0Y2gobmFtZVBhdGhMaXN0KTtcbiAgfTtcbiAgdGhpcy5nZXRGaWVsZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVudGl0aWVzID0gX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gZW50aXRpZXMubWFwKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIG5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHZhciBtZXRhID0gZmllbGQuZ2V0TWV0YSgpO1xuICAgICAgdmFyIGZpZWxkRGF0YSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWV0YSksIHt9LCB7XG4gICAgICAgIG5hbWU6IG5hbWVQYXRoLFxuICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0RmllbGRWYWx1ZShuYW1lUGF0aClcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkRGF0YSwgJ29yaWdpblJDRmllbGQnLCB7XG4gICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWVsZERhdGE7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IE9ic2VydmVyID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvKipcbiAgICogVGhpcyBvbmx5IHRyaWdnZXIgd2hlbiBhIGZpZWxkIGlzIG9uIGNvbnN0cnVjdG9yIHRvIGF2b2lkIHdlIGdldCBpbml0aWFsVmFsdWUgdG9vIGxhdGVcbiAgICovXG4gIHRoaXMuaW5pdEVudGl0eVZhbHVlID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIHZhciBpbml0aWFsVmFsdWUgPSBlbnRpdHkucHJvcHMuaW5pdGlhbFZhbHVlO1xuICAgIGlmIChpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG5hbWVQYXRoID0gZW50aXR5LmdldE5hbWVQYXRoKCk7XG4gICAgICB2YXIgcHJldlZhbHVlID0gZ2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoKTtcbiAgICAgIGlmIChwcmV2VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgsIGluaXRpYWxWYWx1ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdGhpcy5pc01lcmdlZFByZXNlcnZlID0gZnVuY3Rpb24gKGZpZWxkUHJlc2VydmUpIHtcbiAgICB2YXIgbWVyZ2VkUHJlc2VydmUgPSBmaWVsZFByZXNlcnZlICE9PSB1bmRlZmluZWQgPyBmaWVsZFByZXNlcnZlIDogX3RoaXMucHJlc2VydmU7XG4gICAgcmV0dXJuIG1lcmdlZFByZXNlcnZlICE9PSBudWxsICYmIG1lcmdlZFByZXNlcnZlICE9PSB2b2lkIDAgPyBtZXJnZWRQcmVzZXJ2ZSA6IHRydWU7XG4gIH07XG4gIHRoaXMucmVnaXN0ZXJGaWVsZCA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICBfdGhpcy5maWVsZEVudGl0aWVzLnB1c2goZW50aXR5KTtcbiAgICB2YXIgbmFtZVBhdGggPSBlbnRpdHkuZ2V0TmFtZVBhdGgoKTtcbiAgICBfdGhpcy5ub3RpZnlXYXRjaChbbmFtZVBhdGhdKTtcbiAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcbiAgICBpZiAoZW50aXR5LnByb3BzLmluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG4gICAgICBfdGhpcy5yZXNldFdpdGhGaWVsZEluaXRpYWxWYWx1ZSh7XG4gICAgICAgIGVudGl0aWVzOiBbZW50aXR5XSxcbiAgICAgICAgc2tpcEV4aXN0OiB0cnVlXG4gICAgICB9KTtcbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIFtlbnRpdHkuZ2V0TmFtZVBhdGgoKV0sIHtcbiAgICAgICAgdHlwZTogJ3ZhbHVlVXBkYXRlJyxcbiAgICAgICAgc291cmNlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gdW4tcmVnaXN0ZXIgZmllbGQgY2FsbGJhY2tcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlzTGlzdEZpZWxkLCBwcmVzZXJ2ZSkge1xuICAgICAgdmFyIHN1Yk5hbWVQYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgIF90aGlzLmZpZWxkRW50aXRpZXMgPSBfdGhpcy5maWVsZEVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gZW50aXR5O1xuICAgICAgfSk7XG4gICAgICAvLyBDbGVhbiB1cCBzdG9yZSB2YWx1ZSBpZiBub3QgcHJlc2VydmVcbiAgICAgIGlmICghX3RoaXMuaXNNZXJnZWRQcmVzZXJ2ZShwcmVzZXJ2ZSkgJiYgKCFpc0xpc3RGaWVsZCB8fCBzdWJOYW1lUGF0aC5sZW5ndGggPiAxKSkge1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gaXNMaXN0RmllbGQgPyB1bmRlZmluZWQgOiBfdGhpcy5nZXRJbml0aWFsVmFsdWUobmFtZVBhdGgpO1xuICAgICAgICBpZiAobmFtZVBhdGgubGVuZ3RoICYmIF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpICE9PSBkZWZhdWx0VmFsdWUgJiYgX3RoaXMuZmllbGRFbnRpdGllcy5ldmVyeShmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgLy8gT25seSByZXNldCB3aGVuIG5vIG5hbWVQYXRoIGV4aXN0XG4gICAgICAgICAgICAhbWF0Y2hOYW1lUGF0aChmaWVsZC5nZXROYW1lUGF0aCgpLCBuYW1lUGF0aClcbiAgICAgICAgICApO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIHZhciBfcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG4gICAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3ByZXZTdG9yZSwgbmFtZVBhdGgsIGRlZmF1bHRWYWx1ZSwgdHJ1ZSkpO1xuICAgICAgICAgIC8vIE5vdGlmeSB0aGF0IGZpZWxkIGlzIHVubW91bnRcbiAgICAgICAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMoX3ByZXZTdG9yZSwgW25hbWVQYXRoXSwge1xuICAgICAgICAgICAgdHlwZTogJ3JlbW92ZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBEZXBlbmRlbmNpZXMgdXBkYXRlXG4gICAgICAgICAgX3RoaXMudHJpZ2dlckRlcGVuZGVuY2llc1VwZGF0ZShfcHJldlN0b3JlLCBuYW1lUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLm5vdGlmeVdhdGNoKFtuYW1lUGF0aF0pO1xuICAgIH07XG4gIH07XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAndXBkYXRlVmFsdWUnOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIG5hbWVQYXRoID0gYWN0aW9uLm5hbWVQYXRoLFxuICAgICAgICAgICAgdmFsdWUgPSBhY3Rpb24udmFsdWU7XG4gICAgICAgICAgX3RoaXMudXBkYXRlVmFsdWUobmFtZVBhdGgsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSAndmFsaWRhdGVGaWVsZCc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX25hbWVQYXRoID0gYWN0aW9uLm5hbWVQYXRoLFxuICAgICAgICAgICAgdHJpZ2dlck5hbWUgPSBhY3Rpb24udHJpZ2dlck5hbWU7XG4gICAgICAgICAgX3RoaXMudmFsaWRhdGVGaWVsZHMoW19uYW1lUGF0aF0sIHtcbiAgICAgICAgICAgIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgLy8gQ3VycmVudGx5IHdlIGRvbid0IGhhdmUgb3RoZXIgYWN0aW9uLiBEbyBub3RoaW5nLlxuICAgIH1cbiAgfTtcbiAgdGhpcy5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbiAocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIGluZm8pIHtcbiAgICBpZiAoX3RoaXMuc3Vic2NyaWJhYmxlKSB7XG4gICAgICB2YXIgbWVyZ2VkSW5mbyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaW5mbyksIHt9LCB7XG4gICAgICAgIHN0b3JlOiBfdGhpcy5nZXRGaWVsZHNWYWx1ZSh0cnVlKVxuICAgICAgfSk7XG4gICAgICBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKCkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG9uU3RvcmVDaGFuZ2UgPSBfcmVmMy5vblN0b3JlQ2hhbmdlO1xuICAgICAgICBvblN0b3JlQ2hhbmdlKHByZXZTdG9yZSwgbmFtZVBhdGhMaXN0LCBtZXJnZWRJbmZvKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5mb3JjZVJvb3RVcGRhdGUoKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBOb3RpZnkgZGVwZW5kZW5jaWVzIGNoaWxkcmVuIHdpdGggcGFyZW50IHVwZGF0ZVxuICAgKiBXZSBuZWVkIGRlbGF5IHRvIHRyaWdnZXIgdmFsaWRhdGUgaW4gY2FzZSBGaWVsZCBpcyB1bmRlciByZW5kZXIgcHJvcHNcbiAgICovXG4gIHRoaXMudHJpZ2dlckRlcGVuZGVuY2llc1VwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoKSB7XG4gICAgdmFyIGNoaWxkcmVuRmllbGRzID0gX3RoaXMuZ2V0RGVwZW5kZW5jeUNoaWxkcmVuRmllbGRzKG5hbWVQYXRoKTtcbiAgICBpZiAoY2hpbGRyZW5GaWVsZHMubGVuZ3RoKSB7XG4gICAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcyhjaGlsZHJlbkZpZWxkcyk7XG4gICAgfVxuICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIGNoaWxkcmVuRmllbGRzLCB7XG4gICAgICB0eXBlOiAnZGVwZW5kZW5jaWVzVXBkYXRlJyxcbiAgICAgIHJlbGF0ZWRGaWVsZHM6IFtuYW1lUGF0aF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjaGlsZHJlbkZpZWxkcykpXG4gICAgfSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuRmllbGRzO1xuICB9O1xuICB0aGlzLnVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuICAgIF90aGlzLnVwZGF0ZVN0b3JlKHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgdmFsdWUpKTtcbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBbbmFtZVBhdGhdLCB7XG4gICAgICB0eXBlOiAndmFsdWVVcGRhdGUnLFxuICAgICAgc291cmNlOiAnaW50ZXJuYWwnXG4gICAgfSk7XG4gICAgX3RoaXMubm90aWZ5V2F0Y2goW25hbWVQYXRoXSk7XG4gICAgLy8gRGVwZW5kZW5jaWVzIHVwZGF0ZVxuICAgIHZhciBjaGlsZHJlbkZpZWxkcyA9IF90aGlzLnRyaWdnZXJEZXBlbmRlbmNpZXNVcGRhdGUocHJldlN0b3JlLCBuYW1lUGF0aCk7XG4gICAgLy8gdHJpZ2dlciBjYWxsYmFjayBmdW5jdGlvblxuICAgIHZhciBvblZhbHVlc0NoYW5nZSA9IF90aGlzLmNhbGxiYWNrcy5vblZhbHVlc0NoYW5nZTtcbiAgICBpZiAob25WYWx1ZXNDaGFuZ2UpIHtcbiAgICAgIHZhciBjaGFuZ2VkVmFsdWVzID0gY2xvbmVCeU5hbWVQYXRoTGlzdChfdGhpcy5zdG9yZSwgW25hbWVQYXRoXSk7XG4gICAgICBvblZhbHVlc0NoYW5nZShjaGFuZ2VkVmFsdWVzLCBfdGhpcy5nZXRGaWVsZHNWYWx1ZSgpKTtcbiAgICB9XG4gICAgX3RoaXMudHJpZ2dlck9uRmllbGRzQ2hhbmdlKFtuYW1lUGF0aF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjaGlsZHJlbkZpZWxkcykpKTtcbiAgfTtcbiAgLy8gTGV0IGFsbCBjaGlsZCBGaWVsZCBnZXQgdXBkYXRlLlxuICB0aGlzLnNldEZpZWxkc1ZhbHVlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuICAgIGlmIChzdG9yZSkge1xuICAgICAgdmFyIG5leHRTdG9yZSA9IG1lcmdlKF90aGlzLnN0b3JlLCBzdG9yZSk7XG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShuZXh0U3RvcmUpO1xuICAgIH1cbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBudWxsLCB7XG4gICAgICB0eXBlOiAndmFsdWVVcGRhdGUnLFxuICAgICAgc291cmNlOiAnZXh0ZXJuYWwnXG4gICAgfSk7XG4gICAgX3RoaXMubm90aWZ5V2F0Y2goKTtcbiAgfTtcbiAgdGhpcy5zZXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgX3RoaXMuc2V0RmllbGRzKFt7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfV0pO1xuICB9O1xuICB0aGlzLmdldERlcGVuZGVuY3lDaGlsZHJlbkZpZWxkcyA9IGZ1bmN0aW9uIChyb290TmFtZVBhdGgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBuZXcgU2V0KCk7XG4gICAgdmFyIGNoaWxkcmVuRmllbGRzID0gW107XG4gICAgdmFyIGRlcGVuZGVuY2llczJmaWVsZHMgPSBuZXcgTmFtZU1hcCgpO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIG1hcHNcbiAgICAgKiBDYW4gdXNlIGNhY2hlIHRvIHNhdmUgcGVyZiBpZiB1c2VyIHJlcG9ydCBwZXJmb3JtYW5jZSBpc3N1ZSB3aXRoIHRoaXNcbiAgICAgKi9cbiAgICBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKCkuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBmaWVsZC5wcm9wcy5kZXBlbmRlbmNpZXM7XG4gICAgICAoZGVwZW5kZW5jaWVzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChkZXBlbmRlbmN5KSB7XG4gICAgICAgIHZhciBkZXBlbmRlbmN5TmFtZVBhdGggPSBnZXROYW1lUGF0aChkZXBlbmRlbmN5KTtcbiAgICAgICAgZGVwZW5kZW5jaWVzMmZpZWxkcy51cGRhdGUoZGVwZW5kZW5jeU5hbWVQYXRoLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGZpZWxkcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbmV3IFNldCgpO1xuICAgICAgICAgIGZpZWxkcy5hZGQoZmllbGQpO1xuICAgICAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGZpbGxDaGlsZHJlbiA9IGZ1bmN0aW9uIGZpbGxDaGlsZHJlbihuYW1lUGF0aCkge1xuICAgICAgdmFyIGZpZWxkcyA9IGRlcGVuZGVuY2llczJmaWVsZHMuZ2V0KG5hbWVQYXRoKSB8fCBuZXcgU2V0KCk7XG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgaWYgKCFjaGlsZHJlbi5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgY2hpbGRyZW4uYWRkKGZpZWxkKTtcbiAgICAgICAgICB2YXIgZmllbGROYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICAgICAgaWYgKGZpZWxkLmlzRmllbGREaXJ0eSgpICYmIGZpZWxkTmFtZVBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZHJlbkZpZWxkcy5wdXNoKGZpZWxkTmFtZVBhdGgpO1xuICAgICAgICAgICAgZmlsbENoaWxkcmVuKGZpZWxkTmFtZVBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBmaWxsQ2hpbGRyZW4ocm9vdE5hbWVQYXRoKTtcbiAgICByZXR1cm4gY2hpbGRyZW5GaWVsZHM7XG4gIH07XG4gIHRoaXMudHJpZ2dlck9uRmllbGRzQ2hhbmdlID0gZnVuY3Rpb24gKG5hbWVQYXRoTGlzdCwgZmlsZWRFcnJvcnMpIHtcbiAgICB2YXIgb25GaWVsZHNDaGFuZ2UgPSBfdGhpcy5jYWxsYmFja3Mub25GaWVsZHNDaGFuZ2U7XG4gICAgaWYgKG9uRmllbGRzQ2hhbmdlKSB7XG4gICAgICB2YXIgZmllbGRzID0gX3RoaXMuZ2V0RmllbGRzKCk7XG4gICAgICAvKipcbiAgICAgICAqIEZpbGwgZXJyb3JzIHNpbmNlIGBmaWVsZHNgIG1heSBiZSByZXBsYWNlZCBieSBjb250cm9sbGVkIGZpZWxkc1xuICAgICAgICovXG4gICAgICBpZiAoZmlsZWRFcnJvcnMpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gbmV3IE5hbWVNYXAoKTtcbiAgICAgICAgZmlsZWRFcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IF9yZWY0Lm5hbWUsXG4gICAgICAgICAgICBlcnJvcnMgPSBfcmVmNC5lcnJvcnM7XG4gICAgICAgICAgY2FjaGUuc2V0KG5hbWUsIGVycm9ycyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBmaWVsZC5lcnJvcnMgPSBjYWNoZS5nZXQoZmllbGQubmFtZSkgfHwgZmllbGQuZXJyb3JzO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFuZ2VkRmllbGRzID0gZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IF9yZWY1Lm5hbWU7XG4gICAgICAgIHJldHVybiBjb250YWluc05hbWVQYXRoKG5hbWVQYXRoTGlzdCwgZmllbGROYW1lKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNoYW5nZWRGaWVsZHMubGVuZ3RoKSB7XG4gICAgICAgIG9uRmllbGRzQ2hhbmdlKGNoYW5nZWRGaWVsZHMsIGZpZWxkcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gVmFsaWRhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHRoaXMudmFsaWRhdGVGaWVsZHMgPSBmdW5jdGlvbiAoYXJnMSwgYXJnMikge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuICAgIHZhciBuYW1lTGlzdDtcbiAgICB2YXIgb3B0aW9ucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcxKSB8fCB0eXBlb2YgYXJnMSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZzIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lTGlzdCA9IGFyZzE7XG4gICAgICBvcHRpb25zID0gYXJnMjtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgfVxuICAgIHZhciBwcm92aWRlTmFtZUxpc3QgPSAhIW5hbWVMaXN0O1xuICAgIHZhciBuYW1lUGF0aExpc3QgPSBwcm92aWRlTmFtZUxpc3QgPyBuYW1lTGlzdC5tYXAoZ2V0TmFtZVBhdGgpIDogW107XG4gICAgLy8gQ29sbGVjdCByZXN1bHQgaW4gcHJvbWlzZSBsaXN0XG4gICAgdmFyIHByb21pc2VMaXN0ID0gW107XG4gICAgLy8gV2UgdGVtcCBzYXZlIHRoZSBwYXRoIHdoaWNoIG5lZWQgdHJpZ2dlciBmb3IgYG9uRmllbGRzQ2hhbmdlYFxuICAgIHZhciBUTVBfU1BMSVQgPSBTdHJpbmcoRGF0ZS5ub3coKSk7XG4gICAgdmFyIHZhbGlkYXRlTmFtZVBhdGhMaXN0ID0gbmV3IFNldCgpO1xuICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBfb3B0aW9ucztcbiAgICAgIC8vIEFkZCBmaWVsZCBpZiBub3QgcHJvdmlkZSBgbmFtZUxpc3RgXG4gICAgICBpZiAoIXByb3ZpZGVOYW1lTGlzdCkge1xuICAgICAgICBuYW1lUGF0aExpc3QucHVzaChmaWVsZC5nZXROYW1lUGF0aCgpKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmVjdXJzaXZlIHZhbGlkYXRlIGlmIGNvbmZpZ3VyZWQuXG4gICAgICAgKiBUT0RPOiBwZXJmIGltcHJvdmVtZW50IEB6b21iaWVKXG4gICAgICAgKi9cbiAgICAgIGlmICgoKF9vcHRpb25zID0gb3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zLnJlY3Vyc2l2ZSkgJiYgcHJvdmlkZU5hbWVMaXN0KSB7XG4gICAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gbmFtZUxpc3RbaV0gPT09IHVuZGVmaW5lZCDor7TmmI7mmK/ku6UgbmFtZUxpc3Qg5byA5aS055qEXG4gICAgICAgIC8vIFsnbmFtZSddIC0+IFsnbmFtZScsJ2xpc3QnXVxuICAgICAgICBuYW1lUGF0aC5ldmVyeShmdW5jdGlvbiAobmFtZVVuaXQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbmFtZUxpc3RbaV0gPT09IG5hbWVVbml0IHx8IG5hbWVMaXN0W2ldID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgbmFtZVBhdGhMaXN0LnB1c2gobmFtZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTa2lwIGlmIHdpdGhvdXQgcnVsZVxuICAgICAgaWYgKCFmaWVsZC5wcm9wcy5ydWxlcyB8fCAhZmllbGQucHJvcHMucnVsZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmaWVsZE5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHZhbGlkYXRlTmFtZVBhdGhMaXN0LmFkZChmaWVsZE5hbWVQYXRoLmpvaW4oVE1QX1NQTElUKSk7XG4gICAgICAvLyBBZGQgZmllbGQgdmFsaWRhdGUgcnVsZSBpbiB0byBwcm9taXNlIGxpc3RcbiAgICAgIGlmICghcHJvdmlkZU5hbWVMaXN0IHx8IGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBmaWVsZE5hbWVQYXRoKSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IGZpZWxkLnZhbGlkYXRlUnVsZXMoX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgdmFsaWRhdGVNZXNzYWdlczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyksIF90aGlzLnZhbGlkYXRlTWVzc2FnZXMpXG4gICAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgLy8gV3JhcCBwcm9taXNlIHdpdGggZmllbGRcbiAgICAgICAgcHJvbWlzZUxpc3QucHVzaChwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBmaWVsZE5hbWVQYXRoLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgIHdhcm5pbmdzOiBbXVxuICAgICAgICAgIH07XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChydWxlRXJyb3JzKSB7XG4gICAgICAgICAgdmFyIF9ydWxlRXJyb3JzJGZvckVhY2g7XG4gICAgICAgICAgdmFyIG1lcmdlZEVycm9ycyA9IFtdO1xuICAgICAgICAgIHZhciBtZXJnZWRXYXJuaW5ncyA9IFtdO1xuICAgICAgICAgIChfcnVsZUVycm9ycyRmb3JFYWNoID0gcnVsZUVycm9ycy5mb3JFYWNoKSA9PT0gbnVsbCB8fCBfcnVsZUVycm9ycyRmb3JFYWNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVsZUVycm9ycyRmb3JFYWNoLmNhbGwocnVsZUVycm9ycywgZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICAgICAgICB2YXIgd2FybmluZ09ubHkgPSBfcmVmNi5ydWxlLndhcm5pbmdPbmx5LFxuICAgICAgICAgICAgICBlcnJvcnMgPSBfcmVmNi5lcnJvcnM7XG4gICAgICAgICAgICBpZiAod2FybmluZ09ubHkpIHtcbiAgICAgICAgICAgICAgbWVyZ2VkV2FybmluZ3MucHVzaC5hcHBseShtZXJnZWRXYXJuaW5ncywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWVyZ2VkRXJyb3JzLnB1c2guYXBwbHkobWVyZ2VkRXJyb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkoZXJyb3JzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1lcmdlZEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgICAgIG5hbWU6IGZpZWxkTmFtZVBhdGgsXG4gICAgICAgICAgICAgIGVycm9yczogbWVyZ2VkRXJyb3JzLFxuICAgICAgICAgICAgICB3YXJuaW5nczogbWVyZ2VkV2FybmluZ3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogZmllbGROYW1lUGF0aCxcbiAgICAgICAgICAgIGVycm9yczogbWVyZ2VkRXJyb3JzLFxuICAgICAgICAgICAgd2FybmluZ3M6IG1lcmdlZFdhcm5pbmdzXG4gICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBzdW1tYXJ5UHJvbWlzZSA9IGFsbFByb21pc2VGaW5pc2gocHJvbWlzZUxpc3QpO1xuICAgIF90aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPSBzdW1tYXJ5UHJvbWlzZTtcbiAgICAvLyBOb3RpZnkgZmllbGRzIHdpdGggcnVsZSB0aGF0IHZhbGlkYXRlIGhhcyBmaW5pc2hlZCBhbmQgbmVlZCB1cGRhdGVcbiAgICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgdmFyIHJlc3VsdE5hbWVQYXRoTGlzdCA9IHJlc3VsdHMubWFwKGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWY3Lm5hbWU7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMoX3RoaXMuc3RvcmUsIHJlc3VsdE5hbWVQYXRoTGlzdCwge1xuICAgICAgICB0eXBlOiAndmFsaWRhdGVGaW5pc2gnXG4gICAgICB9KTtcbiAgICAgIF90aGlzLnRyaWdnZXJPbkZpZWxkc0NoYW5nZShyZXN1bHROYW1lUGF0aExpc3QsIHJlc3VsdHMpO1xuICAgIH0pO1xuICAgIHZhciByZXR1cm5Qcm9taXNlID0gc3VtbWFyeVByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMubGFzdFZhbGlkYXRlUHJvbWlzZSA9PT0gc3VtbWFyeVByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfdGhpcy5nZXRGaWVsZHNWYWx1ZShuYW1lUGF0aExpc3QpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChbXSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHZhciBlcnJvckxpc3QgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0LmVycm9ycy5sZW5ndGg7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgIHZhbHVlczogX3RoaXMuZ2V0RmllbGRzVmFsdWUobmFtZVBhdGhMaXN0KSxcbiAgICAgICAgZXJyb3JGaWVsZHM6IGVycm9yTGlzdCxcbiAgICAgICAgb3V0T2ZEYXRlOiBfdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlICE9PSBzdW1tYXJ5UHJvbWlzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gRG8gbm90IHRocm93IGluIGNvbnNvbGVcbiAgICByZXR1cm5Qcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgICAvLyBgdmFsaWRhdGluZ2AgY2hhbmdlZC4gVHJpZ2dlciBgb25GaWVsZHNDaGFuZ2VgXG4gICAgdmFyIHRyaWdnZXJOYW1lUGF0aExpc3QgPSBuYW1lUGF0aExpc3QuZmlsdGVyKGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlTmFtZVBhdGhMaXN0LmhhcyhuYW1lUGF0aC5qb2luKFRNUF9TUExJVCkpO1xuICAgIH0pO1xuICAgIF90aGlzLnRyaWdnZXJPbkZpZWxkc0NoYW5nZSh0cmlnZ2VyTmFtZVBhdGhMaXN0KTtcbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdWJtaXQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB0aGlzLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcbiAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcygpLnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgdmFyIG9uRmluaXNoID0gX3RoaXMuY2FsbGJhY2tzLm9uRmluaXNoO1xuICAgICAgaWYgKG9uRmluaXNoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb25GaW5pc2godmFsdWVzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLy8gU2hvdWxkIHByaW50IGVycm9yIGlmIHVzZXIgYG9uRmluaXNoYCBjYWxsYmFjayBmYWlsZWRcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIG9uRmluaXNoRmFpbGVkID0gX3RoaXMuY2FsbGJhY2tzLm9uRmluaXNoRmFpbGVkO1xuICAgICAgaWYgKG9uRmluaXNoRmFpbGVkKSB7XG4gICAgICAgIG9uRmluaXNoRmFpbGVkKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICB0aGlzLmZvcmNlUm9vdFVwZGF0ZSA9IGZvcmNlUm9vdFVwZGF0ZTtcbn0pO1xuZnVuY3Rpb24gdXNlRm9ybShmb3JtKSB7XG4gIHZhciBmb3JtUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgZm9yY2VVcGRhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICBpZiAoIWZvcm1SZWYuY3VycmVudCkge1xuICAgIGlmIChmb3JtKSB7XG4gICAgICBmb3JtUmVmLmN1cnJlbnQgPSBmb3JtO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgRm9ybVN0b3JlIGlmIG5vdCBwcm92aWRlZFxuICAgICAgdmFyIGZvcmNlUmVSZW5kZXIgPSBmdW5jdGlvbiBmb3JjZVJlUmVuZGVyKCkge1xuICAgICAgICBmb3JjZVVwZGF0ZSh7fSk7XG4gICAgICB9O1xuICAgICAgdmFyIGZvcm1TdG9yZSA9IG5ldyBGb3JtU3RvcmUoZm9yY2VSZVJlbmRlcik7XG4gICAgICBmb3JtUmVmLmN1cnJlbnQgPSBmb3JtU3RvcmUuZ2V0Rm9ybSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW2Zvcm1SZWYuY3VycmVudF07XG59XG5leHBvcnQgZGVmYXVsdCB1c2VGb3JtOyIsImV4cG9ydCBmdW5jdGlvbiBhbGxQcm9taXNlRmluaXNoKHByb21pc2VMaXN0KSB7XG4gIHZhciBoYXNFcnJvciA9IGZhbHNlO1xuICB2YXIgY291bnQgPSBwcm9taXNlTGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHRzID0gW107XG4gIGlmICghcHJvbWlzZUxpc3QubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBwcm9taXNlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9taXNlLCBpbmRleCkge1xuICAgICAgcHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGNvdW50IC09IDE7XG4gICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0O1xuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgIHJlamVjdChyZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIEZvcm1Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICB0cmlnZ2VyRm9ybUNoYW5nZTogZnVuY3Rpb24gdHJpZ2dlckZvcm1DaGFuZ2UoKSB7fSxcbiAgdHJpZ2dlckZvcm1GaW5pc2g6IGZ1bmN0aW9uIHRyaWdnZXJGb3JtRmluaXNoKCkge30sXG4gIHJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gcmVnaXN0ZXJGb3JtKCkge30sXG4gIHVucmVnaXN0ZXJGb3JtOiBmdW5jdGlvbiB1bnJlZ2lzdGVyRm9ybSgpIHt9XG59KTtcbnZhciBGb3JtUHJvdmlkZXIgPSBmdW5jdGlvbiBGb3JtUHJvdmlkZXIoX3JlZikge1xuICB2YXIgdmFsaWRhdGVNZXNzYWdlcyA9IF9yZWYudmFsaWRhdGVNZXNzYWdlcyxcbiAgICBvbkZvcm1DaGFuZ2UgPSBfcmVmLm9uRm9ybUNoYW5nZSxcbiAgICBvbkZvcm1GaW5pc2ggPSBfcmVmLm9uRm9ybUZpbmlzaCxcbiAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBmb3JtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICB2YXIgZm9ybXNSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmb3JtQ29udGV4dCksIHt9LCB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZvcm1Db250ZXh0LnZhbGlkYXRlTWVzc2FnZXMpLCB2YWxpZGF0ZU1lc3NhZ2VzKSxcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgLy8gPSAgICAgICAgICAgICAgICAgIEdsb2JhbCBGb3JtIENvbnRyb2wgICAgICAgICAgICAgICAgICA9XG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIHRyaWdnZXJGb3JtQ2hhbmdlOiBmdW5jdGlvbiB0cmlnZ2VyRm9ybUNoYW5nZShuYW1lLCBjaGFuZ2VkRmllbGRzKSB7XG4gICAgICAgIGlmIChvbkZvcm1DaGFuZ2UpIHtcbiAgICAgICAgICBvbkZvcm1DaGFuZ2UobmFtZSwge1xuICAgICAgICAgICAgY2hhbmdlZEZpZWxkczogY2hhbmdlZEZpZWxkcyxcbiAgICAgICAgICAgIGZvcm1zOiBmb3Jtc1JlZi5jdXJyZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybUNvbnRleHQudHJpZ2dlckZvcm1DaGFuZ2UobmFtZSwgY2hhbmdlZEZpZWxkcyk7XG4gICAgICB9LFxuICAgICAgdHJpZ2dlckZvcm1GaW5pc2g6IGZ1bmN0aW9uIHRyaWdnZXJGb3JtRmluaXNoKG5hbWUsIHZhbHVlcykge1xuICAgICAgICBpZiAob25Gb3JtRmluaXNoKSB7XG4gICAgICAgICAgb25Gb3JtRmluaXNoKG5hbWUsIHtcbiAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgZm9ybXM6IGZvcm1zUmVmLmN1cnJlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtQ29udGV4dC50cmlnZ2VyRm9ybUZpbmlzaChuYW1lLCB2YWx1ZXMpO1xuICAgICAgfSxcbiAgICAgIHJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gcmVnaXN0ZXJGb3JtKG5hbWUsIGZvcm0pIHtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBmb3Jtc1JlZi5jdXJyZW50ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmb3Jtc1JlZi5jdXJyZW50KSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbmFtZSwgZm9ybSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1Db250ZXh0LnJlZ2lzdGVyRm9ybShuYW1lLCBmb3JtKTtcbiAgICAgIH0sXG4gICAgICB1bnJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gdW5yZWdpc3RlckZvcm0obmFtZSkge1xuICAgICAgICB2YXIgbmV3Rm9ybXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBmb3Jtc1JlZi5jdXJyZW50KTtcbiAgICAgICAgZGVsZXRlIG5ld0Zvcm1zW25hbWVdO1xuICAgICAgICBmb3Jtc1JlZi5jdXJyZW50ID0gbmV3Rm9ybXM7XG4gICAgICAgIGZvcm1Db250ZXh0LnVucmVnaXN0ZXJGb3JtKG5hbWUpO1xuICAgICAgfVxuICAgIH0pXG4gIH0sIGNoaWxkcmVuKTtcbn07XG5leHBvcnQgeyBGb3JtUHJvdmlkZXIgfTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJuYW1lXCIsIFwiaW5pdGlhbFZhbHVlc1wiLCBcImZpZWxkc1wiLCBcImZvcm1cIiwgXCJwcmVzZXJ2ZVwiLCBcImNoaWxkcmVuXCIsIFwiY29tcG9uZW50XCIsIFwidmFsaWRhdGVNZXNzYWdlc1wiLCBcInZhbGlkYXRlVHJpZ2dlclwiLCBcIm9uVmFsdWVzQ2hhbmdlXCIsIFwib25GaWVsZHNDaGFuZ2VcIiwgXCJvbkZpbmlzaFwiLCBcIm9uRmluaXNoRmFpbGVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUZvcm0gZnJvbSAnLi91c2VGb3JtJztcbmltcG9ydCBGaWVsZENvbnRleHQsIHsgSE9PS19NQVJLIH0gZnJvbSAnLi9GaWVsZENvbnRleHQnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgaXNTaW1pbGFyIH0gZnJvbSAnLi91dGlscy92YWx1ZVV0aWwnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xudmFyIEZvcm0gPSBmdW5jdGlvbiBGb3JtKF9yZWYsIHJlZikge1xuICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICBpbml0aWFsVmFsdWVzID0gX3JlZi5pbml0aWFsVmFsdWVzLFxuICAgIGZpZWxkcyA9IF9yZWYuZmllbGRzLFxuICAgIGZvcm0gPSBfcmVmLmZvcm0sXG4gICAgcHJlc2VydmUgPSBfcmVmLnByZXNlcnZlLFxuICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBfcmVmJGNvbXBvbmVudCA9IF9yZWYuY29tcG9uZW50LFxuICAgIENvbXBvbmVudCA9IF9yZWYkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZm9ybScgOiBfcmVmJGNvbXBvbmVudCxcbiAgICB2YWxpZGF0ZU1lc3NhZ2VzID0gX3JlZi52YWxpZGF0ZU1lc3NhZ2VzLFxuICAgIF9yZWYkdmFsaWRhdGVUcmlnZ2VyID0gX3JlZi52YWxpZGF0ZVRyaWdnZXIsXG4gICAgdmFsaWRhdGVUcmlnZ2VyID0gX3JlZiR2YWxpZGF0ZVRyaWdnZXIgPT09IHZvaWQgMCA/ICdvbkNoYW5nZScgOiBfcmVmJHZhbGlkYXRlVHJpZ2dlcixcbiAgICBvblZhbHVlc0NoYW5nZSA9IF9yZWYub25WYWx1ZXNDaGFuZ2UsXG4gICAgX29uRmllbGRzQ2hhbmdlID0gX3JlZi5vbkZpZWxkc0NoYW5nZSxcbiAgICBfb25GaW5pc2ggPSBfcmVmLm9uRmluaXNoLFxuICAgIG9uRmluaXNoRmFpbGVkID0gX3JlZi5vbkZpbmlzaEZhaWxlZCxcbiAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgdmFyIGZvcm1Db250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udGV4dCk7XG4gIC8vIFdlIGN1c3RvbWl6ZSBoYW5kbGUgZXZlbnQgc2luY2UgQ29udGV4dCB3aWxsIG1ha2VzIGFsbCB0aGUgY29uc3VtZXIgcmUtcmVuZGVyOlxuICAvLyBodHRwczovL3JlYWN0anMub3JnL2RvY3MvY29udGV4dC5odG1sI2NvbnRleHRwcm92aWRlclxuICB2YXIgX3VzZUZvcm0gPSB1c2VGb3JtKGZvcm0pLFxuICAgIF91c2VGb3JtMiA9IF9zbGljZWRUb0FycmF5KF91c2VGb3JtLCAxKSxcbiAgICBmb3JtSW5zdGFuY2UgPSBfdXNlRm9ybTJbMF07XG4gIHZhciBfZm9ybUluc3RhbmNlJGdldEludGUgPSBmb3JtSW5zdGFuY2UuZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgIHVzZVN1YnNjcmliZSA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS51c2VTdWJzY3JpYmUsXG4gICAgc2V0SW5pdGlhbFZhbHVlcyA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRJbml0aWFsVmFsdWVzLFxuICAgIHNldENhbGxiYWNrcyA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRDYWxsYmFja3MsXG4gICAgc2V0VmFsaWRhdGVNZXNzYWdlcyA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRWYWxpZGF0ZU1lc3NhZ2VzLFxuICAgIHNldFByZXNlcnZlID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLnNldFByZXNlcnZlLFxuICAgIGRlc3Ryb3lGb3JtID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLmRlc3Ryb3lGb3JtO1xuICAvLyBQYXNzIHJlZiB3aXRoIGZvcm0gaW5zdGFuY2VcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm9ybUluc3RhbmNlO1xuICB9KTtcbiAgLy8gUmVnaXN0ZXIgZm9ybSBpbnRvIENvbnRleHRcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmb3JtQ29udGV4dC5yZWdpc3RlckZvcm0obmFtZSwgZm9ybUluc3RhbmNlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9ybUNvbnRleHQudW5yZWdpc3RlckZvcm0obmFtZSk7XG4gICAgfTtcbiAgfSwgW2Zvcm1Db250ZXh0LCBmb3JtSW5zdGFuY2UsIG5hbWVdKTtcbiAgLy8gUGFzcyBwcm9wcyB0byBzdG9yZVxuICBzZXRWYWxpZGF0ZU1lc3NhZ2VzKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUNvbnRleHQudmFsaWRhdGVNZXNzYWdlcyksIHZhbGlkYXRlTWVzc2FnZXMpKTtcbiAgc2V0Q2FsbGJhY2tzKHtcbiAgICBvblZhbHVlc0NoYW5nZTogb25WYWx1ZXNDaGFuZ2UsXG4gICAgb25GaWVsZHNDaGFuZ2U6IGZ1bmN0aW9uIG9uRmllbGRzQ2hhbmdlKGNoYW5nZWRGaWVsZHMpIHtcbiAgICAgIGZvcm1Db250ZXh0LnRyaWdnZXJGb3JtQ2hhbmdlKG5hbWUsIGNoYW5nZWRGaWVsZHMpO1xuICAgICAgaWYgKF9vbkZpZWxkc0NoYW5nZSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgcmVzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgX29uRmllbGRzQ2hhbmdlLmFwcGx5KHZvaWQgMCwgW2NoYW5nZWRGaWVsZHNdLmNvbmNhdChyZXN0KSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkZpbmlzaDogZnVuY3Rpb24gb25GaW5pc2godmFsdWVzKSB7XG4gICAgICBmb3JtQ29udGV4dC50cmlnZ2VyRm9ybUZpbmlzaChuYW1lLCB2YWx1ZXMpO1xuICAgICAgaWYgKF9vbkZpbmlzaCkge1xuICAgICAgICBfb25GaW5pc2godmFsdWVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRmluaXNoRmFpbGVkOiBvbkZpbmlzaEZhaWxlZFxuICB9KTtcbiAgc2V0UHJlc2VydmUocHJlc2VydmUpO1xuICAvLyBTZXQgaW5pdGlhbCB2YWx1ZSwgaW5pdCBzdG9yZSB2YWx1ZSB3aGVuIGZpcnN0IG1vdW50XG4gIHZhciBtb3VudFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgc2V0SW5pdGlhbFZhbHVlcyhpbml0aWFsVmFsdWVzLCAhbW91bnRSZWYuY3VycmVudCk7XG4gIGlmICghbW91bnRSZWYuY3VycmVudCkge1xuICAgIG1vdW50UmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlc3Ryb3lGb3JtO1xuICB9LFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIFtdKTtcbiAgLy8gUHJlcGFyZSBjaGlsZHJlbiBieSBgY2hpbGRyZW5gIHR5cGVcbiAgdmFyIGNoaWxkcmVuTm9kZTtcbiAgdmFyIGNoaWxkcmVuUmVuZGVyUHJvcHMgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbic7XG4gIGlmIChjaGlsZHJlblJlbmRlclByb3BzKSB7XG4gICAgdmFyIHZhbHVlcyA9IGZvcm1JbnN0YW5jZS5nZXRGaWVsZHNWYWx1ZSh0cnVlKTtcbiAgICBjaGlsZHJlbk5vZGUgPSBjaGlsZHJlbih2YWx1ZXMsIGZvcm1JbnN0YW5jZSk7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW5Ob2RlID0gY2hpbGRyZW47XG4gIH1cbiAgLy8gTm90IHVzZSBzdWJzY3JpYmUgd2hlbiB1c2luZyByZW5kZXIgcHJvcHNcbiAgdXNlU3Vic2NyaWJlKCFjaGlsZHJlblJlbmRlclByb3BzKTtcbiAgLy8gTGlzdGVuIGlmIGZpZWxkcyBwcm92aWRlZC4gV2UgdXNlIHJlZiB0byBzYXZlIHByZXYgZGF0YSBoZXJlIHRvIGF2b2lkIGFkZGl0aW9uYWwgcmVuZGVyXG4gIHZhciBwcmV2RmllbGRzUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc1NpbWlsYXIocHJldkZpZWxkc1JlZi5jdXJyZW50IHx8IFtdLCBmaWVsZHMgfHwgW10pKSB7XG4gICAgICBmb3JtSW5zdGFuY2Uuc2V0RmllbGRzKGZpZWxkcyB8fCBbXSk7XG4gICAgfVxuICAgIHByZXZGaWVsZHNSZWYuY3VycmVudCA9IGZpZWxkcztcbiAgfSwgW2ZpZWxkcywgZm9ybUluc3RhbmNlXSk7XG4gIHZhciBmb3JtQ29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUluc3RhbmNlKSwge30sIHtcbiAgICAgIHZhbGlkYXRlVHJpZ2dlcjogdmFsaWRhdGVUcmlnZ2VyXG4gICAgfSk7XG4gIH0sIFtmb3JtSW5zdGFuY2UsIHZhbGlkYXRlVHJpZ2dlcl0pO1xuICB2YXIgd3JhcHBlck5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmb3JtQ29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuTm9kZSkpO1xuICBpZiAoQ29tcG9uZW50ID09PSBmYWxzZSkge1xuICAgIHJldHVybiB3cmFwcGVyTm9kZTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVzdFByb3BzLCB7XG4gICAgb25TdWJtaXQ6IGZ1bmN0aW9uIG9uU3VibWl0KGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBmb3JtSW5zdGFuY2Uuc3VibWl0KCk7XG4gICAgfSxcbiAgICBvblJlc2V0OiBmdW5jdGlvbiBvblJlc2V0KGV2ZW50KSB7XG4gICAgICB2YXIgX3Jlc3RQcm9wcyRvblJlc2V0O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGZvcm1JbnN0YW5jZS5yZXNldEZpZWxkcygpO1xuICAgICAgKF9yZXN0UHJvcHMkb25SZXNldCA9IHJlc3RQcm9wcy5vblJlc2V0KSA9PT0gbnVsbCB8fCBfcmVzdFByb3BzJG9uUmVzZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXN0UHJvcHMkb25SZXNldC5jYWxsKHJlc3RQcm9wcywgZXZlbnQpO1xuICAgIH1cbiAgfSksIHdyYXBwZXJOb2RlKTtcbn07XG5leHBvcnQgZGVmYXVsdCBGb3JtOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0IEZpZWxkQ29udGV4dCwgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXROYW1lUGF0aCwgZ2V0VmFsdWUgfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG5pbXBvcnQgeyBpc0Zvcm1JbnN0YW5jZSB9IGZyb20gJy4vdXRpbHMvdHlwZVV0aWwnO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpO1xuICB9XG59XG52YXIgdXNlV2F0Y2hXYXJuaW5nID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICB2YXIgZnVsbHlTdHIgPSBuYW1lUGF0aC5qb2luKCdfX1JDX0ZJRUxEX0ZPUk1fU1BMSVRfXycpO1xuICB2YXIgbmFtZVN0clJlZiA9IHVzZVJlZihmdWxseVN0cik7XG4gIHdhcm5pbmcobmFtZVN0clJlZi5jdXJyZW50ID09PSBmdWxseVN0ciwgJ2B1c2VXYXRjaGAgaXMgbm90IHN1cHBvcnQgZHluYW1pYyBgbmFtZVBhdGhgLiBQbGVhc2UgcHJvdmlkZSBzdGF0aWMgaW5zdGVhZC4nKTtcbn0gOiBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIHVzZVdhdGNoKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHZhciBfYXJncyQgPSBhcmdzWzBdLFxuICAgIGRlcGVuZGVuY2llcyA9IF9hcmdzJCA9PT0gdm9pZCAwID8gW10gOiBfYXJncyQsXG4gICAgX2FyZ3MkMiA9IGFyZ3NbMV0sXG4gICAgX2Zvcm0gPSBfYXJncyQyID09PSB2b2lkIDAgPyB7fSA6IF9hcmdzJDI7XG4gIHZhciBvcHRpb25zID0gaXNGb3JtSW5zdGFuY2UoX2Zvcm0pID8ge1xuICAgIGZvcm06IF9mb3JtXG4gIH0gOiBfZm9ybTtcbiAgdmFyIGZvcm0gPSBvcHRpb25zLmZvcm07XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIHZhbHVlID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRWYWx1ZSA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciB2YWx1ZVN0ciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdHJpbmdpZnkodmFsdWUpO1xuICB9LCBbdmFsdWVdKTtcbiAgdmFyIHZhbHVlU3RyUmVmID0gdXNlUmVmKHZhbHVlU3RyKTtcbiAgdmFsdWVTdHJSZWYuY3VycmVudCA9IHZhbHVlU3RyO1xuICB2YXIgZmllbGRDb250ZXh0ID0gdXNlQ29udGV4dChGaWVsZENvbnRleHQpO1xuICB2YXIgZm9ybUluc3RhbmNlID0gZm9ybSB8fCBmaWVsZENvbnRleHQ7XG4gIHZhciBpc1ZhbGlkRm9ybSA9IGZvcm1JbnN0YW5jZSAmJiBmb3JtSW5zdGFuY2UuX2luaXQ7XG4gIC8vIFdhcm5pbmcgaWYgbm90IGV4aXN0IGZvcm0gaW5zdGFuY2VcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuaW5nKGFyZ3MubGVuZ3RoID09PSAyID8gZm9ybSA/IGlzVmFsaWRGb3JtIDogdHJ1ZSA6IGlzVmFsaWRGb3JtLCAndXNlV2F0Y2ggcmVxdWlyZXMgYSBmb3JtIGluc3RhbmNlIHNpbmNlIGl0IGNhbiBub3QgYXV0byBkZXRlY3QgZnJvbSBjb250ZXh0LicpO1xuICB9XG4gIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKGRlcGVuZGVuY2llcyk7XG4gIHZhciBuYW1lUGF0aFJlZiA9IHVzZVJlZihuYW1lUGF0aCk7XG4gIG5hbWVQYXRoUmVmLmN1cnJlbnQgPSBuYW1lUGF0aDtcbiAgdXNlV2F0Y2hXYXJuaW5nKG5hbWVQYXRoKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTa2lwIGlmIG5vdCBleGlzdCBmb3JtIGluc3RhbmNlXG4gICAgaWYgKCFpc1ZhbGlkRm9ybSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZ2V0RmllbGRzVmFsdWUgPSBmb3JtSW5zdGFuY2UuZ2V0RmllbGRzVmFsdWUsXG4gICAgICBnZXRJbnRlcm5hbEhvb2tzID0gZm9ybUluc3RhbmNlLmdldEludGVybmFsSG9va3M7XG4gICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzID0gZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgcmVnaXN0ZXJXYXRjaCA9IF9nZXRJbnRlcm5hbEhvb2tzLnJlZ2lzdGVyV2F0Y2g7XG4gICAgdmFyIGNhbmNlbFJlZ2lzdGVyID0gcmVnaXN0ZXJXYXRjaChmdW5jdGlvbiAodmFsdWVzLCBhbGxWYWx1ZXMpIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGdldFZhbHVlKG9wdGlvbnMucHJlc2VydmUgPyBhbGxWYWx1ZXMgOiB2YWx1ZXMsIG5hbWVQYXRoUmVmLmN1cnJlbnQpO1xuICAgICAgdmFyIG5leHRWYWx1ZVN0ciA9IHN0cmluZ2lmeShuZXdWYWx1ZSk7XG4gICAgICAvLyBDb21wYXJlIHN0cmluZ2lmeSBpbiBjYXNlIGl0J3MgbmVzdCBvYmplY3RcbiAgICAgIGlmICh2YWx1ZVN0clJlZi5jdXJyZW50ICE9PSBuZXh0VmFsdWVTdHIpIHtcbiAgICAgICAgdmFsdWVTdHJSZWYuY3VycmVudCA9IG5leHRWYWx1ZVN0cjtcbiAgICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFRPRE86IFdlIGNhbiBpbXByb3ZlIHRoaXMgcGVyZiBpbiBmdXR1cmVcbiAgICB2YXIgaW5pdGlhbFZhbHVlID0gZ2V0VmFsdWUob3B0aW9ucy5wcmVzZXJ2ZSA/IGdldEZpZWxkc1ZhbHVlKHRydWUpIDogZ2V0RmllbGRzVmFsdWUoKSwgbmFtZVBhdGhSZWYuY3VycmVudCk7XG4gICAgc2V0VmFsdWUoaW5pdGlhbFZhbHVlKTtcbiAgICByZXR1cm4gY2FuY2VsUmVnaXN0ZXI7XG4gIH0sXG4gIC8vIFdlIGRvIG5vdCBuZWVkIHJlLXJlZ2lzdGVyIHNpbmNlIG5hbWVQYXRoIGNvbnRlbnQgaXMgdGhlIHNhbWVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbaXNWYWxpZEZvcm1dKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlV2F0Y2g7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0JztcbmltcG9ydCB1c2VGb3JtIGZyb20gJy4vdXNlRm9ybSc7XG5pbXBvcnQgRmllbGRGb3JtIGZyb20gJy4vRm9ybSc7XG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCBGaWVsZENvbnRleHQgZnJvbSAnLi9GaWVsZENvbnRleHQnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuaW1wb3J0IHVzZVdhdGNoIGZyb20gJy4vdXNlV2F0Y2gnO1xudmFyIEludGVybmFsRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEZpZWxkRm9ybSk7XG52YXIgUmVmRm9ybSA9IEludGVybmFsRm9ybTtcblJlZkZvcm0uRm9ybVByb3ZpZGVyID0gRm9ybVByb3ZpZGVyO1xuUmVmRm9ybS5GaWVsZCA9IEZpZWxkO1xuUmVmRm9ybS5MaXN0ID0gTGlzdDtcblJlZkZvcm0udXNlRm9ybSA9IHVzZUZvcm07XG5SZWZGb3JtLnVzZVdhdGNoID0gdXNlV2F0Y2g7XG5leHBvcnQgeyBGaWVsZCwgTGlzdCwgdXNlRm9ybSwgRm9ybVByb3ZpZGVyLCBGaWVsZENvbnRleHQsIExpc3RDb250ZXh0LCB1c2VXYXRjaCB9O1xuZXhwb3J0IGRlZmF1bHQgUmVmRm9ybTsiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjYW5Vc2VEb20gZnJvbSBcIi4uL0RvbS9jYW5Vc2VEb21cIjtcblxuLyoqXG4gKiBXcmFwIGBSZWFjdC51c2VMYXlvdXRFZmZlY3RgIHdoaWNoIHdpbGwgbm90IHRocm93IHdhcm5pbmcgbWVzc2FnZSBpbiB0ZXN0IGVudlxuICovXG52YXIgdXNlSW50ZXJuYWxMYXlvdXRFZmZlY3QgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGNhblVzZURvbSgpID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHVzZUxheW91dEVmZmVjdCA9IGZ1bmN0aW9uIHVzZUxheW91dEVmZmVjdChjYWxsYmFjaywgZGVwcykge1xuICB2YXIgZmlyc3RNb3VudFJlZiA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgdXNlSW50ZXJuYWxMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsYmFjayhmaXJzdE1vdW50UmVmLmN1cnJlbnQpO1xuICB9LCBkZXBzKTtcblxuICAvLyBXZSB0ZWxsIHJlYWN0IHRoYXQgZmlyc3QgbW91bnQgaGFzIHBhc3NlZFxuICB1c2VJbnRlcm5hbExheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZmlyc3RNb3VudFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZpcnN0TW91bnRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xufTtcbmV4cG9ydCB2YXIgdXNlTGF5b3V0VXBkYXRlRWZmZWN0ID0gZnVuY3Rpb24gdXNlTGF5b3V0VXBkYXRlRWZmZWN0KGNhbGxiYWNrLCBkZXBzKSB7XG4gIHVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoZmlyc3RNb3VudCkge1xuICAgIGlmICghZmlyc3RNb3VudCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9LCBkZXBzKTtcbn07XG5leHBvcnQgZGVmYXVsdCB1c2VMYXlvdXRFZmZlY3Q7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1vdGlvblByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBwcm9wc1xuICB9LCBjaGlsZHJlbik7XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBEb21XcmFwcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEb21XcmFwcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEb21XcmFwcGVyKTtcbiAgZnVuY3Rpb24gRG9tV3JhcHBlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRG9tV3JhcHBlcik7XG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhEb21XcmFwcGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEb21XcmFwcGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuZXhwb3J0IGRlZmF1bHQgRG9tV3JhcHBlcjsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjtcbi8vID09PT09PT09PT09PT09PT09IFRyYW5zaXRpb24gPT09PT09PT09PT09PT09PT1cbi8vIEV2ZW50IHdyYXBwZXIuIENvcHkgZnJvbSByZWFjdCBzb3VyY2UgY29kZVxuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgcHJlZml4ZXNbc3R5bGVQcm9wLnRvTG93ZXJDYXNlKCldID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHByZWZpeGVzW1wiV2Via2l0XCIuY29uY2F0KHN0eWxlUHJvcCldID0gXCJ3ZWJraXRcIi5jb25jYXQoZXZlbnROYW1lKTtcbiAgcHJlZml4ZXNbXCJNb3pcIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIm1velwiLmNvbmNhdChldmVudE5hbWUpO1xuICBwcmVmaXhlc1tcIm1zXCIuY29uY2F0KHN0eWxlUHJvcCldID0gXCJNU1wiLmNvbmNhdChldmVudE5hbWUpO1xuICBwcmVmaXhlc1tcIk9cIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIm9cIi5jb25jYXQoZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkpO1xuICByZXR1cm4gcHJlZml4ZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZXMoZG9tU3VwcG9ydCwgd2luKSB7XG4gIHZhciBwcmVmaXhlcyA9IHtcbiAgICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25FbmQnKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdUcmFuc2l0aW9uJywgJ1RyYW5zaXRpb25FbmQnKVxuICB9O1xuICBpZiAoZG9tU3VwcG9ydCkge1xuICAgIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luKSkge1xuICAgICAgZGVsZXRlIHByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgfVxuICAgIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbikpIHtcbiAgICAgIGRlbGV0ZSBwcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb247XG4gICAgfVxuICB9XG4gIHJldHVybiBwcmVmaXhlcztcbn1cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IGdldFZlbmRvclByZWZpeGVzKGNhblVzZURPTSgpLCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9KTtcbnZhciBzdHlsZSA9IHt9O1xuaWYgKGNhblVzZURPTSgpKSB7XG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG59XG52YXIgcHJlZml4ZWRFdmVudE5hbWVzID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXTtcbiAgfVxuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXTtcbiAgaWYgKHByZWZpeE1hcCkge1xuICAgIHZhciBzdHlsZVByb3BMaXN0ID0gT2JqZWN0LmtleXMocHJlZml4TWFwKTtcbiAgICB2YXIgbGVuID0gc3R5bGVQcm9wTGlzdC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdmFyIHN0eWxlUHJvcCA9IHN0eWxlUHJvcExpc3RbaV07XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByZWZpeE1hcCwgc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG52YXIgaW50ZXJuYWxBbmltYXRpb25FbmROYW1lID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbmVuZCcpO1xudmFyIGludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgndHJhbnNpdGlvbmVuZCcpO1xuZXhwb3J0IHZhciBzdXBwb3J0VHJhbnNpdGlvbiA9ICEhKGludGVybmFsQW5pbWF0aW9uRW5kTmFtZSAmJiBpbnRlcm5hbFRyYW5zaXRpb25FbmROYW1lKTtcbmV4cG9ydCB2YXIgYW5pbWF0aW9uRW5kTmFtZSA9IGludGVybmFsQW5pbWF0aW9uRW5kTmFtZSB8fCAnYW5pbWF0aW9uZW5kJztcbmV4cG9ydCB2YXIgdHJhbnNpdGlvbkVuZE5hbWUgPSBpbnRlcm5hbFRyYW5zaXRpb25FbmROYW1lIHx8ICd0cmFuc2l0aW9uZW5kJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uTmFtZSh0cmFuc2l0aW9uTmFtZSwgdHJhbnNpdGlvblR5cGUpIHtcbiAgaWYgKCF0cmFuc2l0aW9uTmFtZSkgcmV0dXJuIG51bGw7XG4gIGlmIChfdHlwZW9mKHRyYW5zaXRpb25OYW1lKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgdHlwZSA9IHRyYW5zaXRpb25UeXBlLnJlcGxhY2UoLy1cXHcvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWVbdHlwZV07XG4gIH1cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHRyYW5zaXRpb25OYW1lLCBcIi1cIikuY29uY2F0KHRyYW5zaXRpb25UeXBlKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhbmltYXRpb25FbmROYW1lLCB0cmFuc2l0aW9uRW5kTmFtZSB9IGZyb20gXCIuLi91dGlsL21vdGlvblwiO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgY2FjaGVFbGVtZW50UmVmID0gdXNlUmVmKCk7XG5cbiAgLy8gQ2FjaGUgY2FsbGJhY2tcbiAgdmFyIGNhbGxiYWNrUmVmID0gdXNlUmVmKGNhbGxiYWNrKTtcbiAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuXG4gIC8vIEludGVybmFsIG1vdGlvbiBldmVudCBoYW5kbGVyXG4gIHZhciBvbkludGVybmFsTW90aW9uRW5kID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY2FsbGJhY2tSZWYuY3VycmVudChldmVudCk7XG4gIH0sIFtdKTtcblxuICAvLyBSZW1vdmUgZXZlbnRzXG4gIGZ1bmN0aW9uIHJlbW92ZU1vdGlvbkV2ZW50cyhlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kTmFtZSwgb25JbnRlcm5hbE1vdGlvbkVuZCk7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uRW5kTmFtZSwgb25JbnRlcm5hbE1vdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUGF0Y2ggZXZlbnRzXG4gIGZ1bmN0aW9uIHBhdGNoTW90aW9uRXZlbnRzKGVsZW1lbnQpIHtcbiAgICBpZiAoY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQgJiYgY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQgIT09IGVsZW1lbnQpIHtcbiAgICAgIHJlbW92ZU1vdGlvbkV2ZW50cyhjYWNoZUVsZW1lbnRSZWYuY3VycmVudCk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IGNhY2hlRWxlbWVudFJlZi5jdXJyZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpO1xuXG4gICAgICAvLyBTYXZlIGFzIGNhY2hlIGluIGNhc2UgZG9tIHJlbW92ZWQgdHJpZ2dlciBieSBgbW90aW9uRGVhZGxpbmVgXG4gICAgICBjYWNoZUVsZW1lbnRSZWYuY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2xlYW4gdXAgd2hlbiByZW1vdmVkXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZU1vdGlvbkV2ZW50cyhjYWNoZUVsZW1lbnRSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3BhdGNoTW90aW9uRXZlbnRzLCByZW1vdmVNb3Rpb25FdmVudHNdO1xufSk7IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2FuVXNlRG9tIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjtcblxuLy8gSXQncyBzYWZlIHRvIHVzZSBgdXNlTGF5b3V0RWZmZWN0YCBidXQgdGhlIHdhcm5pbmcgaXMgYW5ub3lpbmdcbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRG9tKCkgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0OyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHVzZVN0YXRlIGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZVN0YXRlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTVEVQX0FDVElWQVRFRCwgU1RFUF9BQ1RJVkUsIFNURVBfTk9ORSwgU1RFUF9QUkVQQVJFLCBTVEVQX1BSRVBBUkVELCBTVEVQX1NUQVJUIH0gZnJvbSBcIi4uL2ludGVyZmFjZVwiO1xuaW1wb3J0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgZnJvbSBcIi4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFwiO1xuaW1wb3J0IHVzZU5leHRGcmFtZSBmcm9tIFwiLi91c2VOZXh0RnJhbWVcIjtcbnZhciBGVUxMX1NURVBfUVVFVUUgPSBbU1RFUF9QUkVQQVJFLCBTVEVQX1NUQVJULCBTVEVQX0FDVElWRSwgU1RFUF9BQ1RJVkFURURdO1xudmFyIFNJTVBMRV9TVEVQX1FVRVVFID0gW1NURVBfUFJFUEFSRSwgU1RFUF9QUkVQQVJFRF07XG5cbi8qKiBTa2lwIGN1cnJlbnQgc3RlcCAqL1xuZXhwb3J0IHZhciBTa2lwU3RlcCA9IGZhbHNlO1xuLyoqIEN1cnJlbnQgc3RlcCBzaG91bGQgYmUgdXBkYXRlIGluICovXG5leHBvcnQgdmFyIERvU3RlcCA9IHRydWU7XG5leHBvcnQgZnVuY3Rpb24gaXNBY3RpdmUoc3RlcCkge1xuICByZXR1cm4gc3RlcCA9PT0gU1RFUF9BQ1RJVkUgfHwgc3RlcCA9PT0gU1RFUF9BQ1RJVkFURUQ7XG59XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHN0YXR1cywgcHJlcGFyZU9ubHksIGNhbGxiYWNrKSB7XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShTVEVQX05PTkUpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIHN0ZXAgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldFN0ZXAgPSBfdXNlU3RhdGUyWzFdO1xuICB2YXIgX3VzZU5leHRGcmFtZSA9IHVzZU5leHRGcmFtZSgpLFxuICAgIF91c2VOZXh0RnJhbWUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZU5leHRGcmFtZSwgMiksXG4gICAgbmV4dEZyYW1lID0gX3VzZU5leHRGcmFtZTJbMF0sXG4gICAgY2FuY2VsTmV4dEZyYW1lID0gX3VzZU5leHRGcmFtZTJbMV07XG4gIGZ1bmN0aW9uIHN0YXJ0UXVldWUoKSB7XG4gICAgc2V0U3RlcChTVEVQX1BSRVBBUkUsIHRydWUpO1xuICB9XG4gIHZhciBTVEVQX1FVRVVFID0gcHJlcGFyZU9ubHkgPyBTSU1QTEVfU1RFUF9RVUVVRSA6IEZVTExfU1RFUF9RVUVVRTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0ZXAgIT09IFNURVBfTk9ORSAmJiBzdGVwICE9PSBTVEVQX0FDVElWQVRFRCkge1xuICAgICAgdmFyIGluZGV4ID0gU1RFUF9RVUVVRS5pbmRleE9mKHN0ZXApO1xuICAgICAgdmFyIG5leHRTdGVwID0gU1RFUF9RVUVVRVtpbmRleCArIDFdO1xuICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKHN0ZXApO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gU2tpcFN0ZXApIHtcbiAgICAgICAgLy8gU2tpcCB3aGVuIG5vIG5lZWRlZFxuICAgICAgICBzZXRTdGVwKG5leHRTdGVwLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dFN0ZXApIHtcbiAgICAgICAgLy8gRG8gYXMgZnJhbWUgZm9yIHN0ZXAgdXBkYXRlXG4gICAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgIGZ1bmN0aW9uIGRvTmV4dCgpIHtcbiAgICAgICAgICAgIC8vIFNraXAgc2luY2UgY3VycmVudCBxdWV1ZSBpcyBvb2RcbiAgICAgICAgICAgIGlmIChpbmZvLmlzQ2FuY2VsZWQoKSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0U3RlcChuZXh0U3RlcCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRvTmV4dCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IHByb21pc2Ugc2hvdWxkIGJlIGFzeW5jXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKGRvTmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtzdGF0dXMsIHN0ZXBdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2FuY2VsTmV4dEZyYW1lKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3N0YXJ0UXVldWUsIHN0ZXBdO1xufSk7IiwiZXhwb3J0IHZhciBTVEFUVVNfTk9ORSA9ICdub25lJztcbmV4cG9ydCB2YXIgU1RBVFVTX0FQUEVBUiA9ICdhcHBlYXInO1xuZXhwb3J0IHZhciBTVEFUVVNfRU5URVIgPSAnZW50ZXInO1xuZXhwb3J0IHZhciBTVEFUVVNfTEVBVkUgPSAnbGVhdmUnO1xuZXhwb3J0IHZhciBTVEVQX05PTkUgPSAnbm9uZSc7XG5leHBvcnQgdmFyIFNURVBfUFJFUEFSRSA9ICdwcmVwYXJlJztcbmV4cG9ydCB2YXIgU1RFUF9TVEFSVCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIFNURVBfQUNUSVZFID0gJ2FjdGl2ZSc7XG5leHBvcnQgdmFyIFNURVBfQUNUSVZBVEVEID0gJ2VuZCc7XG4vKipcbiAqIFVzZWQgZm9yIGRpc2FibGVkIG1vdGlvbiBjYXNlLlxuICogUHJlcGFyZSBzdGFnZSB3aWxsIHN0aWxsIHdvcmsgYnV0IHN0YXJ0ICYgYWN0aXZlIHdpbGwgYmUgc2tpcHBlZC5cbiAqL1xuZXhwb3J0IHZhciBTVEVQX1BSRVBBUkVEID0gJ3ByZXBhcmVkJzsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmFmIGZyb20gXCJyYy11dGlsL2VzL3JhZlwiO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5leHRGcmFtZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgZnVuY3Rpb24gY2FuY2VsTmV4dEZyYW1lKCkge1xuICAgIHJhZi5jYW5jZWwobmV4dEZyYW1lUmVmLmN1cnJlbnQpO1xuICB9XG4gIGZ1bmN0aW9uIG5leHRGcmFtZShjYWxsYmFjaykge1xuICAgIHZhciBkZWxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjtcbiAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB2YXIgbmV4dEZyYW1lSWQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlbGF5IDw9IDEpIHtcbiAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgIGlzQ2FuY2VsZWQ6IGZ1bmN0aW9uIGlzQ2FuY2VsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dEZyYW1lSWQgIT09IG5leHRGcmFtZVJlZi5jdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RnJhbWUoY2FsbGJhY2ssIGRlbGF5IC0gMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV4dEZyYW1lUmVmLmN1cnJlbnQgPSBuZXh0RnJhbWVJZDtcbiAgfVxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbbmV4dEZyYW1lLCBjYW5jZWxOZXh0RnJhbWVdO1xufSk7IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTVEFUVVNfQVBQRUFSLCBTVEFUVVNfRU5URVIsIFNUQVRVU19MRUFWRSwgU1RBVFVTX05PTkUsIFNURVBfQUNUSVZFLCBTVEVQX1BSRVBBUkUsIFNURVBfUFJFUEFSRUQsIFNURVBfU1RBUlQgfSBmcm9tIFwiLi4vaW50ZXJmYWNlXCI7XG5pbXBvcnQgdXNlRG9tTW90aW9uRXZlbnRzIGZyb20gXCIuL3VzZURvbU1vdGlvbkV2ZW50c1wiO1xuaW1wb3J0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgZnJvbSBcIi4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFwiO1xuaW1wb3J0IHVzZVN0ZXBRdWV1ZSwgeyBEb1N0ZXAsIGlzQWN0aXZlLCBTa2lwU3RlcCB9IGZyb20gXCIuL3VzZVN0ZXBRdWV1ZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU3RhdHVzKHN1cHBvcnRNb3Rpb24sIHZpc2libGUsIGdldEVsZW1lbnQsIF9yZWYpIHtcbiAgdmFyIF9yZWYkbW90aW9uRW50ZXIgPSBfcmVmLm1vdGlvbkVudGVyLFxuICAgIG1vdGlvbkVudGVyID0gX3JlZiRtb3Rpb25FbnRlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbW90aW9uRW50ZXIsXG4gICAgX3JlZiRtb3Rpb25BcHBlYXIgPSBfcmVmLm1vdGlvbkFwcGVhcixcbiAgICBtb3Rpb25BcHBlYXIgPSBfcmVmJG1vdGlvbkFwcGVhciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbW90aW9uQXBwZWFyLFxuICAgIF9yZWYkbW90aW9uTGVhdmUgPSBfcmVmLm1vdGlvbkxlYXZlLFxuICAgIG1vdGlvbkxlYXZlID0gX3JlZiRtb3Rpb25MZWF2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbW90aW9uTGVhdmUsXG4gICAgbW90aW9uRGVhZGxpbmUgPSBfcmVmLm1vdGlvbkRlYWRsaW5lLFxuICAgIG1vdGlvbkxlYXZlSW1tZWRpYXRlbHkgPSBfcmVmLm1vdGlvbkxlYXZlSW1tZWRpYXRlbHksXG4gICAgb25BcHBlYXJQcmVwYXJlID0gX3JlZi5vbkFwcGVhclByZXBhcmUsXG4gICAgb25FbnRlclByZXBhcmUgPSBfcmVmLm9uRW50ZXJQcmVwYXJlLFxuICAgIG9uTGVhdmVQcmVwYXJlID0gX3JlZi5vbkxlYXZlUHJlcGFyZSxcbiAgICBvbkFwcGVhclN0YXJ0ID0gX3JlZi5vbkFwcGVhclN0YXJ0LFxuICAgIG9uRW50ZXJTdGFydCA9IF9yZWYub25FbnRlclN0YXJ0LFxuICAgIG9uTGVhdmVTdGFydCA9IF9yZWYub25MZWF2ZVN0YXJ0LFxuICAgIG9uQXBwZWFyQWN0aXZlID0gX3JlZi5vbkFwcGVhckFjdGl2ZSxcbiAgICBvbkVudGVyQWN0aXZlID0gX3JlZi5vbkVudGVyQWN0aXZlLFxuICAgIG9uTGVhdmVBY3RpdmUgPSBfcmVmLm9uTGVhdmVBY3RpdmUsXG4gICAgb25BcHBlYXJFbmQgPSBfcmVmLm9uQXBwZWFyRW5kLFxuICAgIG9uRW50ZXJFbmQgPSBfcmVmLm9uRW50ZXJFbmQsXG4gICAgb25MZWF2ZUVuZCA9IF9yZWYub25MZWF2ZUVuZCxcbiAgICBvblZpc2libGVDaGFuZ2VkID0gX3JlZi5vblZpc2libGVDaGFuZ2VkO1xuICAvLyBVc2VkIGZvciBvdXRlciByZW5kZXIgdXNhZ2UgdG8gYXZvaWQgYHZpc2libGU6IGZhbHNlICYgc3RhdHVzOiBub25lYCB0byByZW5kZXIgbm90aGluZ1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoKSxcbiAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICBhc3luY1Zpc2libGUgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldEFzeW5jVmlzaWJsZSA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBfdXNlU3RhdGUzID0gdXNlU3RhdGUoU1RBVFVTX05PTkUpLFxuICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICBzdGF0dXMgPSBfdXNlU3RhdGU0WzBdLFxuICAgIHNldFN0YXR1cyA9IF91c2VTdGF0ZTRbMV07XG4gIHZhciBfdXNlU3RhdGU1ID0gdXNlU3RhdGUobnVsbCksXG4gICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLFxuICAgIHN0eWxlID0gX3VzZVN0YXRlNlswXSxcbiAgICBzZXRTdHlsZSA9IF91c2VTdGF0ZTZbMV07XG4gIHZhciBtb3VudGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdmFyIGRlYWRsaW5lUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBEb20gTm9kZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgZnVuY3Rpb24gZ2V0RG9tRWxlbWVudCgpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudCgpO1xuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0gTW90aW9uIEVuZCA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgYWN0aXZlUmVmID0gdXNlUmVmKGZhbHNlKTtcblxuICAvKipcbiAgICogQ2xlYW4gdXAgc3RhdHVzICYgc3R5bGVcbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZU1vdGlvbkVuZFN0YXR1cygpIHtcbiAgICBzZXRTdGF0dXMoU1RBVFVTX05PTkUsIHRydWUpO1xuICAgIHNldFN0eWxlKG51bGwsIHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uSW50ZXJuYWxNb3Rpb25FbmQoZXZlbnQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGdldERvbUVsZW1lbnQoKTtcbiAgICBpZiAoZXZlbnQgJiYgIWV2ZW50LmRlYWRsaW5lICYmIGV2ZW50LnRhcmdldCAhPT0gZWxlbWVudCkge1xuICAgICAgLy8gZXZlbnQgZXhpc3RzXG4gICAgICAvLyBub3QgaW5pdGlhdGVkIGJ5IGRlYWRsaW5lXG4gICAgICAvLyB0cmFuc2l0aW9uRW5kIG5vdCBmaXJlZCBieSBpbm5lciBlbGVtZW50c1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgY3VycmVudEFjdGl2ZSA9IGFjdGl2ZVJlZi5jdXJyZW50O1xuICAgIHZhciBjYW5FbmQ7XG4gICAgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX0FQUEVBUiAmJiBjdXJyZW50QWN0aXZlKSB7XG4gICAgICBjYW5FbmQgPSBvbkFwcGVhckVuZCA9PT0gbnVsbCB8fCBvbkFwcGVhckVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25BcHBlYXJFbmQoZWxlbWVudCwgZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTVEFUVVNfRU5URVIgJiYgY3VycmVudEFjdGl2ZSkge1xuICAgICAgY2FuRW5kID0gb25FbnRlckVuZCA9PT0gbnVsbCB8fCBvbkVudGVyRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkVudGVyRW5kKGVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX0xFQVZFICYmIGN1cnJlbnRBY3RpdmUpIHtcbiAgICAgIGNhbkVuZCA9IG9uTGVhdmVFbmQgPT09IG51bGwgfHwgb25MZWF2ZUVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25MZWF2ZUVuZChlbGVtZW50LCBldmVudCk7XG4gICAgfVxuXG4gICAgLy8gT25seSB1cGRhdGUgc3RhdHVzIHdoZW4gYGNhbkVuZGAgYW5kIG5vdCBkZXN0cm95ZWRcbiAgICBpZiAoc3RhdHVzICE9PSBTVEFUVVNfTk9ORSAmJiBjdXJyZW50QWN0aXZlICYmIGNhbkVuZCAhPT0gZmFsc2UpIHtcbiAgICAgIHVwZGF0ZU1vdGlvbkVuZFN0YXR1cygpO1xuICAgIH1cbiAgfVxuICB2YXIgX3VzZURvbU1vdGlvbkV2ZW50cyA9IHVzZURvbU1vdGlvbkV2ZW50cyhvbkludGVybmFsTW90aW9uRW5kKSxcbiAgICBfdXNlRG9tTW90aW9uRXZlbnRzMiA9IF9zbGljZWRUb0FycmF5KF91c2VEb21Nb3Rpb25FdmVudHMsIDEpLFxuICAgIHBhdGNoTW90aW9uRXZlbnRzID0gX3VzZURvbU1vdGlvbkV2ZW50czJbMF07XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU3RlcCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgZ2V0RXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uIGdldEV2ZW50SGFuZGxlcnModGFyZ2V0U3RhdHVzKSB7XG4gICAgdmFyIF9yZWYyLCBfcmVmMywgX3JlZjQ7XG4gICAgc3dpdGNoICh0YXJnZXRTdGF0dXMpIHtcbiAgICAgIGNhc2UgU1RBVFVTX0FQUEVBUjpcbiAgICAgICAgcmV0dXJuIF9yZWYyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9QUkVQQVJFLCBvbkFwcGVhclByZXBhcmUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFNURVBfU1RBUlQsIG9uQXBwZWFyU3RhcnQpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFNURVBfQUNUSVZFLCBvbkFwcGVhckFjdGl2ZSksIF9yZWYyO1xuICAgICAgY2FzZSBTVEFUVVNfRU5URVI6XG4gICAgICAgIHJldHVybiBfcmVmMyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFNURVBfUFJFUEFSRSwgb25FbnRlclByZXBhcmUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFNURVBfU1RBUlQsIG9uRW50ZXJTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9BQ1RJVkUsIG9uRW50ZXJBY3RpdmUpLCBfcmVmMztcbiAgICAgIGNhc2UgU1RBVFVTX0xFQVZFOlxuICAgICAgICByZXR1cm4gX3JlZjQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWY0LCBTVEVQX1BSRVBBUkUsIG9uTGVhdmVQcmVwYXJlKSwgX2RlZmluZVByb3BlcnR5KF9yZWY0LCBTVEVQX1NUQVJULCBvbkxlYXZlU3RhcnQpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjQsIFNURVBfQUNUSVZFLCBvbkxlYXZlQWN0aXZlKSwgX3JlZjQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICB9O1xuICB2YXIgZXZlbnRIYW5kbGVycyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRFdmVudEhhbmRsZXJzKHN0YXR1cyk7XG4gIH0sIFtzdGF0dXNdKTtcbiAgdmFyIF91c2VTdGVwUXVldWUgPSB1c2VTdGVwUXVldWUoc3RhdHVzLCAhc3VwcG9ydE1vdGlvbiwgZnVuY3Rpb24gKG5ld1N0ZXApIHtcbiAgICAgIC8vIE9ubHkgcHJlcGFyZSBzdGVwIGNhbiBiZSBza2lwXG4gICAgICBpZiAobmV3U3RlcCA9PT0gU1RFUF9QUkVQQVJFKSB7XG4gICAgICAgIHZhciBvblByZXBhcmUgPSBldmVudEhhbmRsZXJzW1NURVBfUFJFUEFSRV07XG4gICAgICAgIGlmICghb25QcmVwYXJlKSB7XG4gICAgICAgICAgcmV0dXJuIFNraXBTdGVwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvblByZXBhcmUoZ2V0RG9tRWxlbWVudCgpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVzdCBzdGVwIGlzIHN5bmMgdXBkYXRlXG4gICAgICBpZiAoc3RlcCBpbiBldmVudEhhbmRsZXJzKSB7XG4gICAgICAgIHZhciBfZXZlbnRIYW5kbGVycyRzdGVwO1xuICAgICAgICBzZXRTdHlsZSgoKF9ldmVudEhhbmRsZXJzJHN0ZXAgPSBldmVudEhhbmRsZXJzW3N0ZXBdKSA9PT0gbnVsbCB8fCBfZXZlbnRIYW5kbGVycyRzdGVwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZXZlbnRIYW5kbGVycyRzdGVwLmNhbGwoZXZlbnRIYW5kbGVycywgZ2V0RG9tRWxlbWVudCgpLCBudWxsKSkgfHwgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RlcCA9PT0gU1RFUF9BQ1RJVkUpIHtcbiAgICAgICAgLy8gUGF0Y2ggZXZlbnRzIHdoZW4gbW90aW9uIG5lZWRlZFxuICAgICAgICBwYXRjaE1vdGlvbkV2ZW50cyhnZXREb21FbGVtZW50KCkpO1xuICAgICAgICBpZiAobW90aW9uRGVhZGxpbmUgPiAwKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGRlYWRsaW5lUmVmLmN1cnJlbnQpO1xuICAgICAgICAgIGRlYWRsaW5lUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9uSW50ZXJuYWxNb3Rpb25FbmQoe1xuICAgICAgICAgICAgICBkZWFkbGluZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgbW90aW9uRGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RlcCA9PT0gU1RFUF9QUkVQQVJFRCkge1xuICAgICAgICB1cGRhdGVNb3Rpb25FbmRTdGF0dXMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBEb1N0ZXA7XG4gICAgfSksXG4gICAgX3VzZVN0ZXBRdWV1ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RlcFF1ZXVlLCAyKSxcbiAgICBzdGFydFN0ZXAgPSBfdXNlU3RlcFF1ZXVlMlswXSxcbiAgICBzdGVwID0gX3VzZVN0ZXBRdWV1ZTJbMV07XG4gIHZhciBhY3RpdmUgPSBpc0FjdGl2ZShzdGVwKTtcbiAgYWN0aXZlUmVmLmN1cnJlbnQgPSBhY3RpdmU7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdGF0dXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBVcGRhdGUgd2l0aCBuZXcgc3RhdHVzXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldEFzeW5jVmlzaWJsZSh2aXNpYmxlKTtcbiAgICB2YXIgaXNNb3VudGVkID0gbW91bnRlZFJlZi5jdXJyZW50O1xuICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG5cbiAgICAvLyBpZiAoIXN1cHBvcnRNb3Rpb24pIHtcbiAgICAvLyAgIHJldHVybjtcbiAgICAvLyB9XG5cbiAgICB2YXIgbmV4dFN0YXR1cztcblxuICAgIC8vIEFwcGVhclxuICAgIGlmICghaXNNb3VudGVkICYmIHZpc2libGUgJiYgbW90aW9uQXBwZWFyKSB7XG4gICAgICBuZXh0U3RhdHVzID0gU1RBVFVTX0FQUEVBUjtcbiAgICB9XG5cbiAgICAvLyBFbnRlclxuICAgIGlmIChpc01vdW50ZWQgJiYgdmlzaWJsZSAmJiBtb3Rpb25FbnRlcikge1xuICAgICAgbmV4dFN0YXR1cyA9IFNUQVRVU19FTlRFUjtcbiAgICB9XG5cbiAgICAvLyBMZWF2ZVxuICAgIGlmIChpc01vdW50ZWQgJiYgIXZpc2libGUgJiYgbW90aW9uTGVhdmUgfHwgIWlzTW91bnRlZCAmJiBtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5ICYmICF2aXNpYmxlICYmIG1vdGlvbkxlYXZlKSB7XG4gICAgICBuZXh0U3RhdHVzID0gU1RBVFVTX0xFQVZFO1xuICAgIH1cbiAgICB2YXIgbmV4dEV2ZW50SGFuZGxlcnMgPSBnZXRFdmVudEhhbmRsZXJzKG5leHRTdGF0dXMpO1xuXG4gICAgLy8gVXBkYXRlIHRvIG5leHQgc3RhdHVzXG4gICAgaWYgKG5leHRTdGF0dXMgJiYgKHN1cHBvcnRNb3Rpb24gfHwgbmV4dEV2ZW50SGFuZGxlcnNbU1RFUF9QUkVQQVJFXSkpIHtcbiAgICAgIHNldFN0YXR1cyhuZXh0U3RhdHVzKTtcbiAgICAgIHN0YXJ0U3RlcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgYmFjayBpbiBjYXNlIG5vIG1vdGlvbiBidXQgcHJldiBzdGF0dXMgaGFzIHByZXBhcmUgc3RlcFxuICAgICAgc2V0U3RhdHVzKFNUQVRVU19OT05FKTtcbiAgICB9XG4gIH0sIFt2aXNpYmxlXSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFZmZlY3QgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBSZXNldCB3aGVuIG1vdGlvbiBjaGFuZ2VkXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFxuICAgIC8vIENhbmNlbCBhcHBlYXJcbiAgICBzdGF0dXMgPT09IFNUQVRVU19BUFBFQVIgJiYgIW1vdGlvbkFwcGVhciB8fFxuICAgIC8vIENhbmNlbCBlbnRlclxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0VOVEVSICYmICFtb3Rpb25FbnRlciB8fFxuICAgIC8vIENhbmNlbCBsZWF2ZVxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0xFQVZFICYmICFtb3Rpb25MZWF2ZSkge1xuICAgICAgc2V0U3RhdHVzKFNUQVRVU19OT05FKTtcbiAgICB9XG4gIH0sIFttb3Rpb25BcHBlYXIsIG1vdGlvbkVudGVyLCBtb3Rpb25MZWF2ZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGNsZWFyVGltZW91dChkZWFkbGluZVJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8gVHJpZ2dlciBgb25WaXNpYmxlQ2hhbmdlZGBcbiAgdmFyIGZpcnN0TW91bnRDaGFuZ2VSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIFt2aXNpYmxlICYgbW90aW9uIG5vdCBlbmRdID0+IFshdmlzaWJsZSAmIG1vdGlvbiBlbmRdIHN0aWxsIG5lZWQgdHJpZ2dlciBvblZpc2libGVDaGFuZ2VkXG4gICAgaWYgKGFzeW5jVmlzaWJsZSkge1xuICAgICAgZmlyc3RNb3VudENoYW5nZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGFzeW5jVmlzaWJsZSAhPT0gdW5kZWZpbmVkICYmIHN0YXR1cyA9PT0gU1RBVFVTX05PTkUpIHtcbiAgICAgIC8vIFNraXAgZmlyc3QgcmVuZGVyIGlzIGludmlzaWJsZSBzaW5jZSBpdCdzIG5vdGhpbmcgY2hhbmdlZFxuICAgICAgaWYgKGZpcnN0TW91bnRDaGFuZ2VSZWYuY3VycmVudCB8fCBhc3luY1Zpc2libGUpIHtcbiAgICAgICAgb25WaXNpYmxlQ2hhbmdlZCA9PT0gbnVsbCB8fCBvblZpc2libGVDaGFuZ2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblZpc2libGVDaGFuZ2VkKGFzeW5jVmlzaWJsZSk7XG4gICAgICB9XG4gICAgICBmaXJzdE1vdW50Q2hhbmdlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cbiAgfSwgW2FzeW5jVmlzaWJsZSwgc3RhdHVzXSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdHlsZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgbWVyZ2VkU3R5bGUgPSBzdHlsZTtcbiAgaWYgKGV2ZW50SGFuZGxlcnNbU1RFUF9QUkVQQVJFXSAmJiBzdGVwID09PSBTVEVQX1NUQVJUKSB7XG4gICAgbWVyZ2VkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgIH0sIG1lcmdlZFN0eWxlKTtcbiAgfVxuICByZXR1cm4gW3N0YXR1cywgc3RlcCwgbWVyZ2VkU3R5bGUsIGFzeW5jVmlzaWJsZSAhPT0gbnVsbCAmJiBhc3luY1Zpc2libGUgIT09IHZvaWQgMCA/IGFzeW5jVmlzaWJsZSA6IHZpc2libGVdO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kZWZhdWx0LXByb3BzLW1hdGNoLXByb3AtdHlwZXMsIHJlYWN0L25vLW11bHRpLWNvbXAsIHJlYWN0L3Byb3AtdHlwZXMgKi9cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGZpbmRET01Ob2RlIGZyb20gXCJyYy11dGlsL2VzL0RvbS9maW5kRE9NTm9kZVwiO1xuaW1wb3J0IHsgZmlsbFJlZiwgc3VwcG9ydFJlZiB9IGZyb20gXCJyYy11dGlsL2VzL3JlZlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCBEb21XcmFwcGVyIGZyb20gXCIuL0RvbVdyYXBwZXJcIjtcbmltcG9ydCB1c2VTdGF0dXMgZnJvbSBcIi4vaG9va3MvdXNlU3RhdHVzXCI7XG5pbXBvcnQgeyBpc0FjdGl2ZSB9IGZyb20gXCIuL2hvb2tzL3VzZVN0ZXBRdWV1ZVwiO1xuaW1wb3J0IHsgU1RBVFVTX05PTkUsIFNURVBfUFJFUEFSRSwgU1RFUF9TVEFSVCB9IGZyb20gXCIuL2ludGVyZmFjZVwiO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvbk5hbWUsIHN1cHBvcnRUcmFuc2l0aW9uIH0gZnJvbSBcIi4vdXRpbC9tb3Rpb25cIjtcbi8qKlxuICogYHRyYW5zaXRpb25TdXBwb3J0YCBpcyB1c2VkIGZvciBub25lIHRyYW5zaXRpb24gdGVzdCBjYXNlLlxuICogRGVmYXVsdCB3ZSB1c2UgYnJvd3NlciB0cmFuc2l0aW9uIGV2ZW50IHN1cHBvcnQgY2hlY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5DU1NNb3Rpb24oY29uZmlnKSB7XG4gIHZhciB0cmFuc2l0aW9uU3VwcG9ydCA9IGNvbmZpZztcbiAgaWYgKF90eXBlb2YoY29uZmlnKSA9PT0gJ29iamVjdCcpIHtcbiAgICB0cmFuc2l0aW9uU3VwcG9ydCA9IGNvbmZpZy50cmFuc2l0aW9uU3VwcG9ydDtcbiAgfVxuICBmdW5jdGlvbiBpc1N1cHBvcnRUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0TW90aW9uKSB7XG4gICAgcmV0dXJuICEhKHByb3BzLm1vdGlvbk5hbWUgJiYgdHJhbnNpdGlvblN1cHBvcnQgJiYgY29udGV4dE1vdGlvbiAhPT0gZmFsc2UpO1xuICB9XG4gIHZhciBDU1NNb3Rpb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHZhciBfcHJvcHMkdmlzaWJsZSA9IHByb3BzLnZpc2libGUsXG4gICAgICB2aXNpYmxlID0gX3Byb3BzJHZpc2libGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkdmlzaWJsZSxcbiAgICAgIF9wcm9wcyRyZW1vdmVPbkxlYXZlID0gcHJvcHMucmVtb3ZlT25MZWF2ZSxcbiAgICAgIHJlbW92ZU9uTGVhdmUgPSBfcHJvcHMkcmVtb3ZlT25MZWF2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRyZW1vdmVPbkxlYXZlLFxuICAgICAgZm9yY2VSZW5kZXIgPSBwcm9wcy5mb3JjZVJlbmRlcixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBtb3Rpb25OYW1lID0gcHJvcHMubW90aW9uTmFtZSxcbiAgICAgIGxlYXZlZENsYXNzTmFtZSA9IHByb3BzLmxlYXZlZENsYXNzTmFtZSxcbiAgICAgIGV2ZW50UHJvcHMgPSBwcm9wcy5ldmVudFByb3BzO1xuICAgIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dCksXG4gICAgICBjb250ZXh0TW90aW9uID0gX1JlYWN0JHVzZUNvbnRleHQubW90aW9uO1xuICAgIHZhciBzdXBwb3J0TW90aW9uID0gaXNTdXBwb3J0VHJhbnNpdGlvbihwcm9wcywgY29udGV4dE1vdGlvbik7XG5cbiAgICAvLyBSZWYgdG8gdGhlIHJlYWN0IG5vZGUsIGl0IG1heSBiZSBhIEhUTUxFbGVtZW50XG4gICAgdmFyIG5vZGVSZWYgPSB1c2VSZWYoKTtcbiAgICAvLyBSZWYgdG8gdGhlIGRvbSB3cmFwcGVyIGluIGNhc2UgcmVmIGNhbiBub3QgcGFzcyB0byBIVE1MRWxlbWVudFxuICAgIHZhciB3cmFwcGVyTm9kZVJlZiA9IHVzZVJlZigpO1xuICAgIGZ1bmN0aW9uIGdldERvbUVsZW1lbnQoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBIZXJlIHdlJ3JlIGF2b2lkaW5nIGNhbGwgZm9yIGZpbmRET01Ob2RlIHNpbmNlIGl0J3MgZGVwcmVjYXRlZFxuICAgICAgICAvLyBpbiBzdHJpY3QgbW9kZS4gV2UncmUgY2FsbGluZyBpdCBvbmx5IHdoZW4gbm9kZSByZWYgaXMgbm90XG4gICAgICAgIC8vIGFuIGluc3RhbmNlIG9mIERPTSBIVE1MRWxlbWVudC4gT3RoZXJ3aXNlIHVzZVxuICAgICAgICAvLyBmaW5kRE9NTm9kZSBhcyBhIGZpbmFsIHJlc29ydFxuICAgICAgICByZXR1cm4gbm9kZVJlZi5jdXJyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBub2RlUmVmLmN1cnJlbnQgOiBmaW5kRE9NTm9kZSh3cmFwcGVyTm9kZVJlZi5jdXJyZW50KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gT25seSBoYXBwZW4gd2hlbiBgbW90aW9uRGVhZGxpbmVgIHRyaWdnZXIgYnV0IGVsZW1lbnQgcmVtb3ZlZC5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBfdXNlU3RhdHVzID0gdXNlU3RhdHVzKHN1cHBvcnRNb3Rpb24sIHZpc2libGUsIGdldERvbUVsZW1lbnQsIHByb3BzKSxcbiAgICAgIF91c2VTdGF0dXMyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXR1cywgNCksXG4gICAgICBzdGF0dXMgPSBfdXNlU3RhdHVzMlswXSxcbiAgICAgIHN0YXR1c1N0ZXAgPSBfdXNlU3RhdHVzMlsxXSxcbiAgICAgIHN0YXR1c1N0eWxlID0gX3VzZVN0YXR1czJbMl0sXG4gICAgICBtZXJnZWRWaXNpYmxlID0gX3VzZVN0YXR1czJbM107XG5cbiAgICAvLyBSZWNvcmQgd2hldGhlciBjb250ZW50IGhhcyByZW5kZXJlZFxuICAgIC8vIFdpbGwgcmV0dXJuIG51bGwgZm9yIHVuLXJlbmRlcmVkIGV2ZW4gd2hlbiBgcmVtb3ZlT25MZWF2ZT17ZmFsc2V9YFxuICAgIHZhciByZW5kZXJlZFJlZiA9IFJlYWN0LnVzZVJlZihtZXJnZWRWaXNpYmxlKTtcbiAgICBpZiAobWVyZ2VkVmlzaWJsZSkge1xuICAgICAgcmVuZGVyZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PSBSZWZzID09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YXIgc2V0Tm9kZVJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBub2RlUmVmLmN1cnJlbnQgPSBub2RlO1xuICAgICAgZmlsbFJlZihyZWYsIG5vZGUpO1xuICAgIH0sIFtyZWZdKTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFyIG1vdGlvbkNoaWxkcmVuO1xuICAgIHZhciBtZXJnZWRQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZXZlbnRQcm9wcyksIHt9LCB7XG4gICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgfSk7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgLy8gTm8gY2hpbGRyZW5cbiAgICAgIG1vdGlvbkNoaWxkcmVuID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX05PTkUpIHtcbiAgICAgIC8vIFN0YWJsZSBjaGlsZHJlblxuICAgICAgaWYgKG1lcmdlZFZpc2libGUpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKHt9LCBtZXJnZWRQcm9wcyksIHNldE5vZGVSZWYpO1xuICAgICAgfSBlbHNlIGlmICghcmVtb3ZlT25MZWF2ZSAmJiByZW5kZXJlZFJlZi5jdXJyZW50ICYmIGxlYXZlZENsYXNzTmFtZSkge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IGNoaWxkcmVuKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkUHJvcHMpLCB7fSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogbGVhdmVkQ2xhc3NOYW1lXG4gICAgICAgIH0pLCBzZXROb2RlUmVmKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9yY2VSZW5kZXIgfHwgIXJlbW92ZU9uTGVhdmUgJiYgIWxlYXZlZENsYXNzTmFtZSkge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IGNoaWxkcmVuKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkUHJvcHMpLCB7fSwge1xuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBzZXROb2RlUmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdGlvbkNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuICAgICAgLy8gSW4gbW90aW9uXG4gICAgICB2YXIgc3RhdHVzU3VmZml4O1xuICAgICAgaWYgKHN0YXR1c1N0ZXAgPT09IFNURVBfUFJFUEFSRSkge1xuICAgICAgICBzdGF0dXNTdWZmaXggPSAncHJlcGFyZSc7XG4gICAgICB9IGVsc2UgaWYgKGlzQWN0aXZlKHN0YXR1c1N0ZXApKSB7XG4gICAgICAgIHN0YXR1c1N1ZmZpeCA9ICdhY3RpdmUnO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXNTdGVwID09PSBTVEVQX1NUQVJUKSB7XG4gICAgICAgIHN0YXR1c1N1ZmZpeCA9ICdzdGFydCc7XG4gICAgICB9XG4gICAgICB2YXIgbW90aW9uQ2xzID0gZ2V0VHJhbnNpdGlvbk5hbWUobW90aW9uTmFtZSwgXCJcIi5jb25jYXQoc3RhdHVzLCBcIi1cIikuY29uY2F0KHN0YXR1c1N1ZmZpeCkpO1xuICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGdldFRyYW5zaXRpb25OYW1lKG1vdGlvbk5hbWUsIHN0YXR1cyksIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIG1vdGlvbkNscywgbW90aW9uQ2xzICYmIHN0YXR1c1N1ZmZpeCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgbW90aW9uTmFtZSwgdHlwZW9mIG1vdGlvbk5hbWUgPT09ICdzdHJpbmcnKSwgX2NsYXNzTmFtZXMpKSxcbiAgICAgICAgc3R5bGU6IHN0YXR1c1N0eWxlXG4gICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgfVxuXG4gICAgLy8gQXV0byBpbmplY3QgcmVmIGlmIGNoaWxkIG5vZGUgbm90IGhhdmUgYHJlZmAgcHJvcHNcbiAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChtb3Rpb25DaGlsZHJlbikgJiYgc3VwcG9ydFJlZihtb3Rpb25DaGlsZHJlbikpIHtcbiAgICAgIHZhciBfcmVmID0gbW90aW9uQ2hpbGRyZW4sXG4gICAgICAgIG9yaWdpbk5vZGVSZWYgPSBfcmVmLnJlZjtcbiAgICAgIGlmICghb3JpZ2luTm9kZVJlZikge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQobW90aW9uQ2hpbGRyZW4sIHtcbiAgICAgICAgICByZWY6IHNldE5vZGVSZWZcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEb21XcmFwcGVyLCB7XG4gICAgICByZWY6IHdyYXBwZXJOb2RlUmVmXG4gICAgfSwgbW90aW9uQ2hpbGRyZW4pO1xuICB9KTtcbiAgQ1NTTW90aW9uLmRpc3BsYXlOYW1lID0gJ0NTU01vdGlvbic7XG4gIHJldHVybiBDU1NNb3Rpb247XG59XG5leHBvcnQgZGVmYXVsdCBnZW5DU1NNb3Rpb24oc3VwcG9ydFRyYW5zaXRpb24pOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5leHBvcnQgdmFyIFNUQVRVU19BREQgPSAnYWRkJztcbmV4cG9ydCB2YXIgU1RBVFVTX0tFRVAgPSAna2VlcCc7XG5leHBvcnQgdmFyIFNUQVRVU19SRU1PVkUgPSAncmVtb3ZlJztcbmV4cG9ydCB2YXIgU1RBVFVTX1JFTU9WRUQgPSAncmVtb3ZlZCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcEtleVRvT2JqZWN0KGtleSkge1xuICB2YXIga2V5T2JqO1xuICBpZiAoa2V5ICYmIF90eXBlb2Yoa2V5KSA9PT0gJ29iamVjdCcgJiYgJ2tleScgaW4ga2V5KSB7XG4gICAga2V5T2JqID0ga2V5O1xuICB9IGVsc2Uge1xuICAgIGtleU9iaiA9IHtcbiAgICAgIGtleToga2V5XG4gICAgfTtcbiAgfVxuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBrZXlPYmopLCB7fSwge1xuICAgIGtleTogU3RyaW5nKGtleU9iai5rZXkpXG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlS2V5cygpIHtcbiAgdmFyIGtleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICByZXR1cm4ga2V5cy5tYXAod3JhcEtleVRvT2JqZWN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmS2V5cygpIHtcbiAgdmFyIHByZXZLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgdmFyIGN1cnJlbnRLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgdmFyIGxpc3QgPSBbXTtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG4gIHZhciBjdXJyZW50TGVuID0gY3VycmVudEtleXMubGVuZ3RoO1xuICB2YXIgcHJldktleU9iamVjdHMgPSBwYXJzZUtleXMocHJldktleXMpO1xuICB2YXIgY3VycmVudEtleU9iamVjdHMgPSBwYXJzZUtleXMoY3VycmVudEtleXMpO1xuXG4gIC8vIENoZWNrIHByZXYga2V5cyB0byBpbnNlcnQgb3Iga2VlcFxuICBwcmV2S2V5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXlPYmopIHtcbiAgICB2YXIgaGl0ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IGN1cnJlbnRJbmRleDsgaSA8IGN1cnJlbnRMZW47IGkgKz0gMSkge1xuICAgICAgdmFyIGN1cnJlbnRLZXlPYmogPSBjdXJyZW50S2V5T2JqZWN0c1tpXTtcbiAgICAgIGlmIChjdXJyZW50S2V5T2JqLmtleSA9PT0ga2V5T2JqLmtleSkge1xuICAgICAgICAvLyBOZXcgYWRkZWQga2V5cyBzaG91bGQgYWRkIGJlZm9yZSBjdXJyZW50IGtleVxuICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgaSkge1xuICAgICAgICAgIGxpc3QgPSBsaXN0LmNvbmNhdChjdXJyZW50S2V5T2JqZWN0cy5zbGljZShjdXJyZW50SW5kZXgsIGkpLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvYmopLCB7fSwge1xuICAgICAgICAgICAgICBzdGF0dXM6IFNUQVRVU19BRERcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBjdXJyZW50SW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIGxpc3QucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRLZXlPYmopLCB7fSwge1xuICAgICAgICAgIHN0YXR1czogU1RBVFVTX0tFRVBcbiAgICAgICAgfSkpO1xuICAgICAgICBjdXJyZW50SW5kZXggKz0gMTtcbiAgICAgICAgaGl0ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgbm90IGhpdCwgaXQgbWVhbnMga2V5IGlzIHJlbW92ZWRcbiAgICBpZiAoIWhpdCkge1xuICAgICAgbGlzdC5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwga2V5T2JqKSwge30sIHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVNfUkVNT1ZFXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBBZGQgcmVzdCB0byB0aGUgbGlzdFxuICBpZiAoY3VycmVudEluZGV4IDwgY3VycmVudExlbikge1xuICAgIGxpc3QgPSBsaXN0LmNvbmNhdChjdXJyZW50S2V5T2JqZWN0cy5zbGljZShjdXJyZW50SW5kZXgpLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvYmopLCB7fSwge1xuICAgICAgICBzdGF0dXM6IFNUQVRVU19BRERcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSBzYW1lIGtleSB3aGVuIGl0IHJlbW92ZSBhbmQgYWRkIGFnYWluOlxuICAgKiAgICBbMSAtIGFkZCwgMiAtIGtlZXAsIDEgLSByZW1vdmVdIC0+IFsxIC0ga2VlcCwgMiAtIGtlZXBdXG4gICAqL1xuICB2YXIga2V5cyA9IHt9O1xuICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIga2V5ID0gX3JlZi5rZXk7XG4gICAga2V5c1trZXldID0gKGtleXNba2V5XSB8fCAwKSArIDE7XG4gIH0pO1xuICB2YXIgZHVwbGljYXRlZEtleXMgPSBPYmplY3Qua2V5cyhrZXlzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXlzW2tleV0gPiAxO1xuICB9KTtcbiAgZHVwbGljYXRlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAobWF0Y2hLZXkpIHtcbiAgICAvLyBSZW1vdmUgYFNUQVRVU19SRU1PVkVgIG5vZGUuXG4gICAgbGlzdCA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGtleSA9IF9yZWYyLmtleSxcbiAgICAgICAgc3RhdHVzID0gX3JlZjIuc3RhdHVzO1xuICAgICAgcmV0dXJuIGtleSAhPT0gbWF0Y2hLZXkgfHwgc3RhdHVzICE9PSBTVEFUVVNfUkVNT1ZFO1xuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIGBTVEFUVVNfQUREYCB0byBgU1RBVFVTX0tFRVBgXG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAobm9kZS5rZXkgPT09IG1hdGNoS2V5KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBub2RlLnN0YXR1cyA9IFNUQVRVU19LRUVQO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGxpc3Q7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xudmFyIF9leGNsdWRlZCA9IFtcImNvbXBvbmVudFwiLCBcImNoaWxkcmVuXCIsIFwib25WaXNpYmxlQ2hhbmdlZFwiLCBcIm9uQWxsUmVtb3ZlZFwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcInN0YXR1c1wiXTtcbi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgT3JpZ2luQ1NTTW90aW9uIGZyb20gXCIuL0NTU01vdGlvblwiO1xuaW1wb3J0IHsgc3VwcG9ydFRyYW5zaXRpb24gfSBmcm9tIFwiLi91dGlsL21vdGlvblwiO1xuaW1wb3J0IHsgU1RBVFVTX0FERCwgU1RBVFVTX0tFRVAsIFNUQVRVU19SRU1PVkUsIFNUQVRVU19SRU1PVkVELCBkaWZmS2V5cywgcGFyc2VLZXlzIH0gZnJvbSBcIi4vdXRpbC9kaWZmXCI7XG52YXIgTU9USU9OX1BST1BfTkFNRVMgPSBbJ2V2ZW50UHJvcHMnLCAndmlzaWJsZScsICdjaGlsZHJlbicsICdtb3Rpb25OYW1lJywgJ21vdGlvbkFwcGVhcicsICdtb3Rpb25FbnRlcicsICdtb3Rpb25MZWF2ZScsICdtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5JywgJ21vdGlvbkRlYWRsaW5lJywgJ3JlbW92ZU9uTGVhdmUnLCAnbGVhdmVkQ2xhc3NOYW1lJywgJ29uQXBwZWFyU3RhcnQnLCAnb25BcHBlYXJBY3RpdmUnLCAnb25BcHBlYXJFbmQnLCAnb25FbnRlclN0YXJ0JywgJ29uRW50ZXJBY3RpdmUnLCAnb25FbnRlckVuZCcsICdvbkxlYXZlU3RhcnQnLCAnb25MZWF2ZUFjdGl2ZScsICdvbkxlYXZlRW5kJ107XG4vKipcbiAqIEdlbmVyYXRlIGEgQ1NTTW90aW9uTGlzdCBjb21wb25lbnQgd2l0aCBjb25maWdcbiAqIEBwYXJhbSB0cmFuc2l0aW9uU3VwcG9ydCBObyBuZWVkIHNpbmNlIENTU01vdGlvbkxpc3Qgbm8gbG9uZ2VyIGRlcGVuZHMgb24gdHJhbnNpdGlvbiBzdXBwb3J0XG4gKiBAcGFyYW0gQ1NTTW90aW9uIENTU01vdGlvbiBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbkNTU01vdGlvbkxpc3QodHJhbnNpdGlvblN1cHBvcnQpIHtcbiAgdmFyIENTU01vdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogT3JpZ2luQ1NTTW90aW9uO1xuICB2YXIgQ1NTTW90aW9uTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDU1NNb3Rpb25MaXN0LCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENTU01vdGlvbkxpc3QpO1xuICAgIGZ1bmN0aW9uIENTU01vdGlvbkxpc3QoKSB7XG4gICAgICB2YXIgX3RoaXM7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1NTTW90aW9uTGlzdCk7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICAgIGtleUVudGl0aWVzOiBbXVxuICAgICAgfSk7XG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVtb3ZlS2V5XCIsIGZ1bmN0aW9uIChyZW1vdmVLZXkpIHtcbiAgICAgICAgdmFyIGtleUVudGl0aWVzID0gX3RoaXMuc3RhdGUua2V5RW50aXRpZXM7XG4gICAgICAgIHZhciBuZXh0S2V5RW50aXRpZXMgPSBrZXlFbnRpdGllcy5tYXAoZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgIGlmIChlbnRpdHkua2V5ICE9PSByZW1vdmVLZXkpIHJldHVybiBlbnRpdHk7XG4gICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZW50aXR5KSwge30sIHtcbiAgICAgICAgICAgIHN0YXR1czogU1RBVFVTX1JFTU9WRURcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBrZXlFbnRpdGllczogbmV4dEtleUVudGl0aWVzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV4dEtleUVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBzdGF0dXMgPSBfcmVmLnN0YXR1cztcbiAgICAgICAgICByZXR1cm4gc3RhdHVzICE9PSBTVEFUVVNfUkVNT1ZFRDtcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9jcmVhdGVDbGFzcyhDU1NNb3Rpb25MaXN0LCBbe1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICAgIHZhciBrZXlFbnRpdGllcyA9IHRoaXMuc3RhdGUua2V5RW50aXRpZXM7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgX29uVmlzaWJsZUNoYW5nZWQgPSBfdGhpcyRwcm9wcy5vblZpc2libGVDaGFuZ2VkLFxuICAgICAgICAgIG9uQWxsUmVtb3ZlZCA9IF90aGlzJHByb3BzLm9uQWxsUmVtb3ZlZCxcbiAgICAgICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMsIF9leGNsdWRlZCk7XG4gICAgICAgIHZhciBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgUmVhY3QuRnJhZ21lbnQ7XG4gICAgICAgIHZhciBtb3Rpb25Qcm9wcyA9IHt9O1xuICAgICAgICBNT1RJT05fUFJPUF9OQU1FUy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgbW90aW9uUHJvcHNbcHJvcF0gPSByZXN0UHJvcHNbcHJvcF07XG4gICAgICAgICAgZGVsZXRlIHJlc3RQcm9wc1twcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSByZXN0UHJvcHMua2V5cztcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcmVzdFByb3BzLCBrZXlFbnRpdGllcy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIHN0YXR1cyA9IF9yZWYyLnN0YXR1cyxcbiAgICAgICAgICAgIGV2ZW50UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIF9leGNsdWRlZDIpO1xuICAgICAgICAgIHZhciB2aXNpYmxlID0gc3RhdHVzID09PSBTVEFUVVNfQUREIHx8IHN0YXR1cyA9PT0gU1RBVFVTX0tFRVA7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENTU01vdGlvbiwgX2V4dGVuZHMoe30sIG1vdGlvblByb3BzLCB7XG4gICAgICAgICAgICBrZXk6IGV2ZW50UHJvcHMua2V5LFxuICAgICAgICAgICAgdmlzaWJsZTogdmlzaWJsZSxcbiAgICAgICAgICAgIGV2ZW50UHJvcHM6IGV2ZW50UHJvcHMsXG4gICAgICAgICAgICBvblZpc2libGVDaGFuZ2VkOiBmdW5jdGlvbiBvblZpc2libGVDaGFuZ2VkKGNoYW5nZWRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgIF9vblZpc2libGVDaGFuZ2VkID09PSBudWxsIHx8IF9vblZpc2libGVDaGFuZ2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb25WaXNpYmxlQ2hhbmdlZChjaGFuZ2VkVmlzaWJsZSwge1xuICAgICAgICAgICAgICAgIGtleTogZXZlbnRQcm9wcy5rZXlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICghY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdEtleXNDb3VudCA9IF90aGlzMi5yZW1vdmVLZXkoZXZlbnRQcm9wcy5rZXkpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN0S2V5c0NvdW50ID09PSAwICYmIG9uQWxsUmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgb25BbGxSZW1vdmVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksIGNoaWxkcmVuKTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmMywgX3JlZjQpIHtcbiAgICAgICAgdmFyIGtleXMgPSBfcmVmMy5rZXlzO1xuICAgICAgICB2YXIga2V5RW50aXRpZXMgPSBfcmVmNC5rZXlFbnRpdGllcztcbiAgICAgICAgdmFyIHBhcnNlZEtleU9iamVjdHMgPSBwYXJzZUtleXMoa2V5cyk7XG4gICAgICAgIHZhciBtaXhlZEtleUVudGl0aWVzID0gZGlmZktleXMoa2V5RW50aXRpZXMsIHBhcnNlZEtleU9iamVjdHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleUVudGl0aWVzOiBtaXhlZEtleUVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgICB2YXIgcHJldkVudGl0eSA9IGtleUVudGl0aWVzLmZpbmQoZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBfcmVmNS5rZXk7XG4gICAgICAgICAgICAgIHJldHVybiBlbnRpdHkua2V5ID09PSBrZXk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGlmIGFscmVhZHkgbWFyayBhcyByZW1vdmVkXG4gICAgICAgICAgICBpZiAocHJldkVudGl0eSAmJiBwcmV2RW50aXR5LnN0YXR1cyA9PT0gU1RBVFVTX1JFTU9WRUQgJiYgZW50aXR5LnN0YXR1cyA9PT0gU1RBVFVTX1JFTU9WRSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBab21iaWVKOiBSZXR1cm4gdGhlIGNvdW50IG9mIHJlc3Qga2V5cy4gSXQncyBzYWZlIHRvIHJlZmFjdG9yIGlmIG5lZWQgbW9yZSBpbmZvLlxuICAgIH1dKTtcbiAgICByZXR1cm4gQ1NTTW90aW9uTGlzdDtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuICBfZGVmaW5lUHJvcGVydHkoQ1NTTW90aW9uTGlzdCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICAgIGNvbXBvbmVudDogJ2RpdidcbiAgfSk7XG4gIHJldHVybiBDU1NNb3Rpb25MaXN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uTGlzdChzdXBwb3J0VHJhbnNpdGlvbik7IiwiaW1wb3J0IENTU01vdGlvbiBmcm9tIFwiLi9DU1NNb3Rpb25cIjtcbmltcG9ydCBDU1NNb3Rpb25MaXN0IGZyb20gXCIuL0NTU01vdGlvbkxpc3RcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUHJvdmlkZXIgfSBmcm9tIFwiLi9jb250ZXh0XCI7XG5leHBvcnQgeyBDU1NNb3Rpb25MaXN0IH07XG5leHBvcnQgZGVmYXVsdCBDU1NNb3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogU2FtZSBhcyBSZWFjdC51c2VTdGF0ZSBidXQgYHNldFN0YXRlYCBhY2NlcHQgYGlnbm9yZURlc3Ryb3lgIHBhcmFtIHRvIG5vdCB0byBzZXRTdGF0ZSBhZnRlciBkZXN0cm95ZWQuXG4gKiBXZSBkbyBub3QgbWFrZSB0aGlzIGF1dG8gaXMgdG8gYXZvaWQgcmVhbCBtZW1vcnkgbGVhay5cbiAqIERldmVsb3BlciBzaG91bGQgY29uZmlybSBpdCdzIHNhZmUgdG8gaWdub3JlIHRoZW1zZWx2ZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVNhZmVTdGF0ZShkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIGRlc3Ryb3lSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFZhbHVlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICB2YWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgc2V0VmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGRlc3Ryb3lSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXN0cm95UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgZnVuY3Rpb24gc2FmZVNldFN0YXRlKHVwZGF0ZXIsIGlnbm9yZURlc3Ryb3kpIHtcbiAgICBpZiAoaWdub3JlRGVzdHJveSAmJiBkZXN0cm95UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0VmFsdWUodXBkYXRlcik7XG4gIH1cbiAgcmV0dXJuIFt2YWx1ZSwgc2FmZVNldFN0YXRlXTtcbn0iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHZhciBwcm92aWRlZCA9IHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nID8gbWVzc2FnZSgpIDogbWVzc2FnZTtcbiAgICB2YXIgdmFsdWUgPSBwcm92aWRlZCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCI6IFwiKS5jb25jYXQocHJvdmlkZWQpIDogcHJlZml4O1xuICAgIHRocm93IG5ldyBFcnJvcih2YWx1ZSk7XG59XG5cbmV4cG9ydCB7IGludmFyaWFudCBhcyBkZWZhdWx0IH07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGl0ZXJhdGVTaW1wbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZS1zaW1wbGUnKTtcbnZhciBTZXRIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1oZWxwZXJzJyk7XG5cbnZhciBTZXQgPSBTZXRIZWxwZXJzLlNldDtcbnZhciBTZXRQcm90b3R5cGUgPSBTZXRIZWxwZXJzLnByb3RvO1xudmFyIGZvckVhY2ggPSB1bmN1cnJ5VGhpcyhTZXRQcm90b3R5cGUuZm9yRWFjaCk7XG52YXIga2V5cyA9IHVuY3VycnlUaGlzKFNldFByb3RvdHlwZS5rZXlzKTtcbnZhciBuZXh0ID0ga2V5cyhuZXcgU2V0KCkpLm5leHQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNldCwgZm4sIGludGVycnVwdGlibGUpIHtcbiAgcmV0dXJuIGludGVycnVwdGlibGUgPyBpdGVyYXRlU2ltcGxlKHsgaXRlcmF0b3I6IGtleXMoc2V0KSwgbmV4dDogbmV4dCB9LCBmbikgOiBmb3JFYWNoKHNldCwgZm4pO1xufTtcbiIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF90b0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5XCI7XG5pbXBvcnQgZ2V0IGZyb20gXCIuL2dldFwiO1xuZnVuY3Rpb24gaW50ZXJuYWxTZXQoZW50aXR5LCBwYXRocywgdmFsdWUsIHJlbW92ZUlmVW5kZWZpbmVkKSB7XG4gIGlmICghcGF0aHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBfcGF0aHMgPSBfdG9BcnJheShwYXRocyksXG4gICAgcGF0aCA9IF9wYXRoc1swXSxcbiAgICByZXN0UGF0aCA9IF9wYXRocy5zbGljZSgxKTtcbiAgdmFyIGNsb25lO1xuICBpZiAoIWVudGl0eSAmJiB0eXBlb2YgcGF0aCA9PT0gJ251bWJlcicpIHtcbiAgICBjbG9uZSA9IFtdO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW50aXR5KSkge1xuICAgIGNsb25lID0gX3RvQ29uc3VtYWJsZUFycmF5KGVudGl0eSk7XG4gIH0gZWxzZSB7XG4gICAgY2xvbmUgPSBfb2JqZWN0U3ByZWFkKHt9LCBlbnRpdHkpO1xuICB9XG5cbiAgLy8gRGVsZXRlIHByb3AgaWYgYHJlbW92ZUlmVW5kZWZpbmVkYCBhbmQgdmFsdWUgaXMgdW5kZWZpbmVkXG4gIGlmIChyZW1vdmVJZlVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHJlc3RQYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGRlbGV0ZSBjbG9uZVtwYXRoXVtyZXN0UGF0aFswXV07XG4gIH0gZWxzZSB7XG4gICAgY2xvbmVbcGF0aF0gPSBpbnRlcm5hbFNldChjbG9uZVtwYXRoXSwgcmVzdFBhdGgsIHZhbHVlLCByZW1vdmVJZlVuZGVmaW5lZCk7XG4gIH1cbiAgcmV0dXJuIGNsb25lO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0KGVudGl0eSwgcGF0aHMsIHZhbHVlKSB7XG4gIHZhciByZW1vdmVJZlVuZGVmaW5lZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG4gIC8vIERvIG5vdGhpbmcgaWYgYHJlbW92ZUlmVW5kZWZpbmVkYCBhbmQgcGFyZW50IG9iamVjdCBub3QgZXhpc3RcbiAgaWYgKHBhdGhzLmxlbmd0aCAmJiByZW1vdmVJZlVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICFnZXQoZW50aXR5LCBwYXRocy5zbGljZSgwLCAtMSkpKSB7XG4gICAgcmV0dXJuIGVudGl0eTtcbiAgfVxuICByZXR1cm4gaW50ZXJuYWxTZXQoZW50aXR5LCBwYXRocywgdmFsdWUsIHJlbW92ZUlmVW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gX3R5cGVvZihvYmopID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5mdW5jdGlvbiBjcmVhdGVFbXB0eShzb3VyY2UpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG59XG52YXIga2V5cyA9IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IE9iamVjdC5rZXlzIDogUmVmbGVjdC5vd25LZXlzO1xuXG4vKipcbiAqIE1lcmdlIG9iamVjdHMgd2hpY2ggd2lsbCBjcmVhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc291cmNlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzb3VyY2VzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHZhciBjbG9uZSA9IGNyZWF0ZUVtcHR5KHNvdXJjZXNbMF0pO1xuICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNyYykge1xuICAgIGZ1bmN0aW9uIGludGVybmFsTWVyZ2UocGF0aCwgcGFyZW50TG9vcFNldCkge1xuICAgICAgdmFyIGxvb3BTZXQgPSBuZXcgU2V0KHBhcmVudExvb3BTZXQpO1xuICAgICAgdmFyIHZhbHVlID0gZ2V0KHNyYywgcGF0aCk7XG4gICAgICB2YXIgaXNBcnIgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0FyciB8fCBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gT25seSBhZGQgbm90IGxvb3Agb2JqXG4gICAgICAgIGlmICghbG9vcFNldC5oYXModmFsdWUpKSB7XG4gICAgICAgICAgbG9vcFNldC5hZGQodmFsdWUpO1xuICAgICAgICAgIHZhciBvcmlnaW5WYWx1ZSA9IGdldChjbG9uZSwgcGF0aCk7XG4gICAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgICAvLyBBcnJheSB3aWxsIGFsd2F5cyBiZSBvdmVycmlkZVxuICAgICAgICAgICAgY2xvbmUgPSBzZXQoY2xvbmUsIHBhdGgsIFtdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFvcmlnaW5WYWx1ZSB8fCBfdHlwZW9mKG9yaWdpblZhbHVlKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIC8vIEluaXQgY29udGFpbmVyIGlmIG5vdCBleGlzdFxuICAgICAgICAgICAgY2xvbmUgPSBzZXQoY2xvbmUsIHBhdGgsIGNyZWF0ZUVtcHR5KHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleXModmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaW50ZXJuYWxNZXJnZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhdGgpLCBba2V5XSksIGxvb3BTZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZSA9IHNldChjbG9uZSwgcGF0aCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnRlcm5hbE1lcmdlKFtdKTtcbiAgfSk7XG4gIHJldHVybiBjbG9uZTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyB0dXBsZSB9IGZyb20gJy4vdHlwZSc7XG52YXIgSW5wdXRTdGF0dXNlcyA9IHR1cGxlKCd3YXJuaW5nJywgJ2Vycm9yJywgJycpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXR1c0NsYXNzTmFtZXMocHJlZml4Q2xzLCBzdGF0dXMsIGhhc0ZlZWRiYWNrKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgcmV0dXJuIGNsYXNzTmFtZXMoKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zdGF0dXMtc3VjY2Vzc1wiKSwgc3RhdHVzID09PSAnc3VjY2VzcycpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc3RhdHVzLXdhcm5pbmdcIiksIHN0YXR1cyA9PT0gJ3dhcm5pbmcnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXN0YXR1cy1lcnJvclwiKSwgc3RhdHVzID09PSAnZXJyb3InKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXN0YXR1cy12YWxpZGF0aW5nXCIpLCBzdGF0dXMgPT09ICd2YWxpZGF0aW5nJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1oYXMtZmVlZGJhY2tcIiksIGhhc0ZlZWRiYWNrKSwgX2NsYXNzTmFtZXMpKTtcbn1cbmV4cG9ydCB2YXIgZ2V0TWVyZ2VkU3RhdHVzID0gZnVuY3Rpb24gZ2V0TWVyZ2VkU3RhdHVzKGNvbnRleHRTdGF0dXMsIGN1c3RvbVN0YXR1cykge1xuICByZXR1cm4gY3VzdG9tU3RhdHVzIHx8IGNvbnRleHRTdGF0dXM7XG59OyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIHdlIGNhbid0IHVzZSBqdXN0IGBpdCA9PSBudWxsYCBzaW5jZSBvZiBgZG9jdW1lbnQuYWxsYCBzcGVjaWFsIGNhc2Vcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3QtYWVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IG51bGwgfHwgaXQgPT09IHVuZGVmaW5lZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXAgLS0gc2FmZVxudmFyIE1hcFByb3RvdHlwZSA9IE1hcC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWFwIC0tIHNhZmVcbiAgTWFwOiBNYXAsXG4gIHNldDogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLnNldCksXG4gIGdldDogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmdldCksXG4gIGhhczogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmhhcyksXG4gIHJlbW92ZTogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlWydkZWxldGUnXSksXG4gIHByb3RvOiBNYXBQcm90b3R5cGVcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgRGlzYWJsZWRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpO1xuZXhwb3J0IHZhciBEaXNhYmxlZENvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uIERpc2FibGVkQ29udGV4dFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQ7XG4gIHZhciBvcmlnaW5EaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoRGlzYWJsZWRDb250ZXh0KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERpc2FibGVkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkaXNhYmxlZCAhPT0gbnVsbCAmJiBkaXNhYmxlZCAhPT0gdm9pZCAwID8gZGlzYWJsZWQgOiBvcmlnaW5EaXNhYmxlZFxuICB9LCBjaGlsZHJlbik7XG59O1xuZXhwb3J0IGRlZmF1bHQgRGlzYWJsZWRDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIGRlZmF1bHRHZXRQcmVmaXhDbHMgPSBmdW5jdGlvbiBkZWZhdWx0R2V0UHJlZml4Q2xzKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gIGlmIChjdXN0b21pemVQcmVmaXhDbHMpIHJldHVybiBjdXN0b21pemVQcmVmaXhDbHM7XG4gIHJldHVybiBzdWZmaXhDbHMgPyBcImFudC1cIi5jb25jYXQoc3VmZml4Q2xzKSA6ICdhbnQnO1xufTtcbi8vIHpvbWJpZUo6IPCfmqggRG8gbm90IHBhc3MgYGRlZmF1bHRSZW5kZXJFbXB0eWAgaGVyZSBzaW5jZSBpdCB3aWxsIGNhc2UgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbmV4cG9ydCB2YXIgQ29uZmlnQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgLy8gV2UgcHJvdmlkZSBhIGRlZmF1bHQgZnVuY3Rpb24gZm9yIENvbnRleHQgd2l0aG91dCBwcm92aWRlclxuICBnZXRQcmVmaXhDbHM6IGRlZmF1bHRHZXRQcmVmaXhDbHNcbn0pO1xuZXhwb3J0IHZhciBDb25maWdDb25zdW1lciA9IENvbmZpZ0NvbnRleHQuQ29uc3VtZXI7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGhvb2tzIGluc3RlYWQuIFRoaXMgaXMgYSBsZWdhY3kgZnVuY3Rpb24gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQ29uZmlnQ29uc3VtZXIoY29uZmlnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3aXRoQ29uZmlnQ29uc3VtZXJGdW5jKENvbXBvbmVudCkge1xuICAgIC8vIFdyYXAgd2l0aCBDb25maWdDb25zdW1lci4gU2luY2Ugd2UgbmVlZCBjb21wYXRpYmxlIHdpdGggcmVhY3QgMTUsIGJlIGNhcmUgd2hlbiB1c2luZyByZWYgbWV0aG9kc1xuICAgIHZhciBTRkMgPSBmdW5jdGlvbiBTRkMocHJvcHMpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25maWdDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbmZpZ1Byb3BzKSB7XG4gICAgICAgIHZhciBiYXNpY1ByZWZpeENscyA9IGNvbmZpZy5wcmVmaXhDbHM7XG4gICAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBjb25maWdQcm9wcy5nZXRQcmVmaXhDbHM7XG4gICAgICAgIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHM7XG4gICAgICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoYmFzaWNQcmVmaXhDbHMsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBjb25maWdQcm9wcywgcHJvcHMsIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENsc1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZhciBjb25zID0gQ29tcG9uZW50LmNvbnN0cnVjdG9yO1xuICAgIHZhciBuYW1lID0gY29ucyAmJiBjb25zLmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBTRkMuZGlzcGxheU5hbWUgPSBcIndpdGhDb25maWdDb25zdW1lcihcIi5jb25jYXQobmFtZSwgXCIpXCIpO1xuICAgIH1cbiAgICByZXR1cm4gU0ZDO1xuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgeyB1c2VGb3JtIGFzIHVzZVJjRm9ybSB9IGZyb20gJ3JjLWZpZWxkLWZvcm0nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNjcm9sbEludG9WaWV3IGZyb20gJ3Njcm9sbC1pbnRvLXZpZXctaWYtbmVlZGVkJztcbmltcG9ydCB7IGdldEZpZWxkSWQsIHRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcbmZ1bmN0aW9uIHRvTmFtZVBhdGhTdHIobmFtZSkge1xuICB2YXIgbmFtZVBhdGggPSB0b0FycmF5KG5hbWUpO1xuICByZXR1cm4gbmFtZVBhdGguam9pbignXycpO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybShmb3JtKSB7XG4gIHZhciBfdXNlUmNGb3JtID0gdXNlUmNGb3JtKCksXG4gICAgX3VzZVJjRm9ybTIgPSBfc2xpY2VkVG9BcnJheShfdXNlUmNGb3JtLCAxKSxcbiAgICByY0Zvcm0gPSBfdXNlUmNGb3JtMlswXTtcbiAgdmFyIGl0ZW1zUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgdmFyIHdyYXBGb3JtID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZvcm0gIT09IG51bGwgJiYgZm9ybSAhPT0gdm9pZCAwID8gZm9ybSA6IF9leHRlbmRzKF9leHRlbmRzKHt9LCByY0Zvcm0pLCB7XG4gICAgICBfX0lOVEVSTkFMX186IHtcbiAgICAgICAgaXRlbVJlZjogZnVuY3Rpb24gaXRlbVJlZihuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgbmFtZVBhdGhTdHIgPSB0b05hbWVQYXRoU3RyKG5hbWUpO1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgaXRlbXNSZWYuY3VycmVudFtuYW1lUGF0aFN0cl0gPSBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGl0ZW1zUmVmLmN1cnJlbnRbbmFtZVBhdGhTdHJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzY3JvbGxUb0ZpZWxkOiBmdW5jdGlvbiBzY3JvbGxUb0ZpZWxkKG5hbWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICB2YXIgbmFtZVBhdGggPSB0b0FycmF5KG5hbWUpO1xuICAgICAgICB2YXIgZmllbGRJZCA9IGdldEZpZWxkSWQobmFtZVBhdGgsIHdyYXBGb3JtLl9fSU5URVJOQUxfXy5uYW1lKTtcbiAgICAgICAgdmFyIG5vZGUgPSBmaWVsZElkID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZmllbGRJZCkgOiBudWxsO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHNjcm9sbEludG9WaWV3KG5vZGUsIF9leHRlbmRzKHtcbiAgICAgICAgICAgIHNjcm9sbE1vZGU6ICdpZi1uZWVkZWQnLFxuICAgICAgICAgICAgYmxvY2s6ICduZWFyZXN0J1xuICAgICAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldEZpZWxkSW5zdGFuY2U6IGZ1bmN0aW9uIGdldEZpZWxkSW5zdGFuY2UobmFtZSkge1xuICAgICAgICB2YXIgbmFtZVBhdGhTdHIgPSB0b05hbWVQYXRoU3RyKG5hbWUpO1xuICAgICAgICByZXR1cm4gaXRlbXNSZWYuY3VycmVudFtuYW1lUGF0aFN0cl07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFtmb3JtLCByY0Zvcm1dKTtcbiAgcmV0dXJuIFt3cmFwRm9ybV07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgRmllbGRGb3JtLCB7IExpc3QsIHVzZVdhdGNoIH0gZnJvbSAncmMtZmllbGQtZm9ybSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgRGlzYWJsZWRDb250ZXh0LCB7IERpc2FibGVkQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyL0Rpc2FibGVkQ29udGV4dCc7XG5pbXBvcnQgU2l6ZUNvbnRleHQsIHsgU2l6ZUNvbnRleHRQcm92aWRlciB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dCc7XG5pbXBvcnQgeyBGb3JtQ29udGV4dCwgRm9ybVByb3ZpZGVyIH0gZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCBWYWxpZGF0ZU1lc3NhZ2VzQ29udGV4dCBmcm9tICcuL3ZhbGlkYXRlTWVzc2FnZXNDb250ZXh0JztcbmltcG9ydCB1c2VGb3JtIGZyb20gJy4vaG9va3MvdXNlRm9ybSc7XG52YXIgSW50ZXJuYWxGb3JtID0gZnVuY3Rpb24gSW50ZXJuYWxGb3JtKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgY29udGV4dFNpemUgPSBSZWFjdC51c2VDb250ZXh0KFNpemVDb250ZXh0KTtcbiAgdmFyIGNvbnRleHREaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoRGlzYWJsZWRDb250ZXh0KTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uLFxuICAgIGNvbnRleHRGb3JtID0gX1JlYWN0JHVzZUNvbnRleHQuZm9ybTtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBfcHJvcHMkY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGNsYXNzTmFtZSA9IF9wcm9wcyRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICcnIDogX3Byb3BzJGNsYXNzTmFtZSxcbiAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyBjb250ZXh0U2l6ZSA6IF9wcm9wcyRzaXplLFxuICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBjb250ZXh0RGlzYWJsZWQgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgZm9ybSA9IHByb3BzLmZvcm0sXG4gICAgY29sb24gPSBwcm9wcy5jb2xvbixcbiAgICBsYWJlbEFsaWduID0gcHJvcHMubGFiZWxBbGlnbixcbiAgICBsYWJlbFdyYXAgPSBwcm9wcy5sYWJlbFdyYXAsXG4gICAgbGFiZWxDb2wgPSBwcm9wcy5sYWJlbENvbCxcbiAgICB3cmFwcGVyQ29sID0gcHJvcHMud3JhcHBlckNvbCxcbiAgICBoaWRlUmVxdWlyZWRNYXJrID0gcHJvcHMuaGlkZVJlcXVpcmVkTWFyayxcbiAgICBfcHJvcHMkbGF5b3V0ID0gcHJvcHMubGF5b3V0LFxuICAgIGxheW91dCA9IF9wcm9wcyRsYXlvdXQgPT09IHZvaWQgMCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRsYXlvdXQsXG4gICAgc2Nyb2xsVG9GaXJzdEVycm9yID0gcHJvcHMuc2Nyb2xsVG9GaXJzdEVycm9yLFxuICAgIHJlcXVpcmVkTWFyayA9IHByb3BzLnJlcXVpcmVkTWFyayxcbiAgICBvbkZpbmlzaEZhaWxlZCA9IHByb3BzLm9uRmluaXNoRmFpbGVkLFxuICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgIHJlc3RGb3JtUHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcInNpemVcIiwgXCJkaXNhYmxlZFwiLCBcImZvcm1cIiwgXCJjb2xvblwiLCBcImxhYmVsQWxpZ25cIiwgXCJsYWJlbFdyYXBcIiwgXCJsYWJlbENvbFwiLCBcIndyYXBwZXJDb2xcIiwgXCJoaWRlUmVxdWlyZWRNYXJrXCIsIFwibGF5b3V0XCIsIFwic2Nyb2xsVG9GaXJzdEVycm9yXCIsIFwicmVxdWlyZWRNYXJrXCIsIFwib25GaW5pc2hGYWlsZWRcIiwgXCJuYW1lXCJdKTtcbiAgdmFyIGNvbnRleHRWYWxpZGF0ZU1lc3NhZ2VzID0gUmVhY3QudXNlQ29udGV4dChWYWxpZGF0ZU1lc3NhZ2VzQ29udGV4dCk7XG4gIHZhciBtZXJnZWRSZXF1aXJlZE1hcmsgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVxdWlyZWRNYXJrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXF1aXJlZE1hcms7XG4gICAgfVxuICAgIGlmIChjb250ZXh0Rm9ybSAmJiBjb250ZXh0Rm9ybS5yZXF1aXJlZE1hcmsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvbnRleHRGb3JtLnJlcXVpcmVkTWFyaztcbiAgICB9XG4gICAgaWYgKGhpZGVSZXF1aXJlZE1hcmspIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIFtoaWRlUmVxdWlyZWRNYXJrLCByZXF1aXJlZE1hcmssIGNvbnRleHRGb3JtXSk7XG4gIHZhciBtZXJnZWRDb2xvbiA9IGNvbG9uICE9PSBudWxsICYmIGNvbG9uICE9PSB2b2lkIDAgPyBjb2xvbiA6IGNvbnRleHRGb3JtID09PSBudWxsIHx8IGNvbnRleHRGb3JtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZXh0Rm9ybS5jb2xvbjtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnZm9ybScsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIHZhciBmb3JtQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChsYXlvdXQpLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhpZGUtcmVxdWlyZWQtbWFya1wiKSwgbWVyZ2VkUmVxdWlyZWRNYXJrID09PSBmYWxzZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplKSwgc2l6ZSksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcbiAgdmFyIF91c2VGb3JtID0gdXNlRm9ybShmb3JtKSxcbiAgICBfdXNlRm9ybTIgPSBfc2xpY2VkVG9BcnJheShfdXNlRm9ybSwgMSksXG4gICAgd3JhcEZvcm0gPSBfdXNlRm9ybTJbMF07XG4gIHZhciBfX0lOVEVSTkFMX18gPSB3cmFwRm9ybS5fX0lOVEVSTkFMX187XG4gIF9fSU5URVJOQUxfXy5uYW1lID0gbmFtZTtcbiAgdmFyIGZvcm1Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGxhYmVsQWxpZ246IGxhYmVsQWxpZ24sXG4gICAgICBsYWJlbENvbDogbGFiZWxDb2wsXG4gICAgICBsYWJlbFdyYXA6IGxhYmVsV3JhcCxcbiAgICAgIHdyYXBwZXJDb2w6IHdyYXBwZXJDb2wsXG4gICAgICB2ZXJ0aWNhbDogbGF5b3V0ID09PSAndmVydGljYWwnLFxuICAgICAgY29sb246IG1lcmdlZENvbG9uLFxuICAgICAgcmVxdWlyZWRNYXJrOiBtZXJnZWRSZXF1aXJlZE1hcmssXG4gICAgICBpdGVtUmVmOiBfX0lOVEVSTkFMX18uaXRlbVJlZixcbiAgICAgIGZvcm06IHdyYXBGb3JtXG4gICAgfTtcbiAgfSwgW25hbWUsIGxhYmVsQWxpZ24sIGxhYmVsQ29sLCB3cmFwcGVyQ29sLCBsYXlvdXQsIG1lcmdlZENvbG9uLCBtZXJnZWRSZXF1aXJlZE1hcmssIHdyYXBGb3JtXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdyYXBGb3JtO1xuICB9KTtcbiAgdmFyIG9uSW50ZXJuYWxGaW5pc2hGYWlsZWQgPSBmdW5jdGlvbiBvbkludGVybmFsRmluaXNoRmFpbGVkKGVycm9ySW5mbykge1xuICAgIG9uRmluaXNoRmFpbGVkID09PSBudWxsIHx8IG9uRmluaXNoRmFpbGVkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkZpbmlzaEZhaWxlZChlcnJvckluZm8pO1xuICAgIHZhciBkZWZhdWx0U2Nyb2xsVG9GaXJzdEVycm9yID0ge1xuICAgICAgYmxvY2s6ICduZWFyZXN0J1xuICAgIH07XG4gICAgaWYgKHNjcm9sbFRvRmlyc3RFcnJvciAmJiBlcnJvckluZm8uZXJyb3JGaWVsZHMubGVuZ3RoKSB7XG4gICAgICBpZiAoX3R5cGVvZihzY3JvbGxUb0ZpcnN0RXJyb3IpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBkZWZhdWx0U2Nyb2xsVG9GaXJzdEVycm9yID0gc2Nyb2xsVG9GaXJzdEVycm9yO1xuICAgICAgfVxuICAgICAgd3JhcEZvcm0uc2Nyb2xsVG9GaWVsZChlcnJvckluZm8uZXJyb3JGaWVsZHNbMF0ubmFtZSwgZGVmYXVsdFNjcm9sbFRvRmlyc3RFcnJvcik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGlzYWJsZWRDb250ZXh0UHJvdmlkZXIsIHtcbiAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2l6ZUNvbnRleHRQcm92aWRlciwge1xuICAgIHNpemU6IHNpemVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybVByb3ZpZGVyLCBfZXh0ZW5kcyh7fSwge1xuICAgIC8vIFRoaXMgaXMgbm90IGxpc3QgaW4gQVBJLCB3ZSBwYXNzIHdpdGggc3ByZWFkXG4gICAgdmFsaWRhdGVNZXNzYWdlczogY29udGV4dFZhbGlkYXRlTWVzc2FnZXNcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZvcm1Db250ZXh0VmFsdWVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRGb3JtLCBfZXh0ZW5kcyh7XG4gICAgaWQ6IG5hbWVcbiAgfSwgcmVzdEZvcm1Qcm9wcywge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25GaW5pc2hGYWlsZWQ6IG9uSW50ZXJuYWxGaW5pc2hGYWlsZWQsXG4gICAgZm9ybTogd3JhcEZvcm0sXG4gICAgY2xhc3NOYW1lOiBmb3JtQ2xhc3NOYW1lXG4gIH0pKSkpKSk7XG59O1xudmFyIEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbnRlcm5hbEZvcm0pO1xuZXhwb3J0IHsgdXNlRm9ybSwgTGlzdCwgdXNlV2F0Y2ggfTtcbmV4cG9ydCBkZWZhdWx0IEZvcm07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJ3JjLWZpZWxkLWZvcm0nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCB7IEZvcm1JdGVtUHJlZml4Q29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG52YXIgRm9ybUxpc3QgPSBmdW5jdGlvbiBGb3JtTGlzdChfYSkge1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImNoaWxkcmVuXCJdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghIXByb3BzLm5hbWUsICdGb3JtLkxpc3QnLCAnTWlzcyBgbmFtZWAgcHJvcC4nKSA6IHZvaWQgMDtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHM7XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2Zvcm0nLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgc3RhdHVzOiAnZXJyb3InXG4gICAgfTtcbiAgfSwgW3ByZWZpeENsc10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdCwgX2V4dGVuZHMoe30sIHByb3BzKSwgZnVuY3Rpb24gKGZpZWxkcywgb3BlcmF0aW9uLCBtZXRhKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JdGVtUHJlZml4Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIGNoaWxkcmVuKGZpZWxkcy5tYXAoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoX2V4dGVuZHMoe30sIGZpZWxkKSwge1xuICAgICAgICBmaWVsZEtleTogZmllbGQua2V5XG4gICAgICB9KTtcbiAgICB9KSwgb3BlcmF0aW9uLCB7XG4gICAgICBlcnJvcnM6IG1ldGEuZXJyb3JzLFxuICAgICAgd2FybmluZ3M6IG1ldGEud2FybmluZ3NcbiAgICB9KSk7XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1MaXN0OyIsImltcG9ydCB3YXJuaW5nIGZyb20gJy4uL191dGlsL3dhcm5pbmcnO1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIH0gZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCBFcnJvckxpc3QgZnJvbSAnLi9FcnJvckxpc3QnO1xuaW1wb3J0IEludGVybmFsRm9ybSwgeyB1c2VGb3JtLCB1c2VXYXRjaCB9IGZyb20gJy4vRm9ybSc7XG5pbXBvcnQgSXRlbSBmcm9tICcuL0Zvcm1JdGVtJztcbmltcG9ydCBMaXN0IGZyb20gJy4vRm9ybUxpc3QnO1xuaW1wb3J0IHVzZUZvcm1JbnN0YW5jZSBmcm9tICcuL2hvb2tzL3VzZUZvcm1JbnN0YW5jZSc7XG52YXIgRm9ybSA9IEludGVybmFsRm9ybTtcbkZvcm0uSXRlbSA9IEl0ZW07XG5Gb3JtLkxpc3QgPSBMaXN0O1xuRm9ybS5FcnJvckxpc3QgPSBFcnJvckxpc3Q7XG5Gb3JtLnVzZUZvcm0gPSB1c2VGb3JtO1xuRm9ybS51c2VGb3JtSW5zdGFuY2UgPSB1c2VGb3JtSW5zdGFuY2U7XG5Gb3JtLnVzZVdhdGNoID0gdXNlV2F0Y2g7XG5Gb3JtLlByb3ZpZGVyID0gRm9ybVByb3ZpZGVyO1xuRm9ybS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdGb3JtJywgJ2FudGQgdjQgcmVtb3ZlZCBgRm9ybS5jcmVhdGVgLiBQbGVhc2UgcmVtb3ZlIG9yIHVzZSBgQGFudC1kZXNpZ24vY29tcGF0aWJsZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbn07XG5leHBvcnQgZGVmYXVsdCBGb3JtOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUluc3RhbmNlKCkge1xuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KSxcbiAgICBmb3JtID0gX3VzZUNvbnRleHQuZm9ybTtcbiAgcmV0dXJuIGZvcm07XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICBkZWZpbmVCdWlsdEluKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpIHtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpO1xufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlLCAnRE9NVG9rZW5MaXN0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSAna2V5cyc6IHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGluZGV4LCBmYWxzZSk7XG4gICAgY2FzZSAndmFsdWVzJzogcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodGFyZ2V0W2luZGV4XSwgZmFsc2UpO1xuICB9IHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGZhbHNlKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChwb2ludCwgZmFsc2UpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXRlcmF0ZVNpbXBsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlLXNpbXBsZScpO1xudmFyIE1hcEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWhlbHBlcnMnKTtcblxudmFyIE1hcCA9IE1hcEhlbHBlcnMuTWFwO1xudmFyIE1hcFByb3RvdHlwZSA9IE1hcEhlbHBlcnMucHJvdG87XG52YXIgZm9yRWFjaCA9IHVuY3VycnlUaGlzKE1hcFByb3RvdHlwZS5mb3JFYWNoKTtcbnZhciBlbnRyaWVzID0gdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmVudHJpZXMpO1xudmFyIG5leHQgPSBlbnRyaWVzKG5ldyBNYXAoKSkubmV4dDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWFwLCBmbiwgaW50ZXJydXB0aWJsZSkge1xuICByZXR1cm4gaW50ZXJydXB0aWJsZSA/IGl0ZXJhdGVTaW1wbGUoeyBpdGVyYXRvcjogZW50cmllcyhtYXApLCBuZXh0OiBuZXh0IH0sIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBmbihlbnRyeVsxXSwgZW50cnlbMF0pO1xuICB9KSA6IGZvckVhY2gobWFwLCBmbik7XG59O1xuIiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2xvc2VDaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcImZpbGwtcnVsZVwiOiBcImV2ZW5vZGRcIiwgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRjMjQ3LjQgMCA0NDggMjAwLjYgNDQ4IDQ0OFM3NTkuNCA5NjAgNTEyIDk2MCA2NCA3NTkuNCA2NCA1MTIgMjY0LjYgNjQgNTEyIDY0em0xMjcuOTggMjc0LjgyaC0uMDRsLS4wOC4wNkw1MTIgNDY2Ljc1IDM4NC4xNCAzMzguODhjLS4wNC0uMDUtLjA2LS4wNi0uMDgtLjA2YS4xMi4xMiAwIDAwLS4wNyAwYy0uMDMgMC0uMDUuMDEtLjA5LjA1bC00NS4wMiA0NS4wMmEuMi4yIDAgMDAtLjA1LjA5LjEyLjEyIDAgMDAwIC4wN3YuMDJhLjI3LjI3IDAgMDAuMDYuMDZMNDY2Ljc1IDUxMiAzMzguODggNjM5Ljg2Yy0uMDUuMDQtLjA2LjA2LS4wNi4wOGEuMTIuMTIgMCAwMDAgLjA3YzAgLjAzLjAxLjA1LjA1LjA5bDQ1LjAyIDQ1LjAyYS4yLjIgMCAwMC4wOS4wNS4xMi4xMiAwIDAwLjA3IDBjLjAyIDAgLjA0LS4wMS4wOC0uMDVMNTEyIDU1Ny4yNWwxMjcuODYgMTI3Ljg3Yy4wNC4wNC4wNi4wNS4wOC4wNWEuMTIuMTIgMCAwMC4wNyAwYy4wMyAwIC4wNS0uMDEuMDktLjA1bDQ1LjAyLTQ1LjAyYS4yLjIgMCAwMC4wNS0uMDkuMTIuMTIgMCAwMDAtLjA3di0uMDJhLjI3LjI3IDAgMDAtLjA1LS4wNkw1NTcuMjUgNTEybDEyNy44Ny0xMjcuODZjLjA0LS4wNC4wNS0uMDYuMDUtLjA4YS4xMi4xMiAwIDAwMC0uMDdjMC0uMDMtLjAxLS4wNS0uMDUtLjA5bC00NS4wMi00NS4wMmEuMi4yIDAgMDAtLjA5LS4wNS4xMi4xMiAwIDAwLS4wNyAwelwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiY2xvc2UtY2lyY2xlXCIsIFwidGhlbWVcIjogXCJmaWxsZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VDaXJjbGVGaWxsZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDbG9zZUNpcmNsZUZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DbG9zZUNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIENsb3NlQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gQ2xvc2VDaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IENsb3NlQ2lyY2xlRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5DbG9zZUNpcmNsZUZpbGxlZC5kaXNwbGF5TmFtZSA9ICdDbG9zZUNpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDbG9zZUNpcmNsZUZpbGxlZCk7IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhc093bihPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIFRBRywgU1RBVElDKSB7XG4gIGlmICh0YXJnZXQgJiYgIVNUQVRJQykgdGFyZ2V0ID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgaWYgKHRhcmdldCAmJiAhaGFzT3duKHRhcmdldCwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwiaW1wb3J0IGVuVVMgZnJvbSAnLi4vLi4vZGF0ZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbmV4cG9ydCBkZWZhdWx0IGVuVVM7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdGVtcGxhdGUtY3VybHktaW4tc3RyaW5nICovXG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tIFwicmMtcGFnaW5hdGlvbi9lcy9sb2NhbGUvZW5fVVNcIjtcbmltcG9ydCBDYWxlbmRhciBmcm9tICcuLi9jYWxlbmRhci9sb2NhbGUvZW5fVVMnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi4vZGF0ZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4uL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUyc7XG52YXIgdHlwZVRlbXBsYXRlID0gJyR7bGFiZWx9IGlzIG5vdCBhIHZhbGlkICR7dHlwZX0nO1xudmFyIGxvY2FsZVZhbHVlcyA9IHtcbiAgbG9jYWxlOiAnZW4nLFxuICBQYWdpbmF0aW9uOiBQYWdpbmF0aW9uLFxuICBEYXRlUGlja2VyOiBEYXRlUGlja2VyLFxuICBUaW1lUGlja2VyOiBUaW1lUGlja2VyLFxuICBDYWxlbmRhcjogQ2FsZW5kYXIsXG4gIGdsb2JhbDoge1xuICAgIHBsYWNlaG9sZGVyOiAnUGxlYXNlIHNlbGVjdCdcbiAgfSxcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRlciBtZW51JyxcbiAgICBmaWx0ZXJDb25maXJtOiAnT0snLFxuICAgIGZpbHRlclJlc2V0OiAnUmVzZXQnLFxuICAgIGZpbHRlckVtcHR5VGV4dDogJ05vIGZpbHRlcnMnLFxuICAgIGZpbHRlckNoZWNrYWxsOiAnU2VsZWN0IGFsbCBpdGVtcycsXG4gICAgZmlsdGVyU2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggaW4gZmlsdGVycycsXG4gICAgZW1wdHlUZXh0OiAnTm8gZGF0YScsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0IGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnSW52ZXJ0IGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0Tm9uZTogJ0NsZWFyIGFsbCBkYXRhJyxcbiAgICBzZWxlY3Rpb25BbGw6ICdTZWxlY3QgYWxsIGRhdGEnLFxuICAgIHNvcnRUaXRsZTogJ1NvcnQnLFxuICAgIGV4cGFuZDogJ0V4cGFuZCByb3cnLFxuICAgIGNvbGxhcHNlOiAnQ29sbGFwc2Ugcm93JyxcbiAgICB0cmlnZ2VyRGVzYzogJ0NsaWNrIHRvIHNvcnQgZGVzY2VuZGluZycsXG4gICAgdHJpZ2dlckFzYzogJ0NsaWNrIHRvIHNvcnQgYXNjZW5kaW5nJyxcbiAgICBjYW5jZWxTb3J0OiAnQ2xpY2sgdG8gY2FuY2VsIHNvcnRpbmcnXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnLFxuICAgIGp1c3RPa1RleHQ6ICdPSydcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsJ1xuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIHRpdGxlczogWycnLCAnJ10sXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggaGVyZScsXG4gICAgaXRlbVVuaXQ6ICdpdGVtJyxcbiAgICBpdGVtc1VuaXQ6ICdpdGVtcycsXG4gICAgcmVtb3ZlOiAnUmVtb3ZlJyxcbiAgICBzZWxlY3RDdXJyZW50OiAnU2VsZWN0IGN1cnJlbnQgcGFnZScsXG4gICAgcmVtb3ZlQ3VycmVudDogJ1JlbW92ZSBjdXJyZW50IHBhZ2UnLFxuICAgIHNlbGVjdEFsbDogJ1NlbGVjdCBhbGwgZGF0YScsXG4gICAgcmVtb3ZlQWxsOiAnUmVtb3ZlIGFsbCBkYXRhJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnQgY3VycmVudCBwYWdlJ1xuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdVcGxvYWRpbmcuLi4nLFxuICAgIHJlbW92ZUZpbGU6ICdSZW1vdmUgZmlsZScsXG4gICAgdXBsb2FkRXJyb3I6ICdVcGxvYWQgZXJyb3InLFxuICAgIHByZXZpZXdGaWxlOiAnUHJldmlldyBmaWxlJyxcbiAgICBkb3dubG9hZEZpbGU6ICdEb3dubG9hZCBmaWxlJ1xuICB9LFxuICBFbXB0eToge1xuICAgIGRlc2NyaXB0aW9uOiAnTm8gZGF0YSdcbiAgfSxcbiAgSWNvbjoge1xuICAgIGljb246ICdpY29uJ1xuICB9LFxuICBUZXh0OiB7XG4gICAgZWRpdDogJ0VkaXQnLFxuICAgIGNvcHk6ICdDb3B5JyxcbiAgICBjb3BpZWQ6ICdDb3BpZWQnLFxuICAgIGV4cGFuZDogJ0V4cGFuZCdcbiAgfSxcbiAgUGFnZUhlYWRlcjoge1xuICAgIGJhY2s6ICdCYWNrJ1xuICB9LFxuICBGb3JtOiB7XG4gICAgb3B0aW9uYWw6ICcob3B0aW9uYWwpJyxcbiAgICBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlczoge1xuICAgICAgXCJkZWZhdWx0XCI6ICdGaWVsZCB2YWxpZGF0aW9uIGVycm9yIGZvciAke2xhYmVsfScsXG4gICAgICByZXF1aXJlZDogJ1BsZWFzZSBlbnRlciAke2xhYmVsfScsXG4gICAgICBcImVudW1cIjogJyR7bGFiZWx9IG11c3QgYmUgb25lIG9mIFske2VudW19XScsXG4gICAgICB3aGl0ZXNwYWNlOiAnJHtsYWJlbH0gY2Fubm90IGJlIGEgYmxhbmsgY2hhcmFjdGVyJyxcbiAgICAgIGRhdGU6IHtcbiAgICAgICAgZm9ybWF0OiAnJHtsYWJlbH0gZGF0ZSBmb3JtYXQgaXMgaW52YWxpZCcsXG4gICAgICAgIHBhcnNlOiAnJHtsYWJlbH0gY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGRhdGUnLFxuICAgICAgICBpbnZhbGlkOiAnJHtsYWJlbH0gaXMgYW4gaW52YWxpZCBkYXRlJ1xuICAgICAgfSxcbiAgICAgIHR5cGVzOiB7XG4gICAgICAgIHN0cmluZzogdHlwZVRlbXBsYXRlLFxuICAgICAgICBtZXRob2Q6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgYXJyYXk6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgb2JqZWN0OiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIG51bWJlcjogdHlwZVRlbXBsYXRlLFxuICAgICAgICBkYXRlOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIFwiYm9vbGVhblwiOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGludGVnZXI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgXCJmbG9hdFwiOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIHJlZ2V4cDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBlbWFpbDogdHlwZVRlbXBsYXRlLFxuICAgICAgICB1cmw6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgaGV4OiB0eXBlVGVtcGxhdGVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgbGVuOiAnJHtsYWJlbH0gbXVzdCBiZSAke2xlbn0gY2hhcmFjdGVycycsXG4gICAgICAgIG1pbjogJyR7bGFiZWx9IG11c3QgYmUgYXQgbGVhc3QgJHttaW59IGNoYXJhY3RlcnMnLFxuICAgICAgICBtYXg6ICcke2xhYmVsfSBtdXN0IGJlIHVwIHRvICR7bWF4fSBjaGFyYWN0ZXJzJyxcbiAgICAgICAgcmFuZ2U6ICcke2xhYmVsfSBtdXN0IGJlIGJldHdlZW4gJHttaW59LSR7bWF4fSBjaGFyYWN0ZXJzJ1xuICAgICAgfSxcbiAgICAgIG51bWJlcjoge1xuICAgICAgICBsZW46ICcke2xhYmVsfSBtdXN0IGJlIGVxdWFsIHRvICR7bGVufScsXG4gICAgICAgIG1pbjogJyR7bGFiZWx9IG11c3QgYmUgbWluaW11bSAke21pbn0nLFxuICAgICAgICBtYXg6ICcke2xhYmVsfSBtdXN0IGJlIG1heGltdW0gJHttYXh9JyxcbiAgICAgICAgcmFuZ2U6ICcke2xhYmVsfSBtdXN0IGJlIGJldHdlZW4gJHttaW59LSR7bWF4fSdcbiAgICAgIH0sXG4gICAgICBhcnJheToge1xuICAgICAgICBsZW46ICdNdXN0IGJlICR7bGVufSAke2xhYmVsfScsXG4gICAgICAgIG1pbjogJ0F0IGxlYXN0ICR7bWlufSAke2xhYmVsfScsXG4gICAgICAgIG1heDogJ0F0IG1vc3QgJHttYXh9ICR7bGFiZWx9JyxcbiAgICAgICAgcmFuZ2U6ICdUaGUgYW1vdW50IG9mICR7bGFiZWx9IG11c3QgYmUgYmV0d2VlbiAke21pbn0tJHttYXh9J1xuICAgICAgfSxcbiAgICAgIHBhdHRlcm46IHtcbiAgICAgICAgbWlzbWF0Y2g6ICcke2xhYmVsfSBkb2VzIG5vdCBtYXRjaCB0aGUgcGF0dGVybiAke3BhdHRlcm59J1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgSW1hZ2U6IHtcbiAgICBwcmV2aWV3OiAnUHJldmlldydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZVZhbHVlczsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8vIGZvcm0gaXRlbSBuYW1lIGJsYWNrIGxpc3QuICBpbiBmb3JtICx5b3UgY2FuIHVzZSBmb3JtLmlkIGdldCB0aGUgZm9ybSBpdGVtIGVsZW1lbnQuXG4vLyB1c2Ugb2JqZWN0IGhhc093blByb3BlcnR5IHdpbGwgZ2V0IGJldHRlciBwZXJmb3JtYW5jZSBpZiBibGFjayBsaXN0IGlzIGxvbmdlci5cbnZhciBmb3JtSXRlbU5hbWVCbGFja0xpc3QgPSBbJ3BhcmVudE5vZGUnXTtcbi8vIGRlZmF1bHQgZm9ybSBpdGVtIGlkIHByZWZpeC5cbnZhciBkZWZhdWx0SXRlbU5hbWVQcmVmaXhDbHMgPSAnZm9ybV9pdGVtJztcbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KGNhbmRpZGF0ZSkge1xuICBpZiAoY2FuZGlkYXRlID09PSB1bmRlZmluZWQgfHwgY2FuZGlkYXRlID09PSBmYWxzZSkgcmV0dXJuIFtdO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjYW5kaWRhdGUpID8gY2FuZGlkYXRlIDogW2NhbmRpZGF0ZV07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmllbGRJZChuYW1lUGF0aCwgZm9ybU5hbWUpIHtcbiAgaWYgKCFuYW1lUGF0aC5sZW5ndGgpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBtZXJnZWRJZCA9IG5hbWVQYXRoLmpvaW4oJ18nKTtcbiAgaWYgKGZvcm1OYW1lKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGZvcm1OYW1lLCBcIl9cIikuY29uY2F0KG1lcmdlZElkKTtcbiAgfVxuICB2YXIgaXNJbGxlZ2FsTmFtZSA9IGZvcm1JdGVtTmFtZUJsYWNrTGlzdC5pbmNsdWRlcyhtZXJnZWRJZCk7XG4gIHJldHVybiBpc0lsbGVnYWxOYW1lID8gXCJcIi5jb25jYXQoZGVmYXVsdEl0ZW1OYW1lUHJlZml4Q2xzLCBcIl9cIikuY29uY2F0KG1lcmdlZElkKSA6IG1lcmdlZElkO1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHVzZUV2ZW50IGZyb20gXCIuL3VzZUV2ZW50XCI7XG5pbXBvcnQgeyB1c2VMYXlvdXRVcGRhdGVFZmZlY3QgfSBmcm9tIFwiLi91c2VMYXlvdXRFZmZlY3RcIjtcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwiLi91c2VTdGF0ZVwiO1xuLyoqIFdlIG9ubHkgdGhpbmsgYHVuZGVmaW5lZGAgaXMgZW1wdHkgKi9cbmZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFNpbWlsYXIgdG8gYHVzZVN0YXRlYCBidXQgd2lsbCB1c2UgcHJvcHMgdmFsdWUgaWYgcHJvdmlkZWQuXG4gKiBOb3RlIHRoYXQgaW50ZXJuYWwgdXNlIHJjLXV0aWwgYHVzZVN0YXRlYCBob29rLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNZXJnZWRTdGF0ZShkZWZhdWx0U3RhdGVWYWx1ZSwgb3B0aW9uKSB7XG4gIHZhciBfcmVmID0gb3B0aW9uIHx8IHt9LFxuICAgIGRlZmF1bHRWYWx1ZSA9IF9yZWYuZGVmYXVsdFZhbHVlLFxuICAgIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgcG9zdFN0YXRlID0gX3JlZi5wb3N0U3RhdGU7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT0gSW5pdCA9PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGhhc1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlKGRlZmF1bHRWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0VmFsdWUoKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZGVmYXVsdFN0YXRlVmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0U3RhdGVWYWx1ZSgpIDogZGVmYXVsdFN0YXRlVmFsdWU7XG4gICAgICB9XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgaW5uZXJWYWx1ZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0SW5uZXJWYWx1ZSA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBtZXJnZWRWYWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGlubmVyVmFsdWU7XG4gIHZhciBwb3N0TWVyZ2VkVmFsdWUgPSBwb3N0U3RhdGUgPyBwb3N0U3RhdGUobWVyZ2VkVmFsdWUpIDogbWVyZ2VkVmFsdWU7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PSBDaGFuZ2UgPT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgb25DaGFuZ2VGbiA9IHVzZUV2ZW50KG9uQ2hhbmdlKTtcbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZShbbWVyZ2VkVmFsdWVdKSxcbiAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgcHJldlZhbHVlID0gX3VzZVN0YXRlNFswXSxcbiAgICBzZXRQcmV2VmFsdWUgPSBfdXNlU3RhdGU0WzFdO1xuICB1c2VMYXlvdXRVcGRhdGVFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2ID0gcHJldlZhbHVlWzBdO1xuICAgIGlmIChpbm5lclZhbHVlICE9PSBwcmV2KSB7XG4gICAgICBvbkNoYW5nZUZuKGlubmVyVmFsdWUsIHByZXYpO1xuICAgIH1cbiAgfSwgW3ByZXZWYWx1ZV0pO1xuXG4gIC8vIFN5bmMgdmFsdWUgYmFjayB0byBgdW5kZWZpbmVkYCB3aGVuIGl0IGZyb20gY29udHJvbCB0byB1bi1jb250cm9sXG4gIHVzZUxheW91dFVwZGF0ZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFoYXNWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHNldElubmVyVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfSwgW3ZhbHVlXSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PSBVcGRhdGUgPT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgdHJpZ2dlckNoYW5nZSA9IHVzZUV2ZW50KGZ1bmN0aW9uICh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KSB7XG4gICAgc2V0SW5uZXJWYWx1ZSh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KTtcbiAgICBzZXRQcmV2VmFsdWUoW21lcmdlZFZhbHVlXSwgaWdub3JlRGVzdHJveSk7XG4gIH0pO1xuICByZXR1cm4gW3Bvc3RNZXJnZWRWYWx1ZSwgdHJpZ2dlckNoYW5nZV07XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc051bGxPclVuZGVmaW5lZChpdCkpIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB0b0FycmF5IGZyb20gXCJyYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuZXhwb3J0IHZhciBTcGFjZUNvbXBhY3RJdGVtQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuZXhwb3J0IHZhciB1c2VDb21wYWN0SXRlbUNvbnRleHQgPSBmdW5jdGlvbiB1c2VDb21wYWN0SXRlbUNvbnRleHQocHJlZml4Q2xzLCBkaXJlY3Rpb24pIHtcbiAgdmFyIGNvbXBhY3RJdGVtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoU3BhY2VDb21wYWN0SXRlbUNvbnRleHQpO1xuICB2YXIgY29tcGFjdEl0ZW1DbGFzc25hbWVzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzO1xuICAgIGlmICghY29tcGFjdEl0ZW1Db250ZXh0KSByZXR1cm4gJyc7XG4gICAgdmFyIGNvbXBhY3REaXJlY3Rpb24gPSBjb21wYWN0SXRlbUNvbnRleHQuY29tcGFjdERpcmVjdGlvbixcbiAgICAgIGlzRmlyc3RJdGVtID0gY29tcGFjdEl0ZW1Db250ZXh0LmlzRmlyc3RJdGVtLFxuICAgICAgaXNMYXN0SXRlbSA9IGNvbXBhY3RJdGVtQ29udGV4dC5pc0xhc3RJdGVtO1xuICAgIHZhciBzZXBhcmF0b3IgPSBjb21wYWN0RGlyZWN0aW9uID09PSAndmVydGljYWwnID8gJy12ZXJ0aWNhbC0nIDogJy0nO1xuICAgIHJldHVybiBjbGFzc05hbWVzKChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKS5jb25jYXQoc2VwYXJhdG9yLCBcIml0ZW1cIiksIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKS5jb25jYXQoc2VwYXJhdG9yLCBcImZpcnN0LWl0ZW1cIiksIGlzRmlyc3RJdGVtKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbXBhY3RcIikuY29uY2F0KHNlcGFyYXRvciwgXCJsYXN0LWl0ZW1cIiksIGlzTGFzdEl0ZW0pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKS5jb25jYXQoc2VwYXJhdG9yLCBcIml0ZW0tcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpKTtcbiAgfSwgW3ByZWZpeENscywgZGlyZWN0aW9uLCBjb21wYWN0SXRlbUNvbnRleHRdKTtcbiAgcmV0dXJuIHtcbiAgICBjb21wYWN0U2l6ZTogY29tcGFjdEl0ZW1Db250ZXh0ID09PSBudWxsIHx8IGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGFjdEl0ZW1Db250ZXh0LmNvbXBhY3RTaXplLFxuICAgIGNvbXBhY3REaXJlY3Rpb246IGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gbnVsbCB8fCBjb21wYWN0SXRlbUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBhY3RJdGVtQ29udGV4dC5jb21wYWN0RGlyZWN0aW9uLFxuICAgIGNvbXBhY3RJdGVtQ2xhc3NuYW1lczogY29tcGFjdEl0ZW1DbGFzc25hbWVzXG4gIH07XG59O1xuZXhwb3J0IHZhciBOb0NvbXBhY3RTdHlsZSA9IGZ1bmN0aW9uIE5vQ29tcGFjdFN0eWxlKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNwYWNlQ29tcGFjdEl0ZW1Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG51bGxcbiAgfSwgY2hpbGRyZW4pO1xufTtcbnZhciBDb21wYWN0SXRlbSA9IGZ1bmN0aW9uIENvbXBhY3RJdGVtKF9hKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLFxuICAgIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCJdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNwYWNlQ29tcGFjdEl0ZW1Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG90aGVyUHJvcHNcbiAgfSwgY2hpbGRyZW4pO1xufTtcbnZhciBDb21wYWN0ID0gZnVuY3Rpb24gQ29tcGFjdChwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXMyO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb25Db25maWcgPSBfUmVhY3QkdXNlQ29udGV4dC5kaXJlY3Rpb247XG4gIHZhciBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWlkZGxlJyA6IF9wcm9wcyRzaXplLFxuICAgIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICBibG9jayA9IHByb3BzLmJsb2NrLFxuICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICByZXN0UHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcInNpemVcIiwgXCJkaXJlY3Rpb25cIiwgXCJibG9ja1wiLCBcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnc3BhY2UtY29tcGFjdCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIHZhciBjbHggPSBjbGFzc05hbWVzKHByZWZpeENscywgKF9jbGFzc05hbWVzMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgZGlyZWN0aW9uQ29uZmlnID09PSAncnRsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYmxvY2tcIiksIGJsb2NrKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi12ZXJ0aWNhbFwiKSwgZGlyZWN0aW9uID09PSAndmVydGljYWwnKSwgX2NsYXNzTmFtZXMyKSwgY2xhc3NOYW1lKTtcbiAgdmFyIGNvbXBhY3RJdGVtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoU3BhY2VDb21wYWN0SXRlbUNvbnRleHQpO1xuICB2YXIgY2hpbGROb2RlcyA9IHRvQXJyYXkoY2hpbGRyZW4pO1xuICB2YXIgbm9kZXMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hpbGROb2Rlcy5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICB2YXIga2V5ID0gY2hpbGQgJiYgY2hpbGQua2V5IHx8IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1cIikuY29uY2F0KGkpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBhY3RJdGVtLCB7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBjb21wYWN0U2l6ZTogc2l6ZSxcbiAgICAgICAgY29tcGFjdERpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgICBpc0ZpcnN0SXRlbTogaSA9PT0gMCAmJiAoIWNvbXBhY3RJdGVtQ29udGV4dCB8fCAoY29tcGFjdEl0ZW1Db250ZXh0ID09PSBudWxsIHx8IGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGFjdEl0ZW1Db250ZXh0LmlzRmlyc3RJdGVtKSksXG4gICAgICAgIGlzTGFzdEl0ZW06IGkgPT09IGNoaWxkTm9kZXMubGVuZ3RoIC0gMSAmJiAoIWNvbXBhY3RJdGVtQ29udGV4dCB8fCAoY29tcGFjdEl0ZW1Db250ZXh0ID09PSBudWxsIHx8IGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGFjdEl0ZW1Db250ZXh0LmlzTGFzdEl0ZW0pKVxuICAgICAgfSwgY2hpbGQpO1xuICAgIH0pO1xuICB9LCBbc2l6ZSwgY2hpbGROb2RlcywgY29tcGFjdEl0ZW1Db250ZXh0XSk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGlmIChjaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHhcbiAgfSwgcmVzdFByb3BzKSwgbm9kZXMpO1xufTtcbmV4cG9ydCBkZWZhdWx0IENvbXBhY3Q7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqL1xuICBzdG9yZS5nZXQgPSBzdG9yZS5nZXQ7XG4gIHN0b3JlLmhhcyA9IHN0b3JlLmhhcztcbiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHN0b3JlLnNldChpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldChpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5oYXMoaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoaGFzT3duKGl0LCBTVEFURSkpIHRocm93IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBSZXN1bHRQcm90b3R5cGUgPSBSZXN1bHQucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgdW5ib3VuZEZ1bmN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7XG4gIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICB2YXIgSVNfUkVDT1JEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX1JFQ09SRCk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0KTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnLCBjb25kaXRpb24pO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfUkVDT1JEKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZS5pdGVyYXRvcjtcbiAgfSBlbHNlIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gSVNfUkVDT1JEID8gaXRlcmFibGUubmV4dCA6IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlY29yZCwgZm4sIElURVJBVE9SX0lOU1RFQURfT0ZfUkVDT1JEKSB7XG4gIHZhciBpdGVyYXRvciA9IElURVJBVE9SX0lOU1RFQURfT0ZfUkVDT1JEID8gcmVjb3JkIDogcmVjb3JkLml0ZXJhdG9yO1xuICB2YXIgbmV4dCA9IHJlY29yZC5uZXh0O1xuICB2YXIgc3RlcCwgcmVzdWx0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBmbihzdGVwLnZhbHVlKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhyb290LCBuKSB7XG4gIGlmICghcm9vdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFVzZSBuYXRpdmUgaWYgc3VwcG9ydFxuICBpZiAocm9vdC5jb250YWlucykge1xuICAgIHJldHVybiByb290LmNvbnRhaW5zKG4pO1xuICB9XG5cbiAgLy8gYGRvY3VtZW50LmNvbnRhaW5zYCBub3Qgc3VwcG9ydCB3aXRoIElFMTFcbiAgdmFyIG5vZGUgPSBuO1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlID09PSByb290KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59IiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wua2V5LWZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCdkZXNjcmlwdGlvbiBkZXRlY3Rpb24nKSkgPT09ICdTeW1ib2woZGVzY3JpcHRpb24gZGV0ZWN0aW9uKSc7XG4gIHZhciB0aGlzU3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciBzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS50b1N0cmluZyk7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IHRoaXNTeW1ib2xWYWx1ZSh0aGlzKTtcbiAgICAgIGlmIChoYXNPd24oRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sRGVzY3JpcHRpdmVTdHJpbmcoc3ltYm9sKTtcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjMyLjEnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMyBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjMyLjEvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLWRpcmVjdCcpO1xuXG52YXIgSU5WQUxJRF9TSVpFID0gJ0ludmFsaWQgc2l6ZSc7XG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbnZhciBTZXRSZWNvcmQgPSBmdW5jdGlvbiAoc2V0LCBzaXplLCBoYXMsIGtleXMpIHtcbiAgdGhpcy5zZXQgPSBzZXQ7XG4gIHRoaXMuc2l6ZSA9IHNpemU7XG4gIHRoaXMuaGFzID0gaGFzO1xuICB0aGlzLmtleXMgPSBrZXlzO1xufTtcblxuU2V0UmVjb3JkLnByb3RvdHlwZSA9IHtcbiAgZ2V0SXRlcmF0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SXRlcmF0b3JEaXJlY3QoYW5PYmplY3QoY2FsbCh0aGlzLmtleXMsIHRoaXMuc2V0KSkpO1xuICB9LFxuICBpbmNsdWRlczogZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGNhbGwodGhpcy5oYXMsIHRoaXMuc2V0LCBpdCk7XG4gIH1cbn07XG5cbi8vIGBHZXRTZXRSZWNvcmRgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLXNldC1tZXRob2RzLyNzZWMtZ2V0c2V0cmVjb3JkXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgYW5PYmplY3Qob2JqKTtcbiAgdmFyIG51bVNpemUgPSArb2JqLnNpemU7XG4gIC8vIE5PVEU6IElmIHNpemUgaXMgdW5kZWZpbmVkLCB0aGVuIG51bVNpemUgd2lsbCBiZSBOYU5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgaWYgKG51bVNpemUgIT09IG51bVNpemUpIHRocm93ICRUeXBlRXJyb3IoSU5WQUxJRF9TSVpFKTtcbiAgdmFyIGludFNpemUgPSB0b0ludGVnZXJPckluZmluaXR5KG51bVNpemUpO1xuICBpZiAoaW50U2l6ZSA8IDApIHRocm93ICRSYW5nZUVycm9yKElOVkFMSURfU0laRSk7XG4gIHJldHVybiBuZXcgU2V0UmVjb3JkKFxuICAgIG9iaixcbiAgICBtYXgoaW50U2l6ZSwgMCksXG4gICAgYUNhbGxhYmxlKG9iai5oYXMpLFxuICAgIGFDYWxsYWJsZShvYmoua2V5cylcbiAgKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxudmFyIGNyZWF0ZVNldExpa2UgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4ge1xuICAgIHNpemU6IHNpemUsXG4gICAgaGFzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIFNldCA9IGdldEJ1aWx0SW4oJ1NldCcpO1xuICB0cnkge1xuICAgIG5ldyBTZXQoKVtuYW1lXShjcmVhdGVTZXRMaWtlKDApKTtcbiAgICB0cnkge1xuICAgICAgLy8gbGF0ZSBzcGVjIGNoYW5nZSwgZWFybHkgV2ViS2l0IH4gU2FmYXJpIDE3LjAgYmV0YSBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBwYXNzIGl0XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kcy9wdWxsLzg4XG4gICAgICBuZXcgU2V0KClbbmFtZV0oY3JlYXRlU2V0TGlrZSgtMSkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGVycm9yMikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc0l0ZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWl0ZXJhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBTZXQgPSBnZXRCdWlsdEluKCdTZXQnKTtcblxudmFyIGlzU2V0TGlrZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNPYmplY3QoaXQpXG4gICAgJiYgdHlwZW9mIGl0LnNpemUgPT0gJ251bWJlcidcbiAgICAmJiBpc0NhbGxhYmxlKGl0LmhhcylcbiAgICAmJiBpc0NhbGxhYmxlKGl0LmtleXMpO1xufTtcblxuLy8gZmFsbGJhY2sgb2xkIC0+IG5ldyBzZXQgbWV0aG9kcyBwcm9wb3NhbCBhcmd1bWVudHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1NldExpa2UoaXQpKSByZXR1cm4gaXQ7XG4gIHJldHVybiBpc0l0ZXJhYmxlKGl0KSA/IG5ldyBTZXQoaXQpIDogaXQ7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0KGVudGl0eSwgcGF0aCkge1xuICB2YXIgY3VycmVudCA9IGVudGl0eTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjdXJyZW50ID0gY3VycmVudFtwYXRoW2ldXTtcbiAgfVxuICByZXR1cm4gY3VycmVudDtcbn0iLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBMb2FkaW5nT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTk4OCA1NDhjLTE5LjkgMC0zNi0xNi4xLTM2LTM2IDAtNTkuNC0xMS42LTExNy0zNC42LTE3MS4zYTQ0MC40NSA0NDAuNDUgMCAwMC05NC4zLTEzOS45IDQzNy43MSA0MzcuNzEgMCAwMC0xMzkuOS05NC4zQzYyOSA4My42IDU3MS40IDcyIDUxMiA3MmMtMTkuOSAwLTM2LTE2LjEtMzYtMzZzMTYuMS0zNiAzNi0zNmM2OS4xIDAgMTM2LjIgMTMuNSAxOTkuMyA0MC4zQzc3Mi4zIDY2IDgyNyAxMDMgODc0IDE1MGM0NyA0NyA4My45IDEwMS44IDEwOS43IDE2Mi43IDI2LjcgNjMuMSA0MC4yIDEzMC4yIDQwLjIgMTk5LjMuMSAxOS45LTE2IDM2LTM1LjkgMzZ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJsb2FkaW5nXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMb2FkaW5nT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vTG9hZGluZ091dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgTG9hZGluZ091dGxpbmVkID0gZnVuY3Rpb24gTG9hZGluZ091dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBMb2FkaW5nT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkxvYWRpbmdPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdMb2FkaW5nT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoTG9hZGluZ091dGxpbmVkKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5leHBvcnQgZnVuY3Rpb24gaXNET00obm9kZSkge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudFxuICAvLyBTaW5jZSBYVUxFbGVtZW50IGlzIGFsc28gc3ViY2xhc3Mgb2YgRWxlbWVudCwgd2Ugb25seSBuZWVkIEhUTUxFbGVtZW50IGFuZCBTVkdFbGVtZW50XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7XG59XG5cbi8qKlxuICogUmV0dXJuIGlmIGEgbm9kZSBpcyBhIERPTSBub2RlLiBFbHNlIHdpbGwgcmV0dXJuIGJ5IGBmaW5kRE9NTm9kZWBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZERPTU5vZGUobm9kZSkge1xuICBpZiAoaXNET00obm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBpZiAobm9kZSBpbnN0YW5jZW9mIFJlYWN0LkNvbXBvbmVudCkge1xuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShub2RlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkdW5kYW50LXR5cGUtY29uc3RpdHVlbnRzICovXG5pbXBvcnQgeyBjb252ZXJ0SGV4VG9EZWNpbWFsLCBoc2xUb1JnYiwgaHN2VG9SZ2IsIHBhcnNlSW50RnJvbUhleCwgcmdiVG9SZ2IgfSBmcm9tICcuL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgbmFtZXMgfSBmcm9tICcuL2Nzcy1jb2xvci1uYW1lcyc7XG5pbXBvcnQgeyBib3VuZEFscGhhLCBjb252ZXJ0VG9QZXJjZW50YWdlIH0gZnJvbSAnLi91dGlsJztcbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgb3Igb2JqZWN0LCBjb252ZXJ0IHRoYXQgaW5wdXQgdG8gUkdCXG4gKlxuICogUG9zc2libGUgc3RyaW5nIGlucHV0czpcbiAqIGBgYFxuICogXCJyZWRcIlxuICogXCIjZjAwXCIgb3IgXCJmMDBcIlxuICogXCIjZmYwMDAwXCIgb3IgXCJmZjAwMDBcIlxuICogXCIjZmYwMDAwMDBcIiBvciBcImZmMDAwMDAwXCJcbiAqIFwicmdiIDI1NSAwIDBcIiBvciBcInJnYiAoMjU1LCAwLCAwKVwiXG4gKiBcInJnYiAxLjAgMCAwXCIgb3IgXCJyZ2IgKDEsIDAsIDApXCJcbiAqIFwicmdiYSAoMjU1LCAwLCAwLCAxKVwiIG9yIFwicmdiYSAyNTUsIDAsIDAsIDFcIlxuICogXCJyZ2JhICgxLjAsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDEuMCwgMCwgMCwgMVwiXG4gKiBcImhzbCgwLCAxMDAlLCA1MCUpXCIgb3IgXCJoc2wgMCAxMDAlIDUwJVwiXG4gKiBcImhzbGEoMCwgMTAwJSwgNTAlLCAxKVwiIG9yIFwiaHNsYSAwIDEwMCUgNTAlLCAxXCJcbiAqIFwiaHN2KDAsIDEwMCUsIDEwMCUpXCIgb3IgXCJoc3YgMCAxMDAlIDEwMCVcIlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnB1dFRvUkdCKGNvbG9yKSB7XG4gICAgdmFyIHJnYiA9IHsgcjogMCwgZzogMCwgYjogMCB9O1xuICAgIHZhciBhID0gMTtcbiAgICB2YXIgcyA9IG51bGw7XG4gICAgdmFyIHYgPSBudWxsO1xuICAgIHZhciBsID0gbnVsbDtcbiAgICB2YXIgb2sgPSBmYWxzZTtcbiAgICB2YXIgZm9ybWF0ID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29sb3IgPSBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLnIpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmcpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmIpKSB7XG4gICAgICAgICAgICByZ2IgPSByZ2JUb1JnYihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFN0cmluZyhjb2xvci5yKS5zdWJzdHIoLTEpID09PSAnJScgPyAncHJnYicgOiAncmdiJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci52KSkge1xuICAgICAgICAgICAgcyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICB2ID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci52KTtcbiAgICAgICAgICAgIHJnYiA9IGhzdlRvUmdiKGNvbG9yLmgsIHMsIHYpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gJ2hzdic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IubCkpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgbCA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3IubCk7XG4gICAgICAgICAgICByZ2IgPSBoc2xUb1JnYihjb2xvci5oLCBzLCBsKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9ICdoc2wnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29sb3IsICdhJykpIHtcbiAgICAgICAgICAgIGEgPSBjb2xvci5hO1xuICAgICAgICB9XG4gICAgfVxuICAgIGEgPSBib3VuZEFscGhhKGEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9rOiBvayxcbiAgICAgICAgZm9ybWF0OiBjb2xvci5mb3JtYXQgfHwgZm9ybWF0LFxuICAgICAgICByOiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KHJnYi5yLCAwKSksXG4gICAgICAgIGc6IE1hdGgubWluKDI1NSwgTWF0aC5tYXgocmdiLmcsIDApKSxcbiAgICAgICAgYjogTWF0aC5taW4oMjU1LCBNYXRoLm1heChyZ2IuYiwgMCkpLFxuICAgICAgICBhOiBhLFxuICAgIH07XG59XG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI2ludGVnZXJzPlxudmFyIENTU19JTlRFR0VSID0gJ1stXFxcXCtdP1xcXFxkKyU/Jztcbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jbnVtYmVyLXZhbHVlPlxudmFyIENTU19OVU1CRVIgPSAnWy1cXFxcK10/XFxcXGQqXFxcXC5cXFxcZCslPyc7XG4vLyBBbGxvdyBwb3NpdGl2ZS9uZWdhdGl2ZSBpbnRlZ2VyL251bWJlci4gIERvbid0IGNhcHR1cmUgdGhlIGVpdGhlci9vciwganVzdCB0aGUgZW50aXJlIG91dGNvbWUuXG52YXIgQ1NTX1VOSVQgPSBcIig/OlwiLmNvbmNhdChDU1NfTlVNQkVSLCBcIil8KD86XCIpLmNvbmNhdChDU1NfSU5URUdFUiwgXCIpXCIpO1xuLy8gQWN0dWFsIG1hdGNoaW5nLlxuLy8gUGFyZW50aGVzZXMgYW5kIGNvbW1hcyBhcmUgb3B0aW9uYWwsIGJ1dCBub3QgcmVxdWlyZWQuXG4vLyBXaGl0ZXNwYWNlIGNhbiB0YWtlIHRoZSBwbGFjZSBvZiBjb21tYXMgb3Igb3BlbmluZyBwYXJlblxudmFyIFBFUk1JU1NJVkVfTUFUQ0gzID0gXCJbXFxcXHN8XFxcXChdKyhcIi5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpWyx8XFxcXHNdKyhcIikuY29uY2F0KENTU19VTklULCBcIilcXFxccypcXFxcKT9cIik7XG52YXIgUEVSTUlTU0lWRV9NQVRDSDQgPSBcIltcXFxcc3xcXFxcKF0rKFwiLmNvbmNhdChDU1NfVU5JVCwgXCIpWyx8XFxcXHNdKyhcIikuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpXFxcXHMqXFxcXCk/XCIpO1xudmFyIG1hdGNoZXJzID0ge1xuICAgIENTU19VTklUOiBuZXcgUmVnRXhwKENTU19VTklUKSxcbiAgICByZ2I6IG5ldyBSZWdFeHAoJ3JnYicgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgcmdiYTogbmV3IFJlZ0V4cCgncmdiYScgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgaHNsOiBuZXcgUmVnRXhwKCdoc2wnICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgIGhzbGE6IG5ldyBSZWdFeHAoJ2hzbGEnICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgIGhzdjogbmV3IFJlZ0V4cCgnaHN2JyArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICBoc3ZhOiBuZXcgUmVnRXhwKCdoc3ZhJyArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICBoZXgzOiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgaGV4NjogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvLFxuICAgIGhleDQ6IC9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgaGV4ODogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbn07XG4vKipcbiAqIFBlcm1pc3NpdmUgc3RyaW5nIHBhcnNpbmcuICBUYWtlIGluIGEgbnVtYmVyIG9mIGZvcm1hdHMsIGFuZCBvdXRwdXQgYW4gb2JqZWN0XG4gKiBiYXNlZCBvbiBkZXRlY3RlZCBmb3JtYXQuICBSZXR1cm5zIGB7IHIsIGcsIGIgfWAgb3IgYHsgaCwgcywgbCB9YCBvciBgeyBoLCBzLCB2fWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0lucHV0VG9PYmplY3QoY29sb3IpIHtcbiAgICBjb2xvciA9IGNvbG9yLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChjb2xvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgbmFtZWQgPSBmYWxzZTtcbiAgICBpZiAobmFtZXNbY29sb3JdKSB7XG4gICAgICAgIGNvbG9yID0gbmFtZXNbY29sb3JdO1xuICAgICAgICBuYW1lZCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbG9yID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogJ25hbWUnIH07XG4gICAgfVxuICAgIC8vIFRyeSB0byBtYXRjaCBzdHJpbmcgaW5wdXQgdXNpbmcgcmVndWxhciBleHByZXNzaW9ucy5cbiAgICAvLyBLZWVwIG1vc3Qgb2YgdGhlIG51bWJlciBib3VuZGluZyBvdXQgb2YgdGhpcyBmdW5jdGlvbiAtIGRvbid0IHdvcnJ5IGFib3V0IFswLDFdIG9yIFswLDEwMF0gb3IgWzAsMzYwXVxuICAgIC8vIEp1c3QgcmV0dXJuIGFuIG9iamVjdCBhbmQgbGV0IHRoZSBjb252ZXJzaW9uIGZ1bmN0aW9ucyBoYW5kbGUgdGhhdC5cbiAgICAvLyBUaGlzIHdheSB0aGUgcmVzdWx0IHdpbGwgYmUgdGhlIHNhbWUgd2hldGhlciB0aGUgdGlueWNvbG9yIGlzIGluaXRpYWxpemVkIHdpdGggc3RyaW5nIG9yIG9iamVjdC5cbiAgICB2YXIgbWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5yZ2JhLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRjaFsxXSwgZzogbWF0Y2hbMl0sIGI6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzbC5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaHN2LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIHY6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaHN2YS5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleDgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDYuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaGV4NC5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6IGNvbnZlcnRIZXhUb0RlY2ltYWwobWF0Y2hbNF0gKyBtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleDgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDMuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyBtYXRjaFszXSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gJ25hbWUnIDogJ2hleCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIGl0IGxvb2tzIGxpa2UgYSBDU1MgdW5pdFxuICogKHNlZSBgbWF0Y2hlcnNgIGFib3ZlIGZvciBkZWZpbml0aW9uKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRDU1NVbml0KGNvbG9yKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4obWF0Y2hlcnMuQ1NTX1VOSVQuZXhlYyhTdHJpbmcoY29sb3IpKSk7XG59XG4iLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJXcmFwKHRhcmdldCwgZXZlbnRUeXBlLCBjYiwgb3B0aW9uKSB7XG4gIC8qIGVzbGludCBjYW1lbGNhc2U6IDIgKi9cbiAgdmFyIGNhbGxiYWNrID0gUmVhY3RET00udW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPyBmdW5jdGlvbiBydW4oZSkge1xuICAgIFJlYWN0RE9NLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKGNiLCBlKTtcbiAgfSA6IGNiO1xuICBpZiAodGFyZ2V0ICE9PSBudWxsICYmIHRhcmdldCAhPT0gdm9pZCAwICYmIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgb3B0aW9uKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgaWYgKHRhcmdldCAhPT0gbnVsbCAmJiB0YXJnZXQgIT09IHZvaWQgMCAmJiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBvcHRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgdmFyIHJlc3BvbnNpdmVBcnJheSA9IFsneHhsJywgJ3hsJywgJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ107XG5leHBvcnQgdmFyIHJlc3BvbnNpdmVNYXAgPSB7XG4gIHhzOiAnKG1heC13aWR0aDogNTc1cHgpJyxcbiAgc206ICcobWluLXdpZHRoOiA1NzZweCknLFxuICBtZDogJyhtaW4td2lkdGg6IDc2OHB4KScsXG4gIGxnOiAnKG1pbi13aWR0aDogOTkycHgpJyxcbiAgeGw6ICcobWluLXdpZHRoOiAxMjAwcHgpJyxcbiAgeHhsOiAnKG1pbi13aWR0aDogMTYwMHB4KSdcbn07XG52YXIgc3Vic2NyaWJlcnMgPSBuZXcgTWFwKCk7XG52YXIgc3ViVWlkID0gLTE7XG52YXIgc2NyZWVucyA9IHt9O1xudmFyIHJlc3BvbnNpdmVPYnNlcnZlID0ge1xuICBtYXRjaEhhbmRsZXJzOiB7fSxcbiAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKHBvaW50TWFwKSB7XG4gICAgc2NyZWVucyA9IHBvaW50TWFwO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jKHNjcmVlbnMpO1xuICAgIH0pO1xuICAgIHJldHVybiBzdWJzY3JpYmVycy5zaXplID49IDE7XG4gIH0sXG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGZ1bmMpIHtcbiAgICBpZiAoIXN1YnNjcmliZXJzLnNpemUpIHRoaXMucmVnaXN0ZXIoKTtcbiAgICBzdWJVaWQgKz0gMTtcbiAgICBzdWJzY3JpYmVycy5zZXQoc3ViVWlkLCBmdW5jKTtcbiAgICBmdW5jKHNjcmVlbnMpO1xuICAgIHJldHVybiBzdWJVaWQ7XG4gIH0sXG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSh0b2tlbikge1xuICAgIHN1YnNjcmliZXJzW1wiZGVsZXRlXCJdKHRva2VuKTtcbiAgICBpZiAoIXN1YnNjcmliZXJzLnNpemUpIHRoaXMudW5yZWdpc3RlcigpO1xuICB9LFxuICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMocmVzcG9uc2l2ZU1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc2NyZWVuKSB7XG4gICAgICB2YXIgbWF0Y2hNZWRpYVF1ZXJ5ID0gcmVzcG9uc2l2ZU1hcFtzY3JlZW5dO1xuICAgICAgdmFyIGhhbmRsZXIgPSBfdGhpcy5tYXRjaEhhbmRsZXJzW21hdGNoTWVkaWFRdWVyeV07XG4gICAgICBoYW5kbGVyID09PSBudWxsIHx8IGhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhhbmRsZXIubXFsLnJlbW92ZUxpc3RlbmVyKGhhbmRsZXIgPT09IG51bGwgfHwgaGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGFuZGxlci5saXN0ZW5lcik7XG4gICAgfSk7XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgfSxcbiAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgIE9iamVjdC5rZXlzKHJlc3BvbnNpdmVNYXApLmZvckVhY2goZnVuY3Rpb24gKHNjcmVlbikge1xuICAgICAgdmFyIG1hdGNoTWVkaWFRdWVyeSA9IHJlc3BvbnNpdmVNYXBbc2NyZWVuXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKF9yZWYpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBfcmVmLm1hdGNoZXM7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaChfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc2NyZWVucyksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2NyZWVuLCBtYXRjaGVzKSkpO1xuICAgICAgfTtcbiAgICAgIHZhciBtcWwgPSB3aW5kb3cubWF0Y2hNZWRpYShtYXRjaE1lZGlhUXVlcnkpO1xuICAgICAgbXFsLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIF90aGlzMi5tYXRjaEhhbmRsZXJzW21hdGNoTWVkaWFRdWVyeV0gPSB7XG4gICAgICAgIG1xbDogbXFsLFxuICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXJcbiAgICAgIH07XG4gICAgICBsaXN0ZW5lcihtcWwpO1xuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgcmVzcG9uc2l2ZU9ic2VydmU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgeyBGb3JtSXRlbUlucHV0Q29udGV4dCB9IGZyb20gJy4uL2Zvcm0vY29udGV4dCc7XG52YXIgR3JvdXAgPSBmdW5jdGlvbiBHcm91cChwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBfdXNlQ29udGV4dCA9IHVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX3VzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF91c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBfcHJvcHMkY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGNsYXNzTmFtZSA9IF9wcm9wcyRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICcnIDogX3Byb3BzJGNsYXNzTmFtZTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnaW5wdXQtZ3JvdXAnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgY2xzID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbGdcIiksIHByb3BzLnNpemUgPT09ICdsYXJnZScpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc21cIiksIHByb3BzLnNpemUgPT09ICdzbWFsbCcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKSwgcHJvcHMuY29tcGFjdCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIHZhciBmb3JtSXRlbUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1JdGVtSW5wdXRDb250ZXh0KTtcbiAgdmFyIGdyb3VwRm9ybUl0ZW1Db250ZXh0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBmb3JtSXRlbUNvbnRleHQpLCB7XG4gICAgICBpc0Zvcm1JdGVtSW5wdXQ6IGZhbHNlXG4gICAgfSk7XG4gIH0sIFtmb3JtSXRlbUNvbnRleHRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHMsXG4gICAgc3R5bGU6IHByb3BzLnN0eWxlLFxuICAgIG9uTW91c2VFbnRlcjogcHJvcHMub25Nb3VzZUVudGVyLFxuICAgIG9uTW91c2VMZWF2ZTogcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgIG9uRm9jdXM6IHByb3BzLm9uRm9jdXMsXG4gICAgb25CbHVyOiBwcm9wcy5vbkJsdXJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUl0ZW1JbnB1dENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZ3JvdXBGb3JtSXRlbUNvbnRleHRcbiAgfSwgcHJvcHMuY2hpbGRyZW4pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBHcm91cDsiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJlbW92ZVBhc3N3b3JkVGltZW91dChpbnB1dFJlZiwgdHJpZ2dlck9uTW91bnQpIHtcbiAgdmFyIHJlbW92ZVBhc3N3b3JkVGltZW91dFJlZiA9IHVzZVJlZihbXSk7XG4gIHZhciByZW1vdmVQYXNzd29yZFRpbWVvdXQgPSBmdW5jdGlvbiByZW1vdmVQYXNzd29yZFRpbWVvdXQoKSB7XG4gICAgcmVtb3ZlUGFzc3dvcmRUaW1lb3V0UmVmLmN1cnJlbnQucHVzaChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgIGlmICgoKF9hID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlucHV0KSAmJiAoKF9iID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlucHV0LmdldEF0dHJpYnV0ZSgndHlwZScpKSA9PT0gJ3Bhc3N3b3JkJyAmJiAoKF9jID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmlucHV0Lmhhc0F0dHJpYnV0ZSgndmFsdWUnKSkpIHtcbiAgICAgICAgKF9kID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmlucHV0LnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH07XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRyaWdnZXJPbk1vdW50KSB7XG4gICAgICByZW1vdmVQYXNzd29yZFRpbWVvdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZW1vdmVQYXNzd29yZFRpbWVvdXRSZWYuY3VycmVudC5mb3JFYWNoKGZ1bmN0aW9uICh0aW1lcikge1xuICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiByZW1vdmVQYXNzd29yZFRpbWVvdXQ7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbmltcG9ydCBDbG9zZUNpcmNsZUZpbGxlZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2xvc2VDaXJjbGVGaWxsZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJjSW5wdXQgZnJvbSAncmMtaW5wdXQnO1xuaW1wb3J0IHsgY29tcG9zZVJlZiB9IGZyb20gXCJyYy11dGlsL2VzL3JlZlwiO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgRGlzYWJsZWRDb250ZXh0IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlci9EaXNhYmxlZENvbnRleHQnO1xuaW1wb3J0IFNpemVDb250ZXh0IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dCc7XG5pbXBvcnQgeyBGb3JtSXRlbUlucHV0Q29udGV4dCwgTm9Gb3JtU3R5bGUgfSBmcm9tICcuLi9mb3JtL2NvbnRleHQnO1xuaW1wb3J0IHsgTm9Db21wYWN0U3R5bGUsIHVzZUNvbXBhY3RJdGVtQ29udGV4dCB9IGZyb20gJy4uL3NwYWNlL0NvbXBhY3QnO1xuaW1wb3J0IHsgZ2V0TWVyZ2VkU3RhdHVzLCBnZXRTdGF0dXNDbGFzc05hbWVzIH0gZnJvbSAnLi4vX3V0aWwvc3RhdHVzVXRpbHMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vX3V0aWwvd2FybmluZyc7XG5pbXBvcnQgdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0IGZyb20gJy4vaG9va3MvdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0JztcbmltcG9ydCB7IGhhc1ByZWZpeFN1ZmZpeCB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGZpeENvbnRyb2xsZWRWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlT25DaGFuZ2UodGFyZ2V0LCBlLCBvbkNoYW5nZSwgdGFyZ2V0VmFsdWUpIHtcbiAgaWYgKCFvbkNoYW5nZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZXZlbnQgPSBlO1xuICBpZiAoZS50eXBlID09PSAnY2xpY2snKSB7XG4gICAgLy8gQ2xvbmUgYSBuZXcgdGFyZ2V0IGZvciBldmVudC5cbiAgICAvLyBBdm9pZCB0aGUgZm9sbG93aW5nIHVzYWdlLCB0aGUgc2V0UXVlcnkgbWV0aG9kIGdldHMgdGhlIG9yaWdpbmFsIHZhbHVlLlxuICAgIC8vXG4gICAgLy8gY29uc3QgW3F1ZXJ5LCBzZXRRdWVyeV0gPSBSZWFjdC51c2VTdGF0ZSgnJyk7XG4gICAgLy8gPElucHV0XG4gICAgLy8gICBhbGxvd0NsZWFyXG4gICAgLy8gICB2YWx1ZT17cXVlcnl9XG4gICAgLy8gICBvbkNoYW5nZT17KGUpPT4ge1xuICAgIC8vICAgICBzZXRRdWVyeSgocHJldlN0YXR1cykgPT4gZS50YXJnZXQudmFsdWUpO1xuICAgIC8vICAgfX1cbiAgICAvLyAvPlxuICAgIHZhciBjdXJyZW50VGFyZ2V0ID0gdGFyZ2V0LmNsb25lTm9kZSh0cnVlKTtcbiAgICAvLyBjbGljayBjbGVhciBpY29uXG4gICAgZXZlbnQgPSBPYmplY3QuY3JlYXRlKGUsIHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICB2YWx1ZTogY3VycmVudFRhcmdldFxuICAgICAgfSxcbiAgICAgIGN1cnJlbnRUYXJnZXQ6IHtcbiAgICAgICAgdmFsdWU6IGN1cnJlbnRUYXJnZXRcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjdXJyZW50VGFyZ2V0LnZhbHVlID0gJyc7XG4gICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBUcmlnZ2VyIGJ5IGNvbXBvc2l0aW9uIGV2ZW50LCB0aGlzIG1lYW5zIHdlIG5lZWQgZm9yY2UgY2hhbmdlIHRoZSBpbnB1dCB2YWx1ZVxuICBpZiAodGFyZ2V0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50ID0gT2JqZWN0LmNyZWF0ZShlLCB7XG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgdmFsdWU6IHRhcmdldFxuICAgICAgfSxcbiAgICAgIGN1cnJlbnRUYXJnZXQ6IHtcbiAgICAgICAgdmFsdWU6IHRhcmdldFxuICAgICAgfVxuICAgIH0pO1xuICAgIHRhcmdldC52YWx1ZSA9IHRhcmdldFZhbHVlO1xuICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICByZXR1cm47XG4gIH1cbiAgb25DaGFuZ2UoZXZlbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJGb2N1cyhlbGVtZW50LCBvcHRpb24pIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuZm9jdXMob3B0aW9uKTtcbiAgLy8gU2VsZWN0aW9uIGNvbnRlbnRcbiAgdmFyIF9yZWYgPSBvcHRpb24gfHwge30sXG4gICAgY3Vyc29yID0gX3JlZi5jdXJzb3I7XG4gIGlmIChjdXJzb3IpIHtcbiAgICB2YXIgbGVuID0gZWxlbWVudC52YWx1ZS5sZW5ndGg7XG4gICAgc3dpdGNoIChjdXJzb3IpIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSgwLCAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGxlbiwgbGVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGxlbik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxudmFyIElucHV0ID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzLCBfY2xhc3NOYW1lczIsIF9jbGFzc05hbWVzNDtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBfcHJvcHMkYm9yZGVyZWQgPSBwcm9wcy5ib3JkZXJlZCxcbiAgICBib3JkZXJlZCA9IF9wcm9wcyRib3JkZXJlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRib3JkZXJlZCxcbiAgICBjdXN0b21TdGF0dXMgPSBwcm9wcy5zdGF0dXMsXG4gICAgY3VzdG9tU2l6ZSA9IHByb3BzLnNpemUsXG4gICAgY3VzdG9tRGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgc3VmZml4ID0gcHJvcHMuc3VmZml4LFxuICAgIGFsbG93Q2xlYXIgPSBwcm9wcy5hbGxvd0NsZWFyLFxuICAgIGFkZG9uQWZ0ZXIgPSBwcm9wcy5hZGRvbkFmdGVyLFxuICAgIGFkZG9uQmVmb3JlID0gcHJvcHMuYWRkb25CZWZvcmUsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wicHJlZml4Q2xzXCIsIFwiYm9yZGVyZWRcIiwgXCJzdGF0dXNcIiwgXCJzaXplXCIsIFwiZGlzYWJsZWRcIiwgXCJvbkJsdXJcIiwgXCJvbkZvY3VzXCIsIFwic3VmZml4XCIsIFwiYWxsb3dDbGVhclwiLCBcImFkZG9uQWZ0ZXJcIiwgXCJhZGRvbkJlZm9yZVwiLCBcImNsYXNzTmFtZVwiLCBcIm9uQ2hhbmdlXCJdKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uLFxuICAgIGlucHV0ID0gX1JlYWN0JHVzZUNvbnRleHQuaW5wdXQ7XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2lucHV0JywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIGlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gQ29tcGFjdCBJdGVtID09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgX3VzZUNvbXBhY3RJdGVtQ29udGV4ID0gdXNlQ29tcGFjdEl0ZW1Db250ZXh0KHByZWZpeENscywgZGlyZWN0aW9uKSxcbiAgICBjb21wYWN0U2l6ZSA9IF91c2VDb21wYWN0SXRlbUNvbnRleC5jb21wYWN0U2l6ZSxcbiAgICBjb21wYWN0SXRlbUNsYXNzbmFtZXMgPSBfdXNlQ29tcGFjdEl0ZW1Db250ZXguY29tcGFjdEl0ZW1DbGFzc25hbWVzO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gU2l6ZSA9PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIHNpemUgPSBSZWFjdC51c2VDb250ZXh0KFNpemVDb250ZXh0KTtcbiAgdmFyIG1lcmdlZFNpemUgPSBjb21wYWN0U2l6ZSB8fCBjdXN0b21TaXplIHx8IHNpemU7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBEaXNhYmxlZCA9PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGRpc2FibGVkID0gUmVhY3QudXNlQ29udGV4dChEaXNhYmxlZENvbnRleHQpO1xuICB2YXIgbWVyZ2VkRGlzYWJsZWQgPSBjdXN0b21EaXNhYmxlZCAhPT0gbnVsbCAmJiBjdXN0b21EaXNhYmxlZCAhPT0gdm9pZCAwID8gY3VzdG9tRGlzYWJsZWQgOiBkaXNhYmxlZDtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09IFN0YXR1cyA9PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIF91c2VDb250ZXh0ID0gdXNlQ29udGV4dChGb3JtSXRlbUlucHV0Q29udGV4dCksXG4gICAgY29udGV4dFN0YXR1cyA9IF91c2VDb250ZXh0LnN0YXR1cyxcbiAgICBoYXNGZWVkYmFjayA9IF91c2VDb250ZXh0Lmhhc0ZlZWRiYWNrLFxuICAgIGZlZWRiYWNrSWNvbiA9IF91c2VDb250ZXh0LmZlZWRiYWNrSWNvbjtcbiAgdmFyIG1lcmdlZFN0YXR1cyA9IGdldE1lcmdlZFN0YXR1cyhjb250ZXh0U3RhdHVzLCBjdXN0b21TdGF0dXMpO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gRm9jdXMgd2FybmluZyA9PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGlucHV0SGFzUHJlZml4U3VmZml4ID0gaGFzUHJlZml4U3VmZml4KHByb3BzKSB8fCAhIWhhc0ZlZWRiYWNrO1xuICB2YXIgcHJldkhhc1ByZWZpeFN1ZmZpeCA9IHVzZVJlZihpbnB1dEhhc1ByZWZpeFN1ZmZpeCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChpbnB1dEhhc1ByZWZpeFN1ZmZpeCAmJiAhcHJldkhhc1ByZWZpeFN1ZmZpeC5jdXJyZW50KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09ICgoX2EgPSBpbnB1dFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5wdXQpLCAnSW5wdXQnLCBcIldoZW4gSW5wdXQgaXMgZm9jdXNlZCwgZHluYW1pYyBhZGQgb3IgcmVtb3ZlIHByZWZpeCAvIHN1ZmZpeCB3aWxsIG1ha2UgaXQgbG9zZSBmb2N1cyBjYXVzZWQgYnkgZG9tIHN0cnVjdHVyZSBjaGFuZ2UuIFJlYWQgbW9yZTogaHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvaW5wdXQvI0ZBUVwiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgcHJldkhhc1ByZWZpeFN1ZmZpeC5jdXJyZW50ID0gaW5wdXRIYXNQcmVmaXhTdWZmaXg7XG4gIH0sIFtpbnB1dEhhc1ByZWZpeFN1ZmZpeF0pO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gUmVtb3ZlIFBhc3N3b3JkIHZhbHVlID09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgcmVtb3ZlUGFzc3dvcmRUaW1lb3V0ID0gdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0KGlucHV0UmVmLCB0cnVlKTtcbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGUpIHtcbiAgICByZW1vdmVQYXNzd29yZFRpbWVvdXQoKTtcbiAgICBvbkJsdXIgPT09IG51bGwgfHwgb25CbHVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJsdXIoZSk7XG4gIH07XG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGUpIHtcbiAgICByZW1vdmVQYXNzd29yZFRpbWVvdXQoKTtcbiAgICBvbkZvY3VzID09PSBudWxsIHx8IG9uRm9jdXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRm9jdXMoZSk7XG4gIH07XG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgIHJlbW92ZVBhc3N3b3JkVGltZW91dCgpO1xuICAgIG9uQ2hhbmdlID09PSBudWxsIHx8IG9uQ2hhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNoYW5nZShlKTtcbiAgfTtcbiAgdmFyIHN1ZmZpeE5vZGUgPSAoaGFzRmVlZGJhY2sgfHwgc3VmZml4KSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgc3VmZml4LCBoYXNGZWVkYmFjayAmJiBmZWVkYmFja0ljb24pO1xuICAvLyBBbGxvdyBjbGVhclxuICB2YXIgbWVyZ2VkQWxsb3dDbGVhcjtcbiAgaWYgKF90eXBlb2YoYWxsb3dDbGVhcikgPT09ICdvYmplY3QnICYmIChhbGxvd0NsZWFyID09PSBudWxsIHx8IGFsbG93Q2xlYXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFsbG93Q2xlYXIuY2xlYXJJY29uKSkge1xuICAgIG1lcmdlZEFsbG93Q2xlYXIgPSBhbGxvd0NsZWFyO1xuICB9IGVsc2UgaWYgKGFsbG93Q2xlYXIpIHtcbiAgICBtZXJnZWRBbGxvd0NsZWFyID0ge1xuICAgICAgY2xlYXJJY29uOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUNpcmNsZUZpbGxlZCwgbnVsbClcbiAgICB9O1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSY0lucHV0LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBjb21wb3NlUmVmKHJlZiwgaW5wdXRSZWYpLFxuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIGF1dG9Db21wbGV0ZTogaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0LmF1dG9Db21wbGV0ZVxuICB9LCByZXN0LCB7XG4gICAgZGlzYWJsZWQ6IG1lcmdlZERpc2FibGVkIHx8IHVuZGVmaW5lZCxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgc3VmZml4OiBzdWZmaXhOb2RlLFxuICAgIGFsbG93Q2xlYXI6IG1lcmdlZEFsbG93Q2xlYXIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY29tcGFjdEl0ZW1DbGFzc25hbWVzKSxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIGFkZG9uQWZ0ZXI6IGFkZG9uQWZ0ZXIgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTm9Db21wYWN0U3R5bGUsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vRm9ybVN0eWxlLCB7XG4gICAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICAgIHN0YXR1czogdHJ1ZVxuICAgIH0sIGFkZG9uQWZ0ZXIpKSxcbiAgICBhZGRvbkJlZm9yZTogYWRkb25CZWZvcmUgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTm9Db21wYWN0U3R5bGUsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vRm9ybVN0eWxlLCB7XG4gICAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICAgIHN0YXR1czogdHJ1ZVxuICAgIH0sIGFkZG9uQmVmb3JlKSksXG4gICAgaW5wdXRDbGFzc05hbWU6IGNsYXNzTmFtZXMoKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zbVwiKSwgbWVyZ2VkU2l6ZSA9PT0gJ3NtYWxsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1sZ1wiKSwgbWVyZ2VkU2l6ZSA9PT0gJ2xhcmdlJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYm9yZGVybGVzc1wiKSwgIWJvcmRlcmVkKSwgX2NsYXNzTmFtZXMpLCAhaW5wdXRIYXNQcmVmaXhTdWZmaXggJiYgZ2V0U3RhdHVzQ2xhc3NOYW1lcyhwcmVmaXhDbHMsIG1lcmdlZFN0YXR1cykpLFxuICAgIGFmZml4V3JhcHBlckNsYXNzTmFtZTogY2xhc3NOYW1lcygoX2NsYXNzTmFtZXMyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1zbVwiKSwgbWVyZ2VkU2l6ZSA9PT0gJ3NtYWxsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1sZ1wiKSwgbWVyZ2VkU2l6ZSA9PT0gJ2xhcmdlJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFmZml4LXdyYXBwZXItYm9yZGVybGVzc1wiKSwgIWJvcmRlcmVkKSwgX2NsYXNzTmFtZXMyKSwgZ2V0U3RhdHVzQ2xhc3NOYW1lcyhcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFmZml4LXdyYXBwZXJcIiksIG1lcmdlZFN0YXR1cywgaGFzRmVlZGJhY2spKSxcbiAgICB3cmFwcGVyQ2xhc3NOYW1lOiBjbGFzc05hbWVzKF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ncm91cC1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpKSxcbiAgICBncm91cENsYXNzTmFtZTogY2xhc3NOYW1lcygoX2NsYXNzTmFtZXM0ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczQsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXAtd3JhcHBlci1zbVwiKSwgbWVyZ2VkU2l6ZSA9PT0gJ3NtYWxsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczQsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXAtd3JhcHBlci1sZ1wiKSwgbWVyZ2VkU2l6ZSA9PT0gJ2xhcmdlJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczQsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXAtd3JhcHBlci1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfY2xhc3NOYW1lczQpLCBnZXRTdGF0dXNDbGFzc05hbWVzKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXAtd3JhcHBlclwiKSwgbWVyZ2VkU3RhdHVzLCBoYXNGZWVkYmFjaykpXG4gIH0pKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBmdW5jdGlvbiBoYXNQcmVmaXhTdWZmaXgocHJvcHMpIHtcbiAgcmV0dXJuICEhKHByb3BzLnByZWZpeCB8fCBwcm9wcy5zdWZmaXggfHwgcHJvcHMuYWxsb3dDbGVhcik7XG59IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgRXllSW52aXNpYmxlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTk0Mi4yIDQ4Ni4yUTg4OS40NyAzNzUuMTEgODE2LjcgMzA1bC01MC44OCA1MC44OEM4MDcuMzEgMzk1LjUzIDg0My40NSA0NDcuNCA4NzQuNyA1MTIgNzkxLjUgNjg0LjIgNjczLjQgNzY2IDUxMiA3NjZxLTcyLjY3IDAtMTMzLjg3LTIyLjM4TDMyMyA3OTguNzVRNDA4IDgzOCA1MTIgODM4cTI4OC4zIDAgNDMwLjItMzAwLjNhNjAuMjkgNjAuMjkgMCAwMDAtNTEuNXptLTYzLjU3LTMyMC42NEw4MzYgMTIyLjg4YTggOCAwIDAwLTExLjMyIDBMNzE1LjMxIDIzMi4yUTYyNC44NiAxODYgNTEyIDE4NnEtMjg4LjMgMC00MzAuMiAzMDAuM2E2MC4zIDYwLjMgMCAwMDAgNTEuNXE1Ni42OSAxMTkuNCAxMzYuNSAxOTEuNDFMMTEyLjQ4IDgzNWE4IDggMCAwMDAgMTEuMzFMMTU1LjE3IDg4OWE4IDggMCAwMDExLjMxIDBsNzEyLjE1LTcxMi4xMmE4IDggMCAwMDAtMTEuMzJ6TTE0OS4zIDUxMkMyMzIuNiAzMzkuOCAzNTAuNyAyNTggNTEyIDI1OGM1NC41NCAwIDEwNC4xMyA5LjM2IDE0OS4xMiAyOC4zOWwtNzAuMyA3MC4zYTE3NiAxNzYgMCAwMC0yMzguMTMgMjM4LjEzbC04My40MiA4My40MkMyMjMuMSA2MzcuNDkgMTgzLjMgNTgyLjI4IDE0OS4zIDUxMnptMjQ2LjcgMGExMTIuMTEgMTEyLjExIDAgMDExNDYuMi0xMDYuNjlMNDAxLjMxIDU0Ni4yQTExMiAxMTIgMCAwMTM5NiA1MTJ6XCIgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUwOCA2MjRjLTMuNDYgMC02Ljg3LS4xNi0xMC4yNS0uNDdsLTUyLjgyIDUyLjgyYTE3Ni4wOSAxNzYuMDkgMCAwMDIyNy40Mi0yMjcuNDJsLTUyLjgyIDUyLjgyYy4zMSAzLjM4LjQ3IDYuNzkuNDcgMTAuMjVhMTExLjk0IDExMS45NCAwIDAxLTExMiAxMTJ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJleWUtaW52aXNpYmxlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBFeWVJbnZpc2libGVPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEV5ZUludmlzaWJsZU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0V5ZUludmlzaWJsZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgRXllSW52aXNpYmxlT3V0bGluZWQgPSBmdW5jdGlvbiBFeWVJbnZpc2libGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogRXllSW52aXNpYmxlT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkV5ZUludmlzaWJsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0V5ZUludmlzaWJsZU91dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEV5ZUludmlzaWJsZU91dGxpbmVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBFeWVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNOTQyLjIgNDg2LjJDODQ3LjQgMjg2LjUgNzA0LjEgMTg2IDUxMiAxODZjLTE5Mi4yIDAtMzM1LjQgMTAwLjUtNDMwLjIgMzAwLjNhNjAuMyA2MC4zIDAgMDAwIDUxLjVDMTc2LjYgNzM3LjUgMzE5LjkgODM4IDUxMiA4MzhjMTkyLjIgMCAzMzUuNC0xMDAuNSA0MzAuMi0zMDAuMyA3LjctMTYuMiA3LjctMzUgMC01MS41ek01MTIgNzY2Yy0xNjEuMyAwLTI3OS40LTgxLjgtMzYyLjctMjU0QzIzMi42IDMzOS44IDM1MC43IDI1OCA1MTIgMjU4YzE2MS4zIDAgMjc5LjQgODEuOCAzNjIuNyAyNTRDNzkxLjUgNjg0LjIgNjczLjQgNzY2IDUxMiA3NjZ6bS00LTQzMGMtOTcuMiAwLTE3NiA3OC44LTE3NiAxNzZzNzguOCAxNzYgMTc2IDE3NiAxNzYtNzguOCAxNzYtMTc2LTc4LjgtMTc2LTE3Ni0xNzZ6bTAgMjg4Yy02MS45IDAtMTEyLTUwLjEtMTEyLTExMnM1MC4xLTExMiAxMTItMTEyIDExMiA1MC4xIDExMiAxMTItNTAuMSAxMTItMTEyIDExMnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImV5ZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgRXllT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFeWVPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeWVPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIEV5ZU91dGxpbmVkID0gZnVuY3Rpb24gRXllT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEV5ZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5FeWVPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdFeWVPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeWVPdXRsaW5lZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IEV5ZUludmlzaWJsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeWVJbnZpc2libGVPdXRsaW5lZFwiO1xuaW1wb3J0IEV5ZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeWVPdXRsaW5lZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tIFwicmMtdXRpbC9lcy9vbWl0XCI7XG5pbXBvcnQgeyBjb21wb3NlUmVmIH0gZnJvbSBcInJjLXV0aWwvZXMvcmVmXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29uc3VtZXIgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IHVzZVJlbW92ZVBhc3N3b3JkVGltZW91dCBmcm9tICcuL2hvb2tzL3VzZVJlbW92ZVBhc3N3b3JkVGltZW91dCc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi9JbnB1dCc7XG52YXIgZGVmYXVsdEljb25SZW5kZXIgPSBmdW5jdGlvbiBkZWZhdWx0SWNvblJlbmRlcih2aXNpYmxlKSB7XG4gIHJldHVybiB2aXNpYmxlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXllT3V0bGluZWQsIG51bGwpIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXllSW52aXNpYmxlT3V0bGluZWQsIG51bGwpO1xufTtcbnZhciBBY3Rpb25NYXAgPSB7XG4gIGNsaWNrOiAnb25DbGljaycsXG4gIGhvdmVyOiAnb25Nb3VzZU92ZXInXG59O1xudmFyIFBhc3N3b3JkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyR2aXNpYmlsaXR5VG9nZyA9IHByb3BzLnZpc2liaWxpdHlUb2dnbGUsXG4gICAgdmlzaWJpbGl0eVRvZ2dsZSA9IF9wcm9wcyR2aXNpYmlsaXR5VG9nZyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyR2aXNpYmlsaXR5VG9nZztcbiAgdmFyIHZpc2liaWxpdHlDb250cm9sbGVkID0gX3R5cGVvZih2aXNpYmlsaXR5VG9nZ2xlKSA9PT0gJ29iamVjdCcgJiYgdmlzaWJpbGl0eVRvZ2dsZS52aXNpYmxlICE9PSB1bmRlZmluZWQ7XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdmlzaWJpbGl0eUNvbnRyb2xsZWQgPyB2aXNpYmlsaXR5VG9nZ2xlLnZpc2libGUgOiBmYWxzZTtcbiAgICB9KSxcbiAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICB2aXNpYmxlID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRWaXNpYmxlID0gX3VzZVN0YXRlMlsxXTtcbiAgdmFyIGlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh2aXNpYmlsaXR5Q29udHJvbGxlZCkge1xuICAgICAgc2V0VmlzaWJsZSh2aXNpYmlsaXR5VG9nZ2xlLnZpc2libGUpO1xuICAgIH1cbiAgfSwgW3Zpc2liaWxpdHlDb250cm9sbGVkLCB2aXNpYmlsaXR5VG9nZ2xlXSk7XG4gIC8vIFJlbW92ZSBQYXNzd29yZCB2YWx1ZVxuICB2YXIgcmVtb3ZlUGFzc3dvcmRUaW1lb3V0ID0gdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0KGlucHV0UmVmKTtcbiAgdmFyIG9uVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uIG9uVmlzaWJsZUNoYW5nZSgpIHtcbiAgICB2YXIgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZDtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZpc2libGUpIHtcbiAgICAgIHJlbW92ZVBhc3N3b3JkVGltZW91dCgpO1xuICAgIH1cbiAgICBzZXRWaXNpYmxlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgIHZhciBfYTtcbiAgICAgIHZhciBuZXdTdGF0ZSA9ICFwcmV2U3RhdGU7XG4gICAgICBpZiAoX3R5cGVvZih2aXNpYmlsaXR5VG9nZ2xlKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgKF9hID0gdmlzaWJpbGl0eVRvZ2dsZS5vblZpc2libGVDaGFuZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZpc2liaWxpdHlUb2dnbGUsIG5ld1N0YXRlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcbiAgfTtcbiAgdmFyIGdldEljb24gPSBmdW5jdGlvbiBnZXRJY29uKHByZWZpeENscykge1xuICAgIHZhciBfaWNvblByb3BzO1xuICAgIHZhciBfcHJvcHMkYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYWN0aW9uID0gX3Byb3BzJGFjdGlvbiA9PT0gdm9pZCAwID8gJ2NsaWNrJyA6IF9wcm9wcyRhY3Rpb24sXG4gICAgICBfcHJvcHMkaWNvblJlbmRlciA9IHByb3BzLmljb25SZW5kZXIsXG4gICAgICBpY29uUmVuZGVyID0gX3Byb3BzJGljb25SZW5kZXIgPT09IHZvaWQgMCA/IGRlZmF1bHRJY29uUmVuZGVyIDogX3Byb3BzJGljb25SZW5kZXI7XG4gICAgdmFyIGljb25UcmlnZ2VyID0gQWN0aW9uTWFwW2FjdGlvbl0gfHwgJyc7XG4gICAgdmFyIGljb24gPSBpY29uUmVuZGVyKHZpc2libGUpO1xuICAgIHZhciBpY29uUHJvcHMgPSAoX2ljb25Qcm9wcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2ljb25Qcm9wcywgaWNvblRyaWdnZXIsIG9uVmlzaWJsZUNoYW5nZSksIF9kZWZpbmVQcm9wZXJ0eShfaWNvblByb3BzLCBcImNsYXNzTmFtZVwiLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb25cIikpLCBfZGVmaW5lUHJvcGVydHkoX2ljb25Qcm9wcywgXCJrZXlcIiwgJ3Bhc3N3b3JkSWNvbicpLCBfZGVmaW5lUHJvcGVydHkoX2ljb25Qcm9wcywgXCJvbk1vdXNlRG93blwiLCBmdW5jdGlvbiBvbk1vdXNlRG93bihlKSB7XG4gICAgICAvLyBQcmV2ZW50IGZvY3VzZWQgc3RhdGUgbG9zdFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTUxNzNcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9pY29uUHJvcHMsIFwib25Nb3VzZVVwXCIsIGZ1bmN0aW9uIG9uTW91c2VVcChlKSB7XG4gICAgICAvLyBQcmV2ZW50IGNhcmV0IHBvc2l0aW9uIGNoYW5nZVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMjM1MjRcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KSwgX2ljb25Qcm9wcyk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uKSA/IGljb24gOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgaWNvbiksIGljb25Qcm9wcyk7XG4gIH07XG4gIHZhciByZW5kZXJQYXNzd29yZCA9IGZ1bmN0aW9uIHJlbmRlclBhc3N3b3JkKF9yZWYpIHtcbiAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIGN1c3RvbWl6ZUlucHV0UHJlZml4Q2xzID0gcHJvcHMuaW5wdXRQcmVmaXhDbHMsXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwicHJlZml4Q2xzXCIsIFwiaW5wdXRQcmVmaXhDbHNcIiwgXCJzaXplXCJdKTtcbiAgICB2YXIgaW5wdXRQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2lucHV0JywgY3VzdG9taXplSW5wdXRQcmVmaXhDbHMpO1xuICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2lucHV0LXBhc3N3b3JkJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICB2YXIgc3VmZml4SWNvbiA9IHZpc2liaWxpdHlUb2dnbGUgJiYgZ2V0SWNvbihwcmVmaXhDbHMpO1xuICAgIHZhciBpbnB1dENsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBjbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHNpemUpLCAhIXNpemUpKTtcbiAgICB2YXIgb21pdHRlZFByb3BzID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIG9taXQocmVzdFByb3BzLCBbJ3N1ZmZpeCcsICdpY29uUmVuZGVyJywgJ3Zpc2liaWxpdHlUb2dnbGUnXSkpLCB7XG4gICAgICB0eXBlOiB2aXNpYmxlID8gJ3RleHQnIDogJ3Bhc3N3b3JkJyxcbiAgICAgIGNsYXNzTmFtZTogaW5wdXRDbGFzc05hbWUsXG4gICAgICBwcmVmaXhDbHM6IGlucHV0UHJlZml4Q2xzLFxuICAgICAgc3VmZml4OiBzdWZmaXhJY29uXG4gICAgfSk7XG4gICAgaWYgKHNpemUpIHtcbiAgICAgIG9taXR0ZWRQcm9wcy5zaXplID0gc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGNvbXBvc2VSZWYocmVmLCBpbnB1dFJlZilcbiAgICB9LCBvbWl0dGVkUHJvcHMpKTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnN1bWVyLCBudWxsLCByZW5kZXJQYXNzd29yZCk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFBhc3N3b3JkLmRpc3BsYXlOYW1lID0gJ1Bhc3N3b3JkJztcbn1cbmV4cG9ydCBkZWZhdWx0IFBhc3N3b3JkOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5pbXBvcnQgU2VhcmNoT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL1NlYXJjaE91dGxpbmVkXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGNvbXBvc2VSZWYgfSBmcm9tIFwicmMtdXRpbC9lcy9yZWZcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uJztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IFNpemVDb250ZXh0IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VDb21wYWN0SXRlbUNvbnRleHQgfSBmcm9tICcuLi9zcGFjZS9Db21wYWN0JztcbmltcG9ydCB7IGNsb25lRWxlbWVudCB9IGZyb20gJy4uL191dGlsL3JlYWN0Tm9kZSc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi9JbnB1dCc7XG52YXIgU2VhcmNoID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIGN1c3RvbWl6ZUlucHV0UHJlZml4Q2xzID0gcHJvcHMuaW5wdXRQcmVmaXhDbHMsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGN1c3RvbWl6ZVNpemUgPSBwcm9wcy5zaXplLFxuICAgIHN1ZmZpeCA9IHByb3BzLnN1ZmZpeCxcbiAgICBfcHJvcHMkZW50ZXJCdXR0b24gPSBwcm9wcy5lbnRlckJ1dHRvbixcbiAgICBlbnRlckJ1dHRvbiA9IF9wcm9wcyRlbnRlckJ1dHRvbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZW50ZXJCdXR0b24sXG4gICAgYWRkb25BZnRlciA9IHByb3BzLmFkZG9uQWZ0ZXIsXG4gICAgbG9hZGluZyA9IHByb3BzLmxvYWRpbmcsXG4gICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBjdXN0b21PblNlYXJjaCA9IHByb3BzLm9uU2VhcmNoLFxuICAgIGN1c3RvbU9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgb25Db21wb3NpdGlvblN0YXJ0ID0gcHJvcHMub25Db21wb3NpdGlvblN0YXJ0LFxuICAgIG9uQ29tcG9zaXRpb25FbmQgPSBwcm9wcy5vbkNvbXBvc2l0aW9uRW5kLFxuICAgIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wicHJlZml4Q2xzXCIsIFwiaW5wdXRQcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJzaXplXCIsIFwic3VmZml4XCIsIFwiZW50ZXJCdXR0b25cIiwgXCJhZGRvbkFmdGVyXCIsIFwibG9hZGluZ1wiLCBcImRpc2FibGVkXCIsIFwib25TZWFyY2hcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ29tcG9zaXRpb25TdGFydFwiLCBcIm9uQ29tcG9zaXRpb25FbmRcIl0pO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb24gPSBfUmVhY3QkdXNlQ29udGV4dC5kaXJlY3Rpb247XG4gIHZhciBjb250ZXh0U2l6ZSA9IFJlYWN0LnVzZUNvbnRleHQoU2l6ZUNvbnRleHQpO1xuICB2YXIgY29tcG9zZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdpbnB1dC1zZWFyY2gnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgaW5wdXRQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2lucHV0JywgY3VzdG9taXplSW5wdXRQcmVmaXhDbHMpO1xuICB2YXIgX3VzZUNvbXBhY3RJdGVtQ29udGV4ID0gdXNlQ29tcGFjdEl0ZW1Db250ZXh0KHByZWZpeENscywgZGlyZWN0aW9uKSxcbiAgICBjb21wYWN0U2l6ZSA9IF91c2VDb21wYWN0SXRlbUNvbnRleC5jb21wYWN0U2l6ZTtcbiAgdmFyIHNpemUgPSBjb21wYWN0U2l6ZSB8fCBjdXN0b21pemVTaXplIHx8IGNvbnRleHRTaXplO1xuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBvbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICBpZiAoZSAmJiBlLnRhcmdldCAmJiBlLnR5cGUgPT09ICdjbGljaycgJiYgY3VzdG9tT25TZWFyY2gpIHtcbiAgICAgIGN1c3RvbU9uU2VhcmNoKGUudGFyZ2V0LnZhbHVlLCBlKTtcbiAgICB9XG4gICAgaWYgKGN1c3RvbU9uQ2hhbmdlKSB7XG4gICAgICBjdXN0b21PbkNoYW5nZShlKTtcbiAgICB9XG4gIH07XG4gIHZhciBvbk1vdXNlRG93biA9IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09ICgoX2EgPSBpbnB1dFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5wdXQpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuICB2YXIgb25TZWFyY2ggPSBmdW5jdGlvbiBvblNlYXJjaChlKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoY3VzdG9tT25TZWFyY2gpIHtcbiAgICAgIGN1c3RvbU9uU2VhcmNoKChfYiA9IChfYSA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbnB1dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnZhbHVlLCBlKTtcbiAgICB9XG4gIH07XG4gIHZhciBvblByZXNzRW50ZXIgPSBmdW5jdGlvbiBvblByZXNzRW50ZXIoZSkge1xuICAgIGlmIChjb21wb3NlZFJlZi5jdXJyZW50IHx8IGxvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25TZWFyY2goZSk7XG4gIH07XG4gIHZhciBzZWFyY2hJY29uID0gdHlwZW9mIGVudGVyQnV0dG9uID09PSAnYm9vbGVhbicgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTZWFyY2hPdXRsaW5lZCwgbnVsbCkgOiBudWxsO1xuICB2YXIgYnRuQ2xhc3NOYW1lID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1idXR0b25cIik7XG4gIHZhciBidXR0b247XG4gIHZhciBlbnRlckJ1dHRvbkFzRWxlbWVudCA9IGVudGVyQnV0dG9uIHx8IHt9O1xuICB2YXIgaXNBbnRkQnV0dG9uID0gZW50ZXJCdXR0b25Bc0VsZW1lbnQudHlwZSAmJiBlbnRlckJ1dHRvbkFzRWxlbWVudC50eXBlLl9fQU5UX0JVVFRPTiA9PT0gdHJ1ZTtcbiAgaWYgKGlzQW50ZEJ1dHRvbiB8fCBlbnRlckJ1dHRvbkFzRWxlbWVudC50eXBlID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvbiA9IGNsb25lRWxlbWVudChlbnRlckJ1dHRvbkFzRWxlbWVudCwgX2V4dGVuZHMoe1xuICAgICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duLFxuICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IGVudGVyQnV0dG9uQXNFbGVtZW50ID09PSBudWxsIHx8IGVudGVyQnV0dG9uQXNFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbnRlckJ1dHRvbkFzRWxlbWVudC5wcm9wcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uQ2xpY2spID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlKTtcbiAgICAgICAgb25TZWFyY2goZSk7XG4gICAgICB9LFxuICAgICAga2V5OiAnZW50ZXJCdXR0b24nXG4gICAgfSwgaXNBbnRkQnV0dG9uID8ge1xuICAgICAgY2xhc3NOYW1lOiBidG5DbGFzc05hbWUsXG4gICAgICBzaXplOiBzaXplXG4gICAgfSA6IHt9KSk7XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7XG4gICAgICBjbGFzc05hbWU6IGJ0bkNsYXNzTmFtZSxcbiAgICAgIHR5cGU6IGVudGVyQnV0dG9uID8gJ3ByaW1hcnknIDogdW5kZWZpbmVkLFxuICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGtleTogXCJlbnRlckJ1dHRvblwiLFxuICAgICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duLFxuICAgICAgb25DbGljazogb25TZWFyY2gsXG4gICAgICBsb2FkaW5nOiBsb2FkaW5nLFxuICAgICAgaWNvbjogc2VhcmNoSWNvblxuICAgIH0sIGVudGVyQnV0dG9uKTtcbiAgfVxuICBpZiAoYWRkb25BZnRlcikge1xuICAgIGJ1dHRvbiA9IFtidXR0b24sIGNsb25lRWxlbWVudChhZGRvbkFmdGVyLCB7XG4gICAgICBrZXk6ICdhZGRvbkFmdGVyJ1xuICAgIH0pXTtcbiAgfVxuICB2YXIgY2xzID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSksICEhc2l6ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi13aXRoLWJ1dHRvblwiKSwgISFlbnRlckJ1dHRvbiksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcbiAgdmFyIGhhbmRsZU9uQ29tcG9zaXRpb25TdGFydCA9IGZ1bmN0aW9uIGhhbmRsZU9uQ29tcG9zaXRpb25TdGFydChlKSB7XG4gICAgY29tcG9zZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgb25Db21wb3NpdGlvblN0YXJ0ID09PSBudWxsIHx8IG9uQ29tcG9zaXRpb25TdGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Db21wb3NpdGlvblN0YXJ0KGUpO1xuICB9O1xuICB2YXIgaGFuZGxlT25Db21wb3NpdGlvbkVuZCA9IGZ1bmN0aW9uIGhhbmRsZU9uQ29tcG9zaXRpb25FbmQoZSkge1xuICAgIGNvbXBvc2VkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBvbkNvbXBvc2l0aW9uRW5kID09PSBudWxsIHx8IG9uQ29tcG9zaXRpb25FbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ29tcG9zaXRpb25FbmQoZSk7XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgX2V4dGVuZHMoe1xuICAgIHJlZjogY29tcG9zZVJlZihpbnB1dFJlZiwgcmVmKSxcbiAgICBvblByZXNzRW50ZXI6IG9uUHJlc3NFbnRlclxuICB9LCByZXN0UHJvcHMsIHtcbiAgICBzaXplOiBzaXplLFxuICAgIG9uQ29tcG9zaXRpb25TdGFydDogaGFuZGxlT25Db21wb3NpdGlvblN0YXJ0LFxuICAgIG9uQ29tcG9zaXRpb25FbmQ6IGhhbmRsZU9uQ29tcG9zaXRpb25FbmQsXG4gICAgcHJlZml4Q2xzOiBpbnB1dFByZWZpeENscyxcbiAgICBhZGRvbkFmdGVyOiBidXR0b24sXG4gICAgc3VmZml4OiBzdWZmaXgsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIGNsYXNzTmFtZTogY2xzLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9KSk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFNlYXJjaC5kaXNwbGF5TmFtZSA9ICdTZWFyY2gnO1xufVxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0IENsb3NlQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtSXRlbUlucHV0Q29udGV4dCB9IGZyb20gJy4uL2Zvcm0vY29udGV4dCc7XG5pbXBvcnQgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICcuLi9fdXRpbC9yZWFjdE5vZGUnO1xuaW1wb3J0IHsgZ2V0TWVyZ2VkU3RhdHVzLCBnZXRTdGF0dXNDbGFzc05hbWVzIH0gZnJvbSAnLi4vX3V0aWwvc3RhdHVzVXRpbHMnO1xuaW1wb3J0IHsgdHVwbGUgfSBmcm9tICcuLi9fdXRpbC90eXBlJztcbnZhciBDbGVhcmFibGVJbnB1dFR5cGUgPSB0dXBsZSgndGV4dCcsICdpbnB1dCcpO1xuZnVuY3Rpb24gaGFzQWRkb24ocHJvcHMpIHtcbiAgcmV0dXJuICEhKHByb3BzLmFkZG9uQmVmb3JlIHx8IHByb3BzLmFkZG9uQWZ0ZXIpO1xufVxudmFyIENsZWFyYWJsZUxhYmVsZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2xlYXJhYmxlTGFiZWxlZElucHV0LCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDbGVhcmFibGVMYWJlbGVkSW5wdXQpO1xuICBmdW5jdGlvbiBDbGVhcmFibGVMYWJlbGVkSW5wdXQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsZWFyYWJsZUxhYmVsZWRJbnB1dCk7XG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhDbGVhcmFibGVMYWJlbGVkSW5wdXQsIFt7XG4gICAga2V5OiBcInJlbmRlckNsZWFySWNvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDbGVhckljb24ocHJlZml4Q2xzKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICByZWFkT25seSA9IF90aGlzJHByb3BzLnJlYWRPbmx5LFxuICAgICAgICBoYW5kbGVSZXNldCA9IF90aGlzJHByb3BzLmhhbmRsZVJlc2V0LFxuICAgICAgICBzdWZmaXggPSBfdGhpcyRwcm9wcy5zdWZmaXg7XG4gICAgICB2YXIgbmVlZENsZWFyID0gIWRpc2FibGVkICYmICFyZWFkT25seSAmJiB2YWx1ZTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsZWFyLWljb25cIik7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VDaXJjbGVGaWxsZWQsIHtcbiAgICAgICAgb25DbGljazogaGFuZGxlUmVzZXQsXG4gICAgICAgIC8vIERvIG5vdCB0cmlnZ2VyIG9uQmx1ciB3aGVuIGNsZWFyIGlucHV0XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzMxMjAwXG4gICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiBvbk1vdXNlRG93bihlKSB7XG4gICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCItaGlkZGVuXCIpLCAhbmVlZENsZWFyKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiLWhhcy1zdWZmaXhcIiksICEhc3VmZml4KSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpLFxuICAgICAgICByb2xlOiBcImJ1dHRvblwiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyVGV4dEFyZWFXaXRoQ2xlYXJJY29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRleHRBcmVhV2l0aENsZWFySWNvbihwcmVmaXhDbHMsIGVsZW1lbnQsIHN0YXR1c0NvbnRleHQpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lczI7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczIudmFsdWUsXG4gICAgICAgIGFsbG93Q2xlYXIgPSBfdGhpcyRwcm9wczIuYWxsb3dDbGVhcixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgZm9jdXNlZCA9IF90aGlzJHByb3BzMi5mb2N1c2VkLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZSxcbiAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMyLmRpcmVjdGlvbixcbiAgICAgICAgYm9yZGVyZWQgPSBfdGhpcyRwcm9wczIuYm9yZGVyZWQsXG4gICAgICAgIGhpZGRlbiA9IF90aGlzJHByb3BzMi5oaWRkZW4sXG4gICAgICAgIGN1c3RvbVN0YXR1cyA9IF90aGlzJHByb3BzMi5zdGF0dXM7XG4gICAgICB2YXIgY29udGV4dFN0YXR1cyA9IHN0YXR1c0NvbnRleHQuc3RhdHVzLFxuICAgICAgICBoYXNGZWVkYmFjayA9IHN0YXR1c0NvbnRleHQuaGFzRmVlZGJhY2s7XG4gICAgICBpZiAoIWFsbG93Q2xlYXIpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIGFmZml4V3JhcHBlckNscyA9IGNsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyXCIpLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFmZml4LXdyYXBwZXItdGV4dGFyZWEtd2l0aC1jbGVhci1idG5cIiksIGdldFN0YXR1c0NsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyXCIpLCBnZXRNZXJnZWRTdGF0dXMoY29udGV4dFN0YXR1cywgY3VzdG9tU3RhdHVzKSwgaGFzRmVlZGJhY2spLCAoX2NsYXNzTmFtZXMyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1mb2N1c2VkXCIpLCBmb2N1c2VkKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1ib3JkZXJsZXNzXCIpLCAhYm9yZGVyZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChjbGFzc05hbWUpLCAhaGFzQWRkb24odGhpcy5wcm9wcykgJiYgY2xhc3NOYW1lKSwgX2NsYXNzTmFtZXMyKSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBhZmZpeFdyYXBwZXJDbHMsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgaGlkZGVuOiBoaWRkZW5cbiAgICAgIH0sIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pLCB0aGlzLnJlbmRlckNsZWFySWNvbihwcmVmaXhDbHMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUl0ZW1JbnB1dENvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChzdGF0dXNDb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczMucHJlZml4Q2xzLFxuICAgICAgICAgIGlucHV0VHlwZSA9IF90aGlzJHByb3BzMy5pbnB1dFR5cGUsXG4gICAgICAgICAgZWxlbWVudCA9IF90aGlzJHByb3BzMy5lbGVtZW50O1xuICAgICAgICBpZiAoaW5wdXRUeXBlID09PSBDbGVhcmFibGVJbnB1dFR5cGVbMF0pIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyVGV4dEFyZWFXaXRoQ2xlYXJJY29uKHByZWZpeENscywgZWxlbWVudCwgc3RhdHVzQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ2xlYXJhYmxlTGFiZWxlZElucHV0O1xufShSZWFjdC5Db21wb25lbnQpO1xuZXhwb3J0IGRlZmF1bHQgQ2xlYXJhYmxlTGFiZWxlZElucHV0OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSY1RleHRBcmVhIGZyb20gJ3JjLXRleHRhcmVhJztcbmltcG9ydCB1c2VNZXJnZWRTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VNZXJnZWRTdGF0ZVwiO1xuaW1wb3J0IG9taXQgZnJvbSBcInJjLXV0aWwvZXMvb21pdFwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgRGlzYWJsZWRDb250ZXh0IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlci9EaXNhYmxlZENvbnRleHQnO1xuaW1wb3J0IFNpemVDb250ZXh0IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dCc7XG5pbXBvcnQgeyBGb3JtSXRlbUlucHV0Q29udGV4dCB9IGZyb20gJy4uL2Zvcm0vY29udGV4dCc7XG5pbXBvcnQgeyBnZXRNZXJnZWRTdGF0dXMsIGdldFN0YXR1c0NsYXNzTmFtZXMgfSBmcm9tICcuLi9fdXRpbC9zdGF0dXNVdGlscyc7XG5pbXBvcnQgQ2xlYXJhYmxlTGFiZWxlZElucHV0IGZyb20gJy4vQ2xlYXJhYmxlTGFiZWxlZElucHV0JztcbmltcG9ydCB7IGZpeENvbnRyb2xsZWRWYWx1ZSwgcmVzb2x2ZU9uQ2hhbmdlLCB0cmlnZ2VyRm9jdXMgfSBmcm9tICcuL0lucHV0JztcbmZ1bmN0aW9uIGZpeEVtb2ppTGVuZ3RoKHZhbHVlLCBtYXhMZW5ndGgpIHtcbiAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZSB8fCAnJykuc2xpY2UoMCwgbWF4TGVuZ3RoKS5qb2luKCcnKTtcbn1cbmZ1bmN0aW9uIHNldFRyaWdnZXJWYWx1ZShpc0N1cnNvckluRW5kLCBwcmVWYWx1ZSwgdHJpZ2dlclZhbHVlLCBtYXhMZW5ndGgpIHtcbiAgdmFyIG5ld1RyaWdnZXJWYWx1ZSA9IHRyaWdnZXJWYWx1ZTtcbiAgaWYgKGlzQ3Vyc29ySW5FbmQpIHtcbiAgICAvLyDlhYnmoIflnKjlsL7pg6jvvIznm7TmjqXmiKrmlq1cbiAgICBuZXdUcmlnZ2VyVmFsdWUgPSBmaXhFbW9qaUxlbmd0aCh0cmlnZ2VyVmFsdWUsIG1heExlbmd0aCk7XG4gIH0gZWxzZSBpZiAoX3RvQ29uc3VtYWJsZUFycmF5KHByZVZhbHVlIHx8ICcnKS5sZW5ndGggPCB0cmlnZ2VyVmFsdWUubGVuZ3RoICYmIF90b0NvbnN1bWFibGVBcnJheSh0cmlnZ2VyVmFsdWUgfHwgJycpLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIC8vIOWFieagh+WcqOS4remXtO+8jOWmguaenOacgOWQjueahOWAvOi2hei/h+acgOWkp+WAvO+8jOWImemHh+eUqOWOn+WFiOeahOWAvFxuICAgIG5ld1RyaWdnZXJWYWx1ZSA9IHByZVZhbHVlO1xuICB9XG4gIHJldHVybiBuZXdUcmlnZ2VyVmFsdWU7XG59XG52YXIgVGV4dEFyZWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX2EsIHJlZikge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgX2EkYm9yZGVyZWQgPSBfYS5ib3JkZXJlZCxcbiAgICBib3JkZXJlZCA9IF9hJGJvcmRlcmVkID09PSB2b2lkIDAgPyB0cnVlIDogX2EkYm9yZGVyZWQsXG4gICAgX2Ekc2hvd0NvdW50ID0gX2Euc2hvd0NvdW50LFxuICAgIHNob3dDb3VudCA9IF9hJHNob3dDb3VudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYSRzaG93Q291bnQsXG4gICAgbWF4TGVuZ3RoID0gX2EubWF4TGVuZ3RoLFxuICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICBzdHlsZSA9IF9hLnN0eWxlLFxuICAgIGN1c3RvbWl6ZVNpemUgPSBfYS5zaXplLFxuICAgIGN1c3RvbURpc2FibGVkID0gX2EuZGlzYWJsZWQsXG4gICAgb25Db21wb3NpdGlvblN0YXJ0ID0gX2Eub25Db21wb3NpdGlvblN0YXJ0LFxuICAgIG9uQ29tcG9zaXRpb25FbmQgPSBfYS5vbkNvbXBvc2l0aW9uRW5kLFxuICAgIG9uQ2hhbmdlID0gX2Eub25DaGFuZ2UsXG4gICAgb25Gb2N1cyA9IF9hLm9uRm9jdXMsXG4gICAgb25CbHVyID0gX2Eub25CbHVyLFxuICAgIGN1c3RvbVN0YXR1cyA9IF9hLnN0YXR1cyxcbiAgICBwcm9wcyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiYm9yZGVyZWRcIiwgXCJzaG93Q291bnRcIiwgXCJtYXhMZW5ndGhcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInNpemVcIiwgXCJkaXNhYmxlZFwiLCBcIm9uQ29tcG9zaXRpb25TdGFydFwiLCBcIm9uQ29tcG9zaXRpb25FbmRcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkJsdXJcIiwgXCJzdGF0dXNcIl0pO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb24gPSBfUmVhY3QkdXNlQ29udGV4dC5kaXJlY3Rpb247XG4gIHZhciBzaXplID0gUmVhY3QudXNlQ29udGV4dChTaXplQ29udGV4dCk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBEaXNhYmxlZCA9PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGRpc2FibGVkID0gUmVhY3QudXNlQ29udGV4dChEaXNhYmxlZENvbnRleHQpO1xuICB2YXIgbWVyZ2VkRGlzYWJsZWQgPSBjdXN0b21EaXNhYmxlZCAhPT0gbnVsbCAmJiBjdXN0b21EaXNhYmxlZCAhPT0gdm9pZCAwID8gY3VzdG9tRGlzYWJsZWQgOiBkaXNhYmxlZDtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0MiA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUl0ZW1JbnB1dENvbnRleHQpLFxuICAgIGNvbnRleHRTdGF0dXMgPSBfUmVhY3QkdXNlQ29udGV4dDIuc3RhdHVzLFxuICAgIGhhc0ZlZWRiYWNrID0gX1JlYWN0JHVzZUNvbnRleHQyLmhhc0ZlZWRiYWNrLFxuICAgIGlzRm9ybUl0ZW1JbnB1dCA9IF9SZWFjdCR1c2VDb250ZXh0Mi5pc0Zvcm1JdGVtSW5wdXQsXG4gICAgZmVlZGJhY2tJY29uID0gX1JlYWN0JHVzZUNvbnRleHQyLmZlZWRiYWNrSWNvbjtcbiAgdmFyIG1lcmdlZFN0YXR1cyA9IGdldE1lcmdlZFN0YXR1cyhjb250ZXh0U3RhdHVzLCBjdXN0b21TdGF0dXMpO1xuICB2YXIgaW5uZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjbGVhcmFibGVJbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICBjb21wb3NpdGluZyA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgc2V0Q29tcG9zaXRpbmcgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlMywgMiksXG4gICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG4gIHZhciBvbGRDb21wb3NpdGlvblZhbHVlUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBvbGRTZWxlY3Rpb25TdGFydFJlZiA9IFJlYWN0LnVzZVJlZigwKTtcbiAgdmFyIF91c2VNZXJnZWRTdGF0ZSA9IHVzZU1lcmdlZFN0YXRlKHByb3BzLmRlZmF1bHRWYWx1ZSwge1xuICAgICAgdmFsdWU6IHByb3BzLnZhbHVlXG4gICAgfSksXG4gICAgX3VzZU1lcmdlZFN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VNZXJnZWRTdGF0ZSwgMiksXG4gICAgdmFsdWUgPSBfdXNlTWVyZ2VkU3RhdGUyWzBdLFxuICAgIHNldFZhbHVlID0gX3VzZU1lcmdlZFN0YXRlMlsxXTtcbiAgdmFyIGhpZGRlbiA9IHByb3BzLmhpZGRlbjtcbiAgdmFyIGhhbmRsZVNldFZhbHVlID0gZnVuY3Rpb24gaGFuZGxlU2V0VmFsdWUodmFsLCBjYWxsYmFjaykge1xuICAgIGlmIChwcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRWYWx1ZSh2YWwpO1xuICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gVmFsdWUgVXBkYXRlID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBNYXggbGVuZ3RoIHZhbHVlXG4gIHZhciBoYXNNYXhMZW5ndGggPSBOdW1iZXIobWF4TGVuZ3RoKSA+IDA7XG4gIHZhciBvbkludGVybmFsQ29tcG9zaXRpb25TdGFydCA9IGZ1bmN0aW9uIG9uSW50ZXJuYWxDb21wb3NpdGlvblN0YXJ0KGUpIHtcbiAgICBzZXRDb21wb3NpdGluZyh0cnVlKTtcbiAgICAvLyDmi7zpn7PovpPlhaXliY3kv53lrZjkuIDku73ml6flgLxcbiAgICBvbGRDb21wb3NpdGlvblZhbHVlUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAvLyDkv53lrZjml6fnmoTlhYnmoIfkvY3nva5cbiAgICBvbGRTZWxlY3Rpb25TdGFydFJlZi5jdXJyZW50ID0gZS5jdXJyZW50VGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgIG9uQ29tcG9zaXRpb25TdGFydCA9PT0gbnVsbCB8fCBvbkNvbXBvc2l0aW9uU3RhcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ29tcG9zaXRpb25TdGFydChlKTtcbiAgfTtcbiAgdmFyIG9uSW50ZXJuYWxDb21wb3NpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uSW50ZXJuYWxDb21wb3NpdGlvbkVuZChlKSB7XG4gICAgdmFyIF9hO1xuICAgIHNldENvbXBvc2l0aW5nKGZhbHNlKTtcbiAgICB2YXIgdHJpZ2dlclZhbHVlID0gZS5jdXJyZW50VGFyZ2V0LnZhbHVlO1xuICAgIGlmIChoYXNNYXhMZW5ndGgpIHtcbiAgICAgIHZhciBpc0N1cnNvckluRW5kID0gb2xkU2VsZWN0aW9uU3RhcnRSZWYuY3VycmVudCA+PSBtYXhMZW5ndGggKyAxIHx8IG9sZFNlbGVjdGlvblN0YXJ0UmVmLmN1cnJlbnQgPT09ICgoX2EgPSBvbGRDb21wb3NpdGlvblZhbHVlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpO1xuICAgICAgdHJpZ2dlclZhbHVlID0gc2V0VHJpZ2dlclZhbHVlKGlzQ3Vyc29ySW5FbmQsIG9sZENvbXBvc2l0aW9uVmFsdWVSZWYuY3VycmVudCwgdHJpZ2dlclZhbHVlLCBtYXhMZW5ndGgpO1xuICAgIH1cbiAgICAvLyBQYXRjaCBjb21wb3NpdGlvbiBvbkNoYW5nZSB3aGVuIHZhbHVlIGNoYW5nZWRcbiAgICBpZiAodHJpZ2dlclZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgaGFuZGxlU2V0VmFsdWUodHJpZ2dlclZhbHVlKTtcbiAgICAgIHJlc29sdmVPbkNoYW5nZShlLmN1cnJlbnRUYXJnZXQsIGUsIG9uQ2hhbmdlLCB0cmlnZ2VyVmFsdWUpO1xuICAgIH1cbiAgICBvbkNvbXBvc2l0aW9uRW5kID09PSBudWxsIHx8IG9uQ29tcG9zaXRpb25FbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ29tcG9zaXRpb25FbmQoZSk7XG4gIH07XG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgIHZhciB0cmlnZ2VyVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICBpZiAoIWNvbXBvc2l0aW5nICYmIGhhc01heExlbmd0aCkge1xuICAgICAgLy8gMS4g5aSN5Yi257KY6LS06LaF6L+HbWF4bGVuZ3Ro55qE5oOF5Ya1IDIu5pyq6LaF6L+HbWF4bGVuZ3Ro55qE5oOF5Ya1XG4gICAgICB2YXIgaXNDdXJzb3JJbkVuZCA9IGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0ID49IG1heExlbmd0aCArIDEgfHwgZS50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPT09IHRyaWdnZXJWYWx1ZS5sZW5ndGggfHwgIWUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgICAgdHJpZ2dlclZhbHVlID0gc2V0VHJpZ2dlclZhbHVlKGlzQ3Vyc29ySW5FbmQsIHZhbHVlLCB0cmlnZ2VyVmFsdWUsIG1heExlbmd0aCk7XG4gICAgfVxuICAgIGhhbmRsZVNldFZhbHVlKHRyaWdnZXJWYWx1ZSk7XG4gICAgcmVzb2x2ZU9uQ2hhbmdlKGUuY3VycmVudFRhcmdldCwgZSwgb25DaGFuZ2UsIHRyaWdnZXJWYWx1ZSk7XG4gIH07XG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihlKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgb25CbHVyID09PSBudWxsIHx8IG9uQmx1ciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CbHVyKGUpO1xuICB9O1xuICB2YXIgaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiBoYW5kbGVGb2N1cyhlKSB7XG4gICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICBvbkZvY3VzID09PSBudWxsIHx8IG9uRm9jdXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRm9jdXMoZSk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0Rm9jdXNlZChmdW5jdGlvbiAocHJldikge1xuICAgICAgcmV0dXJuICFtZXJnZWREaXNhYmxlZCAmJiBwcmV2O1xuICAgIH0pO1xuICB9LCBbbWVyZ2VkRGlzYWJsZWRdKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFJlc2V0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGhhbmRsZVJlc2V0ID0gZnVuY3Rpb24gaGFuZGxlUmVzZXQoZSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGhhbmRsZVNldFZhbHVlKCcnKTtcbiAgICAoX2EgPSBpbm5lclJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICByZXNvbHZlT25DaGFuZ2UoKF9jID0gKF9iID0gaW5uZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlc2l6YWJsZVRleHRBcmVhKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudGV4dEFyZWEsIGUsIG9uQ2hhbmdlKTtcbiAgfTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnaW5wdXQnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzaXphYmxlVGV4dEFyZWE6IChfYSA9IGlubmVyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNpemFibGVUZXh0QXJlYSxcbiAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cyhvcHRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdHJpZ2dlckZvY3VzKChfYiA9IChfYSA9IGlubmVyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNpemFibGVUZXh0QXJlYSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRleHRBcmVhLCBvcHRpb24pO1xuICAgICAgfSxcbiAgICAgIGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IGlubmVyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ibHVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciB0ZXh0QXJlYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJjVGV4dEFyZWEsIF9leHRlbmRzKHt9LCBvbWl0KHByb3BzLCBbJ2FsbG93Q2xlYXInXSksIHtcbiAgICBkaXNhYmxlZDogbWVyZ2VkRGlzYWJsZWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYm9yZGVybGVzc1wiKSwgIWJvcmRlcmVkKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBjbGFzc05hbWUsIGNsYXNzTmFtZSAmJiAhc2hvd0NvdW50KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNtXCIpLCBzaXplID09PSAnc21hbGwnIHx8IGN1c3RvbWl6ZVNpemUgPT09ICdzbWFsbCcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbGdcIiksIHNpemUgPT09ICdsYXJnZScgfHwgY3VzdG9taXplU2l6ZSA9PT0gJ2xhcmdlJyksIF9jbGFzc05hbWVzKSwgZ2V0U3RhdHVzQ2xhc3NOYW1lcyhwcmVmaXhDbHMsIG1lcmdlZFN0YXR1cykpLFxuICAgIHN0eWxlOiBzaG93Q291bnQgPyB7XG4gICAgICByZXNpemU6IHN0eWxlID09PSBudWxsIHx8IHN0eWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHlsZS5yZXNpemVcbiAgICB9IDogc3R5bGUsXG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgb25Db21wb3NpdGlvblN0YXJ0OiBvbkludGVybmFsQ29tcG9zaXRpb25TdGFydCxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbkNvbXBvc2l0aW9uRW5kOiBvbkludGVybmFsQ29tcG9zaXRpb25FbmQsXG4gICAgcmVmOiBpbm5lclJlZlxuICB9KSk7XG4gIHZhciB2YWwgPSBmaXhDb250cm9sbGVkVmFsdWUodmFsdWUpO1xuICBpZiAoIWNvbXBvc2l0aW5nICYmIGhhc01heExlbmd0aCAmJiAocHJvcHMudmFsdWUgPT09IG51bGwgfHwgcHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAvLyBmaXggIzI3NjEyIOWwhnZhbHVl6L2s5Li65pWw57uE6L+b6KGM5oiq5Y+W77yM6Kej5YazICfwn5iCJy5sZW5ndGggPT09IDIg562JZW1vamnooajmg4Xlr7zoh7TnmoTmiKrlj5bkubHnoIHnmoTpl67pophcbiAgICB2YWwgPSBmaXhFbW9qaUxlbmd0aCh2YWwsIG1heExlbmd0aCk7XG4gIH1cbiAgLy8gVGV4dEFyZWFcbiAgdmFyIHRleHRhcmVhTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENsZWFyYWJsZUxhYmVsZWRJbnB1dCwgX2V4dGVuZHMoe1xuICAgIGRpc2FibGVkOiBtZXJnZWREaXNhYmxlZCxcbiAgICBmb2N1c2VkOiBmb2N1c2VkXG4gIH0sIHByb3BzLCB7XG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgaW5wdXRUeXBlOiBcInRleHRcIixcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVsZW1lbnQ6IHRleHRBcmVhLFxuICAgIGhhbmRsZVJlc2V0OiBoYW5kbGVSZXNldCxcbiAgICByZWY6IGNsZWFyYWJsZUlucHV0UmVmLFxuICAgIGJvcmRlcmVkOiBib3JkZXJlZCxcbiAgICBzdGF0dXM6IGN1c3RvbVN0YXR1cyxcbiAgICBzdHlsZTogc2hvd0NvdW50ID8gdW5kZWZpbmVkIDogc3R5bGVcbiAgfSkpO1xuICAvLyBPbmx5IHNob3cgdGV4dCBhcmVhIHdyYXBwZXIgd2hlbiBuZWVkZWRcbiAgaWYgKHNob3dDb3VudCB8fCBoYXNGZWVkYmFjaykge1xuICAgIHZhciBfY2xhc3NOYW1lczI7XG4gICAgdmFyIHZhbHVlTGVuZ3RoID0gX3RvQ29uc3VtYWJsZUFycmF5KHZhbCkubGVuZ3RoO1xuICAgIHZhciBkYXRhQ291bnQgPSAnJztcbiAgICBpZiAoX3R5cGVvZihzaG93Q291bnQpID09PSAnb2JqZWN0Jykge1xuICAgICAgZGF0YUNvdW50ID0gc2hvd0NvdW50LmZvcm1hdHRlcih7XG4gICAgICAgIHZhbHVlOiB2YWwsXG4gICAgICAgIGNvdW50OiB2YWx1ZUxlbmd0aCxcbiAgICAgICAgbWF4TGVuZ3RoOiBtYXhMZW5ndGhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhQ291bnQgPSBcIlwiLmNvbmNhdCh2YWx1ZUxlbmd0aCkuY29uY2F0KGhhc01heExlbmd0aCA/IFwiIC8gXCIuY29uY2F0KG1heExlbmd0aCkgOiAnJyk7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBoaWRkZW46IGhpZGRlbixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRleHRhcmVhXCIpLCAoX2NsYXNzTmFtZXMyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWEtcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi10ZXh0YXJlYS1zaG93LWNvdW50XCIpLCBzaG93Q291bnQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRleHRhcmVhLWluLWZvcm0taXRlbVwiKSwgaXNGb3JtSXRlbUlucHV0KSwgX2NsYXNzTmFtZXMyKSwgZ2V0U3RhdHVzQ2xhc3NOYW1lcyhcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRleHRhcmVhXCIpLCBtZXJnZWRTdGF0dXMsIGhhc0ZlZWRiYWNrKSwgY2xhc3NOYW1lKSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIFwiZGF0YS1jb3VudFwiOiBkYXRhQ291bnRcbiAgICB9LCB0ZXh0YXJlYU5vZGUsIGhhc0ZlZWRiYWNrICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWEtc3VmZml4XCIpXG4gICAgfSwgZmVlZGJhY2tJY29uKSk7XG4gIH1cbiAgcmV0dXJuIHRleHRhcmVhTm9kZTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgVGV4dEFyZWE7IiwiaW1wb3J0IEdyb3VwIGZyb20gJy4vR3JvdXAnO1xuaW1wb3J0IEludGVybmFsSW5wdXQgZnJvbSAnLi9JbnB1dCc7XG5pbXBvcnQgUGFzc3dvcmQgZnJvbSAnLi9QYXNzd29yZCc7XG5pbXBvcnQgU2VhcmNoIGZyb20gJy4vU2VhcmNoJztcbmltcG9ydCBUZXh0QXJlYSBmcm9tICcuL1RleHRBcmVhJztcbnZhciBJbnB1dCA9IEludGVybmFsSW5wdXQ7XG5JbnB1dC5Hcm91cCA9IEdyb3VwO1xuSW5wdXQuU2VhcmNoID0gU2VhcmNoO1xuSW5wdXQuVGV4dEFyZWEgPSBUZXh0QXJlYTtcbklucHV0LlBhc3N3b3JkID0gUGFzc3dvcmQ7XG5leHBvcnQgZGVmYXVsdCBJbnB1dDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5jYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLnJhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5yZWplY3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5yZXNvbHZlJyk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciByZXQgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKChjaGlsZCA9PT0gdW5kZWZpbmVkIHx8IGNoaWxkID09PSBudWxsKSAmJiAhb3B0aW9uLmtlZXBFbXB0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZCkpIHtcbiAgICAgIHJldCA9IHJldC5jb25jYXQodG9BcnJheShjaGlsZCkpO1xuICAgIH0gZWxzZSBpZiAoaXNGcmFnbWVudChjaGlsZCkgJiYgY2hpbGQucHJvcHMpIHtcbiAgICAgIHJldCA9IHJldC5jb25jYXQodG9BcnJheShjaGlsZC5wcm9wcy5jaGlsZHJlbiwgb3B0aW9uKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufSIsImltcG9ydCBsb2NhbGUgZnJvbSAnLi4vbG9jYWxlL2RlZmF1bHQnO1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IExvY2FsZUNvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCBkZWZhdWx0TG9jYWxlRGF0YSBmcm9tICcuL2RlZmF1bHQnO1xudmFyIExvY2FsZVJlY2VpdmVyID0gZnVuY3Rpb24gTG9jYWxlUmVjZWl2ZXIocHJvcHMpIHtcbiAgdmFyIF9wcm9wcyRjb21wb25lbnROYW1lID0gcHJvcHMuY29tcG9uZW50TmFtZSxcbiAgICBjb21wb25lbnROYW1lID0gX3Byb3BzJGNvbXBvbmVudE5hbWUgPT09IHZvaWQgMCA/ICdnbG9iYWwnIDogX3Byb3BzJGNvbXBvbmVudE5hbWUsXG4gICAgZGVmYXVsdExvY2FsZSA9IHByb3BzLmRlZmF1bHRMb2NhbGUsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgdmFyIGFudExvY2FsZSA9IFJlYWN0LnVzZUNvbnRleHQoTG9jYWxlQ29udGV4dCk7XG4gIHZhciBnZXRMb2NhbGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGxvY2FsZSA9IGRlZmF1bHRMb2NhbGUgfHwgZGVmYXVsdExvY2FsZURhdGFbY29tcG9uZW50TmFtZV07XG4gICAgdmFyIGxvY2FsZUZyb21Db250ZXh0ID0gKF9hID0gYW50TG9jYWxlID09PSBudWxsIHx8IGFudExvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogYW50TG9jYWxlW2NvbXBvbmVudE5hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICByZXR1cm4gX2V4dGVuZHMoX2V4dGVuZHMoe30sIGxvY2FsZSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gbG9jYWxlKCkgOiBsb2NhbGUpLCBsb2NhbGVGcm9tQ29udGV4dCB8fCB7fSk7XG4gIH0sIFtjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlLCBhbnRMb2NhbGVdKTtcbiAgdmFyIGdldExvY2FsZUNvZGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbG9jYWxlQ29kZSA9IGFudExvY2FsZSAmJiBhbnRMb2NhbGUubG9jYWxlO1xuICAgIC8vIEhhZCB1c2UgTG9jYWxlUHJvdmlkZSBidXQgZGlkbid0IHNldCBsb2NhbGVcbiAgICBpZiAoYW50TG9jYWxlICYmIGFudExvY2FsZS5leGlzdCAmJiAhbG9jYWxlQ29kZSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRMb2NhbGVEYXRhLmxvY2FsZTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZUNvZGU7XG4gIH0sIFthbnRMb2NhbGVdKTtcbiAgcmV0dXJuIGNoaWxkcmVuKGdldExvY2FsZSwgZ2V0TG9jYWxlQ29kZSwgYW50TG9jYWxlKTtcbn07XG5leHBvcnQgZGVmYXVsdCBMb2NhbGVSZWNlaXZlcjtcbmV4cG9ydCB2YXIgdXNlTG9jYWxlUmVjZWl2ZXIgPSBmdW5jdGlvbiB1c2VMb2NhbGVSZWNlaXZlcihjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlKSB7XG4gIHZhciBhbnRMb2NhbGUgPSBSZWFjdC51c2VDb250ZXh0KExvY2FsZUNvbnRleHQpO1xuICB2YXIgZ2V0TG9jYWxlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBsb2NhbGUgPSBkZWZhdWx0TG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVEYXRhW2NvbXBvbmVudE5hbWVdO1xuICAgIHZhciBsb2NhbGVGcm9tQ29udGV4dCA9IChfYSA9IGFudExvY2FsZSA9PT0gbnVsbCB8fCBhbnRMb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFudExvY2FsZVtjb21wb25lbnROYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCB0eXBlb2YgbG9jYWxlID09PSAnZnVuY3Rpb24nID8gbG9jYWxlKCkgOiBsb2NhbGUpLCBsb2NhbGVGcm9tQ29udGV4dCB8fCB7fSk7XG4gIH0sIFtjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlLCBhbnRMb2NhbGVdKTtcbiAgcmV0dXJuIFtnZXRMb2NhbGVdO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyICRTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgnc3ltYm9sIGRldGVjdGlvbicpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIC8vIG5iOiBEbyBub3QgY2FsbCBgU3RyaW5nYCBkaXJlY3RseSB0byBhdm9pZCB0aGlzIGJlaW5nIG9wdGltaXplZCBvdXQgdG8gYHN5bWJvbCsnJ2Agd2hpY2ggd2lsbCxcbiAgLy8gb2YgY291cnNlLCBmYWlsLlxuICByZXR1cm4gISRTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgLS0gb2xkIElFLCBXU0ggKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gICAgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50XG4gICAgICA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSAvLyBvbGQgSUVcbiAgICAgIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKClcbiAgICA6IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KTsgLy8gV1NIXG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1jcmVhdGUgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllc01vZHVsZS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsImltcG9ydCBjYW5Vc2VEb20gZnJvbSBcIi4vY2FuVXNlRG9tXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnNcIjtcbnZhciBBUFBFTkRfT1JERVIgPSAnZGF0YS1yYy1vcmRlcic7XG52YXIgQVBQRU5EX1BSSU9SSVRZID0gJ2RhdGEtcmMtcHJpb3JpdHknO1xudmFyIE1BUktfS0VZID0gXCJyYy11dGlsLWtleVwiO1xudmFyIGNvbnRhaW5lckNhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWFyaygpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgIG1hcmsgPSBfcmVmLm1hcms7XG4gIGlmIChtYXJrKSB7XG4gICAgcmV0dXJuIG1hcmsuc3RhcnRzV2l0aCgnZGF0YS0nKSA/IG1hcmsgOiBcImRhdGEtXCIuY29uY2F0KG1hcmspO1xuICB9XG4gIHJldHVybiBNQVJLX0tFWTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi5hdHRhY2hUbykge1xuICAgIHJldHVybiBvcHRpb24uYXR0YWNoVG87XG4gIH1cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gIHJldHVybiBoZWFkIHx8IGRvY3VtZW50LmJvZHk7XG59XG5mdW5jdGlvbiBnZXRPcmRlcihwcmVwZW5kKSB7XG4gIGlmIChwcmVwZW5kID09PSAncXVldWUnKSB7XG4gICAgcmV0dXJuICdwcmVwZW5kUXVldWUnO1xuICB9XG4gIHJldHVybiBwcmVwZW5kID8gJ3ByZXBlbmQnIDogJ2FwcGVuZCc7XG59XG5cbi8qKlxuICogRmluZCBzdHlsZSB3aGljaCBpbmplY3QgYnkgcmMtdXRpbFxuICovXG5mdW5jdGlvbiBmaW5kU3R5bGVzKGNvbnRhaW5lcikge1xuICByZXR1cm4gQXJyYXkuZnJvbSgoY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcikgfHwgY29udGFpbmVyKS5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ1NUWUxFJztcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Q1NTKGNzcykge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgaWYgKCFjYW5Vc2VEb20oKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBjc3AgPSBvcHRpb24uY3NwLFxuICAgIHByZXBlbmQgPSBvcHRpb24ucHJlcGVuZCxcbiAgICBfb3B0aW9uJHByaW9yaXR5ID0gb3B0aW9uLnByaW9yaXR5LFxuICAgIHByaW9yaXR5ID0gX29wdGlvbiRwcmlvcml0eSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb24kcHJpb3JpdHk7XG4gIHZhciBtZXJnZWRPcmRlciA9IGdldE9yZGVyKHByZXBlbmQpO1xuICB2YXIgaXNQcmVwZW5kUXVldWUgPSBtZXJnZWRPcmRlciA9PT0gJ3ByZXBlbmRRdWV1ZSc7XG4gIHZhciBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKEFQUEVORF9PUkRFUiwgbWVyZ2VkT3JkZXIpO1xuICBpZiAoaXNQcmVwZW5kUXVldWUgJiYgcHJpb3JpdHkpIHtcbiAgICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKEFQUEVORF9QUklPUklUWSwgXCJcIi5jb25jYXQocHJpb3JpdHkpKTtcbiAgfVxuICBpZiAoY3NwICE9PSBudWxsICYmIGNzcCAhPT0gdm9pZCAwICYmIGNzcC5ub25jZSkge1xuICAgIHN0eWxlTm9kZS5ub25jZSA9IGNzcCA9PT0gbnVsbCB8fCBjc3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNzcC5ub25jZTtcbiAgfVxuICBzdHlsZU5vZGUuaW5uZXJIVE1MID0gY3NzO1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbik7XG4gIHZhciBmaXJzdENoaWxkID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIGlmIChwcmVwZW5kKSB7XG4gICAgLy8gSWYgaXMgcXVldWUgYHByZXBlbmRgLCBpdCB3aWxsIHByZXBlbmQgZmlyc3Qgc3R5bGUgYW5kIHRoZW4gYXBwZW5kIHJlc3Qgc3R5bGVcbiAgICBpZiAoaXNQcmVwZW5kUXVldWUpIHtcbiAgICAgIHZhciBleGlzdFN0eWxlID0gZmluZFN0eWxlcyhjb250YWluZXIpLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAvLyBJZ25vcmUgc3R5bGUgd2hpY2ggbm90IGluamVjdGVkIGJ5IHJjLXV0aWwgd2l0aCBwcmVwZW5kXG4gICAgICAgIGlmICghWydwcmVwZW5kJywgJ3ByZXBlbmRRdWV1ZSddLmluY2x1ZGVzKG5vZGUuZ2V0QXR0cmlidXRlKEFQUEVORF9PUkRFUikpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWdub3JlIHN0eWxlIHdoaWNoIHByaW9yaXR5IGxlc3MgdGhlbiBuZXcgc3R5bGVcbiAgICAgICAgdmFyIG5vZGVQcmlvcml0eSA9IE51bWJlcihub2RlLmdldEF0dHJpYnV0ZShBUFBFTkRfUFJJT1JJVFkpIHx8IDApO1xuICAgICAgICByZXR1cm4gcHJpb3JpdHkgPj0gbm9kZVByaW9yaXR5O1xuICAgICAgfSk7XG4gICAgICBpZiAoZXhpc3RTdHlsZS5sZW5ndGgpIHtcbiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzdHlsZU5vZGUsIGV4aXN0U3R5bGVbZXhpc3RTdHlsZS5sZW5ndGggLSAxXS5uZXh0U2libGluZyk7XG4gICAgICAgIHJldHVybiBzdHlsZU5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXNlIGBpbnNlcnRCZWZvcmVgIGFzIGBwcmVwZW5kYFxuICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBmaXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgfVxuICByZXR1cm4gc3R5bGVOb2RlO1xufVxuZnVuY3Rpb24gZmluZEV4aXN0Tm9kZShrZXkpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9uKTtcbiAgcmV0dXJuIGZpbmRTdHlsZXMoY29udGFpbmVyKS5maW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGdldE1hcmsob3B0aW9uKSkgPT09IGtleTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ1NTKGtleSkge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIGV4aXN0Tm9kZSA9IGZpbmRFeGlzdE5vZGUoa2V5LCBvcHRpb24pO1xuICBpZiAoZXhpc3ROb2RlKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChleGlzdE5vZGUpO1xuICB9XG59XG5cbi8qKlxuICogcWlhbmt1biB3aWxsIGluamVjdCBgYXBwZW5kQ2hpbGRgIHRvIGluc2VydCBpbnRvIG90aGVyXG4gKi9cbmZ1bmN0aW9uIHN5bmNSZWFsQ29udGFpbmVyKGNvbnRhaW5lciwgb3B0aW9uKSB7XG4gIHZhciBjYWNoZWRSZWFsQ29udGFpbmVyID0gY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcik7XG5cbiAgLy8gRmluZCByZWFsIGNvbnRhaW5lciB3aGVuIG5vdCBjYWNoZWQgb3IgY2FjaGVkIGNvbnRhaW5lciByZW1vdmVkXG4gIGlmICghY2FjaGVkUmVhbENvbnRhaW5lciB8fCAhY29udGFpbnMoZG9jdW1lbnQsIGNhY2hlZFJlYWxDb250YWluZXIpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyU3R5bGUgPSBpbmplY3RDU1MoJycsIG9wdGlvbik7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBwbGFjZWhvbGRlclN0eWxlLnBhcmVudE5vZGU7XG4gICAgY29udGFpbmVyQ2FjaGUuc2V0KGNvbnRhaW5lciwgcGFyZW50Tm9kZSk7XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyU3R5bGUpO1xuICB9XG59XG5cbi8qKlxuICogbWFudWFsbHkgY2xlYXIgY29udGFpbmVyIGNhY2hlIHRvIGF2b2lkIGdsb2JhbCBjYWNoZSBpbiB1bml0IHRlc3Rlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDb250YWluZXJDYWNoZSgpIHtcbiAgY29udGFpbmVyQ2FjaGUuY2xlYXIoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDU1MoY3NzLCBrZXkpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9uKTtcblxuICAvLyBTeW5jIHJlYWwgcGFyZW50XG4gIHN5bmNSZWFsQ29udGFpbmVyKGNvbnRhaW5lciwgb3B0aW9uKTtcbiAgdmFyIGV4aXN0Tm9kZSA9IGZpbmRFeGlzdE5vZGUoa2V5LCBvcHRpb24pO1xuICBpZiAoZXhpc3ROb2RlKSB7XG4gICAgdmFyIF9vcHRpb24kY3NwLCBfb3B0aW9uJGNzcDI7XG4gICAgaWYgKChfb3B0aW9uJGNzcCA9IG9wdGlvbi5jc3ApICE9PSBudWxsICYmIF9vcHRpb24kY3NwICE9PSB2b2lkIDAgJiYgX29wdGlvbiRjc3Aubm9uY2UgJiYgZXhpc3ROb2RlLm5vbmNlICE9PSAoKF9vcHRpb24kY3NwMiA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AyLm5vbmNlKSkge1xuICAgICAgdmFyIF9vcHRpb24kY3NwMztcbiAgICAgIGV4aXN0Tm9kZS5ub25jZSA9IChfb3B0aW9uJGNzcDMgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb24kY3NwMy5ub25jZTtcbiAgICB9XG4gICAgaWYgKGV4aXN0Tm9kZS5pbm5lckhUTUwgIT09IGNzcykge1xuICAgICAgZXhpc3ROb2RlLmlubmVySFRNTCA9IGNzcztcbiAgICB9XG4gICAgcmV0dXJuIGV4aXN0Tm9kZTtcbiAgfVxuICB2YXIgbmV3Tm9kZSA9IGluamVjdENTUyhjc3MsIG9wdGlvbik7XG4gIG5ld05vZGUuc2V0QXR0cmlidXRlKGdldE1hcmsob3B0aW9uKSwga2V5KTtcbiAgcmV0dXJuIG5ld05vZGU7XG59IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2hlY2tDaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0xOTMuNSAzMDEuN2wtMjEwLjYgMjkyYTMxLjggMzEuOCAwIDAxLTUxLjcgMEwzMTguNSA0ODQuOWMtMy44LTUuMyAwLTEyLjcgNi41LTEyLjdoNDYuOWMxMC4yIDAgMTkuOSA0LjkgMjUuOSAxMy4zbDcxLjIgOTguOCAxNTcuMi0yMThjNi04LjMgMTUuNi0xMy4zIDI1LjktMTMuM0g2OTljNi41IDAgMTAuMyA3LjQgNi41IDEyLjd6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnQgZGVmYXVsdCBDaGVja0NpcmNsZUZpbGxlZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENoZWNrQ2lyY2xlRmlsbGVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0NoZWNrQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgQ2hlY2tDaXJjbGVGaWxsZWQgPSBmdW5jdGlvbiBDaGVja0NpcmNsZUZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogQ2hlY2tDaXJjbGVGaWxsZWRTdmdcbiAgfSkpO1xufTtcbkNoZWNrQ2lyY2xlRmlsbGVkLmRpc3BsYXlOYW1lID0gJ0NoZWNrQ2lyY2xlRmlsbGVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENoZWNrQ2lyY2xlRmlsbGVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bS0zMiAyMzJjMC00LjQgMy42LTggOC04aDQ4YzQuNCAwIDggMy42IDggOHYyNzJjMCA0LjQtMy42IDgtOCA4aC00OGMtNC40IDAtOC0zLjYtOC04VjI5NnptMzIgNDQwYTQ4LjAxIDQ4LjAxIDAgMDEwLTk2IDQ4LjAxIDQ4LjAxIDAgMDEwIDk2elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiZXhjbGFtYXRpb24tY2lyY2xlXCIsIFwidGhlbWVcIjogXCJmaWxsZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5kaXNwbGF5TmFtZSA9ICdFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCk7IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xudmFyIEljb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0IGRlZmF1bHQgSWNvbkNvbnRleHQ7IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTm90aWNlIGZyb20gJy4vTm90aWNlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25JbnN0YW5jZSkge1xuICB2YXIgY3JlYXRlZFJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgZWxlbWVudHMgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldEVsZW1lbnRzID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgZnVuY3Rpb24gbm90aWZ5KG5vdGljZVByb3BzKSB7XG4gICAgdmFyIGZpcnN0TW91bnQgPSB0cnVlO1xuICAgIG5vdGlmaWNhdGlvbkluc3RhbmNlLmFkZChub3RpY2VQcm9wcywgZnVuY3Rpb24gKGRpdiwgcHJvcHMpIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wcy5rZXk7XG4gICAgICBpZiAoZGl2ICYmICghY3JlYXRlZFJlZi5jdXJyZW50W2tleV0gfHwgZmlyc3RNb3VudCkpIHtcbiAgICAgICAgdmFyIG5vdGljZUVsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGljZSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgaG9sZGVyOiBkaXZcbiAgICAgICAgfSkpO1xuICAgICAgICBjcmVhdGVkUmVmLmN1cnJlbnRba2V5XSA9IG5vdGljZUVsZTtcbiAgICAgICAgc2V0RWxlbWVudHMoZnVuY3Rpb24gKG9yaWdpbkVsZW1lbnRzKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gb3JpZ2luRWxlbWVudHMuZmluZEluZGV4KGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGUua2V5ID09PSBwcm9wcy5rZXk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob3JpZ2luRWxlbWVudHMpLCBbbm90aWNlRWxlXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjbG9uZUxpc3QgPSBfdG9Db25zdW1hYmxlQXJyYXkob3JpZ2luRWxlbWVudHMpO1xuICAgICAgICAgIGNsb25lTGlzdFtpbmRleF0gPSBub3RpY2VFbGU7XG4gICAgICAgICAgcmV0dXJuIGNsb25lTGlzdDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmaXJzdE1vdW50ID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFtub3RpZnksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBlbGVtZW50cyldO1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRGVib3VuY2UodmFsdWUpIHtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHZhbHVlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICBjYWNoZVZhbHVlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRDYWNoZVZhbHVlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2V0Q2FjaGVWYWx1ZSh2YWx1ZSk7XG4gICAgfSwgdmFsdWUubGVuZ3RoID8gMCA6IDEwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH07XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gY2FjaGVWYWx1ZTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbnZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscztcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnZW1wdHktaW1nLWRlZmF1bHQnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENscyxcbiAgICB3aWR0aDogXCIxODRcIixcbiAgICBoZWlnaHQ6IFwiMTUyXCIsXG4gICAgdmlld0JveDogXCIwIDAgMTg0IDE1MlwiLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDI0IDMxLjY3KVwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZWxsaXBzZVwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWVsbGlwc2VcIiksXG4gICAgY3g6IFwiNjcuNzk3XCIsXG4gICAgY3k6IFwiMTA2Ljg5XCIsXG4gICAgcng6IFwiNjcuNzk3XCIsXG4gICAgcnk6IFwiMTIuNjY4XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXBhdGgtMVwiKSxcbiAgICBkOiBcIk0xMjIuMDM0IDY5LjY3NEw5OC4xMDkgNDAuMjI5Yy0xLjE0OC0xLjM4Ni0yLjgyNi0yLjIyNS00LjU5My0yLjIyNWgtNTEuNDRjLTEuNzY2IDAtMy40NDQuODM5LTQuNTkyIDIuMjI1TDEzLjU2IDY5LjY3NHYxNS4zODNoMTA4LjQ3NVY2OS42NzR6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXBhdGgtMlwiKSxcbiAgICBkOiBcIk0xMDEuNTM3IDg2LjIxNEw4MC42MyA2MS4xMDJjLTEuMDAxLTEuMjA3LTIuNTA3LTEuODY3LTQuMDQ4LTEuODY3SDMxLjcyNGMtMS41NCAwLTMuMDQ3LjY2LTQuMDQ4IDEuODY3TDYuNzY5IDg2LjIxNHYxMy43OTJoOTQuNzY4Vjg2LjIxNHpcIixcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDEzLjU2KVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wYXRoLTNcIiksXG4gICAgZDogXCJNMzMuODMgMGg2Ny45MzNhNCA0IDAgMCAxIDQgNHY5My4zNDRhNCA0IDAgMCAxLTQgNEgzMy44M2E0IDQgMCAwIDEtNC00VjRhNCA0IDAgMCAxIDQtNHpcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcGF0aC00XCIpLFxuICAgIGQ6IFwiTTQyLjY3OCA5Ljk1M2g1MC4yMzdhMiAyIDAgMCAxIDIgMlYzNi45MWEyIDIgMCAwIDEtMiAySDQyLjY3OGEyIDIgMCAwIDEtMi0yVjExLjk1M2EyIDIgMCAwIDEgMi0yek00Mi45NCA0OS43NjdoNDkuNzEzYTIuMjYyIDIuMjYyIDAgMSAxIDAgNC41MjRINDIuOTRhMi4yNjIgMi4yNjIgMCAwIDEgMC00LjUyNHpNNDIuOTQgNjEuNTNoNDkuNzEzYTIuMjYyIDIuMjYyIDAgMSAxIDAgNC41MjVINDIuOTRhMi4yNjIgMi4yNjIgMCAwIDEgMC00LjUyNXpNMTIxLjgxMyAxMDUuMDMyYy0uNzc1IDMuMDcxLTMuNDk3IDUuMzYtNi43MzUgNS4zNkgyMC41MTVjLTMuMjM4IDAtNS45Ni0yLjI5LTYuNzM0LTUuMzZhNy4zMDkgNy4zMDkgMCAwIDEtLjIyMi0xLjc5VjY5LjY3NWgyNi4zMThjMi45MDcgMCA1LjI1IDIuNDQ4IDUuMjUgNS40MnYuMDRjMCAyLjk3MSAyLjM3IDUuMzcgNS4yNzcgNS4zN2gzNC43ODVjMi45MDcgMCA1LjI3Ny0yLjQyMSA1LjI3Ny01LjM5M1Y3NS4xYzAtMi45NzIgMi4zNDMtNS40MjYgNS4yNS01LjQyNmgyNi4zMTh2MzMuNTY5YzAgLjYxNy0uMDc3IDEuMjE2LS4yMjEgMS43ODl6XCJcbiAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wYXRoLTVcIiksXG4gICAgZDogXCJNMTQ5LjEyMSAzMy4yOTJsLTYuODMgMi42NWExIDEgMCAwIDEtMS4zMTctMS4yM2wxLjkzNy02LjIwN2MtMi41ODktMi45NDQtNC4xMDktNi41MzQtNC4xMDktMTAuNDA4QzEzOC44MDIgOC4xMDIgMTQ4LjkyIDAgMTYxLjQwMiAwIDE3My44ODEgMCAxODQgOC4xMDIgMTg0IDE4LjA5N2MwIDkuOTk1LTEwLjExOCAxOC4wOTctMjIuNTk5IDE4LjA5Ny00LjUyOCAwLTguNzQ0LTEuMDY2LTEyLjI4LTIuOTAyelwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1nXCIpLFxuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoMTQ5LjY1IDE1LjM4MylcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImVsbGlwc2VcIiwge1xuICAgIGN4OiBcIjIwLjY1NFwiLFxuICAgIGN5OiBcIjMuMTY3XCIsXG4gICAgcng6IFwiMi44NDlcIixcbiAgICByeTogXCIyLjgxNVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTUuNjk4IDUuNjNIMEwyLjg5OC43MDR6TTkuMjU5LjcwNGg0Ljk4NVY1LjYzSDkuMjU5elwiXG4gIH0pKSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IEVtcHR5OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xudmFyIFNpbXBsZSA9IGZ1bmN0aW9uIFNpbXBsZSgpIHtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHM7XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2VtcHR5LWltZy1zaW1wbGUnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENscyxcbiAgICB3aWR0aDogXCI2NFwiLFxuICAgIGhlaWdodDogXCI0MVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDY0IDQxXCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoMCAxKVwiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImVsbGlwc2VcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1lbGxpcHNlXCIpLFxuICAgIGN4OiBcIjMyXCIsXG4gICAgY3k6IFwiMzNcIixcbiAgICByeDogXCIzMlwiLFxuICAgIHJ5OiBcIjdcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ1wiKSxcbiAgICBmaWxsUnVsZTogXCJub256ZXJvXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01NSAxMi43Nkw0NC44NTQgMS4yNThDNDQuMzY3LjQ3NCA0My42NTYgMCA0Mi45MDcgMEgyMS4wOTNjLS43NDkgMC0xLjQ2LjQ3NC0xLjk0NyAxLjI1N0w5IDEyLjc2MVYyMmg0NnYtOS4yNHpcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00MS42MTMgMTUuOTMxYzAtMS42MDUuOTk0LTIuOTMgMi4yMjctMi45MzFINTV2MTguMTM3QzU1IDMzLjI2IDUzLjY4IDM1IDUyLjA1IDM1aC00MC4xQzEwLjMyIDM1IDkgMzMuMjU5IDkgMzEuMTM3VjEzaDExLjE2YzEuMjMzIDAgMi4yMjcgMS4zMjMgMi4yMjcgMi45Mjh2LjAyMmMwIDEuNjA1IDEuMDA1IDIuOTAxIDIuMjM3IDIuOTAxaDE0Ljc1MmMxLjIzMiAwIDIuMjM3LTEuMzA4IDIuMjM3LTIuOTEzdi0uMDA3elwiLFxuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wYXRoXCIpXG4gIH0pKSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNpbXBsZTsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCBMb2NhbGVSZWNlaXZlciBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXInO1xuaW1wb3J0IERlZmF1bHRFbXB0eUltZyBmcm9tICcuL2VtcHR5JztcbmltcG9ydCBTaW1wbGVFbXB0eUltZyBmcm9tICcuL3NpbXBsZSc7XG52YXIgZGVmYXVsdEVtcHR5SW1nID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVtcHR5SW1nLCBudWxsKTtcbnZhciBzaW1wbGVFbXB0eUltZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNpbXBsZUVtcHR5SW1nLCBudWxsKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KF9hKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgY3VzdG9taXplUHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgIF9hJGltYWdlID0gX2EuaW1hZ2UsXG4gICAgaW1hZ2UgPSBfYSRpbWFnZSA9PT0gdm9pZCAwID8gZGVmYXVsdEVtcHR5SW1nIDogX2EkaW1hZ2UsXG4gICAgZGVzY3JpcHRpb24gPSBfYS5kZXNjcmlwdGlvbixcbiAgICBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLFxuICAgIGltYWdlU3R5bGUgPSBfYS5pbWFnZVN0eWxlLFxuICAgIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wiY2xhc3NOYW1lXCIsIFwicHJlZml4Q2xzXCIsIFwiaW1hZ2VcIiwgXCJkZXNjcmlwdGlvblwiLCBcImNoaWxkcmVuXCIsIFwiaW1hZ2VTdHlsZVwiXSk7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2FsZVJlY2VpdmVyLCB7XG4gICAgY29tcG9uZW50TmFtZTogXCJFbXB0eVwiXG4gIH0sIGZ1bmN0aW9uIChjb250ZXh0TG9jYWxlKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzO1xuICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2VtcHR5JywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICB2YXIgZGVzID0gdHlwZW9mIGRlc2NyaXB0aW9uICE9PSAndW5kZWZpbmVkJyA/IGRlc2NyaXB0aW9uIDogY29udGV4dExvY2FsZS5kZXNjcmlwdGlvbjtcbiAgICB2YXIgYWx0ID0gdHlwZW9mIGRlcyA9PT0gJ3N0cmluZycgPyBkZXMgOiAnZW1wdHknO1xuICAgIHZhciBpbWFnZU5vZGUgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbWFnZU5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgICAgIGFsdDogYWx0LFxuICAgICAgICBzcmM6IGltYWdlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1hZ2VOb2RlID0gaW1hZ2U7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vcm1hbFwiKSwgaW1hZ2UgPT09IHNpbXBsZUVtcHR5SW1nKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKVxuICAgIH0sIHJlc3RQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbWFnZVwiKSxcbiAgICAgIHN0eWxlOiBpbWFnZVN0eWxlXG4gICAgfSwgaW1hZ2VOb2RlKSwgZGVzICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kZXNjcmlwdGlvblwiKVxuICAgIH0sIGRlcyksIGNoaWxkcmVuICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1mb290ZXJcIilcbiAgICB9LCBjaGlsZHJlbikpO1xuICB9KTtcbn07XG5FbXB0eS5QUkVTRU5URURfSU1BR0VfREVGQVVMVCA9IGRlZmF1bHRFbXB0eUltZztcbkVtcHR5LlBSRVNFTlRFRF9JTUFHRV9TSU1QTEUgPSBzaW1wbGVFbXB0eUltZztcbmV4cG9ydCBkZWZhdWx0IEVtcHR5OyIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nKTtcbnZhciBuYW1lUkUgPSAvZnVuY3Rpb25cXGIoPzpcXHN8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xcXC9cXC9bXlxcblxccl0qW1xcblxccl0rKSooW15cXHMoL10qKS87XG52YXIgcmVnRXhwRXhlYyA9IHVuY3VycnlUaGlzKG5hbWVSRS5leGVjKTtcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICFGVU5DVElPTl9OQU1FX0VYSVNUUykge1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVnRXhwRXhlYyhuYW1lUkUsIGZ1bmN0aW9uVG9TdHJpbmcodGhpcykpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCJpbXBvcnQgeyB0dXBsZSB9IGZyb20gJy4vdHlwZSc7XG4vLyA9PT09PT09PT09PT09PT09PT0gQ29sbGFwc2UgTW90aW9uID09PT09PT09PT09PT09PT09PVxudmFyIGdldENvbGxhcHNlZEhlaWdodCA9IGZ1bmN0aW9uIGdldENvbGxhcHNlZEhlaWdodCgpIHtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IDAsXG4gICAgb3BhY2l0eTogMFxuICB9O1xufTtcbnZhciBnZXRSZWFsSGVpZ2h0ID0gZnVuY3Rpb24gZ2V0UmVhbEhlaWdodChub2RlKSB7XG4gIHZhciBzY3JvbGxIZWlnaHQgPSBub2RlLnNjcm9sbEhlaWdodDtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHNjcm9sbEhlaWdodCxcbiAgICBvcGFjaXR5OiAxXG4gIH07XG59O1xudmFyIGdldEN1cnJlbnRIZWlnaHQgPSBmdW5jdGlvbiBnZXRDdXJyZW50SGVpZ2h0KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IG5vZGUgPyBub2RlLm9mZnNldEhlaWdodCA6IDBcbiAgfTtcbn07XG52YXIgc2tpcE9wYWNpdHlUcmFuc2l0aW9uID0gZnVuY3Rpb24gc2tpcE9wYWNpdHlUcmFuc2l0aW9uKF8sIGV2ZW50KSB7XG4gIHJldHVybiAoZXZlbnQgPT09IG51bGwgfHwgZXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50LmRlYWRsaW5lKSA9PT0gdHJ1ZSB8fCBldmVudC5wcm9wZXJ0eU5hbWUgPT09ICdoZWlnaHQnO1xufTtcbnZhciBjb2xsYXBzZU1vdGlvbiA9IHtcbiAgbW90aW9uTmFtZTogJ2FudC1tb3Rpb24tY29sbGFwc2UnLFxuICBvbkFwcGVhclN0YXJ0OiBnZXRDb2xsYXBzZWRIZWlnaHQsXG4gIG9uRW50ZXJTdGFydDogZ2V0Q29sbGFwc2VkSGVpZ2h0LFxuICBvbkFwcGVhckFjdGl2ZTogZ2V0UmVhbEhlaWdodCxcbiAgb25FbnRlckFjdGl2ZTogZ2V0UmVhbEhlaWdodCxcbiAgb25MZWF2ZVN0YXJ0OiBnZXRDdXJyZW50SGVpZ2h0LFxuICBvbkxlYXZlQWN0aXZlOiBnZXRDb2xsYXBzZWRIZWlnaHQsXG4gIG9uQXBwZWFyRW5kOiBza2lwT3BhY2l0eVRyYW5zaXRpb24sXG4gIG9uRW50ZXJFbmQ6IHNraXBPcGFjaXR5VHJhbnNpdGlvbixcbiAgb25MZWF2ZUVuZDogc2tpcE9wYWNpdHlUcmFuc2l0aW9uLFxuICBtb3Rpb25EZWFkbGluZTogNTAwXG59O1xudmFyIFNlbGVjdFBsYWNlbWVudHMgPSB0dXBsZSgnYm90dG9tTGVmdCcsICdib3R0b21SaWdodCcsICd0b3BMZWZ0JywgJ3RvcFJpZ2h0Jyk7XG52YXIgZ2V0VHJhbnNpdGlvbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EaXJlY3Rpb24ocGxhY2VtZW50KSB7XG4gIGlmIChwbGFjZW1lbnQgIT09IHVuZGVmaW5lZCAmJiAocGxhY2VtZW50ID09PSAndG9wTGVmdCcgfHwgcGxhY2VtZW50ID09PSAndG9wUmlnaHQnKSkge1xuICAgIHJldHVybiBcInNsaWRlLWRvd25cIjtcbiAgfVxuICByZXR1cm4gXCJzbGlkZS11cFwiO1xufTtcbnZhciBnZXRUcmFuc2l0aW9uTmFtZSA9IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25OYW1lKHJvb3RQcmVmaXhDbHMsIG1vdGlvbiwgdHJhbnNpdGlvbk5hbWUpIHtcbiAgaWYgKHRyYW5zaXRpb25OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gIH1cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHJvb3RQcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQobW90aW9uKTtcbn07XG5leHBvcnQgeyBnZXRUcmFuc2l0aW9uTmFtZSwgZ2V0VHJhbnNpdGlvbkRpcmVjdGlvbiB9O1xuZXhwb3J0IGRlZmF1bHQgY29sbGFwc2VNb3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRTdHJpbmcgPSBTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PT0gNjtcbiAgdmFyIElTX0ZJTFRFUl9SRUpFQ1QgPSBUWVBFID09PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0cnVuYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXRydW5jJyk7XG5cbi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiB0cnVuYyhudW1iZXIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IGlzQ2FsbGFibGUoZGV0ZWN0aW9uKSA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gJE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGRlc2NyaXB0b3IuZ2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLmdldCwgbmFtZSwgeyBnZXR0ZXI6IHRydWUgfSk7XG4gIGlmIChkZXNjcmlwdG9yLnNldCkgbWFrZUJ1aWx0SW4oZGVzY3JpcHRvci5zZXQsIG5hbWUsIHsgc2V0dGVyOiB0cnVlIH0pO1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkuZih0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpc0FjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1hY2Nlc3NvcicpO1xudmFyIFNldEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWhlbHBlcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpc0FjY2Vzc29yKFNldEhlbHBlcnMucHJvdG8sICdzaXplJywgJ2dldCcpIHx8IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIHNldC5zaXplO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19CUk9XU0VSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1icm93c2VyJyk7XG52YXIgSVNfREVOTyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtZGVubycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgU1VCQ0xBU1NJTkcgPSBmYWxzZTtcbnZhciBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgPSBpc0NhbGxhYmxlKGdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpO1xuXG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSBpc0ZvcmNlZCgnUHJvbWlzZScsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI3sgY2F0Y2gsIGZpbmFsbHkgfSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIShOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSkpIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoIVY4X1ZFUlNJT04gfHwgVjhfVkVSU0lPTiA8IDUxIHx8ICEvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSB7XG4gICAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSgxKTsgfSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICAgIH07XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gICAgU1VCQ0xBU1NJTkcgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICAgIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIH0gcmV0dXJuICFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIChJU19CUk9XU0VSIHx8IElTX0RFTk8pICYmICFOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENPTlNUUlVDVE9SOiBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUixcbiAgUkVKRUNUSU9OX0VWRU5UOiBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQsXG4gIFNVQkNMQVNTSU5HOiBTVUJDTEFTU0lOR1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyAkVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhQ2FsbGFibGUocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUNhbGxhYmxlKHJlamVjdCk7XG59O1xuXG4vLyBgTmV3UHJvbWlzZUNhcGFiaWxpdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1uZXdwcm9taXNlY2FwYWJpbGl0eVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiaW1wb3J0IHsgaW5wdXRUb1JHQiwgcmdiVG9IZXgsIHJnYlRvSHN2IH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcblxudmFyIGh1ZVN0ZXAgPSAyOyAvLyDoibLnm7jpmLbmoq9cblxudmFyIHNhdHVyYXRpb25TdGVwID0gMC4xNjsgLy8g6aWx5ZKM5bqm6Zi25qKv77yM5rWF6Imy6YOo5YiGXG5cbnZhciBzYXR1cmF0aW9uU3RlcDIgPSAwLjA1OyAvLyDppbHlkozluqbpmLbmoq/vvIzmt7HoibLpg6jliIZcblxudmFyIGJyaWdodG5lc3NTdGVwMSA9IDAuMDU7IC8vIOS6ruW6pumYtuair++8jOa1heiJsumDqOWIhlxuXG52YXIgYnJpZ2h0bmVzc1N0ZXAyID0gMC4xNTsgLy8g5Lqu5bqm6Zi25qKv77yM5rex6Imy6YOo5YiGXG5cbnZhciBsaWdodENvbG9yQ291bnQgPSA1OyAvLyDmtYXoibLmlbDph4/vvIzkuLvoibLkuIpcblxudmFyIGRhcmtDb2xvckNvdW50ID0gNDsgLy8g5rex6Imy5pWw6YeP77yM5Li76Imy5LiLXG4vLyDmmpfoibLkuLvpopjpopzoibLmmKDlsITlhbPns7vooahcblxudmFyIGRhcmtDb2xvck1hcCA9IFt7XG4gIGluZGV4OiA3LFxuICBvcGFjaXR5OiAwLjE1XG59LCB7XG4gIGluZGV4OiA2LFxuICBvcGFjaXR5OiAwLjI1XG59LCB7XG4gIGluZGV4OiA1LFxuICBvcGFjaXR5OiAwLjNcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuNDVcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuNjVcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuODVcbn0sIHtcbiAgaW5kZXg6IDQsXG4gIG9wYWNpdHk6IDAuOVxufSwge1xuICBpbmRleDogMyxcbiAgb3BhY2l0eTogMC45NVxufSwge1xuICBpbmRleDogMixcbiAgb3BhY2l0eTogMC45N1xufSwge1xuICBpbmRleDogMSxcbiAgb3BhY2l0eTogMC45OFxufV07IC8vIFdyYXBwZXIgZnVuY3Rpb24gcG9ydGVkIGZyb20gVGlueUNvbG9yLnByb3RvdHlwZS50b0hzdlxuLy8gS2VlcCBpdCBoZXJlIGJlY2F1c2Ugb2YgYGhzdi5oICogMzYwYFxuXG5mdW5jdGlvbiB0b0hzdihfcmVmKSB7XG4gIHZhciByID0gX3JlZi5yLFxuICAgICAgZyA9IF9yZWYuZyxcbiAgICAgIGIgPSBfcmVmLmI7XG4gIHZhciBoc3YgPSByZ2JUb0hzdihyLCBnLCBiKTtcbiAgcmV0dXJuIHtcbiAgICBoOiBoc3YuaCAqIDM2MCxcbiAgICBzOiBoc3YucyxcbiAgICB2OiBoc3YudlxuICB9O1xufSAvLyBXcmFwcGVyIGZ1bmN0aW9uIHBvcnRlZCBmcm9tIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXhTdHJpbmdcbi8vIEtlZXAgaXQgaGVyZSBiZWNhdXNlIG9mIHRoZSBwcmVmaXggYCNgXG5cblxuZnVuY3Rpb24gdG9IZXgoX3JlZjIpIHtcbiAgdmFyIHIgPSBfcmVmMi5yLFxuICAgICAgZyA9IF9yZWYyLmcsXG4gICAgICBiID0gX3JlZjIuYjtcbiAgcmV0dXJuIFwiI1wiLmNvbmNhdChyZ2JUb0hleChyLCBnLCBiLCBmYWxzZSkpO1xufSAvLyBXcmFwcGVyIGZ1bmN0aW9uIHBvcnRlZCBmcm9tIFRpbnlDb2xvci5wcm90b3R5cGUubWl4LCBub3QgdHJlZXNoYWthYmxlLlxuLy8gQW1vdW50IGluIHJhbmdlIFswLCAxXVxuLy8gQXNzdW1lIGNvbG9yMSAmIGNvbG9yMiBoYXMgbm8gYWxwaGEsIHNpbmNlIHRoZSBmb2xsb3dpbmcgc3JjIGNvZGUgZGlkIHNvLlxuXG5cbmZ1bmN0aW9uIG1peChyZ2IxLCByZ2IyLCBhbW91bnQpIHtcbiAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG4gIHZhciByZ2IgPSB7XG4gICAgcjogKHJnYjIuciAtIHJnYjEucikgKiBwICsgcmdiMS5yLFxuICAgIGc6IChyZ2IyLmcgLSByZ2IxLmcpICogcCArIHJnYjEuZyxcbiAgICBiOiAocmdiMi5iIC0gcmdiMS5iKSAqIHAgKyByZ2IxLmJcbiAgfTtcbiAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIGh1ZTsgLy8g5qC55o2u6Imy55u45LiN5ZCM77yM6Imy55u46L2s5ZCR5LiN5ZCMXG5cbiAgaWYgKE1hdGgucm91bmQoaHN2LmgpID49IDYwICYmIE1hdGgucm91bmQoaHN2LmgpIDw9IDI0MCkge1xuICAgIGh1ZSA9IGxpZ2h0ID8gTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaSA6IE1hdGgucm91bmQoaHN2LmgpICsgaHVlU3RlcCAqIGk7XG4gIH0gZWxzZSB7XG4gICAgaHVlID0gbGlnaHQgPyBNYXRoLnJvdW5kKGhzdi5oKSArIGh1ZVN0ZXAgKiBpIDogTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaTtcbiAgfVxuXG4gIGlmIChodWUgPCAwKSB7XG4gICAgaHVlICs9IDM2MDtcbiAgfSBlbHNlIGlmIChodWUgPj0gMzYwKSB7XG4gICAgaHVlIC09IDM2MDtcbiAgfVxuXG4gIHJldHVybiBodWU7XG59XG5cbmZ1bmN0aW9uIGdldFNhdHVyYXRpb24oaHN2LCBpLCBsaWdodCkge1xuICAvLyBncmV5IGNvbG9yIGRvbid0IGNoYW5nZSBzYXR1cmF0aW9uXG4gIGlmIChoc3YuaCA9PT0gMCAmJiBoc3YucyA9PT0gMCkge1xuICAgIHJldHVybiBoc3YucztcbiAgfVxuXG4gIHZhciBzYXR1cmF0aW9uO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyAtIHNhdHVyYXRpb25TdGVwICogaTtcbiAgfSBlbHNlIGlmIChpID09PSBkYXJrQ29sb3JDb3VudCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwO1xuICB9IGVsc2Uge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwMiAqIGk7XG4gIH0gLy8g6L6555WM5YC85L+u5q2jXG5cblxuICBpZiAoc2F0dXJhdGlvbiA+IDEpIHtcbiAgICBzYXR1cmF0aW9uID0gMTtcbiAgfSAvLyDnrKzkuIDmoLznmoQgcyDpmZDliLblnKggMC4wNi0wLjEg5LmL6Ze0XG5cblxuICBpZiAobGlnaHQgJiYgaSA9PT0gbGlnaHRDb2xvckNvdW50ICYmIHNhdHVyYXRpb24gPiAwLjEpIHtcbiAgICBzYXR1cmF0aW9uID0gMC4xO1xuICB9XG5cbiAgaWYgKHNhdHVyYXRpb24gPCAwLjA2KSB7XG4gICAgc2F0dXJhdGlvbiA9IDAuMDY7XG4gIH1cblxuICByZXR1cm4gTnVtYmVyKHNhdHVyYXRpb24udG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIHZhbHVlO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHZhbHVlID0gaHN2LnYgKyBicmlnaHRuZXNzU3RlcDEgKiBpO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gaHN2LnYgLSBicmlnaHRuZXNzU3RlcDIgKiBpO1xuICB9XG5cbiAgaWYgKHZhbHVlID4gMSkge1xuICAgIHZhbHVlID0gMTtcbiAgfVxuXG4gIHJldHVybiBOdW1iZXIodmFsdWUudG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKGNvbG9yKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhdHRlcm5zID0gW107XG4gIHZhciBwQ29sb3IgPSBpbnB1dFRvUkdCKGNvbG9yKTtcblxuICBmb3IgKHZhciBpID0gbGlnaHRDb2xvckNvdW50OyBpID4gMDsgaSAtPSAxKSB7XG4gICAgdmFyIGhzdiA9IHRvSHN2KHBDb2xvcik7XG4gICAgdmFyIGNvbG9yU3RyaW5nID0gdG9IZXgoaW5wdXRUb1JHQih7XG4gICAgICBoOiBnZXRIdWUoaHN2LCBpLCB0cnVlKSxcbiAgICAgIHM6IGdldFNhdHVyYXRpb24oaHN2LCBpLCB0cnVlKSxcbiAgICAgIHY6IGdldFZhbHVlKGhzdiwgaSwgdHJ1ZSlcbiAgICB9KSk7XG4gICAgcGF0dGVybnMucHVzaChjb2xvclN0cmluZyk7XG4gIH1cblxuICBwYXR0ZXJucy5wdXNoKHRvSGV4KHBDb2xvcikpO1xuXG4gIGZvciAodmFyIF9pID0gMTsgX2kgPD0gZGFya0NvbG9yQ291bnQ7IF9pICs9IDEpIHtcbiAgICB2YXIgX2hzdiA9IHRvSHN2KHBDb2xvcik7XG5cbiAgICB2YXIgX2NvbG9yU3RyaW5nID0gdG9IZXgoaW5wdXRUb1JHQih7XG4gICAgICBoOiBnZXRIdWUoX2hzdiwgX2kpLFxuICAgICAgczogZ2V0U2F0dXJhdGlvbihfaHN2LCBfaSksXG4gICAgICB2OiBnZXRWYWx1ZShfaHN2LCBfaSlcbiAgICB9KSk7XG5cbiAgICBwYXR0ZXJucy5wdXNoKF9jb2xvclN0cmluZyk7XG4gIH0gLy8gZGFyayB0aGVtZSBwYXR0ZXJuc1xuXG5cbiAgaWYgKG9wdHMudGhlbWUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiBkYXJrQ29sb3JNYXAubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjMuaW5kZXgsXG4gICAgICAgICAgb3BhY2l0eSA9IF9yZWYzLm9wYWNpdHk7XG4gICAgICB2YXIgZGFya0NvbG9yU3RyaW5nID0gdG9IZXgobWl4KGlucHV0VG9SR0Iob3B0cy5iYWNrZ3JvdW5kQ29sb3IgfHwgJyMxNDE0MTQnKSwgaW5wdXRUb1JHQihwYXR0ZXJuc1tpbmRleF0pLCBvcGFjaXR5ICogMTAwKSk7XG4gICAgICByZXR1cm4gZGFya0NvbG9yU3RyaW5nO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhdHRlcm5zO1xufVxuXG52YXIgcHJlc2V0UHJpbWFyeUNvbG9ycyA9IHtcbiAgcmVkOiAnI0Y1MjIyRCcsXG4gIHZvbGNhbm86ICcjRkE1NDFDJyxcbiAgb3JhbmdlOiAnI0ZBOEMxNicsXG4gIGdvbGQ6ICcjRkFBRDE0JyxcbiAgeWVsbG93OiAnI0ZBREIxNCcsXG4gIGxpbWU6ICcjQTBEOTExJyxcbiAgZ3JlZW46ICcjNTJDNDFBJyxcbiAgY3lhbjogJyMxM0MyQzInLFxuICBibHVlOiAnIzE4OTBGRicsXG4gIGdlZWtibHVlOiAnIzJGNTRFQicsXG4gIHB1cnBsZTogJyM3MjJFRDEnLFxuICBtYWdlbnRhOiAnI0VCMkY5NicsXG4gIGdyZXk6ICcjNjY2NjY2J1xufTtcbnZhciBwcmVzZXRQYWxldHRlcyA9IHt9O1xudmFyIHByZXNldERhcmtQYWxldHRlcyA9IHt9O1xuT2JqZWN0LmtleXMocHJlc2V0UHJpbWFyeUNvbG9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIHByZXNldFBhbGV0dGVzW2tleV0gPSBnZW5lcmF0ZShwcmVzZXRQcmltYXJ5Q29sb3JzW2tleV0pO1xuICBwcmVzZXRQYWxldHRlc1trZXldLnByaW1hcnkgPSBwcmVzZXRQYWxldHRlc1trZXldWzVdOyAvLyBkYXJrIHByZXNldFBhbGV0dGVzXG5cbiAgcHJlc2V0RGFya1BhbGV0dGVzW2tleV0gPSBnZW5lcmF0ZShwcmVzZXRQcmltYXJ5Q29sb3JzW2tleV0sIHtcbiAgICB0aGVtZTogJ2RhcmsnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyMxNDE0MTQnXG4gIH0pO1xuICBwcmVzZXREYXJrUGFsZXR0ZXNba2V5XS5wcmltYXJ5ID0gcHJlc2V0RGFya1BhbGV0dGVzW2tleV1bNV07XG59KTtcbnZhciByZWQgPSBwcmVzZXRQYWxldHRlcy5yZWQ7XG52YXIgdm9sY2FubyA9IHByZXNldFBhbGV0dGVzLnZvbGNhbm87XG52YXIgZ29sZCA9IHByZXNldFBhbGV0dGVzLmdvbGQ7XG52YXIgb3JhbmdlID0gcHJlc2V0UGFsZXR0ZXMub3JhbmdlO1xudmFyIHllbGxvdyA9IHByZXNldFBhbGV0dGVzLnllbGxvdztcbnZhciBsaW1lID0gcHJlc2V0UGFsZXR0ZXMubGltZTtcbnZhciBncmVlbiA9IHByZXNldFBhbGV0dGVzLmdyZWVuO1xudmFyIGN5YW4gPSBwcmVzZXRQYWxldHRlcy5jeWFuO1xudmFyIGJsdWUgPSBwcmVzZXRQYWxldHRlcy5ibHVlO1xudmFyIGdlZWtibHVlID0gcHJlc2V0UGFsZXR0ZXMuZ2Vla2JsdWU7XG52YXIgcHVycGxlID0gcHJlc2V0UGFsZXR0ZXMucHVycGxlO1xudmFyIG1hZ2VudGEgPSBwcmVzZXRQYWxldHRlcy5tYWdlbnRhO1xudmFyIGdyZXkgPSBwcmVzZXRQYWxldHRlcy5ncmV5O1xuXG5leHBvcnQgeyBibHVlLCBjeWFuLCBnZWVrYmx1ZSwgZ2VuZXJhdGUsIGdvbGQsIGdyZWVuLCBncmV5LCBsaW1lLCBtYWdlbnRhLCBvcmFuZ2UsIHByZXNldERhcmtQYWxldHRlcywgcHJlc2V0UGFsZXR0ZXMsIHByZXNldFByaW1hcnlDb2xvcnMsIHB1cnBsZSwgcmVkLCB2b2xjYW5vLCB5ZWxsb3cgfTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWhhbWFzMTAvY3NzLWNvbG9yLW5hbWVzL2Jsb2IvbWFzdGVyL2Nzcy1jb2xvci1uYW1lcy5qc29uXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHZhciBuYW1lcyA9IHtcbiAgICBhbGljZWJsdWU6ICcjZjBmOGZmJyxcbiAgICBhbnRpcXVld2hpdGU6ICcjZmFlYmQ3JyxcbiAgICBhcXVhOiAnIzAwZmZmZicsXG4gICAgYXF1YW1hcmluZTogJyM3ZmZmZDQnLFxuICAgIGF6dXJlOiAnI2YwZmZmZicsXG4gICAgYmVpZ2U6ICcjZjVmNWRjJyxcbiAgICBiaXNxdWU6ICcjZmZlNGM0JyxcbiAgICBibGFjazogJyMwMDAwMDAnLFxuICAgIGJsYW5jaGVkYWxtb25kOiAnI2ZmZWJjZCcsXG4gICAgYmx1ZTogJyMwMDAwZmYnLFxuICAgIGJsdWV2aW9sZXQ6ICcjOGEyYmUyJyxcbiAgICBicm93bjogJyNhNTJhMmEnLFxuICAgIGJ1cmx5d29vZDogJyNkZWI4ODcnLFxuICAgIGNhZGV0Ymx1ZTogJyM1ZjllYTAnLFxuICAgIGNoYXJ0cmV1c2U6ICcjN2ZmZjAwJyxcbiAgICBjaG9jb2xhdGU6ICcjZDI2OTFlJyxcbiAgICBjb3JhbDogJyNmZjdmNTAnLFxuICAgIGNvcm5mbG93ZXJibHVlOiAnIzY0OTVlZCcsXG4gICAgY29ybnNpbGs6ICcjZmZmOGRjJyxcbiAgICBjcmltc29uOiAnI2RjMTQzYycsXG4gICAgY3lhbjogJyMwMGZmZmYnLFxuICAgIGRhcmtibHVlOiAnIzAwMDA4YicsXG4gICAgZGFya2N5YW46ICcjMDA4YjhiJyxcbiAgICBkYXJrZ29sZGVucm9kOiAnI2I4ODYwYicsXG4gICAgZGFya2dyYXk6ICcjYTlhOWE5JyxcbiAgICBkYXJrZ3JlZW46ICcjMDA2NDAwJyxcbiAgICBkYXJrZ3JleTogJyNhOWE5YTknLFxuICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgIGRhcmttYWdlbnRhOiAnIzhiMDA4YicsXG4gICAgZGFya29saXZlZ3JlZW46ICcjNTU2YjJmJyxcbiAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgZGFya29yY2hpZDogJyM5OTMyY2MnLFxuICAgIGRhcmtyZWQ6ICcjOGIwMDAwJyxcbiAgICBkYXJrc2FsbW9uOiAnI2U5OTY3YScsXG4gICAgZGFya3NlYWdyZWVuOiAnIzhmYmM4ZicsXG4gICAgZGFya3NsYXRlYmx1ZTogJyM0ODNkOGInLFxuICAgIGRhcmtzbGF0ZWdyYXk6ICcjMmY0ZjRmJyxcbiAgICBkYXJrc2xhdGVncmV5OiAnIzJmNGY0ZicsXG4gICAgZGFya3R1cnF1b2lzZTogJyMwMGNlZDEnLFxuICAgIGRhcmt2aW9sZXQ6ICcjOTQwMGQzJyxcbiAgICBkZWVwcGluazogJyNmZjE0OTMnLFxuICAgIGRlZXBza3libHVlOiAnIzAwYmZmZicsXG4gICAgZGltZ3JheTogJyM2OTY5NjknLFxuICAgIGRpbWdyZXk6ICcjNjk2OTY5JyxcbiAgICBkb2RnZXJibHVlOiAnIzFlOTBmZicsXG4gICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgZmxvcmFsd2hpdGU6ICcjZmZmYWYwJyxcbiAgICBmb3Jlc3RncmVlbjogJyMyMjhiMjInLFxuICAgIGZ1Y2hzaWE6ICcjZmYwMGZmJyxcbiAgICBnYWluc2Jvcm86ICcjZGNkY2RjJyxcbiAgICBnaG9zdHdoaXRlOiAnI2Y4ZjhmZicsXG4gICAgZ29sZGVucm9kOiAnI2RhYTUyMCcsXG4gICAgZ29sZDogJyNmZmQ3MDAnLFxuICAgIGdyYXk6ICcjODA4MDgwJyxcbiAgICBncmVlbjogJyMwMDgwMDAnLFxuICAgIGdyZWVueWVsbG93OiAnI2FkZmYyZicsXG4gICAgZ3JleTogJyM4MDgwODAnLFxuICAgIGhvbmV5ZGV3OiAnI2YwZmZmMCcsXG4gICAgaG90cGluazogJyNmZjY5YjQnLFxuICAgIGluZGlhbnJlZDogJyNjZDVjNWMnLFxuICAgIGluZGlnbzogJyM0YjAwODInLFxuICAgIGl2b3J5OiAnI2ZmZmZmMCcsXG4gICAga2hha2k6ICcjZjBlNjhjJyxcbiAgICBsYXZlbmRlcmJsdXNoOiAnI2ZmZjBmNScsXG4gICAgbGF2ZW5kZXI6ICcjZTZlNmZhJyxcbiAgICBsYXduZ3JlZW46ICcjN2NmYzAwJyxcbiAgICBsZW1vbmNoaWZmb246ICcjZmZmYWNkJyxcbiAgICBsaWdodGJsdWU6ICcjYWRkOGU2JyxcbiAgICBsaWdodGNvcmFsOiAnI2YwODA4MCcsXG4gICAgbGlnaHRjeWFuOiAnI2UwZmZmZicsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6ICcjZmFmYWQyJyxcbiAgICBsaWdodGdyYXk6ICcjZDNkM2QzJyxcbiAgICBsaWdodGdyZWVuOiAnIzkwZWU5MCcsXG4gICAgbGlnaHRncmV5OiAnI2QzZDNkMycsXG4gICAgbGlnaHRwaW5rOiAnI2ZmYjZjMScsXG4gICAgbGlnaHRzYWxtb246ICcjZmZhMDdhJyxcbiAgICBsaWdodHNlYWdyZWVuOiAnIzIwYjJhYScsXG4gICAgbGlnaHRza3libHVlOiAnIzg3Y2VmYScsXG4gICAgbGlnaHRzbGF0ZWdyYXk6ICcjNzc4ODk5JyxcbiAgICBsaWdodHNsYXRlZ3JleTogJyM3Nzg4OTknLFxuICAgIGxpZ2h0c3RlZWxibHVlOiAnI2IwYzRkZScsXG4gICAgbGlnaHR5ZWxsb3c6ICcjZmZmZmUwJyxcbiAgICBsaW1lOiAnIzAwZmYwMCcsXG4gICAgbGltZWdyZWVuOiAnIzMyY2QzMicsXG4gICAgbGluZW46ICcjZmFmMGU2JyxcbiAgICBtYWdlbnRhOiAnI2ZmMDBmZicsXG4gICAgbWFyb29uOiAnIzgwMDAwMCcsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgIG1lZGl1bWJsdWU6ICcjMDAwMGNkJyxcbiAgICBtZWRpdW1vcmNoaWQ6ICcjYmE1NWQzJyxcbiAgICBtZWRpdW1wdXJwbGU6ICcjOTM3MGRiJyxcbiAgICBtZWRpdW1zZWFncmVlbjogJyMzY2IzNzEnLFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogJyM3YjY4ZWUnLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAnIzAwZmE5YScsXG4gICAgbWVkaXVtdHVycXVvaXNlOiAnIzQ4ZDFjYycsXG4gICAgbWVkaXVtdmlvbGV0cmVkOiAnI2M3MTU4NScsXG4gICAgbWlkbmlnaHRibHVlOiAnIzE5MTk3MCcsXG4gICAgbWludGNyZWFtOiAnI2Y1ZmZmYScsXG4gICAgbWlzdHlyb3NlOiAnI2ZmZTRlMScsXG4gICAgbW9jY2FzaW46ICcjZmZlNGI1JyxcbiAgICBuYXZham93aGl0ZTogJyNmZmRlYWQnLFxuICAgIG5hdnk6ICcjMDAwMDgwJyxcbiAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgb2xpdmU6ICcjODA4MDAwJyxcbiAgICBvbGl2ZWRyYWI6ICcjNmI4ZTIzJyxcbiAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICBvcmFuZ2VyZWQ6ICcjZmY0NTAwJyxcbiAgICBvcmNoaWQ6ICcjZGE3MGQ2JyxcbiAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgcGFsZWdyZWVuOiAnIzk4ZmI5OCcsXG4gICAgcGFsZXR1cnF1b2lzZTogJyNhZmVlZWUnLFxuICAgIHBhbGV2aW9sZXRyZWQ6ICcjZGI3MDkzJyxcbiAgICBwYXBheWF3aGlwOiAnI2ZmZWZkNScsXG4gICAgcGVhY2hwdWZmOiAnI2ZmZGFiOScsXG4gICAgcGVydTogJyNjZDg1M2YnLFxuICAgIHBpbms6ICcjZmZjMGNiJyxcbiAgICBwbHVtOiAnI2RkYTBkZCcsXG4gICAgcG93ZGVyYmx1ZTogJyNiMGUwZTYnLFxuICAgIHB1cnBsZTogJyM4MDAwODAnLFxuICAgIHJlYmVjY2FwdXJwbGU6ICcjNjYzMzk5JyxcbiAgICByZWQ6ICcjZmYwMDAwJyxcbiAgICByb3N5YnJvd246ICcjYmM4ZjhmJyxcbiAgICByb3lhbGJsdWU6ICcjNDE2OWUxJyxcbiAgICBzYWRkbGVicm93bjogJyM4YjQ1MTMnLFxuICAgIHNhbG1vbjogJyNmYTgwNzInLFxuICAgIHNhbmR5YnJvd246ICcjZjRhNDYwJyxcbiAgICBzZWFncmVlbjogJyMyZThiNTcnLFxuICAgIHNlYXNoZWxsOiAnI2ZmZjVlZScsXG4gICAgc2llbm5hOiAnI2EwNTIyZCcsXG4gICAgc2lsdmVyOiAnI2MwYzBjMCcsXG4gICAgc2t5Ymx1ZTogJyM4N2NlZWInLFxuICAgIHNsYXRlYmx1ZTogJyM2YTVhY2QnLFxuICAgIHNsYXRlZ3JheTogJyM3MDgwOTAnLFxuICAgIHNsYXRlZ3JleTogJyM3MDgwOTAnLFxuICAgIHNub3c6ICcjZmZmYWZhJyxcbiAgICBzcHJpbmdncmVlbjogJyMwMGZmN2YnLFxuICAgIHN0ZWVsYmx1ZTogJyM0NjgyYjQnLFxuICAgIHRhbjogJyNkMmI0OGMnLFxuICAgIHRlYWw6ICcjMDA4MDgwJyxcbiAgICB0aGlzdGxlOiAnI2Q4YmZkOCcsXG4gICAgdG9tYXRvOiAnI2ZmNjM0NycsXG4gICAgdHVycXVvaXNlOiAnIzQwZTBkMCcsXG4gICAgdmlvbGV0OiAnI2VlODJlZScsXG4gICAgd2hlYXQ6ICcjZjVkZWIzJyxcbiAgICB3aGl0ZTogJyNmZmZmZmYnLFxuICAgIHdoaXRlc21va2U6ICcjZjVmNWY1JyxcbiAgICB5ZWxsb3c6ICcjZmZmZjAwJyxcbiAgICB5ZWxsb3dncmVlbjogJyM5YWNkMzInLFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gIHJldHVybiBhcnIyO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xudmFyIExvY2FsZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuZXhwb3J0IGRlZmF1bHQgTG9jYWxlQ29udGV4dDsiLCJpbXBvcnQgeyB0dXBsZSB9IGZyb20gJy4vdHlwZSc7XG5leHBvcnQgdmFyIFByZXNldFN0YXR1c0NvbG9yVHlwZXMgPSB0dXBsZSgnc3VjY2VzcycsICdwcm9jZXNzaW5nJywgJ2Vycm9yJywgJ2RlZmF1bHQnLCAnd2FybmluZycpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCB2YXIgUHJlc2V0Q29sb3JUeXBlcyA9IHR1cGxlKCdwaW5rJywgJ3JlZCcsICd5ZWxsb3cnLCAnb3JhbmdlJywgJ2N5YW4nLCAnZ3JlZW4nLCAnYmx1ZScsICdwdXJwbGUnLCAnZ2Vla2JsdWUnLCAnbWFnZW50YScsICd2b2xjYW5vJywgJ2dvbGQnLCAnbGltZScpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgbmF0aXZlU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSAkQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyAkQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZXhlY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUuZXhlY1xuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGBTeW1ib2wudG9QcmltaXRpdmVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUoKTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIG5hdmlnYXRvciAhPSAndW5kZWZpbmVkJyAmJiBTdHJpbmcobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi9idXR0b24nO1xuZXhwb3J0IGRlZmF1bHQgQnV0dG9uOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1lbW8oZ2V0VmFsdWUsIGNvbmRpdGlvbiwgc2hvdWxkVXBkYXRlKSB7XG4gIHZhciBjYWNoZVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGlmICghKCd2YWx1ZScgaW4gY2FjaGVSZWYuY3VycmVudCkgfHwgc2hvdWxkVXBkYXRlKGNhY2hlUmVmLmN1cnJlbnQuY29uZGl0aW9uLCBjb25kaXRpb24pKSB7XG4gICAgY2FjaGVSZWYuY3VycmVudC52YWx1ZSA9IGdldFZhbHVlKCk7XG4gICAgY2FjaGVSZWYuY3VycmVudC5jb25kaXRpb24gPSBjb25kaXRpb247XG4gIH1cbiAgcmV0dXJuIGNhY2hlUmVmLmN1cnJlbnQudmFsdWU7XG59IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2xvc2VPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwiZmlsbC1ydWxlXCI6IFwiZXZlbm9kZFwiLCBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTc5OS44NiAxNjYuMzFjLjAyIDAgLjA0LjAyLjA4LjA2bDU3LjY5IDU3LjdjLjA0LjAzLjA1LjA1LjA2LjA4YS4xMi4xMiAwIDAxMCAuMDZjMCAuMDMtLjAyLjA1LS4wNi4wOUw1NjkuOTMgNTEybDI4Ny43IDI4Ny43Yy4wNC4wNC4wNS4wNi4wNi4wOWEuMTIuMTIgMCAwMTAgLjA3YzAgLjAyLS4wMi4wNC0uMDYuMDhsLTU3LjcgNTcuNjljLS4wMy4wNC0uMDUuMDUtLjA3LjA2YS4xMi4xMiAwIDAxLS4wNyAwYy0uMDMgMC0uMDUtLjAyLS4wOS0uMDZMNTEyIDU2OS45M2wtMjg3LjcgMjg3LjdjLS4wNC4wNC0uMDYuMDUtLjA5LjA2YS4xMi4xMiAwIDAxLS4wNyAwYy0uMDIgMC0uMDQtLjAyLS4wOC0uMDZsLTU3LjY5LTU3LjdjLS4wNC0uMDMtLjA1LS4wNS0uMDYtLjA3YS4xMi4xMiAwIDAxMC0uMDdjMC0uMDMuMDItLjA1LjA2LS4wOUw0NTQuMDcgNTEybC0yODcuNy0yODcuN2MtLjA0LS4wNC0uMDUtLjA2LS4wNi0uMDlhLjEyLjEyIDAgMDEwLS4wN2MwLS4wMi4wMi0uMDQuMDYtLjA4bDU3LjctNTcuNjljLjAzLS4wNC4wNS0uMDUuMDctLjA2YS4xMi4xMiAwIDAxLjA3IDBjLjAzIDAgLjA1LjAyLjA5LjA2TDUxMiA0NTQuMDdsMjg3LjctMjg3LjdjLjA0LS4wNC4wNi0uMDUuMDktLjA2YS4xMi4xMiAwIDAxLjA3IDB6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjbG9zZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENsb3NlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIENsb3NlT3V0bGluZWQgPSBmdW5jdGlvbiBDbG9zZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBDbG9zZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5DbG9zZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0Nsb3NlT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ2xvc2VPdXRsaW5lZCk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kIC0tIHNhZmVcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gISRPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG59IDogJE9iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgRVhJU1RTID0gaGFzT3duKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpO1xuLy8gYWRkaXRpb25hbCBwcm90ZWN0aW9uIGZyb20gbWluaWZpZWQgLyBtYW5nbGVkIC8gZHJvcHBlZCBmdW5jdGlvbiBuYW1lc1xudmFyIFBST1BFUiA9IEVYSVNUUyAmJiAoZnVuY3Rpb24gc29tZXRoaW5nKCkgeyAvKiBlbXB0eSAqLyB9KS5uYW1lID09PSAnc29tZXRoaW5nJztcbnZhciBDT05GSUdVUkFCTEUgPSBFWElTVFMgJiYgKCFERVNDUklQVE9SUyB8fCAoREVTQ1JJUFRPUlMgJiYgZ2V0RGVzY3JpcHRvcihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKS5jb25maWd1cmFibGUpKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVYSVNUUzogRVhJU1RTLFxuICBQUk9QRVI6IFBST1BFUixcbiAgQ09ORklHVVJBQkxFOiBDT05GSUdVUkFCTEVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ0FycmF5Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIGVtcHR5ID0gW107XG52YXIgY29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi87XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMpO1xudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAuZXhlYyhub29wKTtcblxudmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdHJ1Y3Qobm9vcCwgZW1wdHksIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHN3aXRjaCAoY2xhc3NvZihhcmd1bWVudCkpIHtcbiAgICBjYXNlICdBc3luY0Z1bmN0aW9uJzpcbiAgICBjYXNlICdHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6IHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXRcbiAgICAvLyBgRnVuY3Rpb24jdG9TdHJpbmdgIHRocm93cyBvbiBzb21lIGJ1aWx0LWl0IGZ1bmN0aW9uIGluIHNvbWUgbGVnYWN5IGVuZ2luZXNcbiAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGVkO1xuICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfSlcbiAgICB8fCBjYWxsZWQ7XG59KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCA/IGNhbGwuYmluZChhcHBseSkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGFwcGx5LCBhcmd1bWVudHMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoW10uc2xpY2UpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuYXN5bmNpdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdldEJ1aWx0SW4oJ1N5bWJvbCcpLCAnU3ltYm9sJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIEpTT05bQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBNYXRoW0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciB1bmN1cnJ5VGhpc0FjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1hY2Nlc3NvcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpc0FjY2Vzc29yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nLCAnc2V0Jyk7XG4gICAgc2V0dGVyKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT09ICdwcm9jZXNzJztcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJ3Qgd29yayBmb3IgLyguPyk/L1xuICAgICAgY2FsbChuYXRpdmVSZXBsYWNlLCBtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoICYmIGdyb3Vwcykge1xuICAgICAgbWF0Y2guZ3JvdXBzID0gb2JqZWN0ID0gY3JlYXRlKG51bGwpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBncm91cCA9IGdyb3Vwc1tpXTtcbiAgICAgICAgb2JqZWN0W2dyb3VwWzBdXSA9IG1hdGNoW2dyb3VwWzFdXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwiLi93YXJuaW5nXCI7XG5cbi8qKlxuICogRGVlcGx5IGNvbXBhcmVzIHR3byBvYmplY3QgbGl0ZXJhbHMuXG4gKiBAcGFyYW0gb2JqMSBvYmplY3QgMVxuICogQHBhcmFtIG9iajIgb2JqZWN0IDJcbiAqIEBwYXJhbSBzaGFsbG93IHNoYWxsb3cgY29tcGFyZVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbChvYmoxLCBvYmoyKSB7XG4gIHZhciBzaGFsbG93ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvcHVsbC81OTc5L2ZpbGVzI2RpZmYtZmRlNzE0NTA1MGM0N2NjM2EzMDY4NTZlZmQ1ZjljMzAxNmU4NmU4NTlkZTlhZmJkMDJjODc5YmU1MDY3ZTU4ZlxuICB2YXIgcmVmU2V0ID0gbmV3IFNldCgpO1xuICBmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICAgIHZhciBsZXZlbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICB2YXIgY2lyY3VsYXIgPSByZWZTZXQuaGFzKGEpO1xuICAgIHdhcm5pbmcoIWNpcmN1bGFyLCAnV2FybmluZzogVGhlcmUgbWF5IGJlIGNpcmN1bGFyIHJlZmVyZW5jZXMnKTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc2hhbGxvdyAmJiBsZXZlbCA+IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmVmU2V0LmFkZChhKTtcbiAgICB2YXIgbmV3TGV2ZWwgPSBsZXZlbCArIDE7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShiKSB8fCBhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghZGVlcEVxdWFsKGFbaV0sIGJbaV0sIG5ld0xldmVsKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChhICYmIGIgJiYgX3R5cGVvZihhKSA9PT0gJ29iamVjdCcgJiYgX3R5cGVvZihiKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4ga2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG5ld0xldmVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBvdGhlclxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGVlcEVxdWFsKG9iajEsIG9iajIpO1xufVxuZXhwb3J0IGRlZmF1bHQgaXNFcXVhbDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJnZXRDb250YWluZXJcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHVubW91bnQgfSBmcm9tIFwicmMtdXRpbC9lcy9SZWFjdC9yZW5kZXJcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgQ1NTTW90aW9uTGlzdCB9IGZyb20gJ3JjLW1vdGlvbic7XG5pbXBvcnQgTm90aWNlIGZyb20gJy4vTm90aWNlJztcbmltcG9ydCBfdXNlTm90aWZpY2F0aW9uIGZyb20gJy4vdXNlTm90aWZpY2F0aW9uJztcbnZhciBzZWVkID0gMDtcbnZhciBub3cgPSBEYXRlLm5vdygpO1xuZnVuY3Rpb24gZ2V0VXVpZCgpIHtcbiAgdmFyIGlkID0gc2VlZDtcbiAgc2VlZCArPSAxO1xuICByZXR1cm4gXCJyY05vdGlmaWNhdGlvbl9cIi5jb25jYXQobm93LCBcIl9cIikuY29uY2F0KGlkKTtcbn1cbnZhciBOb3RpZmljYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5vdGlmaWNhdGlvbiwgX0NvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTm90aWZpY2F0aW9uKTtcbiAgZnVuY3Rpb24gTm90aWZpY2F0aW9uKCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aWZpY2F0aW9uKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5vdGljZXM6IFtdXG4gICAgfTtcbiAgICBfdGhpcy5ob29rUmVmcyA9IG5ldyBNYXAoKTtcbiAgICBfdGhpcy5hZGQgPSBmdW5jdGlvbiAob3JpZ2luTm90aWNlLCBob2xkZXJDYWxsYmFjaykge1xuICAgICAgdmFyIF9vcmlnaW5Ob3RpY2Uka2V5O1xuICAgICAgdmFyIGtleSA9IChfb3JpZ2luTm90aWNlJGtleSA9IG9yaWdpbk5vdGljZS5rZXkpICE9PSBudWxsICYmIF9vcmlnaW5Ob3RpY2Uka2V5ICE9PSB2b2lkIDAgPyBfb3JpZ2luTm90aWNlJGtleSA6IGdldFV1aWQoKTtcbiAgICAgIHZhciBub3RpY2UgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9yaWdpbk5vdGljZSksIHt9LCB7XG4gICAgICAgIGtleToga2V5XG4gICAgICB9KTtcbiAgICAgIHZhciBtYXhDb3VudCA9IF90aGlzLnByb3BzLm1heENvdW50O1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgdmFyIG5vdGljZXMgPSBwcmV2aW91c1N0YXRlLm5vdGljZXM7XG4gICAgICAgIHZhciBub3RpY2VJbmRleCA9IG5vdGljZXMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIHYubm90aWNlLmtleTtcbiAgICAgICAgfSkuaW5kZXhPZihrZXkpO1xuICAgICAgICB2YXIgdXBkYXRlZE5vdGljZXMgPSBub3RpY2VzLmNvbmNhdCgpO1xuICAgICAgICBpZiAobm90aWNlSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdXBkYXRlZE5vdGljZXMuc3BsaWNlKG5vdGljZUluZGV4LCAxLCB7XG4gICAgICAgICAgICBub3RpY2U6IG5vdGljZSxcbiAgICAgICAgICAgIGhvbGRlckNhbGxiYWNrOiBob2xkZXJDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtYXhDb3VudCAmJiBub3RpY2VzLmxlbmd0aCA+PSBtYXhDb3VudCkge1xuICAgICAgICAgICAgLy8gWFhYLCB1c2Uga2V5IG9mIGZpcnN0IGl0ZW0gdG8gdXBkYXRlIG5ldyBhZGRlZCAobGV0IFJlYWN0IHRvIG1vdmUgZXhzaXRpbmdcbiAgICAgICAgICAgIC8vIGluc3RlYWQgb2YgcmVtb3ZlIGFuZCBtb3VudCkuIFNhbWUga2V5IHdhcyB1c2VkIGJlZm9yZSBmb3IgYm90aCBhKSBleHRlcm5hbFxuICAgICAgICAgICAgLy8gbWFudWFsIGNvbnRyb2wgYW5kIGIpIGludGVybmFsIHJlYWN0ICdrZXknIHByb3AgLCB3aGljaCBpcyBub3QgdGhhdCBnb29kLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAvLyB6b21iaWVKOiBOb3Qga25vdyB3aHkgdXNlIGB1cGRhdGVLZXlgLiBUaGlzIG1ha2VzIE5vdGljZSBpbmZpbml0ZSBsb29wIGluIGplc3QuXG4gICAgICAgICAgICAvLyBDaGFuZ2UgdG8gYHVwZGF0ZU1hcmtgIGZvciBjb21wYXJlIGluc3RlYWQuXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L25vdGlmaWNhdGlvbi9jb21taXQvMzIyOTllNmJlMzk2Zjk0MDQwYmZhODI1MTdlZWE5NDBkYjk0N2VjZVxuICAgICAgICAgICAgbm90aWNlLmtleSA9IHVwZGF0ZWROb3RpY2VzWzBdLm5vdGljZS5rZXk7XG4gICAgICAgICAgICBub3RpY2UudXBkYXRlTWFyayA9IGdldFV1aWQoKTtcbiAgICAgICAgICAgIC8vIHpvbWJpZUo6IFRoYXQncyB3aHkuIFVzZXIgbWF5IGNsb3NlIGJ5IGtleSBkaXJlY3RseS5cbiAgICAgICAgICAgIC8vIFdlIG5lZWQgcmVjb3JkIHRoaXMgYnV0IG5vdCByZS1yZW5kZXIgdG8gYXZvaWQgdXBwZXIgaXNzdWVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvbm90aWZpY2F0aW9uL2lzc3Vlcy8xMjlcbiAgICAgICAgICAgIG5vdGljZS51c2VyUGFzc0tleSA9IGtleTtcbiAgICAgICAgICAgIHVwZGF0ZWROb3RpY2VzLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZWROb3RpY2VzLnB1c2goe1xuICAgICAgICAgICAgbm90aWNlOiBub3RpY2UsXG4gICAgICAgICAgICBob2xkZXJDYWxsYmFjazogaG9sZGVyQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vdGljZXM6IHVwZGF0ZWROb3RpY2VzXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF90aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChyZW1vdmVLZXkpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBub3RpY2VzID0gX3JlZi5ub3RpY2VzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vdGljZXM6IG5vdGljZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIF9yZWYyJG5vdGljZSA9IF9yZWYyLm5vdGljZSxcbiAgICAgICAgICAgICAga2V5ID0gX3JlZjIkbm90aWNlLmtleSxcbiAgICAgICAgICAgICAgdXNlclBhc3NLZXkgPSBfcmVmMiRub3RpY2UudXNlclBhc3NLZXk7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkS2V5ID0gdXNlclBhc3NLZXkgIT09IG51bGwgJiYgdXNlclBhc3NLZXkgIT09IHZvaWQgMCA/IHVzZXJQYXNzS2V5IDoga2V5O1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZEtleSAhPT0gcmVtb3ZlS2V5O1xuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF90aGlzLm5vdGljZVByb3BzTWFwID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhOb3RpZmljYXRpb24sIFt7XG4gICAga2V5OiBcImdldFRyYW5zaXRpb25OYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25OYW1lKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb247XG4gICAgICB2YXIgdHJhbnNpdGlvbk5hbWUgPSB0aGlzLnByb3BzLnRyYW5zaXRpb25OYW1lO1xuICAgICAgaWYgKCF0cmFuc2l0aW9uTmFtZSAmJiBhbmltYXRpb24pIHtcbiAgICAgICAgdHJhbnNpdGlvbk5hbWUgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIG5vdGljZXMgPSB0aGlzLnN0YXRlLm5vdGljZXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMyLnByZWZpeENscyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2xvc2VJY29uID0gX3RoaXMkcHJvcHMyLmNsb3NlSWNvbixcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczIuc3R5bGU7XG4gICAgICB2YXIgbm90aWNlS2V5cyA9IFtdO1xuICAgICAgbm90aWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMywgaW5kZXgpIHtcbiAgICAgICAgdmFyIG5vdGljZSA9IF9yZWYzLm5vdGljZSxcbiAgICAgICAgICBob2xkZXJDYWxsYmFjayA9IF9yZWYzLmhvbGRlckNhbGxiYWNrO1xuICAgICAgICB2YXIgdXBkYXRlTWFyayA9IGluZGV4ID09PSBub3RpY2VzLmxlbmd0aCAtIDEgPyBub3RpY2UudXBkYXRlTWFyayA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGtleSA9IG5vdGljZS5rZXksXG4gICAgICAgICAgdXNlclBhc3NLZXkgPSBub3RpY2UudXNlclBhc3NLZXk7XG4gICAgICAgIHZhciBub3RpY2VQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICBjbG9zZUljb246IGNsb3NlSWNvblxuICAgICAgICB9LCBub3RpY2UpLCBub3RpY2UucHJvcHMpLCB7fSwge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIG5vdGljZUtleTogdXNlclBhc3NLZXkgfHwga2V5LFxuICAgICAgICAgIHVwZGF0ZU1hcms6IHVwZGF0ZU1hcmssXG4gICAgICAgICAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZShub3RpY2VLZXkpIHtcbiAgICAgICAgICAgIHZhciBfbm90aWNlJG9uQ2xvc2U7XG4gICAgICAgICAgICBfdGhpczIucmVtb3ZlKG5vdGljZUtleSk7XG4gICAgICAgICAgICAoX25vdGljZSRvbkNsb3NlID0gbm90aWNlLm9uQ2xvc2UpID09PSBudWxsIHx8IF9ub3RpY2Ukb25DbG9zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vdGljZSRvbkNsb3NlLmNhbGwobm90aWNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQ2xpY2s6IG5vdGljZS5vbkNsaWNrLFxuICAgICAgICAgIGNoaWxkcmVuOiBub3RpY2UuY29udGVudFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gR2l2ZSB0byBtb3Rpb25cbiAgICAgICAgbm90aWNlS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIF90aGlzMi5ub3RpY2VQcm9wc01hcFtrZXldID0ge1xuICAgICAgICAgIHByb3BzOiBub3RpY2VQcm9wcyxcbiAgICAgICAgICBob2xkZXJDYWxsYmFjazogaG9sZGVyQ2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb25MaXN0LCB7XG4gICAgICAgIGtleXM6IG5vdGljZUtleXMsXG4gICAgICAgIG1vdGlvbk5hbWU6IHRoaXMuZ2V0VHJhbnNpdGlvbk5hbWUoKSxcbiAgICAgICAgb25WaXNpYmxlQ2hhbmdlZDogZnVuY3Rpb24gb25WaXNpYmxlQ2hhbmdlZChjaGFuZ2VkVmlzaWJsZSwgX3JlZjQpIHtcbiAgICAgICAgICB2YXIga2V5ID0gX3JlZjQua2V5O1xuICAgICAgICAgIGlmICghY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpczIubm90aWNlUHJvcHNNYXBba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICB2YXIga2V5ID0gX3JlZjUua2V5LFxuICAgICAgICAgIG1vdGlvbkNsYXNzTmFtZSA9IF9yZWY1LmNsYXNzTmFtZSxcbiAgICAgICAgICBtb3Rpb25TdHlsZSA9IF9yZWY1LnN0eWxlLFxuICAgICAgICAgIHZpc2libGUgPSBfcmVmNS52aXNpYmxlO1xuICAgICAgICB2YXIgX3RoaXMyJG5vdGljZVByb3BzTWFwID0gX3RoaXMyLm5vdGljZVByb3BzTWFwW2tleV0sXG4gICAgICAgICAgbm90aWNlUHJvcHMgPSBfdGhpczIkbm90aWNlUHJvcHNNYXAucHJvcHMsXG4gICAgICAgICAgaG9sZGVyQ2FsbGJhY2sgPSBfdGhpczIkbm90aWNlUHJvcHNNYXAuaG9sZGVyQ2FsbGJhY2s7XG4gICAgICAgIGlmIChob2xkZXJDYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhtb3Rpb25DbGFzc05hbWUsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaG9vay1ob2xkZXJcIikpLFxuICAgICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIG1vdGlvblN0eWxlKSxcbiAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGRpdikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGRpdikge1xuICAgICAgICAgICAgICAgIF90aGlzMi5ob29rUmVmcy5zZXQoa2V5LCBkaXYpO1xuICAgICAgICAgICAgICAgIGhvbGRlckNhbGxiYWNrKGRpdiwgbm90aWNlUHJvcHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzMi5ob29rUmVmcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpY2UsIF9leHRlbmRzKHt9LCBub3RpY2VQcm9wcywge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhtb3Rpb25DbGFzc05hbWUsIG5vdGljZVByb3BzID09PSBudWxsIHx8IG5vdGljZVByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub3RpY2VQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1vdGlvblN0eWxlKSwgbm90aWNlUHJvcHMgPT09IG51bGwgfHwgbm90aWNlUHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vdGljZVByb3BzLnN0eWxlKSxcbiAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICAgIH0pKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcbn0oQ29tcG9uZW50KTtcbk5vdGlmaWNhdGlvbi5uZXdJbnN0YW5jZSA9IHZvaWQgMDtcbk5vdGlmaWNhdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLW5vdGlmaWNhdGlvbicsXG4gIGFuaW1hdGlvbjogJ2ZhZGUnLFxuICBzdHlsZToge1xuICAgIHRvcDogNjUsXG4gICAgbGVmdDogJzUwJSdcbiAgfVxufTtcbk5vdGlmaWNhdGlvbi5uZXdJbnN0YW5jZSA9IGZ1bmN0aW9uIG5ld05vdGlmaWNhdGlvbkluc3RhbmNlKHByb3BlcnRpZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBfcmVmNiA9IHByb3BlcnRpZXMgfHwge30sXG4gICAgZ2V0Q29udGFpbmVyID0gX3JlZjYuZ2V0Q29udGFpbmVyLFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY2LCBfZXhjbHVkZWQpO1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGlmIChnZXRDb250YWluZXIpIHtcbiAgICB2YXIgcm9vdCA9IGdldENvbnRhaW5lcigpO1xuICAgIHJvb3QuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIH1cbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiByZWYobm90aWZpY2F0aW9uKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIG5vdGljZTogZnVuY3Rpb24gbm90aWNlKG5vdGljZVByb3BzKSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbi5hZGQobm90aWNlUHJvcHMpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZU5vdGljZTogZnVuY3Rpb24gcmVtb3ZlTm90aWNlKGtleSkge1xuICAgICAgICBub3RpZmljYXRpb24ucmVtb3ZlKGtleSk7XG4gICAgICB9LFxuICAgICAgY29tcG9uZW50OiBub3RpZmljYXRpb24sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB1bm1vdW50KGRpdik7XG4gICAgICAgIGlmIChkaXYucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBIb29rc1xuICAgICAgdXNlTm90aWZpY2F0aW9uOiBmdW5jdGlvbiB1c2VOb3RpZmljYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfdXNlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLy8gT25seSB1c2VkIGZvciB0ZXN0IGNhc2UgdXNhZ2VcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgJiYgcHJvcGVydGllcy5URVNUX1JFTkRFUikge1xuICAgIHByb3BlcnRpZXMuVEVTVF9SRU5ERVIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGlmaWNhdGlvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZlxuICAgIH0pKSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlbmRlciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTm90aWZpY2F0aW9uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9KSksIGRpdik7XG59O1xuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uOyIsImltcG9ydCBOb3RpZmljYXRpb24gZnJvbSAnLi9Ob3RpZmljYXRpb24nO1xuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uOyIsInZhciBsb2NhbGUgPSB7XG4gIGxvY2FsZTogJ2VuX1VTJyxcbiAgdG9kYXk6ICdUb2RheScsXG4gIG5vdzogJ05vdycsXG4gIGJhY2tUb1RvZGF5OiAnQmFjayB0byB0b2RheScsXG4gIG9rOiAnT0snLFxuICBjbGVhcjogJ0NsZWFyJyxcbiAgbW9udGg6ICdNb250aCcsXG4gIHllYXI6ICdZZWFyJyxcbiAgdGltZVNlbGVjdDogJ3NlbGVjdCB0aW1lJyxcbiAgZGF0ZVNlbGVjdDogJ3NlbGVjdCBkYXRlJyxcbiAgd2Vla1NlbGVjdDogJ0Nob29zZSBhIHdlZWsnLFxuICBtb250aFNlbGVjdDogJ0Nob29zZSBhIG1vbnRoJyxcbiAgeWVhclNlbGVjdDogJ0Nob29zZSBhIHllYXInLFxuICBkZWNhZGVTZWxlY3Q6ICdDaG9vc2UgYSBkZWNhZGUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdNL0QvWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ00vRC9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGggKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOZXh0IG1vbnRoIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdMYXN0IHllYXIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTmV4dCB5ZWFyIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdMYXN0IGRlY2FkZScsXG4gIG5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ0xhc3QgY2VudHVyeScsXG4gIG5leHRDZW50dXJ5OiAnTmV4dCBjZW50dXJ5J1xufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tIFwicmMtcGlja2VyL2VzL2xvY2FsZS9lbl9VU1wiO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vLi4vdGltZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG52YXIgbG9jYWxlID0ge1xuICBsYW5nOiBfZXh0ZW5kcyh7XG4gICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgZGF0ZScsXG4gICAgeWVhclBsYWNlaG9sZGVyOiAnU2VsZWN0IHllYXInLFxuICAgIHF1YXJ0ZXJQbGFjZWhvbGRlcjogJ1NlbGVjdCBxdWFydGVyJyxcbiAgICBtb250aFBsYWNlaG9sZGVyOiAnU2VsZWN0IG1vbnRoJyxcbiAgICB3ZWVrUGxhY2Vob2xkZXI6ICdTZWxlY3Qgd2VlaycsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydTdGFydCBkYXRlJywgJ0VuZCBkYXRlJ10sXG4gICAgcmFuZ2VZZWFyUGxhY2Vob2xkZXI6IFsnU3RhcnQgeWVhcicsICdFbmQgeWVhciddLFxuICAgIHJhbmdlUXVhcnRlclBsYWNlaG9sZGVyOiBbJ1N0YXJ0IHF1YXJ0ZXInLCAnRW5kIHF1YXJ0ZXInXSxcbiAgICByYW5nZU1vbnRoUGxhY2Vob2xkZXI6IFsnU3RhcnQgbW9udGgnLCAnRW5kIG1vbnRoJ10sXG4gICAgcmFuZ2VXZWVrUGxhY2Vob2xkZXI6IFsnU3RhcnQgd2VlaycsICdFbmQgd2VlayddXG4gIH0sIENhbGVuZGFyTG9jYWxlKSxcbiAgdGltZVBpY2tlckxvY2FsZTogX2V4dGVuZHMoe30sIFRpbWVQaWNrZXJMb2NhbGUpXG59O1xuLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwidmFyIGxvY2FsZSA9IHtcbiAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgdGltZScsXG4gIHJhbmdlUGxhY2Vob2xkZXI6IFsnU3RhcnQgdGltZScsICdFbmQgdGltZSddXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xudmFyIE5vdGljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTm90aWNlLCBfQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihOb3RpY2UpO1xuICBmdW5jdGlvbiBOb3RpY2UoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb3RpY2UpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuICAgIF90aGlzLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBfdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHMub25DbG9zZSxcbiAgICAgICAgbm90aWNlS2V5ID0gX3RoaXMkcHJvcHMubm90aWNlS2V5O1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShub3RpY2VLZXkpO1xuICAgICAgfVxuICAgIH07XG4gICAgX3RoaXMuc3RhcnRDbG9zZVRpbWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmR1cmF0aW9uKSB7XG4gICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSwgX3RoaXMucHJvcHMuZHVyYXRpb24gKiAxMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF90aGlzLmNsZWFyQ2xvc2VUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5jbG9zZVRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5jbG9zZVRpbWVyKTtcbiAgICAgICAgX3RoaXMuY2xvc2VUaW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKE5vdGljZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuZHVyYXRpb24gIT09IHByZXZQcm9wcy5kdXJhdGlvbiB8fCB0aGlzLnByb3BzLnVwZGF0ZU1hcmsgIT09IHByZXZQcm9wcy51cGRhdGVNYXJrIHx8XG4gICAgICAvLyBWaXNpYmxlIGFnYWluIG5lZWQgcmVzZXQgdGltZXJcbiAgICAgIHRoaXMucHJvcHMudmlzaWJsZSAhPT0gcHJldlByb3BzLnZpc2libGUgJiYgdGhpcy5wcm9wcy52aXNpYmxlKSB7XG4gICAgICAgIHRoaXMucmVzdGFydENsb3NlVGltZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXN0YXJ0Q2xvc2VUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0YXJ0Q2xvc2VUaW1lcigpIHtcbiAgICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMyLnByZWZpeENscyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2xvc2FibGUgPSBfdGhpcyRwcm9wczIuY2xvc2FibGUsXG4gICAgICAgIGNsb3NlSWNvbiA9IF90aGlzJHByb3BzMi5jbG9zZUljb24sXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMyLm9uQ2xpY2ssXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICBob2xkZXIgPSBfdGhpcyRwcm9wczIuaG9sZGVyO1xuICAgICAgdmFyIGNvbXBvbmVudENsYXNzID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ub3RpY2VcIik7XG4gICAgICB2YXIgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBpZiAoa2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkuc3Vic3RyKDAsIDUpID09PSAnYXJpYS0nIHx8IGtleSA9PT0gJ3JvbGUnKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSBfdGhpczIucHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgdmFyIG5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjb21wb25lbnRDbGFzcywgY2xhc3NOYW1lLCBfZGVmaW5lUHJvcGVydHkoe30sIFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jbG9zYWJsZVwiKSwgY2xvc2FibGUpKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuY2xlYXJDbG9zZVRpbWVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuc3RhcnRDbG9zZVRpbWVyLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICB9LCBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNvbnRlbnRcIilcbiAgICAgIH0sIGNoaWxkcmVuKSwgY2xvc2FibGUgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICB0YWJJbmRleDogMCxcbiAgICAgICAgb25DbGljazogdGhpcy5jbG9zZSxcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY2xvc2VcIilcbiAgICAgIH0sIGNsb3NlSWNvbiB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jbG9zZS14XCIpXG4gICAgICB9KSkgOiBudWxsKTtcbiAgICAgIGlmIChob2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwobm9kZSwgaG9sZGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTm90aWNlO1xufShDb21wb25lbnQpO1xuTm90aWNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBkdXJhdGlvbjogMS41XG59O1xuZXhwb3J0IHsgTm90aWNlIGFzIGRlZmF1bHQgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0Jztcbi8vIFpvbWJpZUo6IFdlIGV4cG9ydCBzaW5nbGUgZmlsZSBoZXJlIHNpbmNlXG4vLyBDb25maWdQcm92aWRlciB1c2UgdGhpcyB3aGljaCB3aWxsIG1ha2UgbG9vcCBkZXBzXG4vLyB0byBpbXBvcnQgd2hvbGUgYHJjLWZpZWxkLWZvcm1gXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpOyIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG52YXIgUm93Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KHt9KTtcbmV4cG9ydCBkZWZhdWx0IFJvd0NvbnRleHQ7IiwiLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiBzaGltcyB0aGF0IHByb3ZpZGUgbWluaW1hbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSBFUzYgY29sbGVjdGlvbnMuXHJcbiAqXHJcbiAqIFRoZXNlIGltcGxlbWVudGF0aW9ucyBhcmUgbm90IG1lYW50IHRvIGJlIHVzZWQgb3V0c2lkZSBvZiB0aGUgUmVzaXplT2JzZXJ2ZXJcclxuICogbW9kdWxlcyBhcyB0aGV5IGNvdmVyIG9ubHkgYSBsaW1pdGVkIHJhbmdlIG9mIHVzZSBjYXNlcy5cclxuICovXHJcbi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MsIHZhbGlkLWpzZG9jICovXHJcbnZhciBNYXBTaGltID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBNYXA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5kZXggaW4gcHJvdmlkZWQgYXJyYXkgdGhhdCBtYXRjaGVzIHRoZSBzcGVjaWZpZWQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXJyYXk8QXJyYXk+fSBhcnJcclxuICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRJbmRleChhcnIsIGtleSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAtMTtcclxuICAgICAgICBhcnIuc29tZShmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeVswXSA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZW50cmllc19fID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbGFzc18xLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLl9fZW50cmllc19fW2luZGV4XTtcclxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzFdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcclxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfX1tpbmRleF1bMV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18ucHVzaChba2V5LCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLl9fZW50cmllc19fO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleChlbnRyaWVzLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF+Z2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZW50cmllc19fLnNwbGljZSgwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBbY3R4PW51bGxdXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY3R4KSB7XHJcbiAgICAgICAgICAgIGlmIChjdHggPT09IHZvaWQgMCkgeyBjdHggPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9fZW50cmllc19fOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjdHgsIGVudHJ5WzFdLCBlbnRyeVswXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgfSgpKTtcclxufSkoKTtcblxuLyoqXHJcbiAqIERldGVjdHMgd2hldGhlciB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgYXJlIGF2YWlsYWJsZSBpbiBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gKi9cclxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ID09PSBkb2N1bWVudDtcblxuLy8gUmV0dXJucyBnbG9iYWwgb2JqZWN0IG9mIGEgY3VycmVudCBlbnZpcm9ubWVudC5cclxudmFyIGdsb2JhbCQxID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuTWF0aCA9PT0gTWF0aCkge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWw7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PT0gTWF0aCkge1xyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcclxuICAgIH1cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xyXG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XHJcbn0pKCk7XG5cbi8qKlxyXG4gKiBBIHNoaW0gZm9yIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgd2hpY2ggZmFsbHMgYmFjayB0byB0aGUgc2V0VGltZW91dCBpZlxyXG4gKiBmaXJzdCBvbmUgaXMgbm90IHN1cHBvcnRlZC5cclxuICpcclxuICogQHJldHVybnMge251bWJlcn0gUmVxdWVzdHMnIGlkZW50aWZpZXIuXHJcbiAqL1xyXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAvLyBJdCdzIHJlcXVpcmVkIHRvIHVzZSBhIGJvdW5kZWQgZnVuY3Rpb24gYmVjYXVzZSBJRSBzb21ldGltZXMgdGhyb3dzXHJcbiAgICAgICAgLy8gYW4gXCJJbnZhbGlkIGNhbGxpbmcgb2JqZWN0XCIgZXJyb3IgaWYgckFGIGlzIGludm9rZWQgd2l0aG91dCB0aGUgZ2xvYmFsXHJcbiAgICAgICAgLy8gb2JqZWN0IG9uIHRoZSBsZWZ0IGhhbmQgc2lkZS5cclxuICAgICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQoZ2xvYmFsJDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhEYXRlLm5vdygpKTsgfSwgMTAwMCAvIDYwKTsgfTtcclxufSkoKTtcblxuLy8gRGVmaW5lcyBtaW5pbXVtIHRpbWVvdXQgYmVmb3JlIGFkZGluZyBhIHRyYWlsaW5nIGNhbGwuXHJcbnZhciB0cmFpbGluZ1RpbWVvdXQgPSAyO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggZW5zdXJlcyB0aGF0IHByb3ZpZGVkIGNhbGxiYWNrIHdpbGwgYmVcclxuICogaW52b2tlZCBvbmx5IG9uY2UgZHVyaW5nIHRoZSBzcGVjaWZpZWQgZGVsYXkgcGVyaW9kLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGJlIGludm9rZWQgYWZ0ZXIgdGhlIGRlbGF5IHBlcmlvZC5cclxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IC0gRGVsYXkgYWZ0ZXIgd2hpY2ggdG8gaW52b2tlIGNhbGxiYWNrLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiAqL1xyXG5mdW5jdGlvbiB0aHJvdHRsZSAoY2FsbGJhY2ssIGRlbGF5KSB7XHJcbiAgICB2YXIgbGVhZGluZ0NhbGwgPSBmYWxzZSwgdHJhaWxpbmdDYWxsID0gZmFsc2UsIGxhc3RDYWxsVGltZSA9IDA7XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZXMgdGhlIG9yaWdpbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIGFuZCBzY2hlZHVsZXMgbmV3IGludm9jYXRpb24gaWZcclxuICAgICAqIHRoZSBcInByb3h5XCIgd2FzIGNhbGxlZCBkdXJpbmcgY3VycmVudCByZXF1ZXN0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZXNvbHZlUGVuZGluZygpIHtcclxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgbGVhZGluZ0NhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyYWlsaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICBwcm94eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgaW52b2tlZCBhZnRlciB0aGUgc3BlY2lmaWVkIGRlbGF5LiBJdCB3aWxsIGZ1cnRoZXIgcG9zdHBvbmVcclxuICAgICAqIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGRlbGVnYXRpbmcgaXQgdG8gdGhlXHJcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMShyZXNvbHZlUGVuZGluZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjaGVkdWxlcyBpbnZvY2F0aW9uIG9mIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcHJveHkoKSB7XHJcbiAgICAgICAgdmFyIHRpbWVTdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIC8vIFJlamVjdCBpbW1lZGlhdGVseSBmb2xsb3dpbmcgY2FsbHMuXHJcbiAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgLSBsYXN0Q2FsbFRpbWUgPCB0cmFpbGluZ1RpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTY2hlZHVsZSBuZXcgY2FsbCB0byBiZSBpbiBpbnZva2VkIHdoZW4gdGhlIHBlbmRpbmcgb25lIGlzIHJlc29sdmVkLlxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgXCJ0cmFuc2l0aW9uc1wiIHdoaWNoIG5ldmVyIGFjdHVhbGx5IHN0YXJ0XHJcbiAgICAgICAgICAgIC8vIGltbWVkaWF0ZWx5IHNvIHRoZXJlIGlzIGEgY2hhbmNlIHRoYXQgd2UgbWlnaHQgbWlzcyBvbmUgaWYgY2hhbmdlXHJcbiAgICAgICAgICAgIC8vIGhhcHBlbnMgYW1pZHMgdGhlIHBlbmRpbmcgaW52b2NhdGlvbi5cclxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGltZW91dENhbGxiYWNrLCBkZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWVTdGFtcDtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm94eTtcclxufVxuXG4vLyBNaW5pbXVtIGRlbGF5IGJlZm9yZSBpbnZva2luZyB0aGUgdXBkYXRlIG9mIG9ic2VydmVycy5cclxudmFyIFJFRlJFU0hfREVMQVkgPSAyMDtcclxuLy8gQSBsaXN0IG9mIHN1YnN0cmluZ3Mgb2YgQ1NTIHByb3BlcnRpZXMgdXNlZCB0byBmaW5kIHRyYW5zaXRpb24gZXZlbnRzIHRoYXRcclxuLy8gbWlnaHQgYWZmZWN0IGRpbWVuc2lvbnMgb2Ygb2JzZXJ2ZWQgZWxlbWVudHMuXHJcbnZhciB0cmFuc2l0aW9uS2V5cyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0JywgJ3dpZHRoJywgJ2hlaWdodCcsICdzaXplJywgJ3dlaWdodCddO1xyXG4vLyBDaGVjayBpZiBNdXRhdGlvbk9ic2VydmVyIGlzIGF2YWlsYWJsZS5cclxudmFyIG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XHJcbi8qKlxyXG4gKiBTaW5nbGV0b24gY29udHJvbGxlciBjbGFzcyB3aGljaCBoYW5kbGVzIHVwZGF0ZXMgb2YgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2VzLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIERPTSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGVsbHMgdGhhdCBjb250cm9sbGVyIGhhcyBzdWJzY3JpYmVkIGZvciBNdXRhdGlvbiBFdmVudHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogS2VlcHMgcmVmZXJlbmNlIHRvIHRoZSBpbnN0YW5jZSBvZiBNdXRhdGlvbk9ic2VydmVyLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge011dGF0aW9uT2JzZXJ2ZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGlzdCBvZiBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge0FycmF5PFJlc2l6ZU9ic2VydmVyU1BJPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9ic2VydmVyc18gPSBbXTtcclxuICAgICAgICB0aGlzLm9uVHJhbnNpdGlvbkVuZF8gPSB0aGlzLm9uVHJhbnNpdGlvbkVuZF8uYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlZnJlc2ggPSB0aHJvdHRsZSh0aGlzLnJlZnJlc2guYmluZCh0aGlzKSwgUkVGUkVTSF9ERUxBWSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgb2JzZXJ2ZXIgdG8gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSBhZGRlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgaWYgKCF+dGhpcy5vYnNlcnZlcnNfLmluZGV4T2Yob2JzZXJ2ZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkIGxpc3RlbmVycyBpZiB0aGV5IGhhdmVuJ3QgYmVlbiBhZGRlZCB5ZXQuXHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0XygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyU1BJfSBvYnNlcnZlciAtIE9ic2VydmVyIHRvIGJlIHJlbW92ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc187XHJcbiAgICAgICAgdmFyIGluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpO1xyXG4gICAgICAgIC8vIFJlbW92ZSBvYnNlcnZlciBpZiBpdCdzIHByZXNlbnQgaW4gcmVnaXN0cnkuXHJcbiAgICAgICAgaWYgKH5pbmRleCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBpZiBjb250cm9sbGVyIGhhcyBubyBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxyXG4gICAgICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0XygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZXMgdGhlIHVwZGF0ZSBvZiBvYnNlcnZlcnMuIEl0IHdpbGwgY29udGludWUgcnVubmluZyB1cGRhdGVzIGluc29mYXJcclxuICAgICAqIGl0IGRldGVjdHMgY2hhbmdlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjaGFuZ2VzRGV0ZWN0ZWQgPSB0aGlzLnVwZGF0ZU9ic2VydmVyc18oKTtcclxuICAgICAgICAvLyBDb250aW51ZSBydW5uaW5nIHVwZGF0ZXMgaWYgY2hhbmdlcyBoYXZlIGJlZW4gZGV0ZWN0ZWQgYXMgdGhlcmUgbWlnaHRcclxuICAgICAgICAvLyBiZSBmdXR1cmUgb25lcyBjYXVzZWQgYnkgQ1NTIHRyYW5zaXRpb25zLlxyXG4gICAgICAgIGlmIChjaGFuZ2VzRGV0ZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBldmVyeSBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0IGFuZCBub3RpZmllcyB0aGVtIG9mIHF1ZXVlZFxyXG4gICAgICogZW50cmllcy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgXCJ0cnVlXCIgaWYgYW55IG9ic2VydmVyIGhhcyBkZXRlY3RlZCBjaGFuZ2VzIGluXHJcbiAgICAgKiAgICAgIGRpbWVuc2lvbnMgb2YgaXQncyBlbGVtZW50cy5cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVPYnNlcnZlcnNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIENvbGxlY3Qgb2JzZXJ2ZXJzIHRoYXQgaGF2ZSBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICAgIHZhciBhY3RpdmVPYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc18uZmlsdGVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZ2F0aGVyQWN0aXZlKCksIG9ic2VydmVyLmhhc0FjdGl2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIERlbGl2ZXIgbm90aWZpY2F0aW9ucyBpbiBhIHNlcGFyYXRlIGN5Y2xlIGluIG9yZGVyIHRvIGF2b2lkIGFueVxyXG4gICAgICAgIC8vIGNvbGxpc2lvbnMgYmV0d2VlbiBvYnNlcnZlcnMsIGUuZy4gd2hlbiBtdWx0aXBsZSBpbnN0YW5jZXMgb2ZcclxuICAgICAgICAvLyBSZXNpemVPYnNlcnZlciBhcmUgdHJhY2tpbmcgdGhlIHNhbWUgZWxlbWVudCBhbmQgdGhlIGNhbGxiYWNrIG9mIG9uZVxyXG4gICAgICAgIC8vIG9mIHRoZW0gY2hhbmdlcyBjb250ZW50IGRpbWVuc2lvbnMgb2YgdGhlIG9ic2VydmVkIHRhcmdldC4gU29tZXRpbWVzXHJcbiAgICAgICAgLy8gdGhpcyBtYXkgcmVzdWx0IGluIG5vdGlmaWNhdGlvbnMgYmVpbmcgYmxvY2tlZCBmb3IgdGhlIHJlc3Qgb2Ygb2JzZXJ2ZXJzLlxyXG4gICAgICAgIGFjdGl2ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gb2JzZXJ2ZXIuYnJvYWRjYXN0QWN0aXZlKCk7IH0pO1xyXG4gICAgICAgIHJldHVybiBhY3RpdmVPYnNlcnZlcnMubGVuZ3RoID4gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIERPTSBsaXN0ZW5lcnMuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xyXG4gICAgICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IGFkZGVkLlxyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8IHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFN1YnNjcmlwdGlvbiB0byB0aGUgXCJUcmFuc2l0aW9uZW5kXCIgZXZlbnQgaXMgdXNlZCBhcyBhIHdvcmthcm91bmQgZm9yXHJcbiAgICAgICAgLy8gZGVsYXllZCB0cmFuc2l0aW9ucy4gVGhpcyB3YXkgaXQncyBwb3NzaWJsZSB0byBjYXB0dXJlIGF0IGxlYXN0IHRoZVxyXG4gICAgICAgIC8vIGZpbmFsIHN0YXRlIG9mIGFuIGVsZW1lbnQuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXy5vYnNlcnZlKGRvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHN1YnRyZWU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgRE9NIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuZGlzY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBydW5uaW5nIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQgb3IgaWYgbGlzdGVuZXJzXHJcbiAgICAgICAgLy8gaGF2ZSBiZWVuIGFscmVhZHkgcmVtb3ZlZC5cclxuICAgICAgICBpZiAoIWlzQnJvd3NlciB8fCAhdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8pIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NU3VidHJlZU1vZGlmaWVkJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFwiVHJhbnNpdGlvbmVuZFwiIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7VHJhbnNpdGlvbkV2ZW50fSBldmVudFxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kXyA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hLnByb3BlcnR5TmFtZSwgcHJvcGVydHlOYW1lID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XHJcbiAgICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgdHJhbnNpdGlvbiBtYXkgYWZmZWN0IGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudC5cclxuICAgICAgICB2YXIgaXNSZWZsb3dQcm9wZXJ0eSA9IHRyYW5zaXRpb25LZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF+cHJvcGVydHlOYW1lLmluZGV4T2Yoa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaXNSZWZsb3dQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoZSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZV8pIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZV8gPSBuZXcgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEhvbGRzIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlcidzIGluc3RhbmNlLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5pbnN0YW5jZV8gPSBudWxsO1xyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIERlZmluZXMgbm9uLXdyaXRhYmxlL2VudW1lcmFibGUgcHJvcGVydGllcyBvZiB0aGUgcHJvdmlkZWQgdGFyZ2V0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIE9iamVjdCBmb3Igd2hpY2ggdG8gZGVmaW5lIHByb3BlcnRpZXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIFByb3BlcnRpZXMgdG8gYmUgZGVmaW5lZC5cclxuICogQHJldHVybnMge09iamVjdH0gVGFyZ2V0IG9iamVjdC5cclxuICovXHJcbnZhciBkZWZpbmVDb25maWd1cmFibGUgPSAoZnVuY3Rpb24gKHRhcmdldCwgcHJvcHMpIHtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhwcm9wcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgdmFsdWU6IHByb3BzW2tleV0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufSk7XG5cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBnbG9iYWwgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCBwcm92aWRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqL1xyXG52YXIgZ2V0V2luZG93T2YgPSAoZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgLy8gQXNzdW1lIHRoYXQgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgd2hpY2ggbWVhbnMgdGhhdCBpdFxyXG4gICAgLy8gaGFzIHRoZSBcIm93bmVyRG9jdW1lbnRcIiBwcm9wZXJ0eSBmcm9tIHdoaWNoIHdlIGNhbiByZXRyaWV2ZSBhXHJcbiAgICAvLyBjb3JyZXNwb25kaW5nIGdsb2JhbCBvYmplY3QuXHJcbiAgICB2YXIgb3duZXJHbG9iYWwgPSB0YXJnZXQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcbiAgICAvLyBSZXR1cm4gdGhlIGxvY2FsIGdsb2JhbCBvYmplY3QgaWYgaXQncyBub3QgcG9zc2libGUgZXh0cmFjdCBvbmUgZnJvbVxyXG4gICAgLy8gcHJvdmlkZWQgZWxlbWVudC5cclxuICAgIHJldHVybiBvd25lckdsb2JhbCB8fCBnbG9iYWwkMTtcclxufSk7XG5cbi8vIFBsYWNlaG9sZGVyIG9mIGFuIGVtcHR5IGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG52YXIgZW1wdHlSZWN0ID0gY3JlYXRlUmVjdEluaXQoMCwgMCwgMCwgMCk7XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBwcm92aWRlZCBzdHJpbmcgdG8gYSBudW1iZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsdWVcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0cyBib3JkZXJzIHNpemUgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBwb3NpdGlvbnMgLSBCb3JkZXJzIHBvc2l0aW9ucyAodG9wLCByaWdodCwgLi4uKVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzKSB7XHJcbiAgICB2YXIgcG9zaXRpb25zID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHBvc2l0aW9uc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBwb3NpdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChzaXplLCBwb3NpdGlvbikge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1snYm9yZGVyLScgKyBwb3NpdGlvbiArICctd2lkdGgnXTtcclxuICAgICAgICByZXR1cm4gc2l6ZSArIHRvRmxvYXQodmFsdWUpO1xyXG4gICAgfSwgMCk7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RzIHBhZGRpbmdzIHNpemVzIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYWRkaW5ncyBib3guXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQYWRkaW5ncyhzdHlsZXMpIHtcclxuICAgIHZhciBwb3NpdGlvbnMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddO1xyXG4gICAgdmFyIHBhZGRpbmdzID0ge307XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIHBvc2l0aW9uc18xID0gcG9zaXRpb25zOyBfaSA8IHBvc2l0aW9uc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHBvc2l0aW9uc18xW19pXTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZXNbJ3BhZGRpbmctJyArIHBvc2l0aW9uXTtcclxuICAgICAgICBwYWRkaW5nc1twb3NpdGlvbl0gPSB0b0Zsb2F0KHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYWRkaW5ncztcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBjb250ZW50IHJlY3RhbmdsZSBvZiBwcm92aWRlZCBTVkcgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtTVkdHcmFwaGljc0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgY29udGVudCByZWN0YW5nbGUgb2Ygd2hpY2ggbmVlZHNcclxuICogICAgICB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRTVkdDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIHZhciBiYm94ID0gdGFyZ2V0LmdldEJCb3goKTtcclxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdCgwLCAwLCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgSFRNTEVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgZm9yIHdoaWNoIHRvIGNhbGN1bGF0ZSB0aGUgY29udGVudCByZWN0YW5nbGUuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldEhUTUxFbGVtZW50Q29udGVudFJlY3QodGFyZ2V0KSB7XHJcbiAgICAvLyBDbGllbnQgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBjYW4ndCBiZVxyXG4gICAgLy8gdXNlZCBleGNsdXNpdmVseSBhcyB0aGV5IHByb3ZpZGUgcm91bmRlZCB2YWx1ZXMuXHJcbiAgICB2YXIgY2xpZW50V2lkdGggPSB0YXJnZXQuY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCA9IHRhcmdldC5jbGllbnRIZWlnaHQ7XHJcbiAgICAvLyBCeSB0aGlzIGNvbmRpdGlvbiB3ZSBjYW4gY2F0Y2ggYWxsIG5vbi1yZXBsYWNlZCBpbmxpbmUsIGhpZGRlbiBhbmRcclxuICAgIC8vIGRldGFjaGVkIGVsZW1lbnRzLiBUaG91Z2ggZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGxlc3NcclxuICAgIC8vIHRoYW4gMC41IHdpbGwgYmUgZGlzY2FyZGVkIGFzIHdlbGwuXHJcbiAgICAvL1xyXG4gICAgLy8gV2l0aG91dCBpdCB3ZSB3b3VsZCBuZWVkIHRvIGltcGxlbWVudCBzZXBhcmF0ZSBtZXRob2RzIGZvciBlYWNoIG9mXHJcbiAgICAvLyB0aG9zZSBjYXNlcyBhbmQgaXQncyBub3QgcG9zc2libGUgdG8gcGVyZm9ybSBhIHByZWNpc2UgYW5kIHBlcmZvcm1hbmNlXHJcbiAgICAvLyBlZmZlY3RpdmUgdGVzdCBmb3IgaGlkZGVuIGVsZW1lbnRzLiBFLmcuIGV2ZW4galF1ZXJ5J3MgJzp2aXNpYmxlJyBmaWx0ZXJcclxuICAgIC8vIGdpdmVzIHdyb25nIHJlc3VsdHMgZm9yIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgbGVzcyB0aGFuIDAuNS5cclxuICAgIGlmICghY2xpZW50V2lkdGggJiYgIWNsaWVudEhlaWdodCkge1xyXG4gICAgICAgIHJldHVybiBlbXB0eVJlY3Q7XHJcbiAgICB9XHJcbiAgICB2YXIgc3R5bGVzID0gZ2V0V2luZG93T2YodGFyZ2V0KS5nZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XHJcbiAgICB2YXIgcGFkZGluZ3MgPSBnZXRQYWRkaW5ncyhzdHlsZXMpO1xyXG4gICAgdmFyIGhvcml6UGFkID0gcGFkZGluZ3MubGVmdCArIHBhZGRpbmdzLnJpZ2h0O1xyXG4gICAgdmFyIHZlcnRQYWQgPSBwYWRkaW5ncy50b3AgKyBwYWRkaW5ncy5ib3R0b207XHJcbiAgICAvLyBDb21wdXRlZCBzdHlsZXMgb2Ygd2lkdGggJiBoZWlnaHQgYXJlIGJlaW5nIHVzZWQgYmVjYXVzZSB0aGV5IGFyZSB0aGVcclxuICAgIC8vIG9ubHkgZGltZW5zaW9ucyBhdmFpbGFibGUgdG8gSlMgdGhhdCBjb250YWluIG5vbi1yb3VuZGVkIHZhbHVlcy4gSXQgY291bGRcclxuICAgIC8vIGJlIHBvc3NpYmxlIHRvIHV0aWxpemUgdGhlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpZiBvbmx5IGl0J3MgZGF0YSB3YXNuJ3RcclxuICAgIC8vIGFmZmVjdGVkIGJ5IENTUyB0cmFuc2Zvcm1hdGlvbnMgbGV0IGFsb25lIHBhZGRpbmdzLCBib3JkZXJzIGFuZCBzY3JvbGwgYmFycy5cclxuICAgIHZhciB3aWR0aCA9IHRvRmxvYXQoc3R5bGVzLndpZHRoKSwgaGVpZ2h0ID0gdG9GbG9hdChzdHlsZXMuaGVpZ2h0KTtcclxuICAgIC8vIFdpZHRoICYgaGVpZ2h0IGluY2x1ZGUgcGFkZGluZ3MgYW5kIGJvcmRlcnMgd2hlbiB0aGUgJ2JvcmRlci1ib3gnIGJveFxyXG4gICAgLy8gbW9kZWwgaXMgYXBwbGllZCAoZXhjZXB0IGZvciBJRSkuXHJcbiAgICBpZiAoc3R5bGVzLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XHJcbiAgICAgICAgLy8gRm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIHJlcXVpcmVkIHRvIGhhbmRsZSBJbnRlcm5ldCBFeHBsb3JlciB3aGljaFxyXG4gICAgICAgIC8vIGRvZXNuJ3QgaW5jbHVkZSBwYWRkaW5ncyBhbmQgYm9yZGVycyB0byBjb21wdXRlZCBDU1MgZGltZW5zaW9ucy5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFdlIGNhbiBzYXkgdGhhdCBpZiBDU1MgZGltZW5zaW9ucyArIHBhZGRpbmdzIGFyZSBlcXVhbCB0byB0aGUgXCJjbGllbnRcIlxyXG4gICAgICAgIC8vIHByb3BlcnRpZXMgdGhlbiBpdCdzIGVpdGhlciBJRSwgYW5kIHRodXMgd2UgZG9uJ3QgbmVlZCB0byBzdWJ0cmFjdFxyXG4gICAgICAgIC8vIGFueXRoaW5nLCBvciBhbiBlbGVtZW50IG1lcmVseSBkb2Vzbid0IGhhdmUgcGFkZGluZ3MvYm9yZGVycyBzdHlsZXMuXHJcbiAgICAgICAgaWYgKE1hdGgucm91bmQod2lkdGggKyBob3JpelBhZCkgIT09IGNsaWVudFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHdpZHRoIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ2xlZnQnLCAncmlnaHQnKSArIGhvcml6UGFkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAhPT0gY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd0b3AnLCAnYm90dG9tJykgKyB2ZXJ0UGFkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEZvbGxvd2luZyBzdGVwcyBjYW4ndCBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCdzIHJvb3QgZWxlbWVudCBhcyBpdHNcclxuICAgIC8vIGNsaWVudFtXaWR0aC9IZWlnaHRdIHByb3BlcnRpZXMgcmVwcmVzZW50IHZpZXdwb3J0IGFyZWEgb2YgdGhlIHdpbmRvdy5cclxuICAgIC8vIEJlc2lkZXMsIGl0J3MgYXMgd2VsbCBub3QgbmVjZXNzYXJ5IGFzIHRoZSA8aHRtbD4gaXRzZWxmIG5laXRoZXIgaGFzXHJcbiAgICAvLyByZW5kZXJlZCBzY3JvbGwgYmFycyBub3IgaXQgY2FuIGJlIGNsaXBwZWQuXHJcbiAgICBpZiAoIWlzRG9jdW1lbnRFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAvLyBJbiBzb21lIGJyb3dzZXJzIChvbmx5IGluIEZpcmVmb3gsIGFjdHVhbGx5KSBDU1Mgd2lkdGggJiBoZWlnaHRcclxuICAgICAgICAvLyBpbmNsdWRlIHNjcm9sbCBiYXJzIHNpemUgd2hpY2ggY2FuIGJlIHJlbW92ZWQgYXQgdGhpcyBzdGVwIGFzIHNjcm9sbFxyXG4gICAgICAgIC8vIGJhcnMgYXJlIHRoZSBvbmx5IGRpZmZlcmVuY2UgYmV0d2VlbiByb3VuZGVkIGRpbWVuc2lvbnMgKyBwYWRkaW5nc1xyXG4gICAgICAgIC8vIGFuZCBcImNsaWVudFwiIHByb3BlcnRpZXMsIHRob3VnaCB0aGF0IGlzIG5vdCBhbHdheXMgdHJ1ZSBpbiBDaHJvbWUuXHJcbiAgICAgICAgdmFyIHZlcnRTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpIC0gY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdmFyIGhvcml6U2Nyb2xsYmFyID0gTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAtIGNsaWVudEhlaWdodDtcclxuICAgICAgICAvLyBDaHJvbWUgaGFzIGEgcmF0aGVyIHdlaXJkIHJvdW5kaW5nIG9mIFwiY2xpZW50XCIgcHJvcGVydGllcy5cclxuICAgICAgICAvLyBFLmcuIGZvciBhbiBlbGVtZW50IHdpdGggY29udGVudCB3aWR0aCBvZiAzMTQuMnB4IGl0IHNvbWV0aW1lcyBnaXZlc1xyXG4gICAgICAgIC8vIHRoZSBjbGllbnQgd2lkdGggb2YgMzE1cHggYW5kIGZvciB0aGUgd2lkdGggb2YgMzE0LjdweCBpdCBtYXkgZ2l2ZVxyXG4gICAgICAgIC8vIDMxNHB4LiBBbmQgaXQgZG9lc24ndCBoYXBwZW4gYWxsIHRoZSB0aW1lLiBTbyBqdXN0IGlnbm9yZSB0aGlzIGRlbHRhXHJcbiAgICAgICAgLy8gYXMgYSBub24tcmVsZXZhbnQuXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHZlcnRTY3JvbGxiYXIpICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHdpZHRoIC09IHZlcnRTY3JvbGxiYXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLmFicyhob3JpelNjcm9sbGJhcikgIT09IDEpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IGhvcml6U2Nyb2xsYmFyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdChwYWRkaW5ncy5sZWZ0LCBwYWRkaW5ncy50b3AsIHdpZHRoLCBoZWlnaHQpO1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBTVkdHcmFwaGljc0VsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc1NWR0dyYXBoaWNzRWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTb21lIGJyb3dzZXJzLCBuYW1lbHkgSUUgYW5kIEVkZ2UsIGRvbid0IGhhdmUgdGhlIFNWR0dyYXBoaWNzRWxlbWVudFxyXG4gICAgLy8gaW50ZXJmYWNlLlxyXG4gICAgaWYgKHR5cGVvZiBTVkdHcmFwaGljc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHR3JhcGhpY3NFbGVtZW50OyB9O1xyXG4gICAgfVxyXG4gICAgLy8gSWYgaXQncyBzbywgdGhlbiBjaGVjayB0aGF0IGVsZW1lbnQgaXMgYXQgbGVhc3QgYW4gaW5zdGFuY2Ugb2YgdGhlXHJcbiAgICAvLyBTVkdFbGVtZW50IGFuZCB0aGF0IGl0IGhhcyB0aGUgXCJnZXRCQm94XCIgbWV0aG9kLlxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuICh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLlNWR0VsZW1lbnQgJiZcclxuICAgICAgICB0eXBlb2YgdGFyZ2V0LmdldEJCb3ggPT09ICdmdW5jdGlvbicpOyB9O1xyXG59KSgpO1xyXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhIGRvY3VtZW50IGVsZW1lbnQgKDxodG1sPikuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzRG9jdW1lbnRFbGVtZW50KHRhcmdldCkge1xyXG4gICAgcmV0dXJuIHRhcmdldCA9PT0gZ2V0V2luZG93T2YodGFyZ2V0KS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbn1cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYW4gYXBwcm9wcmlhdGUgY29udGVudCByZWN0YW5nbGUgZm9yIHByb3ZpZGVkIGh0bWwgb3Igc3ZnIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkcyB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIGlmICghaXNCcm93c2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcclxuICAgIH1cclxuICAgIGlmIChpc1NWR0dyYXBoaWNzRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIHJlY3RhbmdsZSB3aXRoIGFuIGludGVyZmFjZSBvZiB0aGUgRE9NUmVjdFJlYWRPbmx5LlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZG9tcmVjdHJlYWRvbmx5XHJcbiAqXHJcbiAqIEBwYXJhbSB7RE9NUmVjdEluaXR9IHJlY3RJbml0IC0gT2JqZWN0IHdpdGggcmVjdGFuZ2xlJ3MgeC95IGNvb3JkaW5hdGVzIGFuZCBkaW1lbnNpb25zLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdFJlYWRPbmx5fVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUmVhZE9ubHlSZWN0KF9hKSB7XHJcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICAvLyBJZiBET01SZWN0UmVhZE9ubHkgaXMgYXZhaWxhYmxlIHVzZSBpdCBhcyBhIHByb3RvdHlwZSBmb3IgdGhlIHJlY3RhbmdsZS5cclxuICAgIHZhciBDb25zdHIgPSB0eXBlb2YgRE9NUmVjdFJlYWRPbmx5ICE9PSAndW5kZWZpbmVkJyA/IERPTVJlY3RSZWFkT25seSA6IE9iamVjdDtcclxuICAgIHZhciByZWN0ID0gT2JqZWN0LmNyZWF0ZShDb25zdHIucHJvdG90eXBlKTtcclxuICAgIC8vIFJlY3RhbmdsZSdzIHByb3BlcnRpZXMgYXJlIG5vdCB3cml0YWJsZSBhbmQgbm9uLWVudW1lcmFibGUuXHJcbiAgICBkZWZpbmVDb25maWd1cmFibGUocmVjdCwge1xyXG4gICAgICAgIHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgdG9wOiB5LFxyXG4gICAgICAgIHJpZ2h0OiB4ICsgd2lkdGgsXHJcbiAgICAgICAgYm90dG9tOiBoZWlnaHQgKyB5LFxyXG4gICAgICAgIGxlZnQ6IHhcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlY3Q7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgRE9NUmVjdEluaXQgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zIGFuZCB0aGUgeC95IGNvb3JkaW5hdGVzLlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZGljdGRlZi1kb21yZWN0aW5pdFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFJlY3RhbmdsZSdzIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUmVjdGFuZ2xlJ3MgaGVpZ2h0LlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZWN0SW5pdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICByZXR1cm4geyB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XHJcbn1cblxuLyoqXHJcbiAqIENsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGF0aW9ucyBvZiB0aGUgY29udGVudCByZWN0YW5nbGUgb2ZcclxuICogcHJvdmlkZWQgRE9NIGVsZW1lbnQgYW5kIGZvciBrZWVwaW5nIHRyYWNrIG9mIGl0J3MgY2hhbmdlcy5cclxuICovXHJcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmF0aW9uKHRhcmdldCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJyb2FkY2FzdGVkIHdpZHRoIG9mIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCcm9hZGNhc3RlZCBoZWlnaHQgb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0SGVpZ2h0ID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7RE9NUmVjdEluaXR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdF8gPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBjb250ZW50IHJlY3RhbmdsZSBhbmQgdGVsbHMgd2hldGhlciBpdCdzIHdpZHRoIG9yIGhlaWdodCBwcm9wZXJ0aWVzXHJcbiAgICAgKiBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYnJvYWRjYXN0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBnZXRDb250ZW50UmVjdCh0aGlzLnRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdF8gPSByZWN0O1xyXG4gICAgICAgIHJldHVybiAocmVjdC53aWR0aCAhPT0gdGhpcy5icm9hZGNhc3RXaWR0aCB8fFxyXG4gICAgICAgICAgICByZWN0LmhlaWdodCAhPT0gdGhpcy5icm9hZGNhc3RIZWlnaHQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyAnYnJvYWRjYXN0V2lkdGgnIGFuZCAnYnJvYWRjYXN0SGVpZ2h0JyBwcm9wZXJ0aWVzIHdpdGggYSBkYXRhXHJcbiAgICAgKiBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgb2YgdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge0RPTVJlY3RJbml0fSBMYXN0IG9ic2VydmVkIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuYnJvYWRjYXN0UmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudFJlY3RfO1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2lkdGggPSByZWN0LndpZHRoO1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0SGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHJlY3Q7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmF0aW9uO1xyXG59KCkpO1xuXG52YXIgUmVzaXplT2JzZXJ2ZXJFbnRyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlckVudHJ5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0aGF0IGlzIGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICogQHBhcmFtIHtET01SZWN0SW5pdH0gcmVjdEluaXQgLSBEYXRhIG9mIHRoZSBlbGVtZW50J3MgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRW50cnkodGFyZ2V0LCByZWN0SW5pdCkge1xyXG4gICAgICAgIHZhciBjb250ZW50UmVjdCA9IGNyZWF0ZVJlYWRPbmx5UmVjdChyZWN0SW5pdCk7XHJcbiAgICAgICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGVcclxuICAgICAgICAvLyBhbmQgYXJlIGFsc28gbm90IGVudW1lcmFibGUgaW4gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFByb3BlcnR5IGFjY2Vzc29ycyBhcmUgbm90IGJlaW5nIHVzZWQgYXMgdGhleSdkIHJlcXVpcmUgdG8gZGVmaW5lIGFcclxuICAgICAgICAvLyBwcml2YXRlIFdlYWtNYXAgc3RvcmFnZSB3aGljaCBtYXkgY2F1c2UgbWVtb3J5IGxlYWtzIGluIGJyb3dzZXJzIHRoYXRcclxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IHRoaXMgdHlwZSBvZiBjb2xsZWN0aW9ucy5cclxuICAgICAgICBkZWZpbmVDb25maWd1cmFibGUodGhpcywgeyB0YXJnZXQ6IHRhcmdldCwgY29udGVudFJlY3Q6IGNvbnRlbnRSZWN0IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRW50cnk7XHJcbn0oKSk7XG5cbnZhciBSZXNpemVPYnNlcnZlclNQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBpbnZva2VkXHJcbiAgICAgKiAgICAgIHdoZW4gb25lIG9mIHRoZSBvYnNlcnZlZCBlbGVtZW50cyBjaGFuZ2VzIGl0J3MgY29udGVudCBkaW1lbnNpb25zLlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9IGNvbnRyb2xsZXIgLSBDb250cm9sbGVyIGluc3RhbmNlIHdoaWNoXHJcbiAgICAgKiAgICAgIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgdXBkYXRlcyBvZiBvYnNlcnZlci5cclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJ9IGNhbGxiYWNrQ3R4IC0gUmVmZXJlbmNlIHRvIHRoZSBwdWJsaWNcclxuICAgICAqICAgICAgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCBjYWxsYmFja0N0eCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgcmVzaXplIG9ic2VydmF0aW9ucyB0aGF0IGhhdmUgZGV0ZWN0ZWQgY2hhbmdlcyBpbiBkaW1lbnNpb25zXHJcbiAgICAgICAgICogb2YgZWxlbWVudHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8UmVzaXplT2JzZXJ2YXRpb24+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZ2lzdHJ5IG9mIHRoZSBSZXNpemVPYnNlcnZhdGlvbiBpbnN0YW5jZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7TWFwPEVsZW1lbnQsIFJlc2l6ZU9ic2VydmF0aW9uPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18gPSBuZXcgTWFwU2hpbSgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNhbGxiYWNrIHByb3ZpZGVkIGFzIHBhcmFtZXRlciAxIGlzIG5vdCBhIGZ1bmN0aW9uLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8gPSBjb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tDdHhfID0gY2FsbGJhY2tDdHg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyBvYnNlcnZpbmcgcHJvdmlkZWQgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBjdXJyZW50IGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSB0aGUgRWxlbWVudCBpbnRlcmZhY2UuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyB8fCAhKEVsZW1lbnQgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGVsZW1lbnQgaXMgYWxyZWFkeSBiZWluZyBvYnNlcnZlZC5cclxuICAgICAgICBpZiAob2JzZXJ2YXRpb25zLmhhcyh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JzZXJ2YXRpb25zLnNldCh0YXJnZXQsIG5ldyBSZXNpemVPYnNlcnZhdGlvbih0YXJnZXQpKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLmFkZE9ic2VydmVyKHRoaXMpO1xyXG4gICAgICAgIC8vIEZvcmNlIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2YXRpb25zLlxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8ucmVmcmVzaCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RvcHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIHN0b3Agb2JzZXJ2aW5nLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS51bm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBjdXJyZW50IGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSB0aGUgRWxlbWVudCBpbnRlcmZhY2UuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyB8fCAhKEVsZW1lbnQgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGVsZW1lbnQgaXMgbm90IGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICAgIGlmICghb2JzZXJ2YXRpb25zLmhhcyh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JzZXJ2YXRpb25zLmRlbGV0ZSh0YXJnZXQpO1xyXG4gICAgICAgIGlmICghb2JzZXJ2YXRpb25zLnNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgYWxsIGVsZW1lbnRzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbGxlY3RzIG9ic2VydmF0aW9uIGluc3RhbmNlcyB0aGUgYXNzb2NpYXRlZCBlbGVtZW50IG9mIHdoaWNoIGhhcyBjaGFuZ2VkXHJcbiAgICAgKiBpdCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZ2F0aGVyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAob2JzZXJ2YXRpb24uaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5wdXNoKG9ic2VydmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyBpbml0aWFsIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggYSBsaXN0IG9mIFJlc2l6ZU9ic2VydmVyRW50cnlcclxuICAgICAqIGluc3RhbmNlcyBjb2xsZWN0ZWQgZnJvbSBhY3RpdmUgcmVzaXplIG9ic2VydmF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmJyb2FkY2FzdEFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIG9ic2VydmVyIGRvZXNuJ3QgaGF2ZSBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICAgIGlmICghdGhpcy5oYXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdHggPSB0aGlzLmNhbGxiYWNrQ3R4XztcclxuICAgICAgICAvLyBDcmVhdGUgUmVzaXplT2JzZXJ2ZXJFbnRyeSBpbnN0YW5jZSBmb3IgZXZlcnkgYWN0aXZlIG9ic2VydmF0aW9uLlxyXG4gICAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLm1hcChmdW5jdGlvbiAob2JzZXJ2YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlckVudHJ5KG9ic2VydmF0aW9uLnRhcmdldCwgb2JzZXJ2YXRpb24uYnJvYWRjYXN0UmVjdCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrXy5jYWxsKGN0eCwgZW50cmllcywgY3R4KTtcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIGNvbGxlY3Rpb24gb2YgYWN0aXZlIG9ic2VydmF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmNsZWFyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5zcGxpY2UoMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZWxscyB3aGV0aGVyIG9ic2VydmVyIGhhcyBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuaGFzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoID4gMDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJTUEk7XHJcbn0oKSk7XG5cbi8vIFJlZ2lzdHJ5IG9mIGludGVybmFsIG9ic2VydmVycy4gSWYgV2Vha01hcCBpcyBub3QgYXZhaWxhYmxlIHVzZSBjdXJyZW50IHNoaW1cclxuLy8gZm9yIHRoZSBNYXAgY29sbGVjdGlvbiBhcyBpdCBoYXMgYWxsIHJlcXVpcmVkIG1ldGhvZHMgYW5kIGJlY2F1c2UgV2Vha01hcFxyXG4vLyBjYW4ndCBiZSBmdWxseSBwb2x5ZmlsbGVkIGFueXdheS5cclxudmFyIG9ic2VydmVycyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwU2hpbSgpO1xyXG4vKipcclxuICogUmVzaXplT2JzZXJ2ZXIgQVBJLiBFbmNhcHN1bGF0ZXMgdGhlIFJlc2l6ZU9ic2VydmVyIFNQSSBpbXBsZW1lbnRhdGlvblxyXG4gKiBleHBvc2luZyBvbmx5IHRob3NlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgc3BlYy5cclxuICovXHJcbnZhciBSZXNpemVPYnNlcnZlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGJhY2sgdGhhdCBpcyBpbnZva2VkIHdoZW5cclxuICAgICAqICAgICAgZGltZW5zaW9ucyBvZiB0aGUgb2JzZXJ2ZWQgZWxlbWVudHMgY2hhbmdlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlcihjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNpemVPYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29udHJvbGxlciA9IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlclNQSShjYWxsYmFjaywgY29udHJvbGxlciwgdGhpcyk7XHJcbiAgICAgICAgb2JzZXJ2ZXJzLnNldCh0aGlzLCBvYnNlcnZlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XHJcbn0oKSk7XHJcbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcyBvZiBSZXNpemVPYnNlcnZlci5cclxuW1xyXG4gICAgJ29ic2VydmUnLFxyXG4gICAgJ3Vub2JzZXJ2ZScsXHJcbiAgICAnZGlzY29ubmVjdCdcclxuXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gKF9hID0gb2JzZXJ2ZXJzLmdldCh0aGlzKSlbbWV0aG9kXS5hcHBseShfYSwgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbn0pO1xuXG52YXIgaW5kZXggPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gRXhwb3J0IGV4aXN0aW5nIGltcGxlbWVudGF0aW9uIGlmIGF2YWlsYWJsZS5cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsJDEuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xyXG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsInZhciBhdXRvQWRqdXN0T3ZlcmZsb3cgPSB7XG4gIGFkanVzdFg6IDEsXG4gIGFkanVzdFk6IDFcbn07XG52YXIgdGFyZ2V0T2Zmc2V0ID0gWzAsIDBdO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0ge1xuICBsZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2NyJywgJ2NsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICBwb2ludHM6IFsnY2wnLCAnY3InXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHRvcDoge1xuICAgIHBvaW50czogWydiYycsICd0YyddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGJvdHRvbToge1xuICAgIHBvaW50czogWyd0YycsICdiYyddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgdG9wTGVmdDoge1xuICAgIHBvaW50czogWydibCcsICd0bCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGxlZnRUb3A6IHtcbiAgICBwb2ludHM6IFsndHInLCAndGwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICB0b3BSaWdodDoge1xuICAgIHBvaW50czogWydicicsICd0ciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHJpZ2h0VG9wOiB7XG4gICAgcG9pbnRzOiBbJ3RsJywgJ3RyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFs0LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICBib3R0b21SaWdodDoge1xuICAgIHBvaW50czogWyd0cicsICdiciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgcmlnaHRCb3R0b206IHtcbiAgICBwb2ludHM6IFsnYmwnLCAnYnInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGJvdHRvbUxlZnQ6IHtcbiAgICBwb2ludHM6IFsndGwnLCAnYmwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIDRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGxlZnRCb3R0b206IHtcbiAgICBwb2ludHM6IFsnYnInLCAnYmwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgcGxhY2VtZW50czsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCBSb3dDb250ZXh0IGZyb20gJy4vUm93Q29udGV4dCc7XG5mdW5jdGlvbiBwYXJzZUZsZXgoZmxleCkge1xuICBpZiAodHlwZW9mIGZsZXggPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGZsZXgsIFwiIFwiKS5jb25jYXQoZmxleCwgXCIgYXV0b1wiKTtcbiAgfVxuICBpZiAoL15cXGQrKFxcLlxcZCspPyhweHxlbXxyZW18JSkkLy50ZXN0KGZsZXgpKSB7XG4gICAgcmV0dXJuIFwiMCAwIFwiLmNvbmNhdChmbGV4KTtcbiAgfVxuICByZXR1cm4gZmxleDtcbn1cbnZhciBzaXplcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAneHhsJ107XG52YXIgQ29sID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb24gPSBfUmVhY3QkdXNlQ29udGV4dC5kaXJlY3Rpb247XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dDIgPSBSZWFjdC51c2VDb250ZXh0KFJvd0NvbnRleHQpLFxuICAgIGd1dHRlciA9IF9SZWFjdCR1c2VDb250ZXh0Mi5ndXR0ZXIsXG4gICAgd3JhcCA9IF9SZWFjdCR1c2VDb250ZXh0Mi53cmFwLFxuICAgIHN1cHBvcnRGbGV4R2FwID0gX1JlYWN0JHVzZUNvbnRleHQyLnN1cHBvcnRGbGV4R2FwO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIHNwYW4gPSBwcm9wcy5zcGFuLFxuICAgIG9yZGVyID0gcHJvcHMub3JkZXIsXG4gICAgb2Zmc2V0ID0gcHJvcHMub2Zmc2V0LFxuICAgIHB1c2ggPSBwcm9wcy5wdXNoLFxuICAgIHB1bGwgPSBwcm9wcy5wdWxsLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIGZsZXggPSBwcm9wcy5mbGV4LFxuICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgb3RoZXJzID0gX19yZXN0KHByb3BzLCBbXCJwcmVmaXhDbHNcIiwgXCJzcGFuXCIsIFwib3JkZXJcIiwgXCJvZmZzZXRcIiwgXCJwdXNoXCIsIFwicHVsbFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiZmxleFwiLCBcInN0eWxlXCJdKTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnY29sJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIHNpemVDbGFzc09iaiA9IHt9O1xuICBzaXplcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcbiAgICB2YXIgc2l6ZVByb3BzID0ge307XG4gICAgdmFyIHByb3BTaXplID0gcHJvcHNbc2l6ZV07XG4gICAgaWYgKHR5cGVvZiBwcm9wU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHNpemVQcm9wcy5zcGFuID0gcHJvcFNpemU7XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKHByb3BTaXplKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHNpemVQcm9wcyA9IHByb3BTaXplIHx8IHt9O1xuICAgIH1cbiAgICBkZWxldGUgb3RoZXJzW3NpemVdO1xuICAgIHNpemVDbGFzc09iaiA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBzaXplQ2xhc3NPYmopLCAoX2V4dGVuZHMyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1cIikuY29uY2F0KHNpemVQcm9wcy5zcGFuKSwgc2l6ZVByb3BzLnNwYW4gIT09IHVuZGVmaW5lZCksIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1vcmRlci1cIikuY29uY2F0KHNpemVQcm9wcy5vcmRlciksIHNpemVQcm9wcy5vcmRlciB8fCBzaXplUHJvcHMub3JkZXIgPT09IDApLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSwgXCItb2Zmc2V0LVwiKS5jb25jYXQoc2l6ZVByb3BzLm9mZnNldCksIHNpemVQcm9wcy5vZmZzZXQgfHwgc2l6ZVByb3BzLm9mZnNldCA9PT0gMCksIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1wdXNoLVwiKS5jb25jYXQoc2l6ZVByb3BzLnB1c2gpLCBzaXplUHJvcHMucHVzaCB8fCBzaXplUHJvcHMucHVzaCA9PT0gMCksIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1wdWxsLVwiKS5jb25jYXQoc2l6ZVByb3BzLnB1bGwpLCBzaXplUHJvcHMucHVsbCB8fCBzaXplUHJvcHMucHVsbCA9PT0gMCksIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2V4dGVuZHMyKSk7XG4gIH0pO1xuICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc3BhbiksIHNwYW4gIT09IHVuZGVmaW5lZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1vcmRlci1cIikuY29uY2F0KG9yZGVyKSwgb3JkZXIpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItb2Zmc2V0LVwiKS5jb25jYXQob2Zmc2V0KSwgb2Zmc2V0KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXB1c2gtXCIpLmNvbmNhdChwdXNoKSwgcHVzaCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wdWxsLVwiKS5jb25jYXQocHVsbCksIHB1bGwpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSwgc2l6ZUNsYXNzT2JqKTtcbiAgdmFyIG1lcmdlZFN0eWxlID0ge307XG4gIC8vIEhvcml6b250YWwgZ3V0dGVyIHVzZSBwYWRkaW5nXG4gIGlmIChndXR0ZXIgJiYgZ3V0dGVyWzBdID4gMCkge1xuICAgIHZhciBob3Jpem9udGFsR3V0dGVyID0gZ3V0dGVyWzBdIC8gMjtcbiAgICBtZXJnZWRTdHlsZS5wYWRkaW5nTGVmdCA9IGhvcml6b250YWxHdXR0ZXI7XG4gICAgbWVyZ2VkU3R5bGUucGFkZGluZ1JpZ2h0ID0gaG9yaXpvbnRhbEd1dHRlcjtcbiAgfVxuICAvLyBWZXJ0aWNhbCBndXR0ZXIgdXNlIHBhZGRpbmcgd2hlbiBnYXAgbm90IHN1cHBvcnRcbiAgaWYgKGd1dHRlciAmJiBndXR0ZXJbMV0gPiAwICYmICFzdXBwb3J0RmxleEdhcCkge1xuICAgIHZhciB2ZXJ0aWNhbEd1dHRlciA9IGd1dHRlclsxXSAvIDI7XG4gICAgbWVyZ2VkU3R5bGUucGFkZGluZ1RvcCA9IHZlcnRpY2FsR3V0dGVyO1xuICAgIG1lcmdlZFN0eWxlLnBhZGRpbmdCb3R0b20gPSB2ZXJ0aWNhbEd1dHRlcjtcbiAgfVxuICBpZiAoZmxleCkge1xuICAgIG1lcmdlZFN0eWxlLmZsZXggPSBwYXJzZUZsZXgoZmxleCk7XG4gICAgLy8gSGFjayBmb3IgRmlyZWZveCB0byBhdm9pZCBzaXplIGlzc3VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9wdWxsLzIwMDIzI2lzc3VlY29tbWVudC01NjQzODk1NTNcbiAgICBpZiAod3JhcCA9PT0gZmFsc2UgJiYgIW1lcmdlZFN0eWxlLm1pbldpZHRoKSB7XG4gICAgICBtZXJnZWRTdHlsZS5taW5XaWR0aCA9IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgb3RoZXJzLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBtZXJnZWRTdHlsZSksIHN0eWxlKSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgcmVmOiByZWZcbiAgfSksIGNoaWxkcmVuKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQ29sLmRpc3BsYXlOYW1lID0gJ0NvbCc7XG59XG5leHBvcnQgZGVmYXVsdCBDb2w7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IENTU01vdGlvbiwgeyBDU1NNb3Rpb25MaXN0IH0gZnJvbSAncmMtbW90aW9uJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IGNvbGxhcHNlTW90aW9uIGZyb20gJy4uL191dGlsL21vdGlvbic7XG5pbXBvcnQgeyBGb3JtSXRlbVByZWZpeENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnO1xuaW1wb3J0IHVzZURlYm91bmNlIGZyb20gJy4vaG9va3MvdXNlRGVib3VuY2UnO1xudmFyIEVNUFRZX0xJU1QgPSBbXTtcbmZ1bmN0aW9uIHRvRXJyb3JFbnRpdHkoZXJyb3IsIGVycm9yU3RhdHVzLCBwcmVmaXgpIHtcbiAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICByZXR1cm4ge1xuICAgIGtleTogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KGluZGV4KSxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZXJyb3JTdGF0dXM6IGVycm9yU3RhdHVzXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFcnJvckxpc3QoX3JlZikge1xuICB2YXIgaGVscCA9IF9yZWYuaGVscCxcbiAgICBoZWxwU3RhdHVzID0gX3JlZi5oZWxwU3RhdHVzLFxuICAgIF9yZWYkZXJyb3JzID0gX3JlZi5lcnJvcnMsXG4gICAgZXJyb3JzID0gX3JlZiRlcnJvcnMgPT09IHZvaWQgMCA/IEVNUFRZX0xJU1QgOiBfcmVmJGVycm9ycyxcbiAgICBfcmVmJHdhcm5pbmdzID0gX3JlZi53YXJuaW5ncyxcbiAgICB3YXJuaW5ncyA9IF9yZWYkd2FybmluZ3MgPT09IHZvaWQgMCA/IEVNUFRZX0xJU1QgOiBfcmVmJHdhcm5pbmdzLFxuICAgIHJvb3RDbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICBmaWVsZElkID0gX3JlZi5maWVsZElkLFxuICAgIG9uVmlzaWJsZUNoYW5nZWQgPSBfcmVmLm9uVmlzaWJsZUNoYW5nZWQ7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUl0ZW1QcmVmaXhDb250ZXh0KSxcbiAgICBwcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5wcmVmaXhDbHM7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dDIgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0Mi5nZXRQcmVmaXhDbHM7XG4gIHZhciBiYXNlQ2xhc3NOYW1lID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLWV4cGxhaW5cIik7XG4gIHZhciByb290UHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCk7XG4gIC8vIFdlIGhhdmUgdG8gZGVib3VuY2UgaGVyZSBhZ2FpbiBzaW5jZSBzb21ld2hlcmUgdXNlIEVycm9yTGlzdCBkaXJlY3RseSBzdGlsbCBuZWVkIG5vIHNoYWtpbmdcbiAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8zNjMzNlxuICB2YXIgZGVib3VuY2VFcnJvcnMgPSB1c2VEZWJvdW5jZShlcnJvcnMpO1xuICB2YXIgZGVib3VuY2VXYXJuaW5ncyA9IHVzZURlYm91bmNlKHdhcm5pbmdzKTtcbiAgdmFyIGZ1bGxLZXlMaXN0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGhlbHAgIT09IHVuZGVmaW5lZCAmJiBoZWxwICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gW3RvRXJyb3JFbnRpdHkoaGVscCwgaGVscFN0YXR1cywgJ2hlbHAnKV07XG4gICAgfVxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGRlYm91bmNlRXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IsIGluZGV4KSB7XG4gICAgICByZXR1cm4gdG9FcnJvckVudGl0eShlcnJvciwgJ2Vycm9yJywgJ2Vycm9yJywgaW5kZXgpO1xuICAgIH0pKSwgX3RvQ29uc3VtYWJsZUFycmF5KGRlYm91bmNlV2FybmluZ3MubWFwKGZ1bmN0aW9uICh3YXJuaW5nLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHRvRXJyb3JFbnRpdHkod2FybmluZywgJ3dhcm5pbmcnLCAnd2FybmluZycsIGluZGV4KTtcbiAgICB9KSkpO1xuICB9LCBbaGVscCwgaGVscFN0YXR1cywgZGVib3VuY2VFcnJvcnMsIGRlYm91bmNlV2FybmluZ3NdKTtcbiAgdmFyIGhlbHBQcm9wcyA9IHt9O1xuICBpZiAoZmllbGRJZCkge1xuICAgIGhlbHBQcm9wcy5pZCA9IFwiXCIuY29uY2F0KGZpZWxkSWQsIFwiX2hlbHBcIik7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENTU01vdGlvbiwge1xuICAgIG1vdGlvbkRlYWRsaW5lOiBjb2xsYXBzZU1vdGlvbi5tb3Rpb25EZWFkbGluZSxcbiAgICBtb3Rpb25OYW1lOiBcIlwiLmNvbmNhdChyb290UHJlZml4Q2xzLCBcIi1zaG93LWhlbHBcIiksXG4gICAgdmlzaWJsZTogISFmdWxsS2V5TGlzdC5sZW5ndGgsXG4gICAgb25WaXNpYmxlQ2hhbmdlZDogb25WaXNpYmxlQ2hhbmdlZFxuICB9LCBmdW5jdGlvbiAoaG9sZGVyUHJvcHMpIHtcbiAgICB2YXIgaG9sZGVyQ2xhc3NOYW1lID0gaG9sZGVyUHJvcHMuY2xhc3NOYW1lLFxuICAgICAgaG9sZGVyU3R5bGUgPSBob2xkZXJQcm9wcy5zdHlsZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGhlbHBQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGJhc2VDbGFzc05hbWUsIGhvbGRlckNsYXNzTmFtZSwgcm9vdENsYXNzTmFtZSksXG4gICAgICBzdHlsZTogaG9sZGVyU3R5bGUsXG4gICAgICByb2xlOiBcImFsZXJ0XCJcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ1NTTW90aW9uTGlzdCwgX2V4dGVuZHMoe1xuICAgICAga2V5czogZnVsbEtleUxpc3RcbiAgICB9LCBjb2xsYXBzZU1vdGlvbiwge1xuICAgICAgbW90aW9uTmFtZTogXCJcIi5jb25jYXQocm9vdFByZWZpeENscywgXCItc2hvdy1oZWxwLWl0ZW1cIiksXG4gICAgICBjb21wb25lbnQ6IGZhbHNlXG4gICAgfSksIGZ1bmN0aW9uIChpdGVtUHJvcHMpIHtcbiAgICAgIHZhciBrZXkgPSBpdGVtUHJvcHMua2V5LFxuICAgICAgICBlcnJvciA9IGl0ZW1Qcm9wcy5lcnJvcixcbiAgICAgICAgZXJyb3JTdGF0dXMgPSBpdGVtUHJvcHMuZXJyb3JTdGF0dXMsXG4gICAgICAgIGl0ZW1DbGFzc05hbWUgPSBpdGVtUHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBpdGVtU3R5bGUgPSBpdGVtUHJvcHMuc3R5bGU7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGl0ZW1DbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQoYmFzZUNsYXNzTmFtZSwgXCItXCIpLmNvbmNhdChlcnJvclN0YXR1cyksIGVycm9yU3RhdHVzKSksXG4gICAgICAgIHN0eWxlOiBpdGVtU3R5bGVcbiAgICAgIH0sIGVycm9yKTtcbiAgICB9KSk7XG4gIH0pO1xufSIsImltcG9ydCByYWYgZnJvbSBcInJjLXV0aWwvZXMvcmFmXCI7XG52YXIgaWQgPSAwO1xudmFyIGlkcyA9IHt9O1xuLy8gU3VwcG9ydCBjYWxsIHJhZiB3aXRoIGRlbGF5IHNwZWNpZmllZCBmcmFtZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcHBlclJhZihjYWxsYmFjaykge1xuICB2YXIgZGVsYXlGcmFtZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gIHZhciBteUlkID0gaWQrKztcbiAgdmFyIHJlc3RGcmFtZXMgPSBkZWxheUZyYW1lcztcbiAgZnVuY3Rpb24gaW50ZXJuYWxDYWxsYmFjaygpIHtcbiAgICByZXN0RnJhbWVzIC09IDE7XG4gICAgaWYgKHJlc3RGcmFtZXMgPD0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIGRlbGV0ZSBpZHNbbXlJZF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkc1tteUlkXSA9IHJhZihpbnRlcm5hbENhbGxiYWNrKTtcbiAgICB9XG4gIH1cbiAgaWRzW215SWRdID0gcmFmKGludGVybmFsQ2FsbGJhY2spO1xuICByZXR1cm4gbXlJZDtcbn1cbndyYXBwZXJSYWYuY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKHBpZCkge1xuICBpZiAocGlkID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgcmFmLmNhbmNlbChpZHNbcGlkXSk7XG4gIGRlbGV0ZSBpZHNbcGlkXTtcbn07XG53cmFwcGVyUmFmLmlkcyA9IGlkczsgLy8gZXhwb3J0IHRoaXMgZm9yIHRlc3QgdXNhZ2UiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0IHsgdXBkYXRlQ1NTIH0gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2R5bmFtaWNDU1NcIjtcbmltcG9ydCB7IGNvbXBvc2VSZWYsIHN1cHBvcnRSZWYgfSBmcm9tIFwicmMtdXRpbC9lcy9yZWZcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnN1bWVyLCBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCByYWYgZnJvbSAnLi9yYWYnO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50IH0gZnJvbSAnLi9yZWFjdE5vZGUnO1xudmFyIHN0eWxlRm9yUHNldWRvO1xuLy8gV2hlcmUgZWwgaXMgdGhlIERPTSBlbGVtZW50IHlvdSdkIGxpa2UgdG8gdGVzdCBmb3IgdmlzaWJpbGl0eVxuZnVuY3Rpb24gaXNIaWRkZW4oZWxlbWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gIWVsZW1lbnQgfHwgZWxlbWVudC5vZmZzZXRQYXJlbnQgPT09IG51bGwgfHwgZWxlbWVudC5oaWRkZW47XG59XG5mdW5jdGlvbiBnZXRWYWxpZGF0ZUNvbnRhaW5lcihub2RlUm9vdCkge1xuICBpZiAobm9kZVJvb3QgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgIHJldHVybiBub2RlUm9vdC5ib2R5O1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKG5vZGVSb290LmNoaWxkTm9kZXMpLmZpbmQoZnVuY3Rpb24gKGVsZSkge1xuICAgIHJldHVybiAoZWxlID09PSBudWxsIHx8IGVsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWxlLm5vZGVUeXBlKSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNOb3RHcmV5KGNvbG9yKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICB2YXIgbWF0Y2ggPSAoY29sb3IgfHwgJycpLm1hdGNoKC9yZ2JhP1xcKChcXGQqKSwgKFxcZCopLCAoXFxkKikoLCBbXFxkLl0qKT9cXCkvKTtcbiAgaWYgKG1hdGNoICYmIG1hdGNoWzFdICYmIG1hdGNoWzJdICYmIG1hdGNoWzNdKSB7XG4gICAgcmV0dXJuICEobWF0Y2hbMV0gPT09IG1hdGNoWzJdICYmIG1hdGNoWzJdID09PSBtYXRjaFszXSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG52YXIgV2F2ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoV2F2ZSwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoV2F2ZSk7XG4gIGZ1bmN0aW9uIFdhdmUoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXYXZlKTtcbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIF90aGlzLmNvbnRhaW5lclJlZiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBfdGhpcy5hbmltYXRpb25TdGFydCA9IGZhbHNlO1xuICAgIF90aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIF90aGlzLm9uQ2xpY2sgPSBmdW5jdGlvbiAobm9kZSwgd2F2ZUNvbG9yKSB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIGluc2VydEV4dHJhTm9kZSA9IF90aGlzJHByb3BzLmluc2VydEV4dHJhTm9kZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZDtcbiAgICAgIGlmIChkaXNhYmxlZCB8fCAhbm9kZSB8fCBpc0hpZGRlbihub2RlKSB8fCBub2RlLmNsYXNzTmFtZS5pbmNsdWRlcygnLWxlYXZlJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3RoaXMuZXh0cmFOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgIGV4dHJhTm9kZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS5leHRyYU5vZGU7XG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3RoaXMuY29udGV4dC5nZXRQcmVmaXhDbHM7XG4gICAgICBleHRyYU5vZGUuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoZ2V0UHJlZml4Q2xzKCcnKSwgXCItY2xpY2stYW5pbWF0aW5nLW5vZGVcIik7XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IF90aGlzLmdldEF0dHJpYnV0ZU5hbWUoKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICd0cnVlJyk7XG4gICAgICAvLyBOb3Qgd2hpdGUgb3IgdHJhbnNwYXJlbnQgb3IgZ3JleVxuICAgICAgaWYgKHdhdmVDb2xvciAmJiB3YXZlQ29sb3IgIT09ICcjZmZmJyAmJiB3YXZlQ29sb3IgIT09ICcjZmZmZmZmJyAmJiB3YXZlQ29sb3IgIT09ICdyZ2IoMjU1LCAyNTUsIDI1NSknICYmIHdhdmVDb2xvciAhPT0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknICYmIGlzTm90R3JleSh3YXZlQ29sb3IpICYmICEvcmdiYVxcKCg/OlxcZCosICl7M30wXFwpLy50ZXN0KHdhdmVDb2xvcikgJiZcbiAgICAgIC8vIGFueSB0cmFuc3BhcmVudCByZ2JhIGNvbG9yXG4gICAgICB3YXZlQ29sb3IgIT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgZXh0cmFOb2RlLnN0eWxlLmJvcmRlckNvbG9yID0gd2F2ZUNvbG9yO1xuICAgICAgICB2YXIgbm9kZVJvb3QgPSAoKF9hID0gbm9kZS5nZXRSb290Tm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwobm9kZSkpIHx8IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIG5vZGVCb2R5ID0gKF9iID0gZ2V0VmFsaWRhdGVDb250YWluZXIobm9kZVJvb3QpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBub2RlUm9vdDtcbiAgICAgICAgc3R5bGVGb3JQc2V1ZG8gPSB1cGRhdGVDU1MoXCJcXG4gICAgICBbXCIuY29uY2F0KGdldFByZWZpeENscygnJyksIFwiLWNsaWNrLWFuaW1hdGluZy13aXRob3V0LWV4dHJhLW5vZGU9J3RydWUnXTo6YWZ0ZXIsIC5cIikuY29uY2F0KGdldFByZWZpeENscygnJyksIFwiLWNsaWNrLWFuaW1hdGluZy1ub2RlIHtcXG4gICAgICAgIC0tYW50ZC13YXZlLXNoYWRvdy1jb2xvcjogXCIpLmNvbmNhdCh3YXZlQ29sb3IsIFwiO1xcbiAgICAgIH1cIiksICdhbnRkLXdhdmUnLCB7XG4gICAgICAgICAgY3NwOiBfdGhpcy5jc3AsXG4gICAgICAgICAgYXR0YWNoVG86IG5vZGVCb2R5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGluc2VydEV4dHJhTm9kZSkge1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGV4dHJhTm9kZSk7XG4gICAgICB9XG4gICAgICBbJ3RyYW5zaXRpb24nLCAnYW5pbWF0aW9uJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJcIi5jb25jYXQobmFtZSwgXCJzdGFydFwiKSwgX3RoaXMub25UcmFuc2l0aW9uU3RhcnQpO1xuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJcIi5jb25jYXQobmFtZSwgXCJlbmRcIiksIF90aGlzLm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF90aGlzLm9uVHJhbnNpdGlvblN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5vZGUgPSBfdGhpcy5jb250YWluZXJSZWYuY3VycmVudDtcbiAgICAgIGlmICghZSB8fCBlLnRhcmdldCAhPT0gbm9kZSB8fCBfdGhpcy5hbmltYXRpb25TdGFydCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfdGhpcy5yZXNldEVmZmVjdChub2RlKTtcbiAgICB9O1xuICAgIF90aGlzLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIWUgfHwgZS5hbmltYXRpb25OYW1lICE9PSAnZmFkZUVmZmVjdCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3RoaXMucmVzZXRFZmZlY3QoZS50YXJnZXQpO1xuICAgIH07XG4gICAgX3RoaXMuYmluZEFuaW1hdGlvbkV2ZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZSB8fCAhbm9kZS5nZXRBdHRyaWJ1dGUgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgbm9kZS5jbGFzc05hbWUuaW5jbHVkZXMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgLy8gRml4IHJhZGlvIGJ1dHRvbiBjbGljayB0d2ljZVxuICAgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fCBpc0hpZGRlbihlLnRhcmdldCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMucmVzZXRFZmZlY3Qobm9kZSk7XG4gICAgICAgIC8vIEdldCB3YXZlIGNvbG9yIGZyb20gdGFyZ2V0XG4gICAgICAgIHZhciB3YXZlQ29sb3IgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3AtY29sb3InKSB8fFxuICAgICAgICAvLyBGaXJlZm94IENvbXBhdGlibGVcbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItY29sb3InKSB8fCBnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICAgICAgX3RoaXMuY2xpY2tXYXZlVGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5vbkNsaWNrKG5vZGUsIHdhdmVDb2xvcik7XG4gICAgICAgIH0sIDApO1xuICAgICAgICByYWYuY2FuY2VsKF90aGlzLmFuaW1hdGlvblN0YXJ0SWQpO1xuICAgICAgICBfdGhpcy5hbmltYXRpb25TdGFydCA9IHRydWU7XG4gICAgICAgIC8vIFJlbmRlciB0byB0cmlnZ2VyIHRyYW5zaXRpb24gZXZlbnQgY29zdCAzIGZyYW1lcy4gTGV0J3MgZGVsYXkgMTAgZnJhbWVzIHRvIHJlc2V0IHRoaXMuXG4gICAgICAgIF90aGlzLmFuaW1hdGlvblN0YXJ0SWQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLmFuaW1hdGlvblN0YXJ0ID0gZmFsc2U7XG4gICAgICAgIH0sIDEwKTtcbiAgICAgIH07XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljaywgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBfdGhpcy5yZW5kZXJXYXZlID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBjc3AgPSBfcmVmLmNzcDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF90aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgX3RoaXMuY3NwID0gY3NwO1xuICAgICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgdmFyIHJlZiA9IF90aGlzLmNvbnRhaW5lclJlZjtcbiAgICAgIGlmIChzdXBwb3J0UmVmKGNoaWxkcmVuKSkge1xuICAgICAgICByZWYgPSBjb21wb3NlUmVmKGNoaWxkcmVuLnJlZiwgX3RoaXMuY29udGFpbmVyUmVmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcmVmOiByZWZcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhXYXZlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoIW5vZGUgfHwgbm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5iaW5kQW5pbWF0aW9uRXZlbnQobm9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5jYW5jZWwoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNsaWNrV2F2ZVRpbWVvdXRJZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jbGlja1dhdmVUaW1lb3V0SWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRBdHRyaWJ1dGVOYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZU5hbWUoKSB7XG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gdGhpcy5jb250ZXh0LmdldFByZWZpeENscztcbiAgICAgIHZhciBpbnNlcnRFeHRyYU5vZGUgPSB0aGlzLnByb3BzLmluc2VydEV4dHJhTm9kZTtcbiAgICAgIHJldHVybiBpbnNlcnRFeHRyYU5vZGUgPyBcIlwiLmNvbmNhdChnZXRQcmVmaXhDbHMoJycpLCBcIi1jbGljay1hbmltYXRpbmdcIikgOiBcIlwiLmNvbmNhdChnZXRQcmVmaXhDbHMoJycpLCBcIi1jbGljay1hbmltYXRpbmctd2l0aG91dC1leHRyYS1ub2RlXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNldEVmZmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldEVmZmVjdChub2RlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIGlmICghbm9kZSB8fCBub2RlID09PSB0aGlzLmV4dHJhTm9kZSB8fCAhKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW5zZXJ0RXh0cmFOb2RlID0gdGhpcy5wcm9wcy5pbnNlcnRFeHRyYU5vZGU7XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlTmFtZSgpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgJ2ZhbHNlJyk7IC8vIGVkZ2UgaGFzIGJ1ZyBvbiBgcmVtb3ZlQXR0cmlidXRlYCAjMTQ0NjZcbiAgICAgIGlmIChzdHlsZUZvclBzZXVkbykge1xuICAgICAgICBzdHlsZUZvclBzZXVkby5pbm5lckhUTUwgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpbnNlcnRFeHRyYU5vZGUgJiYgdGhpcy5leHRyYU5vZGUgJiYgbm9kZS5jb250YWlucyh0aGlzLmV4dHJhTm9kZSkpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0aGlzLmV4dHJhTm9kZSk7XG4gICAgICB9XG4gICAgICBbJ3RyYW5zaXRpb24nLCAnYW5pbWF0aW9uJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJcIi5jb25jYXQobmFtZSwgXCJzdGFydFwiKSwgX3RoaXMyLm9uVHJhbnNpdGlvblN0YXJ0KTtcbiAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiXCIuY29uY2F0KG5hbWUsIFwiZW5kXCIpLCBfdGhpczIub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlcldhdmUpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gV2F2ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcbldhdmUuY29udGV4dFR5cGUgPSBDb25maWdDb250ZXh0O1xuZXhwb3J0IGRlZmF1bHQgV2F2ZTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCB0b1ByaW1pdGl2ZSBmcm9tIFwiLi90b1ByaW1pdGl2ZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG5cbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciBOYXRpdmVOdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBQdXJlTnVtYmVyTmFtZXNwYWNlID0gcGF0aFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG5cbi8vIGBUb051bWVyaWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWVyaWNcbnZhciB0b051bWVyaWMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByaW1WYWx1ZSA9IHRvUHJpbWl0aXZlKHZhbHVlLCAnbnVtYmVyJyk7XG4gIHJldHVybiB0eXBlb2YgcHJpbVZhbHVlID09ICdiaWdpbnQnID8gcHJpbVZhbHVlIDogdG9OdW1iZXIocHJpbVZhbHVlKTtcbn07XG5cbi8vIGBUb051bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtYmVyXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdudW1iZXInKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKGlzU3ltYm9sKGl0KSkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IHRyaW0oaXQpO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChpdCwgMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gY2hhckNvZGVBdChpdCwgMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChjaGFyQ29kZUF0KGl0LCAxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZGlnaXRzID0gc3RyaW5nU2xpY2UoaXQsIDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChkaWdpdHMsIGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbnZhciBGT1JDRUQgPSBpc0ZvcmNlZChOVU1CRVIsICFOYXRpdmVOdW1iZXIoJyAwbzEnKSB8fCAhTmF0aXZlTnVtYmVyKCcwYjEnKSB8fCBOYXRpdmVOdW1iZXIoJysweDEnKSk7XG5cbnZhciBjYWxsZWRXaXRoTmV3ID0gZnVuY3Rpb24gKGR1bW15KSB7XG4gIC8vIGluY2x1ZGVzIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICByZXR1cm4gaXNQcm90b3R5cGVPZihOdW1iZXJQcm90b3R5cGUsIGR1bW15KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IHRoaXNOdW1iZXJWYWx1ZShkdW1teSk7IH0pO1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG52YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IE5hdGl2ZU51bWJlcih0b051bWVyaWModmFsdWUpKTtcbiAgcmV0dXJuIGNhbGxlZFdpdGhOZXcodGhpcykgPyBpbmhlcml0SWZSZXF1aXJlZChPYmplY3QobiksIHRoaXMsIE51bWJlcldyYXBwZXIpIDogbjtcbn07XG5cbk51bWJlcldyYXBwZXIucHJvdG90eXBlID0gTnVtYmVyUHJvdG90eXBlO1xuaWYgKEZPUkNFRCAmJiAhSVNfUFVSRSkgTnVtYmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTnVtYmVyV3JhcHBlcjtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgTnVtYmVyOiBOdW1iZXJXcmFwcGVyXG59KTtcblxuLy8gVXNlIGBpbnRlcm5hbC9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXNgIGhlbHBlciBpbiBgY29yZS1qc0A0YFxudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04sTUFYX1NBRkVfSU5URUdFUixNSU5fU0FGRV9JTlRFR0VSLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLHBhcnNlRmxvYXQscGFyc2VJbnQsJyArXG4gICAgLy8gRVNOZXh0XG4gICAgJ2Zyb21TdHJpbmcscmFuZ2UnXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzT3duKHNvdXJjZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbn07XG5cbmlmIChJU19QVVJFICYmIFB1cmVOdW1iZXJOYW1lc3BhY2UpIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMocGF0aFtOVU1CRVJdLCBQdXJlTnVtYmVyTmFtZXNwYWNlKTtcbmlmIChGT1JDRUQgfHwgSVNfUFVSRSkgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhwYXRoW05VTUJFUl0sIE5hdGl2ZU51bWJlcik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRhdGVUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcblxuLy8gYERhdGUucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCFoYXNPd24oRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFKSkge1xuICBkZWZpbmVCdWlsdEluKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZGF0ZVRvUHJpbWl0aXZlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnQoY2FsbGJhY2spIHtcbiAgdmFyIGZuUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGZuUmVmLmN1cnJlbnQgPSBjYWxsYmFjaztcbiAgdmFyIG1lbW9GbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2ZuUmVmJGN1cnJlbnQ7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICByZXR1cm4gKF9mblJlZiRjdXJyZW50ID0gZm5SZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2ZuUmVmJGN1cnJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mblJlZiRjdXJyZW50LmNhbGwuYXBwbHkoX2ZuUmVmJGN1cnJlbnQsIFtmblJlZl0uY29uY2F0KGFyZ3MpKTtcbiAgfSwgW10pO1xuICByZXR1cm4gbWVtb0ZuO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4vLyBTYWZhcmkgYnVnIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDA4MjlcbnZhciBOT05fR0VORVJJQyA9ICEhTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgTmF0aXZlUHJvbWlzZVByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoeyB0aGVuOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gaXNDYWxsYWJsZShvbkZpbmFsbHkpO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjZmluYWxseWAgcHJvcGVybHkgd29ya3Mgd2l0aCBwYXRjaGVkIGBQcm9taXNlI3RoZW5gXG5pZiAoIUlTX1BVUkUgJiYgaXNDYWxsYWJsZShOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IpKSB7XG4gIHZhciBtZXRob2QgPSBnZXRCdWlsdEluKCdQcm9taXNlJykucHJvdG90eXBlWydmaW5hbGx5J107XG4gIGlmIChOYXRpdmVQcm9taXNlUHJvdG90eXBlWydmaW5hbGx5J10gIT09IG1ldGhvZCkge1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2ZpbmFsbHknLCBtZXRob2QsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKEUpO1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobiArIGxlbik7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgMSk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWwsIGtleSwgeyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuUFJPUEVSO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLkNPTkZJR1VSQUJMRTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgICAgICAgICBkZWZpbmVCdWlsdEluKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5LnByb3RvdHlwZS57IHZhbHVlcywgQEBpdGVyYXRvciB9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgREVGQVVMVCA9PT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBjYWxsKG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyAkT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzT3duKG9iamVjdCwgSUVfUFJPVE8pKSByZXR1cm4gb2JqZWN0W0lFX1BST1RPXTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiAkT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXQpKSByZXR1cm4gZ2V0TWV0aG9kKGl0LCBJVEVSQVRPUilcbiAgICB8fCBnZXRNZXRob2QoaXQsICdAQGl0ZXJhdG9yJylcbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkge1xuICBpZiAoaXNQcm90b3R5cGVPZihQcm90b3R5cGUsIGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFNldEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWhlbHBlcnMnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1pdGVyYXRlJyk7XG5cbnZhciBTZXQgPSBTZXRIZWxwZXJzLlNldDtcbnZhciBhZGQgPSBTZXRIZWxwZXJzLmFkZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHZhciByZXN1bHQgPSBuZXcgU2V0KCk7XG4gIGl0ZXJhdGUoc2V0LCBmdW5jdGlvbiAoaXQpIHtcbiAgICBhZGQocmVzdWx0LCBpdCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgaXNOdWxsT3JVbmRlZmluZWQoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFDb25zdHJ1Y3RvcihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT09IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISRSZWdFeHAoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT09IG51bGw7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJST0tFTl9DQVJFVDogQlJPS0VOX0NBUkVULFxuICBNSVNTRURfU1RJQ0tZOiBNSVNTRURfU1RJQ0tZLFxuICBVTlNVUFBPUlRFRF9ZOiBVTlNVUFBPUlRFRF9ZXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2Zcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9PSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSByZWFsIHJlZ2V4IGhlcmUgc2luY2UgaXQgY2F1c2VzIGRlb3B0aW1pemF0aW9uXG4gICAgICAvLyBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbiBpbiBWOFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMwNlxuICAgICAgcmUgPSB7fTtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICAgIHJlLmZsYWdzID0gJyc7XG4gICAgICByZVtTWU1CT0xdID0gLy4vW1NZTUJPTF07XG4gICAgfVxuXG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuXG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KTtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICBGT1JDRURcbiAgKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZCA9IHVuY3VycnlUaGlzKC8uL1tTWU1CT0xdKTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciB1bmN1cnJpZWROYXRpdmVNZXRob2QgPSB1bmN1cnJ5VGhpcyhuYXRpdmVNZXRob2QpO1xuICAgICAgdmFyICRleGVjID0gcmVnZXhwLmV4ZWM7XG4gICAgICBpZiAoJGV4ZWMgPT09IHJlZ2V4cEV4ZWMgfHwgJGV4ZWMgPT09IFJlZ0V4cFByb3RvdHlwZS5leGVjKSB7XG4gICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZU1ldGhvZChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICBkZWZpbmVCdWlsdEluKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgbWV0aG9kc1swXSk7XG4gICAgZGVmaW5lQnVpbHRJbihSZWdFeHBQcm90b3R5cGUsIFNZTUJPTCwgbWV0aG9kc1sxXSk7XG4gIH1cblxuICBpZiAoU0hBTSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKGlzQ2FsbGFibGUoZXhlYykpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbChleGVjLCBSLCBTKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSBhbk9iamVjdChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgPT09ICdSZWdFeHAnKSByZXR1cm4gY2FsbChyZWdleHBFeGVjLCBSLCBTKTtcbiAgdGhyb3cgJFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xufTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSAnLi4vbG9jYWxlL2RlZmF1bHQnO1xudmFyIHJ1bnRpbWVMb2NhbGUgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdExvY2FsZS5Nb2RhbCk7XG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlQ29uZmlybUxvY2FsZShuZXdMb2NhbGUpIHtcbiAgaWYgKG5ld0xvY2FsZSkge1xuICAgIHJ1bnRpbWVMb2NhbGUgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcnVudGltZUxvY2FsZSksIG5ld0xvY2FsZSk7XG4gIH0gZWxzZSB7XG4gICAgcnVudGltZUxvY2FsZSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0TG9jYWxlLk1vZGFsKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpcm1Mb2NhbGUoKSB7XG4gIHJldHVybiBydW50aW1lTG9jYWxlO1xufSIsImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWVcIjtcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvclwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG4vLyBMZXQgY29tcGlsZXIgbm90IHRvIHNlYXJjaCBtb2R1bGUgdXNhZ2VcbnZhciBmdWxsQ2xvbmUgPSBfb2JqZWN0U3ByZWFkKHt9LCBSZWFjdERPTSk7XG52YXIgdmVyc2lvbiA9IGZ1bGxDbG9uZS52ZXJzaW9uLFxuICByZWFjdFJlbmRlciA9IGZ1bGxDbG9uZS5yZW5kZXIsXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGUgPSBmdWxsQ2xvbmUudW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbnZhciBjcmVhdGVSb290O1xudHJ5IHtcbiAgdmFyIG1haW5WZXJzaW9uID0gTnVtYmVyKCh2ZXJzaW9uIHx8ICcnKS5zcGxpdCgnLicpWzBdKTtcbiAgaWYgKG1haW5WZXJzaW9uID49IDE4KSB7XG4gICAgY3JlYXRlUm9vdCA9IGZ1bGxDbG9uZS5jcmVhdGVSb290O1xuICB9XG59IGNhdGNoIChlKSB7XG4gIC8vIERvIG5vdGhpbmc7XG59XG5mdW5jdGlvbiB0b2dnbGVXYXJuaW5nKHNraXApIHtcbiAgdmFyIF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gZnVsbENsb25lLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBpZiAoX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgJiYgX3R5cGVvZihfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCkgPT09ICdvYmplY3QnKSB7XG4gICAgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gc2tpcDtcbiAgfVxufVxudmFyIE1BUksgPSAnX19yY19yZWFjdF9yb290X18nO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gbW9kZXJuUmVuZGVyKG5vZGUsIGNvbnRhaW5lcikge1xuICB0b2dnbGVXYXJuaW5nKHRydWUpO1xuICB2YXIgcm9vdCA9IGNvbnRhaW5lcltNQVJLXSB8fCBjcmVhdGVSb290KGNvbnRhaW5lcik7XG4gIHRvZ2dsZVdhcm5pbmcoZmFsc2UpO1xuICByb290LnJlbmRlcihub2RlKTtcbiAgY29udGFpbmVyW01BUktdID0gcm9vdDtcbn1cbmZ1bmN0aW9uIGxlZ2FjeVJlbmRlcihub2RlLCBjb250YWluZXIpIHtcbiAgcmVhY3RSZW5kZXIobm9kZSwgY29udGFpbmVyKTtcbn1cblxuLyoqIEBwcml2YXRlIFRlc3QgdXNhZ2UuIE5vdCB3b3JrIGluIHByb2QgKi9cbmV4cG9ydCBmdW5jdGlvbiBfcihub2RlLCBjb250YWluZXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbGVnYWN5UmVuZGVyKG5vZGUsIGNvbnRhaW5lcik7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIobm9kZSwgY29udGFpbmVyKSB7XG4gIGlmIChjcmVhdGVSb290KSB7XG4gICAgbW9kZXJuUmVuZGVyKG5vZGUsIGNvbnRhaW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxlZ2FjeVJlbmRlcihub2RlLCBjb250YWluZXIpO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFVubW91bnQgPT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIG1vZGVyblVubW91bnQoX3gpIHtcbiAgcmV0dXJuIF9tb2Rlcm5Vbm1vdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfbW9kZXJuVW5tb3VudCgpIHtcbiAgX21vZGVyblVubW91bnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfY29udGFpbmVyJE1BUks7XG4gICAgICAgICAgICAoX2NvbnRhaW5lciRNQVJLID0gY29udGFpbmVyW01BUktdKSA9PT0gbnVsbCB8fCBfY29udGFpbmVyJE1BUksgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb250YWluZXIkTUFSSy51bm1vdW50KCk7XG4gICAgICAgICAgICBkZWxldGUgY29udGFpbmVyW01BUktdO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlKTtcbiAgfSkpO1xuICByZXR1cm4gX21vZGVyblVubW91bnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIGxlZ2FjeVVubW91bnQoY29udGFpbmVyKSB7XG4gIHVubW91bnRDb21wb25lbnRBdE5vZGUoY29udGFpbmVyKTtcbn1cblxuLyoqIEBwcml2YXRlIFRlc3QgdXNhZ2UuIE5vdCB3b3JrIGluIHByb2QgKi9cbmV4cG9ydCBmdW5jdGlvbiBfdShjb250YWluZXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbGVnYWN5VW5tb3VudChjb250YWluZXIpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudChfeDIpIHtcbiAgcmV0dXJuIF91bm1vdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfdW5tb3VudCgpIHtcbiAgX3VubW91bnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBpZiAoIShjcmVhdGVSb290ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgbW9kZXJuVW5tb3VudChjb250YWluZXIpKTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGxlZ2FjeVVubW91bnQoY29udGFpbmVyKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTIpO1xuICB9KSk7XG4gIHJldHVybiBfdW5tb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuYXRpdmVUb1N0cmluZy5uYW1lICE9PSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIGRlZmluZUJ1aWx0SW4oUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuID0gJHRvU3RyaW5nKFIuc291cmNlKTtcbiAgICB2YXIgZmxhZ3MgPSAkdG9TdHJpbmcoZ2V0UmVnRXhwRmxhZ3MoUikpO1xuICAgIHJldHVybiAnLycgKyBwYXR0ZXJuICsgJy8nICsgZmxhZ3M7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJpbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSAncmVzaXplLW9ic2VydmVyLXBvbHlmaWxsJztcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gQ29uc3QgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIGVsZW1lbnRMaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBvblJlc2l6ZShlbnRpdGllcykge1xuICBlbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICB2YXIgX2VsZW1lbnRMaXN0ZW5lcnMkZ2V0O1xuICAgIHZhciB0YXJnZXQgPSBlbnRpdHkudGFyZ2V0O1xuICAgIChfZWxlbWVudExpc3RlbmVycyRnZXQgPSBlbGVtZW50TGlzdGVuZXJzLmdldCh0YXJnZXQpKSA9PT0gbnVsbCB8fCBfZWxlbWVudExpc3RlbmVycyRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbGVtZW50TGlzdGVuZXJzJGdldC5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyKHRhcmdldCk7XG4gICAgfSk7XG4gIH0pO1xufVxuLy8gTm90ZTogUmVzaXplT2JzZXJ2ZXIgcG9seWZpbGwgbm90IHN1cHBvcnQgb3B0aW9uIHRvIG1lYXN1cmUgYm9yZGVyLWJveCByZXNpemVcbnZhciByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihvblJlc2l6ZSk7XG4vLyBEZXYgZW52IG9ubHlcbmV4cG9ydCB2YXIgX2VsID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGVsZW1lbnRMaXN0ZW5lcnMgOiBudWxsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5leHBvcnQgdmFyIF9ycyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBvblJlc2l6ZSA6IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBPYnNlcnZlID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmUoZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgaWYgKCFlbGVtZW50TGlzdGVuZXJzLmhhcyhlbGVtZW50KSkge1xuICAgIGVsZW1lbnRMaXN0ZW5lcnMuc2V0KGVsZW1lbnQsIG5ldyBTZXQoKSk7XG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgfVxuICBlbGVtZW50TGlzdGVuZXJzLmdldChlbGVtZW50KS5hZGQoY2FsbGJhY2spO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVub2JzZXJ2ZShlbGVtZW50LCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudExpc3RlbmVycy5oYXMoZWxlbWVudCkpIHtcbiAgICBlbGVtZW50TGlzdGVuZXJzLmdldChlbGVtZW50KS5kZWxldGUoY2FsbGJhY2spO1xuICAgIGlmICghZWxlbWVudExpc3RlbmVycy5nZXQoZWxlbWVudCkuc2l6ZSkge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGVsZW1lbnQpO1xuICAgICAgZWxlbWVudExpc3RlbmVycy5kZWxldGUoZWxlbWVudCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogRmFsbGJhY2sgdG8gZmluZERPTU5vZGUgaWYgb3JpZ2luIHJlZiBkbyBub3QgcHJvdmlkZSBhbnkgZG9tIGVsZW1lbnRcbiAqL1xudmFyIERvbVdyYXBwZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERvbVdyYXBwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERvbVdyYXBwZXIpO1xuICBmdW5jdGlvbiBEb21XcmFwcGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb21XcmFwcGVyKTtcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKERvbVdyYXBwZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERvbVdyYXBwZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5leHBvcnQgeyBEb21XcmFwcGVyIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIENvbGxlY3Rpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG4vKipcbiAqIENvbGxlY3QgYWxsIHRoZSByZXNpemUgZXZlbnQgZnJvbSBjaGlsZHJlbiBSZXNpemVPYnNlcnZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29sbGVjdGlvbihfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgb25CYXRjaFJlc2l6ZSA9IF9yZWYub25CYXRjaFJlc2l6ZTtcbiAgdmFyIHJlc2l6ZUlkUmVmID0gUmVhY3QudXNlUmVmKDApO1xuICB2YXIgcmVzaXplSW5mb3NSZWYgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb25Db2xsZWN0aW9uUmVzaXplID0gUmVhY3QudXNlQ29udGV4dChDb2xsZWN0aW9uQ29udGV4dCk7XG4gIHZhciBvblJlc2l6ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChzaXplLCBlbGVtZW50LCBkYXRhKSB7XG4gICAgcmVzaXplSWRSZWYuY3VycmVudCArPSAxO1xuICAgIHZhciBjdXJyZW50SWQgPSByZXNpemVJZFJlZi5jdXJyZW50O1xuICAgIHJlc2l6ZUluZm9zUmVmLmN1cnJlbnQucHVzaCh7XG4gICAgICBzaXplOiBzaXplLFxuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjdXJyZW50SWQgPT09IHJlc2l6ZUlkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgb25CYXRjaFJlc2l6ZSA9PT0gbnVsbCB8fCBvbkJhdGNoUmVzaXplID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJhdGNoUmVzaXplKHJlc2l6ZUluZm9zUmVmLmN1cnJlbnQpO1xuICAgICAgICByZXNpemVJbmZvc1JlZi5jdXJyZW50ID0gW107XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gQ29udGludWUgYnViYmxpbmcgaWYgcGFyZW50IGV4aXN0XG4gICAgb25Db2xsZWN0aW9uUmVzaXplID09PSBudWxsIHx8IG9uQ29sbGVjdGlvblJlc2l6ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Db2xsZWN0aW9uUmVzaXplKHNpemUsIGVsZW1lbnQsIGRhdGEpO1xuICB9LCBbb25CYXRjaFJlc2l6ZSwgb25Db2xsZWN0aW9uUmVzaXplXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb2xsZWN0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBvblJlc2l6ZVxuICB9LCBjaGlsZHJlbik7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCB7IGNvbXBvc2VSZWYsIHN1cHBvcnRSZWYgfSBmcm9tIFwicmMtdXRpbC9lcy9yZWZcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBmaW5kRE9NTm9kZSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGVcIjtcbmltcG9ydCB7IG9ic2VydmUsIHVub2JzZXJ2ZSB9IGZyb20gJy4uL3V0aWxzL29ic2VydmVyVXRpbCc7XG5pbXBvcnQgRG9tV3JhcHBlciBmcm9tICcuL0RvbVdyYXBwZXInO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkNvbnRleHQgfSBmcm9tICcuLi9Db2xsZWN0aW9uJztcbmZ1bmN0aW9uIFNpbmdsZU9ic2VydmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZDtcbiAgdmFyIGVsZW1lbnRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciB3cmFwcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgb25Db2xsZWN0aW9uUmVzaXplID0gUmVhY3QudXNlQ29udGV4dChDb2xsZWN0aW9uQ29udGV4dCk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBDaGlsZHJlbiA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGlzUmVuZGVyUHJvcHMgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbic7XG4gIHZhciBtZXJnZWRDaGlsZHJlbiA9IGlzUmVuZGVyUHJvcHMgPyBjaGlsZHJlbihlbGVtZW50UmVmKSA6IGNoaWxkcmVuO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTaXplID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBzaXplUmVmID0gUmVhY3QudXNlUmVmKHtcbiAgICB3aWR0aDogLTEsXG4gICAgaGVpZ2h0OiAtMSxcbiAgICBvZmZzZXRXaWR0aDogLTEsXG4gICAgb2Zmc2V0SGVpZ2h0OiAtMVxuICB9KTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVmID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgY2FuUmVmID0gIWlzUmVuZGVyUHJvcHMgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KG1lcmdlZENoaWxkcmVuKSAmJiBzdXBwb3J0UmVmKG1lcmdlZENoaWxkcmVuKTtcbiAgdmFyIG9yaWdpblJlZiA9IGNhblJlZiA/IG1lcmdlZENoaWxkcmVuLnJlZiA6IG51bGw7XG4gIHZhciBtZXJnZWRSZWYgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29tcG9zZVJlZihvcmlnaW5SZWYsIGVsZW1lbnRSZWYpO1xuICB9LCBbb3JpZ2luUmVmLCBlbGVtZW50UmVmXSk7XG4gIHZhciBnZXREb20gPSBmdW5jdGlvbiBnZXREb20oKSB7XG4gICAgcmV0dXJuIGZpbmRET01Ob2RlKGVsZW1lbnRSZWYuY3VycmVudCkgfHwgZmluZERPTU5vZGUod3JhcHBlclJlZi5jdXJyZW50KTtcbiAgfTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0RG9tKCk7XG4gIH0pO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gT2JzZXJ2ZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBwcm9wc1JlZiA9IFJlYWN0LnVzZVJlZihwcm9wcyk7XG4gIHByb3BzUmVmLmN1cnJlbnQgPSBwcm9wcztcbiAgLy8gSGFuZGxlclxuICB2YXIgb25JbnRlcm5hbFJlc2l6ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB2YXIgX3Byb3BzUmVmJGN1cnJlbnQgPSBwcm9wc1JlZi5jdXJyZW50LFxuICAgICAgb25SZXNpemUgPSBfcHJvcHNSZWYkY3VycmVudC5vblJlc2l6ZSxcbiAgICAgIGRhdGEgPSBfcHJvcHNSZWYkY3VycmVudC5kYXRhO1xuICAgIHZhciBfdGFyZ2V0JGdldEJvdW5kaW5nQ2wgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aWR0aCA9IF90YXJnZXQkZ2V0Qm91bmRpbmdDbC53aWR0aCxcbiAgICAgIGhlaWdodCA9IF90YXJnZXQkZ2V0Qm91bmRpbmdDbC5oZWlnaHQ7XG4gICAgdmFyIG9mZnNldFdpZHRoID0gdGFyZ2V0Lm9mZnNldFdpZHRoLFxuICAgICAgb2Zmc2V0SGVpZ2h0ID0gdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICAvKipcbiAgICAgKiBSZXNpemUgb2JzZXJ2ZXIgdHJpZ2dlciB3aGVuIGNvbnRlbnQgc2l6ZSBjaGFuZ2VkLlxuICAgICAqIEluIG1vc3QgY2FzZSB3ZSBqdXN0IGNhcmUgYWJvdXQgZWxlbWVudCBzaXplLFxuICAgICAqIGxldCdzIHVzZSBgYm91bmRhcnlgIGluc3RlYWQgb2YgYGNvbnRlbnRSZWN0YCBoZXJlIHRvIGF2b2lkIHNoYWtpbmcuXG4gICAgICovXG4gICAgdmFyIGZpeGVkV2lkdGggPSBNYXRoLmZsb29yKHdpZHRoKTtcbiAgICB2YXIgZml4ZWRIZWlnaHQgPSBNYXRoLmZsb29yKGhlaWdodCk7XG4gICAgaWYgKHNpemVSZWYuY3VycmVudC53aWR0aCAhPT0gZml4ZWRXaWR0aCB8fCBzaXplUmVmLmN1cnJlbnQuaGVpZ2h0ICE9PSBmaXhlZEhlaWdodCB8fCBzaXplUmVmLmN1cnJlbnQub2Zmc2V0V2lkdGggIT09IG9mZnNldFdpZHRoIHx8IHNpemVSZWYuY3VycmVudC5vZmZzZXRIZWlnaHQgIT09IG9mZnNldEhlaWdodCkge1xuICAgICAgdmFyIHNpemUgPSB7XG4gICAgICAgIHdpZHRoOiBmaXhlZFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGZpeGVkSGVpZ2h0LFxuICAgICAgICBvZmZzZXRXaWR0aDogb2Zmc2V0V2lkdGgsXG4gICAgICAgIG9mZnNldEhlaWdodDogb2Zmc2V0SGVpZ2h0XG4gICAgICB9O1xuICAgICAgc2l6ZVJlZi5jdXJyZW50ID0gc2l6ZTtcbiAgICAgIC8vIElFIGlzIHN0cmFuZ2UsIHJpZ2h0P1xuICAgICAgdmFyIG1lcmdlZE9mZnNldFdpZHRoID0gb2Zmc2V0V2lkdGggPT09IE1hdGgucm91bmQod2lkdGgpID8gd2lkdGggOiBvZmZzZXRXaWR0aDtcbiAgICAgIHZhciBtZXJnZWRPZmZzZXRIZWlnaHQgPSBvZmZzZXRIZWlnaHQgPT09IE1hdGgucm91bmQoaGVpZ2h0KSA/IGhlaWdodCA6IG9mZnNldEhlaWdodDtcbiAgICAgIHZhciBzaXplSW5mbyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc2l6ZSksIHt9LCB7XG4gICAgICAgIG9mZnNldFdpZHRoOiBtZXJnZWRPZmZzZXRXaWR0aCxcbiAgICAgICAgb2Zmc2V0SGVpZ2h0OiBtZXJnZWRPZmZzZXRIZWlnaHRcbiAgICAgIH0pO1xuICAgICAgLy8gTGV0IGNvbGxlY3Rpb24ga25vdyB3aGF0IGhhcHBlbmVkXG4gICAgICBvbkNvbGxlY3Rpb25SZXNpemUgPT09IG51bGwgfHwgb25Db2xsZWN0aW9uUmVzaXplID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNvbGxlY3Rpb25SZXNpemUoc2l6ZUluZm8sIHRhcmdldCwgZGF0YSk7XG4gICAgICBpZiAob25SZXNpemUpIHtcbiAgICAgICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGJ1dCBub3QgZGVmZXIgdG8gbmV4dCBmcmFtZVxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvblJlc2l6ZShzaXplSW5mbywgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIC8vIER5bmFtaWMgb2JzZXJ2ZVxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50RWxlbWVudCA9IGdldERvbSgpO1xuICAgIGlmIChjdXJyZW50RWxlbWVudCAmJiAhZGlzYWJsZWQpIHtcbiAgICAgIG9ic2VydmUoY3VycmVudEVsZW1lbnQsIG9uSW50ZXJuYWxSZXNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVub2JzZXJ2ZShjdXJyZW50RWxlbWVudCwgb25JbnRlcm5hbFJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2VsZW1lbnRSZWYuY3VycmVudCwgZGlzYWJsZWRdKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRG9tV3JhcHBlciwge1xuICAgIHJlZjogd3JhcHBlclJlZlxuICB9LCBjYW5SZWYgPyAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KG1lcmdlZENoaWxkcmVuLCB7XG4gICAgcmVmOiBtZXJnZWRSZWZcbiAgfSkgOiBtZXJnZWRDaGlsZHJlbik7XG59XG52YXIgUmVmU2luZ2xlT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihTaW5nbGVPYnNlcnZlcik7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWZTaW5nbGVPYnNlcnZlci5kaXNwbGF5TmFtZSA9ICdTaW5nbGVPYnNlcnZlcic7XG59XG5leHBvcnQgZGVmYXVsdCBSZWZTaW5nbGVPYnNlcnZlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0b0FycmF5IGZyb20gXCJyYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXlcIjtcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgU2luZ2xlT2JzZXJ2ZXIgZnJvbSAnLi9TaW5nbGVPYnNlcnZlcic7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9Db2xsZWN0aW9uJztcbnZhciBJTlRFUk5BTF9QUkVGSVhfS0VZID0gJ3JjLW9ic2VydmVyLWtleSc7XG5pbXBvcnQgeyBfcnMgfSBmcm9tICcuL3V0aWxzL29ic2VydmVyVXRpbCc7XG5leHBvcnQgeyAvKiogQHByaXZhdGUgVGVzdCBvbmx5IGZvciBtb2NrIHRyaWdnZXIgcmVzaXplIGV2ZW50ICovXG5fcnMgfTtcbmZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gIHZhciBjaGlsZE5vZGVzID0gdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gW2NoaWxkcmVuXSA6IHRvQXJyYXkoY2hpbGRyZW4pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdGaW5kIG1vcmUgdGhhbiBvbmUgY2hpbGQgbm9kZSB3aXRoIGBjaGlsZHJlbmAgaW4gUmVzaXplT2JzZXJ2ZXIuIFBsZWFzZSB1c2UgUmVzaXplT2JzZXJ2ZXIuQ29sbGVjdGlvbiBpbnN0ZWFkLicpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdgY2hpbGRyZW5gIG9mIFJlc2l6ZU9ic2VydmVyIGlzIGVtcHR5LiBOb3RoaW5nIGlzIGluIG9ic2VydmUuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZE5vZGVzLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgdmFyIGtleSA9IChjaGlsZCA9PT0gbnVsbCB8fCBjaGlsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hpbGQua2V5KSB8fCBcIlwiLmNvbmNhdChJTlRFUk5BTF9QUkVGSVhfS0VZLCBcIi1cIikuY29uY2F0KGluZGV4KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2luZ2xlT2JzZXJ2ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAga2V5OiBrZXksXG4gICAgICByZWY6IGluZGV4ID09PSAwID8gcmVmIDogdW5kZWZpbmVkXG4gICAgfSksIGNoaWxkKTtcbiAgfSk7XG59XG52YXIgUmVmUmVzaXplT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihSZXNpemVPYnNlcnZlcik7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWZSZXNpemVPYnNlcnZlci5kaXNwbGF5TmFtZSA9ICdSZXNpemVPYnNlcnZlcic7XG59XG5SZWZSZXNpemVPYnNlcnZlci5Db2xsZWN0aW9uID0gQ29sbGVjdGlvbjtcbmV4cG9ydCBkZWZhdWx0IFJlZlJlc2l6ZU9ic2VydmVyOyIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0LCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2FuVXNlRG9tIGZyb20gXCIuL0RvbS9jYW5Vc2VEb21cIjtcbnZhciBQb3J0YWwgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICB2YXIgZGlkVXBkYXRlID0gcHJvcHMuZGlkVXBkYXRlLFxuICAgIGdldENvbnRhaW5lciA9IHByb3BzLmdldENvbnRhaW5lcixcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICB2YXIgcGFyZW50UmVmID0gdXNlUmVmKCk7XG4gIHZhciBjb250YWluZXJSZWYgPSB1c2VSZWYoKTtcblxuICAvLyBSZWYgcmV0dXJuIG5vdGhpbmcsIG9ubHkgZm9yIHdyYXBwZXIgY2hlY2sgZXhpc3RcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pO1xuXG4gIC8vIENyZWF0ZSBjb250YWluZXIgaW4gY2xpZW50IHNpZGUgd2l0aCBzeW5jIHRvIGF2b2lkIHVzZUVmZmVjdCBub3QgZ2V0IHJlZlxuICB2YXIgaW5pdFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIGlmICghaW5pdFJlZi5jdXJyZW50ICYmIGNhblVzZURvbSgpKSB7XG4gICAgY29udGFpbmVyUmVmLmN1cnJlbnQgPSBnZXRDb250YWluZXIoKTtcbiAgICBwYXJlbnRSZWYuY3VycmVudCA9IGNvbnRhaW5lclJlZi5jdXJyZW50LnBhcmVudE5vZGU7XG4gICAgaW5pdFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFtMZWdhY3ldIFVzZWQgYnkgYHJjLXRyaWdnZXJgXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZGlkVXBkYXRlID09PSBudWxsIHx8IGRpZFVwZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlkVXBkYXRlKHByb3BzKTtcbiAgfSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gUmVzdG9yZSBjb250YWluZXIgdG8gb3JpZ2luYWwgcGxhY2VcbiAgICAvLyBSZWFjdCAxOCBTdHJpY3RNb2RlIHdpbGwgdW5tb3VudCBmaXJzdCBhbmQgbW91bnQgYmFjayBmb3IgZWZmZWN0IHRlc3Q6XG4gICAgLy8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9ibG9nLzIwMjIvMDMvMjkvcmVhY3QtdjE4Lmh0bWwjbmV3LXN0cmljdC1tb2RlLWJlaGF2aW9yc1xuICAgIGlmIChjb250YWluZXJSZWYuY3VycmVudC5wYXJlbnROb2RlID09PSBudWxsICYmIHBhcmVudFJlZi5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICBwYXJlbnRSZWYuY3VycmVudC5hcHBlbmRDaGlsZChjb250YWluZXJSZWYuY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2NvbnRhaW5lclJlZiRjdXJyZW50LCBfY29udGFpbmVyUmVmJGN1cnJlbnQyO1xuICAgICAgLy8gW0xlZ2FjeV0gVGhpcyBzaG91bGQgbm90IGJlIGhhbmRsZSBieSBQb3J0YWwgYnV0IHBhcmVudCBQb3J0YWxXcmFwcGVyIGluc3RlYWQuXG4gICAgICAvLyBTaW5jZSBzb21lIGNvbXBvbmVudCB1c2UgYFBvcnRhbGAgZGlyZWN0bHksIHdlIGhhdmUgdG8ga2VlcCB0aGUgbG9naWMgaGVyZS5cbiAgICAgIChfY29udGFpbmVyUmVmJGN1cnJlbnQgPSBjb250YWluZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2NvbnRhaW5lclJlZiRjdXJyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2NvbnRhaW5lclJlZiRjdXJyZW50MiA9IF9jb250YWluZXJSZWYkY3VycmVudC5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfY29udGFpbmVyUmVmJGN1cnJlbnQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29udGFpbmVyUmVmJGN1cnJlbnQyLnJlbW92ZUNoaWxkKGNvbnRhaW5lclJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBjb250YWluZXJSZWYuY3VycmVudCA/IC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGNvbnRhaW5lclJlZi5jdXJyZW50KSA6IG51bGw7XG59KTtcbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuXG5mdW5jdGlvbiBpc1BvaW50c0VxKGExLCBhMiwgaXNBbGlnblBvaW50KSB7XG4gIGlmIChpc0FsaWduUG9pbnQpIHtcbiAgICByZXR1cm4gYTFbMF0gPT09IGEyWzBdO1xuICB9XG5cbiAgcmV0dXJuIGExWzBdID09PSBhMlswXSAmJiBhMVsxXSA9PT0gYTJbMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGlnbkZyb21QbGFjZW1lbnQoYnVpbHRpblBsYWNlbWVudHMsIHBsYWNlbWVudFN0ciwgYWxpZ24pIHtcbiAgdmFyIGJhc2VBbGlnbiA9IGJ1aWx0aW5QbGFjZW1lbnRzW3BsYWNlbWVudFN0cl0gfHwge307XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGJhc2VBbGlnbiksIGFsaWduKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGlnblBvcHVwQ2xhc3NOYW1lKGJ1aWx0aW5QbGFjZW1lbnRzLCBwcmVmaXhDbHMsIGFsaWduLCBpc0FsaWduUG9pbnQpIHtcbiAgdmFyIHBvaW50cyA9IGFsaWduLnBvaW50cztcbiAgdmFyIHBsYWNlbWVudHMgPSBPYmplY3Qua2V5cyhidWlsdGluUGxhY2VtZW50cyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICBpZiAoaXNQb2ludHNFcShidWlsdGluUGxhY2VtZW50c1twbGFjZW1lbnRdLnBvaW50cywgcG9pbnRzLCBpc0FsaWduUG9pbnQpKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wbGFjZW1lbnQtXCIpLmNvbmNhdChwbGFjZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0TW90aW9uKF9yZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgICAgbW90aW9uID0gX3JlZi5tb3Rpb24sXG4gICAgICBhbmltYXRpb24gPSBfcmVmLmFuaW1hdGlvbixcbiAgICAgIHRyYW5zaXRpb25OYW1lID0gX3JlZi50cmFuc2l0aW9uTmFtZTtcblxuICBpZiAobW90aW9uKSB7XG4gICAgcmV0dXJuIG1vdGlvbjtcbiAgfVxuXG4gIGlmIChhbmltYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW90aW9uTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KGFuaW1hdGlvbilcbiAgICB9O1xuICB9XG5cbiAgaWYgKHRyYW5zaXRpb25OYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdGlvbk5hbWU6IHRyYW5zaXRpb25OYW1lXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IENTU01vdGlvbiBmcm9tICdyYy1tb3Rpb24nO1xuaW1wb3J0IHsgZ2V0TW90aW9uIH0gZnJvbSBcIi4uL3V0aWxzL2xlZ2FjeVV0aWxcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hc2socHJvcHMpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgekluZGV4ID0gcHJvcHMuekluZGV4LFxuICAgICAgbWFzayA9IHByb3BzLm1hc2ssXG4gICAgICBtYXNrTW90aW9uID0gcHJvcHMubWFza01vdGlvbixcbiAgICAgIG1hc2tBbmltYXRpb24gPSBwcm9wcy5tYXNrQW5pbWF0aW9uLFxuICAgICAgbWFza1RyYW5zaXRpb25OYW1lID0gcHJvcHMubWFza1RyYW5zaXRpb25OYW1lO1xuXG4gIGlmICghbWFzaykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1vdGlvbiA9IHt9O1xuXG4gIGlmIChtYXNrTW90aW9uIHx8IG1hc2tUcmFuc2l0aW9uTmFtZSB8fCBtYXNrQW5pbWF0aW9uKSB7XG4gICAgbW90aW9uID0gX29iamVjdFNwcmVhZCh7XG4gICAgICBtb3Rpb25BcHBlYXI6IHRydWVcbiAgICB9LCBnZXRNb3Rpb24oe1xuICAgICAgbW90aW9uOiBtYXNrTW90aW9uLFxuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICB0cmFuc2l0aW9uTmFtZTogbWFza1RyYW5zaXRpb25OYW1lLFxuICAgICAgYW5pbWF0aW9uOiBtYXNrQW5pbWF0aW9uXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENTU01vdGlvbiwgX2V4dGVuZHMoe30sIG1vdGlvbiwge1xuICAgIHZpc2libGU6IHZpc2libGUsXG4gICAgcmVtb3ZlT25MZWF2ZTogdHJ1ZVxuICB9KSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWU7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHpJbmRleDogekluZGV4XG4gICAgICB9LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWFza1wiKSwgY2xhc3NOYW1lKVxuICAgIH0pO1xuICB9KTtcbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxudmFyIHZlbmRvclByZWZpeDtcbnZhciBqc0Nzc01hcCA9IHtcbiAgV2Via2l0OiAnLXdlYmtpdC0nLFxuICBNb3o6ICctbW96LScsXG4gIC8vIElFIGRpZCBpdCB3cm9uZyBhZ2FpbiAuLi5cbiAgbXM6ICctbXMtJyxcbiAgTzogJy1vLSdcbn07XG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXgoKSB7XG4gIGlmICh2ZW5kb3JQcmVmaXggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2ZW5kb3JQcmVmaXg7XG4gIH1cbiAgdmVuZG9yUHJlZml4ID0gJyc7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZTtcbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmVuZG9yUHJlZml4ID0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmVuZG9yUHJlZml4O1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gIHJldHVybiBnZXRWZW5kb3JQcmVmaXgoKSA/IFwiXCIuY29uY2F0KGdldFZlbmRvclByZWZpeCgpLCBcIlRyYW5zaXRpb25Qcm9wZXJ0eVwiKSA6ICd0cmFuc2l0aW9uUHJvcGVydHknO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtTmFtZSgpIHtcbiAgcmV0dXJuIGdldFZlbmRvclByZWZpeCgpID8gXCJcIi5jb25jYXQoZ2V0VmVuZG9yUHJlZml4KCksIFwiVHJhbnNmb3JtXCIpIDogJ3RyYW5zZm9ybSc7XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uUHJvcGVydHkobm9kZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWUgPSBnZXRUcmFuc2l0aW9uTmFtZSgpO1xuICBpZiAobmFtZSkge1xuICAgIG5vZGUuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICBpZiAobmFtZSAhPT0gJ3RyYW5zaXRpb25Qcm9wZXJ0eScpIHtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRUcmFuc2Zvcm0obm9kZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWUgPSBnZXRUcmFuc2Zvcm1OYW1lKCk7XG4gIGlmIChuYW1lKSB7XG4gICAgbm9kZS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgIGlmIChuYW1lICE9PSAndHJhbnNmb3JtJykge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wZXJ0eShub2RlKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCBub2RlLnN0eWxlW2dldFRyYW5zaXRpb25OYW1lKCldO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtWFkobm9kZSkge1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKTtcbiAgdmFyIHRyYW5zZm9ybSA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpIHx8IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoZ2V0VHJhbnNmb3JtTmFtZSgpKTtcbiAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJykge1xuICAgIHZhciBtYXRyaXggPSB0cmFuc2Zvcm0ucmVwbGFjZSgvW14wLTlcXC0uLF0vZywgJycpLnNwbGl0KCcsJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHBhcnNlRmxvYXQobWF0cml4WzEyXSB8fCBtYXRyaXhbNF0sIDApLFxuICAgICAgeTogcGFyc2VGbG9hdChtYXRyaXhbMTNdIHx8IG1hdHJpeFs1XSwgMClcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG59XG52YXIgbWF0cml4MmQgPSAvbWF0cml4XFwoKC4qKVxcKS87XG52YXIgbWF0cml4M2QgPSAvbWF0cml4M2RcXCgoLiopXFwpLztcbmZ1bmN0aW9uIHNldFRyYW5zZm9ybVhZKG5vZGUsIHh5KSB7XG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpO1xuICB2YXIgdHJhbnNmb3JtID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShnZXRUcmFuc2Zvcm1OYW1lKCkpO1xuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgdmFyIGFycjtcbiAgICB2YXIgbWF0Y2gyZCA9IHRyYW5zZm9ybS5tYXRjaChtYXRyaXgyZCk7XG4gICAgaWYgKG1hdGNoMmQpIHtcbiAgICAgIG1hdGNoMmQgPSBtYXRjaDJkWzFdO1xuICAgICAgYXJyID0gbWF0Y2gyZC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChpdGVtLCAxMCk7XG4gICAgICB9KTtcbiAgICAgIGFycls0XSA9IHh5Lng7XG4gICAgICBhcnJbNV0gPSB4eS55O1xuICAgICAgc2V0VHJhbnNmb3JtKG5vZGUsIFwibWF0cml4KFwiLmNvbmNhdChhcnIuam9pbignLCcpLCBcIilcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWF0Y2gzZCA9IHRyYW5zZm9ybS5tYXRjaChtYXRyaXgzZClbMV07XG4gICAgICBhcnIgPSBtYXRjaDNkLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGl0ZW0sIDEwKTtcbiAgICAgIH0pO1xuICAgICAgYXJyWzEyXSA9IHh5Lng7XG4gICAgICBhcnJbMTNdID0geHkueTtcbiAgICAgIHNldFRyYW5zZm9ybShub2RlLCBcIm1hdHJpeDNkKFwiLmNvbmNhdChhcnIuam9pbignLCcpLCBcIilcIikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzZXRUcmFuc2Zvcm0obm9kZSwgXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdCh4eS54LCBcInB4KSB0cmFuc2xhdGVZKFwiKS5jb25jYXQoeHkueSwgXCJweCkgdHJhbnNsYXRlWigwKVwiKSk7XG4gIH1cbn1cblxudmFyIFJFX05VTSA9IC9bXFwtK10/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bXFwtK10/XFxkK3wpLy5zb3VyY2U7XG52YXIgZ2V0Q29tcHV0ZWRTdHlsZVg7XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNDg1NjU0LzMwNDA2MDVcbmZ1bmN0aW9uIGZvcmNlUmVsYXlvdXQoZWxlbSkge1xuICB2YXIgb3JpZ2luYWxTdHlsZSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcbiAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBlbGVtLm9mZnNldEhlaWdodDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbFN0eWxlO1xufVxuZnVuY3Rpb24gY3NzKGVsLCBuYW1lLCB2KSB7XG4gIHZhciB2YWx1ZSA9IHY7XG4gIGlmIChfdHlwZW9mKG5hbWUpID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGkgaW4gbmFtZSkge1xuICAgICAgaWYgKG5hbWUuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgY3NzKGVsLCBpLCBuYW1lW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZSA9IFwiXCIuY29uY2F0KHZhbHVlLCBcInB4XCIpO1xuICAgIH1cbiAgICBlbC5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVYKGVsLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIGdldENsaWVudFBvc2l0aW9uKGVsZW0pIHtcbiAgdmFyIGJveDtcbiAgdmFyIHg7XG4gIHZhciB5O1xuICB2YXIgZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICB2YXIgZG9jRWxlbSA9IGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAvLyDmoLnmja4gR0JTIOacgOaWsOaVsOaNru+8jEEtR3JhZGUgQnJvd3NlcnMg6YO95bey5pSv5oyBIGdldEJvdW5kaW5nQ2xpZW50UmVjdCDmlrnms5XvvIzkuI3nlKjlho3ogIPomZHkvKDnu5/nmoTlrp7njrDmlrnlvI9cbiAgYm94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAvLyDms6jvvJpqUXVlcnkg6L+Y6ICD6JmR5YeP5Y67IGRvY0VsZW0uY2xpZW50TGVmdC9jbGllbnRUb3BcbiAgLy8g5L2G5rWL6K+V5Y+R546w77yM6L+Z5qC35Y+N6ICM5Lya5a+86Ie05b2TIGh0bWwg5ZKMIGJvZHkg5pyJ6L656LedL+i+ueahhuagt+W8j+aXtu+8jOiOt+WPlueahOWAvOS4jeato+ehrlxuICAvLyDmraTlpJbvvIxpZTYg5Lya5b+955WlIGh0bWwg55qEIG1hcmdpbiDlgLzvvIzlubjov5DlnLDmmK/msqHmnInosIHkvJrljrvorr7nva4gaHRtbCDnmoQgbWFyZ2luXG5cbiAgeCA9IE1hdGguZmxvb3IoYm94LmxlZnQpO1xuICB5ID0gTWF0aC5mbG9vcihib3gudG9wKTtcblxuICAvLyBJbiBJRSwgbW9zdCBvZiB0aGUgdGltZSwgMiBleHRyYSBwaXhlbHMgYXJlIGFkZGVkIHRvIHRoZSB0b3AgYW5kIGxlZnRcbiAgLy8gZHVlIHRvIHRoZSBpbXBsaWNpdCAyLXBpeGVsIGluc2V0IGJvcmRlci4gIEluIElFNi83IHF1aXJrcyBtb2RlIGFuZFxuICAvLyBJRTYgc3RhbmRhcmRzIG1vZGUsIHRoaXMgYm9yZGVyIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHNldHRpbmcgdGhlXG4gIC8vIGRvY3VtZW50IGVsZW1lbnQncyBib3JkZXIgdG8gemVybyAtLSB0aHVzLCB3ZSBjYW5ub3QgcmVseSBvbiB0aGVcbiAgLy8gb2Zmc2V0IGFsd2F5cyBiZWluZyAyIHBpeGVscy5cblxuICAvLyBJbiBxdWlya3MgbW9kZSwgdGhlIG9mZnNldCBjYW4gYmUgZGV0ZXJtaW5lZCBieSBxdWVyeWluZyB0aGUgYm9keSdzXG4gIC8vIGNsaWVudExlZnQvY2xpZW50VG9wLCBidXQgaW4gc3RhbmRhcmRzIG1vZGUsIGl0IGlzIGZvdW5kIGJ5IHF1ZXJ5aW5nXG4gIC8vIHRoZSBkb2N1bWVudCBlbGVtZW50J3MgY2xpZW50TGVmdC9jbGllbnRUb3AuICBTaW5jZSB3ZSBhbHJlYWR5IGNhbGxlZFxuICAvLyBnZXRDbGllbnRCb3VuZGluZ1JlY3Qgd2UgaGF2ZSBhbHJlYWR5IGZvcmNlZCBhIHJlZmxvdywgc28gaXQgaXMgbm90XG4gIC8vIHRvbyBleHBlbnNpdmUganVzdCB0byBxdWVyeSB0aGVtIGFsbC5cblxuICAvLyBpZSDkuIvlupTor6Xlh4/ljrvnqpflj6PnmoTovrnmoYblkKfvvIzmr5Xnq5/pu5jorqQgYWJzb2x1dGUg6YO95piv55u45a+556qX5Y+j5a6a5L2N55qEXG4gIC8vIOeql+WPo+i+ueahhuagh+WHhuaYr+iuviBkb2N1bWVudEVsZW1lbnQgLHF1aXJrcyDml7borr7nva4gYm9keVxuICAvLyDmnIDlpb3npoHmraLlnKggYm9keSDlkowgaHRtbCDkuIrovrnmoYYg77yM5L2GIGllIDwgOSBodG1sIOm7mOiupOaciSAycHgg77yM5YeP5Y67XG4gIC8vIOS9huaYr+mdniBpZSDkuI3lj6/og73orr7nva7nqpflj6PovrnmoYbvvIxib2R5IGh0bWwg5Lmf5LiN5piv56qX5Y+jICxpZSDlj6/ku6XpgJrov4cgaHRtbCxib2R5IOiuvue9rlxuICAvLyDmoIflh4YgaWUg5LiLIGRvY0VsZW0uY2xpZW50VG9wIOWwseaYryBib3JkZXItdG9wXG4gIC8vIGllNyBodG1sIOWNs+eql+WPo+i+ueahhuaUueWPmOS4jeS6huOAguawuOi/nOS4uiAyXG4gIC8vIOS9huagh+WHhiBmaXJlZm94L2Nocm9tZS9pZTkg5LiLIGRvY0VsZW0uY2xpZW50VG9wIOaYr+eql+WPo+i+ueahhu+8jOWNs+S9v+iuvuS6hiBib3JkZXItdG9wIOS5n+S4uiAwXG5cbiAgeCAtPSBkb2NFbGVtLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIHkgLT0gZG9jRWxlbS5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiB4LFxuICAgIHRvcDogeVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsKHcsIHRvcCkge1xuICB2YXIgcmV0ID0gd1tcInBhZ2VcIi5jb25jYXQodG9wID8gJ1knIDogJ1gnLCBcIk9mZnNldFwiKV07XG4gIHZhciBtZXRob2QgPSBcInNjcm9sbFwiLmNvbmNhdCh0b3AgPyAnVG9wJyA6ICdMZWZ0Jyk7XG4gIGlmICh0eXBlb2YgcmV0ICE9PSAnbnVtYmVyJykge1xuICAgIHZhciBkID0gdy5kb2N1bWVudDtcbiAgICAvLyBpZTYsNyw4IHN0YW5kYXJkIG1vZGVcbiAgICByZXQgPSBkLmRvY3VtZW50RWxlbWVudFttZXRob2RdO1xuICAgIGlmICh0eXBlb2YgcmV0ICE9PSAnbnVtYmVyJykge1xuICAgICAgLy8gcXVpcmtzIG1vZGVcbiAgICAgIHJldCA9IGQuYm9keVttZXRob2RdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsTGVmdCh3KSB7XG4gIHJldHVybiBnZXRTY3JvbGwodyk7XG59XG5mdW5jdGlvbiBnZXRTY3JvbGxUb3Aodykge1xuICByZXR1cm4gZ2V0U2Nyb2xsKHcsIHRydWUpO1xufVxuZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsKSB7XG4gIHZhciBwb3MgPSBnZXRDbGllbnRQb3NpdGlvbihlbCk7XG4gIHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuICB2YXIgdyA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICBwb3MubGVmdCArPSBnZXRTY3JvbGxMZWZ0KHcpO1xuICBwb3MudG9wICs9IGdldFNjcm9sbFRvcCh3KTtcbiAgcmV0dXJuIHBvcztcbn1cblxuLyoqXG4gKiBBIGNydWRlIHdheSBvZiBkZXRlcm1pbmluZyBpZiBhbiBvYmplY3QgaXMgYSB3aW5kb3dcbiAqIEBtZW1iZXIgdXRpbFxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgLy8gbXVzdCB1c2UgPT0gZm9yIGllOFxuICAvKiBlc2xpbnQgZXFlcWVxOjAgKi9cbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiBvYmogIT09IHVuZGVmaW5lZCAmJiBvYmogPT0gb2JqLndpbmRvdztcbn1cbmZ1bmN0aW9uIGdldERvY3VtZW50KG5vZGUpIHtcbiAgaWYgKGlzV2luZG93KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGUuZG9jdW1lbnQ7XG4gIH1cbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbSwgbmFtZSwgY3MpIHtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBjcztcbiAgdmFyIHZhbCA9ICcnO1xuICB2YXIgZCA9IGdldERvY3VtZW50KGVsZW0pO1xuICBjb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZSB8fCBkLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCk7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9pc3N1ZXMvNjFcbiAgaWYgKGNvbXB1dGVkU3R5bGUpIHtcbiAgICB2YWwgPSBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkgfHwgY29tcHV0ZWRTdHlsZVtuYW1lXTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxudmFyIF9SRV9OVU1fTk9fUFggPSBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQoUkVfTlVNLCBcIikoPyFweClbYS16JV0rJFwiKSwgJ2knKTtcbnZhciBSRV9QT1MgPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG52YXIgQ1VSUkVOVF9TVFlMRSA9ICdjdXJyZW50U3R5bGUnO1xudmFyIFJVTlRJTUVfU1RZTEUgPSAncnVudGltZVN0eWxlJztcbnZhciBMRUZUID0gJ2xlZnQnO1xudmFyIFBYID0gJ3B4JztcbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlSUUoZWxlbSwgbmFtZSkge1xuICAvLyBjdXJyZW50U3R5bGUgbWF5YmUgbnVsbFxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzUyMzEuYXNweFxuICB2YXIgcmV0ID0gZWxlbVtDVVJSRU5UX1NUWUxFXSAmJiBlbGVtW0NVUlJFTlRfU1RZTEVdW25hbWVdO1xuXG4gIC8vIOW9kyB3aWR0aC9oZWlnaHQg6K6+572u5Li655m+5YiG5q+U5pe277yM6YCa6L+HIHBpeGVsTGVmdCDmlrnlvI/ovazmjaLnmoQgd2lkdGgvaGVpZ2h0IOWAvFxuICAvLyDkuIDlvIDlp4vlsLHlpITnkIbkuoYhIENVU1RPTV9TVFlMRS5oZWlnaHQsQ1VTVE9NX1NUWUxFLndpZHRoICxjc3NIb29rIOino+WGs0AyMDExLTA4LTE5XG4gIC8vIOWcqCBpZSDkuIvkuI3lr7nvvIzpnIDopoHnm7TmjqXnlKggb2Zmc2V0IOaWueW8j1xuICAvLyBib3JkZXJXaWR0aCDnrYnlgLzkuZ/mnInpl67popjvvIzkvYbogIPomZHliLAgYm9yZGVyV2lkdGgg6K6+5Li655m+5YiG5q+U55qE5qaC546H5b6I5bCP77yM6L+Z6YeM5bCx5LiN6ICD6JmR5LqGXG5cbiAgLy8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1xuICAvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxXG4gIC8vIElmIHdlJ3JlIG5vdCBkZWFsaW5nIHdpdGggYSByZWd1bGFyIHBpeGVsIG51bWJlclxuICAvLyBidXQgYSBudW1iZXIgdGhhdCBoYXMgYSB3ZWlyZCBlbmRpbmcsIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBwaXhlbHNcbiAgLy8gZXhjbHVkZSBsZWZ0IHJpZ2h0IGZvciByZWxhdGl2aXR5XG4gIGlmIChfUkVfTlVNX05PX1BYLnRlc3QocmV0KSAmJiAhUkVfUE9TLnRlc3QobmFtZSkpIHtcbiAgICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gICAgdmFyIHN0eWxlID0gZWxlbS5zdHlsZTtcbiAgICB2YXIgbGVmdCA9IHN0eWxlW0xFRlRdO1xuICAgIHZhciByc0xlZnQgPSBlbGVtW1JVTlRJTUVfU1RZTEVdW0xFRlRdO1xuXG4gICAgLy8gcHJldmVudCBmbGFzaGluZyBvZiBjb250ZW50XG4gICAgZWxlbVtSVU5USU1FX1NUWUxFXVtMRUZUXSA9IGVsZW1bQ1VSUkVOVF9TVFlMRV1bTEVGVF07XG5cbiAgICAvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG4gICAgc3R5bGVbTEVGVF0gPSBuYW1lID09PSAnZm9udFNpemUnID8gJzFlbScgOiByZXQgfHwgMDtcbiAgICByZXQgPSBzdHlsZS5waXhlbExlZnQgKyBQWDtcblxuICAgIC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcbiAgICBzdHlsZVtMRUZUXSA9IGxlZnQ7XG4gICAgZWxlbVtSVU5USU1FX1NUWUxFXVtMRUZUXSA9IHJzTGVmdDtcbiAgfVxuICByZXR1cm4gcmV0ID09PSAnJyA/ICdhdXRvJyA6IHJldDtcbn1cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICBnZXRDb21wdXRlZFN0eWxlWCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlID8gX2dldENvbXB1dGVkU3R5bGUgOiBfZ2V0Q29tcHV0ZWRTdHlsZUlFO1xufVxuZnVuY3Rpb24gZ2V0T2Zmc2V0RGlyZWN0aW9uKGRpciwgb3B0aW9uKSB7XG4gIGlmIChkaXIgPT09ICdsZWZ0Jykge1xuICAgIHJldHVybiBvcHRpb24udXNlQ3NzUmlnaHQgPyAncmlnaHQnIDogZGlyO1xuICB9XG4gIHJldHVybiBvcHRpb24udXNlQ3NzQm90dG9tID8gJ2JvdHRvbScgOiBkaXI7XG59XG5mdW5jdGlvbiBvcHBvc2l0ZU9mZnNldERpcmVjdGlvbihkaXIpIHtcbiAgaWYgKGRpciA9PT0gJ2xlZnQnKSB7XG4gICAgcmV0dXJuICdyaWdodCc7XG4gIH0gZWxzZSBpZiAoZGlyID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuICdsZWZ0JztcbiAgfSBlbHNlIGlmIChkaXIgPT09ICd0b3AnKSB7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9IGVsc2UgaWYgKGRpciA9PT0gJ2JvdHRvbScpIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH1cbn1cblxuLy8g6K6+572uIGVsZW0g55u45a+5IGVsZW0ub3duZXJEb2N1bWVudCDnmoTlnZDmoIdcbmZ1bmN0aW9uIHNldExlZnRUb3AoZWxlbSwgb2Zmc2V0LCBvcHRpb24pIHtcbiAgLy8gc2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuICBpZiAoY3NzKGVsZW0sICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIGVsZW0uc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICB9XG4gIHZhciBwcmVzZXRIID0gLTk5OTtcbiAgdmFyIHByZXNldFYgPSAtOTk5O1xuICB2YXIgaG9yaXpvbnRhbFByb3BlcnR5ID0gZ2V0T2Zmc2V0RGlyZWN0aW9uKCdsZWZ0Jywgb3B0aW9uKTtcbiAgdmFyIHZlcnRpY2FsUHJvcGVydHkgPSBnZXRPZmZzZXREaXJlY3Rpb24oJ3RvcCcsIG9wdGlvbik7XG4gIHZhciBvcHBvc2l0ZUhvcml6b250YWxQcm9wZXJ0eSA9IG9wcG9zaXRlT2Zmc2V0RGlyZWN0aW9uKGhvcml6b250YWxQcm9wZXJ0eSk7XG4gIHZhciBvcHBvc2l0ZVZlcnRpY2FsUHJvcGVydHkgPSBvcHBvc2l0ZU9mZnNldERpcmVjdGlvbih2ZXJ0aWNhbFByb3BlcnR5KTtcbiAgaWYgKGhvcml6b250YWxQcm9wZXJ0eSAhPT0gJ2xlZnQnKSB7XG4gICAgcHJlc2V0SCA9IDk5OTtcbiAgfVxuICBpZiAodmVydGljYWxQcm9wZXJ0eSAhPT0gJ3RvcCcpIHtcbiAgICBwcmVzZXRWID0gOTk5O1xuICB9XG4gIHZhciBvcmlnaW5hbFRyYW5zaXRpb24gPSAnJztcbiAgdmFyIG9yaWdpbmFsT2Zmc2V0ID0gZ2V0T2Zmc2V0KGVsZW0pO1xuICBpZiAoJ2xlZnQnIGluIG9mZnNldCB8fCAndG9wJyBpbiBvZmZzZXQpIHtcbiAgICBvcmlnaW5hbFRyYW5zaXRpb24gPSBnZXRUcmFuc2l0aW9uUHJvcGVydHkoZWxlbSkgfHwgJyc7XG4gICAgc2V0VHJhbnNpdGlvblByb3BlcnR5KGVsZW0sICdub25lJyk7XG4gIH1cbiAgaWYgKCdsZWZ0JyBpbiBvZmZzZXQpIHtcbiAgICBlbGVtLnN0eWxlW29wcG9zaXRlSG9yaXpvbnRhbFByb3BlcnR5XSA9ICcnO1xuICAgIGVsZW0uc3R5bGVbaG9yaXpvbnRhbFByb3BlcnR5XSA9IFwiXCIuY29uY2F0KHByZXNldEgsIFwicHhcIik7XG4gIH1cbiAgaWYgKCd0b3AnIGluIG9mZnNldCkge1xuICAgIGVsZW0uc3R5bGVbb3Bwb3NpdGVWZXJ0aWNhbFByb3BlcnR5XSA9ICcnO1xuICAgIGVsZW0uc3R5bGVbdmVydGljYWxQcm9wZXJ0eV0gPSBcIlwiLmNvbmNhdChwcmVzZXRWLCBcInB4XCIpO1xuICB9XG4gIC8vIGZvcmNlIHJlbGF5b3V0XG4gIGZvcmNlUmVsYXlvdXQoZWxlbSk7XG4gIHZhciBvbGQgPSBnZXRPZmZzZXQoZWxlbSk7XG4gIHZhciBvcmlnaW5hbFN0eWxlID0ge307XG4gIGZvciAodmFyIGtleSBpbiBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHZhciBkaXIgPSBnZXRPZmZzZXREaXJlY3Rpb24oa2V5LCBvcHRpb24pO1xuICAgICAgdmFyIHByZXNldCA9IGtleSA9PT0gJ2xlZnQnID8gcHJlc2V0SCA6IHByZXNldFY7XG4gICAgICB2YXIgb2ZmID0gb3JpZ2luYWxPZmZzZXRba2V5XSAtIG9sZFtrZXldO1xuICAgICAgaWYgKGRpciA9PT0ga2V5KSB7XG4gICAgICAgIG9yaWdpbmFsU3R5bGVbZGlyXSA9IHByZXNldCArIG9mZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yaWdpbmFsU3R5bGVbZGlyXSA9IHByZXNldCAtIG9mZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY3NzKGVsZW0sIG9yaWdpbmFsU3R5bGUpO1xuICAvLyBmb3JjZSByZWxheW91dFxuICBmb3JjZVJlbGF5b3V0KGVsZW0pO1xuICBpZiAoJ2xlZnQnIGluIG9mZnNldCB8fCAndG9wJyBpbiBvZmZzZXQpIHtcbiAgICBzZXRUcmFuc2l0aW9uUHJvcGVydHkoZWxlbSwgb3JpZ2luYWxUcmFuc2l0aW9uKTtcbiAgfVxuICB2YXIgcmV0ID0ge307XG4gIGZvciAodmFyIF9rZXkgaW4gb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldC5oYXNPd25Qcm9wZXJ0eShfa2V5KSkge1xuICAgICAgdmFyIF9kaXIgPSBnZXRPZmZzZXREaXJlY3Rpb24oX2tleSwgb3B0aW9uKTtcbiAgICAgIHZhciBfb2ZmID0gb2Zmc2V0W19rZXldIC0gb3JpZ2luYWxPZmZzZXRbX2tleV07XG4gICAgICBpZiAoX2tleSA9PT0gX2Rpcikge1xuICAgICAgICByZXRbX2Rpcl0gPSBvcmlnaW5hbFN0eWxlW19kaXJdICsgX29mZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldFtfZGlyXSA9IG9yaWdpbmFsU3R5bGVbX2Rpcl0gLSBfb2ZmO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjc3MoZWxlbSwgcmV0KTtcbn1cbmZ1bmN0aW9uIHNldFRyYW5zZm9ybSQxKGVsZW0sIG9mZnNldCkge1xuICB2YXIgb3JpZ2luYWxPZmZzZXQgPSBnZXRPZmZzZXQoZWxlbSk7XG4gIHZhciBvcmlnaW5hbFhZID0gZ2V0VHJhbnNmb3JtWFkoZWxlbSk7XG4gIHZhciByZXN1bHRYWSA9IHtcbiAgICB4OiBvcmlnaW5hbFhZLngsXG4gICAgeTogb3JpZ2luYWxYWS55XG4gIH07XG4gIGlmICgnbGVmdCcgaW4gb2Zmc2V0KSB7XG4gICAgcmVzdWx0WFkueCA9IG9yaWdpbmFsWFkueCArIG9mZnNldC5sZWZ0IC0gb3JpZ2luYWxPZmZzZXQubGVmdDtcbiAgfVxuICBpZiAoJ3RvcCcgaW4gb2Zmc2V0KSB7XG4gICAgcmVzdWx0WFkueSA9IG9yaWdpbmFsWFkueSArIG9mZnNldC50b3AgLSBvcmlnaW5hbE9mZnNldC50b3A7XG4gIH1cbiAgc2V0VHJhbnNmb3JtWFkoZWxlbSwgcmVzdWx0WFkpO1xufVxuZnVuY3Rpb24gc2V0T2Zmc2V0KGVsZW0sIG9mZnNldCwgb3B0aW9uKSB7XG4gIGlmIChvcHRpb24uaWdub3JlU2hha2UpIHtcbiAgICB2YXIgb3JpT2Zmc2V0ID0gZ2V0T2Zmc2V0KGVsZW0pO1xuICAgIHZhciBvTGVmdCA9IG9yaU9mZnNldC5sZWZ0LnRvRml4ZWQoMCk7XG4gICAgdmFyIG9Ub3AgPSBvcmlPZmZzZXQudG9wLnRvRml4ZWQoMCk7XG4gICAgdmFyIHRMZWZ0ID0gb2Zmc2V0LmxlZnQudG9GaXhlZCgwKTtcbiAgICB2YXIgdFRvcCA9IG9mZnNldC50b3AudG9GaXhlZCgwKTtcbiAgICBpZiAob0xlZnQgPT09IHRMZWZ0ICYmIG9Ub3AgPT09IHRUb3ApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbi51c2VDc3NSaWdodCB8fCBvcHRpb24udXNlQ3NzQm90dG9tKSB7XG4gICAgc2V0TGVmdFRvcChlbGVtLCBvZmZzZXQsIG9wdGlvbik7XG4gIH0gZWxzZSBpZiAob3B0aW9uLnVzZUNzc1RyYW5zZm9ybSAmJiBnZXRUcmFuc2Zvcm1OYW1lKCkgaW4gZG9jdW1lbnQuYm9keS5zdHlsZSkge1xuICAgIHNldFRyYW5zZm9ybSQxKGVsZW0sIG9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgc2V0TGVmdFRvcChlbGVtLCBvZmZzZXQsIG9wdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVhY2goYXJyLCBmbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGZuKGFycltpXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQm9yZGVyQm94Rm4oZWxlbSkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZVgoZWxlbSwgJ2JveFNpemluZycpID09PSAnYm9yZGVyLWJveCc7XG59XG52YXIgQk9YX01PREVMUyA9IFsnbWFyZ2luJywgJ2JvcmRlcicsICdwYWRkaW5nJ107XG52YXIgQ09OVEVOVF9JTkRFWCA9IC0xO1xudmFyIFBBRERJTkdfSU5ERVggPSAyO1xudmFyIEJPUkRFUl9JTkRFWCA9IDE7XG52YXIgTUFSR0lOX0lOREVYID0gMDtcbmZ1bmN0aW9uIHN3YXAoZWxlbSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIG9sZCA9IHt9O1xuICB2YXIgc3R5bGUgPSBlbGVtLnN0eWxlO1xuICB2YXIgbmFtZTtcblxuICAvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcbiAgZm9yIChuYW1lIGluIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgb2xkW25hbWVdID0gc3R5bGVbbmFtZV07XG4gICAgICBzdHlsZVtuYW1lXSA9IG9wdGlvbnNbbmFtZV07XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrLmNhbGwoZWxlbSk7XG5cbiAgLy8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG4gIGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHN0eWxlW25hbWVdID0gb2xkW25hbWVdO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0UEJNV2lkdGgoZWxlbSwgcHJvcHMsIHdoaWNoKSB7XG4gIHZhciB2YWx1ZSA9IDA7XG4gIHZhciBwcm9wO1xuICB2YXIgajtcbiAgdmFyIGk7XG4gIGZvciAoaiA9IDA7IGogPCBwcm9wcy5sZW5ndGg7IGorKykge1xuICAgIHByb3AgPSBwcm9wc1tqXTtcbiAgICBpZiAocHJvcCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHdoaWNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjc3NQcm9wID0gdm9pZCAwO1xuICAgICAgICBpZiAocHJvcCA9PT0gJ2JvcmRlcicpIHtcbiAgICAgICAgICBjc3NQcm9wID0gXCJcIi5jb25jYXQocHJvcCkuY29uY2F0KHdoaWNoW2ldLCBcIldpZHRoXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNzc1Byb3AgPSBwcm9wICsgd2hpY2hbaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlWChlbGVtLCBjc3NQcm9wKSkgfHwgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxudmFyIGRvbVV0aWxzID0ge1xuICBnZXRQYXJlbnQ6IGZ1bmN0aW9uIGdldFBhcmVudChlbGVtZW50KSB7XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQ7XG4gICAgZG8ge1xuICAgICAgaWYgKHBhcmVudC5ub2RlVHlwZSA9PT0gMTEgJiYgcGFyZW50Lmhvc3QpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Lmhvc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gOSk7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxufTtcbmVhY2goWydXaWR0aCcsICdIZWlnaHQnXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZG9tVXRpbHNbXCJkb2NcIi5jb25jYXQobmFtZSldID0gZnVuY3Rpb24gKHJlZldpbikge1xuICAgIHZhciBkID0gcmVmV2luLmRvY3VtZW50O1xuICAgIHJldHVybiBNYXRoLm1heChcbiAgICAvLyBmaXJlZm94IGNocm9tZSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0PCBib2R5LnNjcm9sbEhlaWdodFxuICAgIC8vIGllIHN0YW5kYXJkIG1vZGUgOiBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0PiBib2R5LnNjcm9sbEhlaWdodFxuICAgIGQuZG9jdW1lbnRFbGVtZW50W1wic2Nyb2xsXCIuY29uY2F0KG5hbWUpXSxcbiAgICAvLyBxdWlya3MgOiBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IOacgOWkp+etieS6juWPr+inhueql+WPo+WkmuS4gOeCue+8n1xuICAgIGQuYm9keVtcInNjcm9sbFwiLmNvbmNhdChuYW1lKV0sIGRvbVV0aWxzW1widmlld3BvcnRcIi5jb25jYXQobmFtZSldKGQpKTtcbiAgfTtcbiAgZG9tVXRpbHNbXCJ2aWV3cG9ydFwiLmNvbmNhdChuYW1lKV0gPSBmdW5jdGlvbiAod2luKSB7XG4gICAgLy8gcGMgYnJvd3NlciBpbmNsdWRlcyBzY3JvbGxiYXIgaW4gd2luZG93LmlubmVyV2lkdGhcbiAgICB2YXIgcHJvcCA9IFwiY2xpZW50XCIuY29uY2F0KG5hbWUpO1xuICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgdmFyIGJvZHkgPSBkb2MuYm9keTtcbiAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgZG9jdW1lbnRFbGVtZW50UHJvcCA9IGRvY3VtZW50RWxlbWVudFtwcm9wXTtcbiAgICAvLyDmoIflh4bmqKHlvI/lj5YgZG9jdW1lbnRFbGVtZW50XG4gICAgLy8gYmFja2NvbXBhdCDlj5YgYm9keVxuICAgIHJldHVybiBkb2MuY29tcGF0TW9kZSA9PT0gJ0NTUzFDb21wYXQnICYmIGRvY3VtZW50RWxlbWVudFByb3AgfHwgYm9keSAmJiBib2R5W3Byb3BdIHx8IGRvY3VtZW50RWxlbWVudFByb3A7XG4gIH07XG59KTtcblxuLypcbiDlvpfliLDlhYPntKDnmoTlpKflsI/kv6Hmga9cbiBAcGFyYW0gZWxlbVxuIEBwYXJhbSBuYW1lXG4gQHBhcmFtIHtTdHJpbmd9IFtleHRyYV0gICdwYWRkaW5nJyA6IChjc3Mgd2lkdGgpICsgcGFkZGluZ1xuICdib3JkZXInIDogKGNzcyB3aWR0aCkgKyBwYWRkaW5nICsgYm9yZGVyXG4gJ21hcmdpbicgOiAoY3NzIHdpZHRoKSArIHBhZGRpbmcgKyBib3JkZXIgKyBtYXJnaW5cbiAqL1xuZnVuY3Rpb24gZ2V0V0goZWxlbSwgbmFtZSwgZXgpIHtcbiAgdmFyIGV4dHJhID0gZXg7XG4gIGlmIChpc1dpbmRvdyhlbGVtKSkge1xuICAgIHJldHVybiBuYW1lID09PSAnd2lkdGgnID8gZG9tVXRpbHMudmlld3BvcnRXaWR0aChlbGVtKSA6IGRvbVV0aWxzLnZpZXdwb3J0SGVpZ2h0KGVsZW0pO1xuICB9IGVsc2UgaWYgKGVsZW0ubm9kZVR5cGUgPT09IDkpIHtcbiAgICByZXR1cm4gbmFtZSA9PT0gJ3dpZHRoJyA/IGRvbVV0aWxzLmRvY1dpZHRoKGVsZW0pIDogZG9tVXRpbHMuZG9jSGVpZ2h0KGVsZW0pO1xuICB9XG4gIHZhciB3aGljaCA9IG5hbWUgPT09ICd3aWR0aCcgPyBbJ0xlZnQnLCAnUmlnaHQnXSA6IFsnVG9wJywgJ0JvdHRvbSddO1xuICB2YXIgYm9yZGVyQm94VmFsdWUgPSBuYW1lID09PSAnd2lkdGgnID8gTWF0aC5mbG9vcihlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSA6IE1hdGguZmxvb3IoZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpO1xuICB2YXIgaXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveEZuKGVsZW0pO1xuICB2YXIgY3NzQm94VmFsdWUgPSAwO1xuICBpZiAoYm9yZGVyQm94VmFsdWUgPT09IG51bGwgfHwgYm9yZGVyQm94VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBib3JkZXJCb3hWYWx1ZSA8PSAwKSB7XG4gICAgYm9yZGVyQm94VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgLy8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW4gY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuICAgIGNzc0JveFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZVgoZWxlbSwgbmFtZSk7XG4gICAgaWYgKGNzc0JveFZhbHVlID09PSBudWxsIHx8IGNzc0JveFZhbHVlID09PSB1bmRlZmluZWQgfHwgTnVtYmVyKGNzc0JveFZhbHVlKSA8IDApIHtcbiAgICAgIGNzc0JveFZhbHVlID0gZWxlbS5zdHlsZVtuYW1lXSB8fCAwO1xuICAgIH1cbiAgICAvLyBOb3JtYWxpemUgJycsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuICAgIGNzc0JveFZhbHVlID0gTWF0aC5mbG9vcihwYXJzZUZsb2F0KGNzc0JveFZhbHVlKSkgfHwgMDtcbiAgfVxuICBpZiAoZXh0cmEgPT09IHVuZGVmaW5lZCkge1xuICAgIGV4dHJhID0gaXNCb3JkZXJCb3ggPyBCT1JERVJfSU5ERVggOiBDT05URU5UX0lOREVYO1xuICB9XG4gIHZhciBib3JkZXJCb3hWYWx1ZU9ySXNCb3JkZXJCb3ggPSBib3JkZXJCb3hWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IGlzQm9yZGVyQm94O1xuICB2YXIgdmFsID0gYm9yZGVyQm94VmFsdWUgfHwgY3NzQm94VmFsdWU7XG4gIGlmIChleHRyYSA9PT0gQ09OVEVOVF9JTkRFWCkge1xuICAgIGlmIChib3JkZXJCb3hWYWx1ZU9ySXNCb3JkZXJCb3gpIHtcbiAgICAgIHJldHVybiB2YWwgLSBnZXRQQk1XaWR0aChlbGVtLCBbJ2JvcmRlcicsICdwYWRkaW5nJ10sIHdoaWNoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNzc0JveFZhbHVlO1xuICB9IGVsc2UgaWYgKGJvcmRlckJveFZhbHVlT3JJc0JvcmRlckJveCkge1xuICAgIGlmIChleHRyYSA9PT0gQk9SREVSX0lOREVYKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsICsgKGV4dHJhID09PSBQQURESU5HX0lOREVYID8gLWdldFBCTVdpZHRoKGVsZW0sIFsnYm9yZGVyJ10sIHdoaWNoKSA6IGdldFBCTVdpZHRoKGVsZW0sIFsnbWFyZ2luJ10sIHdoaWNoKSk7XG4gIH1cbiAgcmV0dXJuIGNzc0JveFZhbHVlICsgZ2V0UEJNV2lkdGgoZWxlbSwgQk9YX01PREVMUy5zbGljZShleHRyYSksIHdoaWNoKTtcbn1cbnZhciBjc3NTaG93ID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIGRpc3BsYXk6ICdibG9jaydcbn07XG5cbi8vIGZpeCAjMTE5IDogaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9pc3N1ZXMvMTE5XG5mdW5jdGlvbiBnZXRXSElnbm9yZURpc3BsYXkoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuICB2YXIgdmFsO1xuICB2YXIgZWxlbSA9IGFyZ3NbMF07XG4gIC8vIGluIGNhc2UgZWxlbSBpcyB3aW5kb3dcbiAgLy8gZWxlbS5vZmZzZXRXaWR0aCA9PT0gdW5kZWZpbmVkXG4gIGlmIChlbGVtLm9mZnNldFdpZHRoICE9PSAwKSB7XG4gICAgdmFsID0gZ2V0V0guYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICBzd2FwKGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhbCA9IGdldFdILmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cbmVhY2goWyd3aWR0aCcsICdoZWlnaHQnXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGZpcnN0ID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gIGRvbVV0aWxzW1wib3V0ZXJcIi5jb25jYXQoZmlyc3QpXSA9IGZ1bmN0aW9uIChlbCwgaW5jbHVkZU1hcmdpbikge1xuICAgIHJldHVybiBlbCAmJiBnZXRXSElnbm9yZURpc3BsYXkoZWwsIG5hbWUsIGluY2x1ZGVNYXJnaW4gPyBNQVJHSU5fSU5ERVggOiBCT1JERVJfSU5ERVgpO1xuICB9O1xuICB2YXIgd2hpY2ggPSBuYW1lID09PSAnd2lkdGgnID8gWydMZWZ0JywgJ1JpZ2h0J10gOiBbJ1RvcCcsICdCb3R0b20nXTtcbiAgZG9tVXRpbHNbbmFtZV0gPSBmdW5jdGlvbiAoZWxlbSwgdikge1xuICAgIHZhciB2YWwgPSB2O1xuICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgdmFyIGlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3hGbihlbGVtKTtcbiAgICAgICAgaWYgKGlzQm9yZGVyQm94KSB7XG4gICAgICAgICAgdmFsICs9IGdldFBCTVdpZHRoKGVsZW0sIFsncGFkZGluZycsICdib3JkZXInXSwgd2hpY2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjc3MoZWxlbSwgbmFtZSwgdmFsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBlbGVtICYmIGdldFdISWdub3JlRGlzcGxheShlbGVtLCBuYW1lLCBDT05URU5UX0lOREVYKTtcbiAgfTtcbn0pO1xuZnVuY3Rpb24gbWl4KHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGkgaW4gZnJvbSkge1xuICAgIGlmIChmcm9tLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICB0b1tpXSA9IGZyb21baV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbnZhciB1dGlscyA9IHtcbiAgZ2V0V2luZG93OiBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICAgIGlmIChub2RlICYmIG5vZGUuZG9jdW1lbnQgJiYgbm9kZS5zZXRUaW1lb3V0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlO1xuICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgfSxcbiAgZ2V0RG9jdW1lbnQ6IGdldERvY3VtZW50LFxuICBvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChlbCwgdmFsdWUsIG9wdGlvbikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZXRPZmZzZXQoZWwsIHZhbHVlLCBvcHRpb24gfHwge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0T2Zmc2V0KGVsKTtcbiAgICB9XG4gIH0sXG4gIGlzV2luZG93OiBpc1dpbmRvdyxcbiAgZWFjaDogZWFjaCxcbiAgY3NzOiBjc3MsXG4gIGNsb25lOiBmdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgZm9yIChpIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICByZXRbaV0gPSBvYmpbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBvdmVyZmxvdyA9IG9iai5vdmVyZmxvdztcbiAgICBpZiAob3ZlcmZsb3cpIHtcbiAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHJldC5vdmVyZmxvd1tpXSA9IG9iai5vdmVyZmxvd1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICBtaXg6IG1peCxcbiAgZ2V0V2luZG93U2Nyb2xsTGVmdDogZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsTGVmdCh3KSB7XG4gICAgcmV0dXJuIGdldFNjcm9sbExlZnQodyk7XG4gIH0sXG4gIGdldFdpbmRvd1Njcm9sbFRvcDogZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsVG9wKHcpIHtcbiAgICByZXR1cm4gZ2V0U2Nyb2xsVG9wKHcpO1xuICB9LFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1dGlscy5taXgocmV0LCBpIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICB2aWV3cG9ydFdpZHRoOiAwLFxuICB2aWV3cG9ydEhlaWdodDogMFxufTtcbm1peCh1dGlscywgZG9tVXRpbHMpO1xuXG4vKipcbiAqIOW+l+WIsOS8muWvvOiHtOWFg+e0oOaYvuekuuS4jeWFqOeahOelluWFiOWFg+e0oFxuICovXG52YXIgZ2V0UGFyZW50ID0gdXRpbHMuZ2V0UGFyZW50O1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKHV0aWxzLmlzV2luZG93KGVsZW1lbnQpIHx8IGVsZW1lbnQubm9kZVR5cGUgPT09IDkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBpZSDov5nkuKrkuZ/kuI3mmK/lrozlhajlj6/ooYxcbiAgLypcbiAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNTBweDtoZWlnaHQ6IDEwMHB4O292ZXJmbG93OiBoaWRkZW5cIj5cbiAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNTBweDtoZWlnaHQ6IDEwMHB4O3Bvc2l0aW9uOiByZWxhdGl2ZTtcIiBpZD1cImQ2XCI+XG4gICDlhYPntKAgNiDpq5ggMTAwcHgg5a69IDUwcHg8YnIvPlxuICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICovXG4gIC8vIGVsZW1lbnQub2Zmc2V0UGFyZW50IGRvZXMgdGhlIHJpZ2h0IHRoaW5nIGluIGllNyBhbmQgYmVsb3cuIFJldHVybiBwYXJlbnQgd2l0aCBsYXlvdXQhXG4gIC8vICBJbiBvdGhlciBicm93c2VycyBpdCBvbmx5IGluY2x1ZGVzIGVsZW1lbnRzIHdpdGggcG9zaXRpb24gYWJzb2x1dGUsIHJlbGF0aXZlIG9yXG4gIC8vIGZpeGVkLCBub3QgZWxlbWVudHMgd2l0aCBvdmVyZmxvdyBzZXQgdG8gYXV0byBvciBzY3JvbGwuXG4gIC8vICAgICAgICBpZiAoVUEuaWUgJiYgaWVNb2RlIDwgOCkge1xuICAvLyAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgLy8gICAgICAgIH1cbiAgLy8g57uf5LiA55qEIG9mZnNldFBhcmVudCDmlrnms5VcbiAgdmFyIGRvYyA9IHV0aWxzLmdldERvY3VtZW50KGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICB2YXIgcGFyZW50O1xuICB2YXIgcG9zaXRpb25TdHlsZSA9IHV0aWxzLmNzcyhlbGVtZW50LCAncG9zaXRpb24nKTtcbiAgdmFyIHNraXBTdGF0aWMgPSBwb3NpdGlvblN0eWxlID09PSAnZml4ZWQnIHx8IHBvc2l0aW9uU3R5bGUgPT09ICdhYnNvbHV0ZSc7XG4gIGlmICghc2tpcFN0YXRpYykge1xuICAgIHJldHVybiBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJyA/IG51bGwgOiBnZXRQYXJlbnQoZWxlbWVudCk7XG4gIH1cbiAgZm9yIChwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbWVudCk7IHBhcmVudCAmJiBwYXJlbnQgIT09IGJvZHkgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSA5OyBwYXJlbnQgPSBnZXRQYXJlbnQocGFyZW50KSkge1xuICAgIHBvc2l0aW9uU3R5bGUgPSB1dGlscy5jc3MocGFyZW50LCAncG9zaXRpb24nKTtcbiAgICBpZiAocG9zaXRpb25TdHlsZSAhPT0gJ3N0YXRpYycpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgZ2V0UGFyZW50JDEgPSB1dGlscy5nZXRQYXJlbnQ7XG5mdW5jdGlvbiBpc0FuY2VzdG9yRml4ZWQoZWxlbWVudCkge1xuICBpZiAodXRpbHMuaXNXaW5kb3coZWxlbWVudCkgfHwgZWxlbWVudC5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZG9jID0gdXRpbHMuZ2V0RG9jdW1lbnQoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gIHZhciBwYXJlbnQgPSBudWxsO1xuICBmb3IgKHBhcmVudCA9IGdldFBhcmVudCQxKGVsZW1lbnQpO1xuICAvLyDkv67lpI3lhYPntKDkvY3kuo4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IOS4i+WvvOiHtOW0qea6g+mXrumimFxuICBwYXJlbnQgJiYgcGFyZW50ICE9PSBib2R5ICYmIHBhcmVudCAhPT0gZG9jOyBwYXJlbnQgPSBnZXRQYXJlbnQkMShwYXJlbnQpKSB7XG4gICAgdmFyIHBvc2l0aW9uU3R5bGUgPSB1dGlscy5jc3MocGFyZW50LCAncG9zaXRpb24nKTtcbiAgICBpZiAocG9zaXRpb25TdHlsZSA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiDojrflvpflhYPntKDnmoTmmL7npLrpg6jliIbnmoTljLrln59cbiAqL1xuZnVuY3Rpb24gZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50KGVsZW1lbnQsIGFsd2F5c0J5Vmlld3BvcnQpIHtcbiAgdmFyIHZpc2libGVSZWN0ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IEluZmluaXR5LFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IEluZmluaXR5XG4gIH07XG4gIHZhciBlbCA9IGdldE9mZnNldFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGRvYyA9IHV0aWxzLmdldERvY3VtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiB0aGUgdmlzaWJsZSByZWN0IGJ5IGNsaW1iaW5nIHRoZSBkb20gYWNjb3VudGluZyBmb3JcbiAgLy8gYWxsIHNjcm9sbGFibGUgY29udGFpbmVycy5cbiAgd2hpbGUgKGVsKSB7XG4gICAgLy8gY2xpZW50V2lkdGggaXMgemVybyBmb3IgaW5saW5lIGJsb2NrIGVsZW1lbnRzIGluIGllLlxuICAgIGlmICgobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgPT09IC0xIHx8IGVsLmNsaWVudFdpZHRoICE9PSAwKSAmJlxuICAgIC8vIGJvZHkgbWF5IGhhdmUgb3ZlcmZsb3cgc2V0IG9uIGl0LCB5ZXQgd2Ugc3RpbGwgZ2V0IHRoZSBlbnRpcmVcbiAgICAvLyB2aWV3cG9ydC4gSW4gc29tZSBicm93c2VycywgZWwub2Zmc2V0UGFyZW50IG1heSBiZVxuICAgIC8vIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgc28gY2hlY2sgZm9yIHRoYXQgdG9vLlxuICAgIGVsICE9PSBib2R5ICYmIGVsICE9PSBkb2N1bWVudEVsZW1lbnQgJiYgdXRpbHMuY3NzKGVsLCAnb3ZlcmZsb3cnKSAhPT0gJ3Zpc2libGUnKSB7XG4gICAgICB2YXIgcG9zID0gdXRpbHMub2Zmc2V0KGVsKTtcbiAgICAgIC8vIGFkZCBib3JkZXJcbiAgICAgIHBvcy5sZWZ0ICs9IGVsLmNsaWVudExlZnQ7XG4gICAgICBwb3MudG9wICs9IGVsLmNsaWVudFRvcDtcbiAgICAgIHZpc2libGVSZWN0LnRvcCA9IE1hdGgubWF4KHZpc2libGVSZWN0LnRvcCwgcG9zLnRvcCk7XG4gICAgICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LFxuICAgICAgLy8gY29uc2lkZXIgYXJlYSB3aXRob3V0IHNjcm9sbEJhclxuICAgICAgcG9zLmxlZnQgKyBlbC5jbGllbnRXaWR0aCk7XG4gICAgICB2aXNpYmxlUmVjdC5ib3R0b20gPSBNYXRoLm1pbih2aXNpYmxlUmVjdC5ib3R0b20sIHBvcy50b3AgKyBlbC5jbGllbnRIZWlnaHQpO1xuICAgICAgdmlzaWJsZVJlY3QubGVmdCA9IE1hdGgubWF4KHZpc2libGVSZWN0LmxlZnQsIHBvcy5sZWZ0KTtcbiAgICB9IGVsc2UgaWYgKGVsID09PSBib2R5IHx8IGVsID09PSBkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBlbCA9IGdldE9mZnNldFBhcmVudChlbCk7XG4gIH1cblxuICAvLyBTZXQgZWxlbWVudCBwb3NpdGlvbiB0byBmaXhlZFxuICAvLyBtYWtlIHN1cmUgYWJzb2x1dGUgZWxlbWVudCBpdHNlbGYgZG9uJ3QgYWZmZWN0IGl0J3MgdmlzaWJsZSBhcmVhXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzc2MDFcbiAgdmFyIG9yaWdpbmFsUG9zaXRpb24gPSBudWxsO1xuICBpZiAoIXV0aWxzLmlzV2luZG93KGVsZW1lbnQpICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDkpIHtcbiAgICBvcmlnaW5hbFBvc2l0aW9uID0gZWxlbWVudC5zdHlsZS5wb3NpdGlvbjtcbiAgICB2YXIgcG9zaXRpb24gPSB1dGlscy5jc3MoZWxlbWVudCwgJ3Bvc2l0aW9uJyk7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICB9XG4gIH1cbiAgdmFyIHNjcm9sbFggPSB1dGlscy5nZXRXaW5kb3dTY3JvbGxMZWZ0KHdpbik7XG4gIHZhciBzY3JvbGxZID0gdXRpbHMuZ2V0V2luZG93U2Nyb2xsVG9wKHdpbik7XG4gIHZhciB2aWV3cG9ydFdpZHRoID0gdXRpbHMudmlld3BvcnRXaWR0aCh3aW4pO1xuICB2YXIgdmlld3BvcnRIZWlnaHQgPSB1dGlscy52aWV3cG9ydEhlaWdodCh3aW4pO1xuICB2YXIgZG9jdW1lbnRXaWR0aCA9IGRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgdmFyIGRvY3VtZW50SGVpZ2h0ID0gZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodDtcblxuICAvLyBzY3JvbGxYWFggb24gaHRtbCBpcyBzeW5jIHdpdGggYm9keSB3aGljaCBtZWFucyBvdmVyZmxvdzogaGlkZGVuIG9uIGJvZHkgZ2V0cyB3cm9uZyBzY3JvbGxYWFguXG4gIC8vIFdlIHNob3VsZCBjdXQgdGhpcyBvdXJzZWxmLlxuICB2YXIgYm9keVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoYm9keSk7XG4gIGlmIChib2R5U3R5bGUub3ZlcmZsb3dYID09PSAnaGlkZGVuJykge1xuICAgIGRvY3VtZW50V2lkdGggPSB3aW4uaW5uZXJXaWR0aDtcbiAgfVxuICBpZiAoYm9keVN0eWxlLm92ZXJmbG93WSA9PT0gJ2hpZGRlbicpIHtcbiAgICBkb2N1bWVudEhlaWdodCA9IHdpbi5pbm5lckhlaWdodDtcbiAgfVxuXG4gIC8vIFJlc2V0IGVsZW1lbnQgcG9zaXRpb24gYWZ0ZXIgY2FsY3VsYXRlIHRoZSB2aXNpYmxlIGFyZWFcbiAgaWYgKGVsZW1lbnQuc3R5bGUpIHtcbiAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gb3JpZ2luYWxQb3NpdGlvbjtcbiAgfVxuICBpZiAoYWx3YXlzQnlWaWV3cG9ydCB8fCBpc0FuY2VzdG9yRml4ZWQoZWxlbWVudCkpIHtcbiAgICAvLyBDbGlwIGJ5IHZpZXdwb3J0J3Mgc2l6ZS5cbiAgICB2aXNpYmxlUmVjdC5sZWZ0ID0gTWF0aC5tYXgodmlzaWJsZVJlY3QubGVmdCwgc2Nyb2xsWCk7XG4gICAgdmlzaWJsZVJlY3QudG9wID0gTWF0aC5tYXgodmlzaWJsZVJlY3QudG9wLCBzY3JvbGxZKTtcbiAgICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LCBzY3JvbGxYICsgdmlld3BvcnRXaWR0aCk7XG4gICAgdmlzaWJsZVJlY3QuYm90dG9tID0gTWF0aC5taW4odmlzaWJsZVJlY3QuYm90dG9tLCBzY3JvbGxZICsgdmlld3BvcnRIZWlnaHQpO1xuICB9IGVsc2Uge1xuICAgIC8vIENsaXAgYnkgZG9jdW1lbnQncyBzaXplLlxuICAgIHZhciBtYXhWaXNpYmxlV2lkdGggPSBNYXRoLm1heChkb2N1bWVudFdpZHRoLCBzY3JvbGxYICsgdmlld3BvcnRXaWR0aCk7XG4gICAgdmlzaWJsZVJlY3QucmlnaHQgPSBNYXRoLm1pbih2aXNpYmxlUmVjdC5yaWdodCwgbWF4VmlzaWJsZVdpZHRoKTtcbiAgICB2YXIgbWF4VmlzaWJsZUhlaWdodCA9IE1hdGgubWF4KGRvY3VtZW50SGVpZ2h0LCBzY3JvbGxZICsgdmlld3BvcnRIZWlnaHQpO1xuICAgIHZpc2libGVSZWN0LmJvdHRvbSA9IE1hdGgubWluKHZpc2libGVSZWN0LmJvdHRvbSwgbWF4VmlzaWJsZUhlaWdodCk7XG4gIH1cbiAgcmV0dXJuIHZpc2libGVSZWN0LnRvcCA+PSAwICYmIHZpc2libGVSZWN0LmxlZnQgPj0gMCAmJiB2aXNpYmxlUmVjdC5ib3R0b20gPiB2aXNpYmxlUmVjdC50b3AgJiYgdmlzaWJsZVJlY3QucmlnaHQgPiB2aXNpYmxlUmVjdC5sZWZ0ID8gdmlzaWJsZVJlY3QgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBhZGp1c3RGb3JWaWV3cG9ydChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0LCBvdmVyZmxvdykge1xuICB2YXIgcG9zID0gdXRpbHMuY2xvbmUoZWxGdXR1cmVQb3MpO1xuICB2YXIgc2l6ZSA9IHtcbiAgICB3aWR0aDogZWxSZWdpb24ud2lkdGgsXG4gICAgaGVpZ2h0OiBlbFJlZ2lvbi5oZWlnaHRcbiAgfTtcbiAgaWYgKG92ZXJmbG93LmFkanVzdFggJiYgcG9zLmxlZnQgPCB2aXNpYmxlUmVjdC5sZWZ0KSB7XG4gICAgcG9zLmxlZnQgPSB2aXNpYmxlUmVjdC5sZWZ0O1xuICB9XG5cbiAgLy8gTGVmdCBlZGdlIGluc2lkZSBhbmQgcmlnaHQgZWRnZSBvdXRzaWRlIHZpZXdwb3J0LCB0cnkgdG8gcmVzaXplIGl0LlxuICBpZiAob3ZlcmZsb3cucmVzaXplV2lkdGggJiYgcG9zLmxlZnQgPj0gdmlzaWJsZVJlY3QubGVmdCAmJiBwb3MubGVmdCArIHNpemUud2lkdGggPiB2aXNpYmxlUmVjdC5yaWdodCkge1xuICAgIHNpemUud2lkdGggLT0gcG9zLmxlZnQgKyBzaXplLndpZHRoIC0gdmlzaWJsZVJlY3QucmlnaHQ7XG4gIH1cblxuICAvLyBSaWdodCBlZGdlIG91dHNpZGUgdmlld3BvcnQsIHRyeSB0byBtb3ZlIGl0LlxuICBpZiAob3ZlcmZsb3cuYWRqdXN0WCAmJiBwb3MubGVmdCArIHNpemUud2lkdGggPiB2aXNpYmxlUmVjdC5yaWdodCkge1xuICAgIC8vIOS/neivgeW3pui+ueeVjOWSjOWPr+inhuWMuuWfn+W3pui+ueeVjOWvuem9kFxuICAgIHBvcy5sZWZ0ID0gTWF0aC5tYXgodmlzaWJsZVJlY3QucmlnaHQgLSBzaXplLndpZHRoLCB2aXNpYmxlUmVjdC5sZWZ0KTtcbiAgfVxuXG4gIC8vIFRvcCBlZGdlIG91dHNpZGUgdmlld3BvcnQsIHRyeSB0byBtb3ZlIGl0LlxuICBpZiAob3ZlcmZsb3cuYWRqdXN0WSAmJiBwb3MudG9wIDwgdmlzaWJsZVJlY3QudG9wKSB7XG4gICAgcG9zLnRvcCA9IHZpc2libGVSZWN0LnRvcDtcbiAgfVxuXG4gIC8vIFRvcCBlZGdlIGluc2lkZSBhbmQgYm90dG9tIGVkZ2Ugb3V0c2lkZSB2aWV3cG9ydCwgdHJ5IHRvIHJlc2l6ZSBpdC5cbiAgaWYgKG92ZXJmbG93LnJlc2l6ZUhlaWdodCAmJiBwb3MudG9wID49IHZpc2libGVSZWN0LnRvcCAmJiBwb3MudG9wICsgc2l6ZS5oZWlnaHQgPiB2aXNpYmxlUmVjdC5ib3R0b20pIHtcbiAgICBzaXplLmhlaWdodCAtPSBwb3MudG9wICsgc2l6ZS5oZWlnaHQgLSB2aXNpYmxlUmVjdC5ib3R0b207XG4gIH1cblxuICAvLyBCb3R0b20gZWRnZSBvdXRzaWRlIHZpZXdwb3J0LCB0cnkgdG8gbW92ZSBpdC5cbiAgaWYgKG92ZXJmbG93LmFkanVzdFkgJiYgcG9zLnRvcCArIHNpemUuaGVpZ2h0ID4gdmlzaWJsZVJlY3QuYm90dG9tKSB7XG4gICAgLy8g5L+d6K+B5LiK6L6555WM5ZKM5Y+v6KeG5Yy65Z+f5LiK6L6555WM5a+56b2QXG4gICAgcG9zLnRvcCA9IE1hdGgubWF4KHZpc2libGVSZWN0LmJvdHRvbSAtIHNpemUuaGVpZ2h0LCB2aXNpYmxlUmVjdC50b3ApO1xuICB9XG4gIHJldHVybiB1dGlscy5taXgocG9zLCBzaXplKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVnaW9uKG5vZGUpIHtcbiAgdmFyIG9mZnNldDtcbiAgdmFyIHc7XG4gIHZhciBoO1xuICBpZiAoIXV0aWxzLmlzV2luZG93KG5vZGUpICYmIG5vZGUubm9kZVR5cGUgIT09IDkpIHtcbiAgICBvZmZzZXQgPSB1dGlscy5vZmZzZXQobm9kZSk7XG4gICAgdyA9IHV0aWxzLm91dGVyV2lkdGgobm9kZSk7XG4gICAgaCA9IHV0aWxzLm91dGVySGVpZ2h0KG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB3aW4gPSB1dGlscy5nZXRXaW5kb3cobm9kZSk7XG4gICAgb2Zmc2V0ID0ge1xuICAgICAgbGVmdDogdXRpbHMuZ2V0V2luZG93U2Nyb2xsTGVmdCh3aW4pLFxuICAgICAgdG9wOiB1dGlscy5nZXRXaW5kb3dTY3JvbGxUb3Aod2luKVxuICAgIH07XG4gICAgdyA9IHV0aWxzLnZpZXdwb3J0V2lkdGgod2luKTtcbiAgICBoID0gdXRpbHMudmlld3BvcnRIZWlnaHQod2luKTtcbiAgfVxuICBvZmZzZXQud2lkdGggPSB3O1xuICBvZmZzZXQuaGVpZ2h0ID0gaDtcbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuLyoqXG4gKiDojrflj5Ygbm9kZSDkuIrnmoQgYWxpZ24g5a+56b2Q54K5IOebuOWvueS6jumhtemdoueahOWdkOagh1xuICovXG5cbmZ1bmN0aW9uIGdldEFsaWduT2Zmc2V0KHJlZ2lvbiwgYWxpZ24pIHtcbiAgdmFyIFYgPSBhbGlnbi5jaGFyQXQoMCk7XG4gIHZhciBIID0gYWxpZ24uY2hhckF0KDEpO1xuICB2YXIgdyA9IHJlZ2lvbi53aWR0aDtcbiAgdmFyIGggPSByZWdpb24uaGVpZ2h0O1xuICB2YXIgeCA9IHJlZ2lvbi5sZWZ0O1xuICB2YXIgeSA9IHJlZ2lvbi50b3A7XG4gIGlmIChWID09PSAnYycpIHtcbiAgICB5ICs9IGggLyAyO1xuICB9IGVsc2UgaWYgKFYgPT09ICdiJykge1xuICAgIHkgKz0gaDtcbiAgfVxuICBpZiAoSCA9PT0gJ2MnKSB7XG4gICAgeCArPSB3IC8gMjtcbiAgfSBlbHNlIGlmIChIID09PSAncicpIHtcbiAgICB4ICs9IHc7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiB4LFxuICAgIHRvcDogeVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgcmVmTm9kZVJlZ2lvbiwgcG9pbnRzLCBvZmZzZXQsIHRhcmdldE9mZnNldCkge1xuICB2YXIgcDEgPSBnZXRBbGlnbk9mZnNldChyZWZOb2RlUmVnaW9uLCBwb2ludHNbMV0pO1xuICB2YXIgcDIgPSBnZXRBbGlnbk9mZnNldChlbFJlZ2lvbiwgcG9pbnRzWzBdKTtcbiAgdmFyIGRpZmYgPSBbcDIubGVmdCAtIHAxLmxlZnQsIHAyLnRvcCAtIHAxLnRvcF07XG4gIHJldHVybiB7XG4gICAgbGVmdDogTWF0aC5yb3VuZChlbFJlZ2lvbi5sZWZ0IC0gZGlmZlswXSArIG9mZnNldFswXSAtIHRhcmdldE9mZnNldFswXSksXG4gICAgdG9wOiBNYXRoLnJvdW5kKGVsUmVnaW9uLnRvcCAtIGRpZmZbMV0gKyBvZmZzZXRbMV0gLSB0YXJnZXRPZmZzZXRbMV0pXG4gIH07XG59XG5cbi8qKlxuICogYWxpZ24gZG9tIG5vZGUgZmxleGlibHlcbiAqIEBhdXRob3IgeWltaW5naGVAZ21haWwuY29tXG4gKi9cblxuLy8gaHR0cDovL3lpbWluZ2hlLml0ZXllLmNvbS9ibG9nLzExMjQ3MjBcblxuZnVuY3Rpb24gaXNGYWlsWChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSB7XG4gIHJldHVybiBlbEZ1dHVyZVBvcy5sZWZ0IDwgdmlzaWJsZVJlY3QubGVmdCB8fCBlbEZ1dHVyZVBvcy5sZWZ0ICsgZWxSZWdpb24ud2lkdGggPiB2aXNpYmxlUmVjdC5yaWdodDtcbn1cbmZ1bmN0aW9uIGlzRmFpbFkoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkge1xuICByZXR1cm4gZWxGdXR1cmVQb3MudG9wIDwgdmlzaWJsZVJlY3QudG9wIHx8IGVsRnV0dXJlUG9zLnRvcCArIGVsUmVnaW9uLmhlaWdodCA+IHZpc2libGVSZWN0LmJvdHRvbTtcbn1cbmZ1bmN0aW9uIGlzQ29tcGxldGVGYWlsWChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSB7XG4gIHJldHVybiBlbEZ1dHVyZVBvcy5sZWZ0ID4gdmlzaWJsZVJlY3QucmlnaHQgfHwgZWxGdXR1cmVQb3MubGVmdCArIGVsUmVnaW9uLndpZHRoIDwgdmlzaWJsZVJlY3QubGVmdDtcbn1cbmZ1bmN0aW9uIGlzQ29tcGxldGVGYWlsWShlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSB7XG4gIHJldHVybiBlbEZ1dHVyZVBvcy50b3AgPiB2aXNpYmxlUmVjdC5ib3R0b20gfHwgZWxGdXR1cmVQb3MudG9wICsgZWxSZWdpb24uaGVpZ2h0IDwgdmlzaWJsZVJlY3QudG9wO1xufVxuZnVuY3Rpb24gZmxpcChwb2ludHMsIHJlZywgbWFwKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgdXRpbHMuZWFjaChwb2ludHMsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0LnB1c2gocC5yZXBsYWNlKHJlZywgZnVuY3Rpb24gKG0pIHtcbiAgICAgIHJldHVybiBtYXBbbV07XG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIGZsaXBPZmZzZXQob2Zmc2V0LCBpbmRleCkge1xuICBvZmZzZXRbaW5kZXhdID0gLW9mZnNldFtpbmRleF07XG4gIHJldHVybiBvZmZzZXQ7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2Zmc2V0KHN0ciwgb2Zmc2V0TGVuKSB7XG4gIHZhciBuO1xuICBpZiAoLyUkLy50ZXN0KHN0cikpIHtcbiAgICBuID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSksIDEwKSAvIDEwMCAqIG9mZnNldExlbjtcbiAgfSBlbHNlIHtcbiAgICBuID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIH1cbiAgcmV0dXJuIG4gfHwgMDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldChvZmZzZXQsIGVsKSB7XG4gIG9mZnNldFswXSA9IGNvbnZlcnRPZmZzZXQob2Zmc2V0WzBdLCBlbC53aWR0aCk7XG4gIG9mZnNldFsxXSA9IGNvbnZlcnRPZmZzZXQob2Zmc2V0WzFdLCBlbC5oZWlnaHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSBlbFxuICogQHBhcmFtIHRndFJlZ2lvbiDlj4LnhafoioLngrnmiYDljaDnmoTljLrln586IHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH1cbiAqIEBwYXJhbSBhbGlnblxuICovXG5mdW5jdGlvbiBkb0FsaWduKGVsLCB0Z3RSZWdpb24sIGFsaWduLCBpc1RndFJlZ2lvblZpc2libGUpIHtcbiAgdmFyIHBvaW50cyA9IGFsaWduLnBvaW50cztcbiAgdmFyIG9mZnNldCA9IGFsaWduLm9mZnNldCB8fCBbMCwgMF07XG4gIHZhciB0YXJnZXRPZmZzZXQgPSBhbGlnbi50YXJnZXRPZmZzZXQgfHwgWzAsIDBdO1xuICB2YXIgb3ZlcmZsb3cgPSBhbGlnbi5vdmVyZmxvdztcbiAgdmFyIHNvdXJjZSA9IGFsaWduLnNvdXJjZSB8fCBlbDtcbiAgb2Zmc2V0ID0gW10uY29uY2F0KG9mZnNldCk7XG4gIHRhcmdldE9mZnNldCA9IFtdLmNvbmNhdCh0YXJnZXRPZmZzZXQpO1xuICBvdmVyZmxvdyA9IG92ZXJmbG93IHx8IHt9O1xuICB2YXIgbmV3T3ZlcmZsb3dDZmcgPSB7fTtcbiAgdmFyIGZhaWwgPSAwO1xuICB2YXIgYWx3YXlzQnlWaWV3cG9ydCA9ICEhKG92ZXJmbG93ICYmIG92ZXJmbG93LmFsd2F5c0J5Vmlld3BvcnQpO1xuICAvLyDlvZPliY3oioLngrnlj6/ku6XooqvmlL7nva7nmoTmmL7npLrljLrln59cbiAgdmFyIHZpc2libGVSZWN0ID0gZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50KHNvdXJjZSwgYWx3YXlzQnlWaWV3cG9ydCk7XG4gIC8vIOW9k+WJjeiKgueCueaJgOWNoOeahOWMuuWfnywgbGVmdC90b3Avd2lkdGgvaGVpZ2h0XG4gIHZhciBlbFJlZ2lvbiA9IGdldFJlZ2lvbihzb3VyY2UpO1xuICAvLyDlsIYgb2Zmc2V0IOi9rOaNouaIkOaVsOWAvO+8jOaUr+aMgeeZvuWIhuavlFxuICBub3JtYWxpemVPZmZzZXQob2Zmc2V0LCBlbFJlZ2lvbik7XG4gIG5vcm1hbGl6ZU9mZnNldCh0YXJnZXRPZmZzZXQsIHRndFJlZ2lvbik7XG4gIC8vIOW9k+WJjeiKgueCueWwhuimgeiiq+aUvue9rueahOS9jee9rlxuICB2YXIgZWxGdXR1cmVQb3MgPSBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgdGd0UmVnaW9uLCBwb2ludHMsIG9mZnNldCwgdGFyZ2V0T2Zmc2V0KTtcbiAgLy8g5b2T5YmN6IqC54K55bCG6KaB5omA5aSE55qE5Yy65Z+fXG4gIHZhciBuZXdFbFJlZ2lvbiA9IHV0aWxzLm1lcmdlKGVsUmVnaW9uLCBlbEZ1dHVyZVBvcyk7XG5cbiAgLy8g5aaC5p6c5Y+v6KeG5Yy65Z+f5LiN6IO95a6M5YWo5pS+572u5b2T5YmN6IqC54K55pe25YWB6K646LCD5pW0XG4gIGlmICh2aXNpYmxlUmVjdCAmJiAob3ZlcmZsb3cuYWRqdXN0WCB8fCBvdmVyZmxvdy5hZGp1c3RZKSAmJiBpc1RndFJlZ2lvblZpc2libGUpIHtcbiAgICBpZiAob3ZlcmZsb3cuYWRqdXN0WCkge1xuICAgICAgLy8g5aaC5p6c5qiq5ZCR5LiN6IO95pS+5LiLXG4gICAgICBpZiAoaXNGYWlsWChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAvLyDlr7npvZDkvY3nva7lj43kuItcbiAgICAgICAgdmFyIG5ld1BvaW50cyA9IGZsaXAocG9pbnRzLCAvW2xyXS9naSwge1xuICAgICAgICAgIGw6ICdyJyxcbiAgICAgICAgICByOiAnbCdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIOWBj+enu+mHj+S5n+WPjeS4i1xuICAgICAgICB2YXIgbmV3T2Zmc2V0ID0gZmxpcE9mZnNldChvZmZzZXQsIDApO1xuICAgICAgICB2YXIgbmV3VGFyZ2V0T2Zmc2V0ID0gZmxpcE9mZnNldCh0YXJnZXRPZmZzZXQsIDApO1xuICAgICAgICB2YXIgbmV3RWxGdXR1cmVQb3MgPSBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgdGd0UmVnaW9uLCBuZXdQb2ludHMsIG5ld09mZnNldCwgbmV3VGFyZ2V0T2Zmc2V0KTtcbiAgICAgICAgaWYgKCFpc0NvbXBsZXRlRmFpbFgobmV3RWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkpIHtcbiAgICAgICAgICBmYWlsID0gMTtcbiAgICAgICAgICBwb2ludHMgPSBuZXdQb2ludHM7XG4gICAgICAgICAgb2Zmc2V0ID0gbmV3T2Zmc2V0O1xuICAgICAgICAgIHRhcmdldE9mZnNldCA9IG5ld1RhcmdldE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3ZlcmZsb3cuYWRqdXN0WSkge1xuICAgICAgLy8g5aaC5p6c57q15ZCR5LiN6IO95pS+5LiLXG4gICAgICBpZiAoaXNGYWlsWShlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAvLyDlr7npvZDkvY3nva7lj43kuItcbiAgICAgICAgdmFyIF9uZXdQb2ludHMgPSBmbGlwKHBvaW50cywgL1t0Yl0vZ2ksIHtcbiAgICAgICAgICB0OiAnYicsXG4gICAgICAgICAgYjogJ3QnXG4gICAgICAgIH0pO1xuICAgICAgICAvLyDlgY/np7vph4/kuZ/lj43kuItcbiAgICAgICAgdmFyIF9uZXdPZmZzZXQgPSBmbGlwT2Zmc2V0KG9mZnNldCwgMSk7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0T2Zmc2V0ID0gZmxpcE9mZnNldCh0YXJnZXRPZmZzZXQsIDEpO1xuICAgICAgICB2YXIgX25ld0VsRnV0dXJlUG9zID0gZ2V0RWxGdXR1cmVQb3MoZWxSZWdpb24sIHRndFJlZ2lvbiwgX25ld1BvaW50cywgX25ld09mZnNldCwgX25ld1RhcmdldE9mZnNldCk7XG4gICAgICAgIGlmICghaXNDb21wbGV0ZUZhaWxZKF9uZXdFbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAgIGZhaWwgPSAxO1xuICAgICAgICAgIHBvaW50cyA9IF9uZXdQb2ludHM7XG4gICAgICAgICAgb2Zmc2V0ID0gX25ld09mZnNldDtcbiAgICAgICAgICB0YXJnZXRPZmZzZXQgPSBfbmV3VGFyZ2V0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g5aaC5p6c5aSx6LSl77yM6YeN5paw6K6h566X5b2T5YmN6IqC54K55bCG6KaB6KKr5pS+572u55qE5L2N572uXG4gICAgaWYgKGZhaWwpIHtcbiAgICAgIGVsRnV0dXJlUG9zID0gZ2V0RWxGdXR1cmVQb3MoZWxSZWdpb24sIHRndFJlZ2lvbiwgcG9pbnRzLCBvZmZzZXQsIHRhcmdldE9mZnNldCk7XG4gICAgICB1dGlscy5taXgobmV3RWxSZWdpb24sIGVsRnV0dXJlUG9zKTtcbiAgICB9XG4gICAgdmFyIGlzU3RpbGxGYWlsWCA9IGlzRmFpbFgoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCk7XG4gICAgdmFyIGlzU3RpbGxGYWlsWSA9IGlzRmFpbFkoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCk7XG4gICAgLy8g5qOA5p+l5Y+N5LiL5ZCO55qE5L2N572u5piv5ZCm5Y+v5Lul5pS+5LiL5LqG77yM5aaC5p6c5LuN54S25pS+5LiN5LiL77yaXG4gICAgLy8gMS4g5aSN5Y6f5L+u5pS56L+H55qE5a6a5L2N5Y+C5pWwXG4gICAgaWYgKGlzU3RpbGxGYWlsWCB8fCBpc1N0aWxsRmFpbFkpIHtcbiAgICAgIHZhciBfbmV3UG9pbnRzMiA9IHBvaW50cztcblxuICAgICAgLy8g6YeN572u5a+55bqU6YOo5YiG55qE57+76L2s6YC76L6RXG4gICAgICBpZiAoaXNTdGlsbEZhaWxYKSB7XG4gICAgICAgIF9uZXdQb2ludHMyID0gZmxpcChwb2ludHMsIC9bbHJdL2dpLCB7XG4gICAgICAgICAgbDogJ3InLFxuICAgICAgICAgIHI6ICdsJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N0aWxsRmFpbFkpIHtcbiAgICAgICAgX25ld1BvaW50czIgPSBmbGlwKHBvaW50cywgL1t0Yl0vZ2ksIHtcbiAgICAgICAgICB0OiAnYicsXG4gICAgICAgICAgYjogJ3QnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcG9pbnRzID0gX25ld1BvaW50czI7XG4gICAgICBvZmZzZXQgPSBhbGlnbi5vZmZzZXQgfHwgWzAsIDBdO1xuICAgICAgdGFyZ2V0T2Zmc2V0ID0gYWxpZ24udGFyZ2V0T2Zmc2V0IHx8IFswLCAwXTtcbiAgICB9XG4gICAgLy8gMi4g5Y+q5pyJ5oyH5a6a5LqG5Y+v5Lul6LCD5pW05b2T5YmN5pa55ZCR5omN6LCD5pW0XG4gICAgbmV3T3ZlcmZsb3dDZmcuYWRqdXN0WCA9IG92ZXJmbG93LmFkanVzdFggJiYgaXNTdGlsbEZhaWxYO1xuICAgIG5ld092ZXJmbG93Q2ZnLmFkanVzdFkgPSBvdmVyZmxvdy5hZGp1c3RZICYmIGlzU3RpbGxGYWlsWTtcblxuICAgIC8vIOehruWunuimgeiwg+aVtO+8jOeUmuiHs+WPr+iDveS8muiwg+aVtOmrmOW6puWuveW6plxuICAgIGlmIChuZXdPdmVyZmxvd0NmZy5hZGp1c3RYIHx8IG5ld092ZXJmbG93Q2ZnLmFkanVzdFkpIHtcbiAgICAgIG5ld0VsUmVnaW9uID0gYWRqdXN0Rm9yVmlld3BvcnQoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCwgbmV3T3ZlcmZsb3dDZmcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG5lZWQganVkZ2UgdG8gaW4gY2FzZSBzZXQgZml4ZWQgd2l0aCBpbiBjc3Mgb24gaGVpZ2h0IGF1dG8gZWxlbWVudFxuICBpZiAobmV3RWxSZWdpb24ud2lkdGggIT09IGVsUmVnaW9uLndpZHRoKSB7XG4gICAgdXRpbHMuY3NzKHNvdXJjZSwgJ3dpZHRoJywgdXRpbHMud2lkdGgoc291cmNlKSArIG5ld0VsUmVnaW9uLndpZHRoIC0gZWxSZWdpb24ud2lkdGgpO1xuICB9XG4gIGlmIChuZXdFbFJlZ2lvbi5oZWlnaHQgIT09IGVsUmVnaW9uLmhlaWdodCkge1xuICAgIHV0aWxzLmNzcyhzb3VyY2UsICdoZWlnaHQnLCB1dGlscy5oZWlnaHQoc291cmNlKSArIG5ld0VsUmVnaW9uLmhlaWdodCAtIGVsUmVnaW9uLmhlaWdodCk7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20va2lzc3l0ZWFtL2tpc3N5L2lzc3Vlcy8xOTBcbiAgLy8g55u45a+55LqO5bGP5bmV5L2N572u5rKh5Y+Y77yM6ICMIGxlZnQvdG9wIOWPmOS6hlxuICAvLyDkvovlpoIgPGRpdiAncmVsYXRpdmUnPjxlbCBhYnNvbHV0ZT48L2Rpdj5cbiAgdXRpbHMub2Zmc2V0KHNvdXJjZSwge1xuICAgIGxlZnQ6IG5ld0VsUmVnaW9uLmxlZnQsXG4gICAgdG9wOiBuZXdFbFJlZ2lvbi50b3BcbiAgfSwge1xuICAgIHVzZUNzc1JpZ2h0OiBhbGlnbi51c2VDc3NSaWdodCxcbiAgICB1c2VDc3NCb3R0b206IGFsaWduLnVzZUNzc0JvdHRvbSxcbiAgICB1c2VDc3NUcmFuc2Zvcm06IGFsaWduLnVzZUNzc1RyYW5zZm9ybSxcbiAgICBpZ25vcmVTaGFrZTogYWxpZ24uaWdub3JlU2hha2VcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcG9pbnRzOiBwb2ludHMsXG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG4gICAgb3ZlcmZsb3c6IG5ld092ZXJmbG93Q2ZnXG4gIH07XG59XG4vKipcbiAqICAyMDEyLTA0LTI2IHlpbWluZ2hlQGdtYWlsLmNvbVxuICogICAtIOS8mOWMluaZuuiDveWvuem9kOeul+azlVxuICogICAtIOaFjueUqCByZXNpemVYWFxuICpcbiAqICAyMDExLTA3LTEzIHlpbWluZ2hlQGdtYWlsLmNvbSBub3RlOlxuICogICAtIOWinuWKoOaZuuiDveWvuem9kO+8jOS7peWPiuWkp+Wwj+iwg+aVtOmAiemhuVxuICoqL1xuXG5mdW5jdGlvbiBpc091dE9mVmlzaWJsZVJlY3QodGFyZ2V0LCBhbHdheXNCeVZpZXdwb3J0KSB7XG4gIHZhciB2aXNpYmxlUmVjdCA9IGdldFZpc2libGVSZWN0Rm9yRWxlbWVudCh0YXJnZXQsIGFsd2F5c0J5Vmlld3BvcnQpO1xuICB2YXIgdGFyZ2V0UmVnaW9uID0gZ2V0UmVnaW9uKHRhcmdldCk7XG4gIHJldHVybiAhdmlzaWJsZVJlY3QgfHwgdGFyZ2V0UmVnaW9uLmxlZnQgKyB0YXJnZXRSZWdpb24ud2lkdGggPD0gdmlzaWJsZVJlY3QubGVmdCB8fCB0YXJnZXRSZWdpb24udG9wICsgdGFyZ2V0UmVnaW9uLmhlaWdodCA8PSB2aXNpYmxlUmVjdC50b3AgfHwgdGFyZ2V0UmVnaW9uLmxlZnQgPj0gdmlzaWJsZVJlY3QucmlnaHQgfHwgdGFyZ2V0UmVnaW9uLnRvcCA+PSB2aXNpYmxlUmVjdC5ib3R0b207XG59XG5mdW5jdGlvbiBhbGlnbkVsZW1lbnQoZWwsIHJlZk5vZGUsIGFsaWduKSB7XG4gIHZhciB0YXJnZXQgPSBhbGlnbi50YXJnZXQgfHwgcmVmTm9kZTtcbiAgdmFyIHJlZk5vZGVSZWdpb24gPSBnZXRSZWdpb24odGFyZ2V0KTtcbiAgdmFyIGlzVGFyZ2V0Tm90T3V0T2ZWaXNpYmxlID0gIWlzT3V0T2ZWaXNpYmxlUmVjdCh0YXJnZXQsIGFsaWduLm92ZXJmbG93ICYmIGFsaWduLm92ZXJmbG93LmFsd2F5c0J5Vmlld3BvcnQpO1xuICByZXR1cm4gZG9BbGlnbihlbCwgcmVmTm9kZVJlZ2lvbiwgYWxpZ24sIGlzVGFyZ2V0Tm90T3V0T2ZWaXNpYmxlKTtcbn1cbmFsaWduRWxlbWVudC5fX2dldE9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudDtcbmFsaWduRWxlbWVudC5fX2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCA9IGdldFZpc2libGVSZWN0Rm9yRWxlbWVudDtcblxuLyoqXG4gKiBgdGd0UG9pbnRgOiB7IHBhZ2VYLCBwYWdlWSB9IG9yIHsgY2xpZW50WCwgY2xpZW50WSB9LlxuICogSWYgY2xpZW50IHBvc2l0aW9uIHByb3ZpZGVkLCB3aWxsIGludGVybmFsIGNvbnZlcnQgdG8gcGFnZSBwb3NpdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBhbGlnblBvaW50KGVsLCB0Z3RQb2ludCwgYWxpZ24pIHtcbiAgdmFyIHBhZ2VYO1xuICB2YXIgcGFnZVk7XG4gIHZhciBkb2MgPSB1dGlscy5nZXREb2N1bWVudChlbCk7XG4gIHZhciB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgdmFyIHNjcm9sbFggPSB1dGlscy5nZXRXaW5kb3dTY3JvbGxMZWZ0KHdpbik7XG4gIHZhciBzY3JvbGxZID0gdXRpbHMuZ2V0V2luZG93U2Nyb2xsVG9wKHdpbik7XG4gIHZhciB2aWV3cG9ydFdpZHRoID0gdXRpbHMudmlld3BvcnRXaWR0aCh3aW4pO1xuICB2YXIgdmlld3BvcnRIZWlnaHQgPSB1dGlscy52aWV3cG9ydEhlaWdodCh3aW4pO1xuICBpZiAoJ3BhZ2VYJyBpbiB0Z3RQb2ludCkge1xuICAgIHBhZ2VYID0gdGd0UG9pbnQucGFnZVg7XG4gIH0gZWxzZSB7XG4gICAgcGFnZVggPSBzY3JvbGxYICsgdGd0UG9pbnQuY2xpZW50WDtcbiAgfVxuICBpZiAoJ3BhZ2VZJyBpbiB0Z3RQb2ludCkge1xuICAgIHBhZ2VZID0gdGd0UG9pbnQucGFnZVk7XG4gIH0gZWxzZSB7XG4gICAgcGFnZVkgPSBzY3JvbGxZICsgdGd0UG9pbnQuY2xpZW50WTtcbiAgfVxuICB2YXIgdGd0UmVnaW9uID0ge1xuICAgIGxlZnQ6IHBhZ2VYLFxuICAgIHRvcDogcGFnZVksXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG4gIHZhciBwb2ludEluVmlldyA9IHBhZ2VYID49IDAgJiYgcGFnZVggPD0gc2Nyb2xsWCArIHZpZXdwb3J0V2lkdGggJiYgcGFnZVkgPj0gMCAmJiBwYWdlWSA8PSBzY3JvbGxZICsgdmlld3BvcnRIZWlnaHQ7XG5cbiAgLy8gUHJvdmlkZSBkZWZhdWx0IHRhcmdldCBwb2ludFxuICB2YXIgcG9pbnRzID0gW2FsaWduLnBvaW50c1swXSwgJ2NjJ107XG4gIHJldHVybiBkb0FsaWduKGVsLCB0Z3RSZWdpb24sIF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBhbGlnbiksIHt9LCB7XG4gICAgcG9pbnRzOiBwb2ludHNcbiAgfSksIHBvaW50SW5WaWV3KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWxpZ25FbGVtZW50O1xuZXhwb3J0IHsgYWxpZ25FbGVtZW50LCBhbGlnblBvaW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcInJjLXV0aWwvZXMvRG9tL2NvbnRhaW5zXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lUG9pbnQocHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbmV4dCkgcmV0dXJuIHRydWU7XG4gIGlmICghcHJldiB8fCAhbmV4dCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICgncGFnZVgnIGluIG5leHQgJiYgJ3BhZ2VZJyBpbiBuZXh0KSB7XG4gICAgcmV0dXJuIHByZXYucGFnZVggPT09IG5leHQucGFnZVggJiYgcHJldi5wYWdlWSA9PT0gbmV4dC5wYWdlWTtcbiAgfVxuXG4gIGlmICgnY2xpZW50WCcgaW4gbmV4dCAmJiAnY2xpZW50WScgaW4gbmV4dCkge1xuICAgIHJldHVybiBwcmV2LmNsaWVudFggPT09IG5leHQuY2xpZW50WCAmJiBwcmV2LmNsaWVudFkgPT09IG5leHQuY2xpZW50WTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlRm9jdXMoYWN0aXZlRWxlbWVudCwgY29udGFpbmVyKSB7XG4gIC8vIEZvY3VzIGJhY2sgaWYgaXMgaW4gdGhlIGNvbnRhaW5lclxuICBpZiAoYWN0aXZlRWxlbWVudCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBjb250YWlucyhjb250YWluZXIsIGFjdGl2ZUVsZW1lbnQpICYmIHR5cGVvZiBhY3RpdmVFbGVtZW50LmZvY3VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbW9uaXRvclJlc2l6ZShlbGVtZW50LCBjYWxsYmFjaykge1xuICB2YXIgcHJldldpZHRoID0gbnVsbDtcbiAgdmFyIHByZXZIZWlnaHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIG9uUmVzaXplKF9yZWYpIHtcbiAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAxKSxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZjJbMF0udGFyZ2V0O1xuXG4gICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGFyZ2V0KSkgcmV0dXJuO1xuXG4gICAgdmFyIF90YXJnZXQkZ2V0Qm91bmRpbmdDbCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgd2lkdGggPSBfdGFyZ2V0JGdldEJvdW5kaW5nQ2wud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF90YXJnZXQkZ2V0Qm91bmRpbmdDbC5oZWlnaHQ7XG5cbiAgICB2YXIgZml4ZWRXaWR0aCA9IE1hdGguZmxvb3Iod2lkdGgpO1xuICAgIHZhciBmaXhlZEhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0KTtcblxuICAgIGlmIChwcmV2V2lkdGggIT09IGZpeGVkV2lkdGggfHwgcHJldkhlaWdodCAhPT0gZml4ZWRIZWlnaHQpIHtcbiAgICAgIC8vIGh0dHBzOi8vd2Via2l0Lm9yZy9ibG9nLzk5OTcvcmVzaXplb2JzZXJ2ZXItaW4td2Via2l0L1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICB3aWR0aDogZml4ZWRXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGZpeGVkSGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJldldpZHRoID0gZml4ZWRXaWR0aDtcbiAgICBwcmV2SGVpZ2h0ID0gZml4ZWRIZWlnaHQ7XG4gIH1cblxuICB2YXIgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIob25SZXNpemUpO1xuXG4gIGlmIChlbGVtZW50KSB7XG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9O1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuXG4vKipcbiAqIFJlbW92ZWQgcHJvcHM6XG4gKiAgLSBjaGlsZHJlblByb3BzXG4gKi9cbmltcG9ydCB7IGFsaWduRWxlbWVudCwgYWxpZ25Qb2ludCB9IGZyb20gJ2RvbS1hbGlnbic7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwicmMtdXRpbC9lcy9pc0VxdWFsXCI7XG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lciBmcm9tIFwicmMtdXRpbC9lcy9Eb20vYWRkRXZlbnRMaXN0ZW5lclwiO1xuaW1wb3J0IGlzVmlzaWJsZSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vaXNWaXNpYmxlXCI7XG5pbXBvcnQgdXNlTGF5b3V0RWZmZWN0IGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZUxheW91dEVmZmVjdFwiO1xuaW1wb3J0IHsgY29tcG9zZVJlZiB9IGZyb20gXCJyYy11dGlsL2VzL3JlZlwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VCdWZmZXIgZnJvbSBcIi4vaG9va3MvdXNlQnVmZmVyXCI7XG5pbXBvcnQgeyBpc1NhbWVQb2ludCwgbW9uaXRvclJlc2l6ZSwgcmVzdG9yZUZvY3VzIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5mdW5jdGlvbiBnZXRFbGVtZW50KGZ1bmMpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGZ1bmMoKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9pbnQocG9pbnQpIHtcbiAgaWYgKF90eXBlb2YocG9pbnQpICE9PSAnb2JqZWN0JyB8fCAhcG9pbnQpIHJldHVybiBudWxsO1xuICByZXR1cm4gcG9pbnQ7XG59XG5cbnZhciBBbGlnbiA9IGZ1bmN0aW9uIEFsaWduKF9yZWYsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgZGlzYWJsZWQgPSBfcmVmLmRpc2FibGVkLFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICBhbGlnbiA9IF9yZWYuYWxpZ24sXG4gICAgICBvbkFsaWduID0gX3JlZi5vbkFsaWduLFxuICAgICAgbW9uaXRvcldpbmRvd1Jlc2l6ZSA9IF9yZWYubW9uaXRvcldpbmRvd1Jlc2l6ZSxcbiAgICAgIF9yZWYkbW9uaXRvckJ1ZmZlclRpbSA9IF9yZWYubW9uaXRvckJ1ZmZlclRpbWUsXG4gICAgICBtb25pdG9yQnVmZmVyVGltZSA9IF9yZWYkbW9uaXRvckJ1ZmZlclRpbSA9PT0gdm9pZCAwID8gMCA6IF9yZWYkbW9uaXRvckJ1ZmZlclRpbTtcbiAgdmFyIGNhY2hlUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgLyoqIFBvcHVwIG5vZGUgcmVmICovXG5cbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGNoaWxkTm9kZSA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pOyAvLyA9PT09PT09PT09PT09PT09PT09PT0gQWxpZ24gPT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBXZSBzYXZlIHRoZSBwcm9wcyBoZXJlIHRvIGF2b2lkIGNsb3N1cmUgbWFrZXMgcHJvcHMgb29kXG5cbiAgdmFyIGZvcmNlQWxpZ25Qcm9wc1JlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGZvcmNlQWxpZ25Qcm9wc1JlZi5jdXJyZW50LmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIGZvcmNlQWxpZ25Qcm9wc1JlZi5jdXJyZW50LnRhcmdldCA9IHRhcmdldDtcbiAgZm9yY2VBbGlnblByb3BzUmVmLmN1cnJlbnQuYWxpZ24gPSBhbGlnbjtcbiAgZm9yY2VBbGlnblByb3BzUmVmLmN1cnJlbnQub25BbGlnbiA9IG9uQWxpZ247XG5cbiAgdmFyIF91c2VCdWZmZXIgPSB1c2VCdWZmZXIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfZm9yY2VBbGlnblByb3BzUmVmJGMgPSBmb3JjZUFsaWduUHJvcHNSZWYuY3VycmVudCxcbiAgICAgICAgbGF0ZXN0RGlzYWJsZWQgPSBfZm9yY2VBbGlnblByb3BzUmVmJGMuZGlzYWJsZWQsXG4gICAgICAgIGxhdGVzdFRhcmdldCA9IF9mb3JjZUFsaWduUHJvcHNSZWYkYy50YXJnZXQsXG4gICAgICAgIGxhdGVzdEFsaWduID0gX2ZvcmNlQWxpZ25Qcm9wc1JlZiRjLmFsaWduLFxuICAgICAgICBsYXRlc3RPbkFsaWduID0gX2ZvcmNlQWxpZ25Qcm9wc1JlZiRjLm9uQWxpZ247XG4gICAgdmFyIHNvdXJjZSA9IG5vZGVSZWYuY3VycmVudDtcblxuICAgIGlmICghbGF0ZXN0RGlzYWJsZWQgJiYgbGF0ZXN0VGFyZ2V0ICYmIHNvdXJjZSkge1xuICAgICAgdmFyIF9yZXN1bHQ7XG5cbiAgICAgIHZhciBfZWxlbWVudCA9IGdldEVsZW1lbnQobGF0ZXN0VGFyZ2V0KTtcblxuICAgICAgdmFyIF9wb2ludCA9IGdldFBvaW50KGxhdGVzdFRhcmdldCk7XG5cbiAgICAgIGNhY2hlUmVmLmN1cnJlbnQuZWxlbWVudCA9IF9lbGVtZW50O1xuICAgICAgY2FjaGVSZWYuY3VycmVudC5wb2ludCA9IF9wb2ludDtcbiAgICAgIGNhY2hlUmVmLmN1cnJlbnQuYWxpZ24gPSBsYXRlc3RBbGlnbjsgLy8gSUUgbG9zZSBmb2N1cyBhZnRlciBlbGVtZW50IHJlYWxpZ25cbiAgICAgIC8vIFdlIHNob3VsZCByZWNvcmQgYWN0aXZlRWxlbWVudCBhbmQgcmVzdG9yZSBsYXRlclxuXG4gICAgICB2YXIgX2RvY3VtZW50ID0gZG9jdW1lbnQsXG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IF9kb2N1bWVudC5hY3RpdmVFbGVtZW50OyAvLyBXZSBvbmx5IGFsaWduIHdoZW4gZWxlbWVudCBpcyB2aXNpYmxlXG5cbiAgICAgIGlmIChfZWxlbWVudCAmJiBpc1Zpc2libGUoX2VsZW1lbnQpKSB7XG4gICAgICAgIF9yZXN1bHQgPSBhbGlnbkVsZW1lbnQoc291cmNlLCBfZWxlbWVudCwgbGF0ZXN0QWxpZ24pO1xuICAgICAgfSBlbHNlIGlmIChfcG9pbnQpIHtcbiAgICAgICAgX3Jlc3VsdCA9IGFsaWduUG9pbnQoc291cmNlLCBfcG9pbnQsIGxhdGVzdEFsaWduKTtcbiAgICAgIH1cblxuICAgICAgcmVzdG9yZUZvY3VzKGFjdGl2ZUVsZW1lbnQsIHNvdXJjZSk7XG5cbiAgICAgIGlmIChsYXRlc3RPbkFsaWduICYmIF9yZXN1bHQpIHtcbiAgICAgICAgbGF0ZXN0T25BbGlnbihzb3VyY2UsIF9yZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIG1vbml0b3JCdWZmZXJUaW1lKSxcbiAgICAgIF91c2VCdWZmZXIyID0gX3NsaWNlZFRvQXJyYXkoX3VzZUJ1ZmZlciwgMiksXG4gICAgICBfZm9yY2VBbGlnbiA9IF91c2VCdWZmZXIyWzBdLFxuICAgICAgY2FuY2VsRm9yY2VBbGlnbiA9IF91c2VCdWZmZXIyWzFdOyAvLyA9PT09PT09PT09PT09PT09PT09PT0gRWZmZWN0ID09PT09PT09PT09PT09PT09PT09PVxuICAvLyBIYW5kbGUgcHJvcHMgY2hhbmdlXG5cblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZWxlbWVudCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRFbGVtZW50ID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgICBfUmVhY3QkdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlMywgMiksXG4gICAgICBwb2ludCA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRQb2ludCA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRFbGVtZW50KGdldEVsZW1lbnQodGFyZ2V0KSk7XG4gICAgc2V0UG9pbnQoZ2V0UG9pbnQodGFyZ2V0KSk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWNoZVJlZi5jdXJyZW50LmVsZW1lbnQgIT09IGVsZW1lbnQgfHwgIWlzU2FtZVBvaW50KGNhY2hlUmVmLmN1cnJlbnQucG9pbnQsIHBvaW50KSB8fCAhaXNFcXVhbChjYWNoZVJlZi5jdXJyZW50LmFsaWduLCBhbGlnbikpIHtcbiAgICAgIF9mb3JjZUFsaWduKCk7XG4gICAgfVxuICB9KTsgLy8gV2F0Y2ggcG9wdXAgZWxlbWVudCByZXNpemVcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5jZWxGbiA9IG1vbml0b3JSZXNpemUobm9kZVJlZi5jdXJyZW50LCBfZm9yY2VBbGlnbik7XG4gICAgcmV0dXJuIGNhbmNlbEZuO1xuICB9LCBbbm9kZVJlZi5jdXJyZW50XSk7IC8vIFdhdGNoIHRhcmdldCBlbGVtZW50IHJlc2l6ZVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhbmNlbEZuID0gbW9uaXRvclJlc2l6ZShlbGVtZW50LCBfZm9yY2VBbGlnbik7XG4gICAgcmV0dXJuIGNhbmNlbEZuO1xuICB9LCBbZWxlbWVudF0pOyAvLyBMaXN0ZW4gZm9yIGRpc2FibGVkIGNoYW5nZVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgX2ZvcmNlQWxpZ24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuY2VsRm9yY2VBbGlnbigpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVkXSk7IC8vIExpc3RlbiBmb3Igd2luZG93IHJlc2l6ZVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1vbml0b3JXaW5kb3dSZXNpemUpIHtcbiAgICAgIHZhciBjYW5jZWxGbiA9IGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAncmVzaXplJywgX2ZvcmNlQWxpZ24pO1xuICAgICAgcmV0dXJuIGNhbmNlbEZuLnJlbW92ZTtcbiAgICB9XG4gIH0sIFttb25pdG9yV2luZG93UmVzaXplXSk7IC8vIENsZWFyIGFsbCBpZiB1bm1vdW50XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2FuY2VsRm9yY2VBbGlnbigpO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PSBSZWYgPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JjZUFsaWduOiBmdW5jdGlvbiBmb3JjZUFsaWduKCkge1xuICAgICAgICByZXR1cm4gX2ZvcmNlQWxpZ24odHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7IC8vID09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09XG5cbiAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGROb2RlKSkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGROb2RlLCB7XG4gICAgICByZWY6IGNvbXBvc2VSZWYoY2hpbGROb2RlLnJlZiwgbm9kZVJlZilcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE5vZGU7XG59O1xuXG52YXIgUmNBbGlnbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEFsaWduKTtcblJjQWxpZ24uZGlzcGxheU5hbWUgPSAnQWxpZ24nO1xuZXhwb3J0IGRlZmF1bHQgUmNBbGlnbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjYWxsYmFjaywgYnVmZmVyKSB7XG4gIHZhciBjYWxsZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgdGltZW91dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBjYW5jZWxUcmlnZ2VyKCkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dFJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaWdnZXIoZm9yY2UpIHtcbiAgICBjYW5jZWxUcmlnZ2VyKCk7XG5cbiAgICBpZiAoIWNhbGxlZFJlZi5jdXJyZW50IHx8IGZvcmNlID09PSB0cnVlKSB7XG4gICAgICBpZiAoY2FsbGJhY2soZm9yY2UpID09PSBmYWxzZSkge1xuICAgICAgICAvLyBOb3QgZGVsYXkgc2luY2UgY2FsbGJhY2sgY2FuY2VsbGVkIHNlbGZcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjYWxsZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICB0aW1lb3V0UmVmLmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9LCBidWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0UmVmLmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHRyaWdnZXIoKTtcbiAgICAgIH0sIGJ1ZmZlcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFt0cmlnZ2VyLCBmdW5jdGlvbiAoKSB7XG4gICAgY2FsbGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBjYW5jZWxUcmlnZ2VyKCk7XG4gIH1dO1xufSk7IiwiLy8gZXhwb3J0IHRoaXMgcGFja2FnZSdzIGFwaVxuaW1wb3J0IEFsaWduIGZyb20gXCIuL0FsaWduXCI7XG5leHBvcnQgZGVmYXVsdCBBbGlnbjsiLCJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVnZW5lcmF0b3JSdW50aW1lXCI7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3JcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmFmIGZyb20gXCJyYy11dGlsL2VzL3JhZlwiO1xuaW1wb3J0IHVzZVN0YXRlIGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZVN0YXRlXCI7XG4vKipcbiAqIFBvcHVwIHNob3VsZCBmb2xsb3cgdGhlIHN0ZXBzIGZvciBlYWNoIGNvbXBvbmVudCB3b3JrIGNvcnJlY3RseTpcbiAqIG1lYXN1cmUgLSBjaGVjayBmb3IgdGhlIGN1cnJlbnQgc3RyZXRjaCBzaXplXG4gKiBhbGlnbiAtIGxldCBjb21wb25lbnQgYWxpZ24gdGhlIHBvc2l0aW9uXG4gKiBhbGlnbmVkIC0gcmUtYWxpZ24gYWdhaW4gaW4gY2FzZSBhZGRpdGlvbmFsIGNsYXNzTmFtZSBjaGFuZ2VkIHRoZSBzaXplXG4gKiBhZnRlckFsaWduIC0gY2hvaWNlIG5leHQgc3RlcCBpcyB0cmlnZ2VyIG1vdGlvbiBvciBmaW5pc2hlZFxuICogYmVmb3JlTW90aW9uIC0gc2hvdWxkIHJlc2V0IG1vdGlvbiB0byBpbnZpc2libGUgc28gdGhhdCBDU1NNb3Rpb24gY2FuIGRvIG5vcm1hbCBtb3Rpb25cbiAqIG1vdGlvbiAtIHBsYXkgdGhlIG1vdGlvblxuICogc3RhYmxlIC0gZXZlcnl0aGluZyBpcyBkb25lXG4gKi9cblxudmFyIFN0YXR1c1F1ZXVlID0gWydtZWFzdXJlJywgJ2FsaWduUHJlJywgJ2FsaWduJywgbnVsbCwgJ21vdGlvbiddO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2aXNpYmxlLCBkb01lYXN1cmUpIHtcbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKG51bGwpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBzdGF0dXMgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0SW50ZXJuYWxTdGF0dXMgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciByYWZSZWYgPSB1c2VSZWYoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0dXMobmV4dFN0YXR1cykge1xuICAgIHNldEludGVybmFsU3RhdHVzKG5leHRTdGF0dXMsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsUmFmKCkge1xuICAgIHJhZi5jYW5jZWwocmFmUmVmLmN1cnJlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29OZXh0U3RhdHVzKGNhbGxiYWNrKSB7XG4gICAgY2FuY2VsUmFmKCk7XG4gICAgcmFmUmVmLmN1cnJlbnQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gT25seSBhbGlnbiBzaG91bGQgYmUgbWFudWFsbHkgdHJpZ2dlclxuICAgICAgc2V0U3RhdHVzKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSAnYWxpZ24nOlxuICAgICAgICAgICAgcmV0dXJuICdtb3Rpb24nO1xuXG4gICAgICAgICAgY2FzZSAnbW90aW9uJzpcbiAgICAgICAgICAgIHJldHVybiAnc3RhYmxlJztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0pO1xuICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0gLy8gSW5pdCBzdGF0dXNcblxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0U3RhdHVzKCdtZWFzdXJlJyk7XG4gIH0sIFt2aXNpYmxlXSk7IC8vIEdvIG5leHQgc3RhdHVzXG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSAnbWVhc3VyZSc6XG4gICAgICAgIGRvTWVhc3VyZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICByYWZSZWYuY3VycmVudCA9IHJhZiggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIGluZGV4LCBuZXh0U3RhdHVzO1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaW5kZXggPSBTdGF0dXNRdWV1ZS5pbmRleE9mKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgbmV4dFN0YXR1cyA9IFN0YXR1c1F1ZXVlW2luZGV4ICsgMV07XG5cbiAgICAgICAgICAgICAgICBpZiAobmV4dFN0YXR1cyAmJiBpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgIHNldFN0YXR1cyhuZXh0U3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUpO1xuICAgICAgfSkpKTtcbiAgICB9XG4gIH0sIFtzdGF0dXNdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2FuY2VsUmFmKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3N0YXR1cywgZ29OZXh0U3RhdHVzXTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBbGlnbiBmcm9tICdyYy1hbGlnbic7XG5pbXBvcnQgdXNlTGF5b3V0RWZmZWN0IGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZUxheW91dEVmZmVjdFwiO1xuaW1wb3J0IENTU01vdGlvbiBmcm9tICdyYy1tb3Rpb24nO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgdXNlVmlzaWJsZVN0YXR1cyBmcm9tIFwiLi91c2VWaXNpYmxlU3RhdHVzXCI7XG5pbXBvcnQgeyBnZXRNb3Rpb24gfSBmcm9tIFwiLi4vdXRpbHMvbGVnYWN5VXRpbFwiO1xuaW1wb3J0IHVzZVN0cmV0Y2hTdHlsZSBmcm9tIFwiLi91c2VTdHJldGNoU3R5bGVcIjtcbnZhciBQb3B1cElubmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICB6SW5kZXggPSBwcm9wcy56SW5kZXgsXG4gICAgICBzdHJldGNoID0gcHJvcHMuc3RyZXRjaCxcbiAgICAgIGRlc3Ryb3lQb3B1cE9uSGlkZSA9IHByb3BzLmRlc3Ryb3lQb3B1cE9uSGlkZSxcbiAgICAgIGZvcmNlUmVuZGVyID0gcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICBhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgcG9pbnQgPSBwcm9wcy5wb2ludCxcbiAgICAgIGdldFJvb3REb21Ob2RlID0gcHJvcHMuZ2V0Um9vdERvbU5vZGUsXG4gICAgICBnZXRDbGFzc05hbWVGcm9tQWxpZ24gPSBwcm9wcy5nZXRDbGFzc05hbWVGcm9tQWxpZ24sXG4gICAgICBvbkFsaWduID0gcHJvcHMub25BbGlnbixcbiAgICAgIG9uTW91c2VFbnRlciA9IHByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgIG9uTW91c2VEb3duID0gcHJvcHMub25Nb3VzZURvd24sXG4gICAgICBvblRvdWNoU3RhcnQgPSBwcm9wcy5vblRvdWNoU3RhcnQsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljaztcbiAgdmFyIGFsaWduUmVmID0gdXNlUmVmKCk7XG4gIHZhciBlbGVtZW50UmVmID0gdXNlUmVmKCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIGFsaWduZWRDbGFzc05hbWUgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0QWxpZ25lZENsYXNzTmFtZSA9IF91c2VTdGF0ZTJbMV07IC8vID09PT09PT09PT09PT09PT09PT09PT09IE1lYXN1cmUgPT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICB2YXIgX3VzZVN0cmV0Y2hTdHlsZSA9IHVzZVN0cmV0Y2hTdHlsZShzdHJldGNoKSxcbiAgICAgIF91c2VTdHJldGNoU3R5bGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0cmV0Y2hTdHlsZSwgMiksXG4gICAgICBzdHJldGNoU3R5bGUgPSBfdXNlU3RyZXRjaFN0eWxlMlswXSxcbiAgICAgIG1lYXN1cmVTdHJldGNoU3R5bGUgPSBfdXNlU3RyZXRjaFN0eWxlMlsxXTtcblxuICBmdW5jdGlvbiBkb01lYXN1cmUoKSB7XG4gICAgaWYgKHN0cmV0Y2gpIHtcbiAgICAgIG1lYXN1cmVTdHJldGNoU3R5bGUoZ2V0Um9vdERvbU5vZGUoKSk7XG4gICAgfVxuICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PSBTdGF0dXMgPT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICB2YXIgX3VzZVZpc2libGVTdGF0dXMgPSB1c2VWaXNpYmxlU3RhdHVzKHZpc2libGUsIGRvTWVhc3VyZSksXG4gICAgICBfdXNlVmlzaWJsZVN0YXR1czIgPSBfc2xpY2VkVG9BcnJheShfdXNlVmlzaWJsZVN0YXR1cywgMiksXG4gICAgICBzdGF0dXMgPSBfdXNlVmlzaWJsZVN0YXR1czJbMF0sXG4gICAgICBnb05leHRTdGF0dXMgPSBfdXNlVmlzaWJsZVN0YXR1czJbMV07IC8vID09PT09PT09PT09PT09PT09PT09PT09PSBBbGlnbnMgPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIGBhbGlnbmVkQ2xhc3NOYW1lYCBtYXkgbW9kaWZ5IGBzb3VyY2VgIHNpemUsXG4gICAqIHdoaWNoIG1lYW5zIG9uZSB0aW1lIGFsaWduIG1heSBub3QgbW92ZSB0byB0aGUgY29ycmVjdCBwb3NpdGlvbiBhdCBvbmNlLlxuICAgKlxuICAgKiBXZSB3aWxsIHJlc2V0IGBhbGlnblRpbWVzYCBmb3IgZWFjaCBzdGF0dXMgc3dpdGNoIHRvIGBhbGlnblByZWBcbiAgICogYW5kIGxldCBgcmMtYWxpZ25gIHRvIGFsaWduIGZvciBtdWx0aXBsZSB0aW1lcyB0byBlbnN1cmUgZ2V0IGZpbmFsIHN0YWJsZSBwbGFjZS5cbiAgICogQ3VycmVudGx5IHdlIG1hcmsgYGFsaWduVGltZXMgPCAyYCByZXBlYXQgYWxpZ24sIGl0IHdpbGwgaW5jcmVhc2UgaWYgdXNlciByZXBvcnQgZm9yIGFsaWduIGlzc3VlLlxuICAgKiBcbiAgICogVXBkYXRlOlxuICAgKiBJbiBSZWFjdCAxOC4gYHJjLWFsaWduYCBlZmZlY3Qgb2YgYWxpZ24gbWF5IGZhc3RlciB0aGFuIHJlZiBjYWxsZWQgdHJpZ2dlciBgZm9yY2VBbGlnbmAuXG4gICAqIFdlIGFkanVzdCB0aGlzIHRvIGBhbGlnblRpbWVzIDwgMmAuXG4gICAqIFdlIG5lZWQgcmVmYWN0b3IgYHJjLWFsaWduYCB0byBzdXBwb3J0IG1hcmsgb2YgYGZvcmNlQWxpZ25gIGNhbGwgaWYgdGhpcyBzdGlsbCBoYXBwZW4uXG4gICAqL1xuXG5cbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZSgwKSxcbiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICAgIGFsaWduVGltZXMgPSBfdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0QWxpZ25UaW1lcyA9IF91c2VTdGF0ZTRbMV07XG5cbiAgdmFyIHByZXBhcmVSZXNvbHZlUmVmID0gdXNlUmVmKCk7XG4gIHVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gJ2FsaWduUHJlJykge1xuICAgICAgc2V0QWxpZ25UaW1lcygwKTtcbiAgICB9XG4gIH0sIFtzdGF0dXNdKTsgLy8gYHRhcmdldGAgb24gYHJjLWFsaWduYCBjYW4gYWNjZXB0IGFzIGEgZnVuY3Rpb24gdG8gZ2V0IHRoZSBiaW5kIGVsZW1lbnQgb3IgYSBwb2ludC5cbiAgLy8gcmVmOiBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yYy1hbGlnblxuXG4gIGZ1bmN0aW9uIGdldEFsaWduVGFyZ2V0KCkge1xuICAgIGlmIChwb2ludCkge1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIHJldHVybiBnZXRSb290RG9tTm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcmNlQWxpZ24oKSB7XG4gICAgdmFyIF9hbGlnblJlZiRjdXJyZW50O1xuXG4gICAgKF9hbGlnblJlZiRjdXJyZW50ID0gYWxpZ25SZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2FsaWduUmVmJGN1cnJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hbGlnblJlZiRjdXJyZW50LmZvcmNlQWxpZ24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSW50ZXJuYWxBbGlnbihwb3B1cERvbU5vZGUsIG1hdGNoQWxpZ24pIHtcbiAgICB2YXIgbmV4dEFsaWduZWRDbGFzc05hbWUgPSBnZXRDbGFzc05hbWVGcm9tQWxpZ24obWF0Y2hBbGlnbik7XG5cbiAgICBpZiAoYWxpZ25lZENsYXNzTmFtZSAhPT0gbmV4dEFsaWduZWRDbGFzc05hbWUpIHtcbiAgICAgIHNldEFsaWduZWRDbGFzc05hbWUobmV4dEFsaWduZWRDbGFzc05hbWUpO1xuICAgIH0gLy8gV2Ugd2lsbCByZXRyeSBtdWx0aSB0aW1lcyB0byBtYWtlIHN1cmUgdGhhdCB0aGUgZWxlbWVudCBoYXMgYmVlbiBhbGlnbiBpbiB0aGUgcmlnaHQgcG9zaXRpb24uXG5cblxuICAgIHNldEFsaWduVGltZXMoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCArIDE7XG4gICAgfSk7XG5cbiAgICBpZiAoc3RhdHVzID09PSAnYWxpZ24nKSB7XG4gICAgICBvbkFsaWduID09PSBudWxsIHx8IG9uQWxpZ24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQWxpZ24ocG9wdXBEb21Ob2RlLCBtYXRjaEFsaWduKTtcbiAgICB9XG4gIH0gLy8gRGVsYXkgdG8gZ28gdG8gbmV4dCBzdGF0dXNcblxuXG4gIHVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gJ2FsaWduJykge1xuICAgICAgLy8gUmVwZWF0IHVudGlsIG5vdCBtb3JlIGFsaWduIG5lZWRlZFxuICAgICAgaWYgKGFsaWduVGltZXMgPCAzKSB7XG4gICAgICAgIGZvcmNlQWxpZ24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdvTmV4dFN0YXR1cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIF9wcmVwYXJlUmVzb2x2ZVJlZiRjdTtcblxuICAgICAgICAgIChfcHJlcGFyZVJlc29sdmVSZWYkY3UgPSBwcmVwYXJlUmVzb2x2ZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfcHJlcGFyZVJlc29sdmVSZWYkY3UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wcmVwYXJlUmVzb2x2ZVJlZiRjdS5jYWxsKHByZXBhcmVSZXNvbHZlUmVmKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYWxpZ25UaW1lc10pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gTW90aW9uID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBtb3Rpb24gPSBfb2JqZWN0U3ByZWFkKHt9LCBnZXRNb3Rpb24ocHJvcHMpKTtcblxuICBbJ29uQXBwZWFyRW5kJywgJ29uRW50ZXJFbmQnLCAnb25MZWF2ZUVuZCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgIHZhciBvcmlnaW5IYW5kbGVyID0gbW90aW9uW2V2ZW50TmFtZV07XG5cbiAgICBtb3Rpb25bZXZlbnROYW1lXSA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudCkge1xuICAgICAgZ29OZXh0U3RhdHVzKCk7XG4gICAgICByZXR1cm4gb3JpZ2luSGFuZGxlciA9PT0gbnVsbCB8fCBvcmlnaW5IYW5kbGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5IYW5kbGVyKGVsZW1lbnQsIGV2ZW50KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBvblNob3dQcmVwYXJlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgcHJlcGFyZVJlc29sdmVSZWYuY3VycmVudCA9IHJlc29sdmU7XG4gICAgfSk7XG4gIH0gLy8gR28gdG8gc3RhYmxlIGRpcmVjdGx5IHdoZW4gbW90aW9uIG5vdCBwcm92aWRlZFxuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW1vdGlvbi5tb3Rpb25OYW1lICYmIHN0YXR1cyA9PT0gJ21vdGlvbicpIHtcbiAgICAgIGdvTmV4dFN0YXR1cygpO1xuICAgIH1cbiAgfSwgW21vdGlvbi5tb3Rpb25OYW1lLCBzdGF0dXNdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBSZWZzID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JjZUFsaWduOiBmb3JjZUFsaWduLFxuICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24gZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRSZWYuY3VycmVudDtcbiAgICAgIH1cbiAgICB9O1xuICB9KTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IFJlbmRlciA9PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgbWVyZ2VkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0cmV0Y2hTdHlsZSksIHt9LCB7XG4gICAgekluZGV4OiB6SW5kZXgsXG4gICAgb3BhY2l0eTogc3RhdHVzID09PSAnbW90aW9uJyB8fCBzdGF0dXMgPT09ICdzdGFibGUnIHx8ICF2aXNpYmxlID8gdW5kZWZpbmVkIDogMCxcbiAgICAvLyBDYW5ub3QgaW50ZXJhY3Qgd2l0aCBkaXNhcHBlYXJpbmcgZWxlbWVudHNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8zNTA1MSNpc3N1ZWNvbW1lbnQtMTEwMTM0MDcxNFxuICAgIHBvaW50ZXJFdmVudHM6ICF2aXNpYmxlICYmIHN0YXR1cyAhPT0gJ3N0YWJsZScgPyAnbm9uZScgOiB1bmRlZmluZWRcbiAgfSwgc3R5bGUpOyAvLyBBbGlnbiBzdGF0dXNcblxuXG4gIHZhciBhbGlnbkRpc2FibGVkID0gdHJ1ZTtcblxuICBpZiAoYWxpZ24gIT09IG51bGwgJiYgYWxpZ24gIT09IHZvaWQgMCAmJiBhbGlnbi5wb2ludHMgJiYgKHN0YXR1cyA9PT0gJ2FsaWduJyB8fCBzdGF0dXMgPT09ICdzdGFibGUnKSkge1xuICAgIGFsaWduRGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBjaGlsZE5vZGUgPSBjaGlsZHJlbjsgLy8gV3JhcHBlciB3aGVuIG11bHRpcGxlIGNoaWxkcmVuXG5cbiAgaWYgKFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA+IDEpIHtcbiAgICBjaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGVudFwiKVxuICAgIH0sIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb24sIF9leHRlbmRzKHtcbiAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgIHJlZjogZWxlbWVudFJlZixcbiAgICBsZWF2ZWRDbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaGlkZGVuXCIpXG4gIH0sIG1vdGlvbiwge1xuICAgIG9uQXBwZWFyUHJlcGFyZTogb25TaG93UHJlcGFyZSxcbiAgICBvbkVudGVyUHJlcGFyZTogb25TaG93UHJlcGFyZSxcbiAgICByZW1vdmVPbkxlYXZlOiBkZXN0cm95UG9wdXBPbkhpZGUsXG4gICAgZm9yY2VSZW5kZXI6IGZvcmNlUmVuZGVyXG4gIH0pLCBmdW5jdGlvbiAoX3JlZiwgbW90aW9uUmVmKSB7XG4gICAgdmFyIG1vdGlvbkNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgICBtb3Rpb25TdHlsZSA9IF9yZWYuc3R5bGU7XG4gICAgdmFyIG1lcmdlZENsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBjbGFzc05hbWUsIGFsaWduZWRDbGFzc05hbWUsIG1vdGlvbkNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFsaWduLCB7XG4gICAgICB0YXJnZXQ6IGdldEFsaWduVGFyZ2V0KCksXG4gICAgICBrZXk6IFwicG9wdXBcIixcbiAgICAgIHJlZjogYWxpZ25SZWYsXG4gICAgICBtb25pdG9yV2luZG93UmVzaXplOiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IGFsaWduRGlzYWJsZWQsXG4gICAgICBhbGlnbjogYWxpZ24sXG4gICAgICBvbkFsaWduOiBvbkludGVybmFsQWxpZ25cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICByZWY6IG1vdGlvblJlZixcbiAgICAgIGNsYXNzTmFtZTogbWVyZ2VkQ2xhc3NOYW1lLFxuICAgICAgb25Nb3VzZUVudGVyOiBvbk1vdXNlRW50ZXIsXG4gICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZSxcbiAgICAgIG9uTW91c2VEb3duQ2FwdHVyZTogb25Nb3VzZURvd24sXG4gICAgICBvblRvdWNoU3RhcnRDYXB0dXJlOiBvblRvdWNoU3RhcnQsXG4gICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbW90aW9uU3R5bGUpLCBtZXJnZWRTdHlsZSlcbiAgICB9LCBjaGlsZE5vZGUpKTtcbiAgfSk7XG59KTtcblBvcHVwSW5uZXIuZGlzcGxheU5hbWUgPSAnUG9wdXBJbm5lcic7XG5leHBvcnQgZGVmYXVsdCBQb3B1cElubmVyOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChzdHJldGNoKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH0pLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICB0YXJnZXRTaXplID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldFRhcmdldFNpemUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIGZ1bmN0aW9uIG1lYXN1cmVTdHJldGNoKGVsZW1lbnQpIHtcbiAgICB2YXIgdGd0V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICB0Z3RIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICAgIHZhciBfZWxlbWVudCRnZXRCb3VuZGluZ0MgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICB3aWR0aCA9IF9lbGVtZW50JGdldEJvdW5kaW5nQy53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX2VsZW1lbnQkZ2V0Qm91bmRpbmdDLmhlaWdodDsgLy8gUmVjdCBpcyBtb3JlIGFjY3VyYXRlIHRoYW4gb2Zmc2V0LCB1c2UgaWYgbmVhclxuXG5cbiAgICBpZiAoTWF0aC5hYnModGd0V2lkdGggLSB3aWR0aCkgPCAxICYmIE1hdGguYWJzKHRndEhlaWdodCAtIGhlaWdodCkgPCAxKSB7XG4gICAgICB0Z3RXaWR0aCA9IHdpZHRoO1xuICAgICAgdGd0SGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHNldFRhcmdldFNpemUoe1xuICAgICAgd2lkdGg6IHRndFdpZHRoLFxuICAgICAgaGVpZ2h0OiB0Z3RIZWlnaHRcbiAgICB9KTtcbiAgfSAvLyBNZXJnZSBzdHJldGNoIHN0eWxlXG5cblxuICB2YXIgc3R5bGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2l6ZVN0eWxlID0ge307XG5cbiAgICBpZiAoc3RyZXRjaCkge1xuICAgICAgdmFyIHdpZHRoID0gdGFyZ2V0U2l6ZS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSB0YXJnZXRTaXplLmhlaWdodDsgLy8gU3RyZXRjaCB3aXRoIHRhcmdldFxuXG4gICAgICBpZiAoc3RyZXRjaC5pbmRleE9mKCdoZWlnaHQnKSAhPT0gLTEgJiYgaGVpZ2h0KSB7XG4gICAgICAgIHNpemVTdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKHN0cmV0Y2guaW5kZXhPZignbWluSGVpZ2h0JykgIT09IC0xICYmIGhlaWdodCkge1xuICAgICAgICBzaXplU3R5bGUubWluSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RyZXRjaC5pbmRleE9mKCd3aWR0aCcpICE9PSAtMSAmJiB3aWR0aCkge1xuICAgICAgICBzaXplU3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZXRjaC5pbmRleE9mKCdtaW5XaWR0aCcpICE9PSAtMSAmJiB3aWR0aCkge1xuICAgICAgICBzaXplU3R5bGUubWluV2lkdGggPSB3aWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2l6ZVN0eWxlO1xuICB9LCBbc3RyZXRjaCwgdGFyZ2V0U2l6ZV0pO1xuICByZXR1cm4gW3N0eWxlLCBtZWFzdXJlU3RyZXRjaF07XG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ1NTTW90aW9uIGZyb20gJ3JjLW1vdGlvbic7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbnZhciBNb2JpbGVQb3B1cElubmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgekluZGV4ID0gcHJvcHMuekluZGV4LFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRtb2JpbGUgPSBwcm9wcy5tb2JpbGU7XG4gIF9wcm9wcyRtb2JpbGUgPSBfcHJvcHMkbW9iaWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRtb2JpbGU7XG4gIHZhciBwb3B1cENsYXNzTmFtZSA9IF9wcm9wcyRtb2JpbGUucG9wdXBDbGFzc05hbWUsXG4gICAgICBwb3B1cFN0eWxlID0gX3Byb3BzJG1vYmlsZS5wb3B1cFN0eWxlLFxuICAgICAgX3Byb3BzJG1vYmlsZSRwb3B1cE1vID0gX3Byb3BzJG1vYmlsZS5wb3B1cE1vdGlvbixcbiAgICAgIHBvcHVwTW90aW9uID0gX3Byb3BzJG1vYmlsZSRwb3B1cE1vID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRtb2JpbGUkcG9wdXBNbyxcbiAgICAgIHBvcHVwUmVuZGVyID0gX3Byb3BzJG1vYmlsZS5wb3B1cFJlbmRlcixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuICB2YXIgZWxlbWVudFJlZiA9IFJlYWN0LnVzZVJlZigpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFJlZnMgPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcmNlQWxpZ246IGZ1bmN0aW9uIGZvcmNlQWxpZ24oKSB7fSxcbiAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uIGdldEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50UmVmLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIG1lcmdlZFN0eWxlID0gX29iamVjdFNwcmVhZCh7XG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSwgcG9wdXBTdHlsZSk7XG5cbiAgdmFyIGNoaWxkTm9kZSA9IGNoaWxkcmVuOyAvLyBXcmFwcGVyIHdoZW4gbXVsdGlwbGUgY2hpbGRyZW5cblxuICBpZiAoUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID4gMSkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb250ZW50XCIpXG4gICAgfSwgY2hpbGRyZW4pO1xuICB9IC8vIE1vYmlsZSBzdXBwb3J0IGFkZGl0aW9uYWwgcmVuZGVyXG5cblxuICBpZiAocG9wdXBSZW5kZXIpIHtcbiAgICBjaGlsZE5vZGUgPSBwb3B1cFJlbmRlcihjaGlsZE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENTU01vdGlvbiwgX2V4dGVuZHMoe1xuICAgIHZpc2libGU6IHZpc2libGUsXG4gICAgcmVmOiBlbGVtZW50UmVmLFxuICAgIHJlbW92ZU9uTGVhdmU6IHRydWVcbiAgfSwgcG9wdXBNb3Rpb24pLCBmdW5jdGlvbiAoX3JlZiwgbW90aW9uUmVmKSB7XG4gICAgdmFyIG1vdGlvbkNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgICBtb3Rpb25TdHlsZSA9IF9yZWYuc3R5bGU7XG4gICAgdmFyIG1lcmdlZENsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBwb3B1cENsYXNzTmFtZSwgbW90aW9uQ2xhc3NOYW1lKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgcmVmOiBtb3Rpb25SZWYsXG4gICAgICBjbGFzc05hbWU6IG1lcmdlZENsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtb3Rpb25TdHlsZSksIG1lcmdlZFN0eWxlKVxuICAgIH0sIGNoaWxkTm9kZSk7XG4gIH0pO1xufSk7XG5Nb2JpbGVQb3B1cElubmVyLmRpc3BsYXlOYW1lID0gJ01vYmlsZVBvcHVwSW5uZXInO1xuZXhwb3J0IGRlZmF1bHQgTW9iaWxlUG9wdXBJbm5lcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1widmlzaWJsZVwiLCBcIm1vYmlsZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNNb2JpbGUgZnJvbSBcInJjLXV0aWwvZXMvaXNNb2JpbGVcIjtcbmltcG9ydCBNYXNrIGZyb20gXCIuL01hc2tcIjtcbmltcG9ydCBQb3B1cElubmVyIGZyb20gXCIuL1BvcHVwSW5uZXJcIjtcbmltcG9ydCBNb2JpbGVQb3B1cElubmVyIGZyb20gXCIuL01vYmlsZVBvcHVwSW5uZXJcIjtcbnZhciBQb3B1cCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIHZpc2libGUgPSBfcmVmLnZpc2libGUsXG4gICAgICBtb2JpbGUgPSBfcmVmLm1vYmlsZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKHZpc2libGUpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBpbm5lclZpc2libGUgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2VySW5uZXJWaXNpYmxlID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICAgIGluTW9iaWxlID0gX3VzZVN0YXRlNFswXSxcbiAgICAgIHNldEluTW9iaWxlID0gX3VzZVN0YXRlNFsxXTtcblxuICB2YXIgY2xvbmVQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHZpc2libGU6IGlubmVyVmlzaWJsZVxuICB9KTsgLy8gV2UgY2hlY2sgbW9iaWxlIGluIHZpc2libGUgY2hhbmdlZCBoZXJlLlxuICAvLyBBbmQgdGhpcyBhbHNvIGRlbGF5IHNldCBgaW5uZXJWaXNpYmxlYCB0byBhdm9pZCBwb3B1cCBjb21wb25lbnQgcmVuZGVyIGZsYXNoXG5cblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNlcklubmVyVmlzaWJsZSh2aXNpYmxlKTtcblxuICAgIGlmICh2aXNpYmxlICYmIG1vYmlsZSkge1xuICAgICAgc2V0SW5Nb2JpbGUoaXNNb2JpbGUoKSk7XG4gICAgfVxuICB9LCBbdmlzaWJsZSwgbW9iaWxlXSk7XG4gIHZhciBwb3B1cE5vZGUgPSBpbk1vYmlsZSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1vYmlsZVBvcHVwSW5uZXIsIF9leHRlbmRzKHt9LCBjbG9uZVByb3BzLCB7XG4gICAgbW9iaWxlOiBtb2JpbGUsXG4gICAgcmVmOiByZWZcbiAgfSkpIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9wdXBJbm5lciwgX2V4dGVuZHMoe30sIGNsb25lUHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9KSk7IC8vIFdlIGNhbiB1c2UgZnJhZ21lbnQgZGlyZWN0bHkgYnV0IHRoaXMgbWF5IGZhaWxlZCBzb21lIHNlbGVjdG9yIHVzYWdlLiBLZWVwIGFzIG9yaWdpbiBsb2dpY1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNYXNrLCBjbG9uZVByb3BzKSwgcG9wdXBOb2RlKTtcbn0pO1xuUG9wdXAuZGlzcGxheU5hbWUgPSAnUG9wdXAnO1xuZXhwb3J0IGRlZmF1bHQgUG9wdXA7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRyaWdnZXJDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBUcmlnZ2VyQ29udGV4dDsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHJhZiBmcm9tIFwicmMtdXRpbC9lcy9yYWZcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwicmMtdXRpbC9lcy9Eb20vY29udGFpbnNcIjtcbmltcG9ydCBmaW5kRE9NTm9kZSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGVcIjtcbmltcG9ydCB7IGNvbXBvc2VSZWYsIHN1cHBvcnRSZWYgfSBmcm9tIFwicmMtdXRpbC9lcy9yZWZcIjtcbmltcG9ydCBhZGRFdmVudExpc3RlbmVyIGZyb20gXCJyYy11dGlsL2VzL0RvbS9hZGRFdmVudExpc3RlbmVyXCI7XG5pbXBvcnQgUG9ydGFsIGZyb20gXCJyYy11dGlsL2VzL1BvcnRhbFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBnZXRBbGlnbkZyb21QbGFjZW1lbnQsIGdldEFsaWduUG9wdXBDbGFzc05hbWUgfSBmcm9tIFwiLi91dGlscy9hbGlnblV0aWxcIjtcbmltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xuaW1wb3J0IFRyaWdnZXJDb250ZXh0IGZyb20gXCIuL2NvbnRleHRcIjtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIHJldHVybkVtcHR5U3RyaW5nKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHJldHVybkRvY3VtZW50KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICB9XG5cbiAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcbn1cblxudmFyIEFMTF9IQU5ETEVSUyA9IFsnb25DbGljaycsICdvbk1vdXNlRG93bicsICdvblRvdWNoU3RhcnQnLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VMZWF2ZScsICdvbkZvY3VzJywgJ29uQmx1cicsICdvbkNvbnRleHRNZW51J107XG5cbi8qKlxuICogSW50ZXJuYWwgdXNhZ2UuIERvIG5vdCB1c2UgaW4geW91ciBjb2RlIHNpbmNlIHRoaXMgd2lsbCBiZSByZW1vdmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUcmlnZ2VyKFBvcnRhbENvbXBvbmVudCkge1xuICB2YXIgVHJpZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhUcmlnZ2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVHJpZ2dlcik7XG5cbiAgICAvLyBlbnN1cmUgYGdldENvbnRhaW5lcmAgd2lsbCBiZSBjYWxsZWQgb25seSBvbmNlXG4gICAgZnVuY3Rpb24gVHJpZ2dlcihwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJpZ2dlcik7XG5cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicG9wdXBSZWZcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRyaWdnZXJSZWZcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInBvcnRhbENvbnRhaW5lclwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiYXR0YWNoSWRcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNsaWNrT3V0c2lkZUhhbmRsZXJcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRvdWNoT3V0c2lkZUhhbmRsZXJcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxXCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMlwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibW91c2VEb3duVGltZW91dFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZm9jdXNUaW1lXCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmVDbGlja1RpbWVcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByZVRvdWNoVGltZVwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZGVsYXlUaW1lclwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFzUG9wdXBNb3VzZURvd25cIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTW91c2VFbnRlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgbW91c2VFbnRlckRlbGF5ID0gX3RoaXMucHJvcHMubW91c2VFbnRlckRlbGF5O1xuXG4gICAgICAgIF90aGlzLmZpcmVFdmVudHMoJ29uTW91c2VFbnRlcicsIGUpO1xuXG4gICAgICAgIF90aGlzLmRlbGF5U2V0UG9wdXBWaXNpYmxlKHRydWUsIG1vdXNlRW50ZXJEZWxheSwgbW91c2VFbnRlckRlbGF5ID8gbnVsbCA6IGUpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbk1vdXNlTW92ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpcy5maXJlRXZlbnRzKCdvbk1vdXNlTW92ZScsIGUpO1xuXG4gICAgICAgIF90aGlzLnNldFBvaW50KGUpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbk1vdXNlTGVhdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMuZmlyZUV2ZW50cygnb25Nb3VzZUxlYXZlJywgZSk7XG5cbiAgICAgICAgX3RoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIF90aGlzLnByb3BzLm1vdXNlTGVhdmVEZWxheSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUG9wdXBNb3VzZUVudGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUG9wdXBNb3VzZUxlYXZlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyRwb3B1cFJlZiRjdXJyZW47XG5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90cmlnZ2VyL3B1bGwvMTNcbiAgICAgICAgLy8gcmVhY3QgYnVnP1xuICAgICAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0ICYmICFlLnJlbGF0ZWRUYXJnZXQuc2V0VGltZW91dCAmJiBjb250YWlucygoX3RoaXMkcG9wdXBSZWYkY3VycmVuID0gX3RoaXMucG9wdXBSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX3RoaXMkcG9wdXBSZWYkY3VycmVuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwb3B1cFJlZiRjdXJyZW4uZ2V0RWxlbWVudCgpLCBlLnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIF90aGlzLnByb3BzLm1vdXNlTGVhdmVEZWxheSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRm9jdXNcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMuZmlyZUV2ZW50cygnb25Gb2N1cycsIGUpOyAvLyBpbmNhc2UgZm9jdXNpbiBhbmQgZm9jdXNvdXRcblxuXG4gICAgICAgIF90aGlzLmNsZWFyRGVsYXlUaW1lcigpO1xuXG4gICAgICAgIGlmIChfdGhpcy5pc0ZvY3VzVG9TaG93KCkpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c1RpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgICAgX3RoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUodHJ1ZSwgX3RoaXMucHJvcHMuZm9jdXNEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Nb3VzZURvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMuZmlyZUV2ZW50cygnb25Nb3VzZURvd24nLCBlKTtcblxuICAgICAgICBfdGhpcy5wcmVDbGlja1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblRvdWNoU3RhcnRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMuZmlyZUV2ZW50cygnb25Ub3VjaFN0YXJ0JywgZSk7XG5cbiAgICAgICAgX3RoaXMucHJlVG91Y2hUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25CbHVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIF90aGlzLmZpcmVFdmVudHMoJ29uQmx1cicsIGUpO1xuXG4gICAgICAgIF90aGlzLmNsZWFyRGVsYXlUaW1lcigpO1xuXG4gICAgICAgIGlmIChfdGhpcy5pc0JsdXJUb0hpZGUoKSkge1xuICAgICAgICAgIF90aGlzLmRlbGF5U2V0UG9wdXBWaXNpYmxlKGZhbHNlLCBfdGhpcy5wcm9wcy5ibHVyRGVsYXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uQ29udGV4dE1lbnVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIF90aGlzLmZpcmVFdmVudHMoJ29uQ29udGV4dE1lbnUnLCBlKTtcblxuICAgICAgICBfdGhpcy5zZXRQb3B1cFZpc2libGUodHJ1ZSwgZSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uQ29udGV4dE1lbnVDbG9zZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uQ2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIF90aGlzLmZpcmVFdmVudHMoJ29uQ2xpY2snLCBldmVudCk7IC8vIGZvY3VzIHdpbGwgdHJpZ2dlciBjbGlja1xuXG5cbiAgICAgICAgaWYgKF90aGlzLmZvY3VzVGltZSkge1xuICAgICAgICAgIHZhciBwcmVUaW1lO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnByZUNsaWNrVGltZSAmJiBfdGhpcy5wcmVUb3VjaFRpbWUpIHtcbiAgICAgICAgICAgIHByZVRpbWUgPSBNYXRoLm1pbihfdGhpcy5wcmVDbGlja1RpbWUsIF90aGlzLnByZVRvdWNoVGltZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcmVDbGlja1RpbWUpIHtcbiAgICAgICAgICAgIHByZVRpbWUgPSBfdGhpcy5wcmVDbGlja1RpbWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcmVUb3VjaFRpbWUpIHtcbiAgICAgICAgICAgIHByZVRpbWUgPSBfdGhpcy5wcmVUb3VjaFRpbWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKE1hdGguYWJzKHByZVRpbWUgLSBfdGhpcy5mb2N1c1RpbWUpIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c1RpbWUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMucHJlQ2xpY2tUaW1lID0gMDtcbiAgICAgICAgX3RoaXMucHJlVG91Y2hUaW1lID0gMDsgLy8gT25seSBwcmV2ZW50IGRlZmF1bHQgd2hlbiBhbGwgdGhlIGFjdGlvbiBpcyBjbGljay5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTcwNDNcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTcyOTFcblxuICAgICAgICBpZiAoX3RoaXMuaXNDbGlja1RvU2hvdygpICYmIChfdGhpcy5pc0NsaWNrVG9IaWRlKCkgfHwgX3RoaXMuaXNCbHVyVG9IaWRlKCkpICYmIGV2ZW50ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXh0VmlzaWJsZSA9ICFfdGhpcy5zdGF0ZS5wb3B1cFZpc2libGU7XG5cbiAgICAgICAgaWYgKF90aGlzLmlzQ2xpY2tUb0hpZGUoKSAmJiAhbmV4dFZpc2libGUgfHwgbmV4dFZpc2libGUgJiYgX3RoaXMuaXNDbGlja1RvU2hvdygpKSB7XG4gICAgICAgICAgX3RoaXMuc2V0UG9wdXBWaXNpYmxlKCFfdGhpcy5zdGF0ZS5wb3B1cFZpc2libGUsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblBvcHVwTW91c2VEb3duXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuaGFzUG9wdXBNb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMubW91c2VEb3duVGltZW91dCk7XG4gICAgICAgIF90aGlzLm1vdXNlRG93blRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuaGFzUG9wdXBNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgaWYgKF90aGlzLmNvbnRleHQpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkY29udGV4dDtcblxuICAgICAgICAgIChfdGhpcyRjb250ZXh0ID0gX3RoaXMuY29udGV4dCkub25Qb3B1cE1vdXNlRG93bi5hcHBseShfdGhpcyRjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRG9jdW1lbnRDbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm1hc2sgJiYgIV90aGlzLnByb3BzLm1hc2tDbG9zYWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgdmFyIHJvb3QgPSBfdGhpcy5nZXRSb290RG9tTm9kZSgpO1xuXG4gICAgICAgIHZhciBwb3B1cE5vZGUgPSBfdGhpcy5nZXRQb3B1cERvbU5vZGUoKTtcblxuICAgICAgICBpZiAoIC8vIG1vdXNlZG93biBvbiB0aGUgdGFyZ2V0IHNob3VsZCBhbHNvIGNsb3NlIHBvcHVwIHdoZW4gYWN0aW9uIGlzIGNvbnRleHRNZW51LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8yOTg1M1xuICAgICAgICAoIWNvbnRhaW5zKHJvb3QsIHRhcmdldCkgfHwgX3RoaXMuaXNDb250ZXh0TWVudU9ubHkoKSkgJiYgIWNvbnRhaW5zKHBvcHVwTm9kZSwgdGFyZ2V0KSAmJiAhX3RoaXMuaGFzUG9wdXBNb3VzZURvd24pIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFJvb3REb21Ob2RlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdldFRyaWdnZXJET01Ob2RlID0gX3RoaXMucHJvcHMuZ2V0VHJpZ2dlckRPTU5vZGU7XG5cbiAgICAgICAgaWYgKGdldFRyaWdnZXJET01Ob2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFRyaWdnZXJET01Ob2RlKF90aGlzLnRyaWdnZXJSZWYuY3VycmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBkb21Ob2RlID0gZmluZERPTU5vZGUoX3RoaXMudHJpZ2dlclJlZi5jdXJyZW50KTtcblxuICAgICAgICAgIGlmIChkb21Ob2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9tTm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikgey8vIERvIG5vdGhpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduXCIsIGZ1bmN0aW9uIChhbGlnbikge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gW107XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgcG9wdXBQbGFjZW1lbnQgPSBfdGhpcyRwcm9wcy5wb3B1cFBsYWNlbWVudCxcbiAgICAgICAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzID0gX3RoaXMkcHJvcHMuYnVpbHRpblBsYWNlbWVudHMsXG4gICAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgICBhbGlnblBvaW50ID0gX3RoaXMkcHJvcHMuYWxpZ25Qb2ludCxcbiAgICAgICAgICAgIGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduID0gX3RoaXMkcHJvcHMuZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ247XG5cbiAgICAgICAgaWYgKHBvcHVwUGxhY2VtZW50ICYmIGJ1aWx0aW5QbGFjZW1lbnRzKSB7XG4gICAgICAgICAgY2xhc3NOYW1lLnB1c2goZ2V0QWxpZ25Qb3B1cENsYXNzTmFtZShidWlsdGluUGxhY2VtZW50cywgcHJlZml4Q2xzLCBhbGlnbiwgYWxpZ25Qb2ludCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduKSB7XG4gICAgICAgICAgY2xhc3NOYW1lLnB1c2goZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ24oYWxpZ24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUuam9pbignICcpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRDb21wb25lbnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczIucHJlZml4Q2xzLFxuICAgICAgICAgICAgZGVzdHJveVBvcHVwT25IaWRlID0gX3RoaXMkcHJvcHMyLmRlc3Ryb3lQb3B1cE9uSGlkZSxcbiAgICAgICAgICAgIHBvcHVwQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLnBvcHVwQ2xhc3NOYW1lLFxuICAgICAgICAgICAgb25Qb3B1cEFsaWduID0gX3RoaXMkcHJvcHMyLm9uUG9wdXBBbGlnbixcbiAgICAgICAgICAgIHBvcHVwTW90aW9uID0gX3RoaXMkcHJvcHMyLnBvcHVwTW90aW9uLFxuICAgICAgICAgICAgcG9wdXBBbmltYXRpb24gPSBfdGhpcyRwcm9wczIucG9wdXBBbmltYXRpb24sXG4gICAgICAgICAgICBwb3B1cFRyYW5zaXRpb25OYW1lID0gX3RoaXMkcHJvcHMyLnBvcHVwVHJhbnNpdGlvbk5hbWUsXG4gICAgICAgICAgICBwb3B1cFN0eWxlID0gX3RoaXMkcHJvcHMyLnBvcHVwU3R5bGUsXG4gICAgICAgICAgICBtYXNrID0gX3RoaXMkcHJvcHMyLm1hc2ssXG4gICAgICAgICAgICBtYXNrQW5pbWF0aW9uID0gX3RoaXMkcHJvcHMyLm1hc2tBbmltYXRpb24sXG4gICAgICAgICAgICBtYXNrVHJhbnNpdGlvbk5hbWUgPSBfdGhpcyRwcm9wczIubWFza1RyYW5zaXRpb25OYW1lLFxuICAgICAgICAgICAgbWFza01vdGlvbiA9IF90aGlzJHByb3BzMi5tYXNrTW90aW9uLFxuICAgICAgICAgICAgekluZGV4ID0gX3RoaXMkcHJvcHMyLnpJbmRleCxcbiAgICAgICAgICAgIHBvcHVwID0gX3RoaXMkcHJvcHMyLnBvcHVwLFxuICAgICAgICAgICAgc3RyZXRjaCA9IF90aGlzJHByb3BzMi5zdHJldGNoLFxuICAgICAgICAgICAgYWxpZ25Qb2ludCA9IF90aGlzJHByb3BzMi5hbGlnblBvaW50LFxuICAgICAgICAgICAgbW9iaWxlID0gX3RoaXMkcHJvcHMyLm1vYmlsZSxcbiAgICAgICAgICAgIGZvcmNlUmVuZGVyID0gX3RoaXMkcHJvcHMyLmZvcmNlUmVuZGVyLFxuICAgICAgICAgICAgb25Qb3B1cENsaWNrID0gX3RoaXMkcHJvcHMyLm9uUG9wdXBDbGljaztcbiAgICAgICAgdmFyIF90aGlzJHN0YXRlID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgICBwb3B1cFZpc2libGUgPSBfdGhpcyRzdGF0ZS5wb3B1cFZpc2libGUsXG4gICAgICAgICAgICBwb2ludCA9IF90aGlzJHN0YXRlLnBvaW50O1xuXG4gICAgICAgIHZhciBhbGlnbiA9IF90aGlzLmdldFBvcHVwQWxpZ24oKTtcblxuICAgICAgICB2YXIgbW91c2VQcm9wcyA9IHt9O1xuXG4gICAgICAgIGlmIChfdGhpcy5pc01vdXNlRW50ZXJUb1Nob3coKSkge1xuICAgICAgICAgIG1vdXNlUHJvcHMub25Nb3VzZUVudGVyID0gX3RoaXMub25Qb3B1cE1vdXNlRW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMuaXNNb3VzZUxlYXZlVG9IaWRlKCkpIHtcbiAgICAgICAgICBtb3VzZVByb3BzLm9uTW91c2VMZWF2ZSA9IF90aGlzLm9uUG9wdXBNb3VzZUxlYXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW91c2VQcm9wcy5vbk1vdXNlRG93biA9IF90aGlzLm9uUG9wdXBNb3VzZURvd247XG4gICAgICAgIG1vdXNlUHJvcHMub25Ub3VjaFN0YXJ0ID0gX3RoaXMub25Qb3B1cE1vdXNlRG93bjtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcHVwLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgZGVzdHJveVBvcHVwT25IaWRlOiBkZXN0cm95UG9wdXBPbkhpZGUsXG4gICAgICAgICAgdmlzaWJsZTogcG9wdXBWaXNpYmxlLFxuICAgICAgICAgIHBvaW50OiBhbGlnblBvaW50ICYmIHBvaW50LFxuICAgICAgICAgIGNsYXNzTmFtZTogcG9wdXBDbGFzc05hbWUsXG4gICAgICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgICAgIG9uQWxpZ246IG9uUG9wdXBBbGlnbixcbiAgICAgICAgICBhbmltYXRpb246IHBvcHVwQW5pbWF0aW9uLFxuICAgICAgICAgIGdldENsYXNzTmFtZUZyb21BbGlnbjogX3RoaXMuZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ25cbiAgICAgICAgfSwgbW91c2VQcm9wcywge1xuICAgICAgICAgIHN0cmV0Y2g6IHN0cmV0Y2gsXG4gICAgICAgICAgZ2V0Um9vdERvbU5vZGU6IF90aGlzLmdldFJvb3REb21Ob2RlLFxuICAgICAgICAgIHN0eWxlOiBwb3B1cFN0eWxlLFxuICAgICAgICAgIG1hc2s6IG1hc2ssXG4gICAgICAgICAgekluZGV4OiB6SW5kZXgsXG4gICAgICAgICAgdHJhbnNpdGlvbk5hbWU6IHBvcHVwVHJhbnNpdGlvbk5hbWUsXG4gICAgICAgICAgbWFza0FuaW1hdGlvbjogbWFza0FuaW1hdGlvbixcbiAgICAgICAgICBtYXNrVHJhbnNpdGlvbk5hbWU6IG1hc2tUcmFuc2l0aW9uTmFtZSxcbiAgICAgICAgICBtYXNrTW90aW9uOiBtYXNrTW90aW9uLFxuICAgICAgICAgIHJlZjogX3RoaXMucG9wdXBSZWYsXG4gICAgICAgICAgbW90aW9uOiBwb3B1cE1vdGlvbixcbiAgICAgICAgICBtb2JpbGU6IG1vYmlsZSxcbiAgICAgICAgICBmb3JjZVJlbmRlcjogZm9yY2VSZW5kZXIsXG4gICAgICAgICAgb25DbGljazogb25Qb3B1cENsaWNrXG4gICAgICAgIH0pLCB0eXBlb2YgcG9wdXAgPT09ICdmdW5jdGlvbicgPyBwb3B1cCgpIDogcG9wdXApO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJhdHRhY2hQYXJlbnRcIiwgZnVuY3Rpb24gKHBvcHVwQ29udGFpbmVyKSB7XG4gICAgICAgIHJhZi5jYW5jZWwoX3RoaXMuYXR0YWNoSWQpO1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IF90aGlzJHByb3BzMy5nZXRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgICAgIGdldERvY3VtZW50ID0gX3RoaXMkcHJvcHMzLmdldERvY3VtZW50O1xuXG4gICAgICAgIHZhciBkb21Ob2RlID0gX3RoaXMuZ2V0Um9vdERvbU5vZGUoKTtcblxuICAgICAgICB2YXIgbW91bnROb2RlO1xuXG4gICAgICAgIGlmICghZ2V0UG9wdXBDb250YWluZXIpIHtcbiAgICAgICAgICBtb3VudE5vZGUgPSBnZXREb2N1bWVudChfdGhpcy5nZXRSb290RG9tTm9kZSgpKS5ib2R5O1xuICAgICAgICB9IGVsc2UgaWYgKGRvbU5vZGUgfHwgZ2V0UG9wdXBDb250YWluZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gQ29tcGF0aWJsZSBmb3IgbGVnYWN5IGdldFBvcHVwQ29udGFpbmVyIHdpdGggZG9tTm9kZSBhcmd1bWVudC5cbiAgICAgICAgICAvLyBJZiBubyBuZWVkIGBkb21Ob2RlYCBhcmd1bWVudCwgd2lsbCBjYWxsIGRpcmVjdGx5LlxuICAgICAgICAgIC8vIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9lbG9xdWVudC1tY2xlYW4tc3M5M20/ZmlsZT0vc3JjL0FwcC5qc1xuICAgICAgICAgIG1vdW50Tm9kZSA9IGdldFBvcHVwQ29udGFpbmVyKGRvbU5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vdW50Tm9kZSkge1xuICAgICAgICAgIG1vdW50Tm9kZS5hcHBlbmRDaGlsZChwb3B1cENvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmV0cnkgYWZ0ZXIgZnJhbWUgcmVuZGVyIGluIGNhc2UgcGFyZW50IG5vdCByZWFkeVxuICAgICAgICAgIF90aGlzLmF0dGFjaElkID0gcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmF0dGFjaFBhcmVudChwb3B1cENvbnRhaW5lcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0Q29udGFpbmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wb3J0YWxDb250YWluZXIpIHtcbiAgICAgICAgICAvLyBJbiBSZWFjdC5TdHJpY3RNb2RlIGNvbXBvbmVudCB3aWxsIGNhbGwgcmVuZGVyIG11bHRpcGxlIHRpbWUgaW4gZmlyc3QgbW91bnQuXG4gICAgICAgICAgLy8gV2hlbiB5b3Ugd2FudCB0byByZWZhY3RvciB3aXRoIEZDLCB1c2VSZWYgd2lsbCBhbHNvIGluaXQgbXVsdGlwbGUgdGltZSBhbmRcbiAgICAgICAgICAvLyBwb2ludCB0byBkaWZmZXJlbnQgdXNlUmVmIGluc3RhbmNlIHdoaWNoIHdpbGwgY3JlYXRlIG11bHRpcGxlIGVsZW1lbnRcbiAgICAgICAgICAvLyAoVGhpcyBtdWx0aXBsZSByZW5kZXIgd2lsbCBub3QgdHJpZ2dlciBlZmZlY3Qgc28geW91IGNhbiBub3QgY2xlYW4gdXAgdGhpc1xuICAgICAgICAgIC8vIGluIGVmZmVjdCkuIEJ1dCB0aGlzIGlzIHNhZmUgd2l0aCBjbGFzcyBjb21wb25lbnQgc2luY2UgaXQgYWx3YXlzIHBvaW50IHRvIHNhbWUgY2xhc3MgaW5zdGFuY2UuXG4gICAgICAgICAgdmFyIGdldERvY3VtZW50ID0gX3RoaXMucHJvcHMuZ2V0RG9jdW1lbnQ7XG4gICAgICAgICAgdmFyIHBvcHVwQ29udGFpbmVyID0gZ2V0RG9jdW1lbnQoX3RoaXMuZ2V0Um9vdERvbU5vZGUoKSkuY3JlYXRlRWxlbWVudCgnZGl2Jyk7IC8vIE1ha2Ugc3VyZSBkZWZhdWx0IHBvcHVwIGNvbnRhaW5lciB3aWxsIG5ldmVyIGNhdXNlIHNjcm9sbGJhciBhcHBlYXJpbmdcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RyaWdnZXIvaXNzdWVzLzQxXG5cbiAgICAgICAgICBwb3B1cENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgcG9wdXBDb250YWluZXIuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICAgIHBvcHVwQ29udGFpbmVyLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICAgICAgcG9wdXBDb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgX3RoaXMucG9ydGFsQ29udGFpbmVyID0gcG9wdXBDb250YWluZXI7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5hdHRhY2hQYXJlbnQoX3RoaXMucG9ydGFsQ29udGFpbmVyKTtcblxuICAgICAgICByZXR1cm4gX3RoaXMucG9ydGFsQ29udGFpbmVyO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRQb2ludFwiLCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgdmFyIGFsaWduUG9pbnQgPSBfdGhpcy5wcm9wcy5hbGlnblBvaW50O1xuICAgICAgICBpZiAoIWFsaWduUG9pbnQgfHwgIXBvaW50KSByZXR1cm47XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHBvaW50OiB7XG4gICAgICAgICAgICBwYWdlWDogcG9pbnQucGFnZVgsXG4gICAgICAgICAgICBwYWdlWTogcG9pbnQucGFnZVlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQb3J0YWxVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMuc3RhdGUucHJldlBvcHVwVmlzaWJsZSAhPT0gX3RoaXMuc3RhdGUucG9wdXBWaXNpYmxlKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMuYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UoX3RoaXMuc3RhdGUucG9wdXBWaXNpYmxlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0cmlnZ2VyQ29udGV4dFZhbHVlXCIsIHtcbiAgICAgICAgb25Qb3B1cE1vdXNlRG93bjogX3RoaXMub25Qb3B1cE1vdXNlRG93blxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfcG9wdXBWaXNpYmxlO1xuXG4gICAgICBpZiAoJ3BvcHVwVmlzaWJsZScgaW4gcHJvcHMpIHtcbiAgICAgICAgX3BvcHVwVmlzaWJsZSA9ICEhcHJvcHMucG9wdXBWaXNpYmxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BvcHVwVmlzaWJsZSA9ICEhcHJvcHMuZGVmYXVsdFBvcHVwVmlzaWJsZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHByZXZQb3B1cFZpc2libGU6IF9wb3B1cFZpc2libGUsXG4gICAgICAgIHBvcHVwVmlzaWJsZTogX3BvcHVwVmlzaWJsZVxuICAgICAgfTtcbiAgICAgIEFMTF9IQU5ETEVSUy5mb3JFYWNoKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIF90aGlzW1wiZmlyZVwiLmNvbmNhdChoKV0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIF90aGlzLmZpcmVFdmVudHMoaCwgZSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVHJpZ2dlciwgW3tcbiAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7IC8vIFdlIG11c3QgbGlzdGVuIHRvIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCwgZWRnZSBjYXNlOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy81ODA0XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvY2FsZW5kYXIvaXNzdWVzLzI1MFxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RyaWdnZXIvaXNzdWVzLzUwXG5cbiAgICAgICAgaWYgKHN0YXRlLnBvcHVwVmlzaWJsZSkge1xuICAgICAgICAgIHZhciBjdXJyZW50RG9jdW1lbnQ7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlciAmJiAodGhpcy5pc0NsaWNrVG9IaWRlKCkgfHwgdGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpKSB7XG4gICAgICAgICAgICBjdXJyZW50RG9jdW1lbnQgPSBwcm9wcy5nZXREb2N1bWVudCh0aGlzLmdldFJvb3REb21Ob2RlKCkpO1xuICAgICAgICAgICAgdGhpcy5jbGlja091dHNpZGVIYW5kbGVyID0gYWRkRXZlbnRMaXN0ZW5lcihjdXJyZW50RG9jdW1lbnQsICdtb3VzZWRvd24nLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG4gICAgICAgICAgfSAvLyBhbHdheXMgaGlkZSBvbiBtb2JpbGVcblxuXG4gICAgICAgICAgaWYgKCF0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIpIHtcbiAgICAgICAgICAgIGN1cnJlbnREb2N1bWVudCA9IGN1cnJlbnREb2N1bWVudCB8fCBwcm9wcy5nZXREb2N1bWVudCh0aGlzLmdldFJvb3REb21Ob2RlKCkpO1xuICAgICAgICAgICAgdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyID0gYWRkRXZlbnRMaXN0ZW5lcihjdXJyZW50RG9jdW1lbnQsICd0b3VjaHN0YXJ0JywgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgICAgIH0gLy8gY2xvc2UgcG9wdXAgd2hlbiB0cmlnZ2VyIHR5cGUgY29udGFpbnMgJ29uQ29udGV4dE1lbnUnIGFuZCBkb2N1bWVudCBpcyBzY3JvbGxpbmcuXG5cblxuICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSAmJiB0aGlzLmlzQ29udGV4dE1lbnVUb1Nob3coKSkge1xuICAgICAgICAgICAgY3VycmVudERvY3VtZW50ID0gY3VycmVudERvY3VtZW50IHx8IHByb3BzLmdldERvY3VtZW50KHRoaXMuZ2V0Um9vdERvbU5vZGUoKSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxID0gYWRkRXZlbnRMaXN0ZW5lcihjdXJyZW50RG9jdW1lbnQsICdzY3JvbGwnLCB0aGlzLm9uQ29udGV4dE1lbnVDbG9zZSk7XG4gICAgICAgICAgfSAvLyBjbG9zZSBwb3B1cCB3aGVuIHRyaWdnZXIgdHlwZSBjb250YWlucyAnb25Db250ZXh0TWVudScgYW5kIHdpbmRvdyBpcyBibHVyLlxuXG5cbiAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIgJiYgdGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIgPSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ2JsdXInLCB0aGlzLm9uQ29udGV4dE1lbnVDbG9zZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbGVhck91dHNpZGVIYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgICAgIHRoaXMuY2xlYXJPdXRzaWRlSGFuZGxlcigpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3VzZURvd25UaW1lb3V0KTtcbiAgICAgICAgcmFmLmNhbmNlbCh0aGlzLmF0dGFjaElkKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UG9wdXBEb21Ob2RlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9wdXBEb21Ob2RlKCkge1xuICAgICAgICB2YXIgX3RoaXMkcG9wdXBSZWYkY3VycmVuMjtcblxuICAgICAgICAvLyBmb3IgdGVzdFxuICAgICAgICByZXR1cm4gKChfdGhpcyRwb3B1cFJlZiRjdXJyZW4yID0gdGhpcy5wb3B1cFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfdGhpcyRwb3B1cFJlZiRjdXJyZW4yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwb3B1cFJlZiRjdXJyZW4yLmdldEVsZW1lbnQoKSkgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UG9wdXBBbGlnblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvcHVwQWxpZ24oKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBwb3B1cFBsYWNlbWVudCA9IHByb3BzLnBvcHVwUGxhY2VtZW50LFxuICAgICAgICAgICAgcG9wdXBBbGlnbiA9IHByb3BzLnBvcHVwQWxpZ24sXG4gICAgICAgICAgICBidWlsdGluUGxhY2VtZW50cyA9IHByb3BzLmJ1aWx0aW5QbGFjZW1lbnRzO1xuXG4gICAgICAgIGlmIChwb3B1cFBsYWNlbWVudCAmJiBidWlsdGluUGxhY2VtZW50cykge1xuICAgICAgICAgIHJldHVybiBnZXRBbGlnbkZyb21QbGFjZW1lbnQoYnVpbHRpblBsYWNlbWVudHMsIHBvcHVwUGxhY2VtZW50LCBwb3B1cEFsaWduKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3B1cEFsaWduO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRQb3B1cFZpc2libGVcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0gcG9wdXBWaXNpYmxlICAgIFNob3cgb3Igbm90IHRoZSBwb3B1cCBlbGVtZW50XG4gICAgICAgKiBAcGFyYW0gZXZlbnQgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50LCB1c2VkIGZvciBgcG9pbnRBbGlnbmBcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc2V0UG9wdXBWaXNpYmxlKHBvcHVwVmlzaWJsZSwgZXZlbnQpIHtcbiAgICAgICAgdmFyIGFsaWduUG9pbnQgPSB0aGlzLnByb3BzLmFsaWduUG9pbnQ7XG4gICAgICAgIHZhciBwcmV2UG9wdXBWaXNpYmxlID0gdGhpcy5zdGF0ZS5wb3B1cFZpc2libGU7XG4gICAgICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG5cbiAgICAgICAgaWYgKHByZXZQb3B1cFZpc2libGUgIT09IHBvcHVwVmlzaWJsZSkge1xuICAgICAgICAgIGlmICghKCdwb3B1cFZpc2libGUnIGluIHRoaXMucHJvcHMpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgcG9wdXBWaXNpYmxlOiBwb3B1cFZpc2libGUsXG4gICAgICAgICAgICAgIHByZXZQb3B1cFZpc2libGU6IHByZXZQb3B1cFZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucHJvcHMub25Qb3B1cFZpc2libGVDaGFuZ2UocG9wdXBWaXNpYmxlKTtcbiAgICAgICAgfSAvLyBBbHdheXMgcmVjb3JkIHRoZSBwb2ludCBwb3NpdGlvbiBzaW5jZSBtb3VzZUVudGVyRGVsYXkgd2lsbCBkZWxheSB0aGUgc2hvd1xuXG5cbiAgICAgICAgaWYgKGFsaWduUG9pbnQgJiYgZXZlbnQgJiYgcG9wdXBWaXNpYmxlKSB7XG4gICAgICAgICAgdGhpcy5zZXRQb2ludChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVsYXlTZXRQb3B1cFZpc2libGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxheVNldFBvcHVwVmlzaWJsZSh2aXNpYmxlLCBkZWxheVMsIGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBkZWxheSA9IGRlbGF5UyAqIDEwMDA7XG4gICAgICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG5cbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgdmFyIHBvaW50ID0gZXZlbnQgPyB7XG4gICAgICAgICAgICBwYWdlWDogZXZlbnQucGFnZVgsXG4gICAgICAgICAgICBwYWdlWTogZXZlbnQucGFnZVlcbiAgICAgICAgICB9IDogbnVsbDtcbiAgICAgICAgICB0aGlzLmRlbGF5VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0UG9wdXBWaXNpYmxlKHZpc2libGUsIHBvaW50KTtcblxuICAgICAgICAgICAgX3RoaXMyLmNsZWFyRGVsYXlUaW1lcigpO1xuICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFBvcHVwVmlzaWJsZSh2aXNpYmxlLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xlYXJEZWxheVRpbWVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJEZWxheVRpbWVyKCkge1xuICAgICAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlUaW1lcik7XG4gICAgICAgICAgdGhpcy5kZWxheVRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbGVhck91dHNpZGVIYW5kbGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJPdXRzaWRlSGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlcikge1xuICAgICAgICAgIHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlci5yZW1vdmUoKTtcbiAgICAgICAgICB0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxLnJlbW92ZSgpO1xuICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyLnJlbW92ZSgpO1xuICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudG91Y2hPdXRzaWRlSGFuZGxlcikge1xuICAgICAgICAgIHRoaXMudG91Y2hPdXRzaWRlSGFuZGxlci5yZW1vdmUoKTtcbiAgICAgICAgICB0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZVR3b0NoYWluc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVR3b0NoYWlucyhldmVudCkge1xuICAgICAgICB2YXIgY2hpbGRQcm9zID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcztcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgICBpZiAoY2hpbGRQcm9zW2V2ZW50XSAmJiBwcm9wc1tldmVudF0pIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tcImZpcmVcIi5jb25jYXQoZXZlbnQpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3NbZXZlbnRdIHx8IHByb3BzW2V2ZW50XTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNDbGlja1RvU2hvd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ2xpY2tUb1Nob3coKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHM0LmFjdGlvbixcbiAgICAgICAgICAgIHNob3dBY3Rpb24gPSBfdGhpcyRwcm9wczQuc2hvd0FjdGlvbjtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdjbGljaycpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0NvbnRleHRNZW51T25seVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ29udGV4dE1lbnVPbmx5KCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gdGhpcy5wcm9wcy5hY3Rpb247XG4gICAgICAgIHJldHVybiBhY3Rpb24gPT09ICdjb250ZXh0TWVudScgfHwgYWN0aW9uLmxlbmd0aCA9PT0gMSAmJiBhY3Rpb25bMF0gPT09ICdjb250ZXh0TWVudSc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzQ29udGV4dE1lbnVUb1Nob3dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NvbnRleHRNZW51VG9TaG93KCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzNS5hY3Rpb24sXG4gICAgICAgICAgICBzaG93QWN0aW9uID0gX3RoaXMkcHJvcHM1LnNob3dBY3Rpb247XG4gICAgICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignY29udGV4dE1lbnUnKSAhPT0gLTEgfHwgc2hvd0FjdGlvbi5pbmRleE9mKCdjb250ZXh0TWVudScpICE9PSAtMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNDbGlja1RvSGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ2xpY2tUb0hpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHM2LmFjdGlvbixcbiAgICAgICAgICAgIGhpZGVBY3Rpb24gPSBfdGhpcyRwcm9wczYuaGlkZUFjdGlvbjtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdjbGljaycpICE9PSAtMSB8fCBoaWRlQWN0aW9uLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc01vdXNlRW50ZXJUb1Nob3dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc01vdXNlRW50ZXJUb1Nob3coKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHM3LmFjdGlvbixcbiAgICAgICAgICAgIHNob3dBY3Rpb24gPSBfdGhpcyRwcm9wczcuc2hvd0FjdGlvbjtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdob3ZlcicpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ21vdXNlRW50ZXInKSAhPT0gLTE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzTW91c2VMZWF2ZVRvSGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTW91c2VMZWF2ZVRvSGlkZSgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBhY3Rpb24gPSBfdGhpcyRwcm9wczguYWN0aW9uLFxuICAgICAgICAgICAgaGlkZUFjdGlvbiA9IF90aGlzJHByb3BzOC5oaWRlQWN0aW9uO1xuICAgICAgICByZXR1cm4gYWN0aW9uLmluZGV4T2YoJ2hvdmVyJykgIT09IC0xIHx8IGhpZGVBY3Rpb24uaW5kZXhPZignbW91c2VMZWF2ZScpICE9PSAtMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNGb2N1c1RvU2hvd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRm9jdXNUb1Nob3coKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczkgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHM5LmFjdGlvbixcbiAgICAgICAgICAgIHNob3dBY3Rpb24gPSBfdGhpcyRwcm9wczkuc2hvd0FjdGlvbjtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdmb2N1cycpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ2ZvY3VzJykgIT09IC0xO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0JsdXJUb0hpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0JsdXJUb0hpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczEwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzMTAuYWN0aW9uLFxuICAgICAgICAgICAgaGlkZUFjdGlvbiA9IF90aGlzJHByb3BzMTAuaGlkZUFjdGlvbjtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdmb2N1cycpICE9PSAtMSB8fCBoaWRlQWN0aW9uLmluZGV4T2YoJ2JsdXInKSAhPT0gLTE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZvcmNlUG9wdXBBbGlnblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvcmNlUG9wdXBBbGlnbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucG9wdXBWaXNpYmxlKSB7XG4gICAgICAgICAgdmFyIF90aGlzJHBvcHVwUmVmJGN1cnJlbjM7XG5cbiAgICAgICAgICAoX3RoaXMkcG9wdXBSZWYkY3VycmVuMyA9IHRoaXMucG9wdXBSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX3RoaXMkcG9wdXBSZWYkY3VycmVuMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcG9wdXBSZWYkY3VycmVuMy5mb3JjZUFsaWduKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlyZUV2ZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpcmVFdmVudHModHlwZSwgZSkge1xuICAgICAgICB2YXIgY2hpbGRDYWxsYmFjayA9IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHNbdHlwZV07XG5cbiAgICAgICAgaWYgKGNoaWxkQ2FsbGJhY2spIHtcbiAgICAgICAgICBjaGlsZENhbGxiYWNrKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5wcm9wc1t0eXBlXTtcblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICB0aGlzLnNldFBvcHVwVmlzaWJsZShmYWxzZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHBvcHVwVmlzaWJsZSA9IHRoaXMuc3RhdGUucG9wdXBWaXNpYmxlO1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMxMSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMTEuY2hpbGRyZW4sXG4gICAgICAgICAgICBmb3JjZVJlbmRlciA9IF90aGlzJHByb3BzMTEuZm9yY2VSZW5kZXIsXG4gICAgICAgICAgICBhbGlnblBvaW50ID0gX3RoaXMkcHJvcHMxMS5hbGlnblBvaW50LFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMxMS5jbGFzc05hbWUsXG4gICAgICAgICAgICBhdXRvRGVzdHJveSA9IF90aGlzJHByb3BzMTEuYXV0b0Rlc3Ryb3k7XG4gICAgICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgICAgICB2YXIgbmV3Q2hpbGRQcm9wcyA9IHtcbiAgICAgICAgICBrZXk6ICd0cmlnZ2VyJ1xuICAgICAgICB9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVmlzaWJsZSBIYW5kbGVycyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gPj4+IENvbnRleHRNZW51XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDb250ZXh0TWVudVRvU2hvdygpKSB7XG4gICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbkNvbnRleHRNZW51ID0gdGhpcy5vbkNvbnRleHRNZW51O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0NoaWxkUHJvcHMub25Db250ZXh0TWVudSA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbkNvbnRleHRNZW51Jyk7XG4gICAgICAgIH0gLy8gPj4+IENsaWNrXG5cblxuICAgICAgICBpZiAodGhpcy5pc0NsaWNrVG9IaWRlKCkgfHwgdGhpcy5pc0NsaWNrVG9TaG93KCkpIHtcbiAgICAgICAgICBuZXdDaGlsZFByb3BzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2s7XG4gICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd247XG4gICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vblRvdWNoU3RhcnQgPSB0aGlzLm9uVG91Y2hTdGFydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdDaGlsZFByb3BzLm9uQ2xpY2sgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25DbGljaycpO1xuICAgICAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZURvd24gPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Nb3VzZURvd24nKTtcbiAgICAgICAgICBuZXdDaGlsZFByb3BzLm9uVG91Y2hTdGFydCA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvblRvdWNoU3RhcnQnKTtcbiAgICAgICAgfSAvLyA+Pj4gSG92ZXIoZW50ZXIpXG5cblxuICAgICAgICBpZiAodGhpcy5pc01vdXNlRW50ZXJUb1Nob3coKSkge1xuICAgICAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5vbk1vdXNlRW50ZXI7IC8vIFBvaW50IGFsaWduXG5cbiAgICAgICAgICBpZiAoYWxpZ25Qb2ludCkge1xuICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTW92ZSA9IHRoaXMub25Nb3VzZU1vdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uTW91c2VFbnRlcicpO1xuICAgICAgICB9IC8vID4+PiBIb3ZlcihsZWF2ZSlcblxuXG4gICAgICAgIGlmICh0aGlzLmlzTW91c2VMZWF2ZVRvSGlkZSgpKSB7XG4gICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTGVhdmUgPSB0aGlzLm9uTW91c2VMZWF2ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdDaGlsZFByb3BzLm9uTW91c2VMZWF2ZSA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbk1vdXNlTGVhdmUnKTtcbiAgICAgICAgfSAvLyA+Pj4gRm9jdXNcblxuXG4gICAgICAgIGlmICh0aGlzLmlzRm9jdXNUb1Nob3coKSB8fCB0aGlzLmlzQmx1clRvSGlkZSgpKSB7XG4gICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbkZvY3VzID0gdGhpcy5vbkZvY3VzO1xuICAgICAgICAgIG5ld0NoaWxkUHJvcHMub25CbHVyID0gdGhpcy5vbkJsdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbkZvY3VzID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uRm9jdXMnKTtcbiAgICAgICAgICBuZXdDaGlsZFByb3BzLm9uQmx1ciA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbkJsdXInKTtcbiAgICAgICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gICAgICAgIHZhciBjaGlsZHJlbkNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2hpbGQgJiYgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpO1xuXG4gICAgICAgIGlmIChjaGlsZHJlbkNsYXNzTmFtZSkge1xuICAgICAgICAgIG5ld0NoaWxkUHJvcHMuY2xhc3NOYW1lID0gY2hpbGRyZW5DbGFzc05hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xvbmVQcm9wcyA9IF9vYmplY3RTcHJlYWQoe30sIG5ld0NoaWxkUHJvcHMpO1xuXG4gICAgICAgIGlmIChzdXBwb3J0UmVmKGNoaWxkKSkge1xuICAgICAgICAgIGNsb25lUHJvcHMucmVmID0gY29tcG9zZVJlZih0aGlzLnRyaWdnZXJSZWYsIGNoaWxkLnJlZik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJpZ2dlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNsb25lUHJvcHMpO1xuICAgICAgICB2YXIgcG9ydGFsOyAvLyBwcmV2ZW50IHVubW91bnRpbmcgYWZ0ZXIgaXQncyByZW5kZXJlZFxuXG4gICAgICAgIGlmIChwb3B1cFZpc2libGUgfHwgdGhpcy5wb3B1cFJlZi5jdXJyZW50IHx8IGZvcmNlUmVuZGVyKSB7XG4gICAgICAgICAgcG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBrZXk6IFwicG9ydGFsXCIsXG4gICAgICAgICAgICBnZXRDb250YWluZXI6IHRoaXMuZ2V0Q29udGFpbmVyLFxuICAgICAgICAgICAgZGlkVXBkYXRlOiB0aGlzLmhhbmRsZVBvcnRhbFVwZGF0ZVxuICAgICAgICAgIH0sIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwb3B1cFZpc2libGUgJiYgYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgICBwb3J0YWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyaWdnZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgICAgdmFsdWU6IHRoaXMudHJpZ2dlckNvbnRleHRWYWx1ZVxuICAgICAgICB9LCB0cmlnZ2VyLCBwb3J0YWwpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgdmFyIHBvcHVwVmlzaWJsZSA9IF9yZWYucG9wdXBWaXNpYmxlO1xuICAgICAgICB2YXIgbmV3U3RhdGUgPSB7fTtcblxuICAgICAgICBpZiAocG9wdXBWaXNpYmxlICE9PSB1bmRlZmluZWQgJiYgcHJldlN0YXRlLnBvcHVwVmlzaWJsZSAhPT0gcG9wdXBWaXNpYmxlKSB7XG4gICAgICAgICAgbmV3U3RhdGUucG9wdXBWaXNpYmxlID0gcG9wdXBWaXNpYmxlO1xuICAgICAgICAgIG5ld1N0YXRlLnByZXZQb3B1cFZpc2libGUgPSBwcmV2U3RhdGUucG9wdXBWaXNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUcmlnZ2VyO1xuICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgX2RlZmluZVByb3BlcnR5KFRyaWdnZXIsIFwiY29udGV4dFR5cGVcIiwgVHJpZ2dlckNvbnRleHQpO1xuXG4gIF9kZWZpbmVQcm9wZXJ0eShUcmlnZ2VyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gICAgcHJlZml4Q2xzOiAncmMtdHJpZ2dlci1wb3B1cCcsXG4gICAgZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ246IHJldHVybkVtcHR5U3RyaW5nLFxuICAgIGdldERvY3VtZW50OiByZXR1cm5Eb2N1bWVudCxcbiAgICBvblBvcHVwVmlzaWJsZUNoYW5nZTogbm9vcCxcbiAgICBhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTogbm9vcCxcbiAgICBvblBvcHVwQWxpZ246IG5vb3AsXG4gICAgcG9wdXBDbGFzc05hbWU6ICcnLFxuICAgIG1vdXNlRW50ZXJEZWxheTogMCxcbiAgICBtb3VzZUxlYXZlRGVsYXk6IDAuMSxcbiAgICBmb2N1c0RlbGF5OiAwLFxuICAgIGJsdXJEZWxheTogMC4xNSxcbiAgICBwb3B1cFN0eWxlOiB7fSxcbiAgICBkZXN0cm95UG9wdXBPbkhpZGU6IGZhbHNlLFxuICAgIHBvcHVwQWxpZ246IHt9LFxuICAgIGRlZmF1bHRQb3B1cFZpc2libGU6IGZhbHNlLFxuICAgIG1hc2s6IGZhbHNlLFxuICAgIG1hc2tDbG9zYWJsZTogdHJ1ZSxcbiAgICBhY3Rpb246IFtdLFxuICAgIHNob3dBY3Rpb246IFtdLFxuICAgIGhpZGVBY3Rpb246IFtdLFxuICAgIGF1dG9EZXN0cm95OiBmYWxzZVxuICB9KTtcblxuICByZXR1cm4gVHJpZ2dlcjtcbn1cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlVHJpZ2dlcihQb3J0YWwpOyIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgdmFyIHJlc3VsdCA9ICRBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICB2YXIgbiA9IDA7XG4gIGZvciAoOyBrIDwgZmluOyBrKyssIG4rKykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5nZXRCQm94KSB7XG4gICAgICB2YXIgX2dldEJCb3ggPSBlbGVtZW50LmdldEJCb3goKSxcbiAgICAgICAgd2lkdGggPSBfZ2V0QkJveC53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX2dldEJCb3guaGVpZ2h0O1xuICAgICAgaWYgKHdpZHRoIHx8IGhlaWdodCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICB2YXIgX2VsZW1lbnQkZ2V0Qm91bmRpbmdDID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgX3dpZHRoID0gX2VsZW1lbnQkZ2V0Qm91bmRpbmdDLndpZHRoLFxuICAgICAgICBfaGVpZ2h0ID0gX2VsZW1lbnQkZ2V0Qm91bmRpbmdDLmhlaWdodDtcbiAgICAgIGlmIChfd2lkdGggfHwgX2hlaWdodCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSk7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1JdGVtSW5wdXRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi8uLi9fdXRpbC93YXJuaW5nJztcbnZhciB1c2VGb3JtSXRlbVN0YXR1cyA9IGZ1bmN0aW9uIHVzZUZvcm1JdGVtU3RhdHVzKCkge1xuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1JdGVtSW5wdXRDb250ZXh0KSxcbiAgICBzdGF0dXMgPSBfdXNlQ29udGV4dC5zdGF0dXM7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdHVzICE9PSB1bmRlZmluZWQsICdGb3JtLkl0ZW0nLCBcIkZvcm0uSXRlbS51c2VTdGF0dXMgc2hvdWxkIGJlIHVzZWQgdW5kZXIgRm9ybS5JdGVtIGNvbXBvbmVudC4gRm9yIG1vcmUgaW5mb3JtYXRpb246IFwiLmNvbmNhdCh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wsIFwiLy9cIikuY29uY2F0KHdpbmRvdy5sb2NhdGlvbi5ob3N0LCBcIi9jb21wb25lbnRzL2Zvcm0tY24vI0Zvcm0uSXRlbS51c2VTdGF0dXNcIikpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIHN0YXR1czogc3RhdHVzXG4gIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ybUl0ZW1TdGF0dXM7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgUXVlc3Rpb25DaXJjbGVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyelwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk02MjMuNiAzMTYuN0M1OTMuNiAyOTAuNCA1NTQgMjc2IDUxMiAyNzZzLTgxLjYgMTQuNS0xMTEuNiA0MC43QzM2OS4yIDM0NCAzNTIgMzgwLjcgMzUyIDQyMHY3LjZjMCA0LjQgMy42IDggOCA4aDQ4YzQuNCAwIDgtMy42IDgtOFY0MjBjMC00NC4xIDQzLjEtODAgOTYtODBzOTYgMzUuOSA5NiA4MGMwIDMxLjEtMjIgNTkuNi01Ni4xIDcyLjctMjEuMiA4LjEtMzkuMiAyMi4zLTUyLjEgNDAuOS0xMy4xIDE5LTE5LjkgNDEuOC0xOS45IDY0LjlWNjIwYzAgNC40IDMuNiA4IDggOGg0OGM0LjQgMCA4LTMuNiA4LTh2LTIyLjdhNDguMyA0OC4zIDAgMDEzMC45LTQ0LjhjNTktMjIuNyA5Ny4xLTc0LjcgOTcuMS0xMzIuNS4xLTM5LjMtMTcuMS03Ni00OC4zLTEwMy4zek00NzIgNzMyYTQwIDQwIDAgMTA4MCAwIDQwIDQwIDAgMTAtODAgMHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcInF1ZXN0aW9uLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgUXVlc3Rpb25DaXJjbGVPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vUXVlc3Rpb25DaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBRdWVzdGlvbkNpcmNsZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBRdWVzdGlvbkNpcmNsZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5RdWVzdGlvbkNpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoUXVlc3Rpb25DaXJjbGVPdXRsaW5lZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENvbCBmcm9tICcuLi9ncmlkL2NvbCc7XG5pbXBvcnQgeyB1c2VMb2NhbGVSZWNlaXZlciB9IGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlcic7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tICcuLi9sb2NhbGUvZGVmYXVsdCc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi90b29sdGlwJztcbmltcG9ydCB7IEZvcm1Db250ZXh0IH0gZnJvbSAnLi9jb250ZXh0JztcbmZ1bmN0aW9uIHRvVG9vbHRpcFByb3BzKHRvb2x0aXApIHtcbiAgaWYgKCF0b29sdGlwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKF90eXBlb2YodG9vbHRpcCkgPT09ICdvYmplY3QnICYmICEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KHRvb2x0aXApKSB7XG4gICAgcmV0dXJuIHRvb2x0aXA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogdG9vbHRpcFxuICB9O1xufVxudmFyIEZvcm1JdGVtTGFiZWwgPSBmdW5jdGlvbiBGb3JtSXRlbUxhYmVsKF9yZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICBodG1sRm9yID0gX3JlZi5odG1sRm9yLFxuICAgIGxhYmVsQ29sID0gX3JlZi5sYWJlbENvbCxcbiAgICBsYWJlbEFsaWduID0gX3JlZi5sYWJlbEFsaWduLFxuICAgIGNvbG9uID0gX3JlZi5jb2xvbixcbiAgICByZXF1aXJlZCA9IF9yZWYucmVxdWlyZWQsXG4gICAgcmVxdWlyZWRNYXJrID0gX3JlZi5yZXF1aXJlZE1hcmssXG4gICAgdG9vbHRpcCA9IF9yZWYudG9vbHRpcDtcbiAgdmFyIF91c2VMb2NhbGVSZWNlaXZlciA9IHVzZUxvY2FsZVJlY2VpdmVyKCdGb3JtJyksXG4gICAgX3VzZUxvY2FsZVJlY2VpdmVyMiA9IF9zbGljZWRUb0FycmF5KF91c2VMb2NhbGVSZWNlaXZlciwgMSksXG4gICAgZm9ybUxvY2FsZSA9IF91c2VMb2NhbGVSZWNlaXZlcjJbMF07XG4gIGlmICghbGFiZWwpIHJldHVybiBudWxsO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuQ29uc3VtZXIsIHtcbiAgICBrZXk6IFwibGFiZWxcIlxuICB9LCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXMyO1xuICAgIHZhciB2ZXJ0aWNhbCA9IF9yZWYyLnZlcnRpY2FsLFxuICAgICAgY29udGV4dExhYmVsQWxpZ24gPSBfcmVmMi5sYWJlbEFsaWduLFxuICAgICAgY29udGV4dExhYmVsQ29sID0gX3JlZjIubGFiZWxDb2wsXG4gICAgICBsYWJlbFdyYXAgPSBfcmVmMi5sYWJlbFdyYXAsXG4gICAgICBjb250ZXh0Q29sb24gPSBfcmVmMi5jb2xvbjtcbiAgICB2YXIgX2E7XG4gICAgdmFyIG1lcmdlZExhYmVsQ29sID0gbGFiZWxDb2wgfHwgY29udGV4dExhYmVsQ29sIHx8IHt9O1xuICAgIHZhciBtZXJnZWRMYWJlbEFsaWduID0gbGFiZWxBbGlnbiB8fCBjb250ZXh0TGFiZWxBbGlnbjtcbiAgICB2YXIgbGFiZWxDbHNCYXNpYyA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1sYWJlbFwiKTtcbiAgICB2YXIgbGFiZWxDb2xDbGFzc05hbWUgPSBjbGFzc05hbWVzKGxhYmVsQ2xzQmFzaWMsIG1lcmdlZExhYmVsQWxpZ24gPT09ICdsZWZ0JyAmJiBcIlwiLmNvbmNhdChsYWJlbENsc0Jhc2ljLCBcIi1sZWZ0XCIpLCBtZXJnZWRMYWJlbENvbC5jbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQobGFiZWxDbHNCYXNpYywgXCItd3JhcFwiKSwgISFsYWJlbFdyYXApKTtcbiAgICB2YXIgbGFiZWxDaGlsZHJlbiA9IGxhYmVsO1xuICAgIC8vIEtlZXAgbGFiZWwgaXMgb3JpZ2luYWwgd2hlcmUgdGhlcmUgc2hvdWxkIGhhdmUgbm8gY29sb25cbiAgICB2YXIgY29tcHV0ZWRDb2xvbiA9IGNvbG9uID09PSB0cnVlIHx8IGNvbnRleHRDb2xvbiAhPT0gZmFsc2UgJiYgY29sb24gIT09IGZhbHNlO1xuICAgIHZhciBoYXZlQ29sb24gPSBjb21wdXRlZENvbG9uICYmICF2ZXJ0aWNhbDtcbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlZCB1c2VyIGlucHV0IGNvbG9uXG4gICAgaWYgKGhhdmVDb2xvbiAmJiB0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnICYmIGxhYmVsLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgIGxhYmVsQ2hpbGRyZW4gPSBsYWJlbC5yZXBsYWNlKC9bOnzvvJpdXFxzKiQvLCAnJyk7XG4gICAgfVxuICAgIC8vIFRvb2x0aXBcbiAgICB2YXIgdG9vbHRpcFByb3BzID0gdG9Ub29sdGlwUHJvcHModG9vbHRpcCk7XG4gICAgaWYgKHRvb2x0aXBQcm9wcykge1xuICAgICAgdmFyIF90b29sdGlwUHJvcHMkaWNvbiA9IHRvb2x0aXBQcm9wcy5pY29uLFxuICAgICAgICBpY29uID0gX3Rvb2x0aXBQcm9wcyRpY29uID09PSB2b2lkIDAgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChRdWVzdGlvbkNpcmNsZU91dGxpbmVkLCBudWxsKSA6IF90b29sdGlwUHJvcHMkaWNvbixcbiAgICAgICAgcmVzdFRvb2x0aXBQcm9wcyA9IF9fcmVzdCh0b29sdGlwUHJvcHMsIFtcImljb25cIl0pO1xuICAgICAgdmFyIHRvb2x0aXBOb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcCwgX2V4dGVuZHMoe30sIHJlc3RUb29sdGlwUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tdG9vbHRpcFwiKSxcbiAgICAgICAgdGl0bGU6ICcnXG4gICAgICB9KSk7XG4gICAgICBsYWJlbENoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGxhYmVsQ2hpbGRyZW4sIHRvb2x0aXBOb2RlKTtcbiAgICB9XG4gICAgLy8gQWRkIHJlcXVpcmVkIG1hcmsgaWYgb3B0aW9uYWxcbiAgICBpZiAocmVxdWlyZWRNYXJrID09PSAnb3B0aW9uYWwnICYmICFyZXF1aXJlZCkge1xuICAgICAgbGFiZWxDaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBsYWJlbENoaWxkcmVuLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1vcHRpb25hbFwiKSxcbiAgICAgICAgdGl0bGU6IFwiXCJcbiAgICAgIH0sIChmb3JtTG9jYWxlID09PSBudWxsIHx8IGZvcm1Mb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZvcm1Mb2NhbGUub3B0aW9uYWwpIHx8ICgoX2EgPSBkZWZhdWx0TG9jYWxlLkZvcm0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcHRpb25hbCkpKTtcbiAgICB9XG4gICAgdmFyIGxhYmVsQ2xhc3NOYW1lID0gY2xhc3NOYW1lcygoX2NsYXNzTmFtZXMyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1yZXF1aXJlZFwiKSwgcmVxdWlyZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tcmVxdWlyZWQtbWFyay1vcHRpb25hbFwiKSwgcmVxdWlyZWRNYXJrID09PSAnb3B0aW9uYWwnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLW5vLWNvbG9uXCIpLCAhY29tcHV0ZWRDb2xvbiksIF9jbGFzc05hbWVzMikpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb2wsIF9leHRlbmRzKHt9LCBtZXJnZWRMYWJlbENvbCwge1xuICAgICAgY2xhc3NOYW1lOiBsYWJlbENvbENsYXNzTmFtZVxuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICBjbGFzc05hbWU6IGxhYmVsQ2xhc3NOYW1lLFxuICAgICAgdGl0bGU6IHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycgPyBsYWJlbCA6ICcnXG4gICAgfSwgbGFiZWxDaGlsZHJlbikpO1xuICB9KTtcbn07XG5leHBvcnQgZGVmYXVsdCBGb3JtSXRlbUxhYmVsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ29sIGZyb20gJy4uL2dyaWQvY29sJztcbmltcG9ydCB7IEZvcm1Db250ZXh0LCBGb3JtSXRlbVByZWZpeENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnO1xuaW1wb3J0IEVycm9yTGlzdCBmcm9tICcuL0Vycm9yTGlzdCc7XG52YXIgRm9ybUl0ZW1JbnB1dCA9IGZ1bmN0aW9uIEZvcm1JdGVtSW5wdXQocHJvcHMpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBzdGF0dXMgPSBwcm9wcy5zdGF0dXMsXG4gICAgd3JhcHBlckNvbCA9IHByb3BzLndyYXBwZXJDb2wsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBlcnJvcnMgPSBwcm9wcy5lcnJvcnMsXG4gICAgd2FybmluZ3MgPSBwcm9wcy53YXJuaW5ncyxcbiAgICBmb3JtSXRlbVJlbmRlciA9IHByb3BzLl9pbnRlcm5hbEl0ZW1SZW5kZXIsXG4gICAgZXh0cmEgPSBwcm9wcy5leHRyYSxcbiAgICBoZWxwID0gcHJvcHMuaGVscCxcbiAgICBmaWVsZElkID0gcHJvcHMuZmllbGRJZCxcbiAgICBtYXJnaW5Cb3R0b20gPSBwcm9wcy5tYXJnaW5Cb3R0b20sXG4gICAgb25FcnJvclZpc2libGVDaGFuZ2VkID0gcHJvcHMub25FcnJvclZpc2libGVDaGFuZ2VkO1xuICB2YXIgYmFzZUNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbVwiKTtcbiAgdmFyIGZvcm1Db250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udGV4dCk7XG4gIHZhciBtZXJnZWRXcmFwcGVyQ29sID0gd3JhcHBlckNvbCB8fCBmb3JtQ29udGV4dC53cmFwcGVyQ29sIHx8IHt9O1xuICB2YXIgY2xhc3NOYW1lID0gY2xhc3NOYW1lcyhcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi1jb250cm9sXCIpLCBtZXJnZWRXcmFwcGVyQ29sLmNsYXNzTmFtZSk7XG4gIC8vIFBhc3MgdG8gc3ViIEZvcm1JdGVtIHNob3VsZCBub3Qgd2l0aCBjb2wgaW5mb1xuICB2YXIgc3ViRm9ybUNvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGZvcm1Db250ZXh0KTtcbiAgfSwgW2Zvcm1Db250ZXh0XSk7XG4gIGRlbGV0ZSBzdWJGb3JtQ29udGV4dC5sYWJlbENvbDtcbiAgZGVsZXRlIHN1YkZvcm1Db250ZXh0LndyYXBwZXJDb2w7XG4gIHZhciBpbnB1dERvbSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiLWNvbnRyb2wtaW5wdXRcIilcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoYmFzZUNsYXNzTmFtZSwgXCItY29udHJvbC1pbnB1dC1jb250ZW50XCIpXG4gIH0sIGNoaWxkcmVuKSk7XG4gIHZhciBmb3JtSXRlbUNvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICBzdGF0dXM6IHN0YXR1c1xuICAgIH07XG4gIH0sIFtwcmVmaXhDbHMsIHN0YXR1c10pO1xuICB2YXIgZXJyb3JMaXN0RG9tID0gbWFyZ2luQm90dG9tICE9PSBudWxsIHx8IGVycm9ycy5sZW5ndGggfHwgd2FybmluZ3MubGVuZ3RoID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4V3JhcDogJ25vd3JhcCdcbiAgICB9XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JdGVtUHJlZml4Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmb3JtSXRlbUNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXJyb3JMaXN0LCB7XG4gICAgZmllbGRJZDogZmllbGRJZCxcbiAgICBlcnJvcnM6IGVycm9ycyxcbiAgICB3YXJuaW5nczogd2FybmluZ3MsXG4gICAgaGVscDogaGVscCxcbiAgICBoZWxwU3RhdHVzOiBzdGF0dXMsXG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi1leHBsYWluLWNvbm5lY3RlZFwiKSxcbiAgICBvblZpc2libGVDaGFuZ2VkOiBvbkVycm9yVmlzaWJsZUNoYW5nZWRcbiAgfSkpLCAhIW1hcmdpbkJvdHRvbSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiBtYXJnaW5Cb3R0b21cbiAgICB9XG4gIH0pKSA6IG51bGw7XG4gIHZhciBleHRyYVByb3BzID0ge307XG4gIGlmIChmaWVsZElkKSB7XG4gICAgZXh0cmFQcm9wcy5pZCA9IFwiXCIuY29uY2F0KGZpZWxkSWQsIFwiX2V4dHJhXCIpO1xuICB9XG4gIC8vIElmIGV4dHJhID0gMCwgJiYgd2lsbCBnb2VzIHdyb25nXG4gIC8vIDAmJmVycm9yIC0+IDBcbiAgdmFyIGV4dHJhRG9tID0gZXh0cmEgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgZXh0cmFQcm9wcywge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoYmFzZUNsYXNzTmFtZSwgXCItZXh0cmFcIilcbiAgfSksIGV4dHJhKSA6IG51bGw7XG4gIHZhciBkb20gPSBmb3JtSXRlbVJlbmRlciAmJiBmb3JtSXRlbVJlbmRlci5tYXJrID09PSAncHJvX3RhYmxlX3JlbmRlcicgJiYgZm9ybUl0ZW1SZW5kZXIucmVuZGVyID8gZm9ybUl0ZW1SZW5kZXIucmVuZGVyKHByb3BzLCB7XG4gICAgaW5wdXQ6IGlucHV0RG9tLFxuICAgIGVycm9yTGlzdDogZXJyb3JMaXN0RG9tLFxuICAgIGV4dHJhOiBleHRyYURvbVxuICB9KSA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBpbnB1dERvbSwgZXJyb3JMaXN0RG9tLCBleHRyYURvbSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdWJGb3JtQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb2wsIF9leHRlbmRzKHt9LCBtZXJnZWRXcmFwcGVyQ29sLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSksIGRvbSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1JdGVtSW5wdXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IENoZWNrQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DaGVja0NpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IENsb3NlQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IExvYWRpbmdPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvTG9hZGluZ091dGxpbmVkXCI7XG5pbXBvcnQgdXNlTGF5b3V0RWZmZWN0IGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZUxheW91dEVmZmVjdFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb21pdCBmcm9tIFwicmMtdXRpbC9lcy9vbWl0XCI7XG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuLi8uLi9ncmlkJztcbmltcG9ydCBGb3JtSXRlbUxhYmVsIGZyb20gJy4uL0Zvcm1JdGVtTGFiZWwnO1xuaW1wb3J0IEZvcm1JdGVtSW5wdXQgZnJvbSAnLi4vRm9ybUl0ZW1JbnB1dCc7XG5pbXBvcnQgeyBGb3JtQ29udGV4dCwgRm9ybUl0ZW1JbnB1dENvbnRleHQsIE5vU3R5bGVJdGVtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IHVzZURlYm91bmNlIGZyb20gJy4uL2hvb2tzL3VzZURlYm91bmNlJztcbnZhciBpY29uTWFwID0ge1xuICBzdWNjZXNzOiBDaGVja0NpcmNsZUZpbGxlZCxcbiAgd2FybmluZzogRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQsXG4gIGVycm9yOiBDbG9zZUNpcmNsZUZpbGxlZCxcbiAgdmFsaWRhdGluZzogTG9hZGluZ091dGxpbmVkXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSXRlbUhvbGRlcihwcm9wcykge1xuICB2YXIgX2l0ZW1DbGFzc05hbWU7XG4gIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgaGVscCA9IHByb3BzLmhlbHAsXG4gICAgZXJyb3JzID0gcHJvcHMuZXJyb3JzLFxuICAgIHdhcm5pbmdzID0gcHJvcHMud2FybmluZ3MsXG4gICAgdmFsaWRhdGVTdGF0dXMgPSBwcm9wcy52YWxpZGF0ZVN0YXR1cyxcbiAgICBtZXRhID0gcHJvcHMubWV0YSxcbiAgICBoYXNGZWVkYmFjayA9IHByb3BzLmhhc0ZlZWRiYWNrLFxuICAgIGhpZGRlbiA9IHByb3BzLmhpZGRlbixcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIGZpZWxkSWQgPSBwcm9wcy5maWVsZElkLFxuICAgIGlzUmVxdWlyZWQgPSBwcm9wcy5pc1JlcXVpcmVkLFxuICAgIG9uU3ViSXRlbU1ldGFDaGFuZ2UgPSBwcm9wcy5vblN1Ykl0ZW1NZXRhQ2hhbmdlLFxuICAgIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJoZWxwXCIsIFwiZXJyb3JzXCIsIFwid2FybmluZ3NcIiwgXCJ2YWxpZGF0ZVN0YXR1c1wiLCBcIm1ldGFcIiwgXCJoYXNGZWVkYmFja1wiLCBcImhpZGRlblwiLCBcImNoaWxkcmVuXCIsIFwiZmllbGRJZFwiLCBcImlzUmVxdWlyZWRcIiwgXCJvblN1Ykl0ZW1NZXRhQ2hhbmdlXCJdKTtcbiAgdmFyIGl0ZW1QcmVmaXhDbHMgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW1cIik7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRleHQpLFxuICAgIHJlcXVpcmVkTWFyayA9IF9SZWFjdCR1c2VDb250ZXh0LnJlcXVpcmVkTWFyaztcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IE1hcmdpbiA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBkZWJvdW5jZUVycm9ycyA9IHVzZURlYm91bmNlKGVycm9ycyk7XG4gIHZhciBkZWJvdW5jZVdhcm5pbmdzID0gdXNlRGVib3VuY2Uod2FybmluZ3MpO1xuICB2YXIgaGFzSGVscCA9IGhlbHAgIT09IHVuZGVmaW5lZCAmJiBoZWxwICE9PSBudWxsO1xuICB2YXIgaGFzRXJyb3IgPSAhIShoYXNIZWxwIHx8IGVycm9ycy5sZW5ndGggfHwgd2FybmluZ3MubGVuZ3RoKTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIG1hcmdpbkJvdHRvbSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgc2V0TWFyZ2luQm90dG9tID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaGFzRXJyb3IgJiYgaXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgaXRlbVN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShpdGVtUmVmLmN1cnJlbnQpO1xuICAgICAgc2V0TWFyZ2luQm90dG9tKHBhcnNlSW50KGl0ZW1TdHlsZS5tYXJnaW5Cb3R0b20sIDEwKSk7XG4gICAgfVxuICB9LCBbaGFzRXJyb3JdKTtcbiAgdmFyIG9uRXJyb3JWaXNpYmxlQ2hhbmdlZCA9IGZ1bmN0aW9uIG9uRXJyb3JWaXNpYmxlQ2hhbmdlZChuZXh0VmlzaWJsZSkge1xuICAgIGlmICghbmV4dFZpc2libGUpIHtcbiAgICAgIHNldE1hcmdpbkJvdHRvbShudWxsKTtcbiAgICB9XG4gIH07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBTdGF0dXMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBtZXJnZWRWYWxpZGF0ZVN0YXR1cyA9ICcnO1xuICBpZiAodmFsaWRhdGVTdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG1lcmdlZFZhbGlkYXRlU3RhdHVzID0gdmFsaWRhdGVTdGF0dXM7XG4gIH0gZWxzZSBpZiAobWV0YS52YWxpZGF0aW5nKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAndmFsaWRhdGluZyc7XG4gIH0gZWxzZSBpZiAoZGVib3VuY2VFcnJvcnMubGVuZ3RoKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAnZXJyb3InO1xuICB9IGVsc2UgaWYgKGRlYm91bmNlV2FybmluZ3MubGVuZ3RoKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAnd2FybmluZyc7XG4gIH0gZWxzZSBpZiAobWV0YS50b3VjaGVkKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAnc3VjY2Vzcyc7XG4gIH1cbiAgdmFyIGZvcm1JdGVtU3RhdHVzQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBmZWVkYmFja0ljb247XG4gICAgaWYgKGhhc0ZlZWRiYWNrKSB7XG4gICAgICB2YXIgSWNvbk5vZGUgPSBtZXJnZWRWYWxpZGF0ZVN0YXR1cyAmJiBpY29uTWFwW21lcmdlZFZhbGlkYXRlU3RhdHVzXTtcbiAgICAgIGZlZWRiYWNrSWNvbiA9IEljb25Ob2RlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLWZlZWRiYWNrLWljb25cIiksIFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLWZlZWRiYWNrLWljb24tXCIpLmNvbmNhdChtZXJnZWRWYWxpZGF0ZVN0YXR1cykpXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uTm9kZSwgbnVsbCkpIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogbWVyZ2VkVmFsaWRhdGVTdGF0dXMsXG4gICAgICBoYXNGZWVkYmFjazogaGFzRmVlZGJhY2ssXG4gICAgICBmZWVkYmFja0ljb246IGZlZWRiYWNrSWNvbixcbiAgICAgIGlzRm9ybUl0ZW1JbnB1dDogdHJ1ZVxuICAgIH07XG4gIH0sIFttZXJnZWRWYWxpZGF0ZVN0YXR1cywgaGFzRmVlZGJhY2tdKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IFJlbmRlciA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGl0ZW1DbGFzc05hbWUgPSAoX2l0ZW1DbGFzc05hbWUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9pdGVtQ2xhc3NOYW1lLCBpdGVtUHJlZml4Q2xzLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi13aXRoLWhlbHBcIiksIGhhc0hlbHAgfHwgZGVib3VuY2VFcnJvcnMubGVuZ3RoIHx8IGRlYm91bmNlV2FybmluZ3MubGVuZ3RoKSwgX2RlZmluZVByb3BlcnR5KF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChjbGFzc05hbWUpLCAhIWNsYXNzTmFtZSksIF9kZWZpbmVQcm9wZXJ0eShfaXRlbUNsYXNzTmFtZSwgXCJcIi5jb25jYXQoaXRlbVByZWZpeENscywgXCItaGFzLWZlZWRiYWNrXCIpLCBtZXJnZWRWYWxpZGF0ZVN0YXR1cyAmJiBoYXNGZWVkYmFjayksIF9kZWZpbmVQcm9wZXJ0eShfaXRlbUNsYXNzTmFtZSwgXCJcIi5jb25jYXQoaXRlbVByZWZpeENscywgXCItaGFzLXN1Y2Nlc3NcIiksIG1lcmdlZFZhbGlkYXRlU3RhdHVzID09PSAnc3VjY2VzcycpLCBfZGVmaW5lUHJvcGVydHkoX2l0ZW1DbGFzc05hbWUsIFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLWhhcy13YXJuaW5nXCIpLCBtZXJnZWRWYWxpZGF0ZVN0YXR1cyA9PT0gJ3dhcm5pbmcnKSwgX2RlZmluZVByb3BlcnR5KF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1oYXMtZXJyb3JcIiksIG1lcmdlZFZhbGlkYXRlU3RhdHVzID09PSAnZXJyb3InKSwgX2RlZmluZVByb3BlcnR5KF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1pcy12YWxpZGF0aW5nXCIpLCBtZXJnZWRWYWxpZGF0ZVN0YXR1cyA9PT0gJ3ZhbGlkYXRpbmcnKSwgX2RlZmluZVByb3BlcnR5KF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1oaWRkZW5cIiksIGhpZGRlbiksIF9pdGVtQ2xhc3NOYW1lKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoaXRlbUNsYXNzTmFtZSksXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHJlZjogaXRlbVJlZlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3csIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLXJvd1wiKVxuICB9LCBvbWl0KHJlc3RQcm9wcywgWydfaW50ZXJuYWxJdGVtUmVuZGVyJywgJ2NvbG9uJywgJ2RlcGVuZGVuY2llcycsICdleHRyYScsICdmaWVsZEtleScsICdnZXRWYWx1ZUZyb21FdmVudCcsICdnZXRWYWx1ZVByb3BzJywgJ2h0bWxGb3InLCAnaWQnLCAnaW5pdGlhbFZhbHVlJywgJ2lzTGlzdEZpZWxkJywgJ2xhYmVsJywgJ2xhYmVsQWxpZ24nLCAnbGFiZWxDb2wnLCAnbGFiZWxXcmFwJywgJ21lc3NhZ2VWYXJpYWJsZXMnLCAnbmFtZScsICdub3JtYWxpemUnLCAnbm9TdHlsZScsICdwcmVzZXJ2ZScsICdyZXF1aXJlZCcsICdyZXF1aXJlZE1hcmsnLCAncnVsZXMnLCAnc2hvdWxkVXBkYXRlJywgJ3RyaWdnZXInLCAndG9vbHRpcCcsICd2YWxpZGF0ZUZpcnN0JywgJ3ZhbGlkYXRlVHJpZ2dlcicsICd2YWx1ZVByb3BOYW1lJywgJ3dyYXBwZXJDb2wnXSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSXRlbUxhYmVsLCBfZXh0ZW5kcyh7XG4gICAgaHRtbEZvcjogZmllbGRJZCxcbiAgICByZXF1aXJlZDogaXNSZXF1aXJlZCxcbiAgICByZXF1aXJlZE1hcms6IHJlcXVpcmVkTWFya1xuICB9LCBwcm9wcywge1xuICAgIHByZWZpeENsczogcHJlZml4Q2xzXG4gIH0pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUl0ZW1JbnB1dCwgX2V4dGVuZHMoe30sIHByb3BzLCBtZXRhLCB7XG4gICAgZXJyb3JzOiBkZWJvdW5jZUVycm9ycyxcbiAgICB3YXJuaW5nczogZGVib3VuY2VXYXJuaW5ncyxcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICBzdGF0dXM6IG1lcmdlZFZhbGlkYXRlU3RhdHVzLFxuICAgIGhlbHA6IGhlbHAsXG4gICAgbWFyZ2luQm90dG9tOiBtYXJnaW5Cb3R0b20sXG4gICAgb25FcnJvclZpc2libGVDaGFuZ2VkOiBvbkVycm9yVmlzaWJsZUNoYW5nZWRcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vU3R5bGVJdGVtQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBvblN1Ykl0ZW1NZXRhQ2hhbmdlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JdGVtSW5wdXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZvcm1JdGVtU3RhdHVzQ29udGV4dFxuICB9LCBjaGlsZHJlbikpKSksICEhbWFyZ2luQm90dG9tICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLW1hcmdpbi1vZmZzZXRcIiksXG4gICAgc3R5bGU6IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogLW1hcmdpbkJvdHRvbVxuICAgIH1cbiAgfSkpO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHsgRmllbGQsIEZpZWxkQ29udGV4dCwgTGlzdENvbnRleHQgfSBmcm9tICdyYy1maWVsZC1mb3JtJztcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZVwiO1xuaW1wb3J0IHsgc3VwcG9ydFJlZiB9IGZyb20gXCJyYy11dGlsL2VzL3JlZlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VGb3JtSXRlbVN0YXR1cyBmcm9tICcuLi9ob29rcy91c2VGb3JtSXRlbVN0YXR1cyc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCB7IGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICcuLi8uLi9fdXRpbC9yZWFjdE5vZGUnO1xuaW1wb3J0IHsgdHVwbGUgfSBmcm9tICcuLi8uLi9fdXRpbC90eXBlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uLy4uL191dGlsL3dhcm5pbmcnO1xuaW1wb3J0IHsgRm9ybUNvbnRleHQsIE5vU3R5bGVJdGVtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IHVzZUZyYW1lU3RhdGUgZnJvbSAnLi4vaG9va3MvdXNlRnJhbWVTdGF0ZSc7XG5pbXBvcnQgdXNlSXRlbVJlZiBmcm9tICcuLi9ob29rcy91c2VJdGVtUmVmJztcbmltcG9ydCB7IGdldEZpZWxkSWQsIHRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBJdGVtSG9sZGVyIGZyb20gJy4vSXRlbUhvbGRlcic7XG52YXIgTkFNRV9TUExJVCA9ICdfX1NQTElUX18nO1xudmFyIFZhbGlkYXRlU3RhdHVzZXMgPSB0dXBsZSgnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJywgJ3ZhbGlkYXRpbmcnLCAnJyk7XG52YXIgTWVtb0lucHV0ID0gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSwgZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgcmV0dXJuIHByZXYudmFsdWUgPT09IG5leHQudmFsdWUgJiYgcHJldi51cGRhdGUgPT09IG5leHQudXBkYXRlICYmIHByZXYuY2hpbGRQcm9wcy5sZW5ndGggPT09IG5leHQuY2hpbGRQcm9wcy5sZW5ndGggJiYgcHJldi5jaGlsZFByb3BzLmV2ZXJ5KGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG5leHQuY2hpbGRQcm9wc1tpbmRleF07XG4gIH0pO1xufSk7XG5mdW5jdGlvbiBoYXNWYWxpZE5hbWUobmFtZSkge1xuICBpZiAobmFtZSA9PT0gbnVsbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdGb3JtLkl0ZW0nLCAnYG51bGxgIGlzIHBhc3NlZCBhcyBgbmFtZWAgcHJvcGVydHknKSA6IHZvaWQgMDtcbiAgfVxuICByZXR1cm4gIShuYW1lID09PSB1bmRlZmluZWQgfHwgbmFtZSA9PT0gbnVsbCk7XG59XG5mdW5jdGlvbiBnZW5FbXB0eU1ldGEoKSB7XG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW10sXG4gICAgdG91Y2hlZDogZmFsc2UsXG4gICAgdmFsaWRhdGluZzogZmFsc2UsXG4gICAgdmFsaWRhdGVkOiBmYWxzZSxcbiAgICBuYW1lOiBbXVxuICB9O1xufVxuZnVuY3Rpb24gSW50ZXJuYWxGb3JtSXRlbShwcm9wcykge1xuICB2YXIgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgbm9TdHlsZSA9IHByb3BzLm5vU3R5bGUsXG4gICAgZGVwZW5kZW5jaWVzID0gcHJvcHMuZGVwZW5kZW5jaWVzLFxuICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBzaG91bGRVcGRhdGUgPSBwcm9wcy5zaG91bGRVcGRhdGUsXG4gICAgcnVsZXMgPSBwcm9wcy5ydWxlcyxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICBtZXNzYWdlVmFyaWFibGVzID0gcHJvcHMubWVzc2FnZVZhcmlhYmxlcyxcbiAgICBfcHJvcHMkdHJpZ2dlciA9IHByb3BzLnRyaWdnZXIsXG4gICAgdHJpZ2dlciA9IF9wcm9wcyR0cmlnZ2VyID09PSB2b2lkIDAgPyAnb25DaGFuZ2UnIDogX3Byb3BzJHRyaWdnZXIsXG4gICAgdmFsaWRhdGVUcmlnZ2VyID0gcHJvcHMudmFsaWRhdGVUcmlnZ2VyLFxuICAgIGhpZGRlbiA9IHByb3BzLmhpZGRlbjtcbiAgdmFyIF91c2VDb250ZXh0ID0gdXNlQ29udGV4dChDb25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfdXNlQ29udGV4dC5nZXRQcmVmaXhDbHM7XG4gIHZhciBfdXNlQ29udGV4dDIgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KSxcbiAgICBmb3JtTmFtZSA9IF91c2VDb250ZXh0Mi5uYW1lO1xuICB2YXIgaXNSZW5kZXJQcm9wcyA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJztcbiAgdmFyIG5vdGlmeVBhcmVudE1ldGFDaGFuZ2UgPSB1c2VDb250ZXh0KE5vU3R5bGVJdGVtQ29udGV4dCk7XG4gIHZhciBfdXNlQ29udGV4dDMgPSB1c2VDb250ZXh0KEZpZWxkQ29udGV4dCksXG4gICAgY29udGV4dFZhbGlkYXRlVHJpZ2dlciA9IF91c2VDb250ZXh0My52YWxpZGF0ZVRyaWdnZXI7XG4gIHZhciBtZXJnZWRWYWxpZGF0ZVRyaWdnZXIgPSB2YWxpZGF0ZVRyaWdnZXIgIT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlVHJpZ2dlciA6IGNvbnRleHRWYWxpZGF0ZVRyaWdnZXI7XG4gIHZhciBoYXNOYW1lID0gaGFzVmFsaWROYW1lKG5hbWUpO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdmb3JtJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBNSVNDID09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gR2V0IGBub1N0eWxlYCByZXF1aXJlZCBpbmZvXG4gIHZhciBsaXN0Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICB2YXIgZmllbGRLZXlQYXRoUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBFcnJvcnMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID4+Pj4+IENvbGxlY3Qgc3ViIGZpZWxkIGVycm9yc1xuICB2YXIgX3VzZUZyYW1lU3RhdGUgPSB1c2VGcmFtZVN0YXRlKHt9KSxcbiAgICBfdXNlRnJhbWVTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlRnJhbWVTdGF0ZSwgMiksXG4gICAgc3ViRmllbGRFcnJvcnMgPSBfdXNlRnJhbWVTdGF0ZTJbMF0sXG4gICAgc2V0U3ViRmllbGRFcnJvcnMgPSBfdXNlRnJhbWVTdGF0ZTJbMV07XG4gIC8vID4+Pj4+IEN1cnJlbnQgZmllbGQgZXJyb3JzXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2VuRW1wdHlNZXRhKCk7XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgbWV0YSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0TWV0YSA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBvbk1ldGFDaGFuZ2UgPSBmdW5jdGlvbiBvbk1ldGFDaGFuZ2UobmV4dE1ldGEpIHtcbiAgICAvLyBUaGlzIGtleUluZm8gaXMgbm90IGNvcnJlY3Qgd2hlbiBmaWVsZCBpcyByZW1vdmVkXG4gICAgLy8gU2luY2Ugb3JpZ2luIGtleU1hbmFnZXIgbm8gbG9uZ2VyIGtlZXAgdGhlIG9yaWdpbiBrZXkgYW55bW9yZVxuICAgIC8vIFdoaWNoIG1lYW5zIHdlIG5lZWQgY2FjaGUgb3JpZ2luIG9uZSBhbmQgcmV1c2Ugd2hlbiByZW1vdmVkXG4gICAgdmFyIGtleUluZm8gPSBsaXN0Q29udGV4dCA9PT0gbnVsbCB8fCBsaXN0Q29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdENvbnRleHQuZ2V0S2V5KG5leHRNZXRhLm5hbWUpO1xuICAgIC8vIERlc3Ryb3kgd2lsbCByZXNldCBhbGwgdGhlIG1ldGFcbiAgICBzZXRNZXRhKG5leHRNZXRhLmRlc3Ryb3kgPyBnZW5FbXB0eU1ldGEoKSA6IG5leHRNZXRhLCB0cnVlKTtcbiAgICAvLyBCdW1wIHRvIHBhcmVudCBzaW5jZSBub1N0eWxlXG4gICAgaWYgKG5vU3R5bGUgJiYgbm90aWZ5UGFyZW50TWV0YUNoYW5nZSkge1xuICAgICAgdmFyIG5hbWVQYXRoID0gbmV4dE1ldGEubmFtZTtcbiAgICAgIGlmICghbmV4dE1ldGEuZGVzdHJveSkge1xuICAgICAgICBpZiAoa2V5SW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIF9rZXlJbmZvID0gX3NsaWNlZFRvQXJyYXkoa2V5SW5mbywgMiksXG4gICAgICAgICAgICBmaWVsZEtleSA9IF9rZXlJbmZvWzBdLFxuICAgICAgICAgICAgcmVzdFBhdGggPSBfa2V5SW5mb1sxXTtcbiAgICAgICAgICBuYW1lUGF0aCA9IFtmaWVsZEtleV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShyZXN0UGF0aCkpO1xuICAgICAgICAgIGZpZWxkS2V5UGF0aFJlZi5jdXJyZW50ID0gbmFtZVBhdGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVzZSBvcmlnaW4gY2FjaGUgZGF0YVxuICAgICAgICBuYW1lUGF0aCA9IGZpZWxkS2V5UGF0aFJlZi5jdXJyZW50IHx8IG5hbWVQYXRoO1xuICAgICAgfVxuICAgICAgbm90aWZ5UGFyZW50TWV0YUNoYW5nZShuZXh0TWV0YSwgbmFtZVBhdGgpO1xuICAgIH1cbiAgfTtcbiAgLy8gPj4+Pj4gQ29sbGVjdCBub1N0eWxlIEZpZWxkIGVycm9yIHRvIHRoZSB0b3AgRm9ybUl0ZW1cbiAgdmFyIG9uU3ViSXRlbU1ldGFDaGFuZ2UgPSBmdW5jdGlvbiBvblN1Ykl0ZW1NZXRhQ2hhbmdlKHN1Yk1ldGEsIHVuaXF1ZUtleXMpIHtcbiAgICAvLyBPbmx5IGBub1N0eWxlYCBzdWIgaXRlbSB3aWxsIHRyaWdnZXJcbiAgICBzZXRTdWJGaWVsZEVycm9ycyhmdW5jdGlvbiAocHJldlN1YkZpZWxkRXJyb3JzKSB7XG4gICAgICB2YXIgY2xvbmUgPSBfZXh0ZW5kcyh7fSwgcHJldlN1YkZpZWxkRXJyb3JzKTtcbiAgICAgIC8vIG5hbWU6IFsndXNlcicsIDFdICsga2V5OiBbNF0gPSBbJ3VzZXInLCA0XVxuICAgICAgdmFyIG1lcmdlZE5hbWVQYXRoID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzdWJNZXRhLm5hbWUuc2xpY2UoMCwgLTEpKSwgX3RvQ29uc3VtYWJsZUFycmF5KHVuaXF1ZUtleXMpKTtcbiAgICAgIHZhciBtZXJnZWROYW1lS2V5ID0gbWVyZ2VkTmFtZVBhdGguam9pbihOQU1FX1NQTElUKTtcbiAgICAgIGlmIChzdWJNZXRhLmRlc3Ryb3kpIHtcbiAgICAgICAgLy8gUmVtb3ZlXG4gICAgICAgIGRlbGV0ZSBjbG9uZVttZXJnZWROYW1lS2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVwZGF0ZVxuICAgICAgICBjbG9uZVttZXJnZWROYW1lS2V5XSA9IHN1Yk1ldGE7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xvbmU7XG4gICAgfSk7XG4gIH07XG4gIC8vID4+Pj4+IEdldCBtZXJnZWQgZXJyb3JzXG4gIHZhciBfUmVhY3QkdXNlTWVtbyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVycm9yTGlzdCA9IF90b0NvbnN1bWFibGVBcnJheShtZXRhLmVycm9ycyk7XG4gICAgICB2YXIgd2FybmluZ0xpc3QgPSBfdG9Db25zdW1hYmxlQXJyYXkobWV0YS53YXJuaW5ncyk7XG4gICAgICBPYmplY3QudmFsdWVzKHN1YkZpZWxkRXJyb3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJGaWVsZEVycm9yKSB7XG4gICAgICAgIGVycm9yTGlzdC5wdXNoLmFwcGx5KGVycm9yTGlzdCwgX3RvQ29uc3VtYWJsZUFycmF5KHN1YkZpZWxkRXJyb3IuZXJyb3JzIHx8IFtdKSk7XG4gICAgICAgIHdhcm5pbmdMaXN0LnB1c2guYXBwbHkod2FybmluZ0xpc3QsIF90b0NvbnN1bWFibGVBcnJheShzdWJGaWVsZEVycm9yLndhcm5pbmdzIHx8IFtdKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBbZXJyb3JMaXN0LCB3YXJuaW5nTGlzdF07XG4gICAgfSwgW3N1YkZpZWxkRXJyb3JzLCBtZXRhLmVycm9ycywgbWV0YS53YXJuaW5nc10pLFxuICAgIF9SZWFjdCR1c2VNZW1vMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VNZW1vLCAyKSxcbiAgICBtZXJnZWRFcnJvcnMgPSBfUmVhY3QkdXNlTWVtbzJbMF0sXG4gICAgbWVyZ2VkV2FybmluZ3MgPSBfUmVhY3QkdXNlTWVtbzJbMV07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBDaGlsZHJlbiBSZWYgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBnZXRJdGVtUmVmID0gdXNlSXRlbVJlZigpO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiByZW5kZXJMYXlvdXQoYmFzZUNoaWxkcmVuLCBmaWVsZElkLCBpc1JlcXVpcmVkKSB7XG4gICAgaWYgKG5vU3R5bGUgJiYgIWhpZGRlbikge1xuICAgICAgcmV0dXJuIGJhc2VDaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW1Ib2xkZXIsIF9leHRlbmRzKHtcbiAgICAgIGtleTogXCJyb3dcIlxuICAgIH0sIHByb3BzLCB7XG4gICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgIGZpZWxkSWQ6IGZpZWxkSWQsXG4gICAgICBpc1JlcXVpcmVkOiBpc1JlcXVpcmVkLFxuICAgICAgZXJyb3JzOiBtZXJnZWRFcnJvcnMsXG4gICAgICB3YXJuaW5nczogbWVyZ2VkV2FybmluZ3MsXG4gICAgICBtZXRhOiBtZXRhLFxuICAgICAgb25TdWJJdGVtTWV0YUNoYW5nZTogb25TdWJJdGVtTWV0YUNoYW5nZVxuICAgIH0pLCBiYXNlQ2hpbGRyZW4pO1xuICB9XG4gIGlmICghaGFzTmFtZSAmJiAhaXNSZW5kZXJQcm9wcyAmJiAhZGVwZW5kZW5jaWVzKSB7XG4gICAgcmV0dXJuIHJlbmRlckxheW91dChjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZhcmlhYmxlcyA9IHt9O1xuICBpZiAodHlwZW9mIGxhYmVsID09PSAnc3RyaW5nJykge1xuICAgIHZhcmlhYmxlcy5sYWJlbCA9IGxhYmVsO1xuICB9IGVsc2UgaWYgKG5hbWUpIHtcbiAgICB2YXJpYWJsZXMubGFiZWwgPSBTdHJpbmcobmFtZSk7XG4gIH1cbiAgaWYgKG1lc3NhZ2VWYXJpYWJsZXMpIHtcbiAgICB2YXJpYWJsZXMgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgdmFyaWFibGVzKSwgbWVzc2FnZVZhcmlhYmxlcyk7XG4gIH1cbiAgLy8gPj4+Pj4gV2l0aCBGaWVsZFxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG1lc3NhZ2VWYXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgIHZhbGlkYXRlVHJpZ2dlcjogbWVyZ2VkVmFsaWRhdGVUcmlnZ2VyLFxuICAgIG9uTWV0YUNoYW5nZTogb25NZXRhQ2hhbmdlXG4gIH0pLCBmdW5jdGlvbiAoY29udHJvbCwgcmVuZGVyTWV0YSwgY29udGV4dCkge1xuICAgIHZhciBtZXJnZWROYW1lID0gdG9BcnJheShuYW1lKS5sZW5ndGggJiYgcmVuZGVyTWV0YSA/IHJlbmRlck1ldGEubmFtZSA6IFtdO1xuICAgIHZhciBmaWVsZElkID0gZ2V0RmllbGRJZChtZXJnZWROYW1lLCBmb3JtTmFtZSk7XG4gICAgdmFyIGlzUmVxdWlyZWQgPSByZXF1aXJlZCAhPT0gdW5kZWZpbmVkID8gcmVxdWlyZWQgOiAhIShydWxlcyAmJiBydWxlcy5zb21lKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBpZiAocnVsZSAmJiBfdHlwZW9mKHJ1bGUpID09PSAnb2JqZWN0JyAmJiBydWxlLnJlcXVpcmVkICYmICFydWxlLndhcm5pbmdPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBydWxlRW50aXR5ID0gcnVsZShjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHJ1bGVFbnRpdHkgJiYgcnVsZUVudGl0eS5yZXF1aXJlZCAmJiAhcnVsZUVudGl0eS53YXJuaW5nT25seTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KSk7XG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT0gQ2hpbGRyZW4gPT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YXIgbWVyZ2VkQ29udHJvbCA9IF9leHRlbmRzKHt9LCBjb250cm9sKTtcbiAgICB2YXIgY2hpbGROb2RlID0gbnVsbDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoc2hvdWxkVXBkYXRlICYmIGRlcGVuZGVuY2llcyksICdGb3JtLkl0ZW0nLCBcImBzaG91bGRVcGRhdGVgIGFuZCBgZGVwZW5kZW5jaWVzYCBzaG91bGRuJ3QgYmUgdXNlZCB0b2dldGhlci4gU2VlIGh0dHBzOi8vdS5hbnQuZGVzaWduL2Zvcm0tZGVwcy5cIikgOiB2b2lkIDA7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGhhc05hbWUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdGb3JtLkl0ZW0nLCAnQSBgRm9ybS5JdGVtYCB3aXRoIGEgYG5hbWVgIHByb3AgbXVzdCBoYXZlIGEgc2luZ2xlIGNoaWxkIGVsZW1lbnQuIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdG8gcmVuZGVyIG1vcmUgY29tcGxleCBmb3JtIGl0ZW1zLCBzZWUgaHR0cHM6Ly91LmFudC5kZXNpZ24vY29tcGxleC1mb3JtLWl0ZW0uJykgOiB2b2lkIDA7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKGlzUmVuZGVyUHJvcHMgJiYgKCEoc2hvdWxkVXBkYXRlIHx8IGRlcGVuZGVuY2llcykgfHwgaGFzTmFtZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISEoc2hvdWxkVXBkYXRlIHx8IGRlcGVuZGVuY2llcyksICdGb3JtLkl0ZW0nLCAnQSBgRm9ybS5JdGVtYCB3aXRoIGEgcmVuZGVyIGZ1bmN0aW9uIG11c3QgaGF2ZSBlaXRoZXIgYHNob3VsZFVwZGF0ZWAgb3IgYGRlcGVuZGVuY2llc2AuJykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFoYXNOYW1lLCAnRm9ybS5JdGVtJywgJ0EgYEZvcm0uSXRlbWAgd2l0aCBhIHJlbmRlciBmdW5jdGlvbiBjYW5ub3QgYmUgYSBmaWVsZCwgYW5kIHRodXMgY2Fubm90IGhhdmUgYSBgbmFtZWAgcHJvcC4nKSA6IHZvaWQgMDtcbiAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY2llcyAmJiAhaXNSZW5kZXJQcm9wcyAmJiAhaGFzTmFtZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0Zvcm0uSXRlbScsICdNdXN0IHNldCBgbmFtZWAgb3IgdXNlIGEgcmVuZGVyIGZ1bmN0aW9uIHdoZW4gYGRlcGVuZGVuY2llc2AgaXMgc2V0LicpIDogdm9pZCAwO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNoaWxkcmVuLnByb3BzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkLCAnRm9ybS5JdGVtJywgJ2BkZWZhdWx0VmFsdWVgIHdpbGwgbm90IHdvcmsgb24gY29udHJvbGxlZCBGaWVsZC4gWW91IHNob3VsZCB1c2UgYGluaXRpYWxWYWx1ZXNgIG9mIEZvcm0gaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjaGlsZFByb3BzID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIGNoaWxkcmVuLnByb3BzKSwgbWVyZ2VkQ29udHJvbCk7XG4gICAgICBpZiAoIWNoaWxkUHJvcHMuaWQpIHtcbiAgICAgICAgY2hpbGRQcm9wcy5pZCA9IGZpZWxkSWQ7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuaGVscCB8fCBtZXJnZWRFcnJvcnMubGVuZ3RoID4gMCB8fCBtZXJnZWRXYXJuaW5ncy5sZW5ndGggPiAwIHx8IHByb3BzLmV4dHJhKSB7XG4gICAgICAgIHZhciBkZXNjcmliZWRieUFyciA9IFtdO1xuICAgICAgICBpZiAocHJvcHMuaGVscCB8fCBtZXJnZWRFcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGRlc2NyaWJlZGJ5QXJyLnB1c2goXCJcIi5jb25jYXQoZmllbGRJZCwgXCJfaGVscFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLmV4dHJhKSB7XG4gICAgICAgICAgZGVzY3JpYmVkYnlBcnIucHVzaChcIlwiLmNvbmNhdChmaWVsZElkLCBcIl9leHRyYVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRQcm9wc1snYXJpYS1kZXNjcmliZWRieSddID0gZGVzY3JpYmVkYnlBcnIuam9pbignICcpO1xuICAgICAgfVxuICAgICAgaWYgKG1lcmdlZEVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNoaWxkUHJvcHNbJ2FyaWEtaW52YWxpZCddID0gJ3RydWUnO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgY2hpbGRQcm9wc1snYXJpYS1yZXF1aXJlZCddID0gJ3RydWUnO1xuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRSZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIGNoaWxkUHJvcHMucmVmID0gZ2V0SXRlbVJlZihtZXJnZWROYW1lLCBjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICAvLyBXZSBzaG91bGQga2VlcCB1c2VyIG9yaWdpbiBldmVudCBoYW5kbGVyXG4gICAgICB2YXIgdHJpZ2dlcnMgPSBuZXcgU2V0KFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodG9BcnJheSh0cmlnZ2VyKSksIF90b0NvbnN1bWFibGVBcnJheSh0b0FycmF5KG1lcmdlZFZhbGlkYXRlVHJpZ2dlcikpKSk7XG4gICAgICB0cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgY2hpbGRQcm9wc1tldmVudE5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfYTIsIF9jMjtcbiAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIChfYSA9IG1lcmdlZENvbnRyb2xbZXZlbnROYW1lXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYTIgPSBfYSkuY2FsbC5hcHBseShfYTIsIFttZXJnZWRDb250cm9sXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgIChfYyA9IChfYiA9IGNoaWxkcmVuLnByb3BzKVtldmVudE5hbWVdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9jMiA9IF9jKS5jYWxsLmFwcGx5KF9jMiwgW19iXS5jb25jYXQoYXJncykpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICAvLyBMaXN0IG9mIHByb3BzIHRoYXQgbmVlZCB0byBiZSB3YXRjaGVkIGZvciBjaGFuZ2VzIC0+IGlmIGNoYW5nZXMgYXJlIGRldGVjdGVkIGluIE1lbW9JbnB1dCAtPiByZXJlbmRlclxuICAgICAgdmFyIHdhdGNoaW5nQ2hpbGRQcm9wcyA9IFtjaGlsZFByb3BzWydhcmlhLXJlcXVpcmVkJ10sIGNoaWxkUHJvcHNbJ2FyaWEtaW52YWxpZCddLCBjaGlsZFByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J11dO1xuICAgICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVtb0lucHV0LCB7XG4gICAgICAgIHZhbHVlOiBtZXJnZWRDb250cm9sW3Byb3BzLnZhbHVlUHJvcE5hbWUgfHwgJ3ZhbHVlJ10sXG4gICAgICAgIHVwZGF0ZTogY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHM6IHdhdGNoaW5nQ2hpbGRQcm9wc1xuICAgICAgfSwgY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKSk7XG4gICAgfSBlbHNlIGlmIChpc1JlbmRlclByb3BzICYmIChzaG91bGRVcGRhdGUgfHwgZGVwZW5kZW5jaWVzKSAmJiAhaGFzTmFtZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGRyZW4oY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIW1lcmdlZE5hbWUubGVuZ3RoLCAnRm9ybS5JdGVtJywgJ2BuYW1lYCBpcyBvbmx5IHVzZWQgZm9yIHZhbGlkYXRlIFJlYWN0IGVsZW1lbnQuIElmIHlvdSBhcmUgdXNpbmcgRm9ybS5JdGVtIGFzIGxheW91dCBkaXNwbGF5LCBwbGVhc2UgcmVtb3ZlIGBuYW1lYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgY2hpbGROb2RlID0gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJMYXlvdXQoY2hpbGROb2RlLCBmaWVsZElkLCBpc1JlcXVpcmVkKTtcbiAgfSk7XG59XG52YXIgRm9ybUl0ZW0gPSBJbnRlcm5hbEZvcm1JdGVtO1xuRm9ybUl0ZW0udXNlU3RhdHVzID0gdXNlRm9ybUl0ZW1TdGF0dXM7XG5leHBvcnQgZGVmYXVsdCBGb3JtSXRlbTsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCByYWYgZnJvbSBcInJjLXV0aWwvZXMvcmFmXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGcmFtZVN0YXRlKGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFZhbHVlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICB2YWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgc2V0VmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgZnJhbWVSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBiYXRjaFJlZiA9IHVzZVJlZihbXSk7XG4gIHZhciBkZXN0cm95UmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBkZXN0cm95UmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZGVzdHJveVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJhZi5jYW5jZWwoZnJhbWVSZWYuY3VycmVudCk7XG4gICAgICBmcmFtZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGZ1bmN0aW9uIHNldEZyYW1lVmFsdWUodXBkYXRlcikge1xuICAgIGlmIChkZXN0cm95UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGZyYW1lUmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIGJhdGNoUmVmLmN1cnJlbnQgPSBbXTtcbiAgICAgIGZyYW1lUmVmLmN1cnJlbnQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgc2V0VmFsdWUoZnVuY3Rpb24gKHByZXZWYWx1ZSkge1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gcHJldlZhbHVlO1xuICAgICAgICAgIGJhdGNoUmVmLmN1cnJlbnQuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICAgICAgY3VycmVudCA9IGZ1bmMoY3VycmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGJhdGNoUmVmLmN1cnJlbnQucHVzaCh1cGRhdGVyKTtcbiAgfVxuICByZXR1cm4gW3ZhbHVlLCBzZXRGcmFtZVZhbHVlXTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBjb21wb3NlUmVmIH0gZnJvbSBcInJjLXV0aWwvZXMvcmVmXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXRlbVJlZigpIHtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udGV4dCksXG4gICAgaXRlbVJlZiA9IF9SZWFjdCR1c2VDb250ZXh0Lml0ZW1SZWY7XG4gIHZhciBjYWNoZVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGZ1bmN0aW9uIGdldFJlZihuYW1lLCBjaGlsZHJlbikge1xuICAgIHZhciBjaGlsZHJlblJlZiA9IGNoaWxkcmVuICYmIF90eXBlb2YoY2hpbGRyZW4pID09PSAnb2JqZWN0JyAmJiBjaGlsZHJlbi5yZWY7XG4gICAgdmFyIG5hbWVTdHIgPSBuYW1lLmpvaW4oJ18nKTtcbiAgICBpZiAoY2FjaGVSZWYuY3VycmVudC5uYW1lICE9PSBuYW1lU3RyIHx8IGNhY2hlUmVmLmN1cnJlbnQub3JpZ2luUmVmICE9PSBjaGlsZHJlblJlZikge1xuICAgICAgY2FjaGVSZWYuY3VycmVudC5uYW1lID0gbmFtZVN0cjtcbiAgICAgIGNhY2hlUmVmLmN1cnJlbnQub3JpZ2luUmVmID0gY2hpbGRyZW5SZWY7XG4gICAgICBjYWNoZVJlZi5jdXJyZW50LnJlZiA9IGNvbXBvc2VSZWYoaXRlbVJlZihuYW1lKSwgY2hpbGRyZW5SZWYpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVSZWYuY3VycmVudC5yZWY7XG4gIH1cbiAgcmV0dXJuIGdldFJlZjtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PT0gJ1JlZ0V4cCcpO1xufTtcbiIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0FycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImltcG9ydCBjYW5Vc2VEb20gZnJvbSBcIi4vY2FuVXNlRG9tXCI7XG52YXIgaXNTdHlsZU5hbWVTdXBwb3J0ID0gZnVuY3Rpb24gaXNTdHlsZU5hbWVTdXBwb3J0KHN0eWxlTmFtZSkge1xuICBpZiAoY2FuVXNlRG9tKCkgJiYgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHZhciBzdHlsZU5hbWVMaXN0ID0gQXJyYXkuaXNBcnJheShzdHlsZU5hbWUpID8gc3R5bGVOYW1lIDogW3N0eWxlTmFtZV07XG4gICAgdmFyIGRvY3VtZW50RWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIHN0eWxlTmFtZUxpc3Quc29tZShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIG5hbWUgaW4gZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgaXNTdHlsZVZhbHVlU3VwcG9ydCA9IGZ1bmN0aW9uIGlzU3R5bGVWYWx1ZVN1cHBvcnQoc3R5bGVOYW1lLCB2YWx1ZSkge1xuICBpZiAoIWlzU3R5bGVOYW1lU3VwcG9ydChzdHlsZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBlbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIG9yaWdpbiA9IGVsZS5zdHlsZVtzdHlsZU5hbWVdO1xuICBlbGUuc3R5bGVbc3R5bGVOYW1lXSA9IHZhbHVlO1xuICByZXR1cm4gZWxlLnN0eWxlW3N0eWxlTmFtZV0gIT09IG9yaWdpbjtcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNTdHlsZVN1cHBvcnQoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShzdHlsZU5hbWUpICYmIHN0eWxlVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBpc1N0eWxlVmFsdWVTdXBwb3J0KHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGlzU3R5bGVOYW1lU3VwcG9ydChzdHlsZU5hbWUpO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJjVG9vbHRpcCBmcm9tICdyYy10b29sdGlwJztcbmltcG9ydCB1c2VNZXJnZWRTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VNZXJnZWRTdGF0ZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgeyBQcmVzZXRDb2xvclR5cGVzIH0gZnJvbSAnLi4vX3V0aWwvY29sb3JzJztcbmltcG9ydCB7IGdldFRyYW5zaXRpb25OYW1lIH0gZnJvbSAnLi4vX3V0aWwvbW90aW9uJztcbmltcG9ydCBnZXRQbGFjZW1lbnRzIGZyb20gJy4uL191dGlsL3BsYWNlbWVudHMnO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCwgaXNGcmFnbWVudCB9IGZyb20gJy4uL191dGlsL3JlYWN0Tm9kZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbnZhciBzcGxpdE9iamVjdCA9IGZ1bmN0aW9uIHNwbGl0T2JqZWN0KG9iaiwga2V5cykge1xuICB2YXIgcGlja2VkID0ge307XG4gIHZhciBvbWl0dGVkID0gX2V4dGVuZHMoe30sIG9iaik7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKG9iaiAmJiBrZXkgaW4gb2JqKSB7XG4gICAgICBwaWNrZWRba2V5XSA9IG9ialtrZXldO1xuICAgICAgZGVsZXRlIG9taXR0ZWRba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHBpY2tlZDogcGlja2VkLFxuICAgIG9taXR0ZWQ6IG9taXR0ZWRcbiAgfTtcbn07XG52YXIgUHJlc2V0Q29sb3JSZWdleCA9IG5ldyBSZWdFeHAoXCJeKFwiLmNvbmNhdChQcmVzZXRDb2xvclR5cGVzLmpvaW4oJ3wnKSwgXCIpKC1pbnZlcnNlKT8kXCIpKTtcbi8vIEZpeCBUb29sdGlwIHdvbid0IGhpZGUgYXQgZGlzYWJsZWQgYnV0dG9uXG4vLyBtb3VzZSBldmVudHMgZG9uJ3QgdHJpZ2dlciBhdCBkaXNhYmxlZCBidXR0b24gaW4gQ2hyb21lXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3Rvb2x0aXAvaXNzdWVzLzE4XG5mdW5jdGlvbiBnZXREaXNhYmxlZENvbXBhdGlibGVDaGlsZHJlbihlbGVtZW50LCBwcmVmaXhDbHMpIHtcbiAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICBpZiAoKGVsZW1lbnRUeXBlLl9fQU5UX0JVVFRPTiA9PT0gdHJ1ZSB8fCBlbGVtZW50LnR5cGUgPT09ICdidXR0b24nKSAmJiBlbGVtZW50LnByb3BzLmRpc2FibGVkIHx8IGVsZW1lbnRUeXBlLl9fQU5UX1NXSVRDSCA9PT0gdHJ1ZSAmJiAoZWxlbWVudC5wcm9wcy5kaXNhYmxlZCB8fCBlbGVtZW50LnByb3BzLmxvYWRpbmcpIHx8IGVsZW1lbnRUeXBlLl9fQU5UX1JBRElPID09PSB0cnVlICYmIGVsZW1lbnQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAvLyBQaWNrIHNvbWUgbGF5b3V0IHJlbGF0ZWQgc3R5bGUgcHJvcGVydGllcyB1cCB0byBzcGFuXG4gICAgLy8gUHJldmVudCBsYXlvdXQgYnVncyBsaWtlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzUyNTRcbiAgICB2YXIgX3NwbGl0T2JqZWN0ID0gc3BsaXRPYmplY3QoZWxlbWVudC5wcm9wcy5zdHlsZSwgWydwb3NpdGlvbicsICdsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nLCAnZmxvYXQnLCAnZGlzcGxheScsICd6SW5kZXgnXSksXG4gICAgICBwaWNrZWQgPSBfc3BsaXRPYmplY3QucGlja2VkLFxuICAgICAgb21pdHRlZCA9IF9zcGxpdE9iamVjdC5vbWl0dGVkO1xuICAgIHZhciBzcGFuU3R5bGUgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgIH0sIHBpY2tlZCksIHtcbiAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJyxcbiAgICAgIHdpZHRoOiBlbGVtZW50LnByb3BzLmJsb2NrID8gJzEwMCUnIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgdmFyIGJ1dHRvblN0eWxlID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIG9taXR0ZWQpLCB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICB9KTtcbiAgICB2YXIgY2hpbGQgPSBjbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgc3R5bGU6IGJ1dHRvblN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBzdHlsZTogc3BhblN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGVsZW1lbnQucHJvcHMuY2xhc3NOYW1lLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRpc2FibGVkLWNvbXBhdGlibGUtd3JhcHBlclwiKSlcbiAgICB9LCBjaGlsZCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG52YXIgVG9vbHRpcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lczI7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0Q29udGV4dFBvcHVwQ29udGFpbmVyID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UG9wdXBDb250YWluZXIsXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgLy8gV2FybmluZyBmb3IgZGVwcmVjYXRlZCB1c2FnZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFtbJ3Zpc2libGUnLCAnb3BlbiddLCBbJ2RlZmF1bHRWaXNpYmxlJywgJ2RlZmF1bHRPcGVuJ10sIFsnb25WaXNpYmxlQ2hhbmdlJywgJ29uT3BlbkNoYW5nZSddLCBbJ2FmdGVyVmlzaWJsZUNoYW5nZScsICdhZnRlck9wZW5DaGFuZ2UnXV0uZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgIGRlcHJlY2F0ZWROYW1lID0gX3JlZjJbMF0sXG4gICAgICAgIG5ld05hbWUgPSBfcmVmMlsxXTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShkZXByZWNhdGVkTmFtZSBpbiBwcm9wcyksICdUb29sdGlwJywgXCJgXCIuY29uY2F0KGRlcHJlY2F0ZWROYW1lLCBcImAgaXMgZGVwcmVjYXRlZCB3aGljaCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLCBwbGVhc2UgdXNlIGBcIikuY29uY2F0KG5ld05hbWUsIFwiYCBpbnN0ZWFkLlwiKSkgOiB2b2lkIDA7XG4gICAgfSk7XG4gIH1cbiAgdmFyIF91c2VNZXJnZWRTdGF0ZSA9IHVzZU1lcmdlZFN0YXRlKGZhbHNlLCB7XG4gICAgICB2YWx1ZTogcHJvcHMub3BlbiAhPT0gdW5kZWZpbmVkID8gcHJvcHMub3BlbiA6IHByb3BzLnZpc2libGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IHByb3BzLmRlZmF1bHRPcGVuICE9PSB1bmRlZmluZWQgPyBwcm9wcy5kZWZhdWx0T3BlbiA6IHByb3BzLmRlZmF1bHRWaXNpYmxlXG4gICAgfSksXG4gICAgX3VzZU1lcmdlZFN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VNZXJnZWRTdGF0ZSwgMiksXG4gICAgb3BlbiA9IF91c2VNZXJnZWRTdGF0ZTJbMF0sXG4gICAgc2V0T3BlbiA9IF91c2VNZXJnZWRTdGF0ZTJbMV07XG4gIHZhciBpc05vVGl0bGUgPSBmdW5jdGlvbiBpc05vVGl0bGUoKSB7XG4gICAgdmFyIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICBvdmVybGF5ID0gcHJvcHMub3ZlcmxheTtcbiAgICByZXR1cm4gIXRpdGxlICYmICFvdmVybGF5ICYmIHRpdGxlICE9PSAwOyAvLyBvdmVybGF5IGZvciBvbGQgdmVyc2lvbiBjb21wYXRpYmlsaXR5XG4gIH07XG5cbiAgdmFyIG9uT3BlbkNoYW5nZSA9IGZ1bmN0aW9uIG9uT3BlbkNoYW5nZSh2aXMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHNldE9wZW4oaXNOb1RpdGxlKCkgPyBmYWxzZSA6IHZpcyk7XG4gICAgaWYgKCFpc05vVGl0bGUoKSkge1xuICAgICAgKF9hID0gcHJvcHMub25PcGVuQ2hhbmdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChwcm9wcywgdmlzKTtcbiAgICAgIChfYiA9IHByb3BzLm9uVmlzaWJsZUNoYW5nZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwocHJvcHMsIHZpcyk7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0VG9vbHRpcFBsYWNlbWVudHMgPSBmdW5jdGlvbiBnZXRUb29sdGlwUGxhY2VtZW50cygpIHtcbiAgICB2YXIgYnVpbHRpblBsYWNlbWVudHMgPSBwcm9wcy5idWlsdGluUGxhY2VtZW50cyxcbiAgICAgIF9wcm9wcyRhcnJvd1BvaW50QXRDZSA9IHByb3BzLmFycm93UG9pbnRBdENlbnRlcixcbiAgICAgIGFycm93UG9pbnRBdENlbnRlciA9IF9wcm9wcyRhcnJvd1BvaW50QXRDZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXJyb3dQb2ludEF0Q2UsXG4gICAgICBfcHJvcHMkYXV0b0FkanVzdE92ZXIgPSBwcm9wcy5hdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgICBhdXRvQWRqdXN0T3ZlcmZsb3cgPSBfcHJvcHMkYXV0b0FkanVzdE92ZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkYXV0b0FkanVzdE92ZXI7XG4gICAgcmV0dXJuIGJ1aWx0aW5QbGFjZW1lbnRzIHx8IGdldFBsYWNlbWVudHMoe1xuICAgICAgYXJyb3dQb2ludEF0Q2VudGVyOiBhcnJvd1BvaW50QXRDZW50ZXIsXG4gICAgICBhdXRvQWRqdXN0T3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvd1xuICAgIH0pO1xuICB9O1xuICAvLyDliqjmgIHorr7nva7liqjnlLvngrlcbiAgdmFyIG9uUG9wdXBBbGlnbiA9IGZ1bmN0aW9uIG9uUG9wdXBBbGlnbihkb21Ob2RlLCBhbGlnbikge1xuICAgIHZhciBwbGFjZW1lbnRzID0gZ2V0VG9vbHRpcFBsYWNlbWVudHMoKTtcbiAgICAvLyDlvZPliY3ov5Tlm57nmoTkvY3nva5cbiAgICB2YXIgcGxhY2VtZW50ID0gT2JqZWN0LmtleXMocGxhY2VtZW50cykuZmluZChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgcmV0dXJuIHBsYWNlbWVudHNba2V5XS5wb2ludHNbMF0gPT09ICgoX2EgPSBhbGlnbi5wb2ludHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXSkgJiYgcGxhY2VtZW50c1trZXldLnBvaW50c1sxXSA9PT0gKChfYiA9IGFsaWduLnBvaW50cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iWzFdKTtcbiAgICB9KTtcbiAgICBpZiAoIXBsYWNlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyDmoLnmja7lvZPliY3lnZDmoIforr7nva7liqjnlLvngrlcbiAgICB2YXIgcmVjdCA9IGRvbU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IHtcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICBsZWZ0OiAnNTAlJ1xuICAgIH07XG4gICAgaWYgKC90b3B8Qm90dG9tLy50ZXN0KHBsYWNlbWVudCkpIHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbi50b3AgPSBcIlwiLmNvbmNhdChyZWN0LmhlaWdodCAtIGFsaWduLm9mZnNldFsxXSwgXCJweFwiKTtcbiAgICB9IGVsc2UgaWYgKC9Ub3B8Ym90dG9tLy50ZXN0KHBsYWNlbWVudCkpIHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbi50b3AgPSBcIlwiLmNvbmNhdCgtYWxpZ24ub2Zmc2V0WzFdLCBcInB4XCIpO1xuICAgIH1cbiAgICBpZiAoL2xlZnR8UmlnaHQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luLmxlZnQgPSBcIlwiLmNvbmNhdChyZWN0LndpZHRoIC0gYWxpZ24ub2Zmc2V0WzBdLCBcInB4XCIpO1xuICAgIH0gZWxzZSBpZiAoL3JpZ2h0fExlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luLmxlZnQgPSBcIlwiLmNvbmNhdCgtYWxpZ24ub2Zmc2V0WzBdLCBcInB4XCIpO1xuICAgIH1cbiAgICBkb21Ob2RlLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IFwiXCIuY29uY2F0KHRyYW5zZm9ybU9yaWdpbi5sZWZ0LCBcIiBcIikuY29uY2F0KHRyYW5zZm9ybU9yaWdpbi50b3ApO1xuICB9O1xuICB2YXIgZ2V0T3ZlcmxheSA9IGZ1bmN0aW9uIGdldE92ZXJsYXkoKSB7XG4gICAgdmFyIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICBvdmVybGF5ID0gcHJvcHMub3ZlcmxheTtcbiAgICBpZiAodGl0bGUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aXRsZTtcbiAgICB9XG4gICAgcmV0dXJuIG92ZXJsYXkgfHwgdGl0bGUgfHwgJyc7XG4gIH07XG4gIHZhciBnZXRQb3B1cENvbnRhaW5lciA9IHByb3BzLmdldFBvcHVwQ29udGFpbmVyLFxuICAgIF9wcm9wcyRwbGFjZW1lbnQgPSBwcm9wcy5wbGFjZW1lbnQsXG4gICAgcGxhY2VtZW50ID0gX3Byb3BzJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ3RvcCcgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgIF9wcm9wcyRtb3VzZUVudGVyRGVsYSA9IHByb3BzLm1vdXNlRW50ZXJEZWxheSxcbiAgICBtb3VzZUVudGVyRGVsYXkgPSBfcHJvcHMkbW91c2VFbnRlckRlbGEgPT09IHZvaWQgMCA/IDAuMSA6IF9wcm9wcyRtb3VzZUVudGVyRGVsYSxcbiAgICBfcHJvcHMkbW91c2VMZWF2ZURlbGEgPSBwcm9wcy5tb3VzZUxlYXZlRGVsYXksXG4gICAgbW91c2VMZWF2ZURlbGF5ID0gX3Byb3BzJG1vdXNlTGVhdmVEZWxhID09PSB2b2lkIDAgPyAwLjEgOiBfcHJvcHMkbW91c2VMZWF2ZURlbGEsXG4gICAgb3RoZXJQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiZ2V0UG9wdXBDb250YWluZXJcIiwgXCJwbGFjZW1lbnRcIiwgXCJtb3VzZUVudGVyRGVsYXlcIiwgXCJtb3VzZUxlYXZlRGVsYXlcIl0pO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIG9wZW5DbGFzc05hbWUgPSBwcm9wcy5vcGVuQ2xhc3NOYW1lLFxuICAgIGdldFRvb2x0aXBDb250YWluZXIgPSBwcm9wcy5nZXRUb29sdGlwQ29udGFpbmVyLFxuICAgIG92ZXJsYXlDbGFzc05hbWUgPSBwcm9wcy5vdmVybGF5Q2xhc3NOYW1lLFxuICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgb3ZlcmxheUlubmVyU3R5bGUgPSBwcm9wcy5vdmVybGF5SW5uZXJTdHlsZSxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0b29sdGlwJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIHJvb3RQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoKTtcbiAgdmFyIHRlbXBPcGVuID0gb3BlbjtcbiAgLy8gSGlkZSB0b29sdGlwIHdoZW4gdGhlcmUgaXMgbm8gdGl0bGVcbiAgaWYgKCEoJ29wZW4nIGluIHByb3BzKSAmJiAhKCd2aXNpYmxlJyBpbiBwcm9wcykgJiYgaXNOb1RpdGxlKCkpIHtcbiAgICB0ZW1wT3BlbiA9IGZhbHNlO1xuICB9XG4gIHZhciBjaGlsZCA9IGdldERpc2FibGVkQ29tcGF0aWJsZUNoaWxkcmVuKGlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSAmJiAhaXNGcmFnbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbiA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBjaGlsZHJlbiksIHByZWZpeENscyk7XG4gIHZhciBjaGlsZFByb3BzID0gY2hpbGQucHJvcHM7XG4gIHZhciBjaGlsZENscyA9ICFjaGlsZFByb3BzLmNsYXNzTmFtZSB8fCB0eXBlb2YgY2hpbGRQcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnID8gY2xhc3NOYW1lcyhjaGlsZFByb3BzLmNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBvcGVuQ2xhc3NOYW1lIHx8IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItb3BlblwiKSwgdHJ1ZSkpIDogY2hpbGRQcm9wcy5jbGFzc05hbWU7XG4gIHZhciBjdXN0b21PdmVybGF5Q2xhc3NOYW1lID0gY2xhc3NOYW1lcyhvdmVybGF5Q2xhc3NOYW1lLCAoX2NsYXNzTmFtZXMyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KGNvbG9yKSwgY29sb3IgJiYgUHJlc2V0Q29sb3JSZWdleC50ZXN0KGNvbG9yKSksIF9jbGFzc05hbWVzMikpO1xuICB2YXIgZm9ybWF0dGVkT3ZlcmxheUlubmVyU3R5bGUgPSBvdmVybGF5SW5uZXJTdHlsZTtcbiAgdmFyIGFycm93Q29udGVudFN0eWxlID0ge307XG4gIGlmIChjb2xvciAmJiAhUHJlc2V0Q29sb3JSZWdleC50ZXN0KGNvbG9yKSkge1xuICAgIGZvcm1hdHRlZE92ZXJsYXlJbm5lclN0eWxlID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIG92ZXJsYXlJbm5lclN0eWxlKSwge1xuICAgICAgYmFja2dyb3VuZDogY29sb3JcbiAgICB9KTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXJyb3dDb250ZW50U3R5bGUgPSB7XG4gICAgICAnLS1hbnRkLWFycm93LWJhY2tncm91bmQtY29sb3InOiBjb2xvclxuICAgIH07XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJjVG9vbHRpcCwgX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICBtb3VzZUVudGVyRGVsYXk6IG1vdXNlRW50ZXJEZWxheSxcbiAgICBtb3VzZUxlYXZlRGVsYXk6IG1vdXNlTGVhdmVEZWxheSxcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICBvdmVybGF5Q2xhc3NOYW1lOiBjdXN0b21PdmVybGF5Q2xhc3NOYW1lLFxuICAgIGdldFRvb2x0aXBDb250YWluZXI6IGdldFBvcHVwQ29udGFpbmVyIHx8IGdldFRvb2x0aXBDb250YWluZXIgfHwgZ2V0Q29udGV4dFBvcHVwQ29udGFpbmVyLFxuICAgIHJlZjogcmVmLFxuICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBnZXRUb29sdGlwUGxhY2VtZW50cygpLFxuICAgIG92ZXJsYXk6IGdldE92ZXJsYXkoKSxcbiAgICB2aXNpYmxlOiB0ZW1wT3BlbixcbiAgICBvblZpc2libGVDaGFuZ2U6IG9uT3BlbkNoYW5nZSxcbiAgICBvblBvcHVwQWxpZ246IG9uUG9wdXBBbGlnbixcbiAgICBvdmVybGF5SW5uZXJTdHlsZTogZm9ybWF0dGVkT3ZlcmxheUlubmVyU3R5bGUsXG4gICAgYXJyb3dDb250ZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFycm93LWNvbnRlbnRcIiksXG4gICAgICBzdHlsZTogYXJyb3dDb250ZW50U3R5bGVcbiAgICB9KSxcbiAgICBtb3Rpb246IHtcbiAgICAgIG1vdGlvbk5hbWU6IGdldFRyYW5zaXRpb25OYW1lKHJvb3RQcmVmaXhDbHMsICd6b29tLWJpZy1mYXN0JywgcHJvcHMudHJhbnNpdGlvbk5hbWUpLFxuICAgICAgbW90aW9uRGVhZGxpbmU6IDEwMDBcbiAgICB9XG4gIH0pLCB0ZW1wT3BlbiA/IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgIGNsYXNzTmFtZTogY2hpbGRDbHNcbiAgfSkgOiBjaGlsZCk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRvb2x0aXAuZGlzcGxheU5hbWUgPSAnVG9vbHRpcCc7XG59XG5leHBvcnQgZGVmYXVsdCBUb29sdGlwOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhO1xuICByZXR1cm4gLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pLnRlc3QoYWdlbnQpIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3LShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtLXxjZWxsfGNodG18Y2xkY3xjbWQtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8LWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseSgtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmLTV8Zy1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkLShtfHB8dCl8aGVpLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzLWN8aHQoYygtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aS0oMjB8Z298bWEpfGkyMzB8aWFjKCB8LXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHwtW2Etd10pfGxpYnd8bHlueHxtMS13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bS1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dCgtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSktfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3wtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdC1nfHFhLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8LVsyLTddfGktKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aC18b298cC0pfHNka1xcL3xzZShjKC18MHwxKXw0N3xtY3xuZHxyaSl8c2doLXxzaGFyfHNpZSgtfG0pfHNrLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aC18di18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2wtfHRkZy18dGVsKGl8bSl8dGltLXx0LW1vfHRvKHBsfHNoKXx0cyg3MHxtLXxtM3xtNSl8dHgtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118LXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhcy18eW91cnx6ZXRvfHp0ZS0vaS50ZXN0KGFnZW50ID09PSBudWxsIHx8IGFnZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZ2VudC5zdWJzdHIoMCwgNCkpO1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmV4cG9ydCB2YXIgR3JvdXBTaXplQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG52YXIgQnV0dG9uR3JvdXAgPSBmdW5jdGlvbiBCdXR0b25Hcm91cChwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgb3RoZXJzID0gX19yZXN0KHByb3BzLCBbXCJwcmVmaXhDbHNcIiwgXCJzaXplXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnYnRuLWdyb3VwJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgLy8gbGFyZ2UgPT4gbGdcbiAgLy8gc21hbGwgPT4gc21cbiAgdmFyIHNpemVDbHMgPSAnJztcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSAnbGFyZ2UnOlxuICAgICAgc2l6ZUNscyA9ICdsZyc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzbWFsbCc6XG4gICAgICBzaXplQ2xzID0gJ3NtJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghc2l6ZSwgJ0J1dHRvbi5Hcm91cCcsICdJbnZhbGlkIHByb3AgYHNpemVgLicpIDogdm9pZCAwO1xuICB9XG4gIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplQ2xzKSwgc2l6ZUNscyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChHcm91cFNpemVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHNpemVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIG90aGVycywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkdyb3VwOyIsImltcG9ydCBMb2FkaW5nT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0xvYWRpbmdPdXRsaW5lZFwiO1xuaW1wb3J0IENTU01vdGlvbiBmcm9tICdyYy1tb3Rpb24nO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBnZXRDb2xsYXBzZWRXaWR0aCA9IGZ1bmN0aW9uIGdldENvbGxhcHNlZFdpZHRoKCkge1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiAwLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknXG4gIH07XG59O1xudmFyIGdldFJlYWxXaWR0aCA9IGZ1bmN0aW9uIGdldFJlYWxXaWR0aChub2RlKSB7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IG5vZGUuc2Nyb2xsV2lkdGgsXG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgfTtcbn07XG52YXIgTG9hZGluZ0ljb24gPSBmdW5jdGlvbiBMb2FkaW5nSWNvbihfcmVmKSB7XG4gIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICBsb2FkaW5nID0gX3JlZi5sb2FkaW5nLFxuICAgIGV4aXN0SWNvbiA9IF9yZWYuZXhpc3RJY29uO1xuICB2YXIgdmlzaWJsZSA9ICEhbG9hZGluZztcbiAgaWYgKGV4aXN0SWNvbikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctaWNvblwiKVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdPdXRsaW5lZCwgbnVsbCkpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb24sIHtcbiAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgIC8vIFdlIGRvIG5vdCByZWFsbHkgdXNlIHRoaXMgbW90aW9uTmFtZVxuICAgIG1vdGlvbk5hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZy1pY29uLW1vdGlvblwiKSxcbiAgICByZW1vdmVPbkxlYXZlOiB0cnVlLFxuICAgIG9uQXBwZWFyU3RhcnQ6IGdldENvbGxhcHNlZFdpZHRoLFxuICAgIG9uQXBwZWFyQWN0aXZlOiBnZXRSZWFsV2lkdGgsXG4gICAgb25FbnRlclN0YXJ0OiBnZXRDb2xsYXBzZWRXaWR0aCxcbiAgICBvbkVudGVyQWN0aXZlOiBnZXRSZWFsV2lkdGgsXG4gICAgb25MZWF2ZVN0YXJ0OiBnZXRSZWFsV2lkdGgsXG4gICAgb25MZWF2ZUFjdGl2ZTogZ2V0Q29sbGFwc2VkV2lkdGhcbiAgfSwgZnVuY3Rpb24gKF9yZWYyLCByZWYpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gX3JlZjIuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBfcmVmMi5zdHlsZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1sb2FkaW5nLWljb25cIiksXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdPdXRsaW5lZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9KSk7XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IExvYWRpbmdJY29uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2J1dHRvbi1oYXMtdHlwZSAqL1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tIFwicmMtdXRpbC9lcy9vbWl0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCBEaXNhYmxlZENvbnRleHQgZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyL0Rpc2FibGVkQ29udGV4dCc7XG5pbXBvcnQgU2l6ZUNvbnRleHQgZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyL1NpemVDb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbXBhY3RJdGVtQ29udGV4dCB9IGZyb20gJy4uL3NwYWNlL0NvbXBhY3QnO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50LCBpc0ZyYWdtZW50IH0gZnJvbSAnLi4vX3V0aWwvcmVhY3ROb2RlJztcbmltcG9ydCB7IHR1cGxlIH0gZnJvbSAnLi4vX3V0aWwvdHlwZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCBXYXZlIGZyb20gJy4uL191dGlsL3dhdmUnO1xuaW1wb3J0IEdyb3VwLCB7IEdyb3VwU2l6ZUNvbnRleHQgfSBmcm9tICcuL2J1dHRvbi1ncm91cCc7XG5pbXBvcnQgTG9hZGluZ0ljb24gZnJvbSAnLi9Mb2FkaW5nSWNvbic7XG52YXIgcnhUd29DTkNoYXIgPSAvXltcXHU0ZTAwLVxcdTlmYTVdezJ9JC87XG52YXIgaXNUd29DTkNoYXIgPSByeFR3b0NOQ2hhci50ZXN0LmJpbmQocnhUd29DTkNoYXIpO1xuZnVuY3Rpb24gaXNTdHJpbmcoc3RyKSB7XG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJztcbn1cbmZ1bmN0aW9uIGlzVW5Cb3JkZXJlZEJ1dHRvblR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZSA9PT0gJ3RleHQnIHx8IHR5cGUgPT09ICdsaW5rJztcbn1cbi8vIEluc2VydCBvbmUgc3BhY2UgYmV0d2VlbiB0d28gY2hpbmVzZSBjaGFyYWN0ZXJzIGF1dG9tYXRpY2FsbHkuXG5mdW5jdGlvbiBpbnNlcnRTcGFjZShjaGlsZCwgbmVlZEluc2VydGVkKSB7XG4gIC8vIENoZWNrIHRoZSBjaGlsZCBpZiBpcyB1bmRlZmluZWQgb3IgbnVsbC5cbiAgaWYgKGNoaWxkID09PSBudWxsIHx8IGNoaWxkID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIFNQQUNFID0gbmVlZEluc2VydGVkID8gJyAnIDogJyc7XG4gIC8vIHN0cmljdE51bGxDaGVja3Mgb29wcy5cbiAgaWYgKHR5cGVvZiBjaGlsZCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGNoaWxkICE9PSAnbnVtYmVyJyAmJiBpc1N0cmluZyhjaGlsZC50eXBlKSAmJiBpc1R3b0NOQ2hhcihjaGlsZC5wcm9wcy5jaGlsZHJlbikpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGQucHJvcHMuY2hpbGRyZW4uc3BsaXQoJycpLmpvaW4oU1BBQ0UpXG4gICAgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaXNUd29DTkNoYXIoY2hpbGQpID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGNoaWxkLnNwbGl0KCcnKS5qb2luKFNQQUNFKSkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgY2hpbGQpO1xuICB9XG4gIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgY2hpbGQpO1xuICB9XG4gIHJldHVybiBjaGlsZDtcbn1cbmZ1bmN0aW9uIHNwYWNlQ2hpbGRyZW4oY2hpbGRyZW4sIG5lZWRJbnNlcnRlZCkge1xuICB2YXIgaXNQcmV2Q2hpbGRQdXJlID0gZmFsc2U7XG4gIHZhciBjaGlsZExpc3QgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIHR5cGUgPSBfdHlwZW9mKGNoaWxkKTtcbiAgICB2YXIgaXNDdXJyZW50Q2hpbGRQdXJlID0gdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcic7XG4gICAgaWYgKGlzUHJldkNoaWxkUHVyZSAmJiBpc0N1cnJlbnRDaGlsZFB1cmUpIHtcbiAgICAgIHZhciBsYXN0SW5kZXggPSBjaGlsZExpc3QubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBsYXN0Q2hpbGQgPSBjaGlsZExpc3RbbGFzdEluZGV4XTtcbiAgICAgIGNoaWxkTGlzdFtsYXN0SW5kZXhdID0gXCJcIi5jb25jYXQobGFzdENoaWxkKS5jb25jYXQoY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZExpc3QucHVzaChjaGlsZCk7XG4gICAgfVxuICAgIGlzUHJldkNoaWxkUHVyZSA9IGlzQ3VycmVudENoaWxkUHVyZTtcbiAgfSk7XG4gIC8vIFBhc3MgdG8gUmVhY3QuQ2hpbGRyZW4ubWFwIHRvIGF1dG8gZmlsbCBrZXlcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZExpc3QsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBpbnNlcnRTcGFjZShjaGlsZCwgbmVlZEluc2VydGVkKTtcbiAgfSk7XG59XG52YXIgQnV0dG9uVHlwZXMgPSB0dXBsZSgnZGVmYXVsdCcsICdwcmltYXJ5JywgJ2dob3N0JywgJ2Rhc2hlZCcsICdsaW5rJywgJ3RleHQnKTtcbnZhciBCdXR0b25TaGFwZXMgPSB0dXBsZSgnZGVmYXVsdCcsICdjaXJjbGUnLCAncm91bmQnKTtcbnZhciBCdXR0b25IVE1MVHlwZXMgPSB0dXBsZSgnc3VibWl0JywgJ2J1dHRvbicsICdyZXNldCcpO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRMZWdhY3lQcm9wcyh0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnZGFuZ2VyJykge1xuICAgIHJldHVybiB7XG4gICAgICBkYW5nZXI6IHRydWVcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZVxuICB9O1xufVxudmFyIEludGVybmFsQnV0dG9uID0gZnVuY3Rpb24gSW50ZXJuYWxCdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBfcHJvcHMkbG9hZGluZyA9IHByb3BzLmxvYWRpbmcsXG4gICAgbG9hZGluZyA9IF9wcm9wcyRsb2FkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsb2FkaW5nLFxuICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkdHlwZSxcbiAgICBkYW5nZXIgPSBwcm9wcy5kYW5nZXIsXG4gICAgX3Byb3BzJHNoYXBlID0gcHJvcHMuc2hhcGUsXG4gICAgc2hhcGUgPSBfcHJvcHMkc2hhcGUgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRzaGFwZSxcbiAgICBjdXN0b21pemVTaXplID0gcHJvcHMuc2l6ZSxcbiAgICBjdXN0b21EaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgIF9wcm9wcyRnaG9zdCA9IHByb3BzLmdob3N0LFxuICAgIGdob3N0ID0gX3Byb3BzJGdob3N0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRnaG9zdCxcbiAgICBfcHJvcHMkYmxvY2sgPSBwcm9wcy5ibG9jayxcbiAgICBibG9jayA9IF9wcm9wcyRibG9jayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYmxvY2ssXG4gICAgX3Byb3BzJGh0bWxUeXBlID0gcHJvcHMuaHRtbFR5cGUsXG4gICAgaHRtbFR5cGUgPSBfcHJvcHMkaHRtbFR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGh0bWxUeXBlLFxuICAgIHJlc3QgPSBfX3Jlc3QocHJvcHMsIFtcImxvYWRpbmdcIiwgXCJwcmVmaXhDbHNcIiwgXCJ0eXBlXCIsIFwiZGFuZ2VyXCIsIFwic2hhcGVcIiwgXCJzaXplXCIsIFwiZGlzYWJsZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImljb25cIiwgXCJnaG9zdFwiLCBcImJsb2NrXCIsIFwiaHRtbFR5cGVcIl0pO1xuICB2YXIgc2l6ZSA9IFJlYWN0LnVzZUNvbnRleHQoU2l6ZUNvbnRleHQpO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gRGlzYWJsZWQgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBkaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoRGlzYWJsZWRDb250ZXh0KTtcbiAgdmFyIG1lcmdlZERpc2FibGVkID0gY3VzdG9tRGlzYWJsZWQgIT09IG51bGwgJiYgY3VzdG9tRGlzYWJsZWQgIT09IHZvaWQgMCA/IGN1c3RvbURpc2FibGVkIDogZGlzYWJsZWQ7XG4gIHZhciBncm91cFNpemUgPSBSZWFjdC51c2VDb250ZXh0KEdyb3VwU2l6ZUNvbnRleHQpO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoISFsb2FkaW5nKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICBpbm5lckxvYWRpbmcgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldExvYWRpbmcgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlMywgMiksXG4gICAgaGFzVHdvQ05DaGFyID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICBzZXRIYXNUd29DTkNoYXIgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmF1dG9JbnNlcnRTcGFjZUluQnV0dG9uLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIGJ1dHRvblJlZiA9IHJlZiB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCk7XG4gIHZhciBpc05lZWRJbnNlcnRlZCA9IGZ1bmN0aW9uIGlzTmVlZEluc2VydGVkKCkge1xuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEgJiYgIWljb24gJiYgIWlzVW5Cb3JkZXJlZEJ1dHRvblR5cGUodHlwZSk7XG4gIH07XG4gIHZhciBmaXhUd29DTkNoYXIgPSBmdW5jdGlvbiBmaXhUd29DTkNoYXIoKSB7XG4gICAgLy8gRml4IGZvciBIT0MgdXNhZ2UgbGlrZSA8Rm9ybWF0TWVzc2FnZSAvPlxuICAgIGlmICghYnV0dG9uUmVmIHx8ICFidXR0b25SZWYuY3VycmVudCB8fCBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJ1dHRvblRleHQgPSBidXR0b25SZWYuY3VycmVudC50ZXh0Q29udGVudDtcbiAgICBpZiAoaXNOZWVkSW5zZXJ0ZWQoKSAmJiBpc1R3b0NOQ2hhcihidXR0b25UZXh0KSkge1xuICAgICAgaWYgKCFoYXNUd29DTkNoYXIpIHtcbiAgICAgICAgc2V0SGFzVHdvQ05DaGFyKHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFzVHdvQ05DaGFyKSB7XG4gICAgICBzZXRIYXNUd29DTkNoYXIoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09IFVwZGF0ZSBMb2FkaW5nID09PT09PT09PT09PT09PVxuICB2YXIgbG9hZGluZ09yRGVsYXkgPSB0eXBlb2YgbG9hZGluZyA9PT0gJ2Jvb2xlYW4nID8gbG9hZGluZyA6IChsb2FkaW5nID09PSBudWxsIHx8IGxvYWRpbmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxvYWRpbmcuZGVsYXkpIHx8IHRydWU7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlbGF5VGltZXIgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgbG9hZGluZ09yRGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICBkZWxheVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxheVRpbWVyID0gbnVsbDtcbiAgICAgICAgc2V0TG9hZGluZyhsb2FkaW5nT3JEZWxheSk7XG4gICAgICB9LCBsb2FkaW5nT3JEZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldExvYWRpbmcobG9hZGluZ09yRGVsYXkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlbGF5VGltZXIpIHtcbiAgICAgICAgLy8gaW4gb3JkZXIgdG8gbm90IHBlcmZvcm0gYSBSZWFjdCBzdGF0ZSB1cGRhdGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudFxuICAgICAgICAvLyBhbmQgY2xlYXIgdGltZXIgYWZ0ZXIgJ2xvYWRpbmdPckRlbGF5JyB1cGRhdGVkLlxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGRlbGF5VGltZXIpO1xuICAgICAgICBkZWxheVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbbG9hZGluZ09yRGVsYXldKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZpeFR3b0NOQ2hhciwgW2J1dHRvblJlZl0pO1xuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgdmFyIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzMwMjA3XG4gICAgaWYgKGlubmVyTG9hZGluZyB8fCBtZXJnZWREaXNhYmxlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbkNsaWNrID09PSBudWxsIHx8IG9uQ2xpY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ2xpY2soZSk7XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgaWNvbiA9PT0gJ3N0cmluZycgJiYgaWNvbi5sZW5ndGggPiAyKSwgJ0J1dHRvbicsIFwiYGljb25gIGlzIHVzaW5nIFJlYWN0Tm9kZSBpbnN0ZWFkIG9mIHN0cmluZyBuYW1pbmcgaW4gdjQuIFBsZWFzZSBjaGVjayBgXCIuY29uY2F0KGljb24sIFwiYCBhdCBodHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy9pY29uXCIpKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKGdob3N0ICYmIGlzVW5Cb3JkZXJlZEJ1dHRvblR5cGUodHlwZSkpLCAnQnV0dG9uJywgXCJgbGlua2Agb3IgYHRleHRgIGJ1dHRvbiBjYW4ndCBiZSBhIGBnaG9zdGAgYnV0dG9uLlwiKSA6IHZvaWQgMDtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnYnRuJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIGF1dG9JbnNlcnRTcGFjZSA9IGF1dG9JbnNlcnRTcGFjZUluQnV0dG9uICE9PSBmYWxzZTtcbiAgdmFyIF91c2VDb21wYWN0SXRlbUNvbnRleCA9IHVzZUNvbXBhY3RJdGVtQ29udGV4dChwcmVmaXhDbHMsIGRpcmVjdGlvbiksXG4gICAgY29tcGFjdFNpemUgPSBfdXNlQ29tcGFjdEl0ZW1Db250ZXguY29tcGFjdFNpemUsXG4gICAgY29tcGFjdEl0ZW1DbGFzc25hbWVzID0gX3VzZUNvbXBhY3RJdGVtQ29udGV4LmNvbXBhY3RJdGVtQ2xhc3NuYW1lcztcbiAgdmFyIHNpemVDbGFzc05hbWVNYXAgPSB7XG4gICAgbGFyZ2U6ICdsZycsXG4gICAgc21hbGw6ICdzbScsXG4gICAgbWlkZGxlOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIHNpemVGdWxsbmFtZSA9IGNvbXBhY3RTaXplIHx8IGdyb3VwU2l6ZSB8fCBjdXN0b21pemVTaXplIHx8IHNpemU7XG4gIHZhciBzaXplQ2xzID0gc2l6ZUZ1bGxuYW1lID8gc2l6ZUNsYXNzTmFtZU1hcFtzaXplRnVsbG5hbWVdIHx8ICcnIDogJyc7XG4gIHZhciBpY29uVHlwZSA9IGlubmVyTG9hZGluZyA/ICdsb2FkaW5nJyA6IGljb247XG4gIHZhciBsaW5rQnV0dG9uUmVzdFByb3BzID0gb21pdChyZXN0LCBbJ25hdmlnYXRlJ10pO1xuICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2hhcGUpLCBzaGFwZSAhPT0gJ2RlZmF1bHQnICYmIHNoYXBlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQodHlwZSksIHR5cGUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplQ2xzKSwgc2l6ZUNscyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uLW9ubHlcIiksICFjaGlsZHJlbiAmJiBjaGlsZHJlbiAhPT0gMCAmJiAhIWljb25UeXBlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWJhY2tncm91bmQtZ2hvc3RcIiksIGdob3N0ICYmICFpc1VuQm9yZGVyZWRCdXR0b25UeXBlKHR5cGUpKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmdcIiksIGlubmVyTG9hZGluZyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi10d28tY2hpbmVzZS1jaGFyc1wiKSwgaGFzVHdvQ05DaGFyICYmIGF1dG9JbnNlcnRTcGFjZSAmJiAhaW5uZXJMb2FkaW5nKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWJsb2NrXCIpLCBibG9jayksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kYW5nZXJvdXNcIiksICEhZGFuZ2VyKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kaXNhYmxlZFwiKSwgbGlua0J1dHRvblJlc3RQcm9wcy5ocmVmICE9PSB1bmRlZmluZWQgJiYgbWVyZ2VkRGlzYWJsZWQpLCBfY2xhc3NOYW1lcyksIGNvbXBhY3RJdGVtQ2xhc3NuYW1lcywgY2xhc3NOYW1lKTtcbiAgdmFyIGljb25Ob2RlID0gaWNvbiAmJiAhaW5uZXJMb2FkaW5nID8gaWNvbiA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdJY29uLCB7XG4gICAgZXhpc3RJY29uOiAhIWljb24sXG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgbG9hZGluZzogISFpbm5lckxvYWRpbmdcbiAgfSk7XG4gIHZhciBraWRzID0gY2hpbGRyZW4gfHwgY2hpbGRyZW4gPT09IDAgPyBzcGFjZUNoaWxkcmVuKGNoaWxkcmVuLCBpc05lZWRJbnNlcnRlZCgpICYmIGF1dG9JbnNlcnRTcGFjZSkgOiBudWxsO1xuICBpZiAobGlua0J1dHRvblJlc3RQcm9wcy5ocmVmICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCBsaW5rQnV0dG9uUmVzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogYnV0dG9uUmVmXG4gICAgfSksIGljb25Ob2RlLCBraWRzKTtcbiAgfVxuICB2YXIgYnV0dG9uTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgdHlwZTogaHRtbFR5cGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIGRpc2FibGVkOiBtZXJnZWREaXNhYmxlZCxcbiAgICByZWY6IGJ1dHRvblJlZlxuICB9KSwgaWNvbk5vZGUsIGtpZHMpO1xuICBpZiAoaXNVbkJvcmRlcmVkQnV0dG9uVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBidXR0b25Ob2RlO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXYXZlLCB7XG4gICAgZGlzYWJsZWQ6ICEhaW5uZXJMb2FkaW5nXG4gIH0sIGJ1dHRvbk5vZGUpO1xufTtcbnZhciBCdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbnRlcm5hbEJ1dHRvbik7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBCdXR0b24uZGlzcGxheU5hbWUgPSAnQnV0dG9uJztcbn1cbkJ1dHRvbi5Hcm91cCA9IEdyb3VwO1xuQnV0dG9uLl9fQU5UX0JVVFRPTiA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2hlY2tDaXJjbGVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNjk5IDM1M2gtNDYuOWMtMTAuMiAwLTE5LjkgNC45LTI1LjkgMTMuM0w0NjkgNTg0LjNsLTcxLjItOTguOGMtNi04LjMtMTUuNi0xMy4zLTI1LjktMTMuM0gzMjVjLTYuNSAwLTEwLjMgNy40LTYuNSAxMi43bDEyNC42IDE3Mi44YTMxLjggMzEuOCAwIDAwNTEuNyAwbDIxMC42LTI5MmMzLjktNS4zLjEtMTIuNy02LjQtMTIuN3pcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyelwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiY2hlY2stY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBDaGVja0NpcmNsZU91dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hlY2tDaXJjbGVPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DaGVja0NpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgQ2hlY2tDaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIENoZWNrQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IENoZWNrQ2lyY2xlT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkNoZWNrQ2lyY2xlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnQ2hlY2tDaXJjbGVPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDaGVja0NpcmNsZU91dGxpbmVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBJbmZvQ2lyY2xlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0wIDgyMGMtMjA1LjQgMC0zNzItMTY2LjYtMzcyLTM3MnMxNjYuNi0zNzIgMzcyLTM3MiAzNzIgMTY2LjYgMzcyIDM3Mi0xNjYuNiAzNzItMzcyIDM3MnpcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNDY0IDMzNmE0OCA0OCAwIDEwOTYgMCA0OCA0OCAwIDEwLTk2IDB6bTcyIDExMmgtNDhjLTQuNCAwLTggMy42LTggOHYyNzJjMCA0LjQgMy42IDggOCA4aDQ4YzQuNCAwIDgtMy42IDgtOFY0NTZjMC00LjQtMy42LTgtOC04elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiaW5mby1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IEluZm9DaXJjbGVPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEluZm9DaXJjbGVPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9JbmZvQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcbnZhciBJbmZvQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBJbmZvQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEluZm9DaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuSW5mb0NpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0luZm9DaXJjbGVPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbmZvQ2lyY2xlT3V0bGluZWQpOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIENsb3NlQ2lyY2xlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcImZpbGwtcnVsZVwiOiBcImV2ZW5vZGRcIiwgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRjMjQ3LjQgMCA0NDggMjAwLjYgNDQ4IDQ0OFM3NTkuNCA5NjAgNTEyIDk2MCA2NCA3NTkuNCA2NCA1MTIgMjY0LjYgNjQgNTEyIDY0em0wIDc2Yy0yMDUuNCAwLTM3MiAxNjYuNi0zNzIgMzcyczE2Ni42IDM3MiAzNzIgMzcyIDM3Mi0xNjYuNiAzNzItMzcyLTE2Ni42LTM3Mi0zNzItMzcyem0xMjguMDEgMTk4LjgzYy4wMyAwIC4wNS4wMS4wOS4wNmw0NS4wMiA0NS4wMWEuMi4yIDAgMDEuMDUuMDkuMTIuMTIgMCAwMTAgLjA3YzAgLjAyLS4wMS4wNC0uMDUuMDhMNTU3LjI1IDUxMmwxMjcuODcgMTI3Ljg2YS4yNy4yNyAwIDAxLjA1LjA2di4wMmEuMTIuMTIgMCAwMTAgLjA3YzAgLjAzLS4wMS4wNS0uMDUuMDlsLTQ1LjAyIDQ1LjAyYS4yLjIgMCAwMS0uMDkuMDUuMTIuMTIgMCAwMS0uMDcgMGMtLjAyIDAtLjA0LS4wMS0uMDgtLjA1TDUxMiA1NTcuMjUgMzg0LjE0IDY4NS4xMmMtLjA0LjA0LS4wNi4wNS0uMDguMDVhLjEyLjEyIDAgMDEtLjA3IDBjLS4wMyAwLS4wNS0uMDEtLjA5LS4wNWwtNDUuMDItNDUuMDJhLjIuMiAwIDAxLS4wNS0uMDkuMTIuMTIgMCAwMTAtLjA3YzAtLjAyLjAxLS4wNC4wNi0uMDhMNDY2Ljc1IDUxMiAzMzguODggMzg0LjE0YS4yNy4yNyAwIDAxLS4wNS0uMDZsLS4wMS0uMDJhLjEyLjEyIDAgMDEwLS4wN2MwLS4wMy4wMS0uMDUuMDUtLjA5bDQ1LjAyLTQ1LjAyYS4yLjIgMCAwMS4wOS0uMDUuMTIuMTIgMCAwMS4wNyAwYy4wMiAwIC4wNC4wMS4wOC4wNkw1MTIgNDY2Ljc1bDEyNy44Ni0xMjcuODZjLjA0LS4wNS4wNi0uMDYuMDgtLjA2YS4xMi4xMiAwIDAxLjA3IDB6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjbG9zZS1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENsb3NlQ2lyY2xlT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDbG9zZUNpcmNsZU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcbnZhciBDbG9zZUNpcmNsZU91dGxpbmVkID0gZnVuY3Rpb24gQ2xvc2VDaXJjbGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogQ2xvc2VDaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuQ2xvc2VDaXJjbGVPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdDbG9zZUNpcmNsZU91dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENsb3NlQ2lyY2xlT3V0bGluZWQpOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0wIDgyMGMtMjA1LjQgMC0zNzItMTY2LjYtMzcyLTM3MnMxNjYuNi0zNzIgMzcyLTM3MiAzNzIgMTY2LjYgMzcyIDM3Mi0xNjYuNiAzNzItMzcyIDM3MnpcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNDY0IDY4OGE0OCA0OCAwIDEwOTYgMCA0OCA0OCAwIDEwLTk2IDB6bTI0LTExMmg0OGM0LjQgMCA4LTMuNiA4LThWMjk2YzAtNC40LTMuNi04LTgtOGgtNDhjLTQuNCAwLTggMy42LTggOHYyNzJjMCA0LjQgMy42IDggOCA4elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiZXhjbGFtYXRpb24tY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbkV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBTZWFyY2hPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNOTA5LjYgODU0LjVMNjQ5LjkgNTk0LjhDNjkwLjIgNTQyLjcgNzEyIDQ3OSA3MTIgNDEyYzAtODAuMi0zMS4zLTE1NS40LTg3LjktMjEyLjEtNTYuNi01Ni43LTEzMi04Ny45LTIxMi4xLTg3LjlzLTE1NS41IDMxLjMtMjEyLjEgODcuOUMxNDMuMiAyNTYuNSAxMTIgMzMxLjggMTEyIDQxMmMwIDgwLjEgMzEuMyAxNTUuNSA4Ny45IDIxMi4xQzI1Ni41IDY4MC44IDMzMS44IDcxMiA0MTIgNzEyYzY3IDAgMTMwLjYtMjEuOCAxODIuNy02MmwyNTkuNyAyNTkuNmE4LjIgOC4yIDAgMDAxMS42IDBsNDMuNi00My41YTguMiA4LjIgMCAwMDAtMTEuNnpNNTcwLjQgNTcwLjRDNTI4IDYxMi43IDQ3MS44IDYzNiA0MTIgNjM2cy0xMTYtMjMuMy0xNTguNC02NS42QzIxMS4zIDUyOCAxODggNDcxLjggMTg4IDQxMnMyMy4zLTExNi4xIDY1LjYtMTU4LjRDMjk2IDIxMS4zIDM1Mi4yIDE4OCA0MTIgMTg4czExNi4xIDIzLjIgMTU4LjQgNjUuNlM2MzYgMzUyLjIgNjM2IDQxMnMtMjMuMyAxMTYuMS02NS42IDE1OC40elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwic2VhcmNoXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBTZWFyY2hPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNlYXJjaE91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1NlYXJjaE91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgU2VhcmNoT3V0bGluZWQgPSBmdW5jdGlvbiBTZWFyY2hPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogU2VhcmNoT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcblNlYXJjaE91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ1NlYXJjaE91dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKFNlYXJjaE91dGxpbmVkKTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gUmVqZWN0aW9uIHRyYWNraW5nIHByZXZlbnRzIGEgY29tbW9uIGlzc3VlIHdoZXJlIFJlYWN0IGdldHMgaW50byBhblxuICAvLyBpbmNvbnNpc3RlbnQgc3RhdGUgZHVlIHRvIGFuIGVycm9yLCBidXQgaXQgZ2V0cyBzd2FsbG93ZWQgYnkgYSBQcm9taXNlLFxuICAvLyBhbmQgdGhlIHVzZXIgaGFzIG5vIGlkZWEgd2hhdCBjYXVzZXMgUmVhY3QncyBlcnJhdGljIGZ1dHVyZSBiZWhhdmlvci5cbiAgcmVxdWlyZSgncHJvbWlzZS9saWIvcmVqZWN0aW9uLXRyYWNraW5nJykuZW5hYmxlKCk7XG4gIHNlbGYuUHJvbWlzZSA9IHJlcXVpcmUoJ3Byb21pc2UvbGliL2VzNi1leHRlbnNpb25zLmpzJyk7XG59XG5cbi8vIE1ha2Ugc3VyZSB3ZSdyZSBpbiBhIEJyb3dzZXItbGlrZSBlbnZpcm9ubWVudCBiZWZvcmUgaW1wb3J0aW5nIHBvbHlmaWxsc1xuLy8gVGhpcyBwcmV2ZW50cyBgZmV0Y2goKWAgZnJvbSBiZWluZyBpbXBvcnRlZCBpbiBhIE5vZGUgdGVzdCBlbnZpcm9ubWVudFxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIGZldGNoKCkgcG9seWZpbGwgZm9yIG1ha2luZyBBUEkgY2FsbHMuXG4gIHJlcXVpcmUoJ3doYXR3Zy1mZXRjaCcpO1xufVxuXG4vLyBPYmplY3QuYXNzaWduKCkgaXMgY29tbW9ubHkgdXNlZCB3aXRoIFJlYWN0LlxuLy8gSXQgd2lsbCB1c2UgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpZiBpdCdzIHByZXNlbnQgYW5kIGlzbid0IGJ1Z2d5LlxuT2JqZWN0LmFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxuLy8gU3VwcG9ydCBmb3IuLi5vZiAoYSBjb21tb25seSB1c2VkIHN5bnRheCBmZWF0dXJlIHRoYXQgcmVxdWlyZXMgU3ltYm9scylcbnJlcXVpcmUoJ2NvcmUtanMvZmVhdHVyZXMvc3ltYm9sJyk7XG4vLyBTdXBwb3J0IGl0ZXJhYmxlIHNwcmVhZCAoLi4uU2V0LCAuLi5NYXApXG5yZXF1aXJlKCdjb3JlLWpzL2ZlYXR1cmVzL2FycmF5L2Zyb20nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzYXAgPSByZXF1aXJlKCdhc2FwL3JhdycpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gU3RhdGVzOlxuLy9cbi8vIDAgLSBwZW5kaW5nXG4vLyAxIC0gZnVsZmlsbGVkIHdpdGggX3ZhbHVlXG4vLyAyIC0gcmVqZWN0ZWQgd2l0aCBfdmFsdWVcbi8vIDMgLSBhZG9wdGVkIHRoZSBzdGF0ZSBvZiBhbm90aGVyIHByb21pc2UsIF92YWx1ZVxuLy9cbi8vIG9uY2UgdGhlIHN0YXRlIGlzIG5vIGxvbmdlciBwZW5kaW5nICgwKSBpdCBpcyBpbW11dGFibGVcblxuLy8gQWxsIGBfYCBwcmVmaXhlZCBwcm9wZXJ0aWVzIHdpbGwgYmUgcmVkdWNlZCB0byBgX3tyYW5kb20gbnVtYmVyfWBcbi8vIGF0IGJ1aWxkIHRpbWUgdG8gb2JmdXNjYXRlIHRoZW0gYW5kIGRpc2NvdXJhZ2UgdGhlaXIgdXNlLlxuLy8gV2UgZG9uJ3QgdXNlIHN5bWJvbHMgb3IgT2JqZWN0LmRlZmluZVByb3BlcnR5IHRvIGZ1bGx5IGhpZGUgdGhlbVxuLy8gYmVjYXVzZSB0aGUgcGVyZm9ybWFuY2UgaXNuJ3QgZ29vZCBlbm91Z2guXG5cblxuLy8gdG8gYXZvaWQgdXNpbmcgdHJ5L2NhdGNoIGluc2lkZSBjcml0aWNhbCBmdW5jdGlvbnMsIHdlXG4vLyBleHRyYWN0IHRoZW0gdG8gaGVyZS5cbnZhciBMQVNUX0VSUk9SID0gbnVsbDtcbnZhciBJU19FUlJPUiA9IHt9O1xuZnVuY3Rpb24gZ2V0VGhlbihvYmopIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gb2JqLnRoZW47XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgTEFTVF9FUlJPUiA9IGV4O1xuICAgIHJldHVybiBJU19FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlDYWxsT25lKGZuLCBhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKGEpO1xuICB9IGNhdGNoIChleCkge1xuICAgIExBU1RfRVJST1IgPSBleDtcbiAgICByZXR1cm4gSVNfRVJST1I7XG4gIH1cbn1cbmZ1bmN0aW9uIHRyeUNhbGxUd28oZm4sIGEsIGIpIHtcbiAgdHJ5IHtcbiAgICBmbihhLCBiKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBMQVNUX0VSUk9SID0gZXg7XG4gICAgcmV0dXJuIElTX0VSUk9SO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcblxuZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICBpZiAodHlwZW9mIHRoaXMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UgY29uc3RydWN0b3JcXCdzIGFyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdGhpcy5feCA9IDA7XG4gIHRoaXMuX3kgPSAwO1xuICB0aGlzLl96ID0gbnVsbDtcbiAgdGhpcy5fQSA9IG51bGw7XG4gIGlmIChmbiA9PT0gbm9vcCkgcmV0dXJuO1xuICBkb1Jlc29sdmUoZm4sIHRoaXMpO1xufVxuUHJvbWlzZS5fQiA9IG51bGw7XG5Qcm9taXNlLl9DID0gbnVsbDtcblByb21pc2UuX0QgPSBub29wO1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgaWYgKHRoaXMuY29uc3RydWN0b3IgIT09IFByb21pc2UpIHtcbiAgICByZXR1cm4gc2FmZVRoZW4odGhpcywgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICB9XG4gIHZhciByZXMgPSBuZXcgUHJvbWlzZShub29wKTtcbiAgaGFuZGxlKHRoaXMsIG5ldyBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCByZXMpKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIHNhZmVUaGVuKHNlbGYsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIHJldHVybiBuZXcgc2VsZi5jb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcyA9IG5ldyBQcm9taXNlKG5vb3ApO1xuICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgaGFuZGxlKHNlbGYsIG5ldyBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCByZXMpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBoYW5kbGUoc2VsZiwgZGVmZXJyZWQpIHtcbiAgd2hpbGUgKHNlbGYuX3kgPT09IDMpIHtcbiAgICBzZWxmID0gc2VsZi5fejtcbiAgfVxuICBpZiAoUHJvbWlzZS5fQikge1xuICAgIFByb21pc2UuX0Ioc2VsZik7XG4gIH1cbiAgaWYgKHNlbGYuX3kgPT09IDApIHtcbiAgICBpZiAoc2VsZi5feCA9PT0gMCkge1xuICAgICAgc2VsZi5feCA9IDE7XG4gICAgICBzZWxmLl9BID0gZGVmZXJyZWQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzZWxmLl94ID09PSAxKSB7XG4gICAgICBzZWxmLl94ID0gMjtcbiAgICAgIHNlbGYuX0EgPSBbc2VsZi5fQSwgZGVmZXJyZWRdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxmLl9BLnB1c2goZGVmZXJyZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICBoYW5kbGVSZXNvbHZlZChzZWxmLCBkZWZlcnJlZCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJlc29sdmVkKHNlbGYsIGRlZmVycmVkKSB7XG4gIGFzYXAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNiID0gc2VsZi5feSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDtcbiAgICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICAgIGlmIChzZWxmLl95ID09PSAxKSB7XG4gICAgICAgIHJlc29sdmUoZGVmZXJyZWQucHJvbWlzZSwgc2VsZi5feik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoZGVmZXJyZWQucHJvbWlzZSwgc2VsZi5feik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZXQgPSB0cnlDYWxsT25lKGNiLCBzZWxmLl96KTtcbiAgICBpZiAocmV0ID09PSBJU19FUlJPUikge1xuICAgICAgcmVqZWN0KGRlZmVycmVkLnByb21pc2UsIExBU1RfRVJST1IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKGRlZmVycmVkLnByb21pc2UsIHJldCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHJlc29sdmUoc2VsZiwgbmV3VmFsdWUpIHtcbiAgLy8gUHJvbWlzZSBSZXNvbHV0aW9uIFByb2NlZHVyZTogaHR0cHM6Ly9naXRodWIuY29tL3Byb21pc2VzLWFwbHVzL3Byb21pc2VzLXNwZWMjdGhlLXByb21pc2UtcmVzb2x1dGlvbi1wcm9jZWR1cmVcbiAgaWYgKG5ld1ZhbHVlID09PSBzZWxmKSB7XG4gICAgcmV0dXJuIHJlamVjdChcbiAgICAgIHNlbGYsXG4gICAgICBuZXcgVHlwZUVycm9yKCdBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLicpXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgbmV3VmFsdWUgJiZcbiAgICAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgbmV3VmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICkge1xuICAgIHZhciB0aGVuID0gZ2V0VGhlbihuZXdWYWx1ZSk7XG4gICAgaWYgKHRoZW4gPT09IElTX0VSUk9SKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KHNlbGYsIExBU1RfRVJST1IpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGVuID09PSBzZWxmLnRoZW4gJiZcbiAgICAgIG5ld1ZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZVxuICAgICkge1xuICAgICAgc2VsZi5feSA9IDM7XG4gICAgICBzZWxmLl96ID0gbmV3VmFsdWU7XG4gICAgICBmaW5hbGUoc2VsZik7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZG9SZXNvbHZlKHRoZW4uYmluZChuZXdWYWx1ZSksIHNlbGYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBzZWxmLl95ID0gMTtcbiAgc2VsZi5feiA9IG5ld1ZhbHVlO1xuICBmaW5hbGUoc2VsZik7XG59XG5cbmZ1bmN0aW9uIHJlamVjdChzZWxmLCBuZXdWYWx1ZSkge1xuICBzZWxmLl95ID0gMjtcbiAgc2VsZi5feiA9IG5ld1ZhbHVlO1xuICBpZiAoUHJvbWlzZS5fQykge1xuICAgIFByb21pc2UuX0Moc2VsZiwgbmV3VmFsdWUpO1xuICB9XG4gIGZpbmFsZShzZWxmKTtcbn1cbmZ1bmN0aW9uIGZpbmFsZShzZWxmKSB7XG4gIGlmIChzZWxmLl94ID09PSAxKSB7XG4gICAgaGFuZGxlKHNlbGYsIHNlbGYuX0EpO1xuICAgIHNlbGYuX0EgPSBudWxsO1xuICB9XG4gIGlmIChzZWxmLl94ID09PSAyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLl9BLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoYW5kbGUoc2VsZiwgc2VsZi5fQVtpXSk7XG4gICAgfVxuICAgIHNlbGYuX0EgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb21pc2Upe1xuICB0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiBudWxsO1xuICB0aGlzLm9uUmVqZWN0ZWQgPSB0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uUmVqZWN0ZWQgOiBudWxsO1xuICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xufVxuXG4vKipcbiAqIFRha2UgYSBwb3RlbnRpYWxseSBtaXNiZWhhdmluZyByZXNvbHZlciBmdW5jdGlvbiBhbmQgbWFrZSBzdXJlXG4gKiBvbkZ1bGZpbGxlZCBhbmQgb25SZWplY3RlZCBhcmUgb25seSBjYWxsZWQgb25jZS5cbiAqXG4gKiBNYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IGFzeW5jaHJvbnkuXG4gKi9cbmZ1bmN0aW9uIGRvUmVzb2x2ZShmbiwgcHJvbWlzZSkge1xuICB2YXIgZG9uZSA9IGZhbHNlO1xuICB2YXIgcmVzID0gdHJ5Q2FsbFR3byhmbiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG4gICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIH0pO1xuICBpZiAoIWRvbmUgJiYgcmVzID09PSBJU19FUlJPUikge1xuICAgIGRvbmUgPSB0cnVlO1xuICAgIHJlamVjdChwcm9taXNlLCBMQVNUX0VSUk9SKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10eXBlb2YtdW5kZWZpbmVkIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgSVNfSFRNTEREQSA9IHR5cGVvZiBkb2N1bWVudEFsbCA9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudEFsbCAhPT0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWxsOiBkb2N1bWVudEFsbCxcbiAgSVNfSFRNTEREQTogSVNfSFRNTEREQVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT09IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM2LVxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzMzNFxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT09IDQyO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5DT05GSUdVUkFCTEU7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxudmFyIENPTkZJR1VSQUJMRV9MRU5HVEggPSBERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAnbGVuZ3RoJywgeyB2YWx1ZTogOCB9KS5sZW5ndGggIT09IDg7XG59KTtcblxudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG52YXIgbWFrZUJ1aWx0SW4gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSwgb3B0aW9ucykge1xuICBpZiAoc3RyaW5nU2xpY2UoJFN0cmluZyhuYW1lKSwgMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgIG5hbWUgPSAnWycgKyByZXBsYWNlKCRTdHJpbmcobmFtZSksIC9eU3ltYm9sXFwoKFteKV0qKVxcKS8sICckMScpICsgJ10nO1xuICB9XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2V0dGVyKSBuYW1lID0gJ2dldCAnICsgbmFtZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXR0ZXIpIG5hbWUgPSAnc2V0ICcgKyBuYW1lO1xuICBpZiAoIWhhc093bih2YWx1ZSwgJ25hbWUnKSB8fCAoQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgJiYgdmFsdWUubmFtZSAhPT0gbmFtZSkpIHtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIHsgdmFsdWU6IG5hbWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICBlbHNlIHZhbHVlLm5hbWUgPSBuYW1lO1xuICB9XG4gIGlmIChDT05GSUdVUkFCTEVfTEVOR1RIICYmIG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdhcml0eScpICYmIHZhbHVlLmxlbmd0aCAhPT0gb3B0aW9ucy5hcml0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbGVuZ3RoJywgeyB2YWx1ZTogb3B0aW9ucy5hcml0eSB9KTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnY29uc3RydWN0b3InKSAmJiBvcHRpb25zLmNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAncHJvdG90eXBlJywgeyB3cml0YWJsZTogZmFsc2UgfSk7XG4gICAgLy8gaW4gVjggfiBDaHJvbWUgNTMsIHByb3RvdHlwZXMgb2Ygc29tZSBtZXRob2RzLCBsaWtlIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCwgYXJlIG5vbi13cml0YWJsZVxuICAgIH0gZWxzZSBpZiAodmFsdWUucHJvdG90eXBlKSB2YWx1ZS5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICBpZiAoIWhhc093bihzdGF0ZSwgJ3NvdXJjZScpKSB7XG4gICAgc3RhdGUuc291cmNlID0gam9pbihURU1QTEFURSwgdHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG5cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmUgLS0gcmVxdWlyZWRcbkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IG1ha2VCdWlsdEluKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSwgJ3RvU3RyaW5nJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChhcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5KSkobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT09ICdXaW5kb3cnXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgdmFyIFN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbCAmJiBTeW1ib2wucHJvdG90eXBlO1xuICB2YXIgdmFsdWVPZiA9IFN5bWJvbFByb3RvdHlwZSAmJiBTeW1ib2xQcm90b3R5cGUudmFsdWVPZjtcbiAgdmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuICBpZiAoU3ltYm9sUHJvdG90eXBlICYmICFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICAgIC8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgLmxlbmd0aFxuICAgIGRlZmluZUJ1aWx0SW4oU3ltYm9sUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgICByZXR1cm4gY2FsbCh2YWx1ZU9mLCB0aGlzKTtcbiAgICB9LCB7IGFyaXR5OiAxIH0pO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gc2FmZSAqL1xubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MICYmICEhU3ltYm9sWydmb3InXSAmJiAhIVN5bWJvbC5rZXlGb3I7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgbWV0aG9kKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHJldHVybiB1bmN1cnJ5VGhpcyhhQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSlbbWV0aG9kXSkpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbnZhciBrZXlGb3IgPSBTeW1ib2wua2V5Rm9yO1xudmFyIHRoaXNTeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZik7XG5cbi8vIGBTeW1ib2wuaXNSZWdpc3RlcmVkU3ltYm9sYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1zeW1ib2wtcHJlZGljYXRlcy8jc2VjLXN5bWJvbC1pc3JlZ2lzdGVyZWRzeW1ib2xcbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sLmlzUmVnaXN0ZXJlZFN5bWJvbCB8fCBmdW5jdGlvbiBpc1JlZ2lzdGVyZWRTeW1ib2wodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4ga2V5Rm9yKHRoaXNTeW1ib2xWYWx1ZSh2YWx1ZSkpICE9PSB1bmRlZmluZWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG52YXIgJGlzV2VsbEtub3duU3ltYm9sID0gU3ltYm9sLmlzV2VsbEtub3duU3ltYm9sO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBnZXRCdWlsdEluKCdPYmplY3QnLCAnZ2V0T3duUHJvcGVydHlOYW1lcycpO1xudmFyIHRoaXNTeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxuZm9yICh2YXIgaSA9IDAsIHN5bWJvbEtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKFN5bWJvbCksIHN5bWJvbEtleXNMZW5ndGggPSBzeW1ib2xLZXlzLmxlbmd0aDsgaSA8IHN5bWJvbEtleXNMZW5ndGg7IGkrKykge1xuICAvLyBzb21lIG9sZCBlbmdpbmVzIHRocm93cyBvbiBhY2Nlc3MgdG8gc29tZSBrZXlzIGxpa2UgYGFyZ3VtZW50c2Agb3IgYGNhbGxlcmBcbiAgdHJ5IHtcbiAgICB2YXIgc3ltYm9sS2V5ID0gc3ltYm9sS2V5c1tpXTtcbiAgICBpZiAoaXNTeW1ib2woU3ltYm9sW3N5bWJvbEtleV0pKSB3ZWxsS25vd25TeW1ib2woc3ltYm9sS2V5KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufVxuXG4vLyBgU3ltYm9sLmlzV2VsbEtub3duU3ltYm9sYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1zeW1ib2wtcHJlZGljYXRlcy8jc2VjLXN5bWJvbC1pc3dlbGxrbm93bnN5bWJvbFxuLy8gV2Ugc2hvdWxkIHBhdGNoIGl0IGZvciBuZXdseSBhZGRlZCB3ZWxsLWtub3duIHN5bWJvbHMuIElmIGl0J3Mgbm90IHJlcXVpcmVkLCB0aGlzIG1vZHVsZSBqdXN0IHdpbGwgbm90IGJlIGluamVjdGVkXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzV2VsbEtub3duU3ltYm9sKHZhbHVlKSB7XG4gIGlmICgkaXNXZWxsS25vd25TeW1ib2wgJiYgJGlzV2VsbEtub3duU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHRydWU7XG4gIHRyeSB7XG4gICAgdmFyIHN5bWJvbCA9IHRoaXNTeW1ib2xWYWx1ZSh2YWx1ZSk7XG4gICAgZm9yICh2YXIgaiA9IDAsIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGtleXNMZW5ndGggPSBrZXlzLmxlbmd0aDsgaiA8IGtleXNMZW5ndGg7IGorKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcSAtLSBwb2x5ZmlsbGVkIHN5bWJvbHMgY2FzZVxuICAgICAgaWYgKFdlbGxLbm93blN5bWJvbHNTdG9yZVtrZXlzW2pdXSA9PSBzeW1ib2wpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXJPckluZmluaXR5KHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IGNoYXJBdChTLCBwb3NpdGlvbilcbiAgICAgICAgICA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IHN0cmluZ1NsaWNlKFMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpXG4gICAgICAgICAgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChhcmd1bWVudCkgOiB1c2luZ0l0ZXJhdG9yO1xuICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkgcmV0dXJuIGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMoTmF0aXZlUHJvdG90eXBlW0tFWV0pO1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSA6IEtFWSA9PT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAhaXNDYWxsYWJsZShOYXRpdmVDb25zdHJ1Y3RvcikgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpO1xuICAgIH0pKVxuICApO1xuXG4gIGlmIChSRVBMQUNFKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLmVuYWJsZSgpO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT09IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihpdGVyYWJsZSk7IH0pO1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIE5hdGl2ZVByb3RvdHlwZSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCksIGR1bW15LCBDb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBOYXRpdmVQcm90b3R5cGU7XG4gICAgICBOYXRpdmVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICB9XG5cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcblxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgTmF0aXZlUHJvdG90eXBlLmNsZWFyKSBkZWxldGUgTmF0aXZlUHJvdG90eXBlLmNsZWFyO1xuICB9XG5cbiAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogQ29uc3RydWN0b3IgIT09IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBSRVFVSVJFRCA9IGZhbHNlO1xudmFyIE1FVEFEQVRBID0gdWlkKCdtZXRhJyk7XG52YXIgaWQgPSAwO1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArIGlkKyssIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBSRVFVSVJFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXNPd24oaXQsIE1FVEFEQVRBKSkgc2V0TWV0YWRhdGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG52YXIgZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICBtZXRhLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgUkVRVUlSRUQgPSB0cnVlO1xuICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZjtcbiAgdmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG4gIHZhciB0ZXN0ID0ge307XG4gIHRlc3RbTUVUQURBVEFdID0gMTtcblxuICAvLyBwcmV2ZW50IGV4cG9zaW5nIG9mIG1ldGFkYXRhIGtleVxuICBpZiAoZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0KS5sZW5ndGgpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlc3VsdFtpXSA9PT0gTUVUQURBVEEpIHtcbiAgICAgICAgICBzcGxpY2UocmVzdWx0LCBpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZS5mXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuYWJsZTogZW5hYmxlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5mYXN0S2V5O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBQcm90b3R5cGUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGluZGV4OiBjcmVhdGUobnVsbCksXG4gICAgICAgIGZpcnN0OiB1bmRlZmluZWQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfSk7XG4gICAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGF0LnNpemUgPSAwO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmNsZWFyKClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5jbGVhclxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmNsZWFyXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgICAgZGVsZXRlIHN0YXRlLmluZGV4W2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wcmV2aW91cyA9IHByZXY7XG4gICAgICAgICAgaWYgKHN0YXRlLmZpcnN0ID09PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5maXJzdCkge1xuICAgICAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihQcm90b3R5cGUsICdzaXplJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTtcbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS57IGtleXMsIHZhbHVlcywgZW50cmllcywgQEBpdGVyYXRvciB9KClgIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIGRlZmluZUl0ZXJhdG9yKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09PSAna2V5cycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGVudHJ5LmtleSwgZmFsc2UpO1xuICAgICAgaWYgKGtpbmQgPT09ICd2YWx1ZXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChlbnRyeS52YWx1ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2VudHJ5LmtleSwgZW50cnkudmFsdWVdLCBmYWxzZSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGVbQEBzcGVjaWVzXWAgYWNjZXNzb3JzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtbWFwLUBAc3BlY2llc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXNldC1AQHNwZWNpZXNcbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwRm4gPSBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZywgYXJyYXksIG4sIGJvdW5kRnVuY3Rpb247XG4gIGFDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gIGlmIChtYXBwaW5nKSBhQ2FsbGFibGUobWFwRm4pO1xuICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoc291cmNlKSkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gIGFycmF5ID0gW107XG4gIGlmIChtYXBwaW5nKSB7XG4gICAgbiA9IDA7XG4gICAgYm91bmRGdW5jdGlvbiA9IGJpbmQobWFwRm4sIGxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIGl0ZXJhdGUoc291cmNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgIGNhbGwocHVzaCwgYXJyYXksIGJvdW5kRnVuY3Rpb24obmV4dEl0ZW0sIG4rKykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJhdGUoc291cmNlLCBwdXNoLCB7IHRoYXQ6IGFycmF5IH0pO1xuICB9XG4gIHJldHVybiBuZXcgdGhpcyhhcnJheSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb2YoKSB7XG4gIHJldHVybiBuZXcgdGhpcyhhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBNYXAucHJvdG90eXBlLnVwc2VydGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC11cHNlcnRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdXBzZXJ0KGtleSwgdXBkYXRlRm4gLyogLCBpbnNlcnRGbiAqLykge1xuICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBnZXQgPSBhQ2FsbGFibGUobWFwLmdldCk7XG4gIHZhciBoYXMgPSBhQ2FsbGFibGUobWFwLmhhcyk7XG4gIHZhciBzZXQgPSBhQ2FsbGFibGUobWFwLnNldCk7XG4gIHZhciBpbnNlcnRGbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgdmFsdWU7XG4gIGlmICghaXNDYWxsYWJsZSh1cGRhdGVGbikgJiYgIWlzQ2FsbGFibGUoaW5zZXJ0Rm4pKSB7XG4gICAgdGhyb3cgJFR5cGVFcnJvcignQXQgbGVhc3Qgb25lIGNhbGxiYWNrIHJlcXVpcmVkJyk7XG4gIH1cbiAgaWYgKGNhbGwoaGFzLCBtYXAsIGtleSkpIHtcbiAgICB2YWx1ZSA9IGNhbGwoZ2V0LCBtYXAsIGtleSk7XG4gICAgaWYgKGlzQ2FsbGFibGUodXBkYXRlRm4pKSB7XG4gICAgICB2YWx1ZSA9IHVwZGF0ZUZuKHZhbHVlKTtcbiAgICAgIGNhbGwoc2V0LCBtYXAsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NhbGxhYmxlKGluc2VydEZuKSkge1xuICAgIHZhbHVlID0gaW5zZXJ0Rm4oKTtcbiAgICBjYWxsKHNldCwgbWFwLCBrZXksIHZhbHVlKTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1zZXQnKTtcbnZhciBTZXRIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1oZWxwZXJzJyk7XG52YXIgY2xvbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWNsb25lJyk7XG52YXIgc2l6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc2l6ZScpO1xudmFyIGdldFNldFJlY29yZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LXJlY29yZCcpO1xudmFyIGl0ZXJhdGVTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWl0ZXJhdGUnKTtcbnZhciBpdGVyYXRlU2ltcGxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUtc2ltcGxlJyk7XG5cbnZhciBoYXMgPSBTZXRIZWxwZXJzLmhhcztcbnZhciByZW1vdmUgPSBTZXRIZWxwZXJzLnJlbW92ZTtcblxuLy8gYFNldC5wcm90b3R5cGUuZGlmZmVyZW5jZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaWZmZXJlbmNlKG90aGVyKSB7XG4gIHZhciBPID0gYVNldCh0aGlzKTtcbiAgdmFyIG90aGVyUmVjID0gZ2V0U2V0UmVjb3JkKG90aGVyKTtcbiAgdmFyIHJlc3VsdCA9IGNsb25lKE8pO1xuICBpZiAoc2l6ZShPKSA8PSBvdGhlclJlYy5zaXplKSBpdGVyYXRlU2V0KE8sIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKG90aGVyUmVjLmluY2x1ZGVzKGUpKSByZW1vdmUocmVzdWx0LCBlKTtcbiAgfSk7XG4gIGVsc2UgaXRlcmF0ZVNpbXBsZShvdGhlclJlYy5nZXRJdGVyYXRvcigpLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChoYXMoTywgZSkpIHJlbW92ZShyZXN1bHQsIGUpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYVNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXNldCcpO1xudmFyIFNldEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWhlbHBlcnMnKTtcbnZhciBzaXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zaXplJyk7XG52YXIgZ2V0U2V0UmVjb3JkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtcmVjb3JkJyk7XG52YXIgaXRlcmF0ZVNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xudmFyIGl0ZXJhdGVTaW1wbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZS1zaW1wbGUnKTtcblxudmFyIFNldCA9IFNldEhlbHBlcnMuU2V0O1xudmFyIGFkZCA9IFNldEhlbHBlcnMuYWRkO1xudmFyIGhhcyA9IFNldEhlbHBlcnMuaGFzO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pbnRlcnNlY3Rpb25gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW50ZXJzZWN0aW9uKG90aGVyKSB7XG4gIHZhciBPID0gYVNldCh0aGlzKTtcbiAgdmFyIG90aGVyUmVjID0gZ2V0U2V0UmVjb3JkKG90aGVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBTZXQoKTtcblxuICBpZiAoc2l6ZShPKSA+IG90aGVyUmVjLnNpemUpIHtcbiAgICBpdGVyYXRlU2ltcGxlKG90aGVyUmVjLmdldEl0ZXJhdG9yKCksIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoaGFzKE8sIGUpKSBhZGQocmVzdWx0LCBlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlU2V0KE8sIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAob3RoZXJSZWMuaW5jbHVkZXMoZSkpIGFkZChyZXN1bHQsIGUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYVNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXNldCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaGVscGVycycpLmhhcztcbnZhciBzaXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zaXplJyk7XG52YXIgZ2V0U2V0UmVjb3JkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtcmVjb3JkJyk7XG52YXIgaXRlcmF0ZVNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xudmFyIGl0ZXJhdGVTaW1wbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZS1zaW1wbGUnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmlzRGlzam9pbnRGcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0LW1ldGhvZHMvI1NldC5wcm90b3R5cGUuaXNEaXNqb2ludEZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEaXNqb2ludEZyb20ob3RoZXIpIHtcbiAgdmFyIE8gPSBhU2V0KHRoaXMpO1xuICB2YXIgb3RoZXJSZWMgPSBnZXRTZXRSZWNvcmQob3RoZXIpO1xuICBpZiAoc2l6ZShPKSA8PSBvdGhlclJlYy5zaXplKSByZXR1cm4gaXRlcmF0ZVNldChPLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChvdGhlclJlYy5pbmNsdWRlcyhlKSkgcmV0dXJuIGZhbHNlO1xuICB9LCB0cnVlKSAhPT0gZmFsc2U7XG4gIHZhciBpdGVyYXRvciA9IG90aGVyUmVjLmdldEl0ZXJhdG9yKCk7XG4gIHJldHVybiBpdGVyYXRlU2ltcGxlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChoYXMoTywgZSkpIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgZmFsc2UpO1xuICB9KSAhPT0gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1zZXQnKTtcbnZhciBzaXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zaXplJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xudmFyIGdldFNldFJlY29yZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LXJlY29yZCcpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pc1N1YnNldE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0LW1ldGhvZHMvI1NldC5wcm90b3R5cGUuaXNTdWJzZXRPZlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N1YnNldE9mKG90aGVyKSB7XG4gIHZhciBPID0gYVNldCh0aGlzKTtcbiAgdmFyIG90aGVyUmVjID0gZ2V0U2V0UmVjb3JkKG90aGVyKTtcbiAgaWYgKHNpemUoTykgPiBvdGhlclJlYy5zaXplKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBpdGVyYXRlKE8sIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCFvdGhlclJlYy5pbmNsdWRlcyhlKSkgcmV0dXJuIGZhbHNlO1xuICB9LCB0cnVlKSAhPT0gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1zZXQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWhlbHBlcnMnKS5oYXM7XG52YXIgc2l6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc2l6ZScpO1xudmFyIGdldFNldFJlY29yZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LXJlY29yZCcpO1xudmFyIGl0ZXJhdGVTaW1wbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZS1zaW1wbGUnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldC1tZXRob2RzLyNTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N1cGVyc2V0T2Yob3RoZXIpIHtcbiAgdmFyIE8gPSBhU2V0KHRoaXMpO1xuICB2YXIgb3RoZXJSZWMgPSBnZXRTZXRSZWNvcmQob3RoZXIpO1xuICBpZiAoc2l6ZShPKSA8IG90aGVyUmVjLnNpemUpIHJldHVybiBmYWxzZTtcbiAgdmFyIGl0ZXJhdG9yID0gb3RoZXJSZWMuZ2V0SXRlcmF0b3IoKTtcbiAgcmV0dXJuIGl0ZXJhdGVTaW1wbGUoaXRlcmF0b3IsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCFoYXMoTywgZSkpIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgZmFsc2UpO1xuICB9KSAhPT0gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1zZXQnKTtcbnZhciBTZXRIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1oZWxwZXJzJyk7XG52YXIgY2xvbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWNsb25lJyk7XG52YXIgZ2V0U2V0UmVjb3JkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtcmVjb3JkJyk7XG52YXIgaXRlcmF0ZVNpbXBsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlLXNpbXBsZScpO1xuXG52YXIgYWRkID0gU2V0SGVscGVycy5hZGQ7XG52YXIgaGFzID0gU2V0SGVscGVycy5oYXM7XG52YXIgcmVtb3ZlID0gU2V0SGVscGVycy5yZW1vdmU7XG5cbi8vIGBTZXQucHJvdG90eXBlLnN5bW1ldHJpY0RpZmZlcmVuY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ltbWV0cmljRGlmZmVyZW5jZShvdGhlcikge1xuICB2YXIgTyA9IGFTZXQodGhpcyk7XG4gIHZhciBrZXlzSXRlciA9IGdldFNldFJlY29yZChvdGhlcikuZ2V0SXRlcmF0b3IoKTtcbiAgdmFyIHJlc3VsdCA9IGNsb25lKE8pO1xuICBpdGVyYXRlU2ltcGxlKGtleXNJdGVyLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChoYXMoTywgZSkpIHJlbW92ZShyZXN1bHQsIGUpO1xuICAgIGVsc2UgYWRkKHJlc3VsdCwgZSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhU2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Etc2V0Jyk7XG52YXIgYWRkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1oZWxwZXJzJykuYWRkO1xudmFyIGNsb25lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1jbG9uZScpO1xudmFyIGdldFNldFJlY29yZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LXJlY29yZCcpO1xudmFyIGl0ZXJhdGVTaW1wbGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZS1zaW1wbGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUudW5pb25gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdW5pb24ob3RoZXIpIHtcbiAgdmFyIE8gPSBhU2V0KHRoaXMpO1xuICB2YXIga2V5c0l0ZXIgPSBnZXRTZXRSZWNvcmQob3RoZXIpLmdldEl0ZXJhdG9yKCk7XG4gIHZhciByZXN1bHQgPSBjbG9uZShPKTtcbiAgaXRlcmF0ZVNpbXBsZShrZXlzSXRlciwgZnVuY3Rpb24gKGl0KSB7XG4gICAgYWRkKHJlc3VsdCwgaXQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgRnVuY3Rpb24gPSBnbG9iYWwuRnVuY3Rpb247XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyICRsb2NhdGlvbiwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbmZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gRGVubyB0aHJvd3MgYSBSZWZlcmVuY2VFcnJvciBvbiBgbG9jYXRpb25gIGFjY2VzcyB3aXRob3V0IGAtLWxvY2F0aW9uYCBmbGFnXG4gICRsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbn0pO1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIGlmIChoYXNPd24ocXVldWUsIGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIGdsb2JhbFBvc3RNZXNzYWdlRGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCAkbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgJGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShoYW5kbGVyKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGZuID0gaXNDYWxsYWJsZShoYW5kbGVyKSA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKTtcbiAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoZm4sIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoSVNfTk9ERSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBldmVudExpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0KTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICBpc0NhbGxhYmxlKGdsb2JhbC5wb3N0TWVzc2FnZSkgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICAkbG9jYXRpb24gJiYgJGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKGdsb2JhbFBvc3RNZXNzYWdlRGVmZXIpXG4gICkge1xuICAgIGRlZmVyID0gZ2xvYmFsUG9zdE1lc3NhZ2VEZWZlcjtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWRvcy9uby12dWxuZXJhYmxlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gLyg/OmlwYWR8aXBob25lfGlwb2QpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5oZWFkID0gbnVsbDtcbiAgdGhpcy50YWlsID0gbnVsbDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBlbnRyeSA9IHsgaXRlbTogaXRlbSwgbmV4dDogbnVsbCB9O1xuICAgIHZhciB0YWlsID0gdGhpcy50YWlsO1xuICAgIGlmICh0YWlsKSB0YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB2YXIgbmV4dCA9IHRoaXMuaGVhZCA9IGVudHJ5Lm5leHQ7XG4gICAgICBpZiAobmV4dCA9PT0gbnVsbCkgdGhpcy50YWlsID0gbnVsbDtcbiAgICAgIHJldHVybiBlbnRyeS5pdGVtO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBEZW5vIC0tIERlbm8gY2FzZSAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgRGVubyA9PSAnb2JqZWN0JyAmJiBEZW5vICYmIHR5cGVvZiBEZW5vLnZlcnNpb24gPT0gJ29iamVjdCc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG5cbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSkudGhlbih1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgY2FwaXRhbGl6ZSA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZScpLFxuICAgIGNyZWF0ZUNvbXBvdW5kZXIgPSByZXF1aXJlKCcuL19jcmVhdGVDb21wb3VuZGVyJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAqIC8vID0+ICdmb29CYXInXG4gKlxuICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gKiAvLyA9PiAnZm9vQmFyJ1xuICpcbiAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICogLy8gPT4gJ2Zvb0JhcidcbiAqL1xudmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxDYXNlO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVW5pY29kZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUikge1xuICB2YXIgZmxhZ3MgPSBSLmZsYWdzO1xuICByZXR1cm4gZmxhZ3MgPT09IHVuZGVmaW5lZCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSAmJiAhaGFzT3duKFIsICdmbGFncycpICYmIGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBSKVxuICAgID8gY2FsbChyZWdFeHBGbGFncywgUikgOiBmbGFncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmhhc0luZGljZXMpIHJlc3VsdCArPSAnZCc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnVuaWNvZGVTZXRzKSByZXN1bHQgKz0gJ3YnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJy4nLCAncycpIC0+IC8uL3MgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnLicsICdzJyk7XG4gIHJldHVybiAhKHJlLmRvdEFsbCAmJiByZS5leGVjKCdcXG4nKSAmJiByZS5mbGFncyA9PT0gJ3MnKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJyg/PGE+YiknLCAnZycpIC0+IC8oPzxhPmIpL2cgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnKD88YT5iKScsICdnJyk7XG4gIHJldHVybiByZS5leGVjKCdiJykuZ3JvdXBzLmEgIT09ICdiJyB8fFxuICAgICdiJy5yZXBsYWNlKHJlLCAnJDxhPmMnKSAhPT0gJ2JjJztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdwYXJhbXMnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eSddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndXJsJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnXG4gIF07XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcyKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBmdW5jdGlvbiBvdGhlcktleXNEZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHBhZ2UnLFxuICBqdW1wX3RvOiAnR28gdG8nLFxuICBqdW1wX3RvX2NvbmZpcm06ICdjb25maXJtJyxcbiAgcGFnZTogJ1BhZ2UnLFxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICdQcmV2aW91cyBQYWdlJyxcbiAgbmV4dF9wYWdlOiAnTmV4dCBQYWdlJyxcbiAgcHJldl81OiAnUHJldmlvdXMgNSBQYWdlcycsXG4gIG5leHRfNTogJ05leHQgNSBQYWdlcycsXG4gIHByZXZfMzogJ1ByZXZpb3VzIDMgUGFnZXMnLFxuICBuZXh0XzM6ICdOZXh0IDMgUGFnZXMnLFxuICBwYWdlX3NpemU6ICdQYWdlIFNpemUnXG59OyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCB9IGZyb20gJy4uL3N0eWxlQ2hlY2tlcic7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKCkge1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIGZsZXhpYmxlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRGbGV4aWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0RmxleGlibGUoZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCgpKTtcbiAgfSwgW10pO1xuICByZXR1cm4gZmxleGlibGU7XG59KTsiLCJpbXBvcnQgY2FuVXNlRG9tIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjtcbmltcG9ydCB7IGlzU3R5bGVTdXBwb3J0IH0gZnJvbSBcInJjLXV0aWwvZXMvRG9tL3N0eWxlQ2hlY2tlclwiO1xuZXhwb3J0IHZhciBjYW5Vc2VEb2NFbGVtZW50ID0gZnVuY3Rpb24gY2FuVXNlRG9jRWxlbWVudCgpIHtcbiAgcmV0dXJuIGNhblVzZURvbSgpICYmIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59O1xuZXhwb3J0IHsgaXNTdHlsZVN1cHBvcnQgfTtcbnZhciBmbGV4R2FwU3VwcG9ydGVkO1xuZXhwb3J0IHZhciBkZXRlY3RGbGV4R2FwU3VwcG9ydGVkID0gZnVuY3Rpb24gZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCgpIHtcbiAgaWYgKCFjYW5Vc2VEb2NFbGVtZW50KCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGZsZXhHYXBTdXBwb3J0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbGV4R2FwU3VwcG9ydGVkO1xuICB9XG4gIC8vIGNyZWF0ZSBmbGV4IGNvbnRhaW5lciB3aXRoIHJvdy1nYXAgc2V0XG4gIHZhciBmbGV4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGZsZXguc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgZmxleC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XG4gIGZsZXguc3R5bGUucm93R2FwID0gJzFweCc7XG4gIC8vIGNyZWF0ZSB0d28sIGVsZW1lbnRzIGluc2lkZSBpdFxuICBmbGV4LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgZmxleC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gIC8vIGFwcGVuZCB0byB0aGUgRE9NIChuZWVkZWQgdG8gb2J0YWluIHNjcm9sbEhlaWdodClcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmbGV4KTtcbiAgZmxleEdhcFN1cHBvcnRlZCA9IGZsZXguc2Nyb2xsSGVpZ2h0ID09PSAxOyAvLyBmbGV4IGNvbnRhaW5lciBzaG91bGQgYmUgMXB4IGhpZ2ggZnJvbSB0aGUgcm93LWdhcFxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGZsZXgpO1xuICByZXR1cm4gZmxleEdhcFN1cHBvcnRlZDtcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBwbGFjZW1lbnRzIH0gZnJvbSBcInJjLXRvb2x0aXAvZXMvcGxhY2VtZW50c1wiO1xudmFyIGF1dG9BZGp1c3RPdmVyZmxvd0VuYWJsZWQgPSB7XG4gIGFkanVzdFg6IDEsXG4gIGFkanVzdFk6IDFcbn07XG52YXIgYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQgPSB7XG4gIGFkanVzdFg6IDAsXG4gIGFkanVzdFk6IDBcbn07XG52YXIgdGFyZ2V0T2Zmc2V0ID0gWzAsIDBdO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE92ZXJmbG93T3B0aW9ucyhhdXRvQWRqdXN0T3ZlcmZsb3cpIHtcbiAgaWYgKHR5cGVvZiBhdXRvQWRqdXN0T3ZlcmZsb3cgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBhdXRvQWRqdXN0T3ZlcmZsb3cgPyBhdXRvQWRqdXN0T3ZlcmZsb3dFbmFibGVkIDogYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCksIGF1dG9BZGp1c3RPdmVyZmxvdyk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQbGFjZW1lbnRzKGNvbmZpZykge1xuICB2YXIgX2NvbmZpZyRhcnJvd1dpZHRoID0gY29uZmlnLmFycm93V2lkdGgsXG4gICAgYXJyb3dXaWR0aCA9IF9jb25maWckYXJyb3dXaWR0aCA9PT0gdm9pZCAwID8gNCA6IF9jb25maWckYXJyb3dXaWR0aCxcbiAgICBfY29uZmlnJGhvcml6b250YWxBcnIgPSBjb25maWcuaG9yaXpvbnRhbEFycm93U2hpZnQsXG4gICAgaG9yaXpvbnRhbEFycm93U2hpZnQgPSBfY29uZmlnJGhvcml6b250YWxBcnIgPT09IHZvaWQgMCA/IDE2IDogX2NvbmZpZyRob3Jpem9udGFsQXJyLFxuICAgIF9jb25maWckdmVydGljYWxBcnJvdyA9IGNvbmZpZy52ZXJ0aWNhbEFycm93U2hpZnQsXG4gICAgdmVydGljYWxBcnJvd1NoaWZ0ID0gX2NvbmZpZyR2ZXJ0aWNhbEFycm93ID09PSB2b2lkIDAgPyA4IDogX2NvbmZpZyR2ZXJ0aWNhbEFycm93LFxuICAgIGF1dG9BZGp1c3RPdmVyZmxvdyA9IGNvbmZpZy5hdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgYXJyb3dQb2ludEF0Q2VudGVyID0gY29uZmlnLmFycm93UG9pbnRBdENlbnRlcjtcbiAgdmFyIHBsYWNlbWVudE1hcCA9IHtcbiAgICBsZWZ0OiB7XG4gICAgICBwb2ludHM6IFsnY3InLCAnY2wnXSxcbiAgICAgIG9mZnNldDogWy00LCAwXVxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHBvaW50czogWydjbCcsICdjciddLFxuICAgICAgb2Zmc2V0OiBbNCwgMF1cbiAgICB9LFxuICAgIHRvcDoge1xuICAgICAgcG9pbnRzOiBbJ2JjJywgJ3RjJ10sXG4gICAgICBvZmZzZXQ6IFswLCAtNF1cbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgcG9pbnRzOiBbJ3RjJywgJ2JjJ10sXG4gICAgICBvZmZzZXQ6IFswLCA0XVxuICAgIH0sXG4gICAgdG9wTGVmdDoge1xuICAgICAgcG9pbnRzOiBbJ2JsJywgJ3RjJ10sXG4gICAgICBvZmZzZXQ6IFstKGhvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCksIC00XVxuICAgIH0sXG4gICAgbGVmdFRvcDoge1xuICAgICAgcG9pbnRzOiBbJ3RyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgLSh2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKV1cbiAgICB9LFxuICAgIHRvcFJpZ2h0OiB7XG4gICAgICBwb2ludHM6IFsnYnInLCAndGMnXSxcbiAgICAgIG9mZnNldDogW2hvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCwgLTRdXG4gICAgfSxcbiAgICByaWdodFRvcDoge1xuICAgICAgcG9pbnRzOiBbJ3RsJywgJ2NyJ10sXG4gICAgICBvZmZzZXQ6IFs0LCAtKHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpXVxuICAgIH0sXG4gICAgYm90dG9tUmlnaHQ6IHtcbiAgICAgIHBvaW50czogWyd0cicsICdiYyddLFxuICAgICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCA0XVxuICAgIH0sXG4gICAgcmlnaHRCb3R0b206IHtcbiAgICAgIHBvaW50czogWydibCcsICdjciddLFxuICAgICAgb2Zmc2V0OiBbNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF1cbiAgICB9LFxuICAgIGJvdHRvbUxlZnQ6IHtcbiAgICAgIHBvaW50czogWyd0bCcsICdiYyddLFxuICAgICAgb2Zmc2V0OiBbLShob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpLCA0XVxuICAgIH0sXG4gICAgbGVmdEJvdHRvbToge1xuICAgICAgcG9pbnRzOiBbJ2JyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF1cbiAgICB9XG4gIH07XG4gIE9iamVjdC5rZXlzKHBsYWNlbWVudE1hcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcGxhY2VtZW50TWFwW2tleV0gPSBhcnJvd1BvaW50QXRDZW50ZXIgPyBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcGxhY2VtZW50TWFwW2tleV0pLCB7XG4gICAgICBvdmVyZmxvdzogZ2V0T3ZlcmZsb3dPcHRpb25zKGF1dG9BZGp1c3RPdmVyZmxvdyksXG4gICAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICAgIH0pIDogX2V4dGVuZHMoX2V4dGVuZHMoe30sIHBsYWNlbWVudHNba2V5XSksIHtcbiAgICAgIG92ZXJmbG93OiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KVxuICAgIH0pO1xuICAgIHBsYWNlbWVudE1hcFtrZXldLmlnbm9yZVNoYWtlID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBwbGFjZW1lbnRNYXA7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGhhc0FkZG9uKHByb3BzKSB7XG4gIHJldHVybiAhIShwcm9wcy5hZGRvbkJlZm9yZSB8fCBwcm9wcy5hZGRvbkFmdGVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNQcmVmaXhTdWZmaXgocHJvcHMpIHtcbiAgcmV0dXJuICEhKHByb3BzLnByZWZpeCB8fCBwcm9wcy5zdWZmaXggfHwgcHJvcHMuYWxsb3dDbGVhcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZU9uQ2hhbmdlKHRhcmdldCwgZSwgb25DaGFuZ2UsIHRhcmdldFZhbHVlKSB7XG4gIGlmICghb25DaGFuZ2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZXZlbnQgPSBlO1xuXG4gIGlmIChlLnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAvLyBDbG9uZSBhIG5ldyB0YXJnZXQgZm9yIGV2ZW50LlxuICAgIC8vIEF2b2lkIHRoZSBmb2xsb3dpbmcgdXNhZ2UsIHRoZSBzZXRRdWVyeSBtZXRob2QgZ2V0cyB0aGUgb3JpZ2luYWwgdmFsdWUuXG4gICAgLy9cbiAgICAvLyBjb25zdCBbcXVlcnksIHNldFF1ZXJ5XSA9IFJlYWN0LnVzZVN0YXRlKCcnKTtcbiAgICAvLyA8SW5wdXRcbiAgICAvLyAgIGFsbG93Q2xlYXJcbiAgICAvLyAgIHZhbHVlPXtxdWVyeX1cbiAgICAvLyAgIG9uQ2hhbmdlPXsoZSk9PiB7XG4gICAgLy8gICAgIHNldFF1ZXJ5KChwcmV2U3RhdHVzKSA9PiBlLnRhcmdldC52YWx1ZSk7XG4gICAgLy8gICB9fVxuICAgIC8vIC8+XG4gICAgdmFyIGN1cnJlbnRUYXJnZXQgPSB0YXJnZXQuY2xvbmVOb2RlKHRydWUpOyAvLyBjbGljayBjbGVhciBpY29uXG5cbiAgICBldmVudCA9IE9iamVjdC5jcmVhdGUoZSwge1xuICAgICAgdGFyZ2V0OiB7XG4gICAgICAgIHZhbHVlOiBjdXJyZW50VGFyZ2V0XG4gICAgICB9LFxuICAgICAgY3VycmVudFRhcmdldDoge1xuICAgICAgICB2YWx1ZTogY3VycmVudFRhcmdldFxuICAgICAgfVxuICAgIH0pO1xuICAgIGN1cnJlbnRUYXJnZXQudmFsdWUgPSAnJztcbiAgICBvbkNoYW5nZShldmVudCk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFRyaWdnZXIgYnkgY29tcG9zaXRpb24gZXZlbnQsIHRoaXMgbWVhbnMgd2UgbmVlZCBmb3JjZSBjaGFuZ2UgdGhlIGlucHV0IHZhbHVlXG5cblxuICBpZiAodGFyZ2V0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50ID0gT2JqZWN0LmNyZWF0ZShlLCB7XG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgdmFsdWU6IHRhcmdldFxuICAgICAgfSxcbiAgICAgIGN1cnJlbnRUYXJnZXQ6IHtcbiAgICAgICAgdmFsdWU6IHRhcmdldFxuICAgICAgfVxuICAgIH0pO1xuICAgIHRhcmdldC52YWx1ZSA9IHRhcmdldFZhbHVlO1xuICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBvbkNoYW5nZShldmVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckZvY3VzKGVsZW1lbnQsIG9wdGlvbikge1xuICBpZiAoIWVsZW1lbnQpIHJldHVybjtcbiAgZWxlbWVudC5mb2N1cyhvcHRpb24pOyAvLyBTZWxlY3Rpb24gY29udGVudFxuXG4gIHZhciBfcmVmID0gb3B0aW9uIHx8IHt9LFxuICAgICAgY3Vyc29yID0gX3JlZi5jdXJzb3I7XG5cbiAgaWYgKGN1cnNvcikge1xuICAgIHZhciBsZW4gPSBlbGVtZW50LnZhbHVlLmxlbmd0aDtcblxuICAgIHN3aXRjaCAoY3Vyc29yKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgMCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGxlbiwgbGVuKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgbGVuKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBmaXhDb250cm9sbGVkVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBoYXNBZGRvbiwgaGFzUHJlZml4U3VmZml4IH0gZnJvbSBcIi4vdXRpbHMvY29tbW9uVXRpbHNcIjtcblxudmFyIEJhc2VJbnB1dCA9IGZ1bmN0aW9uIEJhc2VJbnB1dChwcm9wcykge1xuICB2YXIgaW5wdXRFbGVtZW50ID0gcHJvcHMuaW5wdXRFbGVtZW50LFxuICAgICAgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgcHJlZml4ID0gcHJvcHMucHJlZml4LFxuICAgICAgc3VmZml4ID0gcHJvcHMuc3VmZml4LFxuICAgICAgYWRkb25CZWZvcmUgPSBwcm9wcy5hZGRvbkJlZm9yZSxcbiAgICAgIGFkZG9uQWZ0ZXIgPSBwcm9wcy5hZGRvbkFmdGVyLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIGFmZml4V3JhcHBlckNsYXNzTmFtZSA9IHByb3BzLmFmZml4V3JhcHBlckNsYXNzTmFtZSxcbiAgICAgIGdyb3VwQ2xhc3NOYW1lID0gcHJvcHMuZ3JvdXBDbGFzc05hbWUsXG4gICAgICB3cmFwcGVyQ2xhc3NOYW1lID0gcHJvcHMud3JhcHBlckNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICByZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgICAgZm9jdXNlZCA9IHByb3BzLmZvY3VzZWQsXG4gICAgICB0cmlnZ2VyRm9jdXMgPSBwcm9wcy50cmlnZ2VyRm9jdXMsXG4gICAgICBhbGxvd0NsZWFyID0gcHJvcHMuYWxsb3dDbGVhcixcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBoYW5kbGVSZXNldCA9IHByb3BzLmhhbmRsZVJlc2V0LFxuICAgICAgaGlkZGVuID0gcHJvcHMuaGlkZGVuO1xuICB2YXIgY29udGFpbmVyUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHZhciBvbklucHV0Q2xpY2sgPSBmdW5jdGlvbiBvbklucHV0Q2xpY2soZSkge1xuICAgIHZhciBfY29udGFpbmVyUmVmJGN1cnJlbnQ7XG5cbiAgICBpZiAoKF9jb250YWluZXJSZWYkY3VycmVudCA9IGNvbnRhaW5lclJlZi5jdXJyZW50KSAhPT0gbnVsbCAmJiBfY29udGFpbmVyUmVmJGN1cnJlbnQgIT09IHZvaWQgMCAmJiBfY29udGFpbmVyUmVmJGN1cnJlbnQuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICB0cmlnZ2VyRm9jdXMgPT09IG51bGwgfHwgdHJpZ2dlckZvY3VzID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmlnZ2VyRm9jdXMoKTtcbiAgICB9XG4gIH07IC8vID09PT09PT09PT09PT09PT09PSBDbGVhciBJY29uID09PT09PT09PT09PT09PT09PSAvL1xuXG5cbiAgdmFyIGdldENsZWFySWNvbiA9IGZ1bmN0aW9uIGdldENsZWFySWNvbigpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICBpZiAoIWFsbG93Q2xlYXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBuZWVkQ2xlYXIgPSAhZGlzYWJsZWQgJiYgIXJlYWRPbmx5ICYmIHZhbHVlO1xuICAgIHZhciBjbGVhckljb25DbHMgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsZWFyLWljb25cIik7XG4gICAgdmFyIGljb25Ob2RlID0gX3R5cGVvZihhbGxvd0NsZWFyKSA9PT0gJ29iamVjdCcgJiYgYWxsb3dDbGVhciAhPT0gbnVsbCAmJiBhbGxvd0NsZWFyICE9PSB2b2lkIDAgJiYgYWxsb3dDbGVhci5jbGVhckljb24gPyBhbGxvd0NsZWFyLmNsZWFySWNvbiA6ICfinJYnO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgb25DbGljazogaGFuZGxlUmVzZXQgLy8gRG8gbm90IHRyaWdnZXIgb25CbHVyIHdoZW4gY2xlYXIgaW5wdXRcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzMxMjAwXG4gICAgICAsXG4gICAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGVhckljb25DbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KGNsZWFySWNvbkNscywgXCItaGlkZGVuXCIpLCAhbmVlZENsZWFyKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChjbGVhckljb25DbHMsIFwiLWhhcy1zdWZmaXhcIiksICEhc3VmZml4KSwgX2NsYXNzTmFtZXMpKSxcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICB0YWJJbmRleDogLTFcbiAgICB9LCBpY29uTm9kZSk7XG4gIH07XG5cbiAgdmFyIGVsZW1lbnQgPSAvKiNfX1BVUkVfXyovY2xvbmVFbGVtZW50KGlucHV0RWxlbWVudCwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBoaWRkZW46IGhpZGRlblxuICB9KTsgLy8gPT09PT09PT09PT09PT09PT09IFByZWZpeCAmIFN1ZmZpeCA9PT09PT09PT09PT09PT09PT0gLy9cblxuICBpZiAoaGFzUHJlZml4U3VmZml4KHByb3BzKSkge1xuICAgIHZhciBfY2xhc3NOYW1lczI7XG5cbiAgICB2YXIgYWZmaXhXcmFwcGVyUHJlZml4Q2xzID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyXCIpO1xuICAgIHZhciBhZmZpeFdyYXBwZXJDbHMgPSBjbGFzc05hbWVzKGFmZml4V3JhcHBlclByZWZpeENscywgKF9jbGFzc05hbWVzMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChhZmZpeFdyYXBwZXJQcmVmaXhDbHMsIFwiLWRpc2FibGVkXCIpLCBkaXNhYmxlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KGFmZml4V3JhcHBlclByZWZpeENscywgXCItZm9jdXNlZFwiKSwgZm9jdXNlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KGFmZml4V3JhcHBlclByZWZpeENscywgXCItcmVhZG9ubHlcIiksIHJlYWRPbmx5KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQoYWZmaXhXcmFwcGVyUHJlZml4Q2xzLCBcIi1pbnB1dC13aXRoLWNsZWFyLWJ0blwiKSwgc3VmZml4ICYmIGFsbG93Q2xlYXIgJiYgdmFsdWUpLCBfY2xhc3NOYW1lczIpLCAhaGFzQWRkb24ocHJvcHMpICYmIGNsYXNzTmFtZSwgYWZmaXhXcmFwcGVyQ2xhc3NOYW1lKTtcbiAgICB2YXIgc3VmZml4Tm9kZSA9IChzdWZmaXggfHwgYWxsb3dDbGVhcikgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zdWZmaXhcIilcbiAgICB9LCBnZXRDbGVhckljb24oKSwgc3VmZml4KTtcbiAgICBlbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogYWZmaXhXcmFwcGVyQ2xzLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgaGlkZGVuOiAhaGFzQWRkb24ocHJvcHMpICYmIGhpZGRlbixcbiAgICAgIG9uQ2xpY2s6IG9uSW5wdXRDbGljayxcbiAgICAgIHJlZjogY29udGFpbmVyUmVmXG4gICAgfSwgcHJlZml4ICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcHJlZml4XCIpXG4gICAgfSwgcHJlZml4KSwgLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChpbnB1dEVsZW1lbnQsIHtcbiAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgaGlkZGVuOiBudWxsXG4gICAgfSksIHN1ZmZpeE5vZGUpO1xuICB9IC8vID09PT09PT09PT09PT09PT09PSBBZGRvbiA9PT09PT09PT09PT09PT09PT0gLy9cblxuXG4gIGlmIChoYXNBZGRvbihwcm9wcykpIHtcbiAgICB2YXIgd3JhcHBlckNscyA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXBcIik7XG4gICAgdmFyIGFkZG9uQ2xzID0gXCJcIi5jb25jYXQod3JhcHBlckNscywgXCItYWRkb25cIik7XG4gICAgdmFyIG1lcmdlZFdyYXBwZXJDbGFzc05hbWUgPSBjbGFzc05hbWVzKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItd3JhcHBlclwiKSwgd3JhcHBlckNscywgd3JhcHBlckNsYXNzTmFtZSk7XG4gICAgdmFyIG1lcmdlZEdyb3VwQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyhcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWdyb3VwLXdyYXBwZXJcIiksIGNsYXNzTmFtZSwgZ3JvdXBDbGFzc05hbWUpOyAvLyBOZWVkIGFub3RoZXIgd3JhcHBlciBmb3IgY2hhbmdpbmcgZGlzcGxheTp0YWJsZSB0byBkaXNwbGF5OmlubGluZS1ibG9ja1xuICAgIC8vIGFuZCBwdXQgc3R5bGUgcHJvcCBpbiB3cmFwcGVyXG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogbWVyZ2VkR3JvdXBDbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICBoaWRkZW46IGhpZGRlblxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IG1lcmdlZFdyYXBwZXJDbGFzc05hbWVcbiAgICB9LCBhZGRvbkJlZm9yZSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBhZGRvbkNsc1xuICAgIH0sIGFkZG9uQmVmb3JlKSwgLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICBzdHlsZTogbnVsbCxcbiAgICAgIGhpZGRlbjogbnVsbFxuICAgIH0pLCBhZGRvbkFmdGVyICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IGFkZG9uQ2xzXG4gICAgfSwgYWRkb25BZnRlcikpKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZUlucHV0OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wiYXV0b0NvbXBsZXRlXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwib25CbHVyXCIsIFwib25QcmVzc0VudGVyXCIsIFwib25LZXlEb3duXCIsIFwicHJlZml4Q2xzXCIsIFwiZGlzYWJsZWRcIiwgXCJodG1sU2l6ZVwiLCBcImNsYXNzTmFtZVwiLCBcIm1heExlbmd0aFwiLCBcInN1ZmZpeFwiLCBcInNob3dDb3VudFwiLCBcInR5cGVcIiwgXCJpbnB1dENsYXNzTmFtZVwiXTtcbmltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZVN0YXRlLCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmFzZUlucHV0IGZyb20gXCIuL0Jhc2VJbnB1dFwiO1xuaW1wb3J0IG9taXQgZnJvbSBcInJjLXV0aWwvZXMvb21pdFwiO1xuaW1wb3J0IHsgZml4Q29udHJvbGxlZFZhbHVlLCBoYXNBZGRvbiwgaGFzUHJlZml4U3VmZml4LCByZXNvbHZlT25DaGFuZ2UsIHRyaWdnZXJGb2N1cyB9IGZyb20gXCIuL3V0aWxzL2NvbW1vblV0aWxzXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB1c2VNZXJnZWRTdGF0ZSBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VNZXJnZWRTdGF0ZVwiO1xudmFyIElucHV0ID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uUHJlc3NFbnRlciA9IHByb3BzLm9uUHJlc3NFbnRlcixcbiAgICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICAgIF9wcm9wcyRwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICBwcmVmaXhDbHMgPSBfcHJvcHMkcHJlZml4Q2xzID09PSB2b2lkIDAgPyAncmMtaW5wdXQnIDogX3Byb3BzJHByZWZpeENscyxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBodG1sU2l6ZSA9IHByb3BzLmh0bWxTaXplLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgbWF4TGVuZ3RoID0gcHJvcHMubWF4TGVuZ3RoLFxuICAgICAgc3VmZml4ID0gcHJvcHMuc3VmZml4LFxuICAgICAgc2hvd0NvdW50ID0gcHJvcHMuc2hvd0NvdW50LFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIGlucHV0Q2xhc3NOYW1lID0gcHJvcHMuaW5wdXRDbGFzc05hbWUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIHZhciBfdXNlTWVyZ2VkU3RhdGUgPSB1c2VNZXJnZWRTdGF0ZShwcm9wcy5kZWZhdWx0VmFsdWUsIHtcbiAgICB2YWx1ZTogcHJvcHMudmFsdWVcbiAgfSksXG4gICAgICBfdXNlTWVyZ2VkU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZU1lcmdlZFN0YXRlLCAyKSxcbiAgICAgIHZhbHVlID0gX3VzZU1lcmdlZFN0YXRlMlswXSxcbiAgICAgIHNldFZhbHVlID0gX3VzZU1lcmdlZFN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBmb2N1c2VkID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldEZvY3VzZWQgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBpbnB1dFJlZiA9IHVzZVJlZihudWxsKTtcblxuICB2YXIgZm9jdXMgPSBmdW5jdGlvbiBmb2N1cyhvcHRpb24pIHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgdHJpZ2dlckZvY3VzKGlucHV0UmVmLmN1cnJlbnQsIG9wdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzOiBmb2N1cyxcbiAgICAgIGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICAgIHZhciBfaW5wdXRSZWYkY3VycmVudDtcblxuICAgICAgICAoX2lucHV0UmVmJGN1cnJlbnQgPSBpbnB1dFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfaW5wdXRSZWYkY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2lucHV0UmVmJGN1cnJlbnQuYmx1cigpO1xuICAgICAgfSxcbiAgICAgIHNldFNlbGVjdGlvblJhbmdlOiBmdW5jdGlvbiBzZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIF9pbnB1dFJlZiRjdXJyZW50MjtcblxuICAgICAgICAoX2lucHV0UmVmJGN1cnJlbnQyID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2lucHV0UmVmJGN1cnJlbnQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5wdXRSZWYkY3VycmVudDIuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCwgZGlyZWN0aW9uKTtcbiAgICAgIH0sXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdCgpIHtcbiAgICAgICAgdmFyIF9pbnB1dFJlZiRjdXJyZW50MztcblxuICAgICAgICAoX2lucHV0UmVmJGN1cnJlbnQzID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2lucHV0UmVmJGN1cnJlbnQzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5wdXRSZWYkY3VycmVudDMuc2VsZWN0KCk7XG4gICAgICB9LFxuICAgICAgaW5wdXQ6IGlucHV0UmVmLmN1cnJlbnRcbiAgICB9O1xuICB9KTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGb2N1c2VkKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gcHJldiAmJiBkaXNhYmxlZCA/IGZhbHNlIDogcHJldjtcbiAgICB9KTtcbiAgfSwgW2Rpc2FibGVkXSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgaWYgKHByb3BzLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgcmVzb2x2ZU9uQ2hhbmdlKGlucHV0UmVmLmN1cnJlbnQsIGUsIG9uQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBpZiAob25QcmVzc0VudGVyICYmIGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBvblByZXNzRW50ZXIoZSk7XG4gICAgfVxuXG4gICAgb25LZXlEb3duID09PSBudWxsIHx8IG9uS2V5RG93biA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25LZXlEb3duKGUpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGUpIHtcbiAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIG9uRm9jdXMgPT09IG51bGwgfHwgb25Gb2N1cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Gb2N1cyhlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZSkge1xuICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIG9uQmx1ciA9PT0gbnVsbCB8fCBvbkJsdXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQmx1cihlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUmVzZXQgPSBmdW5jdGlvbiBoYW5kbGVSZXNldChlKSB7XG4gICAgc2V0VmFsdWUoJycpO1xuICAgIGZvY3VzKCk7XG5cbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgcmVzb2x2ZU9uQ2hhbmdlKGlucHV0UmVmLmN1cnJlbnQsIGUsIG9uQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldElucHV0RWxlbWVudCA9IGZ1bmN0aW9uIGdldElucHV0RWxlbWVudCgpIHtcbiAgICAvLyBGaXggaHR0cHM6Ly9mYi5tZS9yZWFjdC11bmtub3duLXByb3BcbiAgICB2YXIgb3RoZXJQcm9wcyA9IG9taXQocHJvcHMsIFsncHJlZml4Q2xzJywgJ29uUHJlc3NFbnRlcicsICdhZGRvbkJlZm9yZScsICdhZGRvbkFmdGVyJywgJ3ByZWZpeCcsICdzdWZmaXgnLCAnYWxsb3dDbGVhcicsIC8vIElucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkLFxuICAgIC8vIHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgYm90aC5cbiAgICAnZGVmYXVsdFZhbHVlJywgJ3Nob3dDb3VudCcsICdhZmZpeFdyYXBwZXJDbGFzc05hbWUnLCAnZ3JvdXBDbGFzc05hbWUnLCAnaW5wdXRDbGFzc05hbWUnLCAnd3JhcHBlckNsYXNzTmFtZScsICdodG1sU2l6ZSddKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZVxuICAgIH0sIG90aGVyUHJvcHMsIHtcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwcmVmaXhDbHMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kaXNhYmxlZFwiKSwgZGlzYWJsZWQpLCBpbnB1dENsYXNzTmFtZSwgIWhhc0FkZG9uKHByb3BzKSAmJiAhaGFzUHJlZml4U3VmZml4KHByb3BzKSAmJiBjbGFzc05hbWUpLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIHNpemU6IGh0bWxTaXplLFxuICAgICAgdHlwZTogdHlwZVxuICAgIH0pKTtcbiAgfTtcblxuICB2YXIgZ2V0U3VmZml4ID0gZnVuY3Rpb24gZ2V0U3VmZml4KCkge1xuICAgIC8vIE1heCBsZW5ndGggdmFsdWVcbiAgICB2YXIgaGFzTWF4TGVuZ3RoID0gTnVtYmVyKG1heExlbmd0aCkgPiAwO1xuXG4gICAgaWYgKHN1ZmZpeCB8fCBzaG93Q291bnQpIHtcbiAgICAgIHZhciB2YWwgPSBmaXhDb250cm9sbGVkVmFsdWUodmFsdWUpO1xuXG4gICAgICB2YXIgdmFsdWVMZW5ndGggPSBfdG9Db25zdW1hYmxlQXJyYXkodmFsKS5sZW5ndGg7XG5cbiAgICAgIHZhciBkYXRhQ291bnQgPSBfdHlwZW9mKHNob3dDb3VudCkgPT09ICdvYmplY3QnID8gc2hvd0NvdW50LmZvcm1hdHRlcih7XG4gICAgICAgIHZhbHVlOiB2YWwsXG4gICAgICAgIGNvdW50OiB2YWx1ZUxlbmd0aCxcbiAgICAgICAgbWF4TGVuZ3RoOiBtYXhMZW5ndGhcbiAgICAgIH0pIDogXCJcIi5jb25jYXQodmFsdWVMZW5ndGgpLmNvbmNhdChoYXNNYXhMZW5ndGggPyBcIiAvIFwiLmNvbmNhdChtYXhMZW5ndGgpIDogJycpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAhIXNob3dDb3VudCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zaG93LWNvdW50LXN1ZmZpeFwiKSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNob3ctY291bnQtaGFzLXN1ZmZpeFwiKSwgISFzdWZmaXgpKVxuICAgICAgfSwgZGF0YUNvdW50KSwgc3VmZml4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQmFzZUlucHV0LCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGlucHV0RWxlbWVudDogZ2V0SW5wdXRFbGVtZW50KCksXG4gICAgaGFuZGxlUmVzZXQ6IGhhbmRsZVJlc2V0LFxuICAgIHZhbHVlOiBmaXhDb250cm9sbGVkVmFsdWUodmFsdWUpLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgdHJpZ2dlckZvY3VzOiBmb2N1cyxcbiAgICBzdWZmaXg6IGdldFN1ZmZpeCgpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9KSk7XG59KTtcbmV4cG9ydCBkZWZhdWx0IElucHV0OyIsImltcG9ydCBCYXNlSW5wdXQgZnJvbSBcIi4vQmFzZUlucHV0XCI7XG5pbXBvcnQgSW5wdXQgZnJvbSBcIi4vSW5wdXRcIjtcbmV4cG9ydCB7IEJhc2VJbnB1dCB9O1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3B1cChwcm9wcykge1xuICB2YXIgc2hvd0Fycm93ID0gcHJvcHMuc2hvd0Fycm93LFxuICAgICAgYXJyb3dDb250ZW50ID0gcHJvcHMuYXJyb3dDb250ZW50LFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBvdmVybGF5SW5uZXJTdHlsZSA9IHByb3BzLm92ZXJsYXlJbm5lclN0eWxlLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb250ZW50XCIpLCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiBzdHlsZVxuICB9LCBzaG93QXJyb3cgIT09IGZhbHNlICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYXJyb3dcIiksXG4gICAga2V5OiBcImFycm93XCJcbiAgfSwgYXJyb3dDb250ZW50KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbm5lclwiKSxcbiAgICBpZDogaWQsXG4gICAgcm9sZTogXCJ0b29sdGlwXCIsXG4gICAgc3R5bGU6IG92ZXJsYXlJbm5lclN0eWxlXG4gIH0sIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKCkgOiBjaGlsZHJlbikpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZUltcGVyYXRpdmVIYW5kbGUsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJpZ2dlciBmcm9tICdyYy10cmlnZ2VyJztcbmltcG9ydCB7IHBsYWNlbWVudHMgfSBmcm9tICcuL3BsYWNlbWVudHMnO1xuaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAnO1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIFRvb2x0aXAocHJvcHMsIHJlZikge1xuICB2YXIgb3ZlcmxheUNsYXNzTmFtZSA9IHByb3BzLm92ZXJsYXlDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkdHJpZ2dlciA9IHByb3BzLnRyaWdnZXIsXG4gICAgICB0cmlnZ2VyID0gX3Byb3BzJHRyaWdnZXIgPT09IHZvaWQgMCA/IFsnaG92ZXInXSA6IF9wcm9wcyR0cmlnZ2VyLFxuICAgICAgX3Byb3BzJG1vdXNlRW50ZXJEZWxhID0gcHJvcHMubW91c2VFbnRlckRlbGF5LFxuICAgICAgbW91c2VFbnRlckRlbGF5ID0gX3Byb3BzJG1vdXNlRW50ZXJEZWxhID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJG1vdXNlRW50ZXJEZWxhLFxuICAgICAgX3Byb3BzJG1vdXNlTGVhdmVEZWxhID0gcHJvcHMubW91c2VMZWF2ZURlbGF5LFxuICAgICAgbW91c2VMZWF2ZURlbGF5ID0gX3Byb3BzJG1vdXNlTGVhdmVEZWxhID09PSB2b2lkIDAgPyAwLjEgOiBfcHJvcHMkbW91c2VMZWF2ZURlbGEsXG4gICAgICBvdmVybGF5U3R5bGUgPSBwcm9wcy5vdmVybGF5U3R5bGUsXG4gICAgICBfcHJvcHMkcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgcHJlZml4Q2xzID0gX3Byb3BzJHByZWZpeENscyA9PT0gdm9pZCAwID8gJ3JjLXRvb2x0aXAnIDogX3Byb3BzJHByZWZpeENscyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBvblZpc2libGVDaGFuZ2UgPSBwcm9wcy5vblZpc2libGVDaGFuZ2UsXG4gICAgICBhZnRlclZpc2libGVDaGFuZ2UgPSBwcm9wcy5hZnRlclZpc2libGVDaGFuZ2UsXG4gICAgICB0cmFuc2l0aW9uTmFtZSA9IHByb3BzLnRyYW5zaXRpb25OYW1lLFxuICAgICAgYW5pbWF0aW9uID0gcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgbW90aW9uID0gcHJvcHMubW90aW9uLFxuICAgICAgX3Byb3BzJHBsYWNlbWVudCA9IHByb3BzLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9wcm9wcyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/ICdyaWdodCcgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgICAgX3Byb3BzJGFsaWduID0gcHJvcHMuYWxpZ24sXG4gICAgICBhbGlnbiA9IF9wcm9wcyRhbGlnbiA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkYWxpZ24sXG4gICAgICBfcHJvcHMkZGVzdHJveVRvb2x0aXAgPSBwcm9wcy5kZXN0cm95VG9vbHRpcE9uSGlkZSxcbiAgICAgIGRlc3Ryb3lUb29sdGlwT25IaWRlID0gX3Byb3BzJGRlc3Ryb3lUb29sdGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZXN0cm95VG9vbHRpcCxcbiAgICAgIGRlZmF1bHRWaXNpYmxlID0gcHJvcHMuZGVmYXVsdFZpc2libGUsXG4gICAgICBnZXRUb29sdGlwQ29udGFpbmVyID0gcHJvcHMuZ2V0VG9vbHRpcENvbnRhaW5lcixcbiAgICAgIG92ZXJsYXlJbm5lclN0eWxlID0gcHJvcHMub3ZlcmxheUlubmVyU3R5bGUsXG4gICAgICBhcnJvd0NvbnRlbnQgPSBwcm9wcy5hcnJvd0NvbnRlbnQsXG4gICAgICBvdmVybGF5ID0gcHJvcHMub3ZlcmxheSxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBzaG93QXJyb3cgPSBwcm9wcy5zaG93QXJyb3csXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIm92ZXJsYXlDbGFzc05hbWVcIiwgXCJ0cmlnZ2VyXCIsIFwibW91c2VFbnRlckRlbGF5XCIsIFwibW91c2VMZWF2ZURlbGF5XCIsIFwib3ZlcmxheVN0eWxlXCIsIFwicHJlZml4Q2xzXCIsIFwiY2hpbGRyZW5cIiwgXCJvblZpc2libGVDaGFuZ2VcIiwgXCJhZnRlclZpc2libGVDaGFuZ2VcIiwgXCJ0cmFuc2l0aW9uTmFtZVwiLCBcImFuaW1hdGlvblwiLCBcIm1vdGlvblwiLCBcInBsYWNlbWVudFwiLCBcImFsaWduXCIsIFwiZGVzdHJveVRvb2x0aXBPbkhpZGVcIiwgXCJkZWZhdWx0VmlzaWJsZVwiLCBcImdldFRvb2x0aXBDb250YWluZXJcIiwgXCJvdmVybGF5SW5uZXJTdHlsZVwiLCBcImFycm93Q29udGVudFwiLCBcIm92ZXJsYXlcIiwgXCJpZFwiLCBcInNob3dBcnJvd1wiXSk7XG5cbiAgdmFyIGRvbVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZG9tUmVmLmN1cnJlbnQ7XG4gIH0pO1xuXG4gIHZhciBleHRyYVByb3BzID0gX29iamVjdFNwcmVhZCh7fSwgcmVzdFByb3BzKTtcblxuICBpZiAoJ3Zpc2libGUnIGluIHByb3BzKSB7XG4gICAgZXh0cmFQcm9wcy5wb3B1cFZpc2libGUgPSBwcm9wcy52aXNpYmxlO1xuICB9XG5cbiAgdmFyIGdldFBvcHVwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFBvcHVwRWxlbWVudCgpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9wdXAsIHtcbiAgICAgIHNob3dBcnJvdzogc2hvd0Fycm93LFxuICAgICAgYXJyb3dDb250ZW50OiBhcnJvd0NvbnRlbnQsXG4gICAgICBrZXk6IFwiY29udGVudFwiLFxuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICBpZDogaWQsXG4gICAgICBvdmVybGF5SW5uZXJTdHlsZTogb3ZlcmxheUlubmVyU3R5bGVcbiAgICB9LCBvdmVybGF5KTtcbiAgfTtcblxuICB2YXIgZGVzdHJveVRvb2x0aXAgPSBmYWxzZTtcbiAgdmFyIGF1dG9EZXN0cm95ID0gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBkZXN0cm95VG9vbHRpcE9uSGlkZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgZGVzdHJveVRvb2x0aXAgPSBkZXN0cm95VG9vbHRpcE9uSGlkZTtcbiAgfSBlbHNlIGlmIChkZXN0cm95VG9vbHRpcE9uSGlkZSAmJiBfdHlwZW9mKGRlc3Ryb3lUb29sdGlwT25IaWRlKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIga2VlcFBhcmVudCA9IGRlc3Ryb3lUb29sdGlwT25IaWRlLmtlZXBQYXJlbnQ7XG4gICAgZGVzdHJveVRvb2x0aXAgPSBrZWVwUGFyZW50ID09PSB0cnVlO1xuICAgIGF1dG9EZXN0cm95ID0ga2VlcFBhcmVudCA9PT0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJpZ2dlciwgX2V4dGVuZHMoe1xuICAgIHBvcHVwQ2xhc3NOYW1lOiBvdmVybGF5Q2xhc3NOYW1lLFxuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIHBvcHVwOiBnZXRQb3B1cEVsZW1lbnQsXG4gICAgYWN0aW9uOiB0cmlnZ2VyLFxuICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBwbGFjZW1lbnRzLFxuICAgIHBvcHVwUGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgcmVmOiBkb21SZWYsXG4gICAgcG9wdXBBbGlnbjogYWxpZ24sXG4gICAgZ2V0UG9wdXBDb250YWluZXI6IGdldFRvb2x0aXBDb250YWluZXIsXG4gICAgb25Qb3B1cFZpc2libGVDaGFuZ2U6IG9uVmlzaWJsZUNoYW5nZSxcbiAgICBhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTogYWZ0ZXJWaXNpYmxlQ2hhbmdlLFxuICAgIHBvcHVwVHJhbnNpdGlvbk5hbWU6IHRyYW5zaXRpb25OYW1lLFxuICAgIHBvcHVwQW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgcG9wdXBNb3Rpb246IG1vdGlvbixcbiAgICBkZWZhdWx0UG9wdXBWaXNpYmxlOiBkZWZhdWx0VmlzaWJsZSxcbiAgICBkZXN0cm95UG9wdXBPbkhpZGU6IGRlc3Ryb3lUb29sdGlwLFxuICAgIGF1dG9EZXN0cm95OiBhdXRvRGVzdHJveSxcbiAgICBtb3VzZUxlYXZlRGVsYXk6IG1vdXNlTGVhdmVEZWxheSxcbiAgICBwb3B1cFN0eWxlOiBvdmVybGF5U3R5bGUsXG4gICAgbW91c2VFbnRlckRlbGF5OiBtb3VzZUVudGVyRGVsYXlcbiAgfSwgZXh0cmFQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKFRvb2x0aXApOyIsImltcG9ydCBUb29sdGlwIGZyb20gJy4vVG9vbHRpcCc7XG5pbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cCc7XG5leHBvcnQgeyBQb3B1cCB9O1xuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDsiLCIvLyBUaGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL2FuZHJleXBvcHAvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvXG4vKipcbiAqIGNhbGN1bGF0ZU5vZGVIZWlnaHQodWlUZXh0Tm9kZSwgdXNlQ2FjaGUgPSBmYWxzZSlcbiAqL1xudmFyIEhJRERFTl9URVhUQVJFQV9TVFlMRSA9IFwiXFxuICBtaW4taGVpZ2h0OjAgIWltcG9ydGFudDtcXG4gIG1heC1oZWlnaHQ6bm9uZSAhaW1wb3J0YW50O1xcbiAgaGVpZ2h0OjAgIWltcG9ydGFudDtcXG4gIHZpc2liaWxpdHk6aGlkZGVuICFpbXBvcnRhbnQ7XFxuICBvdmVyZmxvdzpoaWRkZW4gIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7XFxuICB6LWluZGV4Oi0xMDAwICFpbXBvcnRhbnQ7XFxuICB0b3A6MCAhaW1wb3J0YW50O1xcbiAgcmlnaHQ6MCAhaW1wb3J0YW50O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDtcXG5cIjtcbnZhciBTSVpJTkdfU1RZTEUgPSBbJ2xldHRlci1zcGFjaW5nJywgJ2xpbmUtaGVpZ2h0JywgJ3BhZGRpbmctdG9wJywgJ3BhZGRpbmctYm90dG9tJywgJ2ZvbnQtZmFtaWx5JywgJ2ZvbnQtd2VpZ2h0JywgJ2ZvbnQtc2l6ZScsICdmb250LXZhcmlhbnQnLCAndGV4dC1yZW5kZXJpbmcnLCAndGV4dC10cmFuc2Zvcm0nLCAnd2lkdGgnLCAndGV4dC1pbmRlbnQnLCAncGFkZGluZy1sZWZ0JywgJ3BhZGRpbmctcmlnaHQnLCAnYm9yZGVyLXdpZHRoJywgJ2JveC1zaXppbmcnLCAnd29yZC1icmVhayddO1xudmFyIGNvbXB1dGVkU3R5bGVDYWNoZSA9IHt9O1xudmFyIGhpZGRlblRleHRhcmVhO1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU5vZGVTdHlsaW5nKG5vZGUpIHtcbiAgdmFyIHVzZUNhY2hlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgdmFyIG5vZGVSZWYgPSBub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1yZWFjdGlkJykgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKTtcbiAgaWYgKHVzZUNhY2hlICYmIGNvbXB1dGVkU3R5bGVDYWNoZVtub2RlUmVmXSkge1xuICAgIHJldHVybiBjb21wdXRlZFN0eWxlQ2FjaGVbbm9kZVJlZl07XG4gIH1cbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIHZhciBib3hTaXppbmcgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJykgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLW1vei1ib3gtc2l6aW5nJykgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC1ib3gtc2l6aW5nJyk7XG4gIHZhciBwYWRkaW5nU2l6ZSA9IHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSkgKyBwYXJzZUZsb2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykpO1xuICB2YXIgYm9yZGVyU2l6ZSA9IHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLWJvdHRvbS13aWR0aCcpKSArIHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgdmFyIHNpemluZ1N0eWxlID0gU0laSU5HX1NUWUxFLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChuYW1lLCBcIjpcIikuY29uY2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuICB9KS5qb2luKCc7Jyk7XG4gIHZhciBub2RlSW5mbyA9IHtcbiAgICBzaXppbmdTdHlsZTogc2l6aW5nU3R5bGUsXG4gICAgcGFkZGluZ1NpemU6IHBhZGRpbmdTaXplLFxuICAgIGJvcmRlclNpemU6IGJvcmRlclNpemUsXG4gICAgYm94U2l6aW5nOiBib3hTaXppbmdcbiAgfTtcbiAgaWYgKHVzZUNhY2hlICYmIG5vZGVSZWYpIHtcbiAgICBjb21wdXRlZFN0eWxlQ2FjaGVbbm9kZVJlZl0gPSBub2RlSW5mbztcbiAgfVxuICByZXR1cm4gbm9kZUluZm87XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVBdXRvU2l6ZVN0eWxlKHVpVGV4dE5vZGUpIHtcbiAgdmFyIHVzZUNhY2hlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgdmFyIG1pblJvd3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gIHZhciBtYXhSb3dzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICBpZiAoIWhpZGRlblRleHRhcmVhKSB7XG4gICAgaGlkZGVuVGV4dGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGhpZGRlblRleHRhcmVhLnNldEF0dHJpYnV0ZSgndGFiLWluZGV4JywgJy0xJyk7XG4gICAgaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChoaWRkZW5UZXh0YXJlYSk7XG4gIH1cbiAgLy8gRml4IHdyYXA9XCJvZmZcIiBpc3N1ZVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy82NTc3XG4gIGlmICh1aVRleHROb2RlLmdldEF0dHJpYnV0ZSgnd3JhcCcpKSB7XG4gICAgaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCd3cmFwJywgdWlUZXh0Tm9kZS5nZXRBdHRyaWJ1dGUoJ3dyYXAnKSk7XG4gIH0gZWxzZSB7XG4gICAgaGlkZGVuVGV4dGFyZWEucmVtb3ZlQXR0cmlidXRlKCd3cmFwJyk7XG4gIH1cbiAgLy8gQ29weSBhbGwgQ1NTIHByb3BlcnRpZXMgdGhhdCBoYXZlIGFuIGltcGFjdCBvbiB0aGUgaGVpZ2h0IG9mIHRoZSBjb250ZW50IGluXG4gIC8vIHRoZSB0ZXh0Ym94XG4gIHZhciBfY2FsY3VsYXRlTm9kZVN0eWxpbmcgPSBjYWxjdWxhdGVOb2RlU3R5bGluZyh1aVRleHROb2RlLCB1c2VDYWNoZSksXG4gICAgcGFkZGluZ1NpemUgPSBfY2FsY3VsYXRlTm9kZVN0eWxpbmcucGFkZGluZ1NpemUsXG4gICAgYm9yZGVyU2l6ZSA9IF9jYWxjdWxhdGVOb2RlU3R5bGluZy5ib3JkZXJTaXplLFxuICAgIGJveFNpemluZyA9IF9jYWxjdWxhdGVOb2RlU3R5bGluZy5ib3hTaXppbmcsXG4gICAgc2l6aW5nU3R5bGUgPSBfY2FsY3VsYXRlTm9kZVN0eWxpbmcuc2l6aW5nU3R5bGU7XG4gIC8vIE5lZWQgdG8gaGF2ZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHRvIGhpZGUgdGhlIHNjcm9sbGJhciBvdGhlcndpc2VcbiAgLy8gdGV4dC1saW5lcyB3aWxsIG5vdCBjYWxjdWxhdGVkIHByb3Blcmx5IGFzIHRoZSBzaGFkb3cgd2lsbCB0ZWNobmljYWxseSBiZVxuICAvLyBuYXJyb3dlciBmb3IgY29udGVudFxuICBoaWRkZW5UZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgXCJcIi5jb25jYXQoc2l6aW5nU3R5bGUsIFwiO1wiKS5jb25jYXQoSElEREVOX1RFWFRBUkVBX1NUWUxFKSk7XG4gIGhpZGRlblRleHRhcmVhLnZhbHVlID0gdWlUZXh0Tm9kZS52YWx1ZSB8fCB1aVRleHROb2RlLnBsYWNlaG9sZGVyIHx8ICcnO1xuICB2YXIgbWluSGVpZ2h0ID0gdW5kZWZpbmVkO1xuICB2YXIgbWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICB2YXIgb3ZlcmZsb3dZO1xuICB2YXIgaGVpZ2h0ID0gaGlkZGVuVGV4dGFyZWEuc2Nyb2xsSGVpZ2h0O1xuICBpZiAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAvLyBib3JkZXItYm94OiBhZGQgYm9yZGVyLCBzaW5jZSBoZWlnaHQgPSBjb250ZW50ICsgcGFkZGluZyArIGJvcmRlclxuICAgIGhlaWdodCArPSBib3JkZXJTaXplO1xuICB9IGVsc2UgaWYgKGJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgIC8vIHJlbW92ZSBwYWRkaW5nLCBzaW5jZSBoZWlnaHQgPSBjb250ZW50XG4gICAgaGVpZ2h0IC09IHBhZGRpbmdTaXplO1xuICB9XG4gIGlmIChtaW5Sb3dzICE9PSBudWxsIHx8IG1heFJvd3MgIT09IG51bGwpIHtcbiAgICAvLyBtZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG4gICAgaGlkZGVuVGV4dGFyZWEudmFsdWUgPSAnICc7XG4gICAgdmFyIHNpbmdsZVJvd0hlaWdodCA9IGhpZGRlblRleHRhcmVhLnNjcm9sbEhlaWdodCAtIHBhZGRpbmdTaXplO1xuICAgIGlmIChtaW5Sb3dzICE9PSBudWxsKSB7XG4gICAgICBtaW5IZWlnaHQgPSBzaW5nbGVSb3dIZWlnaHQgKiBtaW5Sb3dzO1xuICAgICAgaWYgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIG1pbkhlaWdodCA9IG1pbkhlaWdodCArIHBhZGRpbmdTaXplICsgYm9yZGVyU2l6ZTtcbiAgICAgIH1cbiAgICAgIGhlaWdodCA9IE1hdGgubWF4KG1pbkhlaWdodCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgaWYgKG1heFJvd3MgIT09IG51bGwpIHtcbiAgICAgIG1heEhlaWdodCA9IHNpbmdsZVJvd0hlaWdodCAqIG1heFJvd3M7XG4gICAgICBpZiAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0ICsgcGFkZGluZ1NpemUgKyBib3JkZXJTaXplO1xuICAgICAgfVxuICAgICAgb3ZlcmZsb3dZID0gaGVpZ2h0ID4gbWF4SGVpZ2h0ID8gJycgOiAnaGlkZGVuJztcbiAgICAgIGhlaWdodCA9IE1hdGgubWluKG1heEhlaWdodCwgaGVpZ2h0KTtcbiAgICB9XG4gIH1cbiAgdmFyIHN0eWxlID0ge1xuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIG92ZXJmbG93WTogb3ZlcmZsb3dZLFxuICAgIHJlc2l6ZTogJ25vbmUnXG4gIH07XG4gIGlmIChtaW5IZWlnaHQpIHtcbiAgICBzdHlsZS5taW5IZWlnaHQgPSBtaW5IZWlnaHQ7XG4gIH1cbiAgaWYgKG1heEhlaWdodCkge1xuICAgIHN0eWxlLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJwcmVmaXhDbHNcIiwgXCJvblByZXNzRW50ZXJcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJ2YWx1ZVwiLCBcImF1dG9TaXplXCIsIFwib25SZXNpemVcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImRpc2FibGVkXCIsIFwib25DaGFuZ2VcIiwgXCJvbkludGVybmFsQXV0b1NpemVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSAncmMtcmVzaXplLW9ic2VydmVyJztcbmltcG9ydCB1c2VMYXlvdXRFZmZlY3QgZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlTGF5b3V0RWZmZWN0XCI7XG5pbXBvcnQgcmFmIGZyb20gXCJyYy11dGlsL2VzL3JhZlwiO1xuaW1wb3J0IHVzZU1lcmdlZFN0YXRlIGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZU1lcmdlZFN0YXRlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBjYWxjdWxhdGVBdXRvU2l6ZVN0eWxlIGZyb20gJy4vY2FsY3VsYXRlTm9kZUhlaWdodCc7XG52YXIgUkVTSVpFX1NUQVJUID0gMDtcbnZhciBSRVNJWkVfTUVBU1VSSU5HID0gMTtcbnZhciBSRVNJWkVfU1RBQkxFID0gMjtcbnZhciBSZXNpemFibGVUZXh0QXJlYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIHByZWZpeENscyA9IF9wcm9wcyRwcmVmaXhDbHMgPT09IHZvaWQgMCA/ICdyYy10ZXh0YXJlYScgOiBfcHJvcHMkcHJlZml4Q2xzLFxuICAgIG9uUHJlc3NFbnRlciA9IHByb3BzLm9uUHJlc3NFbnRlcixcbiAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICBhdXRvU2l6ZSA9IHByb3BzLmF1dG9TaXplLFxuICAgIG9uUmVzaXplID0gcHJvcHMub25SZXNpemUsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgIG9uSW50ZXJuYWxBdXRvU2l6ZSA9IHByb3BzLm9uSW50ZXJuYWxBdXRvU2l6ZSxcbiAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVmFsdWUgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIF91c2VNZXJnZWRTdGF0ZSA9IHVzZU1lcmdlZFN0YXRlKGRlZmF1bHRWYWx1ZSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcG9zdFN0YXRlOiBmdW5jdGlvbiBwb3N0U3RhdGUodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgIT09IG51bGwgJiYgdmFsICE9PSB2b2lkIDAgPyB2YWwgOiAnJztcbiAgICAgIH1cbiAgICB9KSxcbiAgICBfdXNlTWVyZ2VkU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZU1lcmdlZFN0YXRlLCAyKSxcbiAgICBtZXJnZWRWYWx1ZSA9IF91c2VNZXJnZWRTdGF0ZTJbMF0sXG4gICAgc2V0TWVyZ2VkVmFsdWUgPSBfdXNlTWVyZ2VkU3RhdGUyWzFdO1xuICB2YXIgb25JbnRlcm5hbENoYW5nZSA9IGZ1bmN0aW9uIG9uSW50ZXJuYWxDaGFuZ2UoZXZlbnQpIHtcbiAgICBzZXRNZXJnZWRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIG9uQ2hhbmdlID09PSBudWxsIHx8IG9uQ2hhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNoYW5nZShldmVudCk7XG4gIH07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFJlZiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIHRleHRhcmVhUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHRBcmVhOiB0ZXh0YXJlYVJlZi5jdXJyZW50XG4gICAgfTtcbiAgfSk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBBdXRvU2l6ZSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIF9SZWFjdCR1c2VNZW1vID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoYXV0b1NpemUgJiYgX3R5cGVvZihhdXRvU2l6ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbYXV0b1NpemUubWluUm93cywgYXV0b1NpemUubWF4Um93c107XG4gICAgICB9XG4gICAgICByZXR1cm4gW107XG4gICAgfSwgW2F1dG9TaXplXSksXG4gICAgX1JlYWN0JHVzZU1lbW8yID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZU1lbW8sIDIpLFxuICAgIG1pblJvd3MgPSBfUmVhY3QkdXNlTWVtbzJbMF0sXG4gICAgbWF4Um93cyA9IF9SZWFjdCR1c2VNZW1vMlsxXTtcbiAgdmFyIG5lZWRBdXRvU2l6ZSA9ICEhYXV0b1NpemU7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU2Nyb2xsID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMjE4NzBcbiAgdmFyIGZpeEZpcmVmb3hBdXRvU2Nyb2xsID0gZnVuY3Rpb24gZml4RmlyZWZveEF1dG9TY3JvbGwoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZGIGhhcyBidWcgd2l0aCBqdW1wIG9mIHNjcm9sbCB0byB0b3AuIFdlIGZvcmNlIGJhY2sgaGVyZS5cbiAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0ZXh0YXJlYVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHZhciBfdGV4dGFyZWFSZWYkY3VycmVudCA9IHRleHRhcmVhUmVmLmN1cnJlbnQsXG4gICAgICAgICAgc2VsZWN0aW9uU3RhcnQgPSBfdGV4dGFyZWFSZWYkY3VycmVudC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBzZWxlY3Rpb25FbmQgPSBfdGV4dGFyZWFSZWYkY3VycmVudC5zZWxlY3Rpb25FbmQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RleHRhcmVhUmVmJGN1cnJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAvLyBGaXggU2FmYXJpIGJ1ZyB3aGljaCBub3Qgcm9sbGJhY2sgd2hlbiBicmVhayBsaW5lXG4gICAgICAgIC8vIFRoaXMgbWFrZXMgQ2hpbmVzZSBJTUUgY2FuJ3QgaW5wdXQuIERvIG5vdCBmaXggdGhpc1xuICAgICAgICAvLyBjb25zdCB7IHZhbHVlOiB0bXBWYWx1ZSB9ID0gdGV4dGFyZWFSZWYuY3VycmVudDtcbiAgICAgICAgLy8gdGV4dGFyZWFSZWYuY3VycmVudC52YWx1ZSA9ICcnO1xuICAgICAgICAvLyB0ZXh0YXJlYVJlZi5jdXJyZW50LnZhbHVlID0gdG1wVmFsdWU7XG4gICAgICAgIHRleHRhcmVhUmVmLmN1cnJlbnQuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCk7XG4gICAgICAgIHRleHRhcmVhUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEZpeCBlcnJvciBpbiBDaHJvbWU6XG4gICAgICAvLyBGYWlsZWQgdG8gcmVhZCB0aGUgJ3NlbGVjdGlvblN0YXJ0JyBwcm9wZXJ0eSBmcm9tICdIVE1MSW5wdXRFbGVtZW50J1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMjExNzc0ODkvMzA0MDYwNVxuICAgIH1cbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZXNpemUgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoUkVTSVpFX1NUQUJMRSksXG4gICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgcmVzaXplU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldFJlc2l6ZVN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZSgpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICBhdXRvU2l6ZVN0eWxlID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICBzZXRBdXRvU2l6ZVN0eWxlID0gX1JlYWN0JHVzZVN0YXRlNFsxXTtcbiAgdmFyIHN0YXJ0UmVzaXplID0gZnVuY3Rpb24gc3RhcnRSZXNpemUoKSB7XG4gICAgc2V0UmVzaXplU3RhdGUoUkVTSVpFX1NUQVJUKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgb25JbnRlcm5hbEF1dG9TaXplID09PSBudWxsIHx8IG9uSW50ZXJuYWxBdXRvU2l6ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25JbnRlcm5hbEF1dG9TaXplKCk7XG4gICAgfVxuICB9O1xuICAvLyBDaGFuZ2UgdG8gdHJpZ2dlciByZXNpemUgbWVhc3VyZVxuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZWVkQXV0b1NpemUpIHtcbiAgICAgIHN0YXJ0UmVzaXplKCk7XG4gICAgfVxuICB9LCBbdmFsdWUsIG1pblJvd3MsIG1heFJvd3MsIG5lZWRBdXRvU2l6ZV0pO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXNpemVTdGF0ZSA9PT0gUkVTSVpFX1NUQVJUKSB7XG4gICAgICBzZXRSZXNpemVTdGF0ZShSRVNJWkVfTUVBU1VSSU5HKTtcbiAgICB9IGVsc2UgaWYgKHJlc2l6ZVN0YXRlID09PSBSRVNJWkVfTUVBU1VSSU5HKSB7XG4gICAgICB2YXIgdGV4dGFyZWFTdHlsZXMgPSBjYWxjdWxhdGVBdXRvU2l6ZVN0eWxlKHRleHRhcmVhUmVmLmN1cnJlbnQsIGZhbHNlLCBtaW5Sb3dzLCBtYXhSb3dzKTtcbiAgICAgIC8vIFNhZmFyaSBoYXMgYnVnIHRoYXQgdGV4dCB3aWxsIGtlZXAgYnJlYWsgbGluZSBvbiB0ZXh0IGN1dCB3aGVuIGl0J3MgcHJldiBpcyBicmVhayBsaW5lLlxuICAgICAgLy8gWm9tYmllSjogVGhpcyBub3Qgb2Z0ZW4gaGFwcGVuLiBTbyB3ZSBqdXN0IHNraXAgaXQuXG4gICAgICAvLyBjb25zdCB7IHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQsIHNjcm9sbFRvcCB9ID0gdGV4dGFyZWFSZWYuY3VycmVudDtcbiAgICAgIC8vIGNvbnN0IHsgdmFsdWU6IHRtcFZhbHVlIH0gPSB0ZXh0YXJlYVJlZi5jdXJyZW50O1xuICAgICAgLy8gdGV4dGFyZWFSZWYuY3VycmVudC52YWx1ZSA9ICcnO1xuICAgICAgLy8gdGV4dGFyZWFSZWYuY3VycmVudC52YWx1ZSA9IHRtcFZhbHVlO1xuICAgICAgLy8gaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRleHRhcmVhUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vICAgdGV4dGFyZWFSZWYuY3VycmVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAvLyAgIHRleHRhcmVhUmVmLmN1cnJlbnQuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCk7XG4gICAgICAvLyB9XG4gICAgICBzZXRSZXNpemVTdGF0ZShSRVNJWkVfU1RBQkxFKTtcbiAgICAgIHNldEF1dG9TaXplU3R5bGUodGV4dGFyZWFTdHlsZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXhGaXJlZm94QXV0b1Njcm9sbCgpO1xuICAgIH1cbiAgfSwgW3Jlc2l6ZVN0YXRlXSk7XG4gIC8vIFdlIGxvY2sgcmVzaXplIHRyaWdnZXIgYnkgcmFmIHRvIGF2b2lkIFNhZmFyaSB3YXJuaW5nXG4gIHZhciByZXNpemVSYWZSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGNsZWFuUmFmID0gZnVuY3Rpb24gY2xlYW5SYWYoKSB7XG4gICAgcmFmLmNhbmNlbChyZXNpemVSYWZSZWYuY3VycmVudCk7XG4gIH07XG4gIHZhciBvbkludGVybmFsUmVzaXplID0gZnVuY3Rpb24gb25JbnRlcm5hbFJlc2l6ZShzaXplKSB7XG4gICAgaWYgKHJlc2l6ZVN0YXRlID09PSBSRVNJWkVfU1RBQkxFKSB7XG4gICAgICBvblJlc2l6ZSA9PT0gbnVsbCB8fCBvblJlc2l6ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25SZXNpemUoc2l6ZSk7XG4gICAgICBpZiAoYXV0b1NpemUpIHtcbiAgICAgICAgY2xlYW5SYWYoKTtcbiAgICAgICAgcmVzaXplUmFmUmVmLmN1cnJlbnQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXJ0UmVzaXplKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2xlYW5SYWY7XG4gIH0sIFtdKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgbWVyZ2VkQXV0b1NpemVTdHlsZSA9IG5lZWRBdXRvU2l6ZSA/IGF1dG9TaXplU3R5bGUgOiBudWxsO1xuICB2YXIgbWVyZ2VkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwgbWVyZ2VkQXV0b1NpemVTdHlsZSk7XG4gIGlmIChyZXNpemVTdGF0ZSA9PT0gUkVTSVpFX1NUQVJUIHx8IHJlc2l6ZVN0YXRlID09PSBSRVNJWkVfTUVBU1VSSU5HKSB7XG4gICAgbWVyZ2VkU3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gICAgbWVyZ2VkU3R5bGUub3ZlcmZsb3dYID0gJ2hpZGRlbic7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc2l6ZU9ic2VydmVyLCB7XG4gICAgb25SZXNpemU6IG9uSW50ZXJuYWxSZXNpemUsXG4gICAgZGlzYWJsZWQ6ICEoYXV0b1NpemUgfHwgb25SZXNpemUpXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgIHJlZjogdGV4dGFyZWFSZWYsXG4gICAgc3R5bGU6IG1lcmdlZFN0eWxlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwcmVmaXhDbHMsIGNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRpc2FibGVkXCIpLCBkaXNhYmxlZCkpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICB2YWx1ZTogbWVyZ2VkVmFsdWUsXG4gICAgb25DaGFuZ2U6IG9uSW50ZXJuYWxDaGFuZ2VcbiAgfSkpKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgUmVzaXphYmxlVGV4dEFyZWE7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlc2l6YWJsZVRleHRBcmVhIGZyb20gJy4vUmVzaXphYmxlVGV4dEFyZWEnO1xudmFyIFRleHRBcmVhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUZXh0QXJlYSwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGV4dEFyZWEpO1xuICBmdW5jdGlvbiBUZXh0QXJlYShwcm9wcykge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dEFyZWEpO1xuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuICAgIF90aGlzLnJlc2l6YWJsZVRleHRBcmVhID0gdm9pZCAwO1xuICAgIF90aGlzLmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucmVzaXphYmxlVGV4dEFyZWEudGV4dEFyZWEuZm9jdXMoKTtcbiAgICB9O1xuICAgIF90aGlzLnNhdmVUZXh0QXJlYSA9IGZ1bmN0aW9uIChyZXNpemFibGVUZXh0QXJlYSkge1xuICAgICAgX3RoaXMucmVzaXphYmxlVGV4dEFyZWEgPSByZXNpemFibGVUZXh0QXJlYTtcbiAgICB9O1xuICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcbiAgICAgIF90aGlzLnNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZShlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgIG9uUHJlc3NFbnRlciA9IF90aGlzJHByb3BzLm9uUHJlc3NFbnRlcixcbiAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMub25LZXlEb3duO1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgb25QcmVzc0VudGVyKSB7XG4gICAgICAgIG9uUHJlc3NFbnRlcihlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvbktleURvd24pIHtcbiAgICAgICAgb25LZXlEb3duKGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHByb3BzLnZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wcy52YWx1ZSA9PT0gbnVsbCA/IHByb3BzLmRlZmF1bHRWYWx1ZSA6IHByb3BzLnZhbHVlO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKFRleHRBcmVhLCBbe1xuICAgIGtleTogXCJzZXRWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICghKCd2YWx1ZScgaW4gdGhpcy5wcm9wcykpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYmx1clwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgdGhpcy5yZXNpemFibGVUZXh0QXJlYS50ZXh0QXJlYS5ibHVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzaXphYmxlVGV4dEFyZWEsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICByZWY6IHRoaXMuc2F2ZVRleHRBcmVhXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICgndmFsdWUnIGluIG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBuZXh0UHJvcHMudmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGV4dEFyZWE7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5leHBvcnQgeyBSZXNpemFibGVUZXh0QXJlYSB9O1xuZXhwb3J0IGRlZmF1bHQgVGV4dEFyZWE7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgSW5mb0NpcmNsZUZpbGxlZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTMyIDY2NGMwIDQuNC0zLjYgOC04IDhoLTQ4Yy00LjQgMC04LTMuNi04LThWNDU2YzAtNC40IDMuNi04IDgtOGg0OGM0LjQgMCA4IDMuNiA4IDh2Mjcyem0tMzItMzQ0YTQ4LjAxIDQ4LjAxIDAgMDEwLTk2IDQ4LjAxIDQ4LjAxIDAgMDEwIDk2elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiaW5mby1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnQgZGVmYXVsdCBJbmZvQ2lyY2xlRmlsbGVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW5mb0NpcmNsZUZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9JbmZvQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgSW5mb0NpcmNsZUZpbGxlZCA9IGZ1bmN0aW9uIEluZm9DaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEluZm9DaXJjbGVGaWxsZWRTdmdcbiAgfSkpO1xufTtcbkluZm9DaXJjbGVGaWxsZWQuZGlzcGxheU5hbWUgPSAnSW5mb0NpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbmZvQ2lyY2xlRmlsbGVkKTsiLCJmdW5jdGlvbiB0KHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT10JiYxPT09dC5ub2RlVHlwZX1mdW5jdGlvbiBlKHQsZSl7cmV0dXJuKCFlfHxcImhpZGRlblwiIT09dCkmJlwidmlzaWJsZVwiIT09dCYmXCJjbGlwXCIhPT10fWZ1bmN0aW9uIG4odCxuKXtpZih0LmNsaWVudEhlaWdodDx0LnNjcm9sbEhlaWdodHx8dC5jbGllbnRXaWR0aDx0LnNjcm9sbFdpZHRoKXt2YXIgcj1nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCk7cmV0dXJuIGUoci5vdmVyZmxvd1ksbil8fGUoci5vdmVyZmxvd1gsbil8fGZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKHQpe2lmKCF0Lm93bmVyRG9jdW1lbnR8fCF0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpcmV0dXJuIG51bGw7dHJ5e3JldHVybiB0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZnJhbWVFbGVtZW50fWNhdGNoKHQpe3JldHVybiBudWxsfX0odCk7cmV0dXJuISFlJiYoZS5jbGllbnRIZWlnaHQ8dC5zY3JvbGxIZWlnaHR8fGUuY2xpZW50V2lkdGg8dC5zY3JvbGxXaWR0aCl9KHQpfXJldHVybiExfWZ1bmN0aW9uIHIodCxlLG4scixpLG8sbCxkKXtyZXR1cm4gbzx0JiZsPmV8fG8+dCYmbDxlPzA6bzw9dCYmZDw9bnx8bD49ZSYmZD49bj9vLXQtcjpsPmUmJmQ8bnx8bzx0JiZkPm4/bC1lK2k6MH12YXIgaT1mdW5jdGlvbihlLGkpe3ZhciBvPXdpbmRvdyxsPWkuc2Nyb2xsTW9kZSxkPWkuYmxvY2ssZj1pLmlubGluZSxoPWkuYm91bmRhcnksdT1pLnNraXBPdmVyZmxvd0hpZGRlbkVsZW1lbnRzLHM9XCJmdW5jdGlvblwiPT10eXBlb2YgaD9oOmZ1bmN0aW9uKHQpe3JldHVybiB0IT09aH07aWYoIXQoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgdGFyZ2V0XCIpO2Zvcih2YXIgYSxjLGc9ZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudHx8ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHA9W10sbT1lO3QobSkmJnMobSk7KXtpZigobT1udWxsPT0oYz0oYT1tKS5wYXJlbnRFbGVtZW50KT9hLmdldFJvb3ROb2RlKCkuaG9zdHx8bnVsbDpjKT09PWcpe3AucHVzaChtKTticmVha31udWxsIT1tJiZtPT09ZG9jdW1lbnQuYm9keSYmbihtKSYmIW4oZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KXx8bnVsbCE9bSYmbihtLHUpJiZwLnB1c2gobSl9Zm9yKHZhciB3PW8udmlzdWFsVmlld3BvcnQ/by52aXN1YWxWaWV3cG9ydC53aWR0aDppbm5lcldpZHRoLHY9by52aXN1YWxWaWV3cG9ydD9vLnZpc3VhbFZpZXdwb3J0LmhlaWdodDppbm5lckhlaWdodCxXPXdpbmRvdy5zY3JvbGxYfHxwYWdlWE9mZnNldCxIPXdpbmRvdy5zY3JvbGxZfHxwYWdlWU9mZnNldCxiPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkseT1iLmhlaWdodCxFPWIud2lkdGgsTT1iLnRvcCxWPWIucmlnaHQseD1iLmJvdHRvbSxJPWIubGVmdCxDPVwic3RhcnRcIj09PWR8fFwibmVhcmVzdFwiPT09ZD9NOlwiZW5kXCI9PT1kP3g6TSt5LzIsUj1cImNlbnRlclwiPT09Zj9JK0UvMjpcImVuZFwiPT09Zj9WOkksVD1bXSxrPTA7azxwLmxlbmd0aDtrKyspe3ZhciBCPXBba10sRD1CLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLE89RC5oZWlnaHQsWD1ELndpZHRoLFk9RC50b3AsTD1ELnJpZ2h0LFM9RC5ib3R0b20saj1ELmxlZnQ7aWYoXCJpZi1uZWVkZWRcIj09PWwmJk0+PTAmJkk+PTAmJng8PXYmJlY8PXcmJk0+PVkmJng8PVMmJkk+PWomJlY8PUwpcmV0dXJuIFQ7dmFyIE49Z2V0Q29tcHV0ZWRTdHlsZShCKSxxPXBhcnNlSW50KE4uYm9yZGVyTGVmdFdpZHRoLDEwKSx6PXBhcnNlSW50KE4uYm9yZGVyVG9wV2lkdGgsMTApLEE9cGFyc2VJbnQoTi5ib3JkZXJSaWdodFdpZHRoLDEwKSxGPXBhcnNlSW50KE4uYm9yZGVyQm90dG9tV2lkdGgsMTApLEc9MCxKPTAsSz1cIm9mZnNldFdpZHRoXCJpbiBCP0Iub2Zmc2V0V2lkdGgtQi5jbGllbnRXaWR0aC1xLUE6MCxQPVwib2Zmc2V0SGVpZ2h0XCJpbiBCP0Iub2Zmc2V0SGVpZ2h0LUIuY2xpZW50SGVpZ2h0LXotRjowLFE9XCJvZmZzZXRXaWR0aFwiaW4gQj8wPT09Qi5vZmZzZXRXaWR0aD8wOlgvQi5vZmZzZXRXaWR0aDowLFU9XCJvZmZzZXRIZWlnaHRcImluIEI/MD09PUIub2Zmc2V0SGVpZ2h0PzA6Ty9CLm9mZnNldEhlaWdodDowO2lmKGc9PT1CKUc9XCJzdGFydFwiPT09ZD9DOlwiZW5kXCI9PT1kP0MtdjpcIm5lYXJlc3RcIj09PWQ/cihILEgrdix2LHosRixIK0MsSCtDK3kseSk6Qy12LzIsSj1cInN0YXJ0XCI9PT1mP1I6XCJjZW50ZXJcIj09PWY/Ui13LzI6XCJlbmRcIj09PWY/Ui13OnIoVyxXK3csdyxxLEEsVytSLFcrUitFLEUpLEc9TWF0aC5tYXgoMCxHK0gpLEo9TWF0aC5tYXgoMCxKK1cpO2Vsc2V7Rz1cInN0YXJ0XCI9PT1kP0MtWS16OlwiZW5kXCI9PT1kP0MtUytGK1A6XCJuZWFyZXN0XCI9PT1kP3IoWSxTLE8seixGK1AsQyxDK3kseSk6Qy0oWStPLzIpK1AvMixKPVwic3RhcnRcIj09PWY/Ui1qLXE6XCJjZW50ZXJcIj09PWY/Ui0oaitYLzIpK0svMjpcImVuZFwiPT09Zj9SLUwrQStLOnIoaixMLFgscSxBK0ssUixSK0UsRSk7dmFyIFo9Qi5zY3JvbGxMZWZ0LCQ9Qi5zY3JvbGxUb3A7Qys9JC0oRz1NYXRoLm1heCgwLE1hdGgubWluKCQrRy9VLEIuc2Nyb2xsSGVpZ2h0LU8vVStQKSkpLFIrPVotKEo9TWF0aC5tYXgoMCxNYXRoLm1pbihaK0ovUSxCLnNjcm9sbFdpZHRoLVgvUStLKSkpfVQucHVzaCh7ZWw6Qix0b3A6RyxsZWZ0Okp9KX1yZXR1cm4gVH07ZXhwb3J0e2kgYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJpbXBvcnQgY29tcHV0ZSBmcm9tICdjb21wdXRlLXNjcm9sbC1pbnRvLXZpZXcnO1xuZnVuY3Rpb24gaXNPcHRpb25zT2JqZWN0KG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT09IE9iamVjdChvcHRpb25zKSAmJiBPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggIT09IDA7XG59XG5mdW5jdGlvbiBkZWZhdWx0QmVoYXZpb3IoYWN0aW9ucywgYmVoYXZpb3IpIHtcbiAgaWYgKGJlaGF2aW9yID09PSB2b2lkIDApIHtcbiAgICBiZWhhdmlvciA9ICdhdXRvJztcbiAgfVxuICB2YXIgY2FuU21vb3RoU2Nyb2xsID0gKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuYm9keS5zdHlsZSk7XG4gIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBlbCA9IF9yZWYuZWwsXG4gICAgICB0b3AgPSBfcmVmLnRvcCxcbiAgICAgIGxlZnQgPSBfcmVmLmxlZnQ7XG4gICAgaWYgKGVsLnNjcm9sbCAmJiBjYW5TbW9vdGhTY3JvbGwpIHtcbiAgICAgIGVsLnNjcm9sbCh7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICBiZWhhdmlvcjogYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICBibG9jazogJ2VuZCcsXG4gICAgICBpbmxpbmU6ICduZWFyZXN0J1xuICAgIH07XG4gIH1cbiAgaWYgKGlzT3B0aW9uc09iamVjdChvcHRpb25zKSkge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG4gIHJldHVybiB7XG4gICAgYmxvY2s6ICdzdGFydCcsXG4gICAgaW5saW5lOiAnbmVhcmVzdCdcbiAgfTtcbn1cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KHRhcmdldCwgb3B0aW9ucykge1xuICB2YXIgaXNUYXJnZXRBdHRhY2hlZCA9IHRhcmdldC5pc0Nvbm5lY3RlZCB8fCB0YXJnZXQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGFyZ2V0KTtcbiAgaWYgKGlzT3B0aW9uc09iamVjdChvcHRpb25zKSAmJiB0eXBlb2Ygb3B0aW9ucy5iZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRpb25zLmJlaGF2aW9yKGlzVGFyZ2V0QXR0YWNoZWQgPyBjb21wdXRlKHRhcmdldCwgb3B0aW9ucykgOiBbXSk7XG4gIH1cbiAgaWYgKCFpc1RhcmdldEF0dGFjaGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjb21wdXRlT3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucyk7XG4gIHJldHVybiBkZWZhdWx0QmVoYXZpb3IoY29tcHV0ZSh0YXJnZXQsIGNvbXB1dGVPcHRpb25zKSwgY29tcHV0ZU9wdGlvbnMuYmVoYXZpb3IpO1xufVxuZXhwb3J0IGRlZmF1bHQgc2Nyb2xsSW50b1ZpZXc7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG5cbiAgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3QuYmluZCgpO1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG4vKiBlc2xpbnQgbm8tY29uc29sZTowICovXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbnZhciB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZygpIHt9OyAvLyBkb24ndCBwcmludCB3YXJuaW5nIG1lc3NhZ2Ugd2hlbiBpbiBwcm9kdWN0aW9uIGVudiBvciBub2RlIHJ1bnRpbWVcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcodHlwZSwgZXJyb3JzKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4gJiYgdHlwZW9mIEFTWU5DX1ZBTElEQVRPUl9OT19XQVJOSU5HID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGVycm9ycy5ldmVyeShmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGUgPT09ICdzdHJpbmcnO1xuICAgICAgfSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHR5cGUsIGVycm9ycyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RmllbGRzRXJyb3IoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzIHx8ICFlcnJvcnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgdmFyIGZpZWxkcyA9IHt9O1xuICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB2YXIgZmllbGQgPSBlcnJvci5maWVsZDtcbiAgICBmaWVsZHNbZmllbGRdID0gZmllbGRzW2ZpZWxkXSB8fCBbXTtcbiAgICBmaWVsZHNbZmllbGRdLnB1c2goZXJyb3IpO1xuICB9KTtcbiAgcmV0dXJuIGZpZWxkcztcbn1cbmZ1bmN0aW9uIGZvcm1hdCh0ZW1wbGF0ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcblxuICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc3RyID0gdGVtcGxhdGUucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7XG4gICAgICBpZiAoeCA9PT0gJyUlJykge1xuICAgICAgICByZXR1cm4gJyUnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA+PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoeCkge1xuICAgICAgICBjYXNlICclcyc6XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuXG4gICAgICAgIGNhc2UgJyVkJzpcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG5cbiAgICAgICAgY2FzZSAnJWonOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHJldHVybiB0ZW1wbGF0ZTtcbn1cblxuZnVuY3Rpb24gaXNOYXRpdmVTdHJpbmdUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICd1cmwnIHx8IHR5cGUgPT09ICdoZXgnIHx8IHR5cGUgPT09ICdlbWFpbCcgfHwgdHlwZSA9PT0gJ2RhdGUnIHx8IHR5cGUgPT09ICdwYXR0ZXJuJztcbn1cblxuZnVuY3Rpb24gaXNFbXB0eVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ2FycmF5JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiAhdmFsdWUubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNOYXRpdmVTdHJpbmdUeXBlKHR5cGUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIXZhbHVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFzeW5jUGFyYWxsZWxBcnJheShhcnIsIGZ1bmMsIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHRzID0gW107XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvdW50KGVycm9ycykge1xuICAgIHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCBlcnJvcnMgfHwgW10pO1xuICAgIHRvdGFsKys7XG5cbiAgICBpZiAodG90YWwgPT09IGFyckxlbmd0aCkge1xuICAgICAgY2FsbGJhY2socmVzdWx0cyk7XG4gICAgfVxuICB9XG5cbiAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICBmdW5jKGEsIGNvdW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzeW5jU2VyaWFsQXJyYXkoYXJyLCBmdW5jLCBjYWxsYmFjaykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBmdW5jdGlvbiBuZXh0KGVycm9ycykge1xuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgY2FsbGJhY2soZXJyb3JzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3JpZ2luYWwgPSBpbmRleDtcbiAgICBpbmRleCA9IGluZGV4ICsgMTtcblxuICAgIGlmIChvcmlnaW5hbCA8IGFyckxlbmd0aCkge1xuICAgICAgZnVuYyhhcnJbb3JpZ2luYWxdLCBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soW10pO1xuICAgIH1cbiAgfVxuXG4gIG5leHQoW10pO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuT2JqQXJyKG9iakFycikge1xuICB2YXIgcmV0ID0gW107XG4gIE9iamVjdC5rZXlzKG9iakFycikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIHJldC5wdXNoLmFwcGx5KHJldCwgb2JqQXJyW2tdIHx8IFtdKTtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbnZhciBBc3luY1ZhbGlkYXRpb25FcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0c0xvb3NlKEFzeW5jVmFsaWRhdGlvbkVycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIEFzeW5jVmFsaWRhdGlvbkVycm9yKGVycm9ycywgZmllbGRzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRXJyb3IuY2FsbCh0aGlzLCAnQXN5bmMgVmFsaWRhdGlvbiBFcnJvcicpIHx8IHRoaXM7XG4gICAgX3RoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIF90aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gQXN5bmNWYWxpZGF0aW9uRXJyb3I7XG59KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuZnVuY3Rpb24gYXN5bmNNYXAob2JqQXJyLCBvcHRpb24sIGZ1bmMsIGNhbGxiYWNrLCBzb3VyY2UpIHtcbiAgaWYgKG9wdGlvbi5maXJzdCkge1xuICAgIHZhciBfcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3JzKTtcbiAgICAgICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPyByZWplY3QobmV3IEFzeW5jVmFsaWRhdGlvbkVycm9yKGVycm9ycywgY29udmVydEZpZWxkc0Vycm9yKGVycm9ycykpKSA6IHJlc29sdmUoc291cmNlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmbGF0dGVuQXJyID0gZmxhdHRlbk9iakFycihvYmpBcnIpO1xuICAgICAgYXN5bmNTZXJpYWxBcnJheShmbGF0dGVuQXJyLCBmdW5jLCBuZXh0KTtcbiAgICB9KTtcblxuICAgIF9wZW5kaW5nW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9wZW5kaW5nO1xuICB9XG5cbiAgdmFyIGZpcnN0RmllbGRzID0gb3B0aW9uLmZpcnN0RmllbGRzID09PSB0cnVlID8gT2JqZWN0LmtleXMob2JqQXJyKSA6IG9wdGlvbi5maXJzdEZpZWxkcyB8fCBbXTtcbiAgdmFyIG9iakFycktleXMgPSBPYmplY3Qua2V5cyhvYmpBcnIpO1xuICB2YXIgb2JqQXJyTGVuZ3RoID0gb2JqQXJyS2V5cy5sZW5ndGg7XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciByZXN1bHRzID0gW107XG4gIHZhciBwZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICAgIHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCBlcnJvcnMpO1xuICAgICAgdG90YWwrKztcblxuICAgICAgaWYgKHRvdGFsID09PSBvYmpBcnJMZW5ndGgpIHtcbiAgICAgICAgY2FsbGJhY2socmVzdWx0cyk7XG4gICAgICAgIHJldHVybiByZXN1bHRzLmxlbmd0aCA/IHJlamVjdChuZXcgQXN5bmNWYWxpZGF0aW9uRXJyb3IocmVzdWx0cywgY29udmVydEZpZWxkc0Vycm9yKHJlc3VsdHMpKSkgOiByZXNvbHZlKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghb2JqQXJyS2V5cy5sZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgICAgcmVzb2x2ZShzb3VyY2UpO1xuICAgIH1cblxuICAgIG9iakFycktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgYXJyID0gb2JqQXJyW2tleV07XG5cbiAgICAgIGlmIChmaXJzdEZpZWxkcy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICAgIGFzeW5jU2VyaWFsQXJyYXkoYXJyLCBmdW5jLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzeW5jUGFyYWxsZWxBcnJheShhcnIsIGZ1bmMsIG5leHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcGVuZGluZ1tcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xuICByZXR1cm4gcGVuZGluZztcbn1cblxuZnVuY3Rpb24gaXNFcnJvck9iaihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAmJiBvYmoubWVzc2FnZSAhPT0gdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodmFsdWUsIHBhdGgpIHtcbiAgdmFyIHYgPSB2YWx1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodiA9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cblxuICAgIHYgPSB2W3BhdGhbaV1dO1xuICB9XG5cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGNvbXBsZW1lbnRFcnJvcihydWxlLCBzb3VyY2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvZSkge1xuICAgIHZhciBmaWVsZFZhbHVlO1xuXG4gICAgaWYgKHJ1bGUuZnVsbEZpZWxkcykge1xuICAgICAgZmllbGRWYWx1ZSA9IGdldFZhbHVlKHNvdXJjZSwgcnVsZS5mdWxsRmllbGRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmllbGRWYWx1ZSA9IHNvdXJjZVtvZS5maWVsZCB8fCBydWxlLmZ1bGxGaWVsZF07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JPYmoob2UpKSB7XG4gICAgICBvZS5maWVsZCA9IG9lLmZpZWxkIHx8IHJ1bGUuZnVsbEZpZWxkO1xuICAgICAgb2UuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gICAgICByZXR1cm4gb2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IHR5cGVvZiBvZSA9PT0gJ2Z1bmN0aW9uJyA/IG9lKCkgOiBvZSxcbiAgICAgIGZpZWxkVmFsdWU6IGZpZWxkVmFsdWUsXG4gICAgICBmaWVsZDogb2UuZmllbGQgfHwgcnVsZS5mdWxsRmllbGRcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gZGVlcE1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIGlmIChzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBzIGluIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShzKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vbc107XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldFtzXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0YXJnZXRbc10gPSBfZXh0ZW5kcyh7fSwgdGFyZ2V0W3NdLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W3NdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgcmVxdWlyZWQkMSA9IGZ1bmN0aW9uIHJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgdHlwZSkge1xuICBpZiAocnVsZS5yZXF1aXJlZCAmJiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKSB8fCBpc0VtcHR5VmFsdWUodmFsdWUsIHR5cGUgfHwgcnVsZS50eXBlKSkpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5mdWxsRmllbGQpKTtcbiAgfVxufTtcblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyB3aGl0ZXNwYWNlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbnZhciB3aGl0ZXNwYWNlID0gZnVuY3Rpb24gd2hpdGVzcGFjZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKC9eXFxzKyQvLnRlc3QodmFsdWUpIHx8IHZhbHVlID09PSAnJykge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLndoaXRlc3BhY2UsIHJ1bGUuZnVsbEZpZWxkKSk7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXZ2YS91cmwtcmVnZXgvYmxvYi9tYXN0ZXIvaW5kZXguanNcbnZhciB1cmxSZWc7XG52YXIgZ2V0VXJsUmVnZXggPSAoZnVuY3Rpb24gKCkge1xuICBpZiAodXJsUmVnKSB7XG4gICAgcmV0dXJuIHVybFJlZztcbiAgfVxuXG4gIHZhciB3b3JkID0gJ1thLWZBLUZcXFxcZDpdJztcblxuICB2YXIgYiA9IGZ1bmN0aW9uIGIob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZUJvdW5kYXJpZXMgPyBcIig/Oig/PD1cXFxcc3xeKSg/PVwiICsgd29yZCArIFwiKXwoPzw9XCIgKyB3b3JkICsgXCIpKD89XFxcXHN8JCkpXCIgOiAnJztcbiAgfTtcblxuICB2YXIgdjQgPSAnKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M30nO1xuICB2YXIgdjZzZWcgPSAnW2EtZkEtRlxcXFxkXXsxLDR9JztcbiAgdmFyIHY2ID0gKFwiXFxuKD86XFxuKD86XCIgKyB2NnNlZyArIFwiOil7N30oPzpcIiArIHY2c2VnICsgXCJ8Oil8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMToyOjM6NDo1OjY6Nzo6ICAxOjI6Mzo0OjU6Njo3OjhcXG4oPzpcIiArIHY2c2VnICsgXCI6KXs2fSg/OlwiICsgdjQgKyBcInw6XCIgKyB2NnNlZyArIFwifDopfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMToyOjM6NDo1OjY6OiAgICAxOjI6Mzo0OjU6Njo6OCAgIDE6MjozOjQ6NTo2Ojo4ICAxOjI6Mzo0OjU6Njo6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezV9KD86OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDJ9fDopfCAgICAgICAgICAgICAgICAgICAvLyAxOjI6Mzo0OjU6OiAgICAgIDE6MjozOjQ6NTo6Nzo4ICAgMToyOjM6NDo1Ojo4ICAgIDE6MjozOjQ6NTo6NzoxLjIuMy40XFxuKD86XCIgKyB2NnNlZyArIFwiOil7NH0oPzooPzo6XCIgKyB2NnNlZyArIFwiKXswLDF9OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDN9fDopfCAvLyAxOjI6Mzo0OjogICAgICAgIDE6MjozOjQ6OjY6Nzo4ICAgMToyOjM6NDo6OCAgICAgIDE6MjozOjQ6OjY6NzoxLjIuMy40XFxuKD86XCIgKyB2NnNlZyArIFwiOil7M30oPzooPzo6XCIgKyB2NnNlZyArIFwiKXswLDJ9OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDR9fDopfCAvLyAxOjI6Mzo6ICAgICAgICAgIDE6MjozOjo1OjY6Nzo4ICAgMToyOjM6OjggICAgICAgIDE6MjozOjo1OjY6NzoxLjIuMy40XFxuKD86XCIgKyB2NnNlZyArIFwiOil7Mn0oPzooPzo6XCIgKyB2NnNlZyArIFwiKXswLDN9OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDV9fDopfCAvLyAxOjI6OiAgICAgICAgICAgIDE6Mjo6NDo1OjY6Nzo4ICAgMToyOjo4ICAgICAgICAgIDE6Mjo6NDo1OjY6NzoxLjIuMy40XFxuKD86XCIgKyB2NnNlZyArIFwiOil7MX0oPzooPzo6XCIgKyB2NnNlZyArIFwiKXswLDR9OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDZ9fDopfCAvLyAxOjogICAgICAgICAgICAgIDE6OjM6NDo1OjY6Nzo4ICAgMTo6OCAgICAgICAgICAgIDE6OjM6NDo1OjY6NzoxLjIuMy40XFxuKD86Oig/Oig/OjpcIiArIHY2c2VnICsgXCIpezAsNX06XCIgKyB2NCArIFwifCg/OjpcIiArIHY2c2VnICsgXCIpezEsN318OikpICAgICAgICAgICAgIC8vIDo6MjozOjQ6NTo2Ojc6OCAgOjoyOjM6NDo1OjY6Nzo4ICA6OjggICAgICAgICAgICAgOjoxLjIuMy40XFxuKSg/OiVbMC05YS16QS1aXXsxLH0pPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICVldGgwICAgICAgICAgICAgJTFcXG5cIikucmVwbGFjZSgvXFxzKlxcL1xcLy4qJC9nbSwgJycpLnJlcGxhY2UoL1xcbi9nLCAnJykudHJpbSgpOyAvLyBQcmUtY29tcGlsZSBvbmx5IHRoZSBleGFjdCByZWdleGVzIGJlY2F1c2UgYWRkaW5nIGEgZ2xvYmFsIGZsYWcgbWFrZSByZWdleGVzIHN0YXRlZnVsXG5cbiAgdmFyIHY0NkV4YWN0ID0gbmV3IFJlZ0V4cChcIig/Ol5cIiArIHY0ICsgXCIkKXwoPzpeXCIgKyB2NiArIFwiJClcIik7XG4gIHZhciB2NGV4YWN0ID0gbmV3IFJlZ0V4cChcIl5cIiArIHY0ICsgXCIkXCIpO1xuICB2YXIgdjZleGFjdCA9IG5ldyBSZWdFeHAoXCJeXCIgKyB2NiArIFwiJFwiKTtcblxuICB2YXIgaXAgPSBmdW5jdGlvbiBpcChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdCA/IHY0NkV4YWN0IDogbmV3IFJlZ0V4cChcIig/OlwiICsgYihvcHRpb25zKSArIHY0ICsgYihvcHRpb25zKSArIFwiKXwoPzpcIiArIGIob3B0aW9ucykgKyB2NiArIGIob3B0aW9ucykgKyBcIilcIiwgJ2cnKTtcbiAgfTtcblxuICBpcC52NCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdCA/IHY0ZXhhY3QgOiBuZXcgUmVnRXhwKFwiXCIgKyBiKG9wdGlvbnMpICsgdjQgKyBiKG9wdGlvbnMpLCAnZycpO1xuICB9O1xuXG4gIGlwLnY2ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLmV4YWN0ID8gdjZleGFjdCA6IG5ldyBSZWdFeHAoXCJcIiArIGIob3B0aW9ucykgKyB2NiArIGIob3B0aW9ucyksICdnJyk7XG4gIH07XG5cbiAgdmFyIHByb3RvY29sID0gXCIoPzooPzpbYS16XSs6KT8vLylcIjtcbiAgdmFyIGF1dGggPSAnKD86XFxcXFMrKD86OlxcXFxTKik/QCk/JztcbiAgdmFyIGlwdjQgPSBpcC52NCgpLnNvdXJjZTtcbiAgdmFyIGlwdjYgPSBpcC52NigpLnNvdXJjZTtcbiAgdmFyIGhvc3QgPSBcIig/Oig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XVstX10qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKVwiO1xuICB2YXIgZG9tYWluID0gXCIoPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XS0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSpcIjtcbiAgdmFyIHRsZCA9IFwiKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZl17Mix9KSlcIjtcbiAgdmFyIHBvcnQgPSAnKD86OlxcXFxkezIsNX0pPyc7XG4gIHZhciBwYXRoID0gJyg/OlsvPyNdW15cXFxcc1wiXSopPyc7XG4gIHZhciByZWdleCA9IFwiKD86XCIgKyBwcm90b2NvbCArIFwifHd3d1xcXFwuKVwiICsgYXV0aCArIFwiKD86bG9jYWxob3N0fFwiICsgaXB2NCArIFwifFwiICsgaXB2NiArIFwifFwiICsgaG9zdCArIGRvbWFpbiArIHRsZCArIFwiKVwiICsgcG9ydCArIHBhdGg7XG4gIHVybFJlZyA9IG5ldyBSZWdFeHAoXCIoPzpeXCIgKyByZWdleCArIFwiJClcIiwgJ2knKTtcbiAgcmV0dXJuIHVybFJlZztcbn0pO1xuXG4vKiBlc2xpbnQgbWF4LWxlbjowICovXG5cbnZhciBwYXR0ZXJuJDIgPSB7XG4gIC8vIGh0dHA6Ly9lbWFpbHJlZ2V4LmNvbS9cbiAgZW1haWw6IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOVxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0rXFwuKStbYS16QS1aXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXXsyLH0pKSQvLFxuICAvLyB1cmw6IG5ldyBSZWdFeHAoXG4gIC8vICAgJ14oPyFtYWlsdG86KSg/Oig/Omh0dHB8aHR0cHN8ZnRwKTovL3wvLykoPzpcXFxcUysoPzo6XFxcXFMqKT9AKT8oPzooPzooPzpbMS05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAxXVxcXFxkfDIyWzAtM10pKD86XFxcXC4oPzoxP1xcXFxkezEsMn18MlswLTRdXFxcXGR8MjVbMC01XSkpezJ9KD86XFxcXC4oPzpbMC05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAtNF1cXFxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKy0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSg/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKy0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSooPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmXXsyLH0pKSl8bG9jYWxob3N0KSg/OjpcXFxcZHsyLDV9KT8oPzooL3xcXFxcP3wjKVteXFxcXHNdKik/JCcsXG4gIC8vICAgJ2knLFxuICAvLyApLFxuICBoZXg6IC9eIz8oW2EtZjAtOV17Nn18W2EtZjAtOV17M30pJC9pXG59O1xudmFyIHR5cGVzID0ge1xuICBpbnRlZ2VyOiBmdW5jdGlvbiBpbnRlZ2VyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVzLm51bWJlcih2YWx1ZSkgJiYgcGFyc2VJbnQodmFsdWUsIDEwKSA9PT0gdmFsdWU7XG4gIH0sXG4gIFwiZmxvYXRcIjogZnVuY3Rpb24gZmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZXMubnVtYmVyKHZhbHVlKSAmJiAhdHlwZXMuaW50ZWdlcih2YWx1ZSk7XG4gIH0sXG4gIGFycmF5OiBmdW5jdGlvbiBhcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSxcbiAgcmVnZXhwOiBmdW5jdGlvbiByZWdleHAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gISFuZXcgUmVnRXhwKHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBkYXRlOiBmdW5jdGlvbiBkYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5nZXRUaW1lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS5nZXRNb250aCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuZ2V0WWVhciA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNOYU4odmFsdWUuZ2V0VGltZSgpKTtcbiAgfSxcbiAgbnVtYmVyOiBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIH0sXG4gIG9iamVjdDogZnVuY3Rpb24gb2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIXR5cGVzLmFycmF5KHZhbHVlKTtcbiAgfSxcbiAgbWV0aG9kOiBmdW5jdGlvbiBtZXRob2QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBlbWFpbDogZnVuY3Rpb24gZW1haWwodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPD0gMzIwICYmICEhdmFsdWUubWF0Y2gocGF0dGVybiQyLmVtYWlsKTtcbiAgfSxcbiAgdXJsOiBmdW5jdGlvbiB1cmwodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPD0gMjA0OCAmJiAhIXZhbHVlLm1hdGNoKGdldFVybFJlZ2V4KCkpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEhdmFsdWUubWF0Y2gocGF0dGVybiQyLmhleCk7XG4gIH1cbn07XG5cbnZhciB0eXBlJDEgPSBmdW5jdGlvbiB0eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAocnVsZS5yZXF1aXJlZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVxdWlyZWQkMShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjdXN0b20gPSBbJ2ludGVnZXInLCAnZmxvYXQnLCAnYXJyYXknLCAncmVnZXhwJywgJ29iamVjdCcsICdtZXRob2QnLCAnZW1haWwnLCAnbnVtYmVyJywgJ2RhdGUnLCAndXJsJywgJ2hleCddO1xuICB2YXIgcnVsZVR5cGUgPSBydWxlLnR5cGU7XG5cbiAgaWYgKGN1c3RvbS5pbmRleE9mKHJ1bGVUeXBlKSA+IC0xKSB7XG4gICAgaWYgKCF0eXBlc1tydWxlVHlwZV0odmFsdWUpKSB7XG4gICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy50eXBlc1tydWxlVHlwZV0sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLnR5cGUpKTtcbiAgICB9IC8vIHN0cmFpZ2h0IHR5cGVvZiBjaGVja1xuXG4gIH0gZWxzZSBpZiAocnVsZVR5cGUgJiYgdHlwZW9mIHZhbHVlICE9PSBydWxlLnR5cGUpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy50eXBlc1tydWxlVHlwZV0sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLnR5cGUpKTtcbiAgfVxufTtcblxudmFyIHJhbmdlID0gZnVuY3Rpb24gcmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIHZhciBsZW4gPSB0eXBlb2YgcnVsZS5sZW4gPT09ICdudW1iZXInO1xuICB2YXIgbWluID0gdHlwZW9mIHJ1bGUubWluID09PSAnbnVtYmVyJztcbiAgdmFyIG1heCA9IHR5cGVvZiBydWxlLm1heCA9PT0gJ251bWJlcic7IC8vIOato+WImeWMuemFjeeggeeCueiMg+WbtOS7jlUrMDEwMDAw5LiA55u05YiwVSsxMEZGRkbnmoTmloflrZfvvIjooaXlhYXlubPpnaJTdXBwbGVtZW50YXJ5IFBsYW5l77yJXG5cbiAgdmFyIHNwUmVnZXhwID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZztcbiAgdmFyIHZhbCA9IHZhbHVlO1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIG51bSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIHZhciBzdHIgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB2YXIgYXJyID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG5cbiAgaWYgKG51bSkge1xuICAgIGtleSA9ICdudW1iZXInO1xuICB9IGVsc2UgaWYgKHN0cikge1xuICAgIGtleSA9ICdzdHJpbmcnO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGtleSA9ICdhcnJheSc7XG4gIH0gLy8gaWYgdGhlIHZhbHVlIGlzIG5vdCBvZiBhIHN1cHBvcnRlZCB0eXBlIGZvciByYW5nZSB2YWxpZGF0aW9uXG4gIC8vIHRoZSB2YWxpZGF0aW9uIHJ1bGUgcnVsZSBzaG91bGQgdXNlIHRoZVxuICAvLyB0eXBlIHByb3BlcnR5IHRvIGFsc28gdGVzdCBmb3IgYSBwYXJ0aWN1bGFyIHR5cGVcblxuXG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGFycikge1xuICAgIHZhbCA9IHZhbHVlLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChzdHIpIHtcbiAgICAvLyDlpITnkIbnoIHngrnlpKfkuo5VKzAxMDAwMOeahOaWh+Wtl2xlbmd0aOWxnuaAp+S4jeWHhuehrueahGJ1Z++8jOWmglwi8KCut/CgrrfwoK63XCIubGVuZ2h0ICE9PSAzXG4gICAgdmFsID0gdmFsdWUucmVwbGFjZShzcFJlZ2V4cCwgJ18nKS5sZW5ndGg7XG4gIH1cblxuICBpZiAobGVuKSB7XG4gICAgaWYgKHZhbCAhPT0gcnVsZS5sZW4pIHtcbiAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ubGVuLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS5sZW4pKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobWluICYmICFtYXggJiYgdmFsIDwgcnVsZS5taW4pIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLm1pbiwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWluKSk7XG4gIH0gZWxzZSBpZiAobWF4ICYmICFtaW4gJiYgdmFsID4gcnVsZS5tYXgpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLm1heCwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWF4KSk7XG4gIH0gZWxzZSBpZiAobWluICYmIG1heCAmJiAodmFsIDwgcnVsZS5taW4gfHwgdmFsID4gcnVsZS5tYXgpKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5yYW5nZSwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWluLCBydWxlLm1heCkpO1xuICB9XG59O1xuXG52YXIgRU5VTSQxID0gJ2VudW0nO1xuXG52YXIgZW51bWVyYWJsZSQxID0gZnVuY3Rpb24gZW51bWVyYWJsZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgcnVsZVtFTlVNJDFdID0gQXJyYXkuaXNBcnJheShydWxlW0VOVU0kMV0pID8gcnVsZVtFTlVNJDFdIDogW107XG5cbiAgaWYgKHJ1bGVbRU5VTSQxXS5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1tFTlVNJDFdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZVtFTlVNJDFdLmpvaW4oJywgJykpKTtcbiAgfVxufTtcblxudmFyIHBhdHRlcm4kMSA9IGZ1bmN0aW9uIHBhdHRlcm4ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmIChydWxlLnBhdHRlcm4pIHtcbiAgICBpZiAocnVsZS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAvLyBpZiBhIFJlZ0V4cCBpbnN0YW5jZSBpcyBwYXNzZWQsIHJlc2V0IGBsYXN0SW5kZXhgIGluIGNhc2UgaXRzIGBnbG9iYWxgXG4gICAgICAvLyBmbGFnIGlzIGFjY2lkZW50YWxseSBzZXQgdG8gYHRydWVgLCB3aGljaCBpbiBhIHZhbGlkYXRpb24gc2NlbmFyaW9cbiAgICAgIC8vIGlzIG5vdCBuZWNlc3NhcnkgYW5kIHRoZSByZXN1bHQgbWlnaHQgYmUgbWlzbGVhZGluZ1xuICAgICAgcnVsZS5wYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgIGlmICghcnVsZS5wYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnBhdHRlcm4ubWlzbWF0Y2gsIHJ1bGUuZnVsbEZpZWxkLCB2YWx1ZSwgcnVsZS5wYXR0ZXJuKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcnVsZS5wYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIF9wYXR0ZXJuID0gbmV3IFJlZ0V4cChydWxlLnBhdHRlcm4pO1xuXG4gICAgICBpZiAoIV9wYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnBhdHRlcm4ubWlzbWF0Y2gsIHJ1bGUuZnVsbEZpZWxkLCB2YWx1ZSwgcnVsZS5wYXR0ZXJuKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgcnVsZXMgPSB7XG4gIHJlcXVpcmVkOiByZXF1aXJlZCQxLFxuICB3aGl0ZXNwYWNlOiB3aGl0ZXNwYWNlLFxuICB0eXBlOiB0eXBlJDEsXG4gIHJhbmdlOiByYW5nZSxcbiAgXCJlbnVtXCI6IGVudW1lcmFibGUkMSxcbiAgcGF0dGVybjogcGF0dGVybiQxXG59O1xuXG52YXIgc3RyaW5nID0gZnVuY3Rpb24gc3RyaW5nKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsICdzdHJpbmcnKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5wYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChydWxlLndoaXRlc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgcnVsZXMud2hpdGVzcGFjZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgbWV0aG9kID0gZnVuY3Rpb24gbWV0aG9kKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgbnVtYmVyID0gZnVuY3Rpb24gbnVtYmVyKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIF9ib29sZWFuID0gZnVuY3Rpb24gX2Jvb2xlYW4ocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciByZWdleHAgPSBmdW5jdGlvbiByZWdleHAocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlKSkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgaW50ZWdlciA9IGZ1bmN0aW9uIGludGVnZXIocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgZmxvYXRGbiA9IGZ1bmN0aW9uIGZsb2F0Rm4ocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgYXJyYXkgPSBmdW5jdGlvbiBhcnJheShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgJ2FycmF5Jyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIG9iamVjdCA9IGZ1bmN0aW9uIG9iamVjdChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIEVOVU0gPSAnZW51bSc7XG5cbnZhciBlbnVtZXJhYmxlID0gZnVuY3Rpb24gZW51bWVyYWJsZShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzW0VOVU1dKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBwYXR0ZXJuID0gZnVuY3Rpb24gcGF0dGVybihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHJ1bGVzLnBhdHRlcm4ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGRhdGUgPSBmdW5jdGlvbiBkYXRlKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIC8vIGNvbnNvbGUubG9nKCdpbnRlZ2VyIHJ1bGUgY2FsbGVkICVqJywgcnVsZSk7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7IC8vIGNvbnNvbGUubG9nKCd2YWxpZGF0ZSBvbiAlcyB2YWx1ZScsIHZhbHVlKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnZGF0ZScpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsICdkYXRlJykpIHtcbiAgICAgIHZhciBkYXRlT2JqZWN0O1xuXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGRhdGVPYmplY3QgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGVPYmplY3QgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgZGF0ZU9iamVjdCwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoZGF0ZU9iamVjdCkge1xuICAgICAgICBydWxlcy5yYW5nZShydWxlLCBkYXRlT2JqZWN0LmdldFRpbWUoKSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgcmVxdWlyZWQgPSBmdW5jdGlvbiByZXF1aXJlZChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB0eXBlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyAnYXJyYXknIDogdHlwZW9mIHZhbHVlO1xuICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHR5cGUpO1xuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIHR5cGUgPSBmdW5jdGlvbiB0eXBlKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBydWxlVHlwZSA9IHJ1bGUudHlwZTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCBydWxlVHlwZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgcnVsZVR5cGUpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsIHJ1bGVUeXBlKSkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgYW55ID0gZnVuY3Rpb24gYW55KHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIHZhbGlkYXRvcnMgPSB7XG4gIHN0cmluZzogc3RyaW5nLFxuICBtZXRob2Q6IG1ldGhvZCxcbiAgbnVtYmVyOiBudW1iZXIsXG4gIFwiYm9vbGVhblwiOiBfYm9vbGVhbixcbiAgcmVnZXhwOiByZWdleHAsXG4gIGludGVnZXI6IGludGVnZXIsXG4gIFwiZmxvYXRcIjogZmxvYXRGbixcbiAgYXJyYXk6IGFycmF5LFxuICBvYmplY3Q6IG9iamVjdCxcbiAgXCJlbnVtXCI6IGVudW1lcmFibGUsXG4gIHBhdHRlcm46IHBhdHRlcm4sXG4gIGRhdGU6IGRhdGUsXG4gIHVybDogdHlwZSxcbiAgaGV4OiB0eXBlLFxuICBlbWFpbDogdHlwZSxcbiAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICBhbnk6IGFueVxufTtcblxuZnVuY3Rpb24gbmV3TWVzc2FnZXMoKSB7XG4gIHJldHVybiB7XG4gICAgXCJkZWZhdWx0XCI6ICdWYWxpZGF0aW9uIGVycm9yIG9uIGZpZWxkICVzJyxcbiAgICByZXF1aXJlZDogJyVzIGlzIHJlcXVpcmVkJyxcbiAgICBcImVudW1cIjogJyVzIG11c3QgYmUgb25lIG9mICVzJyxcbiAgICB3aGl0ZXNwYWNlOiAnJXMgY2Fubm90IGJlIGVtcHR5JyxcbiAgICBkYXRlOiB7XG4gICAgICBmb3JtYXQ6ICclcyBkYXRlICVzIGlzIGludmFsaWQgZm9yIGZvcm1hdCAlcycsXG4gICAgICBwYXJzZTogJyVzIGRhdGUgY291bGQgbm90IGJlIHBhcnNlZCwgJXMgaXMgaW52YWxpZCAnLFxuICAgICAgaW52YWxpZDogJyVzIGRhdGUgJXMgaXMgaW52YWxpZCdcbiAgICB9LFxuICAgIHR5cGVzOiB7XG4gICAgICBzdHJpbmc6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBtZXRob2Q6ICclcyBpcyBub3QgYSAlcyAoZnVuY3Rpb24pJyxcbiAgICAgIGFycmF5OiAnJXMgaXMgbm90IGFuICVzJyxcbiAgICAgIG9iamVjdDogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBudW1iZXI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBkYXRlOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgXCJib29sZWFuXCI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBpbnRlZ2VyOiAnJXMgaXMgbm90IGFuICVzJyxcbiAgICAgIFwiZmxvYXRcIjogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIHJlZ2V4cDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIGVtYWlsOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgdXJsOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgaGV4OiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgYmUgZXhhY3RseSAlcyBjaGFyYWN0ZXJzJyxcbiAgICAgIG1pbjogJyVzIG11c3QgYmUgYXQgbGVhc3QgJXMgY2hhcmFjdGVycycsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgbG9uZ2VyIHRoYW4gJXMgY2hhcmFjdGVycycsXG4gICAgICByYW5nZTogJyVzIG11c3QgYmUgYmV0d2VlbiAlcyBhbmQgJXMgY2hhcmFjdGVycydcbiAgICB9LFxuICAgIG51bWJlcjoge1xuICAgICAgbGVuOiAnJXMgbXVzdCBlcXVhbCAlcycsXG4gICAgICBtaW46ICclcyBjYW5ub3QgYmUgbGVzcyB0aGFuICVzJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJXMnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzJ1xuICAgIH0sXG4gICAgYXJyYXk6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgYmUgZXhhY3RseSAlcyBpbiBsZW5ndGgnLFxuICAgICAgbWluOiAnJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcyBpbiBsZW5ndGgnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAlcyBpbiBsZW5ndGgnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGluIGxlbmd0aCdcbiAgICB9LFxuICAgIHBhdHRlcm46IHtcbiAgICAgIG1pc21hdGNoOiAnJXMgdmFsdWUgJXMgZG9lcyBub3QgbWF0Y2ggcGF0dGVybiAlcydcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMpKTtcbiAgICAgIGNsb25lZC5jbG9uZSA9IHRoaXMuY2xvbmU7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgfTtcbn1cbnZhciBtZXNzYWdlcyA9IG5ld01lc3NhZ2VzKCk7XG5cbi8qKlxuICogIEVuY2Fwc3VsYXRlcyBhIHZhbGlkYXRpb24gc2NoZW1hLlxuICpcbiAqICBAcGFyYW0gZGVzY3JpcHRvciBBbiBvYmplY3QgZGVjbGFyaW5nIHZhbGlkYXRpb24gcnVsZXNcbiAqICBmb3IgdGhpcyBzY2hlbWEuXG4gKi9cblxudmFyIFNjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT0gU3RhdGljID09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IEluc3RhbmNlID09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBTY2hlbWEoZGVzY3JpcHRvcikge1xuICAgIHRoaXMucnVsZXMgPSBudWxsO1xuICAgIHRoaXMuX21lc3NhZ2VzID0gbWVzc2FnZXM7XG4gICAgdGhpcy5kZWZpbmUoZGVzY3JpcHRvcik7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2NoZW1hLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKHJ1bGVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICghcnVsZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbmZpZ3VyZSBhIHNjaGVtYSB3aXRoIG5vIHJ1bGVzJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBydWxlcyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShydWxlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUnVsZXMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0ge307XG4gICAgT2JqZWN0LmtleXMocnVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBpdGVtID0gcnVsZXNbbmFtZV07XG4gICAgICBfdGhpcy5ydWxlc1tuYW1lXSA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtIDogW2l0ZW1dO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tZXNzYWdlcyA9IGZ1bmN0aW9uIG1lc3NhZ2VzKF9tZXNzYWdlcykge1xuICAgIGlmIChfbWVzc2FnZXMpIHtcbiAgICAgIHRoaXMuX21lc3NhZ2VzID0gZGVlcE1lcmdlKG5ld01lc3NhZ2VzKCksIF9tZXNzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzO1xuICB9O1xuXG4gIF9wcm90by52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHNvdXJjZV8sIG8sIG9jKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAobyA9PT0gdm9pZCAwKSB7XG4gICAgICBvID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9jID09PSB2b2lkIDApIHtcbiAgICAgIG9jID0gZnVuY3Rpb24gb2MoKSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlID0gc291cmNlXztcbiAgICB2YXIgb3B0aW9ucyA9IG87XG4gICAgdmFyIGNhbGxiYWNrID0gb2M7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucnVsZXMgfHwgT2JqZWN0LmtleXModGhpcy5ydWxlcykubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzb3VyY2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlKHJlc3VsdHMpIHtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciBmaWVsZHMgPSB7fTtcblxuICAgICAgZnVuY3Rpb24gYWRkKGUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgICAgICB2YXIgX2Vycm9ycztcblxuICAgICAgICAgIGVycm9ycyA9IChfZXJyb3JzID0gZXJyb3JzKS5jb25jYXQuYXBwbHkoX2Vycm9ycywgZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFkZChyZXN1bHRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZHMgPSBjb252ZXJ0RmllbGRzRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgY2FsbGJhY2soZXJyb3JzLCBmaWVsZHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1lc3NhZ2VzKSB7XG4gICAgICB2YXIgbWVzc2FnZXMkMSA9IHRoaXMubWVzc2FnZXMoKTtcblxuICAgICAgaWYgKG1lc3NhZ2VzJDEgPT09IG1lc3NhZ2VzKSB7XG4gICAgICAgIG1lc3NhZ2VzJDEgPSBuZXdNZXNzYWdlcygpO1xuICAgICAgfVxuXG4gICAgICBkZWVwTWVyZ2UobWVzc2FnZXMkMSwgb3B0aW9ucy5tZXNzYWdlcyk7XG4gICAgICBvcHRpb25zLm1lc3NhZ2VzID0gbWVzc2FnZXMkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWVzID0ge307XG4gICAgdmFyIGtleXMgPSBvcHRpb25zLmtleXMgfHwgT2JqZWN0LmtleXModGhpcy5ydWxlcyk7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uICh6KSB7XG4gICAgICB2YXIgYXJyID0gX3RoaXMyLnJ1bGVzW3pdO1xuICAgICAgdmFyIHZhbHVlID0gc291cmNlW3pdO1xuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSByO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcnVsZS50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBpZiAoc291cmNlID09PSBzb3VyY2VfKSB7XG4gICAgICAgICAgICBzb3VyY2UgPSBfZXh0ZW5kcyh7fSwgc291cmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YWx1ZSA9IHNvdXJjZVt6XSA9IHJ1bGUudHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJ1bGUgPSB7XG4gICAgICAgICAgICB2YWxpZGF0b3I6IHJ1bGVcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ1bGUgPSBfZXh0ZW5kcyh7fSwgcnVsZSk7XG4gICAgICAgIH0gLy8gRmlsbCB2YWxpZGF0b3IuIFNraXAgaWYgbm90aGluZyBuZWVkIHRvIHZhbGlkYXRlXG5cblxuICAgICAgICBydWxlLnZhbGlkYXRvciA9IF90aGlzMi5nZXRWYWxpZGF0aW9uTWV0aG9kKHJ1bGUpO1xuXG4gICAgICAgIGlmICghcnVsZS52YWxpZGF0b3IpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBydWxlLmZpZWxkID0gejtcbiAgICAgICAgcnVsZS5mdWxsRmllbGQgPSBydWxlLmZ1bGxGaWVsZCB8fCB6O1xuICAgICAgICBydWxlLnR5cGUgPSBfdGhpczIuZ2V0VHlwZShydWxlKTtcbiAgICAgICAgc2VyaWVzW3pdID0gc2VyaWVzW3pdIHx8IFtdO1xuICAgICAgICBzZXJpZXNbel0ucHVzaCh7XG4gICAgICAgICAgcnVsZTogcnVsZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgZmllbGQ6IHpcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgZXJyb3JGaWVsZHMgPSB7fTtcbiAgICByZXR1cm4gYXN5bmNNYXAoc2VyaWVzLCBvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSwgZG9JdCkge1xuICAgICAgdmFyIHJ1bGUgPSBkYXRhLnJ1bGU7XG4gICAgICB2YXIgZGVlcCA9IChydWxlLnR5cGUgPT09ICdvYmplY3QnIHx8IHJ1bGUudHlwZSA9PT0gJ2FycmF5JykgJiYgKHR5cGVvZiBydWxlLmZpZWxkcyA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHJ1bGUuZGVmYXVsdEZpZWxkID09PSAnb2JqZWN0Jyk7XG4gICAgICBkZWVwID0gZGVlcCAmJiAocnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBkYXRhLnZhbHVlKTtcbiAgICAgIHJ1bGUuZmllbGQgPSBkYXRhLmZpZWxkO1xuXG4gICAgICBmdW5jdGlvbiBhZGRGdWxsRmllbGQoa2V5LCBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzY2hlbWEsIHtcbiAgICAgICAgICBmdWxsRmllbGQ6IHJ1bGUuZnVsbEZpZWxkICsgXCIuXCIgKyBrZXksXG4gICAgICAgICAgZnVsbEZpZWxkczogcnVsZS5mdWxsRmllbGRzID8gW10uY29uY2F0KHJ1bGUuZnVsbEZpZWxkcywgW2tleV0pIDogW2tleV1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNiKGUpIHtcbiAgICAgICAgaWYgKGUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGUgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlcnJvckxpc3QgPSBBcnJheS5pc0FycmF5KGUpID8gZSA6IFtlXTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuc3VwcHJlc3NXYXJuaW5nICYmIGVycm9yTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICBTY2hlbWEud2FybmluZygnYXN5bmMtdmFsaWRhdG9yOicsIGVycm9yTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3JMaXN0Lmxlbmd0aCAmJiBydWxlLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVycm9yTGlzdCA9IFtdLmNvbmNhdChydWxlLm1lc3NhZ2UpO1xuICAgICAgICB9IC8vIEZpbGwgZXJyb3IgaW5mb1xuXG5cbiAgICAgICAgdmFyIGZpbGxlZEVycm9ycyA9IGVycm9yTGlzdC5tYXAoY29tcGxlbWVudEVycm9yKHJ1bGUsIHNvdXJjZSkpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmZpcnN0ICYmIGZpbGxlZEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBlcnJvckZpZWxkc1tydWxlLmZpZWxkXSA9IDE7XG4gICAgICAgICAgcmV0dXJuIGRvSXQoZmlsbGVkRXJyb3JzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVlcCkge1xuICAgICAgICAgIGRvSXQoZmlsbGVkRXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBydWxlIGlzIHJlcXVpcmVkIGJ1dCB0aGUgdGFyZ2V0IG9iamVjdFxuICAgICAgICAgIC8vIGRvZXMgbm90IGV4aXN0IGZhaWwgYXQgdGhlIHJ1bGUgbGV2ZWwgYW5kIGRvbid0XG4gICAgICAgICAgLy8gZ28gZGVlcGVyXG4gICAgICAgICAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgIWRhdGEudmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChydWxlLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBmaWxsZWRFcnJvcnMgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKS5tYXAoY29tcGxlbWVudEVycm9yKHJ1bGUsIHNvdXJjZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmVycm9yKSB7XG4gICAgICAgICAgICAgIGZpbGxlZEVycm9ycyA9IFtvcHRpb25zLmVycm9yKHJ1bGUsIGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnJlcXVpcmVkLCBydWxlLmZpZWxkKSldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZG9JdChmaWxsZWRFcnJvcnMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmaWVsZHNTY2hlbWEgPSB7fTtcblxuICAgICAgICAgIGlmIChydWxlLmRlZmF1bHRGaWVsZCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YS52YWx1ZSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgZmllbGRzU2NoZW1hW2tleV0gPSBydWxlLmRlZmF1bHRGaWVsZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpZWxkc1NjaGVtYSA9IF9leHRlbmRzKHt9LCBmaWVsZHNTY2hlbWEsIGRhdGEucnVsZS5maWVsZHMpO1xuICAgICAgICAgIHZhciBwYXJlZEZpZWxkc1NjaGVtYSA9IHt9O1xuICAgICAgICAgIE9iamVjdC5rZXlzKGZpZWxkc1NjaGVtYSkuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZFNjaGVtYSA9IGZpZWxkc1NjaGVtYVtmaWVsZF07XG4gICAgICAgICAgICB2YXIgZmllbGRTY2hlbWFMaXN0ID0gQXJyYXkuaXNBcnJheShmaWVsZFNjaGVtYSkgPyBmaWVsZFNjaGVtYSA6IFtmaWVsZFNjaGVtYV07XG4gICAgICAgICAgICBwYXJlZEZpZWxkc1NjaGVtYVtmaWVsZF0gPSBmaWVsZFNjaGVtYUxpc3QubWFwKGFkZEZ1bGxGaWVsZC5iaW5kKG51bGwsIGZpZWxkKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHNjaGVtYSA9IG5ldyBTY2hlbWEocGFyZWRGaWVsZHNTY2hlbWEpO1xuICAgICAgICAgIHNjaGVtYS5tZXNzYWdlcyhvcHRpb25zLm1lc3NhZ2VzKTtcblxuICAgICAgICAgIGlmIChkYXRhLnJ1bGUub3B0aW9ucykge1xuICAgICAgICAgICAgZGF0YS5ydWxlLm9wdGlvbnMubWVzc2FnZXMgPSBvcHRpb25zLm1lc3NhZ2VzO1xuICAgICAgICAgICAgZGF0YS5ydWxlLm9wdGlvbnMuZXJyb3IgPSBvcHRpb25zLmVycm9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZShkYXRhLnZhbHVlLCBkYXRhLnJ1bGUub3B0aW9ucyB8fCBvcHRpb25zLCBmdW5jdGlvbiAoZXJycykge1xuICAgICAgICAgICAgdmFyIGZpbmFsRXJyb3JzID0gW107XG5cbiAgICAgICAgICAgIGlmIChmaWxsZWRFcnJvcnMgJiYgZmlsbGVkRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmaW5hbEVycm9ycy5wdXNoLmFwcGx5KGZpbmFsRXJyb3JzLCBmaWxsZWRFcnJvcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJycyAmJiBlcnJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmaW5hbEVycm9ycy5wdXNoLmFwcGx5KGZpbmFsRXJyb3JzLCBlcnJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9JdChmaW5hbEVycm9ycy5sZW5ndGggPyBmaW5hbEVycm9ycyA6IG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXM7XG5cbiAgICAgIGlmIChydWxlLmFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgIHJlcyA9IHJ1bGUuYXN5bmNWYWxpZGF0b3IocnVsZSwgZGF0YS52YWx1ZSwgY2IsIGRhdGEuc291cmNlLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAocnVsZS52YWxpZGF0b3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXMgPSBydWxlLnZhbGlkYXRvcihydWxlLCBkYXRhLnZhbHVlLCBjYiwgZGF0YS5zb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyByZXRocm93IHRvIHJlcG9ydCBlcnJvclxuXG4gICAgICAgICAgaWYgKCFvcHRpb25zLnN1cHByZXNzVmFsaWRhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNiKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgICAgIGNiKHR5cGVvZiBydWxlLm1lc3NhZ2UgPT09ICdmdW5jdGlvbicgPyBydWxlLm1lc3NhZ2UocnVsZS5mdWxsRmllbGQgfHwgcnVsZS5maWVsZCkgOiBydWxlLm1lc3NhZ2UgfHwgKHJ1bGUuZnVsbEZpZWxkIHx8IHJ1bGUuZmllbGQpICsgXCIgZmFpbHNcIik7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBjYihyZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgY2IocmVzLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXMgJiYgcmVzLnRoZW4pIHtcbiAgICAgICAgcmVzLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjYigpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBjYihlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIGNvbXBsZXRlKHJlc3VsdHMpO1xuICAgIH0sIHNvdXJjZSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSB1bmRlZmluZWQgJiYgcnVsZS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBydWxlLnR5cGUgPSAncGF0dGVybic7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBydWxlLnZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJyAmJiBydWxlLnR5cGUgJiYgIXZhbGlkYXRvcnMuaGFzT3duUHJvcGVydHkocnVsZS50eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnVW5rbm93biBydWxlIHR5cGUgJXMnLCBydWxlLnR5cGUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZS50eXBlIHx8ICdzdHJpbmcnO1xuICB9O1xuXG4gIF9wcm90by5nZXRWYWxpZGF0aW9uTWV0aG9kID0gZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbk1ldGhvZChydWxlKSB7XG4gICAgaWYgKHR5cGVvZiBydWxlLnZhbGlkYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHJ1bGUudmFsaWRhdG9yO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocnVsZSk7XG4gICAgdmFyIG1lc3NhZ2VJbmRleCA9IGtleXMuaW5kZXhPZignbWVzc2FnZScpO1xuXG4gICAgaWYgKG1lc3NhZ2VJbmRleCAhPT0gLTEpIHtcbiAgICAgIGtleXMuc3BsaWNlKG1lc3NhZ2VJbmRleCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09ICdyZXF1aXJlZCcpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0b3JzLnJlcXVpcmVkO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3JzW3RoaXMuZ2V0VHlwZShydWxlKV0gfHwgdW5kZWZpbmVkO1xuICB9O1xuXG4gIHJldHVybiBTY2hlbWE7XG59KCk7XG5cblNjaGVtYS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKHR5cGUsIHZhbGlkYXRvcikge1xuICBpZiAodHlwZW9mIHZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlZ2lzdGVyIGEgdmFsaWRhdG9yIGJ5IHR5cGUsIHZhbGlkYXRvciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFsaWRhdG9yc1t0eXBlXSA9IHZhbGlkYXRvcjtcbn07XG5cblNjaGVtYS53YXJuaW5nID0gd2FybmluZztcblNjaGVtYS5tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuU2NoZW1hLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzO1xuXG5leHBvcnQgeyBTY2hlbWEgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0J10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuUmVhY3RFcnJvckJvdW5kYXJ5ID0ge30sIGdsb2JhbC5SZWFjdCkpO1xufSkodGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLCBSZWFjdCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2UoZSkge1xuICAgIGlmIChlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XG4gICAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGlmIChlKSB7XG4gICAgICBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChrICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICB2YXIgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVba107IH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIG5bXCJkZWZhdWx0XCJdID0gZTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbiAgfVxuXG4gIHZhciBSZWFjdF9fbmFtZXNwYWNlID0gLyojX19QVVJFX18qL19pbnRlcm9wTmFtZXNwYWNlKFJlYWN0KTtcblxuICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICAgIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICB2YXIgY2hhbmdlZEFycmF5ID0gZnVuY3Rpb24gY2hhbmdlZEFycmF5KGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdm9pZCAwKSB7XG4gICAgICBhID0gW107XG4gICAgfVxuXG4gICAgaWYgKGIgPT09IHZvaWQgMCkge1xuICAgICAgYiA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBhLmxlbmd0aCAhPT0gYi5sZW5ndGggfHwgYS5zb21lKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuICFPYmplY3QuaXMoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgZXJyb3I6IG51bGxcbiAgfTtcblxuICB2YXIgRXJyb3JCb3VuZGFyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKEVycm9yQm91bmRhcnksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcblxuICAgICAgX3RoaXMucmVzZXRFcnJvckJvdW5kYXJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25SZXNldCA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uUmVzZXQuYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3MpO1xuXG4gICAgICAgIF90aGlzLnJlc2V0KCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgRXJyb3JCb3VuZGFyeS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIF9wcm90byA9IEVycm9yQm91bmRhcnkucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRDYXRjaCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBpbmZvKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25FcnJvciwgX3RoaXMkcHJvcHMyO1xuXG4gICAgICAoX3RoaXMkcHJvcHMkb25FcnJvciA9IChfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzKS5vbkVycm9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25FcnJvci5jYWxsKF90aGlzJHByb3BzMiwgZXJyb3IsIGluZm8pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YXIgZXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgdmFyIHJlc2V0S2V5cyA9IHRoaXMucHJvcHMucmVzZXRLZXlzOyAvLyBUaGVyZSdzIGFuIGVkZ2UgY2FzZSB3aGVyZSBpZiB0aGUgdGhpbmcgdGhhdCB0cmlnZ2VyZWQgdGhlIGVycm9yXG4gICAgICAvLyBoYXBwZW5zIHRvICphbHNvKiBiZSBpbiB0aGUgcmVzZXRLZXlzIGFycmF5LCB3ZSdkIGVuZCB1cCByZXNldHRpbmdcbiAgICAgIC8vIHRoZSBlcnJvciBib3VuZGFyeSBpbW1lZGlhdGVseS4gVGhpcyB3b3VsZCBsaWtlbHkgdHJpZ2dlciBhIHNlY29uZFxuICAgICAgLy8gZXJyb3IgdG8gYmUgdGhyb3duLlxuICAgICAgLy8gU28gd2UgbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgY2hlY2sgdGhlIHJlc2V0S2V5cyBvbiB0aGUgZmlyc3QgY2FsbFxuICAgICAgLy8gb2YgY0RVIGFmdGVyIHRoZSBlcnJvciBpcyBzZXRcblxuICAgICAgaWYgKGVycm9yICE9PSBudWxsICYmIHByZXZTdGF0ZS5lcnJvciAhPT0gbnVsbCAmJiBjaGFuZ2VkQXJyYXkocHJldlByb3BzLnJlc2V0S2V5cywgcmVzZXRLZXlzKSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMkb25SZXNldEtlLCBfdGhpcyRwcm9wczM7XG5cbiAgICAgICAgKF90aGlzJHByb3BzJG9uUmVzZXRLZSA9IChfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzKS5vblJlc2V0S2V5c0NoYW5nZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByb3BzJG9uUmVzZXRLZS5jYWxsKF90aGlzJHByb3BzMywgcHJldlByb3BzLnJlc2V0S2V5cywgcmVzZXRLZXlzKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGZhbGxiYWNrUmVuZGVyID0gX3RoaXMkcHJvcHM0LmZhbGxiYWNrUmVuZGVyLFxuICAgICAgICAgIEZhbGxiYWNrQ29tcG9uZW50ID0gX3RoaXMkcHJvcHM0LkZhbGxiYWNrQ29tcG9uZW50LFxuICAgICAgICAgIGZhbGxiYWNrID0gX3RoaXMkcHJvcHM0LmZhbGxiYWNrO1xuXG4gICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIF9wcm9wcyA9IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgcmVzZXRFcnJvckJvdW5kYXJ5OiB0aGlzLnJlc2V0RXJyb3JCb3VuZGFyeVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0X19uYW1lc3BhY2UuaXNWYWxpZEVsZW1lbnQoZmFsbGJhY2spKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBmYWxsYmFja1JlbmRlcihfcHJvcHMpO1xuICAgICAgICB9IGVsc2UgaWYgKEZhbGxiYWNrQ29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoRmFsbGJhY2tDb21wb25lbnQsIF9wcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWFjdC1lcnJvci1ib3VuZGFyeSByZXF1aXJlcyBlaXRoZXIgYSBmYWxsYmFjaywgZmFsbGJhY2tSZW5kZXIsIG9yIEZhbGxiYWNrQ29tcG9uZW50IHByb3AnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEVycm9yQm91bmRhcnk7XG4gIH0oUmVhY3RfX25hbWVzcGFjZS5Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIHdpdGhFcnJvckJvdW5kYXJ5KENvbXBvbmVudCwgZXJyb3JCb3VuZGFyeVByb3BzKSB7XG4gICAgdmFyIFdyYXBwZWQgPSBmdW5jdGlvbiBXcmFwcGVkKHByb3BzKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChFcnJvckJvdW5kYXJ5LCBlcnJvckJvdW5kYXJ5UHJvcHMsIC8qI19fUFVSRV9fKi9SZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcykpO1xuICAgIH07IC8vIEZvcm1hdCBmb3IgZGlzcGxheSBpbiBEZXZUb29sc1xuXG5cbiAgICB2YXIgbmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnVW5rbm93bic7XG4gICAgV3JhcHBlZC5kaXNwbGF5TmFtZSA9IFwid2l0aEVycm9yQm91bmRhcnkoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgcmV0dXJuIFdyYXBwZWQ7XG4gIH1cblxuICBmdW5jdGlvbiB1c2VFcnJvckhhbmRsZXIoZ2l2ZW5FcnJvcikge1xuICAgIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZVN0YXRlKG51bGwpLFxuICAgICAgICBlcnJvciA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgICAgc2V0RXJyb3IgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgICBpZiAoZ2l2ZW5FcnJvciAhPSBudWxsKSB0aHJvdyBnaXZlbkVycm9yO1xuICAgIGlmIChlcnJvciAhPSBudWxsKSB0aHJvdyBlcnJvcjtcbiAgICByZXR1cm4gc2V0RXJyb3I7XG4gIH1cbiAgLypcbiAgZXNsaW50XG4gICAgQHR5cGVzY3JpcHQtZXNsaW50L3NvcnQtdHlwZS11bmlvbi1pbnRlcnNlY3Rpb24tbWVtYmVyczogXCJvZmZcIixcbiAgICBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhyb3ctbGl0ZXJhbDogXCJvZmZcIixcbiAgICBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZzogXCJvZmZcIlxuICAqL1xuXG4gIGV4cG9ydHMuRXJyb3JCb3VuZGFyeSA9IEVycm9yQm91bmRhcnk7XG4gIGV4cG9ydHMudXNlRXJyb3JIYW5kbGVyID0gdXNlRXJyb3JIYW5kbGVyO1xuICBleHBvcnRzLndpdGhFcnJvckJvdW5kYXJ5ID0gd2l0aEVycm9yQm91bmRhcnk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3QtZXJyb3ItYm91bmRhcnkudW1kLmpzLm1hcFxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IENoZWNrQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DaGVja0NpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IENsb3NlQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEluZm9DaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0luZm9DaXJjbGVGaWxsZWRcIjtcbmltcG9ydCBMb2FkaW5nT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0xvYWRpbmdPdXRsaW5lZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUkNOb3RpZmljYXRpb24gZnJvbSAncmMtbm90aWZpY2F0aW9uJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDb25maWdQcm92aWRlciwgeyBnbG9iYWxDb25maWcgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IGNyZWF0ZVVzZU1lc3NhZ2UgZnJvbSAnLi9ob29rcy91c2VNZXNzYWdlJztcbnZhciBtZXNzYWdlSW5zdGFuY2U7XG52YXIgZGVmYXVsdER1cmF0aW9uID0gMztcbnZhciBkZWZhdWx0VG9wO1xudmFyIGtleSA9IDE7XG52YXIgbG9jYWxQcmVmaXhDbHMgPSAnJztcbnZhciB0cmFuc2l0aW9uTmFtZSA9ICdtb3ZlLXVwJztcbnZhciBoYXNUcmFuc2l0aW9uTmFtZSA9IGZhbHNlO1xudmFyIGdldENvbnRhaW5lcjtcbnZhciBtYXhDb3VudDtcbnZhciBydGwgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlUaGVuSW5jcmVhc2VLZXkoKSB7XG4gIHJldHVybiBrZXkrKztcbn1cbmZ1bmN0aW9uIHNldE1lc3NhZ2VDb25maWcob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50b3AgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRUb3AgPSBvcHRpb25zLnRvcDtcbiAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsOyAvLyBkZWxldGUgbWVzc2FnZUluc3RhbmNlIGZvciBuZXcgZGVmYXVsdFRvcFxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHREdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb247XG4gIH1cbiAgaWYgKG9wdGlvbnMucHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBsb2NhbFByZWZpeENscyA9IG9wdGlvbnMucHJlZml4Q2xzO1xuICB9XG4gIGlmIChvcHRpb25zLmdldENvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZ2V0Q29udGFpbmVyID0gb3B0aW9ucy5nZXRDb250YWluZXI7XG4gICAgbWVzc2FnZUluc3RhbmNlID0gbnVsbDsgLy8gZGVsZXRlIG1lc3NhZ2VJbnN0YW5jZSBmb3IgbmV3IGdldENvbnRhaW5lclxuICB9XG5cbiAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRyYW5zaXRpb25OYW1lID0gb3B0aW9ucy50cmFuc2l0aW9uTmFtZTtcbiAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsOyAvLyBkZWxldGUgbWVzc2FnZUluc3RhbmNlIGZvciBuZXcgdHJhbnNpdGlvbk5hbWVcbiAgICBoYXNUcmFuc2l0aW9uTmFtZSA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMubWF4Q291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgIG1heENvdW50ID0gb3B0aW9ucy5tYXhDb3VudDtcbiAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsO1xuICB9XG4gIGlmIChvcHRpb25zLnJ0bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcnRsID0gb3B0aW9ucy5ydGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJDTm90aWZpY2F0aW9uSW5zdGFuY2UoYXJncywgY2FsbGJhY2spIHtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IGFyZ3MucHJlZml4Q2xzLFxuICAgIGdldENvbnRleHRQb3B1cENvbnRhaW5lciA9IGFyZ3MuZ2V0UG9wdXBDb250YWluZXI7XG4gIHZhciBfZ2xvYmFsQ29uZmlnID0gZ2xvYmFsQ29uZmlnKCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX2dsb2JhbENvbmZpZy5nZXRQcmVmaXhDbHMsXG4gICAgZ2V0Um9vdFByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0Um9vdFByZWZpeENscyxcbiAgICBnZXRJY29uUHJlZml4Q2xzID0gX2dsb2JhbENvbmZpZy5nZXRJY29uUHJlZml4Q2xzO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdtZXNzYWdlJywgY3VzdG9taXplUHJlZml4Q2xzIHx8IGxvY2FsUHJlZml4Q2xzKTtcbiAgdmFyIHJvb3RQcmVmaXhDbHMgPSBnZXRSb290UHJlZml4Q2xzKGFyZ3Mucm9vdFByZWZpeENscywgcHJlZml4Q2xzKTtcbiAgdmFyIGljb25QcmVmaXhDbHMgPSBnZXRJY29uUHJlZml4Q2xzKCk7XG4gIGlmIChtZXNzYWdlSW5zdGFuY2UpIHtcbiAgICBjYWxsYmFjayh7XG4gICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgIHJvb3RQcmVmaXhDbHM6IHJvb3RQcmVmaXhDbHMsXG4gICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgaW5zdGFuY2U6IG1lc3NhZ2VJbnN0YW5jZVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5zdGFuY2VDb25maWcgPSB7XG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgdHJhbnNpdGlvbk5hbWU6IGhhc1RyYW5zaXRpb25OYW1lID8gdHJhbnNpdGlvbk5hbWUgOiBcIlwiLmNvbmNhdChyb290UHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHRyYW5zaXRpb25OYW1lKSxcbiAgICBzdHlsZToge1xuICAgICAgdG9wOiBkZWZhdWx0VG9wXG4gICAgfSxcbiAgICBnZXRDb250YWluZXI6IGdldENvbnRhaW5lciB8fCBnZXRDb250ZXh0UG9wdXBDb250YWluZXIsXG4gICAgbWF4Q291bnQ6IG1heENvdW50XG4gIH07XG4gIFJDTm90aWZpY2F0aW9uLm5ld0luc3RhbmNlKGluc3RhbmNlQ29uZmlnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBjYWxsYmFjayh7XG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgICBpbnN0YW5jZTogbWVzc2FnZUluc3RhbmNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWVzc2FnZUluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICAgIG1lc3NhZ2VJbnN0YW5jZS5jb25maWcgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB9XG4gICAgY2FsbGJhY2soe1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgIH0pO1xuICB9KTtcbn1cbnZhciB0eXBlVG9JY29uID0ge1xuICBpbmZvOiBJbmZvQ2lyY2xlRmlsbGVkLFxuICBzdWNjZXNzOiBDaGVja0NpcmNsZUZpbGxlZCxcbiAgZXJyb3I6IENsb3NlQ2lyY2xlRmlsbGVkLFxuICB3YXJuaW5nOiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCxcbiAgbG9hZGluZzogTG9hZGluZ091dGxpbmVkXG59O1xuZXhwb3J0IHZhciB0eXBlTGlzdCA9IE9iamVjdC5rZXlzKHR5cGVUb0ljb24pO1xuZnVuY3Rpb24gZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgZHVyYXRpb24gPSBhcmdzLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBhcmdzLmR1cmF0aW9uIDogZGVmYXVsdER1cmF0aW9uO1xuICB2YXIgSWNvbkNvbXBvbmVudCA9IHR5cGVUb0ljb25bYXJncy50eXBlXTtcbiAgdmFyIG1lc3NhZ2VDbGFzcyA9IGNsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jdXN0b20tY29udGVudFwiKSwgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KGFyZ3MudHlwZSksIGFyZ3MudHlwZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIHJ0bCA9PT0gdHJ1ZSksIF9jbGFzc05hbWVzKSk7XG4gIHJldHVybiB7XG4gICAga2V5OiBhcmdzLmtleSxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgc3R5bGU6IGFyZ3Muc3R5bGUgfHwge30sXG4gICAgY2xhc3NOYW1lOiBhcmdzLmNsYXNzTmFtZSxcbiAgICBjb250ZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25maWdQcm92aWRlciwge1xuICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENsc1xuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogbWVzc2FnZUNsYXNzXG4gICAgfSwgYXJncy5pY29uIHx8IEljb25Db21wb25lbnQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwgbnVsbCksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBhcmdzLmNvbnRlbnQpKSksXG4gICAgb25DbG9zZTogYXJncy5vbkNsb3NlLFxuICAgIG9uQ2xpY2s6IGFyZ3Mub25DbGlja1xuICB9O1xufVxuZnVuY3Rpb24gbm90aWNlKGFyZ3MpIHtcbiAgdmFyIHRhcmdldCA9IGFyZ3Mua2V5IHx8IGdldEtleVRoZW5JbmNyZWFzZUtleSgpO1xuICB2YXIgY2xvc2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJncy5vbkNsb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFyZ3Mub25DbG9zZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgfTtcbiAgICBnZXRSQ05vdGlmaWNhdGlvbkluc3RhbmNlKGFyZ3MsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICAgIGljb25QcmVmaXhDbHMgPSBfcmVmLmljb25QcmVmaXhDbHMsXG4gICAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZTtcbiAgICAgIGluc3RhbmNlLm5vdGljZShnZXRSQ05vdGljZVByb3BzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgICBrZXk6IHRhcmdldCxcbiAgICAgICAgb25DbG9zZTogY2FsbGJhY2tcbiAgICAgIH0pLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpKTtcbiAgICB9KTtcbiAgfSk7XG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChtZXNzYWdlSW5zdGFuY2UpIHtcbiAgICAgIG1lc3NhZ2VJbnN0YW5jZS5yZW1vdmVOb3RpY2UodGFyZ2V0KTtcbiAgICAgIChfYSA9IGFyZ3Mub25DbG9zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoYXJncyk7XG4gICAgfVxuICB9O1xuICByZXN1bHQudGhlbiA9IGZ1bmN0aW9uIChmaWxsZWQsIHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIGNsb3NlUHJvbWlzZS50aGVuKGZpbGxlZCwgcmVqZWN0ZWQpO1xuICB9O1xuICByZXN1bHQucHJvbWlzZSA9IGNsb3NlUHJvbWlzZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzQXJnc1Byb3BzKGNvbnRlbnQpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjb250ZW50KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgISFjb250ZW50LmNvbnRlbnQ7XG59XG52YXIgYXBpID0ge1xuICBvcGVuOiBub3RpY2UsXG4gIGNvbmZpZzogc2V0TWVzc2FnZUNvbmZpZyxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShtZXNzYWdlS2V5KSB7XG4gICAgaWYgKG1lc3NhZ2VJbnN0YW5jZSkge1xuICAgICAgaWYgKG1lc3NhZ2VLZXkpIHtcbiAgICAgICAgdmFyIF9tZXNzYWdlSW5zdGFuY2UgPSBtZXNzYWdlSW5zdGFuY2UsXG4gICAgICAgICAgcmVtb3ZlTm90aWNlID0gX21lc3NhZ2VJbnN0YW5jZS5yZW1vdmVOb3RpY2U7XG4gICAgICAgIHJlbW92ZU5vdGljZShtZXNzYWdlS2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfbWVzc2FnZUluc3RhbmNlMiA9IG1lc3NhZ2VJbnN0YW5jZSxcbiAgICAgICAgICBkZXN0cm95ID0gX21lc3NhZ2VJbnN0YW5jZTIuZGVzdHJveTtcbiAgICAgICAgZGVzdHJveSgpO1xuICAgICAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hUeXBlQXBpKG9yaWdpbmFsQXBpLCB0eXBlKSB7XG4gIG9yaWdpbmFsQXBpW3R5cGVdID0gZnVuY3Rpb24gKGNvbnRlbnQsIGR1cmF0aW9uLCBvbkNsb3NlKSB7XG4gICAgaWYgKGlzQXJnc1Byb3BzKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxBcGkub3BlbihfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgY29udGVudCksIHtcbiAgICAgICAgdHlwZTogdHlwZVxuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNsb3NlID0gZHVyYXRpb247XG4gICAgICBkdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdpbmFsQXBpLm9wZW4oe1xuICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBvbkNsb3NlOiBvbkNsb3NlXG4gICAgfSk7XG4gIH07XG59XG50eXBlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHJldHVybiBhdHRhY2hUeXBlQXBpKGFwaSwgdHlwZSk7XG59KTtcbmFwaS53YXJuID0gYXBpLndhcm5pbmc7XG5hcGkudXNlTWVzc2FnZSA9IGNyZWF0ZVVzZU1lc3NhZ2UoZ2V0UkNOb3RpZmljYXRpb25JbnN0YW5jZSwgZ2V0UkNOb3RpY2VQcm9wcyk7XG4vKiogQGludGVybmFsIHRlc3QgT25seSBmdW5jdGlvbi4gTm90IHdvcmsgb24gcHJvZHVjdGlvbiAqL1xuZXhwb3J0IHZhciBnZXRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldEluc3RhbmNlKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IG1lc3NhZ2VJbnN0YW5jZSA6IG51bGw7XG59O1xuZXhwb3J0IGRlZmF1bHQgYXBpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgdXNlUkNOb3RpZmljYXRpb24gZnJvbSBcInJjLW5vdGlmaWNhdGlvbi9lcy91c2VOb3RpZmljYXRpb25cIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGF0dGFjaFR5cGVBcGksIGdldEtleVRoZW5JbmNyZWFzZUtleSwgdHlwZUxpc3QgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBDb25maWdDb25zdW1lciB9IGZyb20gJy4uLy4uL2NvbmZpZy1wcm92aWRlcic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVVc2VNZXNzYWdlKGdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpIHtcbiAgdmFyIHVzZU1lc3NhZ2UgPSBmdW5jdGlvbiB1c2VNZXNzYWdlKCkge1xuICAgIC8vIFdlIGNhbiBvbmx5IGdldCBjb250ZW50IGJ5IHJlbmRlclxuICAgIHZhciBnZXRQcmVmaXhDbHM7XG4gICAgdmFyIGdldFBvcHVwQ29udGFpbmVyO1xuICAgIC8vIFdlIGNyZWF0ZSBhIHByb3h5IHRvIGhhbmRsZSBkZWxheSBjcmVhdGVkIGluc3RhbmNlXG4gICAgdmFyIGlubmVySW5zdGFuY2UgPSBudWxsO1xuICAgIHZhciBwcm94eSA9IHtcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG5vdGljZVByb3BzLCBob2xkZXJDYWxsYmFjaykge1xuICAgICAgICBpbm5lckluc3RhbmNlID09PSBudWxsIHx8IGlubmVySW5zdGFuY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVySW5zdGFuY2UuY29tcG9uZW50LmFkZChub3RpY2VQcm9wcywgaG9sZGVyQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIF91c2VSQ05vdGlmaWNhdGlvbiA9IHVzZVJDTm90aWZpY2F0aW9uKHByb3h5KSxcbiAgICAgIF91c2VSQ05vdGlmaWNhdGlvbjIgPSBfc2xpY2VkVG9BcnJheShfdXNlUkNOb3RpZmljYXRpb24sIDIpLFxuICAgICAgaG9va05vdGlmeSA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMF0sXG4gICAgICBob2xkZXIgPSBfdXNlUkNOb3RpZmljYXRpb24yWzFdO1xuICAgIGZ1bmN0aW9uIG5vdGlmeShhcmdzKSB7XG4gICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gYXJncy5wcmVmaXhDbHM7XG4gICAgICB2YXIgbWVyZ2VkUHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdtZXNzYWdlJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIHZhciByb290UHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYXJncy5rZXkgfHwgZ2V0S2V5VGhlbkluY3JlYXNlS2V5KCk7XG4gICAgICB2YXIgY2xvc2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzLm9uQ2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3Mub25DbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0UmNOb3RpZmljYXRpb25JbnN0YW5jZShfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IG1lcmdlZFByZWZpeENscyxcbiAgICAgICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBnZXRQb3B1cENvbnRhaW5lclxuICAgICAgICB9KSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICAgICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2U7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGhvb2tOb3RpZnkoZ2V0UkNOb3RpY2VQcm9wcyhfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgICAgIGtleTogdGFyZ2V0LFxuICAgICAgICAgICAgb25DbG9zZTogY2FsbGJhY2tcbiAgICAgICAgICB9KSwgcHJlZml4Q2xzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgICAgICBpZiAoaW5uZXJJbnN0YW5jZSkge1xuICAgICAgICAgIGlubmVySW5zdGFuY2UucmVtb3ZlTm90aWNlKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXN1bHQudGhlbiA9IGZ1bmN0aW9uIChmaWxsZWQsIHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiBjbG9zZVByb21pc2UudGhlbihmaWxsZWQsIHJlamVjdGVkKTtcbiAgICAgIH07XG4gICAgICByZXN1bHQucHJvbWlzZSA9IGNsb3NlUHJvbWlzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIEZpbGwgZnVuY3Rpb25zXG4gICAgdmFyIGhvb2tBcGlSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICAgIGhvb2tBcGlSZWYuY3VycmVudC5vcGVuID0gbm90aWZ5O1xuICAgIHR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiBhdHRhY2hUeXBlQXBpKGhvb2tBcGlSZWYuY3VycmVudCwgdHlwZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtob29rQXBpUmVmLmN1cnJlbnQsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnN1bWVyLCB7XG4gICAgICBrZXk6IFwiaG9sZGVyXCJcbiAgICB9LCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgZ2V0UHJlZml4Q2xzID0gY29udGV4dC5nZXRQcmVmaXhDbHM7XG4gICAgICBnZXRQb3B1cENvbnRhaW5lciA9IGNvbnRleHQuZ2V0UG9wdXBDb250YWluZXI7XG4gICAgICByZXR1cm4gaG9sZGVyO1xuICAgIH0pXTtcbiAgfTtcbiAgcmV0dXJuIHVzZU1lc3NhZ2U7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBhcml0eTogMiwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT09IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT09IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EID0gJ2ZpbmQnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtZmluZCAtLSB0ZXN0aW5nXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gaXNOdWxsT3JVbmRlZmluZWQoc2VhcmNoVmFsdWUpID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogY2FsbChuYXRpdmVSZXBsYWNlLCB0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVwbGFjZVZhbHVlID09ICdzdHJpbmcnICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCBVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCAnJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICB2YXIgZnVsbFVuaWNvZGU7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcHVzaChyZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXJPckluZmluaXR5KHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQ7XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgcHVzaChjYXB0dXJlcywgbWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gY29uY2F0KFttYXRjaGVkXSwgY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSBwdXNoKHJlcGxhY2VyQXJncywgbmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhhcHBseShyZXBsYWNlVmFsdWUsIHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL2llMTEnKTtcblxuLy8gUmVhY3QgMTYrIHJlbGllcyBvbiBNYXAsIFNldCwgYW5kIHJlcXVlc3RBbmltYXRpb25GcmFtZVxucmVxdWlyZSgnY29yZS1qcy9mZWF0dXJlcy9tYXAnKTtcbnJlcXVpcmUoJ2NvcmUtanMvZmVhdHVyZXMvc2V0Jyk7XG5cbnJlcXVpcmUoJ3JhZicpLnBvbHlmaWxsKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbnZhciBERUZBVUxUX1dISVRFTElTVCA9IFtcbiAgUmVmZXJlbmNlRXJyb3IsXG4gIFR5cGVFcnJvcixcbiAgUmFuZ2VFcnJvclxuXTtcblxudmFyIGVuYWJsZWQgPSBmYWxzZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBlbmFibGVkID0gZmFsc2U7XG4gIFByb21pc2UuX0IgPSBudWxsO1xuICBQcm9taXNlLl9DID0gbnVsbDtcbn1cblxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5mdW5jdGlvbiBlbmFibGUob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKGVuYWJsZWQpIGRpc2FibGUoKTtcbiAgZW5hYmxlZCA9IHRydWU7XG4gIHZhciBpZCA9IDA7XG4gIHZhciBkaXNwbGF5SWQgPSAwO1xuICB2YXIgcmVqZWN0aW9ucyA9IHt9O1xuICBQcm9taXNlLl9CID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICBpZiAoXG4gICAgICBwcm9taXNlLl95ID09PSAyICYmIC8vIElTIFJFSkVDVEVEXG4gICAgICByZWplY3Rpb25zW3Byb21pc2UuX0VdXG4gICAgKSB7XG4gICAgICBpZiAocmVqZWN0aW9uc1twcm9taXNlLl9FXS5sb2dnZWQpIHtcbiAgICAgICAgb25IYW5kbGVkKHByb21pc2UuX0UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHJlamVjdGlvbnNbcHJvbWlzZS5fRV0udGltZW91dCk7XG4gICAgICB9XG4gICAgICBkZWxldGUgcmVqZWN0aW9uc1twcm9taXNlLl9FXTtcbiAgICB9XG4gIH07XG4gIFByb21pc2UuX0MgPSBmdW5jdGlvbiAocHJvbWlzZSwgZXJyKSB7XG4gICAgaWYgKHByb21pc2UuX3ggPT09IDApIHsgLy8gbm90IHlldCBoYW5kbGVkXG4gICAgICBwcm9taXNlLl9FID0gaWQrKztcbiAgICAgIHJlamVjdGlvbnNbcHJvbWlzZS5fRV0gPSB7XG4gICAgICAgIGRpc3BsYXlJZDogbnVsbCxcbiAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgdGltZW91dDogc2V0VGltZW91dChcbiAgICAgICAgICBvblVuaGFuZGxlZC5iaW5kKG51bGwsIHByb21pc2UuX0UpLFxuICAgICAgICAgIC8vIEZvciByZWZlcmVuY2UgZXJyb3JzIGFuZCB0eXBlIGVycm9ycywgdGhpcyBhbG1vc3QgYWx3YXlzXG4gICAgICAgICAgLy8gbWVhbnMgdGhlIHByb2dyYW1tZXIgbWFkZSBhIG1pc3Rha2UsIHNvIGxvZyB0aGVtIGFmdGVyIGp1c3RcbiAgICAgICAgICAvLyAxMDBtc1xuICAgICAgICAgIC8vIG90aGVyd2lzZSwgd2FpdCAyIHNlY29uZHMgdG8gc2VlIGlmIHRoZXkgZ2V0IGhhbmRsZWRcbiAgICAgICAgICBtYXRjaFdoaXRlbGlzdChlcnIsIERFRkFVTFRfV0hJVEVMSVNUKVxuICAgICAgICAgICAgPyAxMDBcbiAgICAgICAgICAgIDogMjAwMFxuICAgICAgICApLFxuICAgICAgICBsb2dnZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gb25VbmhhbmRsZWQoaWQpIHtcbiAgICBpZiAoXG4gICAgICBvcHRpb25zLmFsbFJlamVjdGlvbnMgfHxcbiAgICAgIG1hdGNoV2hpdGVsaXN0KFxuICAgICAgICByZWplY3Rpb25zW2lkXS5lcnJvcixcbiAgICAgICAgb3B0aW9ucy53aGl0ZWxpc3QgfHwgREVGQVVMVF9XSElURUxJU1RcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJlamVjdGlvbnNbaWRdLmRpc3BsYXlJZCA9IGRpc3BsYXlJZCsrO1xuICAgICAgaWYgKG9wdGlvbnMub25VbmhhbmRsZWQpIHtcbiAgICAgICAgcmVqZWN0aW9uc1tpZF0ubG9nZ2VkID0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucy5vblVuaGFuZGxlZChcbiAgICAgICAgICByZWplY3Rpb25zW2lkXS5kaXNwbGF5SWQsXG4gICAgICAgICAgcmVqZWN0aW9uc1tpZF0uZXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdGlvbnNbaWRdLmxvZ2dlZCA9IHRydWU7XG4gICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgIHJlamVjdGlvbnNbaWRdLmRpc3BsYXlJZCxcbiAgICAgICAgICByZWplY3Rpb25zW2lkXS5lcnJvclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbkhhbmRsZWQoaWQpIHtcbiAgICBpZiAocmVqZWN0aW9uc1tpZF0ubG9nZ2VkKSB7XG4gICAgICBpZiAob3B0aW9ucy5vbkhhbmRsZWQpIHtcbiAgICAgICAgb3B0aW9ucy5vbkhhbmRsZWQocmVqZWN0aW9uc1tpZF0uZGlzcGxheUlkLCByZWplY3Rpb25zW2lkXS5lcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKCFyZWplY3Rpb25zW2lkXS5vblVuaGFuZGxlZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1Byb21pc2UgUmVqZWN0aW9uIEhhbmRsZWQgKGlkOiAnICsgcmVqZWN0aW9uc1tpZF0uZGlzcGxheUlkICsgJyk6J1xuICAgICAgICApO1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJyAgVGhpcyBtZWFucyB5b3UgY2FuIGlnbm9yZSBhbnkgcHJldmlvdXMgbWVzc2FnZXMgb2YgdGhlIGZvcm0gXCJQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb25cIiB3aXRoIGlkICcgK1xuICAgICAgICAgIHJlamVjdGlvbnNbaWRdLmRpc3BsYXlJZCArICcuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsb2dFcnJvcihpZCwgZXJyb3IpIHtcbiAgY29uc29sZS53YXJuKCdQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb24gKGlkOiAnICsgaWQgKyAnKTonKTtcbiAgdmFyIGVyclN0ciA9IChlcnJvciAmJiAoZXJyb3Iuc3RhY2sgfHwgZXJyb3IpKSArICcnO1xuICBlcnJTdHIuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICBjb25zb2xlLndhcm4oJyAgJyArIGxpbmUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hXaGl0ZWxpc3QoZXJyb3IsIGxpc3QpIHtcbiAgcmV0dXJuIGxpc3Quc29tZShmdW5jdGlvbiAoY2xzKSB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgY2xzO1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVXNlIHRoZSBmYXN0ZXN0IG1lYW5zIHBvc3NpYmxlIHRvIGV4ZWN1dGUgYSB0YXNrIGluIGl0cyBvd24gdHVybiwgd2l0aFxuLy8gcHJpb3JpdHkgb3ZlciBvdGhlciBldmVudHMgaW5jbHVkaW5nIElPLCBhbmltYXRpb24sIHJlZmxvdywgYW5kIHJlZHJhd1xuLy8gZXZlbnRzIGluIGJyb3dzZXJzLlxuLy9cbi8vIEFuIGV4Y2VwdGlvbiB0aHJvd24gYnkgYSB0YXNrIHdpbGwgcGVybWFuZW50bHkgaW50ZXJydXB0IHRoZSBwcm9jZXNzaW5nIG9mXG4vLyBzdWJzZXF1ZW50IHRhc2tzLiBUaGUgaGlnaGVyIGxldmVsIGBhc2FwYCBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgaWYgYW5cbi8vIGV4Y2VwdGlvbiBpcyB0aHJvd24gYnkgYSB0YXNrLCB0aGF0IHRoZSB0YXNrIHF1ZXVlIHdpbGwgY29udGludWUgZmx1c2hpbmcgYXNcbi8vIHNvb24gYXMgcG9zc2libGUsIGJ1dCBpZiB5b3UgdXNlIGByYXdBc2FwYCBkaXJlY3RseSwgeW91IGFyZSByZXNwb25zaWJsZSB0b1xuLy8gZWl0aGVyIGVuc3VyZSB0aGF0IG5vIGV4Y2VwdGlvbnMgYXJlIHRocm93biBmcm9tIHlvdXIgdGFzaywgb3IgdG8gbWFudWFsbHlcbi8vIGNhbGwgYHJhd0FzYXAucmVxdWVzdEZsdXNoYCBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duLlxubW9kdWxlLmV4cG9ydHMgPSByYXdBc2FwO1xuZnVuY3Rpb24gcmF3QXNhcCh0YXNrKSB7XG4gICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcmVxdWVzdEZsdXNoKCk7XG4gICAgICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRXF1aXZhbGVudCB0byBwdXNoLCBidXQgYXZvaWRzIGEgZnVuY3Rpb24gY2FsbC5cbiAgICBxdWV1ZVtxdWV1ZS5sZW5ndGhdID0gdGFzaztcbn1cblxudmFyIHF1ZXVlID0gW107XG4vLyBPbmNlIGEgZmx1c2ggaGFzIGJlZW4gcmVxdWVzdGVkLCBubyBmdXJ0aGVyIGNhbGxzIHRvIGByZXF1ZXN0Rmx1c2hgIGFyZVxuLy8gbmVjZXNzYXJ5IHVudGlsIHRoZSBuZXh0IGBmbHVzaGAgY29tcGxldGVzLlxudmFyIGZsdXNoaW5nID0gZmFsc2U7XG4vLyBgcmVxdWVzdEZsdXNoYCBpcyBhbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyBtZXRob2QgdGhhdCBhdHRlbXB0cyB0byBraWNrXG4vLyBvZmYgYSBgZmx1c2hgIGV2ZW50IGFzIHF1aWNrbHkgYXMgcG9zc2libGUuIGBmbHVzaGAgd2lsbCBhdHRlbXB0IHRvIGV4aGF1c3Rcbi8vIHRoZSBldmVudCBxdWV1ZSBiZWZvcmUgeWllbGRpbmcgdG8gdGhlIGJyb3dzZXIncyBvd24gZXZlbnQgbG9vcC5cbnZhciByZXF1ZXN0Rmx1c2g7XG4vLyBUaGUgcG9zaXRpb24gb2YgdGhlIG5leHQgdGFzayB0byBleGVjdXRlIGluIHRoZSB0YXNrIHF1ZXVlLiBUaGlzIGlzXG4vLyBwcmVzZXJ2ZWQgYmV0d2VlbiBjYWxscyB0byBgZmx1c2hgIHNvIHRoYXQgaXQgY2FuIGJlIHJlc3VtZWQgaWZcbi8vIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLlxudmFyIGluZGV4ID0gMDtcbi8vIElmIGEgdGFzayBzY2hlZHVsZXMgYWRkaXRpb25hbCB0YXNrcyByZWN1cnNpdmVseSwgdGhlIHRhc2sgcXVldWUgY2FuIGdyb3dcbi8vIHVuYm91bmRlZC4gVG8gcHJldmVudCBtZW1vcnkgZXhoYXVzdGlvbiwgdGhlIHRhc2sgcXVldWUgd2lsbCBwZXJpb2RpY2FsbHlcbi8vIHRydW5jYXRlIGFscmVhZHktY29tcGxldGVkIHRhc2tzLlxudmFyIGNhcGFjaXR5ID0gMTAyNDtcblxuLy8gVGhlIGZsdXNoIGZ1bmN0aW9uIHByb2Nlc3NlcyBhbGwgdGFza3MgdGhhdCBoYXZlIGJlZW4gc2NoZWR1bGVkIHdpdGhcbi8vIGByYXdBc2FwYCB1bmxlc3MgYW5kIHVudGlsIG9uZSBvZiB0aG9zZSB0YXNrcyB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuLy8gSWYgYSB0YXNrIHRocm93cyBhbiBleGNlcHRpb24sIGBmbHVzaGAgZW5zdXJlcyB0aGF0IGl0cyBzdGF0ZSB3aWxsIHJlbWFpblxuLy8gY29uc2lzdGVudCBhbmQgd2lsbCByZXN1bWUgd2hlcmUgaXQgbGVmdCBvZmYgd2hlbiBjYWxsZWQgYWdhaW4uXG4vLyBIb3dldmVyLCBgZmx1c2hgIGRvZXMgbm90IG1ha2UgYW55IGFycmFuZ2VtZW50cyB0byBiZSBjYWxsZWQgYWdhaW4gaWYgYW5cbi8vIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB3aGlsZSAoaW5kZXggPCBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgICAvLyBBZHZhbmNlIHRoZSBpbmRleCBiZWZvcmUgY2FsbGluZyB0aGUgdGFzay4gVGhpcyBlbnN1cmVzIHRoYXQgd2Ugd2lsbFxuICAgICAgICAvLyBiZWdpbiBmbHVzaGluZyBvbiB0aGUgbmV4dCB0YXNrIHRoZSB0YXNrIHRocm93cyBhbiBlcnJvci5cbiAgICAgICAgaW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIHF1ZXVlW2N1cnJlbnRJbmRleF0uY2FsbCgpO1xuICAgICAgICAvLyBQcmV2ZW50IGxlYWtpbmcgbWVtb3J5IGZvciBsb25nIGNoYWlucyBvZiByZWN1cnNpdmUgY2FsbHMgdG8gYGFzYXBgLlxuICAgICAgICAvLyBJZiB3ZSBjYWxsIGBhc2FwYCB3aXRoaW4gdGFza3Mgc2NoZWR1bGVkIGJ5IGBhc2FwYCwgdGhlIHF1ZXVlIHdpbGxcbiAgICAgICAgLy8gZ3JvdywgYnV0IHRvIGF2b2lkIGFuIE8obikgd2FsayBmb3IgZXZlcnkgdGFzayB3ZSBleGVjdXRlLCB3ZSBkb24ndFxuICAgICAgICAvLyBzaGlmdCB0YXNrcyBvZmYgdGhlIHF1ZXVlIGFmdGVyIHRoZXkgaGF2ZSBiZWVuIGV4ZWN1dGVkLlxuICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBwZXJpb2RpY2FsbHkgc2hpZnQgMTAyNCB0YXNrcyBvZmYgdGhlIHF1ZXVlLlxuICAgICAgICBpZiAoaW5kZXggPiBjYXBhY2l0eSkge1xuICAgICAgICAgICAgLy8gTWFudWFsbHkgc2hpZnQgYWxsIHZhbHVlcyBzdGFydGluZyBhdCB0aGUgaW5kZXggYmFjayB0byB0aGVcbiAgICAgICAgICAgIC8vIGJlZ2lubmluZyBvZiB0aGUgcXVldWUuXG4gICAgICAgICAgICBmb3IgKHZhciBzY2FuID0gMCwgbmV3TGVuZ3RoID0gcXVldWUubGVuZ3RoIC0gaW5kZXg7IHNjYW4gPCBuZXdMZW5ndGg7IHNjYW4rKykge1xuICAgICAgICAgICAgICAgIHF1ZXVlW3NjYW5dID0gcXVldWVbc2NhbiArIGluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCAtPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgIGluZGV4ID0gMDtcbiAgICBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBgcmVxdWVzdEZsdXNoYCBpcyBpbXBsZW1lbnRlZCB1c2luZyBhIHN0cmF0ZWd5IGJhc2VkIG9uIGRhdGEgY29sbGVjdGVkIGZyb21cbi8vIGV2ZXJ5IGF2YWlsYWJsZSBTYXVjZUxhYnMgU2VsZW5pdW0gd2ViIGRyaXZlciB3b3JrZXIgYXQgdGltZSBvZiB3cml0aW5nLlxuLy8gaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMW1HLTVVWUd1cDVxeEdkRU1Xa2hQNkJXQ3owNTNOVWIyRTFRb1VUVTE2dUEvZWRpdCNnaWQ9NzgzNzI0NTkzXG5cbi8vIFNhZmFyaSA2IGFuZCA2LjEgZm9yIGRlc2t0b3AsIGlQYWQsIGFuZCBpUGhvbmUgYXJlIHRoZSBvbmx5IGJyb3dzZXJzIHRoYXRcbi8vIGhhdmUgV2ViS2l0TXV0YXRpb25PYnNlcnZlciBidXQgbm90IHVuLXByZWZpeGVkIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXN0IHVzZSBgZ2xvYmFsYCBvciBgc2VsZmAgaW5zdGVhZCBvZiBgd2luZG93YCB0byB3b3JrIGluIGJvdGggZnJhbWVzIGFuZCB3ZWJcbi8vIHdvcmtlcnMuIGBnbG9iYWxgIGlzIGEgcHJvdmlzaW9uIG9mIEJyb3dzZXJpZnksIE1yLCBNcnMsIG9yIE1vcC5cblxuLyogZ2xvYmFscyBzZWxmICovXG52YXIgc2NvcGUgPSB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogc2VsZjtcbnZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IHNjb3BlLk11dGF0aW9uT2JzZXJ2ZXIgfHwgc2NvcGUuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcblxuLy8gTXV0YXRpb25PYnNlcnZlcnMgYXJlIGRlc2lyYWJsZSBiZWNhdXNlIHRoZXkgaGF2ZSBoaWdoIHByaW9yaXR5IGFuZCB3b3JrXG4vLyByZWxpYWJseSBldmVyeXdoZXJlIHRoZXkgYXJlIGltcGxlbWVudGVkLlxuLy8gVGhleSBhcmUgaW1wbGVtZW50ZWQgaW4gYWxsIG1vZGVybiBicm93c2Vycy5cbi8vXG4vLyAtIEFuZHJvaWQgNC00LjNcbi8vIC0gQ2hyb21lIDI2LTM0XG4vLyAtIEZpcmVmb3ggMTQtMjlcbi8vIC0gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbi8vIC0gaVBhZCBTYWZhcmkgNi03LjFcbi8vIC0gaVBob25lIFNhZmFyaSA3LTcuMVxuLy8gLSBTYWZhcmkgNi03XG5pZiAodHlwZW9mIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXF1ZXN0Rmx1c2ggPSBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG5cbi8vIE1lc3NhZ2VDaGFubmVscyBhcmUgZGVzaXJhYmxlIGJlY2F1c2UgdGhleSBnaXZlIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIEhUTUxcbi8vIHRhc2sgcXVldWUsIGFyZSBpbXBsZW1lbnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCwgU2FmYXJpIDUuMC0xLCBhbmQgT3BlcmFcbi8vIDExLTEyLCBhbmQgaW4gd2ViIHdvcmtlcnMgaW4gbWFueSBlbmdpbmVzLlxuLy8gQWx0aG91Z2ggbWVzc2FnZSBjaGFubmVscyB5aWVsZCB0byBhbnkgcXVldWVkIHJlbmRlcmluZyBhbmQgSU8gdGFza3MsIHRoZXlcbi8vIHdvdWxkIGJlIGJldHRlciB0aGFuIGltcG9zaW5nIHRoZSA0bXMgZGVsYXkgb2YgdGltZXJzLlxuLy8gSG93ZXZlciwgdGhleSBkbyBub3Qgd29yayByZWxpYWJseSBpbiBJbnRlcm5ldCBFeHBsb3JlciBvciBTYWZhcmkuXG5cbi8vIEludGVybmV0IEV4cGxvcmVyIDEwIGlzIHRoZSBvbmx5IGJyb3dzZXIgdGhhdCBoYXMgc2V0SW1tZWRpYXRlIGJ1dCBkb2VzXG4vLyBub3QgaGF2ZSBNdXRhdGlvbk9ic2VydmVycy5cbi8vIEFsdGhvdWdoIHNldEltbWVkaWF0ZSB5aWVsZHMgdG8gdGhlIGJyb3dzZXIncyByZW5kZXJlciwgaXQgd291bGQgYmVcbi8vIHByZWZlcnJhYmxlIHRvIGZhbGxpbmcgYmFjayB0byBzZXRUaW1lb3V0IHNpbmNlIGl0IGRvZXMgbm90IGhhdmVcbi8vIHRoZSBtaW5pbXVtIDRtcyBwZW5hbHR5LlxuLy8gVW5mb3J0dW5hdGVseSB0aGVyZSBhcHBlYXJzIHRvIGJlIGEgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwIE1vYmlsZSAoYW5kXG4vLyBEZXNrdG9wIHRvIGEgbGVzc2VyIGV4dGVudCkgdGhhdCByZW5kZXJzIGJvdGggc2V0SW1tZWRpYXRlIGFuZFxuLy8gTWVzc2FnZUNoYW5uZWwgdXNlbGVzcyBmb3IgdGhlIHB1cnBvc2VzIG9mIEFTQVAuXG4vLyBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EvaXNzdWVzLzM5NlxuXG4vLyBUaW1lcnMgYXJlIGltcGxlbWVudGVkIHVuaXZlcnNhbGx5LlxuLy8gV2UgZmFsbCBiYWNrIHRvIHRpbWVycyBpbiB3b3JrZXJzIGluIG1vc3QgZW5naW5lcywgYW5kIGluIGZvcmVncm91bmRcbi8vIGNvbnRleHRzIGluIHRoZSBmb2xsb3dpbmcgYnJvd3NlcnMuXG4vLyBIb3dldmVyLCBub3RlIHRoYXQgZXZlbiB0aGlzIHNpbXBsZSBjYXNlIHJlcXVpcmVzIG51YW5jZXMgdG8gb3BlcmF0ZSBpbiBhXG4vLyBicm9hZCBzcGVjdHJ1bSBvZiBicm93c2Vycy5cbi8vXG4vLyAtIEZpcmVmb3ggMy0xM1xuLy8gLSBJbnRlcm5ldCBFeHBsb3JlciA2LTlcbi8vIC0gaVBhZCBTYWZhcmkgNC4zXG4vLyAtIEx5bnggMi44Ljdcbn0gZWxzZSB7XG4gICAgcmVxdWVzdEZsdXNoID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKGZsdXNoKTtcbn1cblxuLy8gYHJlcXVlc3RGbHVzaGAgcmVxdWVzdHMgdGhhdCB0aGUgaGlnaCBwcmlvcml0eSBldmVudCBxdWV1ZSBiZSBmbHVzaGVkIGFzXG4vLyBzb29uIGFzIHBvc3NpYmxlLlxuLy8gVGhpcyBpcyB1c2VmdWwgdG8gcHJldmVudCBhbiBlcnJvciB0aHJvd24gaW4gYSB0YXNrIGZyb20gc3RhbGxpbmcgdGhlIGV2ZW50XG4vLyBxdWV1ZSBpZiB0aGUgZXhjZXB0aW9uIGhhbmRsZWQgYnkgTm9kZS5qc+KAmXNcbi8vIGBwcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIilgIG9yIGJ5IGEgZG9tYWluLlxucmF3QXNhcC5yZXF1ZXN0Rmx1c2ggPSByZXF1ZXN0Rmx1c2g7XG5cbi8vIFRvIHJlcXVlc3QgYSBoaWdoIHByaW9yaXR5IGV2ZW50LCB3ZSBpbmR1Y2UgYSBtdXRhdGlvbiBvYnNlcnZlciBieSB0b2dnbGluZ1xuLy8gdGhlIHRleHQgb2YgYSB0ZXh0IG5vZGUgYmV0d2VlbiBcIjFcIiBhbmQgXCItMVwiLlxuZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbU11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgdG9nZ2xlID0gMTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pO1xuICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbiAgICAgICAgdG9nZ2xlID0gLXRvZ2dsZTtcbiAgICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlO1xuICAgIH07XG59XG5cbi8vIFRoZSBtZXNzYWdlIGNoYW5uZWwgdGVjaG5pcXVlIHdhcyBkaXNjb3ZlcmVkIGJ5IE1hbHRlIFVibCBhbmQgd2FzIHRoZVxuLy8gb3JpZ2luYWwgZm91bmRhdGlvbiBmb3IgdGhpcyBsaWJyYXJ5LlxuLy8gaHR0cDovL3d3dy5ub25ibG9ja2luZy5pby8yMDExLzA2L3dpbmRvd25leHR0aWNrLmh0bWxcblxuLy8gU2FmYXJpIDYuMC41IChhdCBsZWFzdCkgaW50ZXJtaXR0ZW50bHkgZmFpbHMgdG8gY3JlYXRlIG1lc3NhZ2UgcG9ydHMgb24gYVxuLy8gcGFnZSdzIGZpcnN0IGxvYWQuIFRoYW5rZnVsbHksIHRoaXMgdmVyc2lvbiBvZiBTYWZhcmkgc3VwcG9ydHNcbi8vIE11dGF0aW9uT2JzZXJ2ZXJzLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGZhbGwgYmFjayBpbiB0aGF0IGNhc2UuXG5cbi8vIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21NZXNzYWdlQ2hhbm5lbChjYWxsYmFjaykge1xuLy8gICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4vLyAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBjYWxsYmFjaztcbi8vICAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4vLyAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4vLyAgICAgfTtcbi8vIH1cblxuLy8gRm9yIHJlYXNvbnMgZXhwbGFpbmVkIGFib3ZlLCB3ZSBhcmUgYWxzbyB1bmFibGUgdG8gdXNlIGBzZXRJbW1lZGlhdGVgXG4vLyB1bmRlciBhbnkgY2lyY3Vtc3RhbmNlcy5cbi8vIEV2ZW4gaWYgd2Ugd2VyZSwgdGhlcmUgaXMgYW5vdGhlciBidWcgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4vLyBJdCBpcyBub3Qgc3VmZmljaWVudCB0byBhc3NpZ24gYHNldEltbWVkaWF0ZWAgdG8gYHJlcXVlc3RGbHVzaGAgYmVjYXVzZVxuLy8gYHNldEltbWVkaWF0ZWAgbXVzdCBiZSBjYWxsZWQgKmJ5IG5hbWUqIGFuZCB0aGVyZWZvcmUgbXVzdCBiZSB3cmFwcGVkIGluIGFcbi8vIGNsb3N1cmUuXG4vLyBOZXZlciBmb3JnZXQuXG5cbi8vIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21TZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbi8vICAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4vLyAgICAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4vLyAgICAgfTtcbi8vIH1cblxuLy8gU2FmYXJpIDYuMCBoYXMgYSBwcm9ibGVtIHdoZXJlIHRpbWVycyB3aWxsIGdldCBsb3N0IHdoaWxlIHRoZSB1c2VyIGlzXG4vLyBzY3JvbGxpbmcuIFRoaXMgcHJvYmxlbSBkb2VzIG5vdCBpbXBhY3QgQVNBUCBiZWNhdXNlIFNhZmFyaSA2LjAgc3VwcG9ydHNcbi8vIG11dGF0aW9uIG9ic2VydmVycywgc28gdGhhdCBpbXBsZW1lbnRhdGlvbiBpcyB1c2VkIGluc3RlYWQuXG4vLyBIb3dldmVyLCBpZiB3ZSBldmVyIGVsZWN0IHRvIHVzZSB0aW1lcnMgaW4gU2FmYXJpLCB0aGUgcHJldmFsZW50IHdvcmstYXJvdW5kXG4vLyBpcyB0byBhZGQgYSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgdGhhdCBjYWxscyBmb3IgYSBmbHVzaC5cblxuLy8gYHNldFRpbWVvdXRgIGRvZXMgbm90IGNhbGwgdGhlIHBhc3NlZCBjYWxsYmFjayBpZiB0aGUgZGVsYXkgaXMgbGVzcyB0aGFuXG4vLyBhcHByb3hpbWF0ZWx5IDcgaW4gd2ViIHdvcmtlcnMgaW4gRmlyZWZveCA4IHRocm91Z2ggMTgsIGFuZCBzb21ldGltZXMgbm90XG4vLyBldmVuIHRoZW4uXG5cbmZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcihjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbiAgICAgICAgLy8gV2UgZGlzcGF0Y2ggYSB0aW1lb3V0IHdpdGggYSBzcGVjaWZpZWQgZGVsYXkgb2YgMCBmb3IgZW5naW5lcyB0aGF0XG4gICAgICAgIC8vIGNhbiByZWxpYWJseSBhY2NvbW1vZGF0ZSB0aGF0IHJlcXVlc3QuIFRoaXMgd2lsbCB1c3VhbGx5IGJlIHNuYXBwZWRcbiAgICAgICAgLy8gdG8gYSA0IG1pbGlzZWNvbmQgZGVsYXksIGJ1dCBvbmNlIHdlJ3JlIGZsdXNoaW5nLCB0aGVyZSdzIG5vIGRlbGF5XG4gICAgICAgIC8vIGJldHdlZW4gZXZlbnRzLlxuICAgICAgICB2YXIgdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoaGFuZGxlVGltZXIsIDApO1xuICAgICAgICAvLyBIb3dldmVyLCBzaW5jZSB0aGlzIHRpbWVyIGdldHMgZnJlcXVlbnRseSBkcm9wcGVkIGluIEZpcmVmb3hcbiAgICAgICAgLy8gd29ya2Vycywgd2UgZW5saXN0IGFuIGludGVydmFsIGhhbmRsZSB0aGF0IHdpbGwgdHJ5IHRvIGZpcmVcbiAgICAgICAgLy8gYW4gZXZlbnQgMjAgdGltZXMgcGVyIHNlY29uZCB1bnRpbCBpdCBzdWNjZWVkcy5cbiAgICAgICAgdmFyIGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwoaGFuZGxlVGltZXIsIDUwKTtcblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVUaW1lcigpIHtcbiAgICAgICAgICAgIC8vIFdoaWNoZXZlciB0aW1lciBzdWNjZWVkcyB3aWxsIGNhbmNlbCBib3RoIHRpbWVycyBhbmRcbiAgICAgICAgICAgIC8vIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbEhhbmRsZSk7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gVGhpcyBpcyBmb3IgYGFzYXAuanNgIG9ubHkuXG4vLyBJdHMgbmFtZSB3aWxsIGJlIHBlcmlvZGljYWxseSByYW5kb21pemVkIHRvIGJyZWFrIGFueSBjb2RlIHRoYXQgZGVwZW5kcyBvblxuLy8gaXRzIGV4aXN0ZW5jZS5cbnJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyO1xuXG4vLyBBU0FQIHdhcyBvcmlnaW5hbGx5IGEgbmV4dFRpY2sgc2hpbSBpbmNsdWRlZCBpbiBRLiBUaGlzIHdhcyBmYWN0b3JlZCBvdXRcbi8vIGludG8gdGhpcyBBU0FQIHBhY2thZ2UuIEl0IHdhcyBsYXRlciBhZGFwdGVkIHRvIFJTVlAgd2hpY2ggbWFkZSBmdXJ0aGVyXG4vLyBhbWVuZG1lbnRzLiBUaGVzZSBkZWNpc2lvbnMsIHBhcnRpY3VsYXJseSB0byBtYXJnaW5hbGl6ZSBNZXNzYWdlQ2hhbm5lbCBhbmRcbi8vIHRvIGNhcHR1cmUgdGhlIE11dGF0aW9uT2JzZXJ2ZXIgaW1wbGVtZW50YXRpb24gaW4gYSBjbG9zdXJlLCB3ZXJlIGludGVncmF0ZWRcbi8vIGJhY2sgaW50byBBU0FQIHByb3Blci5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aWxkZWlvL3JzdnAuanMvYmxvYi9jZGRmNzIzMjU0NmE5Y2Y4NTg1MjRiNzVjZGU2ZjllZGY3MjYyMGE3L2xpYi9yc3ZwL2FzYXAuanNcbiIsIid1c2Ugc3RyaWN0JztcblxuLy9UaGlzIGZpbGUgY29udGFpbnMgdGhlIEVTNiBleHRlbnNpb25zIHRvIHRoZSBjb3JlIFByb21pc2VzL0ErIEFQSVxuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cbi8qIFN0YXRpYyBGdW5jdGlvbnMgKi9cblxudmFyIFRSVUUgPSB2YWx1ZVByb21pc2UodHJ1ZSk7XG52YXIgRkFMU0UgPSB2YWx1ZVByb21pc2UoZmFsc2UpO1xudmFyIE5VTEwgPSB2YWx1ZVByb21pc2UobnVsbCk7XG52YXIgVU5ERUZJTkVEID0gdmFsdWVQcm9taXNlKHVuZGVmaW5lZCk7XG52YXIgWkVSTyA9IHZhbHVlUHJvbWlzZSgwKTtcbnZhciBFTVBUWVNUUklORyA9IHZhbHVlUHJvbWlzZSgnJyk7XG5cbmZ1bmN0aW9uIHZhbHVlUHJvbWlzZSh2YWx1ZSkge1xuICB2YXIgcCA9IG5ldyBQcm9taXNlKFByb21pc2UuX0QpO1xuICBwLl95ID0gMTtcbiAgcC5feiA9IHZhbHVlO1xuICByZXR1cm4gcDtcbn1cblByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gTlVMTDtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBVTkRFRklORUQ7XG4gIGlmICh2YWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuIFRSVUU7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHJldHVybiBGQUxTRTtcbiAgaWYgKHZhbHVlID09PSAwKSByZXR1cm4gWkVSTztcbiAgaWYgKHZhbHVlID09PSAnJykgcmV0dXJuIEVNUFRZU1RSSU5HO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhlbiA9IHZhbHVlLnRoZW47XG4gICAgICBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHRoZW4uYmluZCh2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByZWplY3QoZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZVByb21pc2UodmFsdWUpO1xufTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBpZiAodHlwZW9mIEFycmF5LmZyb20gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFUzIwMTUrLCBpdGVyYWJsZXMgZXhpc3RcbiAgICBpdGVyYWJsZVRvQXJyYXkgPSBBcnJheS5mcm9tO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIC8vIEVTNSwgb25seSBhcnJheXMgYW5kIGFycmF5LWxpa2VzIGV4aXN0XG4gIGl0ZXJhYmxlVG9BcnJheSA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh4KTsgfTtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGl0ZXJhYmxlKTtcbn1cblxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIHZhciBhcmdzID0gaXRlcmFibGVUb0FycmF5KGFycik7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICB2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7XG4gICAgZnVuY3Rpb24gcmVzKGksIHZhbCkge1xuICAgICAgaWYgKHZhbCAmJiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIFByb21pc2UgJiYgdmFsLnRoZW4gPT09IFByb21pc2UucHJvdG90eXBlLnRoZW4pIHtcbiAgICAgICAgICB3aGlsZSAodmFsLl95ID09PSAzKSB7XG4gICAgICAgICAgICB2YWwgPSB2YWwuX3o7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWwuX3kgPT09IDEpIHJldHVybiByZXMoaSwgdmFsLl96KTtcbiAgICAgICAgICBpZiAodmFsLl95ID09PSAyKSByZWplY3QodmFsLl96KTtcbiAgICAgICAgICB2YWwudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIHAgPSBuZXcgUHJvbWlzZSh0aGVuLmJpbmQodmFsKSk7XG4gICAgICAgICAgICBwLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcmdzW2ldID0gdmFsO1xuICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzKGksIGFyZ3NbaV0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBvblNldHRsZWRGdWxmaWxsKHZhbHVlKSB7XG4gIHJldHVybiB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZnVuY3Rpb24gb25TZXR0bGVkUmVqZWN0KHJlYXNvbikge1xuICByZXR1cm4geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogcmVhc29uIH07XG59XG5mdW5jdGlvbiBtYXBBbGxTZXR0bGVkKGl0ZW0pIHtcbiAgaWYoaXRlbSAmJiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnIHx8IHR5cGVvZiBpdGVtID09PSAnZnVuY3Rpb24nKSl7XG4gICAgaWYoaXRlbSBpbnN0YW5jZW9mIFByb21pc2UgJiYgaXRlbS50aGVuID09PSBQcm9taXNlLnByb3RvdHlwZS50aGVuKXtcbiAgICAgIHJldHVybiBpdGVtLnRoZW4ob25TZXR0bGVkRnVsZmlsbCwgb25TZXR0bGVkUmVqZWN0KTtcbiAgICB9XG4gICAgdmFyIHRoZW4gPSBpdGVtLnRoZW47XG4gICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UodGhlbi5iaW5kKGl0ZW0pKS50aGVuKG9uU2V0dGxlZEZ1bGZpbGwsIG9uU2V0dGxlZFJlamVjdClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb25TZXR0bGVkRnVsZmlsbChpdGVtKTtcbn1cblByb21pc2UuYWxsU2V0dGxlZCA9IGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlcmFibGVUb0FycmF5KGl0ZXJhYmxlKS5tYXAobWFwQWxsU2V0dGxlZCkpO1xufTtcblxuUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWplY3QodmFsdWUpO1xuICB9KTtcbn07XG5cblByb21pc2UucmFjZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpdGVyYWJsZVRvQXJyYXkodmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qIFByb3RvdHlwZSBNZXRob2RzICovXG5cblByb21pc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTtcbn07XG5cbmZ1bmN0aW9uIGdldEFnZ3JlZ2F0ZUVycm9yKGVycm9ycyl7XG4gIGlmKHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgcmV0dXJuIG5ldyBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsJ0FsbCBwcm9taXNlcyB3ZXJlIHJlamVjdGVkJyk7XG4gIH1cblxuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ0FsbCBwcm9taXNlcyB3ZXJlIHJlamVjdGVkJyk7XG5cbiAgZXJyb3IubmFtZSA9ICdBZ2dyZWdhdGVFcnJvcic7XG4gIGVycm9yLmVycm9ycyA9IGVycm9ycztcblxuICByZXR1cm4gZXJyb3I7XG59XG5cblByb21pc2UuYW55ID0gZnVuY3Rpb24gcHJvbWlzZUFueSh2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBwcm9taXNlcyA9IGl0ZXJhYmxlVG9BcnJheSh2YWx1ZXMpO1xuICAgIHZhciBoYXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciByZWplY3Rpb25SZWFzb25zID0gW107XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlT25jZSh2YWx1ZSkge1xuICAgICAgaWYgKCFoYXNSZXNvbHZlZCkge1xuICAgICAgICBoYXNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdGlvbkNoZWNrKHJlYXNvbikge1xuICAgICAgcmVqZWN0aW9uUmVhc29ucy5wdXNoKHJlYXNvbik7XG5cbiAgICAgIGlmIChyZWplY3Rpb25SZWFzb25zLmxlbmd0aCA9PT0gcHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlamVjdChnZXRBZ2dyZWdhdGVFcnJvcihyZWplY3Rpb25SZWFzb25zKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYocHJvbWlzZXMubGVuZ3RoID09PSAwKXtcbiAgICAgIHJlamVjdChnZXRBZ2dyZWdhdGVFcnJvcihyZWplY3Rpb25SZWFzb25zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2VzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4ocmVzb2x2ZU9uY2UsIHJlamVjdGlvbkNoZWNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zICovXG52YXIgZyA9XG4gICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAge31cblxudmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gZyxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGcgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIGcgJiZcbiAgICAnQmxvYicgaW4gZyAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZyxcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gZ1xufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fiFdL2kudGVzdChuYW1lKSB8fCBuYW1lID09PSAnJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIGlmIChoZWFkZXIubGVuZ3RoICE9IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSGVhZGVycyBjb25zdHJ1Y3RvcjogZXhwZWN0ZWQgbmFtZS92YWx1ZSBwYWlyIHRvIGJlIGxlbmd0aCAyLCBmb3VuZCcgKyBoZWFkZXIubGVuZ3RoKVxuICAgICAgfVxuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuX25vQm9keSkgcmV0dXJuXG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgdmFyIG1hdGNoID0gL2NoYXJzZXQ9KFtBLVphLXowLTlfLV0rKS8uZXhlYyhibG9iLnR5cGUpXG4gIHZhciBlbmNvZGluZyA9IG1hdGNoID8gbWF0Y2hbMV0gOiAndXRmLTgnXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IsIGVuY29kaW5nKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAvKlxuICAgICAgZmV0Y2gtbW9jayB3cmFwcyB0aGUgUmVzcG9uc2Ugb2JqZWN0IGluIGFuIEVTNiBQcm94eSB0b1xuICAgICAgcHJvdmlkZSB1c2VmdWwgdGVzdCBoYXJuZXNzIGZlYXR1cmVzIHN1Y2ggYXMgZmx1c2guIEhvd2V2ZXIsIG9uXG4gICAgICBFUzUgYnJvd3NlcnMgd2l0aG91dCBmZXRjaCBvciBQcm94eSBzdXBwb3J0IHBvbGx5ZmlsbHMgbXVzdCBiZSB1c2VkO1xuICAgICAgdGhlIHByb3h5LXBvbGx5ZmlsbCBpcyB1bmFibGUgdG8gcHJveHkgYW4gYXR0cmlidXRlIHVubGVzcyBpdCBleGlzdHNcbiAgICAgIG9uIHRoZSBvYmplY3QgYmVmb3JlIHRoZSBQcm94eSBpcyBjcmVhdGVkLiBUaGlzIGNoYW5nZSBlbnN1cmVzXG4gICAgICBSZXNwb25zZS5ib2R5VXNlZCBleGlzdHMgb24gdGhlIGluc3RhbmNlLCB3aGlsZSBtYWludGFpbmluZyB0aGVcbiAgICAgIHNlbWFudGljIG9mIHNldHRpbmcgUmVxdWVzdC5ib2R5VXNlZCBpbiB0aGUgY29uc3RydWN0b3IgYmVmb3JlXG4gICAgICBfaW5pdEJvZHkgaXMgY2FsbGVkLlxuICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgdGhpcy5ib2R5VXNlZCA9IHRoaXMuYm9keVVzZWRcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX25vQm9keSA9IHRydWU7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIGlzQ29uc3VtZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKGlzQ29uc3VtZWQpIHtcbiAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnVmZmVyLnNsaWNlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZU9mZnNldCArIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIGFzIEFycmF5QnVmZmVyJylcbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnQ09OTkVDVCcsICdERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQQVRDSCcsICdQT1NUJywgJ1BVVCcsICdUUkFDRSddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXF1ZXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdBYm9ydENvbnRyb2xsZXInIGluIGcpIHtcbiAgICAgIHZhciBjdHJsID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgcmV0dXJuIGN0cmwuc2lnbmFsO1xuICAgIH1cbiAgfSgpKTtcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG5cbiAgaWYgKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSB7XG4gICAgaWYgKG9wdGlvbnMuY2FjaGUgPT09ICduby1zdG9yZScgfHwgb3B0aW9ucy5jYWNoZSA9PT0gJ25vLWNhY2hlJykge1xuICAgICAgLy8gU2VhcmNoIGZvciBhICdfJyBwYXJhbWV0ZXIgaW4gdGhlIHF1ZXJ5IHN0cmluZ1xuICAgICAgdmFyIHJlUGFyYW1TZWFyY2ggPSAvKFs/Jl0pXz1bXiZdKi9cbiAgICAgIGlmIChyZVBhcmFtU2VhcmNoLnRlc3QodGhpcy51cmwpKSB7XG4gICAgICAgIC8vIElmIGl0IGFscmVhZHkgZXhpc3RzIHRoZW4gc2V0IHRoZSB2YWx1ZSB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5yZXBsYWNlKHJlUGFyYW1TZWFyY2gsICckMV89JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBhIG5ldyAnXycgcGFyYW1ldGVyIHRvIHRoZSBlbmQgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHZhciByZVF1ZXJ5U3RyaW5nID0gL1xcPy9cbiAgICAgICAgdGhpcy51cmwgKz0gKHJlUXVlcnlTdHJpbmcudGVzdCh0aGlzLnVybCkgPyAnJicgOiAnPycpICsgJ189JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgLy8gQXZvaWRpbmcgc3BsaXQgdmlhIHJlZ2V4IHRvIHdvcmsgYXJvdW5kIGEgY29tbW9uIElFMTEgYnVnIHdpdGggdGhlIGNvcmUtanMgMy42LjAgcmVnZXggcG9seWZpbGxcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9mZXRjaC9pc3N1ZXMvNzQ4XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy83NTFcbiAgcHJlUHJvY2Vzc2VkSGVhZGVyc1xuICAgIC5zcGxpdCgnXFxyJylcbiAgICAubWFwKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgcmV0dXJuIGhlYWRlci5pbmRleE9mKCdcXG4nKSA9PT0gMCA/IGhlYWRlci5zdWJzdHIoMSwgaGVhZGVyLmxlbmd0aCkgOiBoZWFkZXJcbiAgICB9KVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignUmVzcG9uc2UgJyArIGVycm9yLm1lc3NhZ2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIHVzZSB0aGUgXCJuZXdcIiBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKVxuICB9XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIGlmICh0aGlzLnN0YXR1cyA8IDIwMCB8fCB0aGlzLnN0YXR1cyA+IDU5OSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzcG9uc2UnOiBUaGUgc3RhdHVzIHByb3ZpZGVkICgwKSBpcyBvdXRzaWRlIHRoZSByYW5nZSBbMjAwLCA1OTldLlwiKVxuICB9XG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0ID09PSB1bmRlZmluZWQgPyAnJyA6ICcnICsgb3B0aW9ucy5zdGF0dXNUZXh0XG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDIwMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS5zdGF0dXMgPSAwXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gZy5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZy5sb2NhdGlvbi5ocmVmID8gZy5sb2NhdGlvbi5ocmVmIDogdXJsXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgZml4VXJsKHJlcXVlc3QudXJsKSwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpIHtcbiAgICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc3VwcG9ydC5hcnJheUJ1ZmZlclxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzIHx8IChnLkhlYWRlcnMgJiYgaW5pdC5oZWFkZXJzIGluc3RhbmNlb2YgZy5IZWFkZXJzKSkpIHtcbiAgICAgIHZhciBuYW1lcyA9IFtdO1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgbmFtZXMucHVzaChub3JtYWxpemVOYW1lKG5hbWUpKVxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIWcuZmV0Y2gpIHtcbiAgZy5mZXRjaCA9IGZldGNoXG4gIGcuSGVhZGVycyA9IEhlYWRlcnNcbiAgZy5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vZnVsbC9zeW1ib2wnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9hY3R1YWwvc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuaXMtcmVnaXN0ZXJlZC1zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5pcy13ZWxsLWtub3duLXN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLm1hdGNoZXInKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLmlzLXJlZ2lzdGVyZWQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5pcy13ZWxsLWtub3duJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wubWV0YWRhdGEta2V5Jyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucGF0dGVybi1tYXRjaCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLnJlcGxhY2UtYWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL3N0YWJsZS9zeW1ib2wnKTtcblxucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuZnVuY3Rpb24ubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5hc3luYy1kaXNwb3NlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuZGlzcG9zZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLm1ldGFkYXRhJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL3N5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5jb25jYXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLlN5bWJvbDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcCkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFN0cmluZyhXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtdHJ1bmMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uIHRydW5jKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuIChuID4gMCA/IGZsb29yIDogY2VpbCkobik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgJFR5cGVFcnJvcignTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciAkQXJyYXkgPSBBcnJheTtcblxuLy8gYSBwYXJ0IG9mIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAoaXNDb25zdHJ1Y3RvcihDKSAmJiAoQyA9PT0gJEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9PSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiAoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24odGhpcywgSElEREVOKSAmJiBoYXNPd24odGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgZGVmaW5lQnVpbHRJbigkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIGRlZmluZUJ1aWx0SW4oT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1yZWdpc3RyeS1kZXRlY3Rpb24nKTtcblxudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wuZm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhrZXkpO1xuICAgIGlmIChoYXNPd24oU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJykoc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIE5BVElWRV9TWU1CT0xfUkVHSVNUUlkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbicpO1xuXG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xuXG4vLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIH0sIHtcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoc3ltKSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgZ2V0UmVwbGFjZXJGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtanNvbi1yZXBsYWNlci1mdW5jdGlvbicpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKSgnc3RyaW5naWZ5IGRldGVjdGlvbicpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT09ICdbbnVsbF0nXG4gICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPT0gJ3t9J1xuICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT09ICd7fSc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG52YXIgSUxMX0ZPUk1FRF9VTklDT0RFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxudmFyIHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4ID0gZnVuY3Rpb24gKGl0LCByZXBsYWNlcikge1xuICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgdmFyICRyZXBsYWNlciA9IGdldFJlcGxhY2VyRnVuY3Rpb24ocmVwbGFjZXIpO1xuICBpZiAoIWlzQ2FsbGFibGUoJHJlcGxhY2VyKSAmJiAoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgYXJnc1sxXSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgLy8gc29tZSBvbGQgaW1wbGVtZW50YXRpb25zIChsaWtlIFdlYktpdCkgY291bGQgcGFzcyBudW1iZXJzIGFzIGtleXNcbiAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCAkU3RyaW5nKGtleSksIHZhbHVlKTtcbiAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG59O1xuXG52YXIgZml4SWxsRm9ybWVkID0gZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICB2YXIgcHJldiA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCAtIDEpO1xuICB2YXIgbmV4dCA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCArIDEpO1xuICBpZiAoKGV4ZWMobG93LCBtYXRjaCkgJiYgIWV4ZWMoaGksIG5leHQpKSB8fCAoZXhlYyhoaSwgbWF0Y2gpICYmICFleGVjKGxvdywgcHJldikpKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyBudW1iZXJUb1N0cmluZyhjaGFyQ29kZUF0KG1hdGNoLCAwKSwgMTYpO1xuICB9IHJldHVybiBtYXRjaDtcbn07XG5cbmlmICgkc3RyaW5naWZ5KSB7XG4gIC8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBhcml0eTogMywgZm9yY2VkOiBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gfHwgSUxMX0ZPUk1FRF9VTklDT0RFIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5KFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiA/IHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4IDogJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgICByZXR1cm4gSUxMX0ZPUk1FRF9VTklDT0RFICYmIHR5cGVvZiByZXN1bHQgPT0gJ3N0cmluZycgPyByZXBsYWNlKHJlc3VsdCwgdGVzdGVyLCBmaXhJbGxGb3JtZWQpIDogcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlcGxhY2VyKSB7XG4gIGlmIChpc0NhbGxhYmxlKHJlcGxhY2VyKSkgcmV0dXJuIHJlcGxhY2VyO1xuICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXR1cm47XG4gIHZhciByYXdMZW5ndGggPSByZXBsYWNlci5sZW5ndGg7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3TGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxlbWVudCA9IHJlcGxhY2VyW2ldO1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PSAnc3RyaW5nJykgcHVzaChrZXlzLCBlbGVtZW50KTtcbiAgICBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PSAnbnVtYmVyJyB8fCBjbGFzc29mKGVsZW1lbnQpID09PSAnTnVtYmVyJyB8fCBjbGFzc29mKGVsZW1lbnQpID09PSAnU3RyaW5nJykgcHVzaChrZXlzLCB0b1N0cmluZyhlbGVtZW50KSk7XG4gIH1cbiAgdmFyIGtleXNMZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIHJvb3QgPSB0cnVlO1xuICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAocm9vdCkge1xuICAgICAgcm9vdCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheSh0aGlzKSkgcmV0dXJuIHZhbHVlO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5c0xlbmd0aDsgaisrKSBpZiAoa2V5c1tqXSA9PT0ga2V5KSByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG4vLyBWOCB+IENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGT1JDRUQgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRvT2JqZWN0KGl0KSkgOiBbXTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLmhhc0luc3RhbmNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm1hdGNoQWxsYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hhbGxcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wucmVwbGFjZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnJlcGxhY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5zZWFyY2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zZWFyY2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc2VhcmNoJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLnNwZWNpZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGVjaWVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuc3BsaXRgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGxpdFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC51bnNjb3BhYmxlc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnVuc2NvcGFibGVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7IFJlZmxlY3Q6IHt9IH0pO1xuXG4vLyBSZWZsZWN0W0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLlJlZmxlY3QsICdSZWZsZWN0JywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyAkU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBNRVRBREFUQSA9IHdlbGxLbm93blN5bWJvbCgnbWV0YWRhdGEnKTtcbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLy8gRnVuY3Rpb24ucHJvdG90eXBlW0BAbWV0YWRhdGFdXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1kZWNvcmF0b3ItbWV0YWRhdGFcbmlmIChGdW5jdGlvblByb3RvdHlwZVtNRVRBREFUQV0gPT09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTUVUQURBVEEsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG5cbi8vIGBTeW1ib2wuYXN5bmNEaXNwb3NlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXN5bmMtZXhwbGljaXQtcmVzb3VyY2UtbWFuYWdlbWVudFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0Rpc3Bvc2UnKTtcblxuaWYgKFN5bWJvbCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTeW1ib2wsICdhc3luY0Rpc3Bvc2UnKTtcbiAgLy8gd29ya2Fyb3VuZCBvZiBOb2RlSlMgMjAuNCBidWdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy80ODY5OVxuICAvLyBhbmQgaW5jb3JyZWN0IGRlc2NyaXB0b3IgZnJvbSBzb21lIHRyYW5zcGlsZXJzIGFuZCB1c2VybGFuZCBoZWxwZXJzXG4gIGlmIChkZXNjcmlwdG9yLmVudW1lcmFibGUgJiYgZGVzY3JpcHRvci5jb25maWd1cmFibGUgJiYgZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgJ2FzeW5jRGlzcG9zZScsIHsgdmFsdWU6IGRlc2NyaXB0b3IudmFsdWUsIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG5cbi8vIGBTeW1ib2wuZGlzcG9zZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWV4cGxpY2l0LXJlc291cmNlLW1hbmFnZW1lbnRcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnZGlzcG9zZScpO1xuXG5pZiAoU3ltYm9sKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN5bWJvbCwgJ2Rpc3Bvc2UnKTtcbiAgLy8gd29ya2Fyb3VuZCBvZiBOb2RlSlMgMjAuNCBidWdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy80ODY5OVxuICAvLyBhbmQgaW5jb3JyZWN0IGRlc2NyaXB0b3IgZnJvbSBzb21lIHRyYW5zcGlsZXJzIGFuZCB1c2VybGFuZCBoZWxwZXJzXG4gIGlmIChkZXNjcmlwdG9yLmVudW1lcmFibGUgJiYgZGVzY3JpcHRvci5jb25maWd1cmFibGUgJiYgZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgJ2Rpc3Bvc2UnLCB7IHZhbHVlOiBkZXNjcmlwdG9yLnZhbHVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5tZXRhZGF0YWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWRlY29yYXRvcnNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWV0YWRhdGEnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzUmVnaXN0ZXJlZFN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtaXMtcmVnaXN0ZXJlZCcpO1xuXG4vLyBgU3ltYm9sLmlzUmVnaXN0ZXJlZFN5bWJvbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtc3ltYm9sLXByZWRpY2F0ZXMvI3NlYy1zeW1ib2wtaXNyZWdpc3RlcmVkc3ltYm9sXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzUmVnaXN0ZXJlZFN5bWJvbDogaXNSZWdpc3RlcmVkU3ltYm9sXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1pcy13ZWxsLWtub3duJyk7XG5cbi8vIGBTeW1ib2wuaXNXZWxsS25vd25TeW1ib2xgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL3Byb3Bvc2FsLXN5bWJvbC1wcmVkaWNhdGVzLyNzZWMtc3ltYm9sLWlzd2VsbGtub3duc3ltYm9sXG4vLyBXZSBzaG91bGQgcGF0Y2ggaXQgZm9yIG5ld2x5IGFkZGVkIHdlbGwta25vd24gc3ltYm9scy4gSWYgaXQncyBub3QgcmVxdWlyZWQsIHRoaXMgbW9kdWxlIGp1c3Qgd2lsbCBub3QgYmUgaW5qZWN0ZWRcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpc1dlbGxLbm93blN5bWJvbDogaXNXZWxsS25vd25TeW1ib2xcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGVyYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcGF0dGVybi1tYXRjaGluZ1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaGVyJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm9ic2VydmFibGVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ29ic2VydmFibGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzUmVnaXN0ZXJlZFN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtaXMtcmVnaXN0ZXJlZCcpO1xuXG4vLyBgU3ltYm9sLmlzUmVnaXN0ZXJlZGAgbWV0aG9kXG4vLyBvYnNvbGV0ZSB2ZXJzaW9uIG9mIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1zeW1ib2wtcHJlZGljYXRlcy8jc2VjLXN5bWJvbC1pc3JlZ2lzdGVyZWRzeW1ib2xcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBuYW1lOiAnaXNSZWdpc3RlcmVkU3ltYm9sJyB9LCB7XG4gIGlzUmVnaXN0ZXJlZDogaXNSZWdpc3RlcmVkU3ltYm9sXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1pcy13ZWxsLWtub3duJyk7XG5cbi8vIGBTeW1ib2wuaXNXZWxsS25vd25gIG1ldGhvZFxuLy8gb2Jzb2xldGUgdmVyc2lvbiBvZiBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtc3ltYm9sLXByZWRpY2F0ZXMvI3NlYy1zeW1ib2wtaXN3ZWxsa25vd25zeW1ib2xcbi8vIFdlIHNob3VsZCBwYXRjaCBpdCBmb3IgbmV3bHkgYWRkZWQgd2VsbC1rbm93biBzeW1ib2xzLiBJZiBpdCdzIG5vdCByZXF1aXJlZCwgdGhpcyBtb2R1bGUganVzdCB3aWxsIG5vdCBiZSBpbmplY3RlZFxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIG5hbWU6ICdpc1dlbGxLbm93blN5bWJvbCcsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGlzV2VsbEtub3duOiBpc1dlbGxLbm93blN5bWJvbFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm1ldGFkYXRhS2V5YCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZGVjb3JhdG9yLW1ldGFkYXRhXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21ldGFkYXRhS2V5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiByZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5wYXR0ZXJuTWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wYXR0ZXJuLW1hdGNoaW5nXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3BhdHRlcm5NYXRjaCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZUFsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9mdWxsL2FycmF5L2Zyb20nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9hY3R1YWwvYXJyYXkvZnJvbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9zdGFibGUvYXJyYXkvZnJvbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9hcnJheS9mcm9tJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuZnJvbScpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguQXJyYXkuZnJvbTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PT0gJEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL2Z1bGwvbWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vYWN0dWFsL21hcCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5vZicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLmRlbGV0ZS1hbGwnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5lbXBsYWNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAuZXZlcnknKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5maWx0ZXInKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5maW5kJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAuZmluZC1rZXknKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm1hcC5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLmtleS1ieScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLmtleS1vZicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLm1hcC1rZXlzJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAubWFwLXZhbHVlcycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLm1lcmdlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAuc29tZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQubWFwLnVwZGF0ZScpO1xuLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm1hcC51cHNlcnQnKTtcbi8vIFRPRE86IHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAudXBkYXRlLW9yLWluc2VydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9zdGFibGUvbWFwJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5tYXAuZ3JvdXAtYnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvbWFwJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLm1hcCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguTWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWFwLmNvbnN0cnVjdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgTWFwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAtb2JqZWN0c1xuY29sbGVjdGlvbignTWFwJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlIC0tIHNhZmVcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNFeHRlbnNpYmxlKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNleHRlbnNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IChGQUlMU19PTl9QUklNSVRJVkVTIHx8IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSkgPyBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgaWYgKEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSAmJiBjbGFzc29mKGl0KSA9PT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZTtcbn0gOiAkaXNFeHRlbnNpYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRkYyNi0gYnVnOiBBcnJheUJ1ZmZlcnMgYXJlIG5vbi1leHRlbnNpYmxlLCBidXQgT2JqZWN0LmlzRXh0ZW5zaWJsZSBkb2VzIG5vdCByZXBvcnQgaXRcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZShidWZmZXIpKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVmZmVyLCAnYScsIHsgdmFsdWU6IDggfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1wcmV2ZW50ZXh0ZW5zaW9ucyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGRlZmluZUJ1aWx0SW4odGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgTWFwSGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtaGVscGVycycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgTWFwID0gTWFwSGVscGVycy5NYXA7XG52YXIgaGFzID0gTWFwSGVscGVycy5oYXM7XG52YXIgZ2V0ID0gTWFwSGVscGVycy5nZXQ7XG52YXIgc2V0ID0gTWFwSGVscGVycy5zZXQ7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgTWFwLmdyb3VwQnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZ3JvdXBpbmdcbiQoeyB0YXJnZXQ6ICdNYXAnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBncm91cEJ5OiBmdW5jdGlvbiBncm91cEJ5KGl0ZW1zLCBjYWxsYmFja2ZuKSB7XG4gICAgcmVxdWlyZU9iamVjdENvZXJjaWJsZShpdGVtcyk7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gICAgdmFyIGsgPSAwO1xuICAgIGl0ZXJhdGUoaXRlbXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIGtleSA9IGNhbGxiYWNrZm4odmFsdWUsIGsrKyk7XG4gICAgICBpZiAoIWhhcyhtYXAsIGtleSkpIHNldChtYXAsIGtleSwgW3ZhbHVlXSk7XG4gICAgICBlbHNlIHB1c2goZ2V0KG1hcCwga2V5KSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXA7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLWZyb20nKTtcblxuLy8gYE1hcC5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG4kKHsgdGFyZ2V0OiAnTWFwJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLW9mJyk7XG5cbi8vIGBNYXAub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG4kKHsgdGFyZ2V0OiAnTWFwJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgb2Y6IG9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFNYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1tYXAnKTtcbnZhciByZW1vdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWhlbHBlcnMnKS5yZW1vdmU7XG5cbi8vIGBNYXAucHJvdG90eXBlLmRlbGV0ZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZGVsZXRlQWxsOiBmdW5jdGlvbiBkZWxldGVBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IGFNYXAodGhpcyk7XG4gICAgdmFyIGFsbERlbGV0ZWQgPSB0cnVlO1xuICAgIHZhciB3YXNEZWxldGVkO1xuICAgIGZvciAodmFyIGsgPSAwLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIHdhc0RlbGV0ZWQgPSByZW1vdmUoY29sbGVjdGlvbiwgYXJndW1lbnRzW2tdKTtcbiAgICAgIGFsbERlbGV0ZWQgPSBhbGxEZWxldGVkICYmIHdhc0RlbGV0ZWQ7XG4gICAgfSByZXR1cm4gISFhbGxEZWxldGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFNYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1tYXAnKTtcbnZhciBNYXBIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1oZWxwZXJzJyk7XG5cbnZhciBnZXQgPSBNYXBIZWxwZXJzLmdldDtcbnZhciBoYXMgPSBNYXBIZWxwZXJzLmhhcztcbnZhciBzZXQgPSBNYXBIZWxwZXJzLnNldDtcblxuLy8gYE1hcC5wcm90b3R5cGUuZW1wbGFjZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC11cHNlcnRcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZW1wbGFjZTogZnVuY3Rpb24gZW1wbGFjZShrZXksIGhhbmRsZXIpIHtcbiAgICB2YXIgbWFwID0gYU1hcCh0aGlzKTtcbiAgICB2YXIgdmFsdWUsIGluc2VydGVkO1xuICAgIGlmIChoYXMobWFwLCBrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGdldChtYXAsIGtleSk7XG4gICAgICBpZiAoJ3VwZGF0ZScgaW4gaGFuZGxlcikge1xuICAgICAgICB2YWx1ZSA9IGhhbmRsZXIudXBkYXRlKHZhbHVlLCBrZXksIG1hcCk7XG4gICAgICAgIHNldChtYXAsIGtleSwgdmFsdWUpO1xuICAgICAgfSByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGluc2VydGVkID0gaGFuZGxlci5pbnNlcnQoa2V5LCBtYXApO1xuICAgIHNldChtYXAsIGtleSwgaW5zZXJ0ZWQpO1xuICAgIHJldHVybiBpbnNlcnRlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFNYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1tYXAnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYU1hcCh0aGlzKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHJldHVybiBpdGVyYXRlKG1hcCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICghYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4gZmFsc2U7XG4gICAgfSwgdHJ1ZSkgIT09IGZhbHNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYU1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLW1hcCcpO1xudmFyIE1hcEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWhlbHBlcnMnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1pdGVyYXRlJyk7XG5cbnZhciBNYXAgPSBNYXBIZWxwZXJzLk1hcDtcbnZhciBzZXQgPSBNYXBIZWxwZXJzLnNldDtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhTWFwKHRoaXMpO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyIG5ld01hcCA9IG5ldyBNYXAoKTtcbiAgICBpdGVyYXRlKG1hcCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHNldChuZXdNYXAsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdNYXA7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhTWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtbWFwJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFNYXAodGhpcyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgcmVzdWx0ID0gaXRlcmF0ZShtYXAsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApKSByZXR1cm4geyB2YWx1ZTogdmFsdWUgfTtcbiAgICB9LCB0cnVlKTtcbiAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFNYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1tYXAnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLmZpbmRLZXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZpbmRLZXk6IGZ1bmN0aW9uIGZpbmRLZXkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYU1hcCh0aGlzKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHZhciByZXN1bHQgPSBpdGVyYXRlKG1hcCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHJldHVybiB7IGtleToga2V5IH07XG4gICAgfSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQua2V5O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNhbWVWYWx1ZVplcm8gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZS16ZXJvJyk7XG52YXIgYU1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLW1hcCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWl0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50KSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUoYU1hcCh0aGlzKSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2FtZVZhbHVlWmVybyh2YWx1ZSwgc2VhcmNoRWxlbWVudCkpIHJldHVybiB0cnVlO1xuICAgIH0sIHRydWUpID09PSB0cnVlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGBTYW1lVmFsdWVaZXJvYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2FtZXZhbHVlemVyb1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4geCA9PT0geSB8fCB4ICE9PSB4ICYmIHkgIT09IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgTWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1oZWxwZXJzJykuTWFwO1xuXG4vLyBgTWFwLmtleUJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGtleUJ5OiBmdW5jdGlvbiBrZXlCeShpdGVyYWJsZSwga2V5RGVyaXZhdGl2ZSkge1xuICAgIHZhciBDID0gaXNDYWxsYWJsZSh0aGlzKSA/IHRoaXMgOiBNYXA7XG4gICAgdmFyIG5ld01hcCA9IG5ldyBDKCk7XG4gICAgYUNhbGxhYmxlKGtleURlcml2YXRpdmUpO1xuICAgIHZhciBzZXR0ZXIgPSBhQ2FsbGFibGUobmV3TWFwLnNldCk7XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGNhbGwoc2V0dGVyLCBuZXdNYXAsIGtleURlcml2YXRpdmUoZWxlbWVudCksIGVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdNYXA7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYU1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLW1hcCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWl0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUua2V5T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGtleU9mOiBmdW5jdGlvbiBrZXlPZihzZWFyY2hFbGVtZW50KSB7XG4gICAgdmFyIHJlc3VsdCA9IGl0ZXJhdGUoYU1hcCh0aGlzKSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIHsga2V5OiBrZXkgfTtcbiAgICB9LCB0cnVlKTtcbiAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5rZXk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhTWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtbWFwJyk7XG52YXIgTWFwSGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtaGVscGVycycpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWl0ZXJhdGUnKTtcblxudmFyIE1hcCA9IE1hcEhlbHBlcnMuTWFwO1xudmFyIHNldCA9IE1hcEhlbHBlcnMuc2V0O1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tYXBLZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBtYXBLZXlzOiBmdW5jdGlvbiBtYXBLZXlzKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFNYXAodGhpcyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgbmV3TWFwID0gbmV3IE1hcCgpO1xuICAgIGl0ZXJhdGUobWFwLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgc2V0KG5ld01hcCwgYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld01hcDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFNYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1tYXAnKTtcbnZhciBNYXBIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1oZWxwZXJzJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtaXRlcmF0ZScpO1xuXG52YXIgTWFwID0gTWFwSGVscGVycy5NYXA7XG52YXIgc2V0ID0gTWFwSGVscGVycy5zZXQ7XG5cbi8vIGBNYXAucHJvdG90eXBlLm1hcFZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgbWFwVmFsdWVzOiBmdW5jdGlvbiBtYXBWYWx1ZXMoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYU1hcCh0aGlzKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHZhciBuZXdNYXAgPSBuZXcgTWFwKCk7XG4gICAgaXRlcmF0ZShtYXAsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBzZXQobmV3TWFwLCBrZXksIGJvdW5kRnVuY3Rpb24odmFsdWUsIGtleSwgbWFwKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld01hcDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhTWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtbWFwJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1oZWxwZXJzJykuc2V0O1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tZXJnZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShpdGVyYWJsZSAvKiAuLi5pdGVyYWJsZXMgKi8pIHtcbiAgICB2YXIgbWFwID0gYU1hcCh0aGlzKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmd1bWVudHNMZW5ndGgpIHtcbiAgICAgIGl0ZXJhdGUoYXJndW1lbnRzW2krK10sIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHNldChtYXAsIGtleSwgdmFsdWUpO1xuICAgICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYU1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLW1hcCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWl0ZXJhdGUnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBNYXAucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHZhciBtYXAgPSBhTWFwKHRoaXMpO1xuICAgIHZhciBub0luaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoIDwgMjtcbiAgICB2YXIgYWNjdW11bGF0b3IgPSBub0luaXRpYWwgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIGl0ZXJhdGUobWFwLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgaWYgKG5vSW5pdGlhbCkge1xuICAgICAgICBub0luaXRpYWwgPSBmYWxzZTtcbiAgICAgICAgYWNjdW11bGF0b3IgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gY2FsbGJhY2tmbihhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgbWFwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAobm9Jbml0aWFsKSB0aHJvdyAkVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgbWFwIHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFNYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1tYXAnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hcC1pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYU1hcCh0aGlzKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHJldHVybiBpdGVyYXRlKG1hcCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHJldHVybiB0cnVlO1xuICAgIH0sIHRydWUpID09PSB0cnVlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYU1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLW1hcCcpO1xudmFyIE1hcEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLWhlbHBlcnMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgZ2V0ID0gTWFwSGVscGVycy5nZXQ7XG52YXIgaGFzID0gTWFwSGVscGVycy5oYXM7XG52YXIgc2V0ID0gTWFwSGVscGVycy5zZXQ7XG5cbi8vIGBNYXAucHJvdG90eXBlLnVwZGF0ZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoa2V5LCBjYWxsYmFjayAvKiAsIHRodW5rICovKSB7XG4gICAgdmFyIG1hcCA9IGFNYXAodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrKTtcbiAgICB2YXIgaXNQcmVzZW50SW5NYXAgPSBoYXMobWFwLCBrZXkpO1xuICAgIGlmICghaXNQcmVzZW50SW5NYXAgJiYgbGVuZ3RoIDwgMykge1xuICAgICAgdGhyb3cgJFR5cGVFcnJvcignVXBkYXRpbmcgYWJzZW50IHZhbHVlJyk7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IGlzUHJlc2VudEluTWFwID8gZ2V0KG1hcCwga2V5KSA6IGFDYWxsYWJsZShsZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKShrZXksIG1hcCk7XG4gICAgc2V0KG1hcCwga2V5LCBjYWxsYmFjayh2YWx1ZSwga2V5LCBtYXApKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1cHNlcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFwLXVwc2VydCcpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS51cHNlcnRgIG1ldGhvZCAocmVwbGFjZWQgYnkgYE1hcC5wcm90b3R5cGUuZW1wbGFjZWApXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGh1bWJzdXBlcC9wcm9wb3NhbC11cHNlcnRcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdXBzZXJ0OiB1cHNlcnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVwc2VydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtdXBzZXJ0Jyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLnVwZGF0ZU9ySW5zZXJ0YCBtZXRob2QgKHJlcGxhY2VkIGJ5IGBNYXAucHJvdG90eXBlLmVtcGxhY2VgKVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RodW1ic3VwZXAvcHJvcG9zYWwtdXBzZXJ0XG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIG5hbWU6ICd1cHNlcnQnLCBmb3JjZWQ6IHRydWUgfSwge1xuICB1cGRhdGVPckluc2VydDogdXBzZXJ0XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vZnVsbC9zZXQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9hY3R1YWwvc2V0Jyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuYWRkLWFsbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LmRlbGV0ZS1hbGwnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnNldC5ldmVyeScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LmRpZmZlcmVuY2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnNldC5maWx0ZXInKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnNldC5maW5kJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuaW50ZXJzZWN0aW9uJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtZGlzam9pbnQtZnJvbScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1YnNldC1vZicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1cGVyc2V0LW9mJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuam9pbicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0Lm1hcCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LnNvbWUnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnNldC5zeW1tZXRyaWMtZGlmZmVyZW5jZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LnVuaW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL3N0YWJsZS9zZXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnNldC5kaWZmZXJlbmNlLnYyJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuaW50ZXJzZWN0aW9uLnYyJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtZGlzam9pbnQtZnJvbS52MicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1YnNldC1vZi52MicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1cGVyc2V0LW9mLnYyJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zZXQuc3ltbWV0cmljLWRpZmZlcmVuY2UudjInKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnNldC51bmlvbi52MicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9zZXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zZXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5TZXQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBTZXRgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC1vYmplY3RzXG5jb2xsZWN0aW9uKCdTZXQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25TdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZGlmZmVyZW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZGlmZmVyZW5jZScpO1xudmFyIHNldE1ldGhvZEFjY2VwdFNldExpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LW1ldGhvZC1hY2NlcHQtc2V0LWxpa2UnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuZGlmZmVyZW5jZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCdkaWZmZXJlbmNlJykgfSwge1xuICBkaWZmZXJlbmNlOiBkaWZmZXJlbmNlXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGBHZXRJdGVyYXRvckRpcmVjdChvYmopYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1pdGVyYXRvci1oZWxwZXJzLyNzZWMtZ2V0aXRlcmF0b3JkaXJlY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4ge1xuICAgIGl0ZXJhdG9yOiBvYmosXG4gICAgbmV4dDogb2JqLm5leHQsXG4gICAgZG9uZTogZmFsc2VcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGludGVyc2VjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaW50ZXJzZWN0aW9uJyk7XG52YXIgc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtbWV0aG9kLWFjY2VwdC1zZXQtbGlrZScpO1xuXG52YXIgSU5DT1JSRUNUID0gIXNldE1ldGhvZEFjY2VwdFNldExpa2UoJ2ludGVyc2VjdGlvbicpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIGVzL25vLXNldCAtLSB0ZXN0aW5nXG4gIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoWzEsIDIsIDNdKS5pbnRlcnNlY3Rpb24obmV3IFNldChbMywgMl0pKSkgIT09ICczLDInO1xufSk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmludGVyc2VjdGlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVCB9LCB7XG4gIGludGVyc2VjdGlvbjogaW50ZXJzZWN0aW9uXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzRGlzam9pbnRGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1pcy1kaXNqb2ludC1mcm9tJyk7XG52YXIgc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtbWV0aG9kLWFjY2VwdC1zZXQtbGlrZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pc0Rpc2pvaW50RnJvbWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCdpc0Rpc2pvaW50RnJvbScpIH0sIHtcbiAgaXNEaXNqb2ludEZyb206IGlzRGlzam9pbnRGcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzU3Vic2V0T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWlzLXN1YnNldC1vZicpO1xudmFyIHNldE1ldGhvZEFjY2VwdFNldExpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LW1ldGhvZC1hY2NlcHQtc2V0LWxpa2UnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNTdWJzZXRPZmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCdpc1N1YnNldE9mJykgfSwge1xuICBpc1N1YnNldE9mOiBpc1N1YnNldE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzU3VwZXJzZXRPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXMtc3VwZXJzZXQtb2YnKTtcbnZhciBzZXRNZXRob2RBY2NlcHRTZXRMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1tZXRob2QtYWNjZXB0LXNldC1saWtlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCdpc1N1cGVyc2V0T2YnKSB9LCB7XG4gIGlzU3VwZXJzZXRPZjogaXNTdXBlcnNldE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHN5bW1ldHJpY0RpZmZlcmVuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXN5bW1ldHJpYy1kaWZmZXJlbmNlJyk7XG52YXIgc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtbWV0aG9kLWFjY2VwdC1zZXQtbGlrZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5zeW1tZXRyaWNEaWZmZXJlbmNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogIXNldE1ldGhvZEFjY2VwdFNldExpa2UoJ3N5bW1ldHJpY0RpZmZlcmVuY2UnKSB9LCB7XG4gIHN5bW1ldHJpY0RpZmZlcmVuY2U6IHN5bW1ldHJpY0RpZmZlcmVuY2Vcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5pb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXVuaW9uJyk7XG52YXIgc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtbWV0aG9kLWFjY2VwdC1zZXQtbGlrZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS51bmlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCd1bmlvbicpIH0sIHtcbiAgdW5pb246IHVuaW9uXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1mcm9tJyk7XG5cbi8vIGBTZXQuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxuJCh7IHRhcmdldDogJ1NldCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1vZicpO1xuXG4vLyBgU2V0Lm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxuJCh7IHRhcmdldDogJ1NldCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIG9mOiBvZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhU2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Etc2V0Jyk7XG52YXIgYWRkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1oZWxwZXJzJykuYWRkO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5hZGRBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGFkZEFsbDogZnVuY3Rpb24gYWRkQWxsKC8qIC4uLmVsZW1lbnRzICovKSB7XG4gICAgdmFyIHNldCA9IGFTZXQodGhpcyk7XG4gICAgZm9yICh2YXIgayA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgYWRkKHNldCwgYXJndW1lbnRzW2tdKTtcbiAgICB9IHJldHVybiBzZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYVNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXNldCcpO1xudmFyIHJlbW92ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaGVscGVycycpLnJlbW92ZTtcblxuLy8gYFNldC5wcm90b3R5cGUuZGVsZXRlQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkZWxldGVBbGw6IGZ1bmN0aW9uIGRlbGV0ZUFsbCgvKiAuLi5lbGVtZW50cyAqLykge1xuICAgIHZhciBjb2xsZWN0aW9uID0gYVNldCh0aGlzKTtcbiAgICB2YXIgYWxsRGVsZXRlZCA9IHRydWU7XG4gICAgdmFyIHdhc0RlbGV0ZWQ7XG4gICAgZm9yICh2YXIgayA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgd2FzRGVsZXRlZCA9IHJlbW92ZShjb2xsZWN0aW9uLCBhcmd1bWVudHNba10pO1xuICAgICAgYWxsRGVsZXRlZCA9IGFsbERlbGV0ZWQgJiYgd2FzRGVsZXRlZDtcbiAgICB9IHJldHVybiAhIWFsbERlbGV0ZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhU2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Etc2V0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFTZXQodGhpcyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gaXRlcmF0ZShzZXQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFib3VuZEZ1bmN0aW9uKHZhbHVlLCB2YWx1ZSwgc2V0KSkgcmV0dXJuIGZhbHNlO1xuICAgIH0sIHRydWUpICE9PSBmYWxzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b1NldExpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc2V0LWxpa2UnKTtcbnZhciAkZGlmZmVyZW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZGlmZmVyZW5jZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5kaWZmZXJlbmNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4vLyBUT0RPOiBPYnNvbGV0ZSB2ZXJzaW9uLCByZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBkaWZmZXJlbmNlOiBmdW5jdGlvbiBkaWZmZXJlbmNlKG90aGVyKSB7XG4gICAgcmV0dXJuIGNhbGwoJGRpZmZlcmVuY2UsIHRoaXMsIHRvU2V0TGlrZShvdGhlcikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgTyA9ICRPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgfHwgaGFzT3duKEl0ZXJhdG9ycywgY2xhc3NvZihPKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhU2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Etc2V0Jyk7XG52YXIgU2V0SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaGVscGVycycpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWl0ZXJhdGUnKTtcblxudmFyIFNldCA9IFNldEhlbHBlcnMuU2V0O1xudmFyIGFkZCA9IFNldEhlbHBlcnMuYWRkO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFTZXQodGhpcyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgbmV3U2V0ID0gbmV3IFNldCgpO1xuICAgIGl0ZXJhdGUoc2V0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCB2YWx1ZSwgc2V0KSkgYWRkKG5ld1NldCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhU2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Etc2V0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFTZXQodGhpcyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgcmVzdWx0ID0gaXRlcmF0ZShzZXQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGJvdW5kRnVuY3Rpb24odmFsdWUsIHZhbHVlLCBzZXQpKSByZXR1cm4geyB2YWx1ZTogdmFsdWUgfTtcbiAgICB9LCB0cnVlKTtcbiAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b1NldExpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc2V0LWxpa2UnKTtcbnZhciAkaW50ZXJzZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1pbnRlcnNlY3Rpb24nKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaW50ZXJzZWN0aW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4vLyBUT0RPOiBPYnNvbGV0ZSB2ZXJzaW9uLCByZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpbnRlcnNlY3Rpb246IGZ1bmN0aW9uIGludGVyc2VjdGlvbihvdGhlcikge1xuICAgIHJldHVybiBjYWxsKCRpbnRlcnNlY3Rpb24sIHRoaXMsIHRvU2V0TGlrZShvdGhlcikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvU2V0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zZXQtbGlrZScpO1xudmFyICRpc0Rpc2pvaW50RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXMtZGlzam9pbnQtZnJvbScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pc0Rpc2pvaW50RnJvbWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuLy8gVE9ETzogT2Jzb2xldGUgdmVyc2lvbiwgcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgaXNEaXNqb2ludEZyb206IGZ1bmN0aW9uIGlzRGlzam9pbnRGcm9tKG90aGVyKSB7XG4gICAgcmV0dXJuIGNhbGwoJGlzRGlzam9pbnRGcm9tLCB0aGlzLCB0b1NldExpa2Uob3RoZXIpKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b1NldExpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc2V0LWxpa2UnKTtcbnZhciAkaXNTdWJzZXRPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXMtc3Vic2V0LW9mJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmlzU3Vic2V0T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbi8vIFRPRE86IE9ic29sZXRlIHZlcnNpb24sIHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGlzU3Vic2V0T2Y6IGZ1bmN0aW9uIGlzU3Vic2V0T2Yob3RoZXIpIHtcbiAgICByZXR1cm4gY2FsbCgkaXNTdWJzZXRPZiwgdGhpcywgdG9TZXRMaWtlKG90aGVyKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdG9TZXRMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXNldC1saWtlJyk7XG52YXIgJGlzU3VwZXJzZXRPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXMtc3VwZXJzZXQtb2YnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNTdXBlcnNldE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4vLyBUT0RPOiBPYnNvbGV0ZSB2ZXJzaW9uLCByZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICBpc1N1cGVyc2V0T2Y6IGZ1bmN0aW9uIGlzU3VwZXJzZXRPZihvdGhlcikge1xuICAgIHJldHVybiBjYWxsKCRpc1N1cGVyc2V0T2YsIHRoaXMsIHRvU2V0TGlrZShvdGhlcikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1zZXQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1pdGVyYXRlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBhcnJheUpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgdmFyIHNldCA9IGFTZXQodGhpcyk7XG4gICAgdmFyIHNlcCA9IHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogdG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBpdGVyYXRlKHNldCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBwdXNoKGFycmF5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycmF5Sm9pbihhcnJheSwgc2VwKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFTZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1zZXQnKTtcbnZhciBTZXRIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1oZWxwZXJzJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xuXG52YXIgU2V0ID0gU2V0SGVscGVycy5TZXQ7XG52YXIgYWRkID0gU2V0SGVscGVycy5hZGQ7XG5cbi8vIGBTZXQucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYVNldCh0aGlzKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgU2V0KCk7XG4gICAgaXRlcmF0ZShzZXQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgYWRkKG5ld1NldCwgYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhU2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Etc2V0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtaXRlcmF0ZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFNldC5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIHNldCA9IGFTZXQodGhpcyk7XG4gICAgdmFyIG5vSW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyO1xuICAgIHZhciBhY2N1bXVsYXRvciA9IG5vSW5pdGlhbCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICBhQ2FsbGFibGUoY2FsbGJhY2tmbik7XG4gICAgaXRlcmF0ZShzZXQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKG5vSW5pdGlhbCkge1xuICAgICAgICBub0luaXRpYWwgPSBmYWxzZTtcbiAgICAgICAgYWNjdW11bGF0b3IgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gY2FsbGJhY2tmbihhY2N1bXVsYXRvciwgdmFsdWUsIHZhbHVlLCBzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChub0luaXRpYWwpIHRocm93ICRUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBzZXQgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYVNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXNldCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWl0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBzZXQgPSBhU2V0KHRoaXMpO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGl0ZXJhdGUoc2V0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCB2YWx1ZSwgc2V0KSkgcmV0dXJuIHRydWU7XG4gICAgfSwgdHJ1ZSkgPT09IHRydWU7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdG9TZXRMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXNldC1saWtlJyk7XG52YXIgJHN5bW1ldHJpY0RpZmZlcmVuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXN5bW1ldHJpYy1kaWZmZXJlbmNlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLnN5bW1ldHJpY0RpZmZlcmVuY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2V0LW1ldGhvZHNcbi8vIFRPRE86IE9ic29sZXRlIHZlcnNpb24sIHJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gIHN5bW1ldHJpY0RpZmZlcmVuY2U6IGZ1bmN0aW9uIHN5bW1ldHJpY0RpZmZlcmVuY2Uob3RoZXIpIHtcbiAgICByZXR1cm4gY2FsbCgkc3ltbWV0cmljRGlmZmVyZW5jZSwgdGhpcywgdG9TZXRMaWtlKG90aGVyKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdG9TZXRMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXNldC1saWtlJyk7XG52YXIgJHVuaW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC11bmlvbicpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS51bmlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuLy8gVE9ETzogT2Jzb2xldGUgdmVyc2lvbiwgcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgdW5pb246IGZ1bmN0aW9uIHVuaW9uKG90aGVyKSB7XG4gICAgcmV0dXJuIGNhbGwoJHVuaW9uLCB0aGlzLCB0b1NldExpa2Uob3RoZXIpKTtcbiAgfVxufSk7XG4iLCJ2YXIgbm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93JylcbiAgLCByb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3dcbiAgLCB2ZW5kb3JzID0gWydtb3onLCAnd2Via2l0J11cbiAgLCBzdWZmaXggPSAnQW5pbWF0aW9uRnJhbWUnXG4gICwgcmFmID0gcm9vdFsncmVxdWVzdCcgKyBzdWZmaXhdXG4gICwgY2FmID0gcm9vdFsnY2FuY2VsJyArIHN1ZmZpeF0gfHwgcm9vdFsnY2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG5cbmZvcih2YXIgaSA9IDA7ICFyYWYgJiYgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgcmFmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ1JlcXVlc3QnICsgc3VmZml4XVxuICBjYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsJyArIHN1ZmZpeF1cbiAgICAgIHx8IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cbn1cblxuLy8gU29tZSB2ZXJzaW9ucyBvZiBGRiBoYXZlIHJBRiBidXQgbm90IGNBRlxuaWYoIXJhZiB8fCAhY2FmKSB7XG4gIHZhciBsYXN0ID0gMFxuICAgICwgaWQgPSAwXG4gICAgLCBxdWV1ZSA9IFtdXG4gICAgLCBmcmFtZUR1cmF0aW9uID0gMTAwMCAvIDYwXG5cbiAgcmFmID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZihxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhciBfbm93ID0gbm93KClcbiAgICAgICAgLCBuZXh0ID0gTWF0aC5tYXgoMCwgZnJhbWVEdXJhdGlvbiAtIChfbm93IC0gbGFzdCkpXG4gICAgICBsYXN0ID0gbmV4dCArIF9ub3dcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjcCA9IHF1ZXVlLnNsaWNlKDApXG4gICAgICAgIC8vIENsZWFyIHF1ZXVlIGhlcmUgdG8gcHJldmVudFxuICAgICAgICAvLyBjYWxsYmFja3MgZnJvbSBhcHBlbmRpbmcgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRvIHRoZSBjdXJyZW50IGZyYW1lJ3MgcXVldWVcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMFxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZighY3BbaV0uY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgIGNwW2ldLmNhbGxiYWNrKGxhc3QpXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgdGhyb3cgZSB9LCAwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgTWF0aC5yb3VuZChuZXh0KSlcbiAgICB9XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBoYW5kbGU6ICsraWQsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBjYW5jZWxsZWQ6IGZhbHNlXG4gICAgfSlcbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIGNhZiA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYocXVldWVbaV0uaGFuZGxlID09PSBoYW5kbGUpIHtcbiAgICAgICAgcXVldWVbaV0uY2FuY2VsbGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuKSB7XG4gIC8vIFdyYXAgaW4gYSBuZXcgZnVuY3Rpb24gdG8gcHJldmVudFxuICAvLyBgY2FuY2VsYCBwb3RlbnRpYWxseSBiZWluZyBhc3NpZ25lZFxuICAvLyB0byB0aGUgbmF0aXZlIHJBRiBmdW5jdGlvblxuICByZXR1cm4gcmFmLmNhbGwocm9vdCwgZm4pXG59XG5tb2R1bGUuZXhwb3J0cy5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgY2FmLmFwcGx5KHJvb3QsIGFyZ3VtZW50cylcbn1cbm1vZHVsZS5leHBvcnRzLnBvbHlmaWxsID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgb2JqZWN0ID0gcm9vdDtcbiAgfVxuICBvYmplY3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmFmXG4gIG9iamVjdC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNhZlxufVxuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjJcbihmdW5jdGlvbigpIHtcbiAgdmFyIGdldE5hbm9TZWNvbmRzLCBocnRpbWUsIGxvYWRUaW1lLCBtb2R1bGVMb2FkVGltZSwgbm9kZUxvYWRUaW1lLCB1cFRpbWU7XG5cbiAgaWYgKCh0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcGVyZm9ybWFuY2UgIT09IG51bGwpICYmIHBlcmZvcm1hbmNlLm5vdykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2VzcyAhPT0gbnVsbCkgJiYgcHJvY2Vzcy5ocnRpbWUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIChnZXROYW5vU2Vjb25kcygpIC0gbm9kZUxvYWRUaW1lKSAvIDFlNjtcbiAgICB9O1xuICAgIGhydGltZSA9IHByb2Nlc3MuaHJ0aW1lO1xuICAgIGdldE5hbm9TZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaHI7XG4gICAgICBociA9IGhydGltZSgpO1xuICAgICAgcmV0dXJuIGhyWzBdICogMWU5ICsgaHJbMV07XG4gICAgfTtcbiAgICBtb2R1bGVMb2FkVGltZSA9IGdldE5hbm9TZWNvbmRzKCk7XG4gICAgdXBUaW1lID0gcHJvY2Vzcy51cHRpbWUoKSAqIDFlOTtcbiAgICBub2RlTG9hZFRpbWUgPSBtb2R1bGVMb2FkVGltZSAtIHVwVGltZTtcbiAgfSBlbHNlIGlmIChEYXRlLm5vdykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBEYXRlLm5vdygpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyZm9ybWFuY2Utbm93LmpzLm1hcFxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO1xuZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGspe2RhPSExO2VhPW51bGw7YmEuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGw9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7ZmF8fChmYT0hMCxoYT1sKX19dmFyIGxhPW51bGwsbWE9bnVsbCxuYT1udWxsO1xuZnVuY3Rpb24gb2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PW5hKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9dmFyIHBhPW51bGwscWE9e307XG5mdW5jdGlvbiByYSgpe2lmKHBhKWZvcih2YXIgYSBpbiBxYSl7dmFyIGI9cWFbYV0sYz1wYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIXNhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO3NhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYodGEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7dGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHVhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiB1YShhLGIsYyl7aWYodmFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO3ZhW2FdPWI7d2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgc2E9W10sdGE9e30sdmE9e30sd2E9e307ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIXFhLmhhc093blByb3BlcnR5KGMpfHxxYVtjXSE9PWQpe2lmKHFhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtxYVtjXT1kO2I9ITB9fWImJnJhKCl9dmFyIHlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSx6YT1udWxsLEFhPW51bGwsQmE9bnVsbDtcbmZ1bmN0aW9uIENhKGEpe2lmKGE9bWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB6YSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPWxhKGIpLHphKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERhKGEpe0FhP0JhP0JhLnB1c2goYSk6QmE9W2FdOkFhPWF9ZnVuY3Rpb24gRWEoKXtpZihBYSl7dmFyIGE9QWEsYj1CYTtCYT1BYT1udWxsO0NhKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylDYShiW2FdKX19ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYShhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEhhKCl7fXZhciBJYT1GYSxKYT0hMSxLYT0hMTtmdW5jdGlvbiBMYSgpe2lmKG51bGwhPT1BYXx8bnVsbCE9PUJhKUhhKCksRWEoKX1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihLYSlyZXR1cm4gYShiLGMpO0thPSEwO3RyeXtyZXR1cm4gSWEoYSxiLGMpfWZpbmFsbHl7S2E9ITEsTGEoKX19dmFyIE5hPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxPYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFBhPXt9LFFhPXt9O1xuZnVuY3Rpb24gUmEoYSl7aWYoT2EuY2FsbChRYSxhKSlyZXR1cm4hMDtpZihPYS5jYWxsKFBhLGEpKXJldHVybiExO2lmKE5hLnRlc3QoYSkpcmV0dXJuIFFhW2FdPSEwO1BhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIFNhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8U2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgQz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtDW2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgVWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBWYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxcblZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkMueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgV2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoV2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG5mdW5jdGlvbiBYYShhLGIsYyxkKXt2YXIgZT1DLmhhc093blByb3BlcnR5KGIpP0NbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChUYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/UmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciBZYT0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRhPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZiPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamI9RT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGxiPUU/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLG1iPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBuYihhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bWImJmFbbWJdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24gb2IoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBwYihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhiOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGliOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGViOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYjp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamI6cmV0dXJuIHBiKGEudHlwZSk7Y2FzZSBsYjpyZXR1cm4gcGIoYS5yZW5kZXIpO2Nhc2Uga2I6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBwYihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxYihhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9cGIoYS50eXBlKTtjPW51bGw7ZCYmKGM9cGIoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxuZnVuY3Rpb24gcmIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHNiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB0YihhKXt2YXIgYj1zYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geGIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXRiKGEpKX1mdW5jdGlvbiB5YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9c2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiB6YihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1yYihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmWGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENiKGEsYil7QmIoYSxiKTt2YXIgYz1yYihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYihhLGIudHlwZSxyYihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEViKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gRmIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2IoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrcmIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEliKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpyYihjKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPXJiKGIudmFsdWUpLGQ9cmIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBMYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBNYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBOYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIE9iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9OYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBQYixRYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1NYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtQYj1QYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtQYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1QYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRiPXthbmltYXRpb25lbmQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFViPXt9LFZiPXt9O1xueWEmJihWYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdiKGEpe2lmKFViW2FdKXJldHVybiBVYlthXTtpZighVGJbYV0pcmV0dXJuIGE7dmFyIGI9VGJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmIpcmV0dXJuIFViW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGI9V2IoXCJhbmltYXRpb25lbmRcIiksWWI9V2IoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmI9V2IoXCJhbmltYXRpb25zdGFydFwiKSwkYj1XYihcInRyYW5zaXRpb25lbmRcIiksYWM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJjPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIGNjKGEpe3ZhciBiPWJjLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgTWFwLGJjLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGRjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGVjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoZGMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZGMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZmMoZSksYTtpZihmPT09ZClyZXR1cm4gZmMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoYyhhKXthPWdjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gaWMoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gamMoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGtjPW51bGw7XG5mdW5jdGlvbiBsYyhhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspb2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmb2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIG1jKGEpe251bGwhPT1hJiYoa2M9aWMoa2MsYSkpO2E9a2M7a2M9bnVsbDtpZihhKXtqYyhhLGxjKTtpZihrYyl0aHJvdyBFcnJvcih1KDk1KSk7aWYoZmEpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fX1cbmZ1bmN0aW9uIG5jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBvYyhhKXtpZigheWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIHBjPVtdO2Z1bmN0aW9uIHFjKGEpe2EudG9wTGV2ZWxUeXBlPW51bGw7YS5uYXRpdmVFdmVudD1udWxsO2EudGFyZ2V0SW5zdD1udWxsO2EuYW5jZXN0b3JzLmxlbmd0aD0wOzEwPnBjLmxlbmd0aCYmcGMucHVzaChhKX1cbmZ1bmN0aW9uIHJjKGEsYixjLGQpe2lmKHBjLmxlbmd0aCl7dmFyIGU9cGMucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9ZDtlLm5hdGl2ZUV2ZW50PWI7ZS50YXJnZXRJbnN0PWM7cmV0dXJuIGV9cmV0dXJue3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119fVxuZnVuY3Rpb24gc2MoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPXRjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPW5jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7dmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFnczswPT09YyYmKGd8PTY0KTtmb3IodmFyIGg9bnVsbCxrPTA7azxzYS5sZW5ndGg7aysrKXt2YXIgbD1zYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPVxuaWMoaCxsKSl9bWMoaCl9fWZ1bmN0aW9uIHVjKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6dmMoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOnZjKGIsXCJmb2N1c1wiLCEwKTt2YyhiLFwiYmx1clwiLCEwKTtjLnNldChcImJsdXJcIixudWxsKTtjLnNldChcImZvY3VzXCIsbnVsbCk7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOm9jKGEpJiZ2YyhiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5zZXQoYSxudWxsKX19XG52YXIgd2MseGMseWMsemM9ITEsQWM9W10sQmM9bnVsbCxDYz1udWxsLERjPW51bGwsRWM9bmV3IE1hcCxGYz1uZXcgTWFwLEdjPVtdLEhjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksSWM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gSmMoYSxiKXt2YXIgYz1jYyhiKTtIYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pO0ljLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSl9ZnVuY3Rpb24gS2MoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmUsY29udGFpbmVyOmR9fVxuZnVuY3Rpb24gTGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpCYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Q2M9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6RGM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOkVjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkZjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fWZ1bmN0aW9uIE1jKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9S2MoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9TmMoYiksbnVsbCE9PWImJnhjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIE9jKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBCYz1NYyhCYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gQ2M9TWMoQ2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIERjPU1jKERjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7RWMuc2V0KGYsTWMoRWMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLEZjLnNldChmLE1jKEZjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFBjKGEpe3ZhciBiPXRjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZGMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZWMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe3ljKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBRYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1OYyhiKTtudWxsIT09YyYmeGMoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIFNjKGEsYixjKXtRYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gVGMoKXtmb3IoemM9ITE7MDxBYy5sZW5ndGg7KXt2YXIgYT1BY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9TmMoYS5ibG9ja2VkT24pO251bGwhPT1hJiZ3YyhhKTticmVha312YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpBYy5zaGlmdCgpfW51bGwhPT1CYyYmUWMoQmMpJiYoQmM9bnVsbCk7bnVsbCE9PUNjJiZRYyhDYykmJihDYz1udWxsKTtudWxsIT09RGMmJlFjKERjKSYmKERjPW51bGwpO0VjLmZvckVhY2goU2MpO0ZjLmZvckVhY2goU2MpfWZ1bmN0aW9uIFVjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCx6Y3x8KHpjPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFRjKSkpfVxuZnVuY3Rpb24gVmMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gVWMoYixhKX1pZigwPEFjLmxlbmd0aCl7VWMoQWNbMF0sYSk7Zm9yKHZhciBjPTE7YzxBYy5sZW5ndGg7YysrKXt2YXIgZD1BY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUJjJiZVYyhCYyxhKTtudWxsIT09Q2MmJlVjKENjLGEpO251bGwhPT1EYyYmVWMoRGMsYSk7RWMuZm9yRWFjaChiKTtGYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxHYy5sZW5ndGg7YysrKWQ9R2NbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPEdjLmxlbmd0aCYmKGM9R2NbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUGMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZHYy5zaGlmdCgpfVxudmFyIFdjPXt9LFljPW5ldyBNYXAsWmM9bmV3IE1hcCwkYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixYYixcImFuaW1hdGlvbkVuZFwiLFliLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsWmIsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXG5cInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwkYixcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gYWQoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV0sZj1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtmPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpmLGNhcHR1cmVkOmYrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbZF0sZXZlbnRQcmlvcml0eTpifTtaYy5zZXQoZCxiKTtZYy5zZXQoZCxmKTtXY1tlXT1mfX1cbmFkKFwiYmx1ciBibHVyIGNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzIGZvY3VzIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksMCk7XG5hZChcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTthZCgkYywyKTtmb3IodmFyIGJkPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxjZD0wO2NkPGJkLmxlbmd0aDtjZCsrKVpjLnNldChiZFtjZF0sMCk7XG52YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBGKGEsYil7dmMoYixhLCExKX1mdW5jdGlvbiB2YyhhLGIsYyl7dmFyIGQ9WmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1kPzI6ZCl7Y2FzZSAwOmQ9Z2QuYmluZChudWxsLGIsMSxhKTticmVhaztjYXNlIDE6ZD1oZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2RlZmF1bHQ6ZD1pZC5iaW5kKG51bGwsYiwxLGEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7SmF8fEhhKCk7dmFyIGU9aWQsZj1KYTtKYT0hMDt0cnl7R2EoZSxhLGIsYyxkKX1maW5hbGx5eyhKYT1mKXx8TGEoKX19ZnVuY3Rpb24gaGQoYSxiLGMsZCl7ZWQoZGQsaWQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGlkKGEsYixjLGQpe2lmKGZkKWlmKDA8QWMubGVuZ3RoJiYtMTxIYy5pbmRleE9mKGEpKWE9S2MobnVsbCxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2V7dmFyIGU9UmMoYSxiLGMsZCk7aWYobnVsbD09PWUpTGMoYSxkKTtlbHNlIGlmKC0xPEhjLmluZGV4T2YoYSkpYT1LYyhlLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZSBpZighT2MoZSxhLGIsYyxkKSl7TGMoYSxkKTthPXJjKGEsZCxudWxsLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfX19fVxuZnVuY3Rpb24gUmMoYSxiLGMsZCl7Yz1uYyhkKTtjPXRjKGMpO2lmKG51bGwhPT1jKXt2YXIgZT1kYyhjKTtpZihudWxsPT09ZSljPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2M9ZWMoZSk7aWYobnVsbCE9PWMpcmV0dXJuIGM7Yz1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7Yz1udWxsfWVsc2UgZSE9PWMmJihjPW51bGwpfX1hPXJjKGEsZCxjLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfXJldHVybiBudWxsfVxudmFyIGpkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGtkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhqZCkuZm9yRWFjaChmdW5jdGlvbihhKXtrZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2pkW2JdPWpkW2FdfSl9KTtmdW5jdGlvbiBsZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8amQuaGFzT3duUHJvcGVydHkoYSkmJmpkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG1kKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPWxkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIG5kPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBvZChhLGIpe2lmKGIpe2lmKG5kW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gcGQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBxZD1NYi5odG1sO2Z1bmN0aW9uIHJkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWNjKGEpO2I9d2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspdWMoYltkXSxhLGMpfWZ1bmN0aW9uIHNkKCl7fVxuZnVuY3Rpb24gdGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIHVkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiB2ZChhLGIpe3ZhciBjPXVkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXVkKGMpfX1cbmZ1bmN0aW9uIHdkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/d2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIHhkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPXRkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPXRkKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24geWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgemQ9XCIkXCIsQWQ9XCIvJFwiLEJkPVwiJD9cIixDZD1cIiQhXCIsRGQ9bnVsbCxFZD1udWxsO2Z1bmN0aW9uIEZkKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIEdkKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgSGQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsSWQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIEpkKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gS2QoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09emR8fGM9PT1DZHx8Yz09PUJkKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09QWQmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBMZD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxNZD1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xkLE5kPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGQsT2Q9XCJfX3JlYWN0Q29udGFpbmVyZSRcIitMZDtcbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWFbTWRdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW09kXXx8Y1tNZF0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1LZChhKTtudWxsIT09YTspe2lmKGM9YVtNZF0pcmV0dXJuIGM7YT1LZChhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTmMoYSl7YT1hW01kXXx8YVtPZF07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIFBkKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIFFkKGEpe3JldHVybiBhW05kXXx8bnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWxhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxcbmIsdHlwZW9mIGMpKTtyZXR1cm4gY31mdW5jdGlvbiBUZChhLGIsYyl7aWYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFVkKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmQoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVRkKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspVGQoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBWZChhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFdkKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmQoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFhkKGEpe2pjKGEsVWQpfXZhciBZZD1udWxsLFpkPW51bGwsJGQ9bnVsbDtcbmZ1bmN0aW9uIGFlKCl7aWYoJGQpcmV0dXJuICRkO3ZhciBhLGI9WmQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gJGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBiZSgpe3JldHVybiEwfWZ1bmN0aW9uIGNlKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBHKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9iZTpjZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWNlO3JldHVybiB0aGlzfVxubihHLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWJlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWJlfSxpc1BlcnNpc3RlbnQ6Y2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Y2U7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtHLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkcuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7ZGUoYyk7cmV0dXJuIGN9O2RlKEcpO2Z1bmN0aW9uIGVlKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gZmUoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gZGUoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9ZWU7YS5yZWxlYXNlPWZlfXZhciBnZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaGU9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGllPVs5LDEzLDI3LDMyXSxqZT15YSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csa2U9bnVsbDt5YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoa2U9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBsZT15YSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWtlLG1lPXlhJiYoIWplfHxrZSYmODxrZSYmMTE+PWtlKSxuZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxvZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxwZT0hMTtcbmZ1bmN0aW9uIHFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09aWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiByZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBzZT0hMTtmdW5jdGlvbiB0ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcmUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3BlPSEwO3JldHVybiBuZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1uZSYmcGU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdWUoYSxiKXtpZihzZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhamUmJnFlKGEsYik/KGE9YWUoKSwkZD1aZD1ZZD1udWxsLHNlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBtZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgdmU9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihqZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1vZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1vZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9b2UuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIHNlP3FlKGEsYykmJihmPW9lLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9b2UuY29tcG9zaXRpb25TdGFydCk7Zj8obWUmJlwia29cIiE9PWMubG9jYWxlJiYoc2V8fGYhPT1vZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1vZS5jb21wb3NpdGlvbkVuZCYmc2UmJihlPWFlKCkpOihZZD1kLFpkPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LHNlPSEwKSksZj1nZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPXJlKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxYZChmKSxlPWYpOmU9bnVsbDsoYT1sZT90ZShhLGMpOnVlKGEsYykpPyhiPWhlLmdldFBvb2xlZChvZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWGQoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sd2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24geGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF3ZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgeWU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gemUoYSxiLGMpe2E9Ry5nZXRQb29sZWQoeWUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtEYShjKTtYZChhKTtyZXR1cm4gYX12YXIgQWU9bnVsbCxCZT1udWxsO2Z1bmN0aW9uIENlKGEpe21jKGEpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPVBkKGEpO2lmKHliKGIpKXJldHVybiBhfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEZlPSExO3lhJiYoRmU9b2MoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBHZSgpe0FlJiYoQWUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpLEJlPUFlPW51bGwpfWZ1bmN0aW9uIEhlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZEZShCZSkpaWYoYT16ZShCZSxhLG5jKGEpKSxKYSltYyhhKTtlbHNle0phPSEwO3RyeXtGYShDZSxhKX1maW5hbGx5e0phPSExLExhKCl9fX1mdW5jdGlvbiBJZShhLGIsYyl7XCJmb2N1c1wiPT09YT8oR2UoKSxBZT1iLEJlPWMsQWUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpKTpcImJsdXJcIj09PWEmJkdlKCl9ZnVuY3Rpb24gSmUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gRGUoQmUpfWZ1bmN0aW9uIEtlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gRGUoYil9ZnVuY3Rpb24gTGUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gRGUoYil9XG52YXIgTWU9e2V2ZW50VHlwZXM6eWUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpGZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/UGQoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1FZTtlbHNlIGlmKHhlKGUpKWlmKEZlKWc9TGU7ZWxzZXtnPUplO3ZhciBoPUllfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1LZSk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gemUoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxOZT1HLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksXG5PZT17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGUoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZVthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFFlKCl7cmV0dXJuIFBlfVxudmFyIFJlPTAsU2U9MCxUZT0hMSxVZT0hMSxWZT1OZS5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9UmU7UmU9YS5zY3JlZW5YO3JldHVybiBUZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFRlPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9U2U7U2U9YS5zY3JlZW5ZO3JldHVybiBVZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFVlPSEwLDApfX0pLFdlPVZlLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxYZT17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sWWU9e2V2ZW50VHlwZXM6WGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7Zj1kLndpbmRvdz09PWQ/ZDooZj1kLm93bmVyRG9jdW1lbnQpP2YuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT90YyhiKTpudWxsLG51bGwhPT1iKXt2YXIgaD1kYyhiKTtpZihiIT09aHx8NSE9PWIudGFnJiY2IT09Yi50YWcpYj1udWxsfX1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09XG5hKXt2YXIgaz1WZTt2YXIgbD1YZS5tb3VzZUxlYXZlO3ZhciBtPVhlLm1vdXNlRW50ZXI7dmFyIHA9XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWs9V2UsbD1YZS5wb2ludGVyTGVhdmUsbT1YZS5wb2ludGVyRW50ZXIscD1cInBvaW50ZXJcIjthPW51bGw9PWc/ZjpQZChnKTtmPW51bGw9PWI/ZjpQZChiKTtsPWsuZ2V0UG9vbGVkKGwsZyxjLGQpO2wudHlwZT1wK1wibGVhdmVcIjtsLnRhcmdldD1hO2wucmVsYXRlZFRhcmdldD1mO2M9ay5nZXRQb29sZWQobSxiLGMsZCk7Yy50eXBlPXArXCJlbnRlclwiO2MudGFyZ2V0PWY7Yy5yZWxhdGVkVGFyZ2V0PWE7ZD1nO3A9YjtpZihkJiZwKWE6e2s9ZDttPXA7Zz0wO2ZvcihhPWs7YTthPVJkKGEpKWcrKzthPTA7Zm9yKGI9bTtiO2I9UmQoYikpYSsrO2Zvcig7MDxnLWE7KWs9UmQoayksZy0tO2Zvcig7MDxhLWc7KW09UmQobSksYS0tO2Zvcig7Zy0tOyl7aWYoaz09PW18fGs9PT1tLmFsdGVybmF0ZSlicmVhayBhO1xuaz1SZChrKTttPVJkKG0pfWs9bnVsbH1lbHNlIGs9bnVsbDttPWs7Zm9yKGs9W107ZCYmZCE9PW07KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztrLnB1c2goZCk7ZD1SZChkKX1mb3IoZD1bXTtwJiZwIT09bTspe2c9cC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2QucHVzaChwKTtwPVJkKHApfWZvcihwPTA7cDxrLmxlbmd0aDtwKyspVmQoa1twXSxcImJ1YmJsZWRcIixsKTtmb3IocD1kLmxlbmd0aDswPHAtLTspVmQoZFtwXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuIDA9PT0oZSY2NCk/W2xdOltsLGNdfX07ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciAkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpaZSxhZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gYmYoYSxiKXtpZigkZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWFmLmNhbGwoYixjW2RdKXx8ISRlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgY2Y9eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWY9bnVsbCxmZj1udWxsLGdmPW51bGwsaGY9ITE7XG5mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhmfHxudWxsPT1lZnx8ZWYhPT10ZChjKSlyZXR1cm4gbnVsbDtjPWVmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJnlkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdmJiZiZihnZixjKT9udWxsOihnZj1jLGE9Ry5nZXRQb29sZWQoZGYuc2VsZWN0LGZmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWYsWGQoYSksYSl9XG52YXIga2Y9e2V2ZW50VHlwZXM6ZGYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUsZil7ZT1mfHwoZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpO2lmKCEoZj0hZSkpe2E6e2U9Y2MoZSk7Zj13YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGQoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZih4ZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZj1lLGZmPWIsZ2Y9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdmPWZmPWVmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGY9ITEsamYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2YpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBqZihjLGQpfXJldHVybiBudWxsfX0sbGY9Ry5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG1mPUcuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksbmY9TmUuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBvZihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBwZj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0scWY9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHJmPU5lLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1wZlthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/cWZbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29mKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29mKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksc2Y9VmUuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHRmPU5lLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlfSksdWY9Ry5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksdmY9VmUuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx3Zj17ZXZlbnRUeXBlczpXYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVljLmdldChhKTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9mKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1yZjticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9bmY7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1cblZlO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9c2Y7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT10ZjticmVhaztjYXNlIFhiOmNhc2UgWWI6Y2FzZSBaYjphPWxmO2JyZWFrO2Nhc2UgJGI6YT11ZjticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1OZTticmVhaztjYXNlIFwid2hlZWxcIjphPXZmO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9bWY7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1cbldlO2JyZWFrO2RlZmF1bHQ6YT1HfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WGQoYik7cmV0dXJuIGJ9fTtpZihwYSl0aHJvdyBFcnJvcih1KDEwMSkpO3BhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3JhKCk7dmFyIHhmPU5jO2xhPVFkO21hPXhmO25hPVBkO3hhKHtTaW1wbGVFdmVudFBsdWdpbjp3ZixFbnRlckxlYXZlRXZlbnRQbHVnaW46WWUsQ2hhbmdlRXZlbnRQbHVnaW46TWUsU2VsZWN0RXZlbnRQbHVnaW46a2YsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp2ZX0pO3ZhciB5Zj1bXSx6Zj0tMTtmdW5jdGlvbiBIKGEpezA+emZ8fChhLmN1cnJlbnQ9eWZbemZdLHlmW3pmXT1udWxsLHpmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3pmKys7eWZbemZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQWY9e30sSj17Y3VycmVudDpBZn0sSz17Y3VycmVudDohMX0sQmY9QWY7ZnVuY3Rpb24gQ2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBBZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBEZigpe0goSyk7SChKKX1mdW5jdGlvbiBFZihhLGIsYyl7aWYoSi5jdXJyZW50IT09QWYpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYik7SShLLGMpfWZ1bmN0aW9uIEZmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgscGIoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEdmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxBZjtCZj1KLmN1cnJlbnQ7SShKLGEpO0koSyxLLmN1cnJlbnQpO3JldHVybiEwfVxuZnVuY3Rpb24gSGYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYT1GZihhLGIsQmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKEspLEgoSiksSShKLGEpKTpIKEspO0koSyxjKX1cbnZhciBJZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxKZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssS2Y9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxMZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxNZj1yLnVuc3RhYmxlX25vdyxOZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLE9mPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksUGY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxRZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFJmPXIudW5zdGFibGVfTG93UHJpb3JpdHksU2Y9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksVGY9e30sVWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxWZj12b2lkIDAhPT1MZj9MZjpmdW5jdGlvbigpe30sV2Y9bnVsbCxYZj1udWxsLFlmPSExLFpmPU1mKCksJGY9MUU0PlpmP01mOmZ1bmN0aW9uKCl7cmV0dXJuIE1mKCktWmZ9O1xuZnVuY3Rpb24gYWcoKXtzd2l0Y2goTmYoKSl7Y2FzZSBPZjpyZXR1cm4gOTk7Y2FzZSBQZjpyZXR1cm4gOTg7Y2FzZSBRZjpyZXR1cm4gOTc7Y2FzZSBSZjpyZXR1cm4gOTY7Y2FzZSBTZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gYmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIE9mO2Nhc2UgOTg6cmV0dXJuIFBmO2Nhc2UgOTc6cmV0dXJuIFFmO2Nhc2UgOTY6cmV0dXJuIFJmO2Nhc2UgOTU6cmV0dXJuIFNmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGNnKGEsYil7YT1iZyhhKTtyZXR1cm4gSWYoYSxiKX1mdW5jdGlvbiBkZyhhLGIsYyl7YT1iZyhhKTtyZXR1cm4gSmYoYSxiLGMpfWZ1bmN0aW9uIGVnKGEpe251bGw9PT1XZj8oV2Y9W2FdLFhmPUpmKE9mLGZnKSk6V2YucHVzaChhKTtyZXR1cm4gVGZ9ZnVuY3Rpb24gZ2coKXtpZihudWxsIT09WGYpe3ZhciBhPVhmO1hmPW51bGw7S2YoYSl9ZmcoKX1cbmZ1bmN0aW9uIGZnKCl7aWYoIVlmJiZudWxsIT09V2Ype1lmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVdmO2NnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtXZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1XZiYmKFdmPVdmLnNsaWNlKGErMSkpLEpmKE9mLGdnKSxjO31maW5hbGx5e1lmPSExfX19ZnVuY3Rpb24gaGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gaWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIGpnPXtjdXJyZW50Om51bGx9LGtnPW51bGwsbGc9bnVsbCxtZz1udWxsO2Z1bmN0aW9uIG5nKCl7bWc9bGc9a2c9bnVsbH1cbmZ1bmN0aW9uIG9nKGEpe3ZhciBiPWpnLmN1cnJlbnQ7SChqZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBwZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBxZyhhLGIpe2tnPWE7bWc9bGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYocmc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gc2coYSxiKXtpZihtZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpbWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PWxnKXtpZihudWxsPT09a2cpdGhyb3cgRXJyb3IodSgzMDgpKTtsZz1iO2tnLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgbGc9bGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHRnPSExO2Z1bmN0aW9uIHVnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsYmFzZVF1ZXVlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxiYXNlUXVldWU6YS5iYXNlUXVldWUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gd2coYSxiKXthPXtleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfTtyZXR1cm4gYS5uZXh0PWF9ZnVuY3Rpb24geGcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZ2ZyhjLGEpO2E9YS51cGRhdGVRdWV1ZTtjPWEuYmFzZVF1ZXVlO251bGw9PT1jPyhhLmJhc2VRdWV1ZT1iLm5leHQ9YixiLm5leHQ9Yik6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpfVxuZnVuY3Rpb24gemcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt0Zz0hMTt2YXIgZj1lLmJhc2VRdWV1ZSxnPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWcpe2lmKG51bGwhPT1mKXt2YXIgaD1mLm5leHQ7Zi5uZXh0PWcubmV4dDtnLm5leHQ9aH1mPWc7ZS5zaGFyZWQucGVuZGluZz1udWxsO2g9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJihoPWgudXBkYXRlUXVldWUsbnVsbCE9PWgmJihoLmJhc2VRdWV1ZT1nKSl9aWYobnVsbCE9PWYpe2g9Zi5uZXh0O3ZhciBrPWUuYmFzZVN0YXRlLGw9MCxtPW51bGwscD1udWxsLHg9bnVsbDtpZihudWxsIT09aCl7dmFyIHo9aDtkb3tnPXouZXhwaXJhdGlvblRpbWU7aWYoZzxkKXt2YXIgY2E9e2V4cGlyYXRpb25UaW1lOnouZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT14PyhwPXg9XG5jYSxtPWspOng9eC5uZXh0PWNhO2c+bCYmKGw9Zyl9ZWxzZXtudWxsIT09eCYmKHg9eC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfSk7QWcoZyx6LnN1c3BlbnNlQ29uZmlnKTthOnt2YXIgRD1hLHQ9ejtnPWI7Y2E9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpEPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRCl7az1ELmNhbGwoY2EsayxnKTticmVhayBhfWs9RDticmVhayBhO2Nhc2UgMzpELmVmZmVjdFRhZz1ELmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6RD10LnBheWxvYWQ7Zz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgRD9ELmNhbGwoY2EsayxnKTpEO2lmKG51bGw9PT1nfHx2b2lkIDA9PT1nKWJyZWFrIGE7az1uKHt9LGssZyk7YnJlYWsgYTtjYXNlIDI6dGc9ITB9fW51bGwhPT16LmNhbGxiYWNrJiZcbihhLmVmZmVjdFRhZ3w9MzIsZz1lLmVmZmVjdHMsbnVsbD09PWc/ZS5lZmZlY3RzPVt6XTpnLnB1c2goeikpfXo9ei5uZXh0O2lmKG51bGw9PT16fHx6PT09aClpZihnPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWcpYnJlYWs7ZWxzZSB6PWYubmV4dD1nLm5leHQsZy5uZXh0PWgsZS5iYXNlUXVldWU9Zj1nLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKX1udWxsPT09eD9tPWs6eC5uZXh0PXA7ZS5iYXNlU3RhdGU9bTtlLmJhc2VRdWV1ZT14O0JnKGwpO2EuZXhwaXJhdGlvblRpbWU9bDthLm1lbW9pemVkU3RhdGU9a319XG5mdW5jdGlvbiBDZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWU7ZT1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkKXRocm93IEVycm9yKHUoMTkxLGQpKTtkLmNhbGwoZSl9fX12YXIgRGc9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsRWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gRmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5leHBpcmF0aW9uVGltZSYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEpnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9kYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2coKSxkPURnLnN1c3BlbnNlO1xuYz1IZyhjLGEsZCk7ZD13ZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3hnKGEsZCk7SWcoYSxjKX19O2Z1bmN0aW9uIEtnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWJmKGMsZCl8fCFiZihlLGYpOiEwfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3ZhciBkPSExLGU9QWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2coZik6KGU9TChiKT9CZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9DZihhLGUpOkFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Smc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZzt1ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnKGYpOihmPUwoYik/QmY6Si5jdXJyZW50LGUuY29udGV4dD1DZihhLGYpKTt6ZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksemcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBPZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBRZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gUmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9U2coYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVVnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVBnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9VmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVdnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGM9VWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRhOnJldHVybiBiPVZnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihPZyhiKXx8XG5uYihiKSlyZXR1cm4gYj1XZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtRZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoT2coYyl8fG5iKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtRZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoT2coZCl8fG5iKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtRZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIGNhKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCxtPWcseT1nPTAsQT1udWxsO251bGwhPT1tJiZ5PGgubGVuZ3RoO3krKyl7bS5pbmRleD55PyhBPW0sbT1udWxsKTpBPW0uc2libGluZzt2YXIgcT14KGUsbSxoW3ldLGspO2lmKG51bGw9PT1xKXtudWxsPT09bSYmKG09QSk7YnJlYWt9YSYmXG5tJiZudWxsPT09cS5hbHRlcm5hdGUmJmIoZSxtKTtnPWYocSxnLHkpO251bGw9PT10P2w9cTp0LnNpYmxpbmc9cTt0PXE7bT1BfWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7eTxoLmxlbmd0aDt5KyspbT1wKGUsaFt5XSxrKSxudWxsIT09bSYmKGc9ZihtLGcseSksbnVsbD09PXQ/bD1tOnQuc2libGluZz1tLHQ9bSk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3k8aC5sZW5ndGg7eSsrKUE9eihtLGUseSxoW3ldLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09QS5rZXk/eTpBLmtleSksZz1mKEEsZyx5KSxudWxsPT09dD9sPUE6dC5zaWJsaW5nPUEsdD1BKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEQoZSxnLGgsbCl7dmFyIGs9bmIoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspdGhyb3cgRXJyb3IodSgxNTApKTtoPWsuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09az1udWxsLHQ9Zyx5PWc9MCxBPW51bGwscT1oLm5leHQoKTtudWxsIT09dCYmIXEuZG9uZTt5KysscT1oLm5leHQoKSl7dC5pbmRleD55PyhBPXQsdD1udWxsKTpBPXQuc2libGluZzt2YXIgRD14KGUsdCxxLnZhbHVlLGwpO2lmKG51bGw9PT1EKXtudWxsPT09dCYmKHQ9QSk7YnJlYWt9YSYmdCYmbnVsbD09PUQuYWx0ZXJuYXRlJiZiKGUsdCk7Zz1mKEQsZyx5KTtudWxsPT09bT9rPUQ6bS5zaWJsaW5nPUQ7bT1EO3Q9QX1pZihxLmRvbmUpcmV0dXJuIGMoZSx0KSxrO2lmKG51bGw9PT10KXtmb3IoOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT1wKGUscS52YWx1ZSxsKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGt9Zm9yKHQ9ZChlLHQpOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT16KHQsZSx5LHEudmFsdWUsbCksbnVsbCE9PXEmJihhJiZudWxsIT09XG5xLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PXEua2V5P3k6cS5rZXkpLGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4ga31yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT1hYil7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxcbmsuc2libGluZyk7ZD1lKGssZi5wcm9wcyk7ZC5yZWY9UGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYj8oZD1XZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPVxuZC5zaWJsaW5nfWQ9VmcoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VGcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoT2coZikpcmV0dXJuIGNhKGEsZCxmLGgpO2lmKG5iKGYpKXJldHVybiBEKGEsZCxmLGgpO2wmJlFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBYZz1SZyghMCksWWc9UmcoITEpLFpnPXt9LCRnPXtjdXJyZW50OlpnfSxhaD17Y3VycmVudDpaZ30sYmg9e2N1cnJlbnQ6Wmd9O1xuZnVuY3Rpb24gY2goYSl7aWYoYT09PVpnKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZGgoYSxiKXtJKGJoLGIpO0koYWgsYSk7SSgkZyxaZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpPYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9T2IoYixhKX1IKCRnKTtJKCRnLGIpfWZ1bmN0aW9uIGVoKCl7SCgkZyk7SChhaCk7SChiaCl9ZnVuY3Rpb24gZmgoYSl7Y2goYmguY3VycmVudCk7dmFyIGI9Y2goJGcuY3VycmVudCk7dmFyIGM9T2IoYixhLnR5cGUpO2IhPT1jJiYoSShhaCxhKSxJKCRnLGMpKX1mdW5jdGlvbiBnaChhKXthaC5jdXJyZW50PT09YSYmKEgoJGcpLEgoYWgpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIGhoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PUJkfHxjLmRhdGE9PT1DZCkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiBpaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBqaD1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGtoPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGxoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsbWg9ITE7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIG5oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoISRlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7bGg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IuZXhwaXJhdGlvblRpbWU9MDtqaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP3BoOnFoO2E9YyhkLGUpO2lmKGIuZXhwaXJhdGlvblRpbWU9PT1saCl7Zj0wO2Rve2IuZXhwaXJhdGlvblRpbWU9MDtpZighKDI1PmYpKXRocm93IEVycm9yKHUoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7amguY3VycmVudD1yaDthPWMoZCxlKX13aGlsZShiLmV4cGlyYXRpb25UaW1lPT09bGgpfWpoLmN1cnJlbnQ9c2g7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtsaD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYoYil0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBhfVxuZnVuY3Rpb24gdGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gdWgoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIHZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gd2goYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsuZXhwaXJhdGlvblRpbWU7aWYobDxsaCl7dmFyIG09e2V4cGlyYXRpb25UaW1lOmsuZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1tLGY9ZCk6aD1oLm5leHQ9bTtsPk4uZXhwaXJhdGlvblRpbWUmJlxuKE4uZXhwaXJhdGlvblRpbWU9bCxCZyhsKSl9ZWxzZSBudWxsIT09aCYmKGg9aC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxBZyhsLGsuc3VzcGVuc2VDb25maWcpLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nOyRlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiB4aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7JGUoZixiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIHloKGEpe3ZhciBiPXRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOnZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEJoKCl7cmV0dXJuIHVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBDaChhLGIsYyxkKXt2YXIgZT10aCgpO04uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIERoKGEsYixjLGQpe3ZhciBlPXVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmgoZCxnLmRlcHMpKXtBaChiLGMsZixkKTtyZXR1cm59fU4uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIEVoKGEsYil7cmV0dXJuIENoKDUxNiw0LGEsYil9ZnVuY3Rpb24gRmgoYSxiKXtyZXR1cm4gRGgoNTE2LDQsYSxiKX1mdW5jdGlvbiBHaChhLGIpe3JldHVybiBEaCg0LDIsYSxiKX1cbmZ1bmN0aW9uIEhoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gSWgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBEaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gSmgoKXt9ZnVuY3Rpb24gS2goYSxiKXt0aCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIExoKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gTWgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gTmgoYSxiLGMpe3ZhciBkPWFnKCk7Y2coOTg+ZD85ODpkLGZ1bmN0aW9uKCl7YSghMCl9KTtjZyg5NzxkPzk3OmQsZnVuY3Rpb24oKXt2YXIgZD1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSghMSksYygpfWZpbmFsbHl7a2guc3VzcGVuc2U9ZH19KX1cbmZ1bmN0aW9uIHpoKGEsYixjKXt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT17ZXhwaXJhdGlvblRpbWU6ZCxzdXNwZW5zZUNvbmZpZzplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBmPWIucGVuZGluZztudWxsPT09Zj9lLm5leHQ9ZTooZS5uZXh0PWYubmV4dCxmLm5leHQ9ZSk7Yi5wZW5kaW5nPWU7Zj1hLmFsdGVybmF0ZTtpZihhPT09Tnx8bnVsbCE9PWYmJmY9PT1OKW1oPSEwLGUuZXhwaXJhdGlvblRpbWU9bGgsTi5leHBpcmF0aW9uVGltZT1saDtlbHNle2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWZ8fDA9PT1mLmV4cGlyYXRpb25UaW1lKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmVhZ2VyUmVkdWNlcj1mO2UuZWFnZXJTdGF0ZT1oO2lmKCRlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31JZyhhLFxuZCl9fVxudmFyIHNoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxwaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6S2gsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIENoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIENoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxcbmJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10aCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTp5aCx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eWgoYSksZD1jWzBdLGU9Y1sxXTtFaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9XG5jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXloKCExKSxjPWJbMF07Yj1iWzFdO3JldHVybltLaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxxaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOndoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB3aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz13aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbndoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxyaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOnhoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB4aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz14aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj14aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLFxuYixhKSxbYixhXSksY119fSxPaD1udWxsLFBoPW51bGwsUWg9ITE7ZnVuY3Rpb24gUmgoYSxiKXt2YXIgYz1TaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gVGgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFVoKGEpe2lmKFFoKXt2YXIgYj1QaDtpZihiKXt2YXIgYz1iO2lmKCFUaChhLGIpKXtiPUpkKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhVGgoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPUpkKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLFFoPSExLE9oPWF9fWZ1bmN0aW9uIFZoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtPaD1hfVxuZnVuY3Rpb24gV2goYSl7aWYoYSE9PU9oKXJldHVybiExO2lmKCFRaClyZXR1cm4gVmgoYSksUWg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFHZChiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9UGg7YjspUmgoYSxiKSxiPUpkKGIubmV4dFNpYmxpbmcpO1ZoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09QWQpe2lmKDA9PT1iKXtQaD1KZChhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT16ZCYmYyE9PUNkJiZjIT09QmR8fGIrK31hPWEubmV4dFNpYmxpbmd9UGg9bnVsbH19ZWxzZSBQaD1PaD9KZChhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9V2EuUmVhY3RDdXJyZW50T3duZXIscmc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1lnKGIsbnVsbCxjLGQpOlhnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtxZyhiLGUpO2Q9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpiZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1TZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmJmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHJnPSExLGU8Zik/KGIuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSwkaChhLGIsZikpOmRpKGEsYixjLGQsZil9ZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBkaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/QmY6Si5jdXJyZW50O2Y9Q2YoYixmKTtxZyhiLGUpO2M9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO3FnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxMZyhiLGMsZCksTmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCk7dGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9eDt6ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXRnfHxLZyhiLGMsaCxkLHgsayxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSx2ZyhhLGIpLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmlnKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCksdGc9ITEsaz1iLm1lbW9pemVkU3RhdGUsZy5zdGF0ZT1rLHpnKGIsZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09dGd8fEtnKGIsYyxoLGQsayx4LGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6XG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGdpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGdpKGEsYixjLGQsZSxmKXtlaShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmSGYoYixjLCExKSwkaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtZaC5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1YZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVhnKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJkhmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9FZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZFZihhLGIuY29udGV4dCwhMSk7ZGgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIGlpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24gamkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJlVoKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVlnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPVNnKGQsZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1jO3JldHVybiBkfWM9WGcoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9XG5jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1YZyhiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIGtpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTtwZyhhLnJldHVybixiKX1mdW5jdGlvbiBsaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJmtpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKWtpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aGgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtsaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1oaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9bGkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmxpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmQmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1TZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBuaSxvaSxwaSxxaTtcbm5pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7Y2goJGcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpiKGcsZik7ZD16YihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2IoZyxmKTtkPUdiKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9c2QpfW9kKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmcmQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hO2lmKGIudXBkYXRlUXVldWU9ZSliLmVmZmVjdFRhZ3w9NH19O1xucWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmVmZmVjdFRhZ3w9NCl9O2Z1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAzOnJldHVybiBlaCgpLEgoSyksSChKKSxjPWIuc3RhdGVOb2RlLGMucGVuZGluZ0NvbnRleHQmJihjLmNvbnRleHQ9Yy5wZW5kaW5nQ29udGV4dCxjLnBlbmRpbmdDb250ZXh0PW51bGwpLG51bGwhPT1hJiZudWxsIT09YS5jaGlsZHx8IVdoKGIpfHwoYi5lZmZlY3RUYWd8PTQpLG9pKGIpLG51bGw7Y2FzZSA1OmdoKGIpO2M9Y2goYmguY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlwaShhLGIsZSxkLGMpLGEucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbnJldHVybiBudWxsfWE9Y2goJGcuY3VycmVudCk7aWYoV2goYikpe2Q9Yi5zdGF0ZU5vZGU7ZT1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTWRdPWI7ZFtOZF09Zjtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxhYy5sZW5ndGg7YSsrKUYoYWNbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoZCxmKTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoZCxmKSxGKFwiaW52YWxpZFwiLGQpLHJkKGMsXCJvbkNoYW5nZVwiKX1vZChlLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoYT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJihhPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6dmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJnJkKGMsZyl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGQpO0ViKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoZCk7TGIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJlxuKGQub25jbGljaz1zZCl9Yz1hO2IudXBkYXRlUXVldWU9YztudWxsIT09YyYmKGIuZWZmZWN0VGFnfD00KX1lbHNle2c9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7YT09PXFkJiYoYT1OYihlKSk7YT09PXFkP1wic2NyaXB0XCI9PT1lPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsZSk7YVtNZF09YjthW05kXT1kO25pKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXBkKGUsZCk7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmEpO2g9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWMubGVuZ3RoO2grKylGKGFjW2hdLGEpO2g9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsYSk7RihcInN1Ym1pdFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoYSxkKTtoPXpiKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9R2IoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2g9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihhLFxuZCk7aD1JYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1kfW9kKGUsaCk7dmFyIGs9aDtmb3IoZiBpbiBrKWlmKGsuaGFzT3duUHJvcGVydHkoZikpe3ZhciBsPWtbZl07XCJzdHlsZVwiPT09Zj9tZChhLGwpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmUWIoYSxsKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/KFwidGV4dGFyZWFcIiE9PWV8fFwiXCIhPT1sKSYmUmIoYSxsKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJlJiKGEsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYodmEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9bCYmcmQoYyxmKTpudWxsIT1sJiZYYShhLGYsbCxnKSl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGEpO0ViKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihhKTtMYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrcmIoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtjPWQudmFsdWU7bnVsbCE9Yz9IYihhLCEhZC5tdWx0aXBsZSxjLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmSGIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKGEub25jbGljaz1zZCl9RmQoZSxkKSYmKGIuZWZmZWN0VGFnfD00KX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5jPWNoKGJoLmN1cnJlbnQpO2NoKCRnLmN1cnJlbnQpO1doKGIpPyhjPWIuc3RhdGVOb2RlLGQ9Yi5tZW1vaXplZFByb3BzLGNbTWRdPWIsYy5ub2RlVmFsdWUhPT1kJiYoYi5lZmZlY3RUYWd8PTQpKTooYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGNbTWRdPWIsYi5zdGF0ZU5vZGU9Yyl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWMsYjtjPW51bGwhPT1kO2Q9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZXaChiKTooZT1hLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZSxjfHxudWxsPT09ZXx8KGU9YS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoZj1iLmZpcnN0RWZmZWN0LG51bGwhPT1mPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWYpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1cbmUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKSk7aWYoYyYmIWQmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpUz09PXRpJiYoUz11aSk7ZWxzZXtpZihTPT09dGl8fFM9PT11aSlTPXZpOzAhPT13aSYmbnVsbCE9PVQmJih4aShULFUpLHlpKFQsd2kpKX1pZihjfHxkKWIuZWZmZWN0VGFnfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxvaShiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAxOTpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2U9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zj1kLnJlbmRlcmluZztpZihudWxsPT09ZilpZihlKXJpKGQsITEpO2Vsc2V7aWYoUyE9PXRpfHxudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyZcbjY0KSlmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7YT1oaChmKTtpZihudWxsIT09YSl7Yi5lZmZlY3RUYWd8PTY0O3JpKGQsITEpO2U9YS51cGRhdGVRdWV1ZTtudWxsIT09ZSYmKGIudXBkYXRlUXVldWU9ZSxiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtmb3IoZD1iLmNoaWxkO251bGwhPT1kOyllPWQsZj1jLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxhPWUuYWx0ZXJuYXRlLG51bGw9PT1hPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZSxcbmUuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWEuY2hpbGQsZS5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxmPWEuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksZD1kLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWY9Zi5zaWJsaW5nfX1lbHNle2lmKCFlKWlmKGE9aGgoZiksbnVsbCE9PWEpe2lmKGIuZWZmZWN0VGFnfD02NCxlPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCkscmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFmLmFsdGVybmF0ZSlyZXR1cm4gYj1cbmIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqJGYoKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5kLnRhaWxFeHBpcmF0aW9uJiYxPGMmJihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxyaShkLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1jLTEpO2QuaXNCYWNrd2FyZHM/KGYuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zik6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1mOmIuY2hpbGQ9ZixkLmxhc3Q9Zil9cmV0dXJuIG51bGwhPT1kLnRhaWw/KDA9PT1kLnRhaWxFeHBpcmF0aW9uJiYoZC50YWlsRXhwaXJhdGlvbj0kZigpKzUwMCksYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9JGYoKSxjLnNpYmxpbmc9bnVsbCxiPU0uY3VycmVudCxJKE0sZT9iJjF8MjpiJjEpLGMpOm51bGx9dGhyb3cgRXJyb3IodSgxNTYsXG5iLnRhZykpO31mdW5jdGlvbiB6aShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkRmKCk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzplaCgpO0goSyk7SChKKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZ2goYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE0pLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChNKSxudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQWkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpxYihiKX19XG52YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1xYihjKSk7bnVsbCE9PWMmJnBiKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJnBiKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIERpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtFaShhLGMpfX1mdW5jdGlvbiBGaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtFaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBHaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzppZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBIaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmRlc3Ryb3k7Yy5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1kJiZkKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19XG5mdW5jdGlvbiBKaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SWkoMyxjKTtyZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczppZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1iPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkNnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9Q2coYyxiLGEpfXJldHVybjtcbmNhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyY0JiZGZChjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJlZjKGMpKSkpO3JldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEtpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGkmJkxpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7Y2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe0VpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpGaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZEaShiLGMpO2JyZWFrO2Nhc2UgNTpGaShiKTticmVhaztjYXNlIDQ6TWkoYSxiLGMpfX1cbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDtudWxsIT09YiYmTmkoYil9ZnVuY3Rpb24gT2koYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBQaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihPaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoUmIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE9pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9RaShhLGMsYik6UmkoYSxjLGIpfVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXNkKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUmkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihSaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVJpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIE1pKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoS2koaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoS2koYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjpIaSgzLGIpO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tOZF09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQmIoYyxkKTtwZChhLGUpO2I9cGQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP21kKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9RYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/UmIoYyxoKTpYYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6Q2IoYyxkKTticmVhaztcbmNhc2UgXCJ0ZXh0YXJlYVwiOktiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SGIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0hiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpIYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLFZjKGIuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP1xuZD0hMTooZD0hMCxjPWIuY2hpbGQsVGk9JGYoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PWxkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPVxuZjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhaztmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31VaShiKTtyZXR1cm47Y2FzZSAxOTpVaShiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9ZnVuY3Rpb24gVWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQmkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1WaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbnZhciBXaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBYaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1lpfHwoWWk9ITAsWmk9ZCk7Q2koYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiAkaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtDaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09YWo/YWo9bmV3IFNldChbdGhpc10pOmFqLmFkZCh0aGlzKSxDaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBiaj1NYXRoLmNlaWwsY2o9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaj1XYS5SZWFjdEN1cnJlbnRPd25lcixWPTAsZWo9OCxmaj0xNixnaj0zMix0aT0wLGhqPTEsaWo9Mix1aT0zLHZpPTQsamo9NSxXPVYsVD1udWxsLFg9bnVsbCxVPTAsUz10aSxraj1udWxsLGxqPTEwNzM3NDE4MjMsbWo9MTA3Mzc0MTgyMyxuaj1udWxsLHdpPTAsb2o9ITEsVGk9MCxwaj01MDAsWT1udWxsLFlpPSExLFppPW51bGwsYWo9bnVsbCxxaj0hMSxyaj1udWxsLHNqPTkwLHRqPW51bGwsdWo9MCx2aj1udWxsLHdqPTA7ZnVuY3Rpb24gR2coKXtyZXR1cm4oVyYoZmp8Z2opKSE9PVY/MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKTowIT09d2o/d2o6d2o9MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKX1cbmZ1bmN0aW9uIEhnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9YWcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFcmZmopIT09VilyZXR1cm4gVTtpZihudWxsIT09YylhPWhnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWhnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9aGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1UJiZhPT09VSYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gSWcoYSxiKXtpZig1MDx1ail0aHJvdyB1aj0wLHZqPW51bGwsRXJyb3IodSgxODUpKTthPXhqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWFnKCk7MTA3Mzc0MTgyMz09PWI/KFcmZWopIT09ViYmKFcmKGZqfGdqKSk9PT1WP3lqKGEpOihaKGEpLFc9PT1WJiZnZygpKTpaKGEpOyhXJjQpPT09Vnx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09dGo/dGo9bmV3IE1hcChbW2EsYl1dKTooYz10ai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnRqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24geGooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFQ9PT1lJiYoQmcoYiksUz09PXZpJiZ4aShlLFUpKSx5aShlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFBaihhLGIpKXJldHVybiBiO3ZhciBjPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDthPWM+YT9jOmE7cmV0dXJuIDI+PWEmJmIhPT1hPzA6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1lZyh5ai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9emooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPUdnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVRmJiZLZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/ZWcoeWouYmluZChudWxsLGEpKTpkZyhkLEJqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS0kZigpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gQmooYSxiKXt3aj0wO2lmKGIpcmV0dXJuIGI9R2coKSxDaihhLGIpLFooYSksbnVsbDt2YXIgYz16aihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZjPT09VXx8RWooYSxjKTtpZihudWxsIT09WCl7dmFyIGQ9VztXfD1majt2YXIgZT1GaigpO2RvIHRyeXtHaigpO2JyZWFrfWNhdGNoKGgpe0hqKGEsaCl9d2hpbGUoMSk7bmcoKTtXPWQ7Y2ouY3VycmVudD1lO2lmKFM9PT1oail0aHJvdyBiPWtqLEVqKGEsYykseGkoYSxjKSxaKGEpLGI7aWYobnVsbD09PVgpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVMsVD1udWxsLGQpe2Nhc2UgdGk6Y2FzZSBoajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2UgaWo6Q2ooYSwyPGM/MjpjKTticmVhaztjYXNlIHVpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYoMTA3Mzc0MTgyMz09PWxqJiYoZT1UaStwai0kZigpLDEwPGUpKXtpZihvail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9fWY9emooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZSk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSB2aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZihvaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfWU9emooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PW1qP2Q9MTAqKDEwNzM3NDE4MjEtbWopLSRmKCk6MTA3Mzc0MTgyMz09PWxqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1saiktNUUzLGU9JGYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha31KaihhKTticmVhaztjYXNlIGpqOmlmKDEwNzM3NDE4MjMhPT1saiYmbnVsbCE9PW5qKXtmPWxqO3ZhciBnPW5qO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPSRmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7eGkoYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUpqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIEJqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZiPT09VXx8RWooYSxiKTtpZihudWxsIT09WCl7dmFyIGM9VztXfD1majt2YXIgZD1GaigpO2RvIHRyeXtLaigpO2JyZWFrfWNhdGNoKGUpe0hqKGEsZSl9d2hpbGUoMSk7bmcoKTtXPWM7Y2ouY3VycmVudD1kO2lmKFM9PT1oail0aHJvdyBjPWtqLEVqKGEsYikseGkoYSxiKSxaKGEpLGM7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1Q9bnVsbDtKaihhKTtaKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIExqKCl7aWYobnVsbCE9PXRqKXt2YXIgYT10ajt0aj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe0NqKGMsYSk7WihjKX0pO2dnKCl9fVxuZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1mdW5jdGlvbiBOaihhLGIpe3ZhciBjPVc7VyY9LTI7V3w9ZWo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1cbmZ1bmN0aW9uIEVqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLElkKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkRmKCk7YnJlYWs7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2JyZWFrO2Nhc2UgNTpnaChkKTticmVhaztjYXNlIDQ6ZWgoKTticmVhaztjYXNlIDEzOkgoTSk7YnJlYWs7Y2FzZSAxOTpIKE0pO2JyZWFrO2Nhc2UgMTA6b2coZCl9Yz1jLnJldHVybn1UPWE7WD1TZyhhLmN1cnJlbnQsbnVsbCk7VT1iO1M9dGk7a2o9bnVsbDttaj1saj0xMDczNzQxODIzO25qPW51bGw7d2k9MDtvaj0hMX1cbmZ1bmN0aW9uIEhqKGEsYil7ZG97dHJ5e25nKCk7amguY3VycmVudD1zaDtpZihtaClmb3IodmFyIGM9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1jOyl7dmFyIGQ9Yy5xdWV1ZTtudWxsIT09ZCYmKGQucGVuZGluZz1udWxsKTtjPWMubmV4dH1saD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYobnVsbD09PVh8fG51bGw9PT1YLnJldHVybilyZXR1cm4gUz1oaixraj1iLFg9bnVsbDthOnt2YXIgZT1hLGY9WC5yZXR1cm4sZz1YLGg9YjtiPVU7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5maXJzdEVmZmVjdD1nLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09aCYmXCJvYmplY3RcIj09PXR5cGVvZiBoJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC50aGVuKXt2YXIgaz1oO2lmKDA9PT0oZy5tb2RlJjIpKXt2YXIgbD1nLmFsdGVybmF0ZTtsPyhnLnVwZGF0ZVF1ZXVlPWwudXBkYXRlUXVldWUsZy5tZW1vaXplZFN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxnLmV4cGlyYXRpb25UaW1lPWwuZXhwaXJhdGlvblRpbWUpOihnLnVwZGF0ZVF1ZXVlPVxubnVsbCxnLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIG09MCE9PShNLmN1cnJlbnQmMSkscD1mO2Rve3ZhciB4O2lmKHg9MTM9PT1wLnRhZyl7dmFyIHo9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT16KXg9bnVsbCE9PXouZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBjYT1wLm1lbW9pemVkUHJvcHM7eD12b2lkIDA9PT1jYS5mYWxsYmFjaz8hMTohMCE9PWNhLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOm0/ITE6ITB9fWlmKHgpe3ZhciBEPXAudXBkYXRlUXVldWU7aWYobnVsbD09PUQpe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7cC51cGRhdGVRdWV1ZT10fWVsc2UgRC5hZGQoayk7aWYoMD09PShwLm1vZGUmMikpe3AuZWZmZWN0VGFnfD02NDtnLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWcudGFnKWlmKG51bGw9PT1nLmFsdGVybmF0ZSlnLnRhZz0xNztlbHNle3ZhciB5PXdnKDEwNzM3NDE4MjMsbnVsbCk7eS50YWc9Mjt4ZyhnLHkpfWcuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztcbmJyZWFrIGF9aD12b2lkIDA7Zz1iO3ZhciBBPWUucGluZ0NhY2hlO251bGw9PT1BPyhBPWUucGluZ0NhY2hlPW5ldyBXaSxoPW5ldyBTZXQsQS5zZXQoayxoKSk6KGg9QS5nZXQoayksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxBLnNldChrLGgpKSk7aWYoIWguaGFzKGcpKXtoLmFkZChnKTt2YXIgcT1Pai5iaW5kKG51bGwsZSxrLGcpO2sudGhlbihxLHEpfXAuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2g9RXJyb3IoKHBiKGcudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitxYihnKSl9UyE9PVxuamomJihTPWlqKTtoPUFpKGgsZyk7cD1mO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOms9aDtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIEI9WGkocCxrLGIpO3lnKHAsQik7YnJlYWsgYTtjYXNlIDE6az1oO3ZhciB3PXAudHlwZSx1Yj1wLnN0YXRlTm9kZTtpZigwPT09KHAuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXViJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdWIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXModWIpKSkpe3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgdmI9JGkocCxrLGIpO3lnKHAsdmIpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVg9UGooWCl9Y2F0Y2goWGMpe2I9WGM7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBGaigpe3ZhciBhPWNqLmN1cnJlbnQ7Y2ouY3VycmVudD1zaDtyZXR1cm4gbnVsbD09PWE/c2g6YX1mdW5jdGlvbiBBZyhhLGIpe2E8bGomJjI8YSYmKGxqPWEpO251bGwhPT1iJiZhPG1qJiYyPGEmJihtaj1hLG5qPWIpfWZ1bmN0aW9uIEJnKGEpe2E+d2kmJih3aT1hKX1mdW5jdGlvbiBLaigpe2Zvcig7bnVsbCE9PVg7KVg9UWooWCl9ZnVuY3Rpb24gR2ooKXtmb3IoO251bGwhPT1YJiYhVWYoKTspWD1RaihYKX1mdW5jdGlvbiBRaihhKXt2YXIgYj1SaihhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9UGooYSkpO2RqLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBqKGEpe1g9YTtkb3t2YXIgYj1YLmFsdGVybmF0ZTthPVgucmV0dXJuO2lmKDA9PT0oWC5lZmZlY3RUYWcmMjA0OCkpe2I9c2koYixYLFUpO2lmKDE9PT1VfHwxIT09WC5jaGlsZEV4cGlyYXRpb25UaW1lKXtmb3IodmFyIGM9MCxkPVguY2hpbGQ7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lLGY9ZC5jaGlsZEV4cGlyYXRpb25UaW1lO2U+YyYmKGM9ZSk7Zj5jJiYoYz1mKTtkPWQuc2libGluZ31YLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxudWxsIT09WC5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVguZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1YLmxhc3RFZmZlY3QpLDE8WC5lZmZlY3RUYWcmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WDphLmZpcnN0RWZmZWN0PVgsYS5sYXN0RWZmZWN0PVgpKX1lbHNle2I9emkoWCk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVguc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtYPWF9d2hpbGUobnVsbCE9PVgpO1M9PT10aSYmKFM9amopO3JldHVybiBudWxsfWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gSmooYSl7dmFyIGI9YWcoKTtjZyg5OSxTai5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaihhLGIpe2RvIERqKCk7d2hpbGUobnVsbCE9PXJqKTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUlqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVQmJihYPVQ9bnVsbCxVPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVc7V3w9Z2o7ZGouY3VycmVudD1udWxsO0RkPWZkO3ZhciBnPXhkKCk7aWYoeWQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaCh3Yil7aD1udWxsO2JyZWFrIGF9dmFyIHA9MCx4PS0xLHo9LTEsY2E9MCxEPTAsdD1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3QhPT1ofHwwIT09bCYmMyE9PXQubm9kZVR5cGV8fCh4PXArbCk7dCE9PW18fDAhPT1rJiYzIT09dC5ub2RlVHlwZXx8KHo9cCtrKTszPT09dC5ub2RlVHlwZSYmKHArPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXQuZmlyc3RDaGlsZCkpYnJlYWs7eT10O3Q9QX1mb3IoOzspe2lmKHQ9PT1nKWJyZWFrIGI7eT09PWgmJisrY2E9PT1sJiYoeD1wKTt5PT09bSYmKytEPT09ayYmKHo9cCk7aWYobnVsbCE9PShBPXQubmV4dFNpYmxpbmcpKWJyZWFrO3Q9eTt5PXQucGFyZW50Tm9kZX10PUF9aD0tMT09PXh8fC0xPT09ej9udWxsOntzdGFydDp4LGVuZDp6fX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO0VkPXthY3RpdmVFbGVtZW50RGV0YWNoZWQ6bnVsbCxmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO1k9ZTtkbyB0cnl7VGooKX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBxPVkuZWZmZWN0VGFnO3EmMTYmJlJiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgQj1ZLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHc9Qi5yZWY7bnVsbCE9PXcmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdz93KG51bGwpOncuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTAzOCl7Y2FzZSAyOlBpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj1cbi0xMDI1O1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLE1pKGcsbCxoKSxOaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3c9RWQ7Qj14ZCgpO3E9dy5mb2N1c2VkRWxlbTtoPXcuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PXEmJnEmJnEub3duZXJEb2N1bWVudCYmd2QocS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PWgmJnlkKHEpJiYoQj1oLnN0YXJ0LHc9aC5lbmQsdm9pZCAwPT09dyYmKHc9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD1CLHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHcscS52YWx1ZS5sZW5ndGgpKToodz0oQj1xLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQi5kZWZhdWx0Vmlld3x8d2luZG93LHcuZ2V0U2VsZWN0aW9uJiZcbih3PXcuZ2V0U2VsZWN0aW9uKCksbD1xLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF3LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9dmQocSxnKSxtPXZkKHEsaCksbCYmbSYmKDEhPT13LnJhbmdlQ291bnR8fHcuYW5jaG9yTm9kZSE9PWwubm9kZXx8dy5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8dy5mb2N1c05vZGUhPT1tLm5vZGV8fHcuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJihCPUIuY3JlYXRlUmFuZ2UoKSxCLnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdy5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHcuYWRkUmFuZ2UoQiksdy5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KEIuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdy5hZGRSYW5nZShCKSkpKSkpO0I9W107Zm9yKHc9cTt3PXcucGFyZW50Tm9kZTspMT09PXcubm9kZVR5cGUmJkIucHVzaCh7ZWxlbWVudDp3LGxlZnQ6dy5zY3JvbGxMZWZ0LFxudG9wOncuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8Qi5sZW5ndGg7cSsrKXc9QltxXSx3LmVsZW1lbnQuc2Nyb2xsTGVmdD13LmxlZnQsdy5lbGVtZW50LnNjcm9sbFRvcD13LnRvcH1mZD0hIURkO0VkPURkPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocT1hO251bGwhPT1ZOyl7dmFyIHViPVkuZWZmZWN0VGFnO3ViJjM2JiZKaShxLFkuYWx0ZXJuYXRlLFkpO2lmKHViJjEyOCl7Qj12b2lkIDA7dmFyIHZiPVkucmVmO2lmKG51bGwhPT12Yil7dmFyIFhjPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OkI9WGM7YnJlYWs7ZGVmYXVsdDpCPVhjfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB2Yj92YihCKTp2Yi5jdXJyZW50PUJ9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1cbm51bGw7VmYoKTtXPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihxailxaj0hMSxyaj1hLHNqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihhaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dmo/dWorKzoodWo9MCx2aj1hKTp1aj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBVaiYmVWooYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihZaSl0aHJvdyBZaT0hMSxhPVppLFppPW51bGwsYTtpZigoVyZlaikhPT1WKXJldHVybiBudWxsO2dnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gVGooKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJkdpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxxanx8KHFqPSEwLGRnKDk3LGZ1bmN0aW9uKCl7RGooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBEaigpe2lmKDkwIT09c2ope3ZhciBhPTk3PHNqPzk3OnNqO3NqPTkwO3JldHVybiBjZyhhLFZqKX19ZnVuY3Rpb24gVmooKXtpZihudWxsPT09cmopcmV0dXJuITE7dmFyIGE9cmo7cmo9bnVsbDtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1XO1d8PWdqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpIaSg1LGMpLElpKDUsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7RWkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9Vz1iO2dnKCk7cmV0dXJuITB9XG5mdW5jdGlvbiBXaihhLGIsYyl7Yj1BaShjLGIpO2I9WGkoYSxiLDEwNzM3NDE4MjMpO3hnKGEsYik7YT14aihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfWZ1bmN0aW9uIEVpKGEsYil7aWYoMz09PWEudGFnKVdqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7V2ooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXMoZCkpKXthPUFpKGIsYSk7YT0kaShjLGEsMTA3Mzc0MTgyMyk7eGcoYyxhKTtjPXhqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gT2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtUPT09YSYmVT09PWM/Uz09PXZpfHxTPT09dWkmJjEwNzM3NDE4MjM9PT1saiYmJGYoKS1UaTxwaj9FaihhLFUpOm9qPSEwOkFqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxaKGEpKSl9ZnVuY3Rpb24gVmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1HZygpLGI9SGcoYixhLG51bGwpKTthPXhqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIFJqO1xuUmo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudClyZz0hMDtlbHNle2lmKGQ8Yyl7cmc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6aGkoYik7WGgoKTticmVhaztjYXNlIDU6ZmgoYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkdmKGIpO2JyZWFrO2Nhc2UgNDpkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7ZT1iLnR5cGUuX2NvbnRleHQ7SShqZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG5pZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTSxNLmN1cnJlbnQmMSk7Yj0kaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gbWkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiAkaChhLGIsYyl9cmc9ITF9fWVsc2Ugcmc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9Q2YoYixKLmN1cnJlbnQpO3FnKGIsYyk7ZT1vaChudWxsLFxuYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEwoZCkpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3VnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZGZyhiLGQsZyxhKTtlLnVwZGF0ZXI9Smc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtOZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6YTp7ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9XG5udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7b2IoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7ZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1YaihlKTthPWlnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1maShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVpoKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWkobnVsbCxiLGUsaWcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGZpKGEsYixkLGUsYyk7XG5jYXNlIDM6aGkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2Q9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt2ZyhhLGIpO3pnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpWGgoKSxiPSRoKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlQaD1KZChiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLE9oPWIsZT1RaD0hMDtpZihlKWZvcihjPVlnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxYaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGZoKGIpLG51bGw9PT1hJiZVaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxubnVsbCxnPWUuY2hpbGRyZW4sR2QoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkdkKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZVaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGppKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVhnKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLFpoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShqZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPSRlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9JGgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PVxuayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9d2coYyxudWxsKSxsLnRhZz0yLHhnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTtwZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPVxuZ31SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHFnKGIsYyksZT1zZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9aWcoZSxiLnBlbmRpbmdQcm9wcyksZj1pZyhlLnR5cGUsZiksYWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGNpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsR2YoYikpOmE9ITEscWcoYixjKSxMZyhiLGQsZSksTmcoYixkLGUsYyksZ2kobnVsbCxcbmIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIFVqPW51bGwsTGk9bnVsbDtmdW5jdGlvbiBZaihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtVaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtMaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFpqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gU2goYSxiLGMsZCl7cmV0dXJuIG5ldyBaaihhLGIsYyxkKX1cbmZ1bmN0aW9uIGJpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWGooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYilyZXR1cm4gMTE7aWYoYT09PWpiKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9U2goYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBVZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuIFdnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmI6Zz04O2V8PTc7YnJlYWs7Y2FzZSBiYjpnPTg7ZXw9MTticmVhaztjYXNlIGNiOnJldHVybiBhPVNoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2IsYS50eXBlPWNiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGI6cmV0dXJuIGE9U2goMTMsYyxiLGUpLGEudHlwZT1oYixhLmVsZW1lbnRUeXBlPWhiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWI6cmV0dXJuIGE9U2goMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWIsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRiOmc9XG4xMDticmVhayBhO2Nhc2UgZWI6Zz05O2JyZWFrIGE7Y2FzZSBnYjpnPTExO2JyZWFrIGE7Y2FzZSBqYjpnPTE0O2JyZWFrIGE7Y2FzZSBrYjpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgbGI6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9U2goZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBXZyhhLGIsYyxkKXthPVNoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBUZyhhLGIsYyl7YT1TaCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBWZyhhLGIsYyl7Yj1TaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBBaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIHlpKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gQ2ooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiBiayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZygpLGc9RGcuc3VzcGVuc2U7Zj1IZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihkYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUZmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUFmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9d2coZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt4ZyhlLGIpO0lnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gY2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBkayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gZWsoYSxiKXtkayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZGsoYSxiKX1cbmZ1bmN0aW9uIGZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBhayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDt1ZyhlKTthW09kXT1kLmN1cnJlbnQ7YyYmMCE9PWImJkpjKGEsOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfWZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7YmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07ZmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87YmsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW09kXT1udWxsfSl9O1xuZnVuY3Rpb24gZ2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGhrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgZmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBpayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2guY2FsbChhKX19YmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1oayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtrLmNhbGwoYSl9fU5qKGZ1bmN0aW9uKCl7YmsoYixnLGEsZSl9KX1yZXR1cm4gY2soZyl9ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbndjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWhnKEdnKCksMTUwLDEwMCk7SWcoYSxiKTtlayhhLGIpfX07eGM9ZnVuY3Rpb24oYSl7MTM9PT1hLnRhZyYmKElnKGEsMyksZWsoYSwzKSl9O3ljPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUdnKCk7Yj1IZyhiLGEsbnVsbCk7SWcoYSxiKTtlayhhLGIpfX07XG56YT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1RZChkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7eWIoZCk7Q2IoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZhPU1qO1xuR2E9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1XO1d8PTQ7dHJ5e3JldHVybiBjZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtXPWYsVz09PVYmJmdnKCl9fTtIYT1mdW5jdGlvbigpeyhXJigxfGZqfGdqKSk9PT1WJiYoTGooKSxEaigpKX07SWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XO1d8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX07ZnVuY3Rpb24ga2soYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gamsoYSxiLG51bGwsYyl9dmFyIGxrPXtFdmVudHM6W05jLFBkLFFkLHhhLHRhLFhkLGZ1bmN0aW9uKGEpe2pjKGEsV2QpfSxEYSxFYSxpZCxtYyxEaix7Y3VycmVudDohMX1dfTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBZaihuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xNC4wXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWxrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPWtrO2V4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1oYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O1xuZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBjZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtXPWMsZ2coKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCEwLGMpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCExLGMpfTtcbmV4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZ2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE5qKGZ1bmN0aW9uKCl7aWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW09kXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9TWo7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2soYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFnayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIGlrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xNC4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgUXVldWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcXVldWUnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yRGV0ZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbi5DT05TVFJVQ1RPUjtcbnZhciBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgPSBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24uUkVKRUNUSU9OX0VWRU5UO1xudmFyIE5BVElWRV9QUk9NSVNFX1NVQkNMQVNTSU5HID0gUHJvbWlzZUNvbnN0cnVjdG9yRGV0ZWN0aW9uLlNVQkNMQVNTSU5HO1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3I7XG52YXIgUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VQcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xuXG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG5cbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiBpc0NhbGxhYmxlKHRoZW4gPSBpdC50aGVuKSA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBjYWxsUmVhY3Rpb24gPSBmdW5jdGlvbiAocmVhY3Rpb24sIHN0YXRlKSB7XG4gIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCAmJiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIGNhbGwodGFzaywgZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbCh0aGVuLCB2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VQcm90b3R5cGUpO1xuICAgIGFDYWxsYWJsZShleGVjdXRvcik7XG4gICAgY2FsbChJbnRlcm5hbCwgdGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIFByb21pc2VQcm90b3R5cGUgPSBQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgSW50ZXJuYWwucHJvdG90eXBlID0gZGVmaW5lQnVpbHRJbihQcm9taXNlUHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICByZWFjdGlvbi5vayA9IGlzQ2FsbGFibGUob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgIHJlYWN0aW9uLmZhaWwgPSBpc0NhbGxhYmxlKG9uUmVqZWN0ZWQpICYmIG9uUmVqZWN0ZWQ7XG4gICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgIGlmIChzdGF0ZS5zdGF0ZSA9PT0gUEVORElORykgc3RhdGUucmVhY3Rpb25zLmFkZChyZWFjdGlvbik7XG4gICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gIH0pO1xuXG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuXG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikgJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLnRoZW47XG5cbiAgICBpZiAoIU5BVElWRV9QUk9NSVNFX1NVQkNMQVNTSU5HKSB7XG4gICAgICAvLyBtYWtlIGBQcm9taXNlI3RoZW5gIHJldHVybiBhIHBvbHlmaWxsZWQgYFByb21pc2VgIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBjYWxsKG5hdGl2ZVRoZW4sIHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyAkVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICByZXR1cm4gcGFzc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgUXVldWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcXVldWUnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX0lPU19QRUJCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIG1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG52YXIgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIW1pY3JvdGFzaykge1xuICB2YXIgcXVldWUgPSBuZXcgUXVldWUoKTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoZm4gPSBxdWV1ZS5nZXQoKSkgdHJ5IHtcbiAgICAgIGZuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChxdWV1ZS5oZWFkKSBub3RpZnkoKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIC8vIGFsc28gZXhjZXB0IFdlYk9TIFdlYmtpdCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODk4XG4gIGlmICghSVNfSU9TICYmICFJU19OT0RFICYmICFJU19XRUJPU19XRUJLSVQgJiYgTXV0YXRpb25PYnNlcnZlciAmJiBkb2N1bWVudCkge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKCFJU19JT1NfUEVCQkxFICYmIFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgLy8gd29ya2Fyb3VuZCBvZiBXZWJLaXQgfiBpT1MgU2FmYXJpIDEwLjEgYnVnXG4gICAgcHJvbWlzZS5jb25zdHJ1Y3RvciA9IFByb21pc2U7XG4gICAgdGhlbiA9IGJpbmQocHJvbWlzZS50aGVuLCBwcm9taXNlKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnZVxuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICAvLyBgd2VicGFja2AgZGV2IHNlcnZlciBidWcgb24gSUUgZ2xvYmFsIG1ldGhvZHMgLSB1c2UgYmluZChmbiwgZ2xvYmFsKVxuICAgIG1hY3JvdGFzayA9IGJpbmQobWFjcm90YXNrLCBnbG9iYWwpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1hY3JvdGFzayhmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIG1pY3JvdGFzayA9IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICghcXVldWUuaGVhZCkgbm90aWZ5KCk7XG4gICAgcXVldWUuYWRkKGZuKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtaWNyb3Rhc2s7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL2lwYWR8aXBob25lfGlwb2QvaS50ZXN0KHVzZXJBZ2VudCkgJiYgdHlwZW9mIFBlYmJsZSAhPSAndW5kZWZpbmVkJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUgLS0gc2FmZVxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19ERU5PID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFJU19ERU5PICYmICFJU19OT0RFXG4gICYmIHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCdcbiAgJiYgdHlwZW9mIGRvY3VtZW50ID09ICdvYmplY3QnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24nKTtcblxuLy8gYFByb21pc2UuYWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBQUk9NSVNFX1NUQVRJQ1NfSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IsIHJlYWw6IHRydWUgfSwge1xuICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2NhdGNoYCBwcm9wZXJseSB3b3JrcyB3aXRoIHBhdGNoZWQgYFByb21pc2UjdGhlbmBcbmlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2NhdGNoJ107XG4gIGlmIChOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICE9PSBtZXRob2QpIHtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdjYXRjaCcsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2Utc3RhdGljcy1pbmNvcnJlY3QtaXRlcmF0aW9uJyk7XG5cbi8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBQUk9NSVNFX1NUQVRJQ1NfSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xuXG4vLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZih0aGlzKTtcbiAgICBjYWxsKGNhcGFiaWxpdHkucmVqZWN0LCB1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xuXG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yV3JhcHBlciA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKTtcbnZhciBDSEVDS19XUkFQUEVSID0gSVNfUFVSRSAmJiAhRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1I7XG5cbi8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKENIRUNLX1dSQVBQRVIgJiYgdGhpcyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yV3JhcHBlciA/IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiIsInZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKSxcbiAgICB1cHBlckZpcnN0ID0gcmVxdWlyZSgnLi91cHBlckZpcnN0Jyk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gKiB0byBsb3dlciBjYXNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICogLy8gPT4gJ0ZyZWQnXG4gKi9cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FwaXRhbGl6ZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBjcmVhdGVDYXNlRmlyc3QgPSByZXF1aXJlKCcuL19jcmVhdGVDYXNlRmlyc3QnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICogLy8gPT4gJ0ZyZWQnXG4gKlxuICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gKiAvLyA9PiAnRlJFRCdcbiAqL1xudmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXBwZXJGaXJzdDtcbiIsInZhciBjYXN0U2xpY2UgPSByZXF1aXJlKCcuL19jYXN0U2xpY2UnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHN0cmluZ1RvQXJyYXkgPSByZXF1aXJlKCcuL19zdHJpbmdUb0FycmF5JyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDYXNlRmlyc3Q7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gKi9cbmZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFNsaWNlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICB9XG4gIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuZ3RoO1xuICB9XG4gIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgc3RhcnQgPj4+PSAwO1xuXG4gIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTbGljZTtcbiIsInZhciBhc2NpaVRvQXJyYXkgPSByZXF1aXJlKCcuL19hc2NpaVRvQXJyYXknKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHVuaWNvZGVUb0FycmF5ID0gcmVxdWlyZSgnLi9fdW5pY29kZVRvQXJyYXknKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9BcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlUb0FycmF5O1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVRvQXJyYXk7XG4iLCJ2YXIgYXJyYXlSZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheVJlZHVjZScpLFxuICAgIGRlYnVyciA9IHJlcXVpcmUoJy4vZGVidXJyJyksXG4gICAgd29yZHMgPSByZXF1aXJlKCcuL3dvcmRzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIjtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG52YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ29tcG91bmRlcjtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVJlZHVjZTtcbiIsInZhciBkZWJ1cnJMZXR0ZXIgPSByZXF1aXJlKCcuL19kZWJ1cnJMZXR0ZXInKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVidXJyO1xuIiwidmFyIGJhc2VQcm9wZXJ0eU9mID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5T2YnKTtcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJ1cnJMZXR0ZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5T2Y7XG4iLCJ2YXIgYXNjaWlXb3JkcyA9IHJlcXVpcmUoJy4vX2FzY2lpV29yZHMnKSxcbiAgICBoYXNVbmljb2RlV29yZCA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGVXb3JkJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyksXG4gICAgdW5pY29kZVdvcmRzID0gcmVxdWlyZSgnLi9fdW5pY29kZVdvcmRzJyk7XG5cbi8qKlxuICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdvcmRzO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlXb3JkcztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbnZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGVXb3JkO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gIHJzT3JkVXBwZXIsXG4gIHJzT3JkTG93ZXIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWNvZGVXb3JkcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgYW5PYmplY3QodGhpcyk7XG4gIGlmIChoaW50ID09PSAnc3RyaW5nJyB8fCBoaW50ID09PSAnZGVmYXVsdCcpIGhpbnQgPSAnc3RyaW5nJztcbiAgZWxzZSBpZiAoaGludCAhPT0gJ251bWJlcicpIHRocm93ICRUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKHRoaXMsIGhpbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIGx0cmltID0gUmVnRXhwKCdeWycgKyB3aGl0ZXNwYWNlcyArICddKycpO1xudmFyIHJ0cmltID0gUmVnRXhwKCcoXnxbXicgKyB3aGl0ZXNwYWNlcyArICddKVsnICsgd2hpdGVzcGFjZXMgKyAnXSskJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIHJ0cmltLCAnJDEnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAhU1RSSUNUX01FVEhPRCA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtZm9yZWFjaCAtLSBzYWZlXG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgJGFzc2lnbih7IGI6IDEgfSwgJGFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3ltYm9sIC0tIHNhZmVcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgnYXNzaWduIGRldGVjdGlvbicpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtzeW1ib2xdICE9PSA3IHx8IG9iamVjdEtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9PSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHByb3h5QWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJveHktYWNjZXNzb3InKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmVuZm9yY2U7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG52YXIgTmF0aXZlUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBOYXRpdmVSZWdFeHAucHJvdG90eXBlO1xudmFyIFN5bnRheEVycm9yID0gZ2xvYmFsLlN5bnRheEVycm9yO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhSZWdFeHBQcm90b3R5cGUuZXhlYyk7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuLy8gVE9ETzogVXNlIG9ubHkgcHJvcGVyIFJlZ0V4cElkZW50aWZpZXJOYW1lXG52YXIgSVNfTkNHID0gL15cXD88W15cXHNcXGQhIyUmKis8PT5AXl1bXlxccyEjJSYqKzw9PkBeXSo+LztcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG5cbi8vIFwibmV3XCIgc2hvdWxkIGNyZWF0ZSBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgTmF0aXZlUmVnRXhwKHJlMSkgIT09IHJlMTtcblxudmFyIE1JU1NFRF9TVElDS1kgPSBzdGlja3lIZWxwZXJzLk1JU1NFRF9TVElDS1k7XG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcblxudmFyIEJBU0VfRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiZcbiAgKCFDT1JSRUNUX05FVyB8fCBNSVNTRURfU1RJQ0tZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZTJbTUFUQ0hdID0gZmFsc2U7XG4gICAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgICByZXR1cm4gTmF0aXZlUmVnRXhwKHJlMSkgIT09IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PT0gcmUyIHx8IFN0cmluZyhOYXRpdmVSZWdFeHAocmUxLCAnaScpKSAhPT0gJy9hL2knO1xuICB9KSk7XG5cbnZhciBoYW5kbGVEb3RBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgcmVzdWx0ICs9IGNociArIGNoYXJBdChzdHJpbmcsICsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9IGdldFJlZ0V4cEZsYWdzKHJhd1BhdHRlcm4pO1xuICAgIH1cblxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKHBhdHRlcm4pO1xuICAgIGZsYWdzID0gZmxhZ3MgPT09IHVuZGVmaW5lZCA/ICcnIDogdG9TdHJpbmcoZmxhZ3MpO1xuICAgIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuXG4gICAgaWYgKFVOU1VQUE9SVEVEX0RPVF9BTEwgJiYgJ2RvdEFsbCcgaW4gcmUxKSB7XG4gICAgICBkb3RBbGwgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICdzJykgPiAtMTtcbiAgICAgIGlmIChkb3RBbGwpIGZsYWdzID0gcmVwbGFjZShmbGFncywgL3MvZywgJycpO1xuICAgIH1cblxuICAgIHJhd0ZsYWdzID0gZmxhZ3M7XG5cbiAgICBpZiAoTUlTU0VEX1NUSUNLWSAmJiAnc3RpY2t5JyBpbiByZTEpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgc3RyaW5nSW5kZXhPZihmbGFncywgJ3knKSA+IC0xO1xuICAgICAgaWYgKHN0aWNreSAmJiBVTlNVUFBPUlRFRF9ZKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC95L2csICcnKTtcbiAgICB9XG5cbiAgICBpZiAoVU5TVVBQT1JURURfTkNHKSB7XG4gICAgICBoYW5kbGVkID0gaGFuZGxlTkNHKHBhdHRlcm4pO1xuICAgICAgcGF0dGVybiA9IGhhbmRsZWRbMF07XG4gICAgICBncm91cHMgPSBoYW5kbGVkWzFdO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IGluaGVyaXRJZlJlcXVpcmVkKE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncyksIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuXG4gICAgaWYgKGRvdEFsbCB8fCBzdGlja3kgfHwgZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZShyZXN1bHQpO1xuICAgICAgaWYgKGRvdEFsbCkge1xuICAgICAgICBzdGF0ZS5kb3RBbGwgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5yYXcgPSBSZWdFeHBXcmFwcGVyKGhhbmRsZURvdEFsbChwYXR0ZXJuKSwgcmF3RmxhZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKHN0aWNreSkgc3RhdGUuc3RpY2t5ID0gdHJ1ZTtcbiAgICAgIGlmIChncm91cHMubGVuZ3RoKSBzdGF0ZS5ncm91cHMgPSBncm91cHM7XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm4gIT09IHJhd1BhdHRlcm4pIHRyeSB7XG4gICAgICAvLyBmYWlscyBpbiBvbGQgZW5naW5lcywgYnV0IHdlIGhhdmUgbm8gYWx0ZXJuYXRpdmVzIGZvciB1bnN1cHBvcnRlZCByZWdleCBzeW50YXhcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdzb3VyY2UnLCByYXdQYXR0ZXJuID09PSAnJyA/ICcoPzopJyA6IHJhd1BhdHRlcm4pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5QWNjZXNzb3IoUmVnRXhwV3JhcHBlciwgTmF0aXZlUmVnRXhwLCBrZXlzW2luZGV4KytdKTtcbiAgfVxuXG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICBkZWZpbmVCdWlsdEluKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIsIHsgY29uc3RydWN0b3I6IHRydWUgfSk7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUYXJnZXQsIFNvdXJjZSwga2V5KSB7XG4gIGtleSBpbiBUYXJnZXQgfHwgZGVmaW5lUHJvcGVydHkoVGFyZ2V0LCBrZXksIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTb3VyY2Vba2V5XTsgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBTb3VyY2Vba2V5XSA9IGl0OyB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWRvcy9uby12dWxuZXJhYmxlIC0tIHNhZmVcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gYEdldFN1YnN0aXR1dGlvbmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaGFyQXQoY2gsIDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCAwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCB0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tzdHJpbmdTbGljZShjaCwgMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaGFyQXQoY2gsIDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2hhckF0KGNoLCAxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSm9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9PSBPYmplY3Q7XG52YXIgRk9SQ0VEID0gRVMzX1NUUklOR1MgfHwgIWFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbih0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1k7XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKCRwdXNoKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9PSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwobmF0aXZlU3BsaXQsIHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBjYWxsKHJlZ2V4cEV4ZWMsIHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFwcGx5KCRwdXNoLCBvdXRwdXQsIGFycmF5U2xpY2UobWF0Y2gsIDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhZXhlYyhzZXBhcmF0b3JDb3B5LCAnJykpIHB1c2gob3V0cHV0LCAnJyk7XG4gICAgICB9IGVsc2UgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBhcnJheVNsaWNlKG91dHB1dCwgMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IGNhbGwobmF0aXZlU3BsaXQsIHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gaXNOdWxsT3JVbmRlZmluZWQoc2VwYXJhdG9yKSA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZXBhcmF0b3IsIFNQTElUKTtcbiAgICAgIHJldHVybiBzcGxpdHRlclxuICAgICAgICA/IGNhbGwoc3BsaXR0ZXIsIHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogY2FsbChpbnRlcm5hbFNwbGl0LCB0b1N0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHN0cmluZywgbGltaXQpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByeCwgUywgbGltaXQsIGludGVybmFsU3BsaXQgIT09IG5hdGl2ZVNwbGl0KTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChVTlNVUFBPUlRFRF9ZID8gJ2cnIDogJ3knKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFVOU1VQUE9SVEVEX1kgPyAnXig/OicgKyByeC5zb3VyY2UgKyAnKScgOiByeCwgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFVOU1VQUE9SVEVEX1kgPyAwIDogcTtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgVU5TVVBQT1JURURfWSA/IHN0cmluZ1NsaWNlKFMsIHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaChBLCBzdHJpbmdTbGljZShTLCBwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBwdXNoKEEsIHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQywgVU5TVVBQT1JURURfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ21hdGNoJywgZnVuY3Rpb24gKE1BVENILCBuYXRpdmVNYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSBpc051bGxPclVuZGVmaW5lZChyZWdleHApID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHJlZ2V4cCwgTUFUQ0gpO1xuICAgICAgcmV0dXJuIG1hdGNoZXIgPyBjYWxsKG1hdGNoZXIsIHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKHRvU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNYXRjaCwgcngsIFMpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBWaWV0bmFtZXNlIFt2aV1cbi8vISBhdXRob3IgOiBCYW5nIE5ndXllbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5nbmtcbi8vISBhdXRob3IgOiBDaGllbiBLaXJhIDogaHR0cHM6Ly9naXRodWIuY29tL2NoaWVua2lyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgndmknLCB7XG4gICAgICAgIG1vbnRoczogJ3Row6FuZyAxX3Row6FuZyAyX3Row6FuZyAzX3Row6FuZyA0X3Row6FuZyA1X3Row6FuZyA2X3Row6FuZyA3X3Row6FuZyA4X3Row6FuZyA5X3Row6FuZyAxMF90aMOhbmcgMTFfdGjDoW5nIDEyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdUaGcgMDFfVGhnIDAyX1RoZyAwM19UaGcgMDRfVGhnIDA1X1RoZyAwNl9UaGcgMDdfVGhnIDA4X1RoZyAwOV9UaGcgMTBfVGhnIDExX1RoZyAxMicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2No4bunIG5o4bqtdF90aOG7qSBoYWlfdGjhu6kgYmFfdGjhu6kgdMawX3Ro4bupIG7Eg21fdGjhu6kgc8OhdV90aOG7qSBi4bqjeScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9zYXxjaC9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3NhJyA6ICdTQSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2NoJyA6ICdDSCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFtuxINtXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBbbsSDbV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdERC9NL1lZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0jDtG0gbmF5IGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmfDoHkgbWFpIGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSMO0bSBxdWEgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0deG6p24gdHLGsOG7m2MgbMO6Y10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyB04bubaScsXG4gICAgICAgICAgICBwYXN0OiAnJXMgdHLGsOG7m2MnLFxuICAgICAgICAgICAgczogJ3bDoGkgZ2nDonknLFxuICAgICAgICAgICAgc3M6ICclZCBnacOieScsXG4gICAgICAgICAgICBtOiAnbeG7mXQgcGjDunQnLFxuICAgICAgICAgICAgbW06ICclZCBwaMO6dCcsXG4gICAgICAgICAgICBoOiAnbeG7mXQgZ2nhu50nLFxuICAgICAgICAgICAgaGg6ICclZCBnaeG7nScsXG4gICAgICAgICAgICBkOiAnbeG7mXQgbmfDoHknLFxuICAgICAgICAgICAgZGQ6ICclZCBuZ8OgeScsXG4gICAgICAgICAgICB3OiAnbeG7mXQgdHXhuqduJyxcbiAgICAgICAgICAgIHd3OiAnJWQgdHXhuqduJyxcbiAgICAgICAgICAgIE06ICdt4buZdCB0aMOhbmcnLFxuICAgICAgICAgICAgTU06ICclZCB0aMOhbmcnLFxuICAgICAgICAgICAgeTogJ23hu5l0IG7Eg20nLFxuICAgICAgICAgICAgeXk6ICclZCBuxINtJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgTG9ja091dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk04MzIgNDY0aC02OFYyNDBjMC03MC43LTU3LjMtMTI4LTEyOC0xMjhIMzg4Yy03MC43IDAtMTI4IDU3LjMtMTI4IDEyOHYyMjRoLTY4Yy0xNy43IDAtMzIgMTQuMy0zMiAzMnYzODRjMCAxNy43IDE0LjMgMzIgMzIgMzJoNjQwYzE3LjcgMCAzMi0xNC4zIDMyLTMyVjQ5NmMwLTE3LjctMTQuMy0zMi0zMi0zMnpNMzMyIDI0MGMwLTMwLjkgMjUuMS01NiA1Ni01NmgyNDhjMzAuOSAwIDU2IDI1LjEgNTYgNTZ2MjI0SDMzMlYyNDB6bTQ2MCA2MDBIMjMyVjUzNmg1NjB2MzA0ek00ODQgNzAxdjUzYzAgNC40IDMuNiA4IDggOGg0MGM0LjQgMCA4LTMuNiA4LTh2LTUzYTQ4LjAxIDQ4LjAxIDAgMTAtNTYgMHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImxvY2tcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IExvY2tPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IExvY2tPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Mb2NrT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcbnZhciBMb2NrT3V0bGluZWQgPSBmdW5jdGlvbiBMb2NrT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IExvY2tPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuTG9ja091dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0xvY2tPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihMb2NrT3V0bGluZWQpOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIFBvd2Vyb2ZmT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTcwNS42IDEyNC45YTggOCAwIDAwLTExLjYgNy4ydjY0LjJjMCA1LjUgMi45IDEwLjYgNy41IDEzLjZhMzUyLjIgMzUyLjIgMCAwMTYyLjIgNDkuOGMzMi43IDMyLjggNTguNCA3MC45IDc2LjMgMTEzLjNhMzU1IDM1NSAwIDAxMjcuOSAxMzguN2MwIDQ4LjEtOS40IDk0LjgtMjcuOSAxMzguN2EzNTUuOTIgMzU1LjkyIDAgMDEtNzYuMyAxMTMuMyAzNTMuMDYgMzUzLjA2IDAgMDEtMTEzLjIgNzYuNGMtNDMuOCAxOC42LTkwLjUgMjgtMTM4LjUgMjhzLTk0LjctOS40LTEzOC41LTI4YTM1My4wNiAzNTMuMDYgMCAwMS0xMTMuMi03Ni40QTM1NS45MiAzNTUuOTIgMCAwMTE4NCA2NTAuNGEzNTUgMzU1IDAgMDEtMjcuOS0xMzguN2MwLTQ4LjEgOS40LTk0LjggMjcuOS0xMzguNyAxNy45LTQyLjQgNDMuNi04MC41IDc2LjMtMTEzLjMgMTktMTkgMzkuOC0zNS42IDYyLjItNDkuOCA0LjctMi45IDcuNS04LjEgNy41LTEzLjZWMTMyYzAtNi02LjMtOS44LTExLjYtNy4yQzE3OC41IDE5NS4yIDgyIDMzOS4zIDgwIDUwNi4zIDc3LjIgNzQ1LjEgMjcyLjUgOTQzLjUgNTExLjIgOTQ0YzIzOSAuNSA0MzIuOC0xOTMuMyA0MzIuOC00MzIuNCAwLTE2OS4yLTk3LTMxNS43LTIzOC40LTM4Ni43ek00ODAgNTYwaDY0YzQuNCAwIDgtMy42IDgtOFY4OGMwLTQuNC0zLjYtOC04LThoLTY0Yy00LjQgMC04IDMuNi04IDh2NDY0YzAgNC40IDMuNiA4IDggOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcInBvd2Vyb2ZmXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBQb3dlcm9mZk91dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUG93ZXJvZmZPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Qb3dlcm9mZk91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgUG93ZXJvZmZPdXRsaW5lZCA9IGZ1bmN0aW9uIFBvd2Vyb2ZmT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IFBvd2Vyb2ZmT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcblBvd2Vyb2ZmT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnUG93ZXJvZmZPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihQb3dlcm9mZk91dGxpbmVkKTsiLCJpbXBvcnQgeyBudW1iZXJJbnB1dFRvT2JqZWN0LCByZ2JhVG9IZXgsIHJnYlRvSGV4LCByZ2JUb0hzbCwgcmdiVG9Ic3YgfSBmcm9tICcuL2NvbnZlcnNpb24nO1xuaW1wb3J0IHsgbmFtZXMgfSBmcm9tICcuL2Nzcy1jb2xvci1uYW1lcyc7XG5pbXBvcnQgeyBpbnB1dFRvUkdCIH0gZnJvbSAnLi9mb3JtYXQtaW5wdXQnO1xuaW1wb3J0IHsgYm91bmQwMSwgYm91bmRBbHBoYSwgY2xhbXAwMSB9IGZyb20gJy4vdXRpbCc7XG52YXIgVGlueUNvbG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbnlDb2xvcihjb2xvciwgb3B0cykge1xuICAgICAgICBpZiAoY29sb3IgPT09IHZvaWQgMCkgeyBjb2xvciA9ICcnOyB9XG4gICAgICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IHt9OyB9XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gSWYgaW5wdXQgaXMgYWxyZWFkeSBhIHRpbnljb2xvciwgcmV0dXJuIGl0c2VsZlxuICAgICAgICBpZiAoY29sb3IgaW5zdGFuY2VvZiBUaW55Q29sb3IpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29sb3IgPSBudW1iZXJJbnB1dFRvT2JqZWN0KGNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9yaWdpbmFsSW5wdXQgPSBjb2xvcjtcbiAgICAgICAgdmFyIHJnYiA9IGlucHV0VG9SR0IoY29sb3IpO1xuICAgICAgICB0aGlzLm9yaWdpbmFsSW5wdXQgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5yID0gcmdiLnI7XG4gICAgICAgIHRoaXMuZyA9IHJnYi5nO1xuICAgICAgICB0aGlzLmIgPSByZ2IuYjtcbiAgICAgICAgdGhpcy5hID0gcmdiLmE7XG4gICAgICAgIHRoaXMucm91bmRBID0gTWF0aC5yb3VuZCgxMDAgKiB0aGlzLmEpIC8gMTAwO1xuICAgICAgICB0aGlzLmZvcm1hdCA9IChfYSA9IG9wdHMuZm9ybWF0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZ2IuZm9ybWF0O1xuICAgICAgICB0aGlzLmdyYWRpZW50VHlwZSA9IG9wdHMuZ3JhZGllbnRUeXBlO1xuICAgICAgICAvLyBEb24ndCBsZXQgdGhlIHJhbmdlIG9mIFswLDI1NV0gY29tZSBiYWNrIGluIFswLDFdLlxuICAgICAgICAvLyBQb3RlbnRpYWxseSBsb3NlIGEgbGl0dGxlIGJpdCBvZiBwcmVjaXNpb24gaGVyZSwgYnV0IHdpbGwgZml4IGlzc3VlcyB3aGVyZVxuICAgICAgICAvLyAuNSBnZXRzIGludGVycHJldGVkIGFzIGhhbGYgb2YgdGhlIHRvdGFsLCBpbnN0ZWFkIG9mIGhhbGYgb2YgMVxuICAgICAgICAvLyBJZiBpdCB3YXMgc3VwcG9zZWQgdG8gYmUgMTI4LCB0aGlzIHdhcyBhbHJlYWR5IHRha2VuIGNhcmUgb2YgYnkgYGlucHV0VG9SZ2JgXG4gICAgICAgIGlmICh0aGlzLnIgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLnIgPSBNYXRoLnJvdW5kKHRoaXMucik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZyA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZyA9IE1hdGgucm91bmQodGhpcy5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5iIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5iID0gTWF0aC5yb3VuZCh0aGlzLmIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNWYWxpZCA9IHJnYi5vaztcbiAgICB9XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5pc0RhcmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJyaWdodG5lc3MoKSA8IDEyODtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuaXNMaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRGFyaygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGVyY2VpdmVkIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yLCBmcm9tIDAtMjU1LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZ2V0QnJpZ2h0bmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvQUVSVCNjb2xvci1jb250cmFzdFxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICByZXR1cm4gKHJnYi5yICogMjk5ICsgcmdiLmcgKiA1ODcgKyByZ2IuYiAqIDExNCkgLyAxMDAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGVyY2VpdmVkIGx1bWluYW5jZSBvZiBhIGNvbG9yLCBmcm9tIDAtMS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmdldEx1bWluYW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICB2YXIgUjtcbiAgICAgICAgdmFyIEc7XG4gICAgICAgIHZhciBCO1xuICAgICAgICB2YXIgUnNSR0IgPSByZ2IuciAvIDI1NTtcbiAgICAgICAgdmFyIEdzUkdCID0gcmdiLmcgLyAyNTU7XG4gICAgICAgIHZhciBCc1JHQiA9IHJnYi5iIC8gMjU1O1xuICAgICAgICBpZiAoUnNSR0IgPD0gMC4wMzkyOCkge1xuICAgICAgICAgICAgUiA9IFJzUkdCIC8gMTIuOTI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWV4cG9uZW50aWF0aW9uLW9wZXJhdG9yXG4gICAgICAgICAgICBSID0gTWF0aC5wb3coKFJzUkdCICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEdzUkdCIDw9IDAuMDM5MjgpIHtcbiAgICAgICAgICAgIEcgPSBHc1JHQiAvIDEyLjkyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1leHBvbmVudGlhdGlvbi1vcGVyYXRvclxuICAgICAgICAgICAgRyA9IE1hdGgucG93KChHc1JHQiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCc1JHQiA8PSAwLjAzOTI4KSB7XG4gICAgICAgICAgICBCID0gQnNSR0IgLyAxMi45MjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZXhwb25lbnRpYXRpb24tb3BlcmF0b3JcbiAgICAgICAgICAgIEIgPSBNYXRoLnBvdygoQnNSR0IgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC4yMTI2ICogUiArIDAuNzE1MiAqIEcgKyAwLjA3MjIgKiBCO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWxwaGEgdmFsdWUgb2YgYSBjb2xvciwgZnJvbSAwLTEuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5nZXRBbHBoYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFscGhhIHZhbHVlIG9uIHRoZSBjdXJyZW50IGNvbG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFscGhhIC0gVGhlIG5ldyBhbHBoYSB2YWx1ZS4gVGhlIGFjY2VwdGVkIHJhbmdlIGlzIDAtMS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnNldEFscGhhID0gZnVuY3Rpb24gKGFscGhhKSB7XG4gICAgICAgIHRoaXMuYSA9IGJvdW5kQWxwaGEoYWxwaGEpO1xuICAgICAgICB0aGlzLnJvdW5kQSA9IE1hdGgucm91bmQoMTAwICogdGhpcy5hKSAvIDEwMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGNvbG9yIGlzIG1vbm9jaHJvbWUuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5pc01vbm9jaHJvbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy50b0hzbCgpLnM7XG4gICAgICAgIHJldHVybiBzID09PSAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGFzIGEgSFNWQSBvYmplY3QuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hzdiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICAgICAgICByZXR1cm4geyBoOiBoc3YuaCAqIDM2MCwgczogaHN2LnMsIHY6IGhzdi52LCBhOiB0aGlzLmEgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhzdmEgdmFsdWVzIGludGVycG9sYXRlZCBpbnRvIGEgc3RyaW5nIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAgICogXCJoc3ZhKHh4eCwgeHh4LCB4eHgsIHh4KVwiLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9Ic3ZTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgICAgICAgdmFyIGggPSBNYXRoLnJvdW5kKGhzdi5oICogMzYwKTtcbiAgICAgICAgdmFyIHMgPSBNYXRoLnJvdW5kKGhzdi5zICogMTAwKTtcbiAgICAgICAgdmFyIHYgPSBNYXRoLnJvdW5kKGhzdi52ICogMTAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYSA9PT0gMSA/IFwiaHN2KFwiLmNvbmNhdChoLCBcIiwgXCIpLmNvbmNhdChzLCBcIiUsIFwiKS5jb25jYXQodiwgXCIlKVwiKSA6IFwiaHN2YShcIi5jb25jYXQoaCwgXCIsIFwiKS5jb25jYXQocywgXCIlLCBcIikuY29uY2F0KHYsIFwiJSwgXCIpLmNvbmNhdCh0aGlzLnJvdW5kQSwgXCIpXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGFzIGEgSFNMQSBvYmplY3QuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hzbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICAgICAgICByZXR1cm4geyBoOiBoc2wuaCAqIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sLCBhOiB0aGlzLmEgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhzbGEgdmFsdWVzIGludGVycG9sYXRlZCBpbnRvIGEgc3RyaW5nIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAgICogXCJoc2xhKHh4eCwgeHh4LCB4eHgsIHh4KVwiLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9Ic2xTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgICAgICAgdmFyIGggPSBNYXRoLnJvdW5kKGhzbC5oICogMzYwKTtcbiAgICAgICAgdmFyIHMgPSBNYXRoLnJvdW5kKGhzbC5zICogMTAwKTtcbiAgICAgICAgdmFyIGwgPSBNYXRoLnJvdW5kKGhzbC5sICogMTAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYSA9PT0gMSA/IFwiaHNsKFwiLmNvbmNhdChoLCBcIiwgXCIpLmNvbmNhdChzLCBcIiUsIFwiKS5jb25jYXQobCwgXCIlKVwiKSA6IFwiaHNsYShcIi5jb25jYXQoaCwgXCIsIFwiKS5jb25jYXQocywgXCIlLCBcIikuY29uY2F0KGwsIFwiJSwgXCIpLmNvbmNhdCh0aGlzLnJvdW5kQSwgXCIpXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGV4IHZhbHVlIG9mIHRoZSBjb2xvci5cbiAgICAgKiBAcGFyYW0gYWxsb3czQ2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDMgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiAoYWxsb3czQ2hhcikge1xuICAgICAgICBpZiAoYWxsb3czQ2hhciA9PT0gdm9pZCAwKSB7IGFsbG93M0NoYXIgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gcmdiVG9IZXgodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgYWxsb3czQ2hhcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZXggdmFsdWUgb2YgdGhlIGNvbG9yIC13aXRoIGEgIyBwcmVmaXhlZC5cbiAgICAgKiBAcGFyYW0gYWxsb3czQ2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDMgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXhTdHJpbmcgPSBmdW5jdGlvbiAoYWxsb3czQ2hhcikge1xuICAgICAgICBpZiAoYWxsb3czQ2hhciA9PT0gdm9pZCAwKSB7IGFsbG93M0NoYXIgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleChhbGxvdzNDaGFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhleCA4IHZhbHVlIG9mIHRoZSBjb2xvci5cbiAgICAgKiBAcGFyYW0gYWxsb3c0Q2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDQgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXg4ID0gZnVuY3Rpb24gKGFsbG93NENoYXIpIHtcbiAgICAgICAgaWYgKGFsbG93NENoYXIgPT09IHZvaWQgMCkgeyBhbGxvdzRDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHJnYmFUb0hleCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEsIGFsbG93NENoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGV4IDggdmFsdWUgb2YgdGhlIGNvbG9yIC13aXRoIGEgIyBwcmVmaXhlZC5cbiAgICAgKiBAcGFyYW0gYWxsb3c0Q2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDQgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXg4U3RyaW5nID0gZnVuY3Rpb24gKGFsbG93NENoYXIpIHtcbiAgICAgICAgaWYgKGFsbG93NENoYXIgPT09IHZvaWQgMCkgeyBhbGxvdzRDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXg4KGFsbG93NENoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2hvcnRlciBoZXggdmFsdWUgb2YgdGhlIGNvbG9yIGRlcGVuZHMgb24gaXRzIGFscGhhIC13aXRoIGEgIyBwcmVmaXhlZC5cbiAgICAgKiBAcGFyYW0gYWxsb3dTaG9ydENoYXIgd2lsbCBzaG9ydGVuIGhleCB2YWx1ZSB0byAzIG9yIDQgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXhTaG9ydFN0cmluZyA9IGZ1bmN0aW9uIChhbGxvd1Nob3J0Q2hhcikge1xuICAgICAgICBpZiAoYWxsb3dTaG9ydENoYXIgPT09IHZvaWQgMCkgeyBhbGxvd1Nob3J0Q2hhciA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDEgPyB0aGlzLnRvSGV4U3RyaW5nKGFsbG93U2hvcnRDaGFyKSA6IHRoaXMudG9IZXg4U3RyaW5nKGFsbG93U2hvcnRDaGFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9iamVjdCBhcyBhIFJHQkEgb2JqZWN0LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9SZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBNYXRoLnJvdW5kKHRoaXMuciksXG4gICAgICAgICAgICBnOiBNYXRoLnJvdW5kKHRoaXMuZyksXG4gICAgICAgICAgICBiOiBNYXRoLnJvdW5kKHRoaXMuYiksXG4gICAgICAgICAgICBhOiB0aGlzLmEsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBSR0JBIHZhbHVlcyBpbnRlcnBvbGF0ZWQgaW50byBhIHN0cmluZyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgICAqIFwiUkdCQSh4eHgsIHh4eCwgeHh4LCB4eClcIi5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvUmdiU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgciA9IE1hdGgucm91bmQodGhpcy5yKTtcbiAgICAgICAgdmFyIGcgPSBNYXRoLnJvdW5kKHRoaXMuZyk7XG4gICAgICAgIHZhciBiID0gTWF0aC5yb3VuZCh0aGlzLmIpO1xuICAgICAgICByZXR1cm4gdGhpcy5hID09PSAxID8gXCJyZ2IoXCIuY29uY2F0KHIsIFwiLCBcIikuY29uY2F0KGcsIFwiLCBcIikuY29uY2F0KGIsIFwiKVwiKSA6IFwicmdiYShcIi5jb25jYXQociwgXCIsIFwiKS5jb25jYXQoZywgXCIsIFwiKS5jb25jYXQoYiwgXCIsIFwiKS5jb25jYXQodGhpcy5yb3VuZEEsIFwiKVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9iamVjdCBhcyBhIFJHQkEgb2JqZWN0LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9QZXJjZW50YWdlUmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm10ID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQoYm91bmQwMSh4LCAyNTUpICogMTAwKSwgXCIlXCIpOyB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogZm10KHRoaXMuciksXG4gICAgICAgICAgICBnOiBmbXQodGhpcy5nKSxcbiAgICAgICAgICAgIGI6IGZtdCh0aGlzLmIpLFxuICAgICAgICAgICAgYTogdGhpcy5hLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgUkdCQSByZWxhdGl2ZSB2YWx1ZXMgaW50ZXJwb2xhdGVkIGludG8gYSBzdHJpbmdcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvUGVyY2VudGFnZVJnYlN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJuZCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiBNYXRoLnJvdW5kKGJvdW5kMDEoeCwgMjU1KSAqIDEwMCk7IH07XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDFcbiAgICAgICAgICAgID8gXCJyZ2IoXCIuY29uY2F0KHJuZCh0aGlzLnIpLCBcIiUsIFwiKS5jb25jYXQocm5kKHRoaXMuZyksIFwiJSwgXCIpLmNvbmNhdChybmQodGhpcy5iKSwgXCIlKVwiKVxuICAgICAgICAgICAgOiBcInJnYmEoXCIuY29uY2F0KHJuZCh0aGlzLnIpLCBcIiUsIFwiKS5jb25jYXQocm5kKHRoaXMuZyksIFwiJSwgXCIpLmNvbmNhdChybmQodGhpcy5iKSwgXCIlLCBcIikuY29uY2F0KHRoaXMucm91bmRBLCBcIilcIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgJ3JlYWwnIG5hbWUgb2YgdGhlIGNvbG9yIC1pZiB0aGVyZSBpcyBvbmUuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmEgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNwYXJlbnQnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmEgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhleCA9ICcjJyArIHJnYlRvSGV4KHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIGZhbHNlKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5lbnRyaWVzKG5hbWVzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9hW19pXSwga2V5ID0gX2JbMF0sIHZhbHVlID0gX2JbMV07XG4gICAgICAgICAgICBpZiAoaGV4ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdFNldCA9IEJvb2xlYW4oZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0ICE9PSBudWxsICYmIGZvcm1hdCAhPT0gdm9pZCAwID8gZm9ybWF0IDogdGhpcy5mb3JtYXQ7XG4gICAgICAgIHZhciBmb3JtYXR0ZWRTdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGhhc0FscGhhID0gdGhpcy5hIDwgMSAmJiB0aGlzLmEgPj0gMDtcbiAgICAgICAgdmFyIG5lZWRzQWxwaGFGb3JtYXQgPSAhZm9ybWF0U2V0ICYmIGhhc0FscGhhICYmIChmb3JtYXQuc3RhcnRzV2l0aCgnaGV4JykgfHwgZm9ybWF0ID09PSAnbmFtZScpO1xuICAgICAgICBpZiAobmVlZHNBbHBoYUZvcm1hdCkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBcInRyYW5zcGFyZW50XCIsIGFsbCBvdGhlciBub24tYWxwaGEgZm9ybWF0c1xuICAgICAgICAgICAgLy8gd2lsbCByZXR1cm4gcmdiYSB3aGVuIHRoZXJlIGlzIHRyYW5zcGFyZW5jeS5cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICduYW1lJyAmJiB0aGlzLmEgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b05hbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ3JnYicpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9SZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAncHJnYicpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9QZXJjZW50YWdlUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hleCcgfHwgZm9ybWF0ID09PSAnaGV4NicpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaGV4MycpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hleDQnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaGV4OCcpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXg4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ25hbWUnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoc2wnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHNsU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hzdicpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic3ZTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RyaW5nIHx8IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5yb3VuZCh0aGlzLnIpIDw8IDE2KSArIChNYXRoLnJvdW5kKHRoaXMuZykgPDwgOCkgKyBNYXRoLnJvdW5kKHRoaXMuYik7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcih0aGlzLnRvU3RyaW5nKCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTGlnaHRlbiB0aGUgY29sb3IgYSBnaXZlbiBhbW91bnQuIFByb3ZpZGluZyAxMDAgd2lsbCBhbHdheXMgcmV0dXJuIHdoaXRlLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5saWdodGVuID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLmwgKz0gYW1vdW50IC8gMTAwO1xuICAgICAgICBoc2wubCA9IGNsYW1wMDEoaHNsLmwpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQnJpZ2h0ZW4gdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5icmlnaHRlbiA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHJnYi5yID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCByZ2IuciAtIE1hdGgucm91bmQoMjU1ICogLShhbW91bnQgLyAxMDApKSkpO1xuICAgICAgICByZ2IuZyA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcmdiLmcgLSBNYXRoLnJvdW5kKDI1NSAqIC0oYW1vdW50IC8gMTAwKSkpKTtcbiAgICAgICAgcmdiLmIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIHJnYi5iIC0gTWF0aC5yb3VuZCgyNTUgKiAtKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKHJnYik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEYXJrZW4gdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIFByb3ZpZGluZyAxMDAgd2lsbCBhbHdheXMgcmV0dXJuIGJsYWNrLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5kYXJrZW4gPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICBoc2wubCAtPSBhbW91bnQgLyAxMDA7XG4gICAgICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGhzbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNaXggdGhlIGNvbG9yIHdpdGggcHVyZSB3aGl0ZSwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBQcm92aWRpbmcgMCB3aWxsIGRvIG5vdGhpbmcsIHByb3ZpZGluZyAxMDAgd2lsbCBhbHdheXMgcmV0dXJuIHdoaXRlLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50aW50ID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWl4KCd3aGl0ZScsIGFtb3VudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNaXggdGhlIGNvbG9yIHdpdGggcHVyZSBibGFjaywgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBQcm92aWRpbmcgMCB3aWxsIGRvIG5vdGhpbmcsIHByb3ZpZGluZyAxMDAgd2lsbCBhbHdheXMgcmV0dXJuIGJsYWNrLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zaGFkZSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHJldHVybiB0aGlzLm1peCgnYmxhY2snLCBhbW91bnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVzYXR1cmF0ZSB0aGUgY29sb3IgYSBnaXZlbiBhbW91bnQsIGZyb20gMCB0byAxMDAuXG4gICAgICogUHJvdmlkaW5nIDEwMCB3aWxsIGlzIHRoZSBzYW1lIGFzIGNhbGxpbmcgZ3JleXNjYWxlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmRlc2F0dXJhdGUgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICBoc2wucyAtPSBhbW91bnQgLyAxMDA7XG4gICAgICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGhzbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTYXR1cmF0ZSB0aGUgY29sb3IgYSBnaXZlbiBhbW91bnQsIGZyb20gMCB0byAxMDAuXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnNhdHVyYXRlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLnMgKz0gYW1vdW50IC8gMTAwO1xuICAgICAgICBoc2wucyA9IGNsYW1wMDEoaHNsLnMpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcGxldGVseSBkZXNhdHVyYXRlcyBhIGNvbG9yIGludG8gZ3JleXNjYWxlLlxuICAgICAqIFNhbWUgYXMgY2FsbGluZyBgZGVzYXR1cmF0ZSgxMDApYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZ3JleXNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXNhdHVyYXRlKDEwMCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTcGluIHRha2VzIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgYW1vdW50IHdpdGhpbiBbLTM2MCwgMzYwXSBpbmRpY2F0aW5nIHRoZSBjaGFuZ2Ugb2YgaHVlLlxuICAgICAqIFZhbHVlcyBvdXRzaWRlIG9mIHRoaXMgcmFuZ2Ugd2lsbCBiZSB3cmFwcGVkIGludG8gdGhpcyByYW5nZS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnNwaW4gPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIHZhciBodWUgPSAoaHNsLmggKyBhbW91bnQpICUgMzYwO1xuICAgICAgICBoc2wuaCA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGhzbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNaXggdGhlIGN1cnJlbnQgY29sb3IgYSBnaXZlbiBhbW91bnQgd2l0aCBhbm90aGVyIGNvbG9yLCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIDAgbWVhbnMgbm8gbWl4aW5nIChyZXR1cm4gY3VycmVudCBjb2xvcikuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5taXggPSBmdW5jdGlvbiAoY29sb3IsIGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gNTA7IH1cbiAgICAgICAgdmFyIHJnYjEgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciByZ2IyID0gbmV3IFRpbnlDb2xvcihjb2xvcikudG9SZ2IoKTtcbiAgICAgICAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG4gICAgICAgIHZhciByZ2JhID0ge1xuICAgICAgICAgICAgcjogKHJnYjIuciAtIHJnYjEucikgKiBwICsgcmdiMS5yLFxuICAgICAgICAgICAgZzogKHJnYjIuZyAtIHJnYjEuZykgKiBwICsgcmdiMS5nLFxuICAgICAgICAgICAgYjogKHJnYjIuYiAtIHJnYjEuYikgKiBwICsgcmdiMS5iLFxuICAgICAgICAgICAgYTogKHJnYjIuYSAtIHJnYjEuYSkgKiBwICsgcmdiMS5hLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihyZ2JhKTtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuYW5hbG9nb3VzID0gZnVuY3Rpb24gKHJlc3VsdHMsIHNsaWNlcykge1xuICAgICAgICBpZiAocmVzdWx0cyA9PT0gdm9pZCAwKSB7IHJlc3VsdHMgPSA2OyB9XG4gICAgICAgIGlmIChzbGljZXMgPT09IHZvaWQgMCkgeyBzbGljZXMgPSAzMDsgfVxuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgcGFydCA9IDM2MCAvIHNsaWNlcztcbiAgICAgICAgdmFyIHJldCA9IFt0aGlzXTtcbiAgICAgICAgZm9yIChoc2wuaCA9IChoc2wuaCAtICgocGFydCAqIHJlc3VsdHMpID4+IDEpICsgNzIwKSAlIDM2MDsgLS1yZXN1bHRzOykge1xuICAgICAgICAgICAgaHNsLmggPSAoaHNsLmggKyBwYXJ0KSAlIDM2MDtcbiAgICAgICAgICAgIHJldC5wdXNoKG5ldyBUaW55Q29sb3IoaHNsKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2luZnVzaW9uL2pRdWVyeS14Y29sb3IvYmxvYi9tYXN0ZXIvanF1ZXJ5Lnhjb2xvci5qc1xuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuY29tcGxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLmggPSAoaHNsLmggKyAxODApICUgMzYwO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5tb25vY2hyb21hdGljID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdHMgPT09IHZvaWQgMCkgeyByZXN1bHRzID0gNjsgfVxuICAgICAgICB2YXIgaHN2ID0gdGhpcy50b0hzdigpO1xuICAgICAgICB2YXIgaCA9IGhzdi5oO1xuICAgICAgICB2YXIgcyA9IGhzdi5zO1xuICAgICAgICB2YXIgdiA9IGhzdi52O1xuICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgIHZhciBtb2RpZmljYXRpb24gPSAxIC8gcmVzdWx0cztcbiAgICAgICAgd2hpbGUgKHJlc3VsdHMtLSkge1xuICAgICAgICAgICAgcmVzLnB1c2gobmV3IFRpbnlDb2xvcih7IGg6IGgsIHM6IHMsIHY6IHYgfSkpO1xuICAgICAgICAgICAgdiA9ICh2ICsgbW9kaWZpY2F0aW9uKSAlIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc3BsaXRjb21wbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgaCA9IGhzbC5oO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5ldyBUaW55Q29sb3IoeyBoOiAoaCArIDcyKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICAgICAgbmV3IFRpbnlDb2xvcih7IGg6IChoICsgMjE2KSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICBdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBob3cgdGhlIGNvbG9yIHdvdWxkIGFwcGVhciBvbiBhIGJhY2tncm91bmRcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLm9uQmFja2dyb3VuZCA9IGZ1bmN0aW9uIChiYWNrZ3JvdW5kKSB7XG4gICAgICAgIHZhciBmZyA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgdmFyIGJnID0gbmV3IFRpbnlDb2xvcihiYWNrZ3JvdW5kKS50b1JnYigpO1xuICAgICAgICB2YXIgYWxwaGEgPSBmZy5hICsgYmcuYSAqICgxIC0gZmcuYSk7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKHtcbiAgICAgICAgICAgIHI6IChmZy5yICogZmcuYSArIGJnLnIgKiBiZy5hICogKDEgLSBmZy5hKSkgLyBhbHBoYSxcbiAgICAgICAgICAgIGc6IChmZy5nICogZmcuYSArIGJnLmcgKiBiZy5hICogKDEgLSBmZy5hKSkgLyBhbHBoYSxcbiAgICAgICAgICAgIGI6IChmZy5iICogZmcuYSArIGJnLmIgKiBiZy5hICogKDEgLSBmZy5hKSkgLyBhbHBoYSxcbiAgICAgICAgICAgIGE6IGFscGhhLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBgcG9seWFkKDMpYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudHJpYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlhZCgzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBgcG9seWFkKDQpYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudGV0cmFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5YWQoNCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgcG9seWFkIGNvbG9ycywgbGlrZSAoZm9yIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIGV0Yy4uLilcbiAgICAgKiBtb25hZCwgZHlhZCwgdHJpYWQsIHRldHJhZCwgcGVudGFkLCBoZXhhZCwgaGVwdGFkLCBvY3RhZCwgZXRjLi4uXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5wb2x5YWQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgaCA9IGhzbC5oO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW3RoaXNdO1xuICAgICAgICB2YXIgaW5jcmVtZW50ID0gMzYwIC8gbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBUaW55Q29sb3IoeyBoOiAoaCArIGkgKiBpbmNyZW1lbnQpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjb21wYXJlIGNvbG9yIHZzIGN1cnJlbnQgY29sb3JcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpID09PSBuZXcgVGlueUNvbG9yKGNvbG9yKS50b1JnYlN0cmluZygpO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbnlDb2xvcjtcbn0oKSk7XG5leHBvcnQgeyBUaW55Q29sb3IgfTtcbi8vIGtlcHQgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5IHdpdGggdjFcbmV4cG9ydCBmdW5jdGlvbiB0aW55Y29sb3IoY29sb3IsIG9wdHMpIHtcbiAgICBpZiAoY29sb3IgPT09IHZvaWQgMCkgeyBjb2xvciA9ICcnOyB9XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihjb2xvciwgb3B0cyk7XG59XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbnZhciBDaGVja2FibGVUYWcgPSBmdW5jdGlvbiBDaGVja2FibGVUYWcoX2EpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICBjaGVja2VkID0gX2EuY2hlY2tlZCxcbiAgICBvbkNoYW5nZSA9IF9hLm9uQ2hhbmdlLFxuICAgIG9uQ2xpY2sgPSBfYS5vbkNsaWNrLFxuICAgIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hlY2tlZFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiXSk7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzO1xuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgb25DaGFuZ2UgPT09IG51bGwgfHwgb25DaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ2hhbmdlKCFjaGVja2VkKTtcbiAgICBvbkNsaWNrID09PSBudWxsIHx8IG9uQ2xpY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ2xpY2soZSk7XG4gIH07XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3RhZycsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIHZhciBjbHMgPSBjbGFzc05hbWVzKHByZWZpeENscywgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jaGVja2FibGVcIiksIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2hlY2thYmxlLWNoZWNrZWRcIiksIGNoZWNrZWQpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrXG4gIH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBDaGVja2FibGVUYWc7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IENsb3NlT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlT3V0bGluZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IG9taXQgZnJvbSBcInJjLXV0aWwvZXMvb21pdFwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgeyBQcmVzZXRDb2xvclR5cGVzLCBQcmVzZXRTdGF0dXNDb2xvclR5cGVzIH0gZnJvbSAnLi4vX3V0aWwvY29sb3JzJztcbmltcG9ydCBXYXZlIGZyb20gJy4uL191dGlsL3dhdmUnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vX3V0aWwvd2FybmluZyc7XG5pbXBvcnQgQ2hlY2thYmxlVGFnIGZyb20gJy4vQ2hlY2thYmxlVGFnJztcbnZhciBQcmVzZXRDb2xvclJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXCIuY29uY2F0KFByZXNldENvbG9yVHlwZXMuam9pbignfCcpLCBcIikoLWludmVyc2UpPyRcIikpO1xudmFyIFByZXNldFN0YXR1c0NvbG9yUmVnZXggPSBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQoUHJlc2V0U3RhdHVzQ29sb3JUeXBlcy5qb2luKCd8JyksIFwiKSRcIikpO1xudmFyIEludGVybmFsVGFnID0gZnVuY3Rpb24gSW50ZXJuYWxUYWcoX2EsIHJlZikge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLFxuICAgIHN0eWxlID0gX2Euc3R5bGUsXG4gICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICBpY29uID0gX2EuaWNvbixcbiAgICBjb2xvciA9IF9hLmNvbG9yLFxuICAgIG9uQ2xvc2UgPSBfYS5vbkNsb3NlLFxuICAgIGNsb3NlSWNvbiA9IF9hLmNsb3NlSWNvbixcbiAgICBfYSRjbG9zYWJsZSA9IF9hLmNsb3NhYmxlLFxuICAgIGNsb3NhYmxlID0gX2EkY2xvc2FibGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EkY2xvc2FibGUsXG4gICAgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJpY29uXCIsIFwiY29sb3JcIiwgXCJvbkNsb3NlXCIsIFwiY2xvc2VJY29uXCIsIFwiY2xvc2FibGVcIl0pO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb24gPSBfUmVhY3QkdXNlQ29udGV4dC5kaXJlY3Rpb247XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh0cnVlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICB2aXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgLy8gV2FybmluZyBmb3IgZGVwcmVjYXRlZCB1c2FnZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISgndmlzaWJsZScgaW4gcHJvcHMpLCAnVGFnJywgJ2B2aXNpYmxlYCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLCBwbGVhc2UgdXNlIGB2aXNpYmxlICYmIDxUYWcgLz5gIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ3Zpc2libGUnIGluIHByb3BzKSB7XG4gICAgICBzZXRWaXNpYmxlKHByb3BzLnZpc2libGUpO1xuICAgIH1cbiAgfSwgW3Byb3BzLnZpc2libGVdKTtcbiAgdmFyIGlzUHJlc2V0Q29sb3IgPSBmdW5jdGlvbiBpc1ByZXNldENvbG9yKCkge1xuICAgIGlmICghY29sb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIFByZXNldENvbG9yUmVnZXgudGVzdChjb2xvcikgfHwgUHJlc2V0U3RhdHVzQ29sb3JSZWdleC50ZXN0KGNvbG9yKTtcbiAgfTtcbiAgdmFyIHRhZ1N0eWxlID0gX2V4dGVuZHMoe1xuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IgJiYgIWlzUHJlc2V0Q29sb3IoKSA/IGNvbG9yIDogdW5kZWZpbmVkXG4gIH0sIHN0eWxlKTtcbiAgdmFyIHByZXNldENvbG9yID0gaXNQcmVzZXRDb2xvcigpO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0YWcnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgdGFnQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChjb2xvciksIHByZXNldENvbG9yKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhhcy1jb2xvclwiKSwgY29sb3IgJiYgIXByZXNldENvbG9yKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhpZGRlblwiKSwgIXZpc2libGUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpO1xuICB2YXIgaGFuZGxlQ2xvc2VDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlQ2xpY2soZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgb25DbG9zZSA9PT0gbnVsbCB8fCBvbkNsb3NlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNsb3NlKGUpO1xuICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEoJ3Zpc2libGUnIGluIHByb3BzKSkge1xuICAgICAgc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfVxuICB9O1xuICB2YXIgcmVuZGVyQ2xvc2VJY29uID0gZnVuY3Rpb24gcmVuZGVyQ2xvc2VJY29uKCkge1xuICAgIGlmIChjbG9zYWJsZSkge1xuICAgICAgcmV0dXJuIGNsb3NlSWNvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jbG9zZS1pY29uXCIpLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbG9zZUNsaWNrXG4gICAgICB9LCBjbG9zZUljb24pIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VPdXRsaW5lZCwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2xvc2UtaWNvblwiKSxcbiAgICAgICAgb25DbGljazogaGFuZGxlQ2xvc2VDbGlja1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICB2YXIgaXNOZWVkV2F2ZSA9ICdvbkNsaWNrJyBpbiBwcm9wcyB8fCBjaGlsZHJlbiAmJiBjaGlsZHJlbi50eXBlID09PSAnYSc7XG4gIHZhciB0YWdQcm9wcyA9IG9taXQocHJvcHMsIFsndmlzaWJsZSddKTtcbiAgdmFyIGljb25Ob2RlID0gaWNvbiB8fCBudWxsO1xuICB2YXIga2lkcyA9IGljb25Ob2RlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGljb25Ob2RlLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgY2hpbGRyZW4pKSA6IGNoaWxkcmVuO1xuICB2YXIgdGFnTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7fSwgdGFnUHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IHRhZ0NsYXNzTmFtZSxcbiAgICBzdHlsZTogdGFnU3R5bGVcbiAgfSksIGtpZHMsIHJlbmRlckNsb3NlSWNvbigpKTtcbiAgcmV0dXJuIGlzTmVlZFdhdmUgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXYXZlLCBudWxsLCB0YWdOb2RlKSA6IHRhZ05vZGU7XG59O1xudmFyIFRhZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEludGVybmFsVGFnKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRhZy5kaXNwbGF5TmFtZSA9ICdUYWcnO1xufVxuVGFnLkNoZWNrYWJsZVRhZyA9IENoZWNrYWJsZVRhZztcbmV4cG9ydCBkZWZhdWx0IFRhZzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IHVzZUZsZXhHYXBTdXBwb3J0IGZyb20gJy4uL191dGlsL2hvb2tzL3VzZUZsZXhHYXBTdXBwb3J0JztcbmltcG9ydCBSZXNwb25zaXZlT2JzZXJ2ZSwgeyByZXNwb25zaXZlQXJyYXkgfSBmcm9tICcuLi9fdXRpbC9yZXNwb25zaXZlT2JzZXJ2ZSc7XG5pbXBvcnQgeyB0dXBsZSB9IGZyb20gJy4uL191dGlsL3R5cGUnO1xuaW1wb3J0IFJvd0NvbnRleHQgZnJvbSAnLi9Sb3dDb250ZXh0JztcbnZhciBSb3dBbGlnbnMgPSB0dXBsZSgndG9wJywgJ21pZGRsZScsICdib3R0b20nLCAnc3RyZXRjaCcpO1xudmFyIFJvd0p1c3RpZnkgPSB0dXBsZSgnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1ldmVubHknKTtcbmZ1bmN0aW9uIHVzZU1lcmdlUHJvcEJ5U2NyZWVuKG9yaVByb3AsIHNjcmVlbikge1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUodHlwZW9mIG9yaVByb3AgPT09ICdzdHJpbmcnID8gb3JpUHJvcCA6ICcnKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICBwcm9wID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRQcm9wID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgdmFyIGNsYWNNZXJnZUFsaWduT3JKdXN0aWZ5ID0gZnVuY3Rpb24gY2xhY01lcmdlQWxpZ25Pckp1c3RpZnkoKSB7XG4gICAgaWYgKHR5cGVvZiBvcmlQcm9wID09PSAnc3RyaW5nJykge1xuICAgICAgc2V0UHJvcChvcmlQcm9wKTtcbiAgICB9XG4gICAgaWYgKF90eXBlb2Yob3JpUHJvcCkgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2l2ZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYnJlYWtwb2ludCA9IHJlc3BvbnNpdmVBcnJheVtpXTtcbiAgICAgIC8vIGlmIGRvIG5vdCBtYXRjaCwgZG8gbm90aGluZ1xuICAgICAgaWYgKCFzY3JlZW5bYnJlYWtwb2ludF0pIGNvbnRpbnVlO1xuICAgICAgdmFyIGN1clZhbCA9IG9yaVByb3BbYnJlYWtwb2ludF07XG4gICAgICBpZiAoY3VyVmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0UHJvcChjdXJWYWwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNsYWNNZXJnZUFsaWduT3JKdXN0aWZ5KCk7XG4gIH0sIFtKU09OLnN0cmluZ2lmeShvcmlQcm9wKSwgc2NyZWVuXSk7XG4gIHJldHVybiBwcm9wO1xufVxudmFyIFJvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBqdXN0aWZ5ID0gcHJvcHMuanVzdGlmeSxcbiAgICBhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgX3Byb3BzJGd1dHRlciA9IHByb3BzLmd1dHRlcixcbiAgICBndXR0ZXIgPSBfcHJvcHMkZ3V0dGVyID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGd1dHRlcixcbiAgICB3cmFwID0gcHJvcHMud3JhcCxcbiAgICBvdGhlcnMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImp1c3RpZnlcIiwgXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJndXR0ZXJcIiwgXCJ3cmFwXCJdKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICAgIHhzOiB0cnVlLFxuICAgICAgc206IHRydWUsXG4gICAgICBtZDogdHJ1ZSxcbiAgICAgIGxnOiB0cnVlLFxuICAgICAgeGw6IHRydWUsXG4gICAgICB4eGw6IHRydWVcbiAgICB9KSxcbiAgICBfUmVhY3QkdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlMywgMiksXG4gICAgc2NyZWVucyA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgc2V0U2NyZWVucyA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG4gIC8vIHRvIHNhdmUgc2NyZWVucyBpbmZvIHdoZW4gcmVzcG9uc2l2ZU9ic2VydmUgY2FsbGJhY2sgaGFkIGJlZW4gY2FsbFxuICB2YXIgX1JlYWN0JHVzZVN0YXRlNSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICAgIHhzOiBmYWxzZSxcbiAgICAgIHNtOiBmYWxzZSxcbiAgICAgIG1kOiBmYWxzZSxcbiAgICAgIGxnOiBmYWxzZSxcbiAgICAgIHhsOiBmYWxzZSxcbiAgICAgIHh4bDogZmFsc2VcbiAgICB9KSxcbiAgICBfUmVhY3QkdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlNSwgMiksXG4gICAgY3VyU2NyZWVucyA9IF9SZWFjdCR1c2VTdGF0ZTZbMF0sXG4gICAgc2V0Q3VyU2NyZWVucyA9IF9SZWFjdCR1c2VTdGF0ZTZbMV07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gY2FsYyByZXBvbnNpdmUgZGF0YSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBtZXJnZUFsaWduID0gdXNlTWVyZ2VQcm9wQnlTY3JlZW4oYWxpZ24sIGN1clNjcmVlbnMpO1xuICB2YXIgbWVyZ2VKdXN0aWZ5ID0gdXNlTWVyZ2VQcm9wQnlTY3JlZW4oanVzdGlmeSwgY3VyU2NyZWVucyk7XG4gIHZhciBzdXBwb3J0RmxleEdhcCA9IHVzZUZsZXhHYXBTdXBwb3J0KCk7XG4gIHZhciBndXR0ZXJSZWYgPSBSZWFjdC51c2VSZWYoZ3V0dGVyKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFZmZlY3QgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b2tlbiA9IFJlc3BvbnNpdmVPYnNlcnZlLnN1YnNjcmliZShmdW5jdGlvbiAoc2NyZWVuKSB7XG4gICAgICBzZXRDdXJTY3JlZW5zKHNjcmVlbik7XG4gICAgICB2YXIgY3VycmVudEd1dHRlciA9IGd1dHRlclJlZi5jdXJyZW50IHx8IDA7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudEd1dHRlcikgJiYgX3R5cGVvZihjdXJyZW50R3V0dGVyKSA9PT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShjdXJyZW50R3V0dGVyKSAmJiAoX3R5cGVvZihjdXJyZW50R3V0dGVyWzBdKSA9PT0gJ29iamVjdCcgfHwgX3R5cGVvZihjdXJyZW50R3V0dGVyWzFdKSA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgIHNldFNjcmVlbnMoc2NyZWVuKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFJlc3BvbnNpdmVPYnNlcnZlLnVuc3Vic2NyaWJlKHRva2VuKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGdldEd1dHRlciA9IGZ1bmN0aW9uIGdldEd1dHRlcigpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFt1bmRlZmluZWQsIHVuZGVmaW5lZF07XG4gICAgdmFyIG5vcm1hbGl6ZWRHdXR0ZXIgPSBBcnJheS5pc0FycmF5KGd1dHRlcikgPyBndXR0ZXIgOiBbZ3V0dGVyLCB1bmRlZmluZWRdO1xuICAgIG5vcm1hbGl6ZWRHdXR0ZXIuZm9yRWFjaChmdW5jdGlvbiAoZywgaW5kZXgpIHtcbiAgICAgIGlmIChfdHlwZW9mKGcpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNpdmVBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBicmVha3BvaW50ID0gcmVzcG9uc2l2ZUFycmF5W2ldO1xuICAgICAgICAgIGlmIChzY3JlZW5zW2JyZWFrcG9pbnRdICYmIGdbYnJlYWtwb2ludF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSBnW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzW2luZGV4XSA9IGc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3JvdycsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIHZhciBndXR0ZXJzID0gZ2V0R3V0dGVyKCk7XG4gIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbm8td3JhcFwiKSwgd3JhcCA9PT0gZmFsc2UpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChtZXJnZUp1c3RpZnkpLCBtZXJnZUp1c3RpZnkpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChtZXJnZUFsaWduKSwgbWVyZ2VBbGlnbiksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIC8vIEFkZCBndXR0ZXIgcmVsYXRlZCBzdHlsZVxuICB2YXIgcm93U3R5bGUgPSB7fTtcbiAgdmFyIGhvcml6b250YWxHdXR0ZXIgPSBndXR0ZXJzWzBdICE9IG51bGwgJiYgZ3V0dGVyc1swXSA+IDAgPyBndXR0ZXJzWzBdIC8gLTIgOiB1bmRlZmluZWQ7XG4gIHZhciB2ZXJ0aWNhbEd1dHRlciA9IGd1dHRlcnNbMV0gIT0gbnVsbCAmJiBndXR0ZXJzWzFdID4gMCA/IGd1dHRlcnNbMV0gLyAtMiA6IHVuZGVmaW5lZDtcbiAgaWYgKGhvcml6b250YWxHdXR0ZXIpIHtcbiAgICByb3dTdHlsZS5tYXJnaW5MZWZ0ID0gaG9yaXpvbnRhbEd1dHRlcjtcbiAgICByb3dTdHlsZS5tYXJnaW5SaWdodCA9IGhvcml6b250YWxHdXR0ZXI7XG4gIH1cbiAgaWYgKHN1cHBvcnRGbGV4R2FwKSB7XG4gICAgLy8gU2V0IGdhcCBkaXJlY3QgaWYgZmxleCBnYXAgc3VwcG9ydFxuICAgIHZhciBfZ3V0dGVycyA9IF9zbGljZWRUb0FycmF5KGd1dHRlcnMsIDIpO1xuICAgIHJvd1N0eWxlLnJvd0dhcCA9IF9ndXR0ZXJzWzFdO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsR3V0dGVyKSB7XG4gICAgcm93U3R5bGUubWFyZ2luVG9wID0gdmVydGljYWxHdXR0ZXI7XG4gICAgcm93U3R5bGUubWFyZ2luQm90dG9tID0gdmVydGljYWxHdXR0ZXI7XG4gIH1cbiAgLy8gXCJndXR0ZXJzXCIgaXMgYSBuZXcgYXJyYXkgaW4gZWFjaCByZW5kZXJpbmcgcGhhc2UsIGl0J2xsIG1ha2UgJ1JlYWN0LnVzZU1lbW8nIGVmZmVjdGxlc3MuXG4gIC8vIFNvIHdlIGRlY29uc3RydWN0IFwiZ3V0dGVyc1wiIHZhcmlhYmxlIGhlcmUuXG4gIHZhciBfZ3V0dGVyczIgPSBfc2xpY2VkVG9BcnJheShndXR0ZXJzLCAyKSxcbiAgICBndXR0ZXJIID0gX2d1dHRlcnMyWzBdLFxuICAgIGd1dHRlclYgPSBfZ3V0dGVyczJbMV07XG4gIHZhciByb3dDb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGd1dHRlcjogW2d1dHRlckgsIGd1dHRlclZdLFxuICAgICAgd3JhcDogd3JhcCxcbiAgICAgIHN1cHBvcnRGbGV4R2FwOiBzdXBwb3J0RmxleEdhcFxuICAgIH07XG4gIH0sIFtndXR0ZXJILCBndXR0ZXJWLCB3cmFwLCBzdXBwb3J0RmxleEdhcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm93Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3dDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBvdGhlcnMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgc3R5bGU6IF9leHRlbmRzKF9leHRlbmRzKHt9LCByb3dTdHlsZSksIHN0eWxlKSxcbiAgICByZWY6IHJlZlxuICB9KSwgY2hpbGRyZW4pKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUm93LmRpc3BsYXlOYW1lID0gJ1Jvdyc7XG59XG5leHBvcnQgZGVmYXVsdCBSb3c7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgV2FybmluZ0ZpbGxlZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNOTU1LjcgODU2bC00MTYtNzIwYy02LjItMTAuNy0xNi45LTE2LTI3LjctMTZzLTIxLjYgNS4zLTI3LjcgMTZsLTQxNiA3MjBDNTYgODc3LjQgNzEuNCA5MDQgOTYgOTA0aDgzMmMyNC42IDAgNDAtMjYuNiAyNy43LTQ4ek00ODAgNDE2YzAtNC40IDMuNi04IDgtOGg0OGM0LjQgMCA4IDMuNiA4IDh2MTg0YzAgNC40LTMuNiA4LTggOGgtNDhjLTQuNCAwLTgtMy42LTgtOFY0MTZ6bTMyIDM1MmE0OC4wMSA0OC4wMSAwIDAxMC05NiA0OC4wMSA0OC4wMSAwIDAxMCA5NnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcIndhcm5pbmdcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnQgZGVmYXVsdCBXYXJuaW5nRmlsbGVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgV2FybmluZ0ZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9XYXJuaW5nRmlsbGVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgV2FybmluZ0ZpbGxlZCA9IGZ1bmN0aW9uIFdhcm5pbmdGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IFdhcm5pbmdGaWxsZWRTdmdcbiAgfSkpO1xufTtcbldhcm5pbmdGaWxsZWQuZGlzcGxheU5hbWUgPSAnV2FybmluZ0ZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihXYXJuaW5nRmlsbGVkKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgTm9Gb3VuZCA9IGZ1bmN0aW9uIE5vRm91bmQoKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgd2lkdGg6IFwiMjUyXCIsXG4gICAgaGVpZ2h0OiBcIjI5NFwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGVmc1wiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTAgLjM4N2gyNTEuNzcydjI1MS43NzJIMHpcIlxuICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgwIC4wMTIpXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJtYXNrXCIsIHtcbiAgICBmaWxsOiBcIiNmZmZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0wIDEyNy4zMnYtMi4wOTVDMCA1Ni4yNzkgNTUuODkyLjM4NyAxMjQuODM4LjM4N2gyLjA5NmM2OC45NDYgMCAxMjQuODM4IDU1Ljg5MiAxMjQuODM4IDEyNC44Mzh2Mi4wOTZjMCA2OC45NDYtNTUuODkyIDEyNC44MzgtMTI0LjgzOCAxMjQuODM4aC0yLjA5NkM1NS44OTIgMjUyLjE2IDAgMTk2LjI2NyAwIDEyNy4zMjFcIixcbiAgICBmaWxsOiBcIiNFNEVCRjdcIixcbiAgICBtYXNrOiBcInVybCgjYilcIlxuICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMzkuNzU1IDEzMC44NGE4LjI3NiA4LjI3NiAwIDEgMS0xNi40NjgtMS42NiA4LjI3NiA4LjI3NiAwIDAgMSAxNi40NjggMS42NlwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTM2Ljk3NSAxMzQuMjk3bDEwLjQ4MiA1Ljk0M000OC4zNzMgMTQ2LjUwOGwtMTIuNjQ4IDEwLjc4OFwiLFxuICAgIHN0cm9rZTogXCIjRkZGXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTM5Ljg3NSAxNTkuMzUyYTUuNjY3IDUuNjY3IDAgMSAxLTExLjI3Ny0xLjEzNiA1LjY2NyA1LjY2NyAwIDAgMSAxMS4yNzcgMS4xMzZNNTcuNTg4IDE0My4yNDdhNS43MDggNS43MDggMCAxIDEtMTEuMzU4LTEuMTQ1IDUuNzA4IDUuNzA4IDAgMCAxIDExLjM1OCAxLjE0NU05OS4wMTggMjYuODc1bDI5LjgyLS4wMTRhNC41ODcgNC41ODcgMCAxIDAtLjAwMy05LjE3NWwtMjkuODIuMDEzYTQuNTg3IDQuNTg3IDAgMSAwIC4wMDMgOS4xNzZNMTEwLjQyNCA0NS4yMTFsMjkuODItLjAxM2E0LjU4OCA0LjU4OCAwIDAgMC0uMDA0LTkuMTc1bC0yOS44Mi4wMTNhNC41ODcgNC41ODcgMCAxIDAgLjAwNCA5LjE3NVwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTExMi43OTggMjYuODYxdi0uMDAybDE1Ljc4NC0uMDA2YTQuNTg4IDQuNTg4IDAgMSAwIC4wMDMgOS4xNzVsLTE1Ljc4My4wMDd2LS4wMDJhNC41ODYgNC41ODYgMCAwIDAtLjAwNC05LjE3Mk0xODQuNTIzIDEzNS42NjhjLS41NTMgNS40ODUtNS40NDcgOS40ODMtMTAuOTMxIDguOTMtNS40ODUtLjU1My05LjQ4My01LjQ0OC04LjkzLTEwLjkzMi41NTItNS40ODUgNS40NDctOS40ODMgMTAuOTMyLTguOTMgNS40ODUuNTUzIDkuNDgzIDUuNDQ3IDguOTMgMTAuOTMyXCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTc5LjI2IDE0MS43NWwxMi42NCA3LjE2N00xOTMuMDA2IDE1Ni40NzdsLTE1LjI1NSAxMy4wMTFcIixcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xODQuNjY4IDE3MC4wNTdhNi44MzUgNi44MzUgMCAxIDEtMTMuNi0xLjM3MiA2LjgzNSA2LjgzNSAwIDAgMSAxMy42IDEuMzcyTTIwMy4zNCAxNTMuMzI1YTYuODg1IDYuODg1IDAgMSAxLTEzLjctMS4zODIgNi44ODUgNi44ODUgMCAwIDEgMTMuNyAxLjM4MlwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE1MS45MzEgMTkyLjMyNGEyLjIyMiAyLjIyMiAwIDEgMS00LjQ0NCAwIDIuMjIyIDIuMjIyIDAgMCAxIDQuNDQ0IDB6TTIyNS4yNyAxMTYuMDU2YTIuMjIyIDIuMjIyIDAgMSAxLTQuNDQ1IDAgMi4yMjIgMi4yMjIgMCAwIDEgNC40NDQgMHpNMjE2LjM4IDE1MS4wOGEyLjIyMyAyLjIyMyAwIDEgMS00LjQ0Ni0uMDAxIDIuMjIzIDIuMjIzIDAgMCAxIDQuNDQ2IDB6TTE3Ni45MTcgMTA3LjYzNmEyLjIyMyAyLjIyMyAwIDEgMS00LjQ0NSAwIDIuMjIzIDIuMjIzIDAgMCAxIDQuNDQ1IDB6TTE5NS4yOTEgOTIuMTY1YTIuMjIzIDIuMjIzIDAgMSAxLTQuNDQ1IDAgMi4yMjMgMi4yMjMgMCAwIDEgNC40NDUgMHpNMjAyLjA1OCAxODAuNzExYTIuMjIzIDIuMjIzIDAgMSAxLTQuNDQ2IDAgMi4yMjMgMi4yMjMgMCAwIDEgNC40NDYgMHpcIixcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIixcbiAgICBkOiBcIk0yMTQuNDA0IDE1My4zMDJsLTEuOTEyIDIwLjE4NC0xMC45MjggNS45OU0xNzMuNjYxIDE3NC43OTJsLTYuMzU2IDkuODE0aC0xMS4zNmwtNC41MDggNi40ODRNMTc0Ljk0MSAxMjUuMTY4di0xNS44MDRNMjIwLjgyNCAxMTcuMjVsLTEyLjg0IDcuOTAxLTE1LjMxLTcuOTAyVjk0LjM5XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTY2LjU4OCA2NS45MzZoLTMuOTUxYTQuNzU2IDQuNzU2IDAgMCAxLTQuNzQzLTQuNzQyIDQuNzU2IDQuNzU2IDAgMCAxIDQuNzQzLTQuNzQzaDMuOTUxYTQuNzU2IDQuNzU2IDAgMCAxIDQuNzQzIDQuNzQzIDQuNzU2IDQuNzU2IDAgMCAxLTQuNzQzIDQuNzQyXCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTc0LjgyMyAzMC4wM2MwLTE2LjI4MSAxMy4xOTgtMjkuNDggMjkuNDgtMjkuNDggMTYuMjggMCAyOS40OCAxMy4xOTkgMjkuNDggMjkuNDggMCAxNi4yOC0xMy4yIDI5LjQ4LTI5LjQ4IDI5LjQ4LTE2LjI4MiAwLTI5LjQ4LTEzLjItMjkuNDgtMjkuNDhcIixcbiAgICBmaWxsOiBcIiMxODkwRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0yMDUuOTUyIDM4LjM4N2MuNS41Ljc4NSAxLjE0Mi43ODUgMS45MjhzLS4yODYgMS40NjUtLjc4NSAxLjk2NGMtLjU3Mi41LTEuMjE0Ljc1LTIgLjc1LS43ODUgMC0xLjQyOS0uMjg1LTEuOTI5LS43ODUtLjU3Mi0uNS0uODItMS4xNDMtLjgyLTEuOTI5cy4yNDgtMS40MjguODItMS45MjhjLjUtLjUgMS4xNDQtLjc1IDEuOTMtLjc1Ljc4NSAwIDEuNDYyLjI1IDEuOTk5Ljc1bTQuMjg1LTE5LjQ2M2MxLjQyOCAxLjI0OSAyLjE0MyAyLjk2MyAyLjE0MyA1LjE0MiAwIDEuNzEyLS40MjcgMy4xMy0xLjIxOSA0LjI1LS4wNjcuMDk2LS4xMzcuMTgtLjIxOC4yNjUtLjQxNi40MjktMS40MSAxLjM0Ni0yLjk1NiAyLjY5OWE1LjA3IDUuMDcgMCAwIDAtMS40MjggMS43NSA1LjIwNyA1LjIwNyAwIDAgMC0uNTM2IDIuMzU3di41aC00LjEwN3YtLjVjMC0xLjM1Ny4yMTUtMi41MzYuNzE0LTMuNS40NjQtLjk2NCAxLjg1Ny0yLjQ2NCA0LjE3OC00LjUzNmwuNDMtLjVjLjY0My0uNzg1Ljk2NC0xLjY0My45NjQtMi41MzUgMC0xLjE4LS4zNTgtMi4xMDgtMS0yLjc4NS0uNjc4LS42OC0xLjY0My0xLjAwMS0yLjg1OC0xLjAwMS0xLjUzNiAwLTIuNjQyLjQ2NC0zLjM1NyAxLjQzLS4zNy41LS42MjEgMS4xMzUtLjc2IDEuOTA0YTEuOTk5IDEuOTk5IDAgMCAxLTEuOTcxIDEuNjNoLS4wMDRjLTEuMjc3IDAtMi4yNTctMS4xODMtMS45OC0yLjQzLjMzNy0xLjUxOCAxLjAyLTIuNzggMi4wNzMtMy43ODQgMS41MzYtMS41IDMuNjA3LTIuMjUgNi4yNS0yLjI1IDIuMzIgMCA0LjIxNC42MDcgNS42NDIgMS44OTRcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01Mi4wNCA3Ni4xMzFzMjEuODEgNS4zNiAyNy4zMDcgMTUuOTQ1YzUuNTc1IDEwLjc0LTYuMzUyIDkuMjYtMTUuNzMgNC45MzUtMTAuODYtNS4wMDgtMjQuNy0xMS44MjItMTEuNTc3LTIwLjg4XCIsXG4gICAgZmlsbDogXCIjRkZCNTk0XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOTAuNDgzIDY3LjUwNGwtLjQ0OSAyLjg5M2MtLjc1My40OS00Ljc0OC0yLjY2My00Ljc0OC0yLjY2M2wtMS42NDUuNzQ4LTEuMzQ2LTUuNjg0czYuODE1LTQuNTg5IDguOTE3LTUuMDE4YzIuNDUyLS41MDEgOS44ODQuOTQgMTAuNyAyLjI3OCAwIDAgMS4zMi40ODYtMi4yMjcuNjktMy41NDguMjAzLTUuMDQzLjQ0Ny02Ljc5IDMuMTMyLTEuNzQ3IDIuNjg2LTIuNDEyIDMuNjI0LTIuNDEyIDMuNjI0XCIsXG4gICAgZmlsbDogXCIjRkZDNkEwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTI4LjA1NSAxMTEuMzY3Yy0yLjYyNy03LjcyNC02LjE1LTEzLjE4LTguOTE3LTE1LjQ3OC0zLjUtMi45MDYtOS4zNC0yLjIyNS0xMS4zNjYtNC4xODctMS4yNy0xLjIzMS0zLjIxNS0xLjE5Ny0zLjIxNS0xLjE5N3MtMTQuOTgtMy4xNTgtMTYuODI4LTMuNDc5Yy0yLjM3LS40MS0yLjEyNC0uNzE0LTYuMDU0LTEuNDA1LTEuNTctMS45MDctMi45MTctMS4xMjItMi45MTctMS4xMjJsLTcuMTEtMS4zODNjLS44NTMtMS40NzItMi40MjMtMS4wMjMtMi40MjMtMS4wMjNsLTIuNDY4LS44OTdjLTEuNjQ1IDkuOTc2LTcuNzQgMTMuNzk2LTcuNzQgMTMuNzk2IDEuNzk1IDEuMTIyIDE1LjcwMyA4LjMgMTUuNzAzIDguM2w1LjEwNyAzNy4xMXMtMy4zMjEgNS42OTQgMS4zNDYgOS4xMDljMCAwIDE5Ljg4My0zLjc0MyAzNC45MjEtLjMyOSAwIDAgMy4wNDctMi41NDYuOTcyLTguODA2LjUyMy0zLjAxIDEuMzk0LTguMjYzIDEuNzM2LTExLjYyMi4zODUuNzcyIDIuMDE5IDEuOTE4IDMuMTQgMy40NzcgMCAwIDkuNDA3LTcuMzY1IDExLjA1Mi0xNC4wMTItLjgzMi0uNzIzLTEuNTk4LTEuNTg1LTIuMjY3LTIuNDUzLS41NjctLjczNi0uMzU4LTIuMDU2LS43NjUtMi43MTctLjY2OS0xLjA4NC0xLjgwNC0xLjM3OC0xLjkwNy0xLjY4MlwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwMS4wOSAyODkuOTk4czQuMjk1IDIuMDQxIDcuMzU0IDEuMDIxYzIuODIxLS45NCA0LjUzLjY2OCA3LjA4IDEuMTc4IDIuNTUuNTEgNi44NzQgMS4xIDExLjY4Ni0xLjI2LS4xMDMtNS41MS02Ljg4OS0zLjk4LTExLjk2LTYuNzEzLTIuNTYzLTEuMzgtMy43ODQtNC43MjItMy41OTgtOC43OTloLTkuNDAycy0xLjM5MiAxMC41Mi0xLjE2IDE0LjU3M1wiLFxuICAgIGZpbGw6IFwiI0NCRDFEMVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwMS4wNjcgMjg5LjgyNnMyLjQyOCAxLjI3MSA2Ljc1OS42NTNjMy4wNTgtLjQzNyAzLjcxMi40ODEgNy40MjMgMS4wMzEgMy43MTIuNTUgMTAuNzI0LS4wNjkgMTEuODIzLS44OTQuNDEzIDEuMS0uMzQzIDIuMDYzLS4zNDMgMi4wNjNzLTEuNTEyLjYwMy00LjgxMi44MjRjLTIuMDMuMTM2LTUuOC4yOTEtNy42MDctLjUwMy0xLjc4Ny0xLjM3NS01LjI0Ny0xLjkwMy01LjcyOC0uMjQxLTMuOTE4Ljk1LTcuMzU1LS4yODYtNy4zNTUtLjI4NmwtLjE2LTIuNjQ3elwiLFxuICAgIGZpbGw6IFwiIzJCMDg0OVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwOC4zNDEgMjc2LjA0NGgzLjA5NHMtLjEwMyA2LjcwMiA0LjUzNiA4LjU1OGMtNC42NC42MTgtOC41NTgtMi4zMDMtNy42My04LjU1OFwiLFxuICAgIGZpbGw6IFwiI0E0QUFCQVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTU3LjU0MiAyNzIuNDAxcy0yLjEwNyA3LjQxNi00LjQ4NSAxMi4zMDZjLTEuNzk4IDMuNjk1LTQuMjI1IDcuNDkyIDUuNDY1IDcuNDkyIDYuNjQ4IDAgOC45NTMtLjQ4IDcuNDIzLTYuNTk5LTEuNTMtNi4xMi4yNjYtMTMuMTk5LjI2Ni0xMy4xOTloLTguNjY5elwiLFxuICAgIGZpbGw6IFwiI0NCRDFEMVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTUxLjQ3NiAyODkuNzkzczIuMDk3IDEuMTY5IDYuNjMzIDEuMTY5YzYuMDgzIDAgOC4yNDktMS42NSA4LjI0OS0xLjY1cy42MDIgMS4xMTQtLjYxOSAyLjE2NWMtLjk5My44NTUtMy41OTcgMS41OTEtNy4zOSAxLjU0Ni00LjE0NS0uMDQ4LTUuODMyLS41NjYtNi43MzYtMS4xNjgtLjgyNS0uNTUtLjY4Ny0xLjU4LS4xMzctMi4wNjJcIixcbiAgICBmaWxsOiBcIiMyQjA4NDlcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01OC40MTkgMjc0LjMwNHMuMDMzIDEuNTE5LS4zMTQgMi45M2MtLjM0OSAxLjQyLTEuMDc4IDMuMTA0LTEuMTMgNC4xMzktLjA1OCAxLjE1MSA0LjUzNyAxLjU4IDUuMTU1LjAzNC42Mi0xLjU0NyAxLjI5NC02LjQyNyAxLjkxMy03LjI1Mi42MTktLjgyNS00LjkwMy0yLjExOS01LjYyNC4xNVwiLFxuICAgIGZpbGw6IFwiI0E0QUFCQVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTk5LjY2IDI3OC41MTRsMTMuMzc4LjA5MnMxLjI5OC01NC41MiAxLjg1My02NC40MDNjLjU1NC05Ljg4MiAzLjc3Ni00My4zNjQgMS4wMDItNjMuMTI4bC0xMi41NDctLjY0NC0yMi44NDkuNzhzLS40MzQgMy45NjYtMS4xOTUgOS45NzZjLS4wNjMuNDk2LS42ODIuODQzLS43NDkgMS4zNjUtLjA3NS41ODUuNDIzIDEuMzU0LjMyIDEuOTY2LTIuMzY0IDE0LjA4LTYuMzc3IDMzLjEwNC04Ljc0NCA0Ni42NzctLjExNi42NjYtMS4yMzQgMS4wMDktMS40NTggMi42OTEtLjA0LjMwMi4yMTEgMS41MjUuMTEyIDEuNzk1LTYuODczIDE4Ljc0NC0xMC45NDkgNDcuODQyLTE0LjI3NyA2MS44ODVsMTQuNjA3LS4wMTRzMi4xOTctOC41NyA0LjAzLTE2Ljk3YzIuODExLTEyLjg4NiAyMy4xMTEtODUuMDEgMjMuMTExLTg1LjAxbDMuMDE2LS41MjEgMS4wNDMgNDYuMzVzLS4yMjQgMS4yMzQuMzM3IDIuMDJjLjU2Ljc4NS0uNTYgMS4xMjMtLjM5MiAyLjI0NGwuMzkyIDEuNzk0cy0uNDQ5IDcuMTc4LS44OTggMTEuODljLS40NDggNC43MS0uMDkyIDM5LjE2NS0uMDkyIDM5LjE2NVwiLFxuICAgIGZpbGw6IFwiIzdCQjJGOVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTc2LjA4NSAyMjEuNjI2YzEuMTUzLjA5NCA0LjAzOC0yLjAxOSA2Ljk1NS00LjkzNU0xMDYuMzYgMjI1LjE0MnMyLjc3NC0xLjExIDYuMTAzLTMuODgzXCIsXG4gICAgc3Ryb2tlOiBcIiM2NDhCRDhcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwNy4yNzUgMjIyLjFzMi43NzMtMS4xMSA2LjEwMi0zLjg4NFwiLFxuICAgIHN0cm9rZTogXCIjNjQ4QkQ4XCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzQuNzQgMjI0Ljc2N3MyLjYyMi0uNTkxIDYuNTA1LTMuMzY1TTg2LjAzIDE1MS42MzRjLS4yNyAzLjEwNi4zIDguNTI1LTQuMzM2IDkuMTIzTTEwMy42MjUgMTQ5Ljg4cy4xMSAxNC4wMTItMS4yOTMgMTUuMDY1Yy0yLjIxOSAxLjY2NC0yLjk5IDEuOTQ0LTIuOTkgMS45NDRNOTkuNzkgMTUwLjQzOHMuMDM1IDEyLjg4LTEuMTk2IDI0LjM3N005My42NzMgMTc1LjkxMXM3LjIxMi0xLjY2NCA5LjQzMS0xLjY2NE03NC4zMSAyMDUuODYxYTIxMi4wMTMgMjEyLjAxMyAwIDAgMS0uOTc5IDQuNTZzLTEuNDU4IDEuODMyLTEuMDA5IDMuNzc2Yy40NDkgMS45NDQtLjk0NyAyLjA0NS00Ljk4NSAxNS4zNTUtMS42OTYgNS41OS00LjQ5IDE4LjU5MS02LjM0OCAyNy41OTdsLS4yMzEgMS4xMk03NS42ODkgMTk3LjgwN2EzMjAuOTM0IDMyMC45MzQgMCAwIDEtLjg4MiA0Ljc1NE04Mi41OTEgMTUyLjIzM0w4MS4zOTUgMTYyLjdzLTEuMDk3LjE1LS41IDIuMjQ0Yy4xMTMgMS4zNDYtMi42NzQgMTUuNzc1LTUuMTggMzAuNDNNNTYuMTIgMjc0LjQxOGgxMy4zMVwiLFxuICAgIHN0cm9rZTogXCIjNjQ4QkQ4XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wNTFcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMTYuMjQxIDE0OC4yMnMtMTcuMDQ3LTMuMTA0LTM1Ljg5My4yYy4xNTggMi41MTQtLjAwMyA0LjE1LS4wMDMgNC4xNXMxNC42ODctMi44MTggMzUuNjctLjMxMmMuMjUyLTIuMzU1LjIyNi00LjAzOC4yMjYtNC4wMzhcIixcbiAgICBmaWxsOiBcIiMxOTIwNjRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDYuMzIyIDE1MS4xNjVsLjAwMy00LjkxMWEuODEuODEgMCAwIDAtLjc3OC0uODE1Yy0yLjQ0LS4wOTEtNS4wNjYtLjEwOC03LjgzNi0uMDE0YS44MTguODE4IDAgMCAwLS43ODkuODE1bC0uMDAzIDQuOTA2YS44MS44MSAwIDAgMCAuODMxLjgxM2MyLjM4NS0uMDYgNC45NzMtLjA2NCA3LjczLjAxN2EuODE1LjgxNSAwIDAgMCAuODQyLS44MVwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwNS4yMDcgMTUwLjIzM2wuMDAyLTMuMDc2YS42NDIuNjQyIDAgMCAwLS42MTktLjY0NiA5NC4zMjEgOTQuMzIxIDAgMCAwLTUuODY2LS4wMS42NS42NSAwIDAgMC0uNjMuNjQ3djMuMDcyYS42NC42NCAwIDAgMCAuNjU0LjY0NCAxMjEuMTIgMTIxLjEyIDAgMCAxIDUuNzk0LjAxMWMuMzYyLjAxLjY2NS0uMjguNjY1LS42NDJcIixcbiAgICBmaWxsOiBcIiMxOTIwNjRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDAuMjYzIDI3NS40MTVoMTIuMzM4TTEwMS40MzYgMjcwLjUzYy4wMDYgMy4zODcuMDQyIDUuNzkuMTExIDYuNTA2TTEwMS40NTEgMjY0LjU0OGE5MTUuNzUgOTE1Ljc1IDAgMCAwLS4wMTUgNC4zMzdNMTAwLjk4NiAxNzQuOTY1bC44OTggNDQuNjQycy42NzMgMS41Ny0uMjI1IDIuNjkyYy0uODk3IDEuMTIyIDIuNDY4LjY3My44OTggMi4yNDMtMS41NyAxLjU3Ljg5NyAxLjEyMiAwIDMuMzY1LS41OTYgMS40ODktLjk5NCAyMS4xLTEuMDk2IDM1LjE0NlwiLFxuICAgIHN0cm9rZTogXCIjNjQ4QkQ4XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wNTFcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00Ni44NzYgODMuNDI3cy0uNTE2IDYuMDQ1IDcuMjIzIDUuNTUyYzExLjItLjcxMiA5LjIxOC05LjM0NSAzMS41NC0yMS42NTUtLjc4Ni0yLjcwOC0yLjQ0Ny00Ljc0NC0yLjQ0Ny00Ljc0NHMtMTEuMDY4IDMuMTEtMjIuNTg0IDguMDQ2Yy02Ljc2NiAyLjktMTMuMzk1IDYuMzUyLTEzLjczMiAxMi44MDFNMTA0LjQ2IDkxLjA1N2wuOTQxLTUuMzcyLTguODg0LTExLjQzLTUuMDM3IDUuMzcyLTEuNzQgNy44MzRhLjMyMS4zMjEgMCAwIDAgLjEwOC4zMmMuOTY1LjggNi41IDUuMDEzIDE0LjM0NyAzLjU0NGEuMzMyLjMzMiAwIDAgMCAuMjY0LS4yNjhcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05My45NDIgNzkuMzg3cy00LjUzMy0yLjg1My0yLjQzMi02Ljg1NWMxLjYyMy0zLjA5IDQuNTEzIDEuMTMzIDQuNTEzIDEuMTMzcy41Mi0zLjY0MiAzLjEyMS0zLjY0MmMuNTItMS4wNCAxLjU2MS00LjE2MiAxLjU2MS00LjE2MnMxMS40NDUgMi42MDEgMTMuNTI2IDMuMTIxYzAgNS4yMDMtMi4zMDQgMTkuNDI0LTcuODQgMTkuODYxLTguODkyLjcwMy0xMi40NDktOS40NTYtMTIuNDQ5LTkuNDU2XCIsXG4gICAgZmlsbDogXCIjRkZDNkEwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTEzLjg3NCA3My40NDZjMi42MDEtMi4wODEgMy40Ny05LjcyMiAzLjQ3LTkuNzIycy0yLjQ3OS0uNDktNi42NC0yLjA1Yy00LjY4My0yLjA4MS0xMi43OTgtNC43NDctMTcuNDguOTc2LTkuNjY4IDMuMjIzLTIuMDUgMTkuODIzLTIuMDUgMTkuODIzbDIuNzEzLTMuMDIxcy0zLjkzNS0zLjI4Ny0yLjA4LTYuMjQzYzIuMTctMy40NjIgMy45MiAxLjA3MyAzLjkyIDEuMDczcy42MzctMi4zODcgMy41ODEtMy4zNDJjLjM1NS0uNzEgMS4wMzYtMi42NzQgMS40MzItMy44NWExLjA3MyAxLjA3MyAwIDAgMSAxLjI2My0uNzA0YzIuNC41NTggOC42NzcgMi4wMTkgMTEuMzU2IDIuNjYyLjUyMi4xMjUuODcxLjYxNS44MiAxLjE1bC0uMzA1IDMuMjQ4elwiLFxuICAgIGZpbGw6IFwiIzUyMDAzOFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwNC45NzcgNzYuMDY0Yy0uMTAzLjYxLS41ODIgMS4wMzgtMS4wNy45NTYtLjQ4OS0uMDgzLS44MDEtLjY0NC0uNjk4LTEuMjU0LjEwMy0uNjEuNTgyLTEuMDM4IDEuMDctLjk1Ni40ODguMDgyLjguNjQ0LjY5OCAxLjI1NE0xMTIuMTMyIDc3LjY5NGMtLjEwMy42MS0uNTgyIDEuMDM4LTEuMDcuOTU2LS40ODgtLjA4My0uOC0uNjQ0LS42OTgtMS4yNTQuMTAzLS42MS41ODItMS4wMzggMS4wNy0uOTU2LjQ4OC4wODIuOC42NDMuNjk4IDEuMjU0XCIsXG4gICAgZmlsbDogXCIjNTUyOTUwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjExOFwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiLFxuICAgIGQ6IFwiTTExMC4xMyA3NC44NGwtLjg5NiAxLjYxLS4yOTggNC4zNTdoLTIuMjI4XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTEwLjg0NiA3NC40ODFzMS43OS0uNzE2IDIuNTA2LjUzN1wiLFxuICAgIHN0cm9rZTogXCIjNUMyNTUyXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMThcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05Mi4zODYgNzQuMjgycy40NzctMS4xMTQgMS4xMTMtLjcxNmMuNjM3LjM5OCAxLjI3NCAxLjQzMy41NTggMS45OS0uNzE3LjU1Ni4xNTkgMS42Ny4xNTkgMS42N1wiLFxuICAgIHN0cm9rZTogXCIjREI4MzZFXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMThcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDMuMjg3IDcyLjkzczEuODMgMS4xMTMgNC4xMzcuOTU0XCIsXG4gICAgc3Ryb2tlOiBcIiM1QzI1NTJcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjExOFwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwMy42ODUgODEuNzYyczIuMjI3IDEuMTkzIDQuMzc2IDEuMTkzTTEwNC42NCA4NC4zMDhzLjk1NC4zOTggMS41MTEuMzE4TTk0LjY5MyA4MS4yMDVzMi4zMDggNy40IDEwLjQyNCA3LjYzOVwiLFxuICAgIHN0cm9rZTogXCIjREI4MzZFXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMThcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk04MS40NSA4OS4zODRzLjQ1IDUuNjQ3LTQuOTM1IDEyLjc4N002OSA4Mi42NTRzLS43MjYgOS4yODItOC4yMDQgMTQuMjA2XCIsXG4gICAgc3Ryb2tlOiBcIiNFNEVCRjdcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjEwMVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEyOS40MDUgMTIyLjg2NXMtNS4yNzIgNy40MDMtOS40MjIgMTAuNzY4XCIsXG4gICAgc3Ryb2tlOiBcIiNFNEVCRjdcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTExOS4zMDYgMTA3LjMyOXMuNDUyIDQuMzY2LTIuMTI3IDMyLjA2MlwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMDFcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNTAuMDI4IDE1MS4yMzJoLTQ5LjgzN2ExLjAxIDEuMDEgMCAwIDEtMS4wMS0xLjAxdi0zMS42ODhjMC0uNTU3LjQ1Mi0xLjAxIDEuMDEtMS4wMWg0OS44MzdjLjU1OCAwIDEuMDEuNDUzIDEuMDEgMS4wMXYzMS42ODhhMS4wMSAxLjAxIDAgMCAxLTEuMDEgMS4wMVwiLFxuICAgIGZpbGw6IFwiI0YyRDdBRFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE1MC4yOSAxNTEuMjMyaC0xOS44NjN2LTMzLjcwN2gyMC43ODR2MzIuNzg2YS45Mi45MiAwIDAgMS0uOTIuOTJcIixcbiAgICBmaWxsOiBcIiNGNEQxOURcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMjMuNTU0IDEyNy44OTZIOTIuOTE3YS41MTguNTE4IDAgMCAxLS40MjUtLjgxNmw2LjM4LTkuMTEzYy4xOTMtLjI3Ny41MS0uNDQyLjg1LS40NDJoMzEuMDkybC03LjI2IDEwLjM3MXpcIixcbiAgICBmaWxsOiBcIiNGMkQ3QURcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsOiBcIiNDQzlCNkVcIixcbiAgICBkOiBcIk0xMjMuNjg5IDEyOC40NDdIOTkuMjV2LS41MTloMjQuMTY5bDcuMTgzLTEwLjI2LjQyNC4yOTh6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTU4LjI5OCAxMjcuODk2aC0xOC42NjlhMi4wNzMgMi4wNzMgMCAwIDEtMS42NTktLjgzbC03LjE1Ni05LjU0MWgxOS45NjVjLjQ5IDAgLjk1LjIzIDEuMjQ0LjYyMmw2LjY5IDguOTJhLjUxOS41MTkgMCAwIDEtLjQxNS44M1wiLFxuICAgIGZpbGw6IFwiI0Y0RDE5RFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGZpbGw6IFwiI0NDOUI2RVwiLFxuICAgIGQ6IFwiTTE1Ny44NDcgMTI4LjQ3OWgtMTkuMzg0bC03Ljg1Ny0xMC40NzUuNDE1LS4zMSA3LjcgMTAuMjY2aDE5LjEyNnpNMTMwLjU1NCAxNTAuNjg1bC0uMDMyLTguMTc3LjUxOS0uMDAyLjAzMiA4LjE3N3pcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsOiBcIiNDQzlCNkVcIixcbiAgICBkOiBcIk0xMzAuNTExIDEzOS43ODNsLS4wOC0yMS40MTQuNTE5LS4wMDIuMDggMjEuNDE0ek0xMTEuODc2IDE0MC45MzJsLS40OTgtLjE0MyAxLjQ3OS01LjE2Ny40OTguMTQzek0xMDguNDM3IDE0MS4wNmwtMi42NzktMi45MzUgMi42NjUtMy40MzQuNDEuMzE4LTIuMzk3IDMuMDg5IDIuMzg0IDIuNjEyek0xMTYuNjA3IDE0MS4wNmwtLjM4My0uMzUgMi4zODMtMi42MTItMi4zOTctMy4wODkuNDEtLjMxOCAyLjY2NSAzLjQzNHpcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNTQuMzE2IDEzMS44OTJsLTMuMTE0LTEuOTYuMDM4IDMuNTE0LTEuMDQzLjA5MmMtMS42ODIuMTE1LTMuNjM0LjIzLTQuNzg5LjIzLTEuOTAyIDAtMi42OTMgMi4yNTggMi4yMyAyLjY0OGwtMi42NDUtLjU5NnMtMi4xNjggMS4zMTcuNTA0IDIuM2MwIDAtMS41OCAxLjIxNy41NjEgMi41OC0uNTg0IDMuNTA0IDUuMjQ3IDQuMDU4IDcuMTIyIDMuNTkgMS44NzYtLjQ3IDQuMjMzLTIuMzU5IDQuNDg3LTUuMTYuMjgtMy4wODUtLjg5LTUuNDMyLTMuMzUtNy4yMzhcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNTMuNjg2IDEzMy41NzdzLTYuNTIyLjQ3LTguMzYuMzcyYy0xLjgzNi0uMDk4LTEuOTA0IDIuMTkgMi4zNTkgMi4yNjQgMy43MzkuMTUgNS40NTEtLjA0NCA1LjQ1MS0uMDQ0XCIsXG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE0NS4xNiAxMzUuODc3Yy0xLjg1IDEuMzQ2LjU2MSAyLjM1NS41NjEgMi4zNTVzMy40NzguODk4IDYuNzMuNjE3XCIsXG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE1MS44OSAxNDEuNzFzLTYuMjguMTExLTYuNzMtMi4xMzJjLS4yMjMtMS4zNDYuNDUtMS40MDIuNDUtMS40MDJNMTQ2LjExNCAxNDAuODY4cy0xLjEwMyAzLjE2IDUuNDQgMy41MzNNMTUxLjIwMiAxMjkuOTMydjMuNDc3TTUyLjgzOCA4OS4yODZjMy41MzMtLjMzNyA4LjQyMy0xLjI0OCAxMy41ODItNy43NTRcIixcbiAgICBzdHJva2U6IFwiI0RCODM2RVwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjEuMDUxXCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTY4LjU2NyAyNDguMzE4YTYuNjQ3IDYuNjQ3IDAgMCAxLTYuNjQ3LTYuNjQ3di02Ni40NjZhNi42NDcgNi42NDcgMCAxIDEgMTMuMjk0IDB2NjYuNDY2YTYuNjQ3IDYuNjQ3IDAgMCAxLTYuNjQ3IDYuNjQ3XCIsXG4gICAgZmlsbDogXCIjNUJBMDJFXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTc2LjU0MyAyNDcuNjUzYTYuNjQ3IDYuNjQ3IDAgMCAxLTYuNjQ2LTYuNjQ3di0zMy4yMzJhNi42NDcgNi42NDcgMCAxIDEgMTMuMjkzIDB2MzMuMjMyYTYuNjQ3IDYuNjQ3IDAgMCAxLTYuNjQ3IDYuNjQ3XCIsXG4gICAgZmlsbDogXCIjOTJDMTEwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTg2LjQ0MyAyOTMuNjEzSDE1OC45MmEzLjE4NyAzLjE4NyAwIDAgMS0zLjE4Ny0zLjE4N3YtNDYuMTM0YTMuMTg3IDMuMTg3IDAgMCAxIDMuMTg3LTMuMTg3aDI3LjUyNGEzLjE4NyAzLjE4NyAwIDAgMSAzLjE4NyAzLjE4N3Y0Ni4xMzRhMy4xODcgMy4xODcgMCAwIDEtMy4xODcgMy4xODdcIixcbiAgICBmaWxsOiBcIiNGMkQ3QURcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk04OC45NzkgODkuNDhzNy43NzYgNS4zODQgMTYuNiAyLjg0MlwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMDFcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IE5vRm91bmQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFNlcnZlckVycm9yID0gZnVuY3Rpb24gU2VydmVyRXJyb3IoKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgd2lkdGg6IFwiMjU0XCIsXG4gICAgaGVpZ2h0OiBcIjI5NFwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGVmc1wiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTAgLjMzNWgyNTMuNDl2MjUzLjQ5SDB6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMCAyOTMuNjY1aDI1My40OVYuNDAxSDB6XCJcbiAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoMCAuMDY3KVwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibWFza1wiLCB7XG4gICAgZmlsbDogXCIjZmZmXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMCAxMjguMTM0di0yLjExQzAgNTYuNjA4IDU2LjI3My4zMzQgMTI1LjY5LjMzNGgyLjExYzY5LjQxNiAwIDEyNS42OSA1Ni4yNzQgMTI1LjY5IDEyNS42OXYyLjExYzAgNjkuNDE3LTU2LjI3NCAxMjUuNjktMTI1LjY5IDEyNS42OWgtMi4xMUM1Ni4yNzMgMjUzLjgyNCAwIDE5Ny41NTEgMCAxMjguMTM0XCIsXG4gICAgZmlsbDogXCIjRTRFQkY3XCIsXG4gICAgbWFzazogXCJ1cmwoI2IpXCJcbiAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTM5Ljk4OSAxMzIuMTA4YTguMzMyIDguMzMyIDAgMSAxLTE2LjU4MS0xLjY3MSA4LjMzMiA4LjMzMiAwIDAgMSAxNi41OCAxLjY3MVwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTM3LjE5IDEzNS41OWwxMC41NTMgNS45ODNNNDguNjY1IDE0Ny44ODRsLTEyLjczNCAxMC44NjFcIixcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00MC4xMSAxNjAuODE2YTUuNzA2IDUuNzA2IDAgMSAxLTExLjM1NC0xLjE0NSA1LjcwNiA1LjcwNiAwIDAgMSAxMS4zNTQgMS4xNDVNNTcuOTQzIDE0NC42YTUuNzQ3IDUuNzQ3IDAgMSAxLTExLjQzNi0xLjE1MiA1Ljc0NyA1Ljc0NyAwIDAgMSAxMS40MzYgMS4xNTNNOTkuNjU2IDI3LjQzNGwzMC4wMjQtLjAxM2E0LjYxOSA0LjYxOSAwIDEgMC0uMDA0LTkuMjM4bC0zMC4wMjQuMDEzYTQuNjIgNC42MiAwIDAgMCAuMDA0IDkuMjM4TTExMS4xNCA0NS44OTZsMzAuMDIzLS4wMTNhNC42MiA0LjYyIDAgMSAwLS4wMDQtOS4yMzhsLTMwLjAyNC4wMTNhNC42MTkgNC42MTkgMCAxIDAgLjAwNCA5LjIzOFwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTExMy41MyAyNy40MjF2LS4wMDJsMTUuODktLjAwN2E0LjYxOSA0LjYxOSAwIDEgMCAuMDA1IDkuMjM4bC0xNS44OTIuMDA3di0uMDAyYTQuNjE4IDQuNjE4IDAgMCAwLS4wMDQtOS4yMzRNMTUwLjE2NyA3MC4wOTFoLTMuOTc5YTQuNzg5IDQuNzg5IDAgMCAxLTQuNzc0LTQuNzc1IDQuNzg4IDQuNzg4IDAgMCAxIDQuNzc0LTQuNzc0aDMuOTc5YTQuNzg5IDQuNzg5IDAgMCAxIDQuNzc1IDQuNzc0IDQuNzg5IDQuNzg5IDAgMCAxLTQuNzc1IDQuNzc1XCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTcxLjY4NyAzMC4yMzRjMC0xNi4zOTIgMTMuMjg5LTI5LjY4IDI5LjY4MS0yOS42OCAxNi4zOTIgMCAyOS42OCAxMy4yODggMjkuNjggMjkuNjggMCAxNi4zOTMtMTMuMjg4IDI5LjY4MS0yOS42OCAyOS42ODFzLTI5LjY4LTEzLjI4OC0yOS42OC0yOS42OFwiLFxuICAgIGZpbGw6IFwiI0ZGNjAzQlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTIwMy41NTcgMTkuNDM1bC0uNjc2IDE1LjAzNWExLjUxNCAxLjUxNCAwIDAgMS0zLjAyNiAwbC0uNjc1LTE1LjAzNWEyLjE5IDIuMTkgMCAxIDEgNC4zNzcgMG0tLjI2NCAxOS4zNzhjLjUxMy40NzcuNzcgMS4xLjc3IDEuODdzLS4yNTcgMS4zOTMtLjc3IDEuOTA3Yy0uNTUuNDc2LTEuMjEuNzMzLTEuOTQzLjczM2EyLjU0NSAyLjU0NSAwIDAgMS0xLjg3LS43N2MtLjU1LS41MTQtLjgwNi0xLjEzNi0uODA2LTEuODcgMC0uNzcuMjU2LTEuMzkzLjgwNi0xLjg3LjUxMy0uNTEzIDEuMTM3LS43MzMgMS44Ny0uNzMzLjc3IDAgMS40My4yMiAxLjk0My43MzNcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMTkuMyAxMzMuMjc1YzQuNDI2LS41OTggMy42MTItMS4yMDQgNC4wNzktNC43NzguNjc1LTUuMTgtMy4xMDgtMTYuOTM1LTguMjYyLTI1LjExOC0xLjA4OC0xMC43Mi0xMi41OTgtMTEuMjQtMTIuNTk4LTExLjI0czQuMzEyIDQuODk1IDQuMTk2IDE2LjE5OWMxLjM5OCA1LjI0My44MDQgMTQuNDUuODA0IDE0LjQ1czUuMjU1IDExLjM2OSAxMS43OCAxMC40ODdcIixcbiAgICBmaWxsOiBcIiNGRkI1OTRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDAuOTQ0IDkxLjYxczEuNDYzLS41ODMgMy4yMTEuNTgyYzguMDggMS4zOTggMTAuMzY4IDYuNzA2IDExLjMgMTEuMzY4IDEuODY0IDEuMjgyIDEuODY0IDIuMzMgMS44NjQgMy40OTYuMzY1Ljc3NyAxLjUxNSAzLjAzIDEuNTE1IDMuMDNzLTcuMjI1IDEuNzQ4LTEwLjk1NCA2Ljc1OGMtMS4zOTktNi40MS02LjkzNi0yNS4yMzUtNi45MzYtMjUuMjM1XCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOTQuMDA4IDkwLjVsMS4wMTktNS44MTUtOS4yMy0xMS44NzQtNS4yMzMgNS41ODEtMi41OTMgOS44NjNzOC4zOSA1LjEyOCAxNi4wMzcgMi4yNDZcIixcbiAgICBmaWxsOiBcIiNGRkI1OTRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk04Mi45MzEgNzguMjE2cy00LjU1Ny0yLjg2OC0yLjQ0NS02Ljg5MmMxLjYzMi0zLjEwNyA0LjUzNyAxLjEzOSA0LjUzNyAxLjEzOXMuNTI0LTMuNjYyIDMuMTM5LTMuNjYyYy41MjMtMS4wNDYgMS41NjktNC4xODQgMS41NjktNC4xODRzMTEuNTA3IDIuNjE1IDEzLjYgMy4xMzhjLS4wMDEgNS4yMy0yLjMxNyAxOS41MjktNy44ODQgMTkuOTY5LTguOTQuNzA2LTEyLjUxNi05LjUwOC0xMi41MTYtOS41MDhcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDIuOTcxIDcyLjI0M2MyLjYxNi0yLjA5MyAzLjQ4OS05Ljc3NSAzLjQ4OS05Ljc3NXMtMi40OTItLjQ5Mi02LjY3Ni0yLjA2MmMtNC43MDgtMi4wOTItMTIuODY3LTQuNzcxLTE3LjU3NS45ODItOS41NCA0LjQxLTIuMDYyIDE5LjkzLTIuMDYyIDE5LjkzbDIuNzI5LTMuMDM3cy0zLjk1Ni0zLjMwNC0yLjA5Mi02LjI3N2MyLjE4My0zLjQ4IDMuOTQzIDEuMDggMy45NDMgMS4wOHMuNjQtMi40IDMuNi0zLjM2Yy4zNTYtLjcxNCAxLjA0LTIuNjkgMS40NC0zLjg3MmExLjA4IDEuMDggMCAwIDEgMS4yNy0uNzA3YzIuNDEuNTYgOC43MjMgMi4wMyAxMS40MTcgMi42NzYuNTI0LjEyNi44NzYuNjE5LjgyNSAxLjE1NmwtLjMwOCAzLjI2NnpcIixcbiAgICBmaWxsOiBcIiM1MjAwMzhcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDEuMjIgNzYuNTE0Yy0uMTA0LjYxMy0uNTg1IDEuMDQ0LTEuMDc2Ljk2LS40OS0uMDgyLS44MDUtLjY0Ni0uNzAyLTEuMjYuMTA0LS42MTMuNTg1LTEuMDQ0IDEuMDc2LS45NjEuNDkxLjA4My44MDUuNjQ3LjcwMiAxLjI2TTk0LjI2IDc1LjA3NGMtLjEwNC42MTMtLjU4NSAxLjA0NC0xLjA3Ni45Ni0uNDktLjA4Mi0uODA1LS42NDYtLjcwMi0xLjI2LjEwNC0uNjEzLjU4NS0xLjA0NCAxLjA3Ni0uOTYuNDkxLjA4Mi44MDUuNjQ2LjcwMiAxLjI2XCIsXG4gICAgZmlsbDogXCIjNTUyOTUwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA2M1wiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiLFxuICAgIGQ6IFwiTTk5LjIwNiA3My42NDRsLS45IDEuNjItLjMgNC4zOGgtMi4yNFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTk5LjkyNiA3My4yODRzMS44LS43MiAyLjUyLjU0XCIsXG4gICAgc3Ryb2tlOiBcIiM1QzI1NTJcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjExN1wiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTgxLjM2NyA3My4wODRzLjQ4LTEuMTIgMS4xMi0uNzJjLjY0LjQgMS4yOCAxLjQ0LjU2IDJzLjE2IDEuNjguMTYgMS42OFwiLFxuICAgIHN0cm9rZTogXCIjREI4MzZFXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMTdcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05Mi4zMjYgNzEuNzI0czEuODQgMS4xMiA0LjE2Ljk2XCIsXG4gICAgc3Ryb2tlOiBcIiM1QzI1NTJcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjExN1wiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTkyLjcyNiA4MC42MDRzMi4yNCAxLjIgNC40IDEuMk05My42ODYgODMuMTY0cy45Ni40IDEuNTIuMzJNODMuNjg3IDgwLjA0NHMxLjc4NiA2LjU0NyA5LjI2MiA3Ljk1NFwiLFxuICAgIHN0cm9rZTogXCIjREI4MzZFXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wNjNcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05NS41NDggOTEuNjYzcy0xLjA2OCAyLjgyMS04LjI5OCAyLjEwNWMtNy4yMy0uNzE3LTEwLjI5LTUuMDQ0LTEwLjI5LTUuMDQ0XCIsXG4gICAgc3Ryb2tlOiBcIiNFNEVCRjdcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjEzNlwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTc4LjEyNiA4Ny40NzhzNi41MjYgNC45NzIgMTYuNDcgMi40ODZjMCAwIDkuNTc3IDEuMDIgMTEuNTM2IDUuMzIyIDUuMzYgMTEuNzcuNTQzIDM2LjgzNSAwIDM5Ljk2MiAzLjQ5NiA0LjA1NS0uNDY2IDguNDgzLS40NjYgOC40ODMtMTUuNjI0LTMuNTQ4LTM1LjgxLS42LTM1LjgxLS42LTQuODQ5LTMuNTQ2LTEuMjIzLTkuMDQ0LTEuMjIzLTkuMDQ0TDYyLjM4IDExMC4zMmMtMi40ODUtMTUuMjI3LjgzMy0xOS44MDMgMy41NDktMjAuNzQzIDMuMDMtMS4wNDkgOC4wNC0xLjI4MiA4LjA0LTEuMjgyLjQ5Ni0uMDU4IDEuMDgtLjA3NiAxLjM3LS4yMzMgMi4zNi0xLjI4MiAyLjc4Ny0uNTgzIDIuNzg3LS41ODNcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk02NS44MjggODkuODFzLTYuODc1LjQ2NS03LjU5IDguMTU2Yy0uNDY2IDguODU3IDMuMDMgMTAuOTU0IDMuMDMgMTAuOTU0czYuMDc1IDIyLjEwMiAxNi43OTYgMjIuOTU3YzguMzktMi4xNzYgNC43NTgtNi43MDIgNC42NjEtMTEuNDItLjIzMy0xMS4zMDQtNy4xMDgtMTYuODk3LTcuMTA4LTE2Ljg5N3MtNC4yMTItMTMuNzUtOS43ODktMTMuNzVcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk03MS43MTYgMTI0LjIyNXMuODU1IDExLjI2NCA5LjgyOCA2LjQ4NmM0Ljc2NS0yLjUzNiA3LjU4MS0xMy44MjggOS43ODktMjIuNTY4IDEuNDU2LTUuNzY4IDIuNTgtMTIuMTk3IDIuNTgtMTIuMTk3bC00Ljk3My0xLjcwOXMtMi40MDggNS41MTYtNy43NjkgMTIuMjc1Yy00LjMzNSA1LjQ2Ny05LjE0NCAxMS4xMS05LjQ1NSAxNy43MTNcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDguNDYzIDEwNS4xOTFzMS43NDcgMi43MjQtMi4zMzEgMzAuNTM1YzIuMzc2IDIuMjE2IDEuMDUzIDYuMDEyLS4yMzMgNy41MVwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wODVcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMjMuMjYyIDEzMS41MjdzLS40MjcgMi43MzItMTEuNzcgMS45ODFjLTE1LjE4Ny0xLjAwNi0yNS4zMjYtMy4yNS0yNS4zMjYtMy4yNWwuOTMzLTUuOHMuNzIzLjIxNSA5LjcxLS4wNjhjMTEuODg3LS4zNzMgMTguNzE0LTYuMDcgMjQuOTY0LTEuMDIyIDQuMDM5IDMuMjYzIDEuNDg5IDguMTYgMS40ODkgOC4xNlwiLFxuICAgIGZpbGw6IFwiI0ZGQzZBMFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTcwLjI0IDkwLjk3NHMtNS41OTMtNC43MzktMTEuMDU0IDIuNjhjLTMuMzE4IDcuMjIzLjUxNyAxNS4yODQgMi42NjQgMTkuNTc4LS4zMSAzLjcyOSAyLjMzIDQuMzExIDIuMzMgNC4zMTFzLjEwOC44OTUgMS41MTYgMi42OGM0LjA3OC03LjAzIDYuNzItOS4xNjYgMTMuNzExLTEyLjU0Ni0uMzI4LS42NTYtMS44NzctMy4yNjUtMS44MjUtMy43NjcuMTc1LTEuNjktMS4yODItMi42MjMtMS4yODItMi42MjNzLS4yODYtLjE1Ni0xLjE2NS0yLjczOGMtLjc4OC0yLjMxMy0yLjAzNi01LjE3Ny00Ljg5NS03LjU3NVwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTkwLjIzMiAyODguMDI3czQuODU1IDIuMzA4IDguMzEzIDEuMTU1YzMuMTg4LTEuMDYzIDUuMTIuNzU1IDguMDAyIDEuMzMxIDIuODgxLjU3NyA3Ljc2OSAxLjI0MyAxMy4yMDctMS40MjQtLjExNy02LjIyOC03Ljc4Ni00LjQ5OS0xMy41MTgtNy41ODgtMi44OTUtMS41Ni00LjI3Ni01LjMzNi00LjA2Ni05Ljk0NEg5MS41NDRzLTEuNTczIDExLjg5LTEuMzEyIDE2LjQ3XCIsXG4gICAgZmlsbDogXCIjQ0JEMUQxXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOTAuMjA3IDI4Ny44MzNzMi43NDUgMS40MzcgNy42MzkuNzM4YzMuNDU2LS40OTQgMy4yMjMuNjYgNy40MTggMS4yODIgNC4xOTUuNjIxIDEzLjA5Mi0uMTk0IDE0LjMzNC0xLjEyNi40NjYgMS4yNDItLjM4OCAyLjMzLS4zODggMi4zM3MtMS43MDkuNjgyLTUuNDM4LjkzMmMtMi4yOTUuMTU0LTguMDk4LjI3Ni0xMC4xNC0uNjIxLTIuMDItMS41NTQtNC44OTQtMS41MTUtNi4wNi0uMjM0LTQuNDI3IDEuMDc1LTcuMTg0LS4zMS03LjE4NC0uMzFsLS4xODEtMi45OTF6XCIsXG4gICAgZmlsbDogXCIjMkIwODQ5XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOTguNDI5IDI3Mi4yNTdoMy40OTZzLS4xMTcgNy41NzQgNS4xMjcgOS42NzFjLTUuMjQ0LjctOS42NzItMi42MDItOC42MjMtOS42NzFcIixcbiAgICBmaWxsOiBcIiNBNEFBQkFcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00NC40MjUgMjcyLjA0NnMtMi4yMDggNy43NzQtNC43MDIgMTIuODk5Yy0xLjg4NCAzLjg3NC00LjQyOCA3Ljg1NCA1LjcyOSA3Ljg1NCA2Ljk3IDAgOS4zODUtLjUwMyA3Ljc4Mi02LjkxNy0xLjYwNC02LjQxNS4yNzktMTMuODM2LjI3OS0xMy44MzZoLTkuMDg4elwiLFxuICAgIGZpbGw6IFwiI0NCRDFEMVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTM4LjA2NiAyOTAuMjc3czIuMTk4IDEuMjI1IDYuOTU0IDEuMjI1YzYuMzc2IDAgOC42NDYtMS43MyA4LjY0Ni0xLjczcy42MyAxLjE2OC0uNjQ5IDIuMjdjLTEuMDQuODk3LTMuNzcgMS42NjgtNy43NDUgMS42MjEtNC4zNDctLjA1LTYuMTE1LS41OTMtNy4wNjItMS4yMjQtLjg2NC0uNTc3LS43Mi0xLjY1Ny0uMTQ0LTIuMTYyXCIsXG4gICAgZmlsbDogXCIjMkIwODQ5XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNDUuMzQ0IDI3NC4wNDFzLjAzNSAxLjU5Mi0uMzI5IDMuMDdjLS4zNjUgMS40OS0xLjEzIDMuMjU1LTEuMTg0IDQuMzQtLjA2MSAxLjIwNiA0Ljc1NSAxLjY1NyA1LjQwMy4wMzYuNjUtMS42MjIgMS4zNTctNi43MzcgMi4wMDYtNy42MDIuNjQ4LS44NjUtNS4xNC0yLjIyMi01Ljg5Ni4xNTZcIixcbiAgICBmaWxsOiBcIiNBNEFBQkFcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk04OS40NzYgMjc3LjU3bDEzLjg5OS4wOTVzMS4zNDktNTYuNjQzIDEuOTI1LTY2LjkwOWMuNTc2LTEwLjI2NyAzLjkyMy00NS4wNTIgMS4wNDItNjUuNTg1bC0xMy4wMzctLjY2OS0yMy43MzcuODFzLS40NTIgNC4xMi0xLjI0MyAxMC4zNjVjLS4wNjUuNTE1LS43MDguODc0LS43NzcgMS40MTctLjA3OC42MDguNDM5IDEuNDA3LjMzMiAyLjA0NC0yLjQ1NSAxNC42MjctNS43OTcgMzIuNzM2LTguMjU2IDQ2LjgzNy0uMTIxLjY5My0xLjI4MiAxLjA0OC0xLjUxNSAyLjc5Ni0uMDQyLjMxNC4yMiAxLjU4NC4xMTYgMS44NjUtNy4xNCAxOS40NzMtMTIuMjAyIDUyLjYwMS0xNS42NiA2Ny4xOWwxNS4xNzYtLjAxNXMyLjI4Mi0xMC4xNDUgNC4xODUtMTguODcxYzIuOTIyLTEzLjM4OSAyNC4wMTItODguMzIgMjQuMDEyLTg4LjMybDMuMTMzLS45NTQtLjE1OCA0OC41NjhzLS4yMzMgMS4yODIuMzUgMi4wOThjLjU4My44MTUtLjU4MSAxLjE2Ny0uNDA4IDIuMzMxbC40MDggMS44NjRzLS40NjYgNy40NTgtLjkzMiAxMi4zNTJjLS40NjcgNC44OTUgMS4xNDUgNDAuNjkgMS4xNDUgNDAuNjlcIixcbiAgICBmaWxsOiBcIiM3QkIyRjlcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk02NC41NyAyMTguODgxYzEuMTk3LjA5OSA0LjE5NS0yLjA5NyA3LjIyNS01LjEyN005Ni4wMjQgMjIyLjUzNHMyLjg4MS0xLjE1MiA2LjM0LTQuMDM0XCIsXG4gICAgc3Ryb2tlOiBcIiM2NDhCRDhcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA4NVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTk2Ljk3MyAyMTkuMzczczIuODgyLTEuMTUzIDYuMzQtNC4wMzRcIixcbiAgICBzdHJva2U6IFwiIzY0OEJEOFwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjEuMDMyXCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNjMuMTcyIDIyMi4xNDRzMi43MjQtLjYxNCA2Ljc1OS0zLjQ5Nk03NC45MDMgMTQ2LjE2NmMtLjI4MSAzLjIyNi4zMSA4Ljg1Ni00LjUwNiA5LjQ3OE05My4xODIgMTQ0LjM0NHMuMTE1IDE0LjU1Ny0xLjM0NCAxNS42NWMtMi4zMDUgMS43My0zLjEwNyAyLjAyLTMuMTA3IDIuMDJNODkuMTk3IDE0NC45MjNzLjI2OSAxMy4xNDQtMS4wMSAyNS4wODhNODMuNTI1IDE3MC43MXM2LjgxLTEuMDUxIDkuMTE2LTEuMDUxTTQ2LjAyNiAyNzAuMDQ1bC0uODkyIDQuNTM4TTQ2LjkzNyAyNjMuMjg5bC0uODE1IDQuMTU3TTYyLjcyNSAyMDIuNTAzYy0uMzMgMS42MTgtLjEwMiAxLjkwNC0uNDQ5IDMuNDM4IDAgMC0yLjc1NiAxLjkwMy0yLjI5IDMuOTIzLjQ2NiAyLjAyLS4zMSAzLjQyNC00LjUwNSAxNy4yNTItMS43NjIgNS44MDctNC4yMzMgMTguOTIyLTYuMTY1IDI4LjI3OC0uMDMuMTQ0LS41MjEgMi42NDYtMS4xNCA1LjhNNjQuMTU4IDE5NC4xMzZjLS4yOTUgMS42NTgtLjYgMy4zMS0uOTE3IDQuOTM4TTcxLjMzIDE0Ni43ODdsLTEuMjQ0IDEwLjg3N3MtMS4xNC4xNTUtLjUxOSAyLjMzYy4xMTcgMS4zOTktMi43NzggMTYuMzktNS4zODIgMzEuNjE1TTQ0LjI0MiAyNzMuNzI3SDU4LjA3XCIsXG4gICAgc3Ryb2tlOiBcIiM2NDhCRDhcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA4NVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwNi4xOCAxNDIuMTE3Yy0zLjAyOC0uNDg5LTE4LjgyNS0yLjc0NC0zNi4yMTkuMmEuNjI1LjYyNSAwIDAgMC0uNTE4LjY0NGMuMDYzIDEuMzA3LjA0NCAyLjM0My4wMTUgMi45OTVhLjYxNy42MTcgMCAwIDAgLjcxNi42MzZjMy4zMDMtLjUzNCAxNy4wMzctMi40MTIgMzUuNjY0LS4yNjYuMzQ3LjA0LjY2LS4yMTQuNjkyLS41Ni4xMjQtMS4zNDcuMTYtMi40MjUuMTctMy4wMjlhLjYxNi42MTYgMCAwIDAtLjUyLS42MlwiLFxuICAgIGZpbGw6IFwiIzE5MjA2NFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTk2LjM5OCAxNDUuMjY0bC4wMDMtNS4xMDJhLjg0My44NDMgMCAwIDAtLjgwOS0uODQ3IDExNC4xMDQgMTE0LjEwNCAwIDAgMC04LjE0MS0uMDE0Ljg1Ljg1IDAgMCAwLS44Mi44NDdsLS4wMDMgNS4wOTdjMCAuNDc2LjM4OC44NTcuODY0Ljg0NSAyLjQ3OC0uMDY0IDUuMTY2LS4wNjcgOC4wMy4wMTdhLjg0OC44NDggMCAwIDAgLjg3Ni0uODQzXCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOTUuMjM5IDE0NC4yOTZsLjAwMi0zLjE5NWEuNjY3LjY2NyAwIDAgMC0uNjQzLS42NzJjLTEuOS0uMDYxLTMuOTQxLS4wNzMtNi4wOTQtLjAxYS42NzUuNjc1IDAgMCAwLS42NTQuNjcybC0uMDAyIDMuMTkyYzAgLjM3Ni4zMDUuNjc3LjY4LjY2OSAxLjg1OS0uMDQyIDMuODc0LS4wNDMgNi4wMi4wMTIuMzc2LjAxLjY5LS4yOTEuNjkxLS42NjhcIixcbiAgICBmaWxsOiBcIiMxOTIwNjRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05MC4xMDIgMjczLjUyMmgxMi44MTlNOTEuMjE2IDI2OS43NjFjLjAwNiAzLjUxOS0uMDcyIDUuNTUgMCA2LjI5Mk05MC45MjMgMjYzLjQ3NGMtLjAwOSAxLjU5OS0uMDE2IDIuNTU4LS4wMTYgNC41MDVNOTAuNDQgMTcwLjQwNGwuOTMyIDQ2LjM4cy43IDEuNjMxLS4yMzMgMi43OTZjLS45MzIgMS4xNjYgMi41NjQuNy45MzIgMi4zMy0xLjYzIDEuNjMzLjkzMyAxLjE2NiAwIDMuNDk3LS42MTggMS41NDYtMS4wMzEgMjEuOTIxLTEuMTM4IDM2LjUxM1wiLFxuICAgIHN0cm9rZTogXCIjNjQ4QkQ4XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wODVcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk03My43MzYgOTguNjY1bDIuMjE0IDQuMzEyczIuMDk4LjgxNiAxLjg2NSAyLjY4bC44MTYgMi4yMTRNNjQuMjk3IDExNi42MTFjLjIzMy0uOTMyIDIuMTc2LTcuMTQ3IDEyLjU4NS0xMC40ODhNNzcuNTk4IDkwLjA0MnM3LjY5MSA2LjEzNyAxNi41NDcgMi43MlwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wODVcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05MS45NzQgODYuOTU0czUuNDc2LS44MTYgNy41NzQtNC41NDVjMS4yOTctLjM0NS43MiAyLjIxMi0uMzMgMy42NzEtLjcuOTcxLTEuMDEgMS41NTQtMS4wMSAxLjU1NHMuMTk0LjMxLjE1NS44MTZjLS4wNTMuNjk3LS4xNzUuNjUzLS4yNzIgMS4wNDgtLjA4MS4zMzUuMTA4LjY1NyAwIDEuMDQ5LS4wNDYuMTctLjE5OC41LS4zODIuODc4LS4xMi4yNDktLjA3Mi42ODctLjIuOTQ4LS4yMzEuNDY5LTEuNTYyIDEuODctMi42MjIgMi44NTUtMy44MjYgMy41NTQtNS4wMTggMS42NDQtNi4wMDEtLjQwOC0uODk0LTEuODY1LS42NjEtNS4xMjctLjg3NC02Ljg3NS0uMzUtMi45MTQtMi42MjItMy4wMy0xLjkyMy00LjQyOS4zNDMtLjY4NSAyLjg3LjY5IDMuMjYzIDEuNzQ4Ljc1NyAyLjA0IDIuOTUyIDEuODA3IDIuNjIyIDEuNjlcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05OS44IDgyLjQyOWMtLjQ2NS4wNzctLjM1LjI3Mi0uOTcgMS4yNDMtLjYyMi45NzEtNC44MTcgMi45MzItNi4zOSAzLjIyNC0yLjU4OS40OC0yLjI3OC0xLjU2LTQuMjU0LTIuODU1LTEuNjktMS4xMDctMy41NjItLjYzOC0xLjM5OCAxLjM5OC45OS45MzIuOTMyIDEuMTA3IDEuMzk4IDMuMjA1LjMzNSAxLjUwNi0uNjQgMy42Ny43IDUuNTkzXCIsXG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIuNzc0XCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzkuNTQzIDEwOC42NzNjLTIuMSAyLjkyNi00LjI2NiA2LjE3NS01LjU1NyA4Ljc2MlwiLFxuICAgIHN0cm9rZTogXCIjRTU5Nzg4XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiLjc3NFwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTg3LjcyIDEyNC43NjhzLTIuMDk4LTEuOTQyLTUuMTI3LTIuNzE5Yy0zLjAzLS43NzctMy41NzQtLjE1NS01LjUxNi4wNzgtMS45NDIuMjMzLTMuODg1LS45MzItMy42NTIuNy4yMzMgMS42MyA1LjA1IDEuMDEgNS4yMDYgMi4wOTcuMTU1IDEuMDg3LTYuMzcgMi43OTYtOC4zMTMgMi4xNzUtLjc3Ny43NzcuNDY2IDEuODY0IDIuMDIgMi4xNzUuMjMzIDEuNTU0IDIuMjUzIDEuNTU0IDIuMjUzIDEuNTU0cy42OTkgMS4wMSAyLjY0MSAxLjA4OGMyLjQ4NiAxLjMyIDguOTM0LS43IDEwLjk1NC0xLjU1NCAyLjAyLS44NTUtLjQ2Ni01LjU5NC0uNDY2LTUuNTk0XCIsXG4gICAgZmlsbDogXCIjRkZDNkEwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzMuNDI1IDEyMi44MjZzLjY2IDEuMTI3IDMuMTY3IDEuNDE4YzIuMzE1LjI3IDIuNTYzLjU4MyAyLjU2My41ODNzLTIuNTQ1IDIuODk0LTkuMDcgMi4yNzJNNzIuNDE2IDEyOS4yNzRzMy44MjYuMDk3IDQuOTMzLS43MThNNzQuOTggMTMwLjc1czEuOTYxLjEzNiAzLjM2LS41MDVNNzcuMjMyIDEzMS45MTZzMS43NDguMDE5IDIuOTE0LS41MDVNNzMuMzI4IDEyMi4zMjFzLS41OTUtMS4wMzIgMS4yNjItLjQyN2MxLjY3MS41NDQgMi44MzMuMDU1IDUuMTI4LjE1NSAxLjM4OS4wNjEgMy4wNjctLjI5NyAzLjk4Mi4xNSAxLjYwNi43ODQgMy42MzIgMi4xODEgMy42MzIgMi4xODFzMTAuNTI2IDEuMjA0IDE5LjAzMy0xLjEyN003OC44NjQgMTA4LjEwNHMtOC4zOSAyLjc1OC0xMy4xNjggMTIuMTJcIixcbiAgICBzdHJva2U6IFwiI0U1OTc4OFwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIi43NzRcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDkuMjc4IDExMi41MzNzMy4zOC0zLjYxMyA3LjU3NS00LjY2MlwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wODVcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDcuMzc1IDEyMy4wMDZzOS42OTctMi43NDUgMTEuNDQ1LS44OFwiLFxuICAgIHN0cm9rZTogXCIjRTU5Nzg4XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiLjc3NFwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE5NC42MDUgODMuNjU2bDMuOTcxLTMuODg2TTE4Ny4xNjYgOTAuOTMzbDMuNzM2LTMuNjU1TTE5MS43NTIgODQuMjA3bC00LjQ2Mi00LjU2TTE5OC40NTMgOTEuMDU3bC00LjEzMy00LjIyNU0xMjkuMjU2IDE2My4wNzRsMy43MTgtMy43MThNMTIyLjI5MSAxNzAuMDM5bDMuNDk4LTMuNDk4TTEyNi41NjEgMTYzLjYyNmwtNC4yNy00LjI3TTEzMi45NzUgMTcwLjAzOWwtMy45NTUtMy45NTVcIixcbiAgICBzdHJva2U6IFwiI0JGQ0RERFwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xOTAuMTU2IDIxMS43NzloLTEuNjA0YTQuMDIzIDQuMDIzIDAgMCAxLTQuMDExLTQuMDExVjE3NS42OGE0LjAyMyA0LjAyMyAwIDAgMSA0LjAxLTQuMDFoMS42MDVhNC4wMjMgNC4wMjMgMCAwIDEgNC4wMTEgNC4wMXYzMi4wODhhNC4wMjMgNC4wMjMgMCAwIDEtNC4wMSA0LjAxXCIsXG4gICAgZmlsbDogXCIjQTNCNEM2XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMjM3LjgyNCAyMTIuOTc3YTQuODEzIDQuODEzIDAgMCAxLTQuODEzIDQuODEzaC04Ni42MzZhNC44MTMgNC44MTMgMCAwIDEgMC05LjYyNmg4Ni42MzZhNC44MTMgNC44MTMgMCAwIDEgNC44MTMgNC44MTNcIixcbiAgICBmaWxsOiBcIiNBM0I0QzZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJtYXNrXCIsIHtcbiAgICBmaWxsOiBcIiNmZmZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsOiBcIiNBM0I0QzZcIixcbiAgICBtYXNrOiBcInVybCgjZClcIixcbiAgICBkOiBcIk0xNTQuMDk4IDE5MC4wOTZoNzAuNTEzdi04NC42MTdoLTcwLjUxM3pcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0yMjQuOTI4IDE5MC4wOTZIMTUzLjc4YTMuMjE5IDMuMjE5IDAgMCAxLTMuMjA4LTMuMjA5VjE2Ny45MmEzLjIxOSAzLjIxOSAwIDAgMSAzLjIwOC0zLjIxaDcxLjE0OGEzLjIxOSAzLjIxOSAwIDAgMSAzLjIwOSAzLjIxdjE4Ljk2N2EzLjIxOSAzLjIxOSAwIDAgMS0zLjIxIDMuMjA5TTIyNC45MjggMTMwLjgzMkgxNTMuNzhhMy4yMTggMy4yMTggMCAwIDEtMy4yMDgtMy4yMDh2LTE4Ljk2OGEzLjIxOSAzLjIxOSAwIDAgMSAzLjIwOC0zLjIwOWg3MS4xNDhhMy4yMTkgMy4yMTkgMCAwIDEgMy4yMDkgMy4yMXYxOC45NjdhMy4yMTggMy4yMTggMCAwIDEtMy4yMSAzLjIwOFwiLFxuICAgIGZpbGw6IFwiI0JGQ0RERFwiLFxuICAgIG1hc2s6IFwidXJsKCNkKVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE1OS41NjMgMTIwLjU0NmEyLjQwNyAyLjQwNyAwIDEgMSAwLTQuODEzIDIuNDA3IDIuNDA3IDAgMCAxIDAgNC44MTNNMTY2Ljk4IDEyMC41NDZhMi40MDcgMi40MDcgMCAxIDEgMC00LjgxMyAyLjQwNyAyLjQwNyAwIDAgMSAwIDQuODEzTTE3NC4zOTcgMTIwLjU0NmEyLjQwNyAyLjQwNyAwIDEgMSAwLTQuODEzIDIuNDA3IDIuNDA3IDAgMCAxIDAgNC44MTNNMjIyLjUzOSAxMjAuNTQ2aC0yMi40NjFhLjgwMi44MDIgMCAwIDEtLjgwMi0uODAydi0zLjIwOGMwLS40NDMuMzU5LS44MDMuODAyLS44MDNoMjIuNDZjLjQ0NCAwIC44MDMuMzYuODAzLjgwM3YzLjIwOGMwIC40NDMtLjM2LjgwMi0uODAyLjgwMlwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiLFxuICAgIG1hc2s6IFwidXJsKCNkKVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTIyNC45MjggMTYwLjQ2NEgxNTMuNzhhMy4yMTggMy4yMTggMCAwIDEtMy4yMDgtMy4yMDl2LTE4Ljk2N2EzLjIxOSAzLjIxOSAwIDAgMSAzLjIwOC0zLjIwOWg3MS4xNDhhMy4yMTkgMy4yMTkgMCAwIDEgMy4yMDkgMy4yMDl2MTguOTY3YTMuMjE4IDMuMjE4IDAgMCAxLTMuMjEgMy4yMDlcIixcbiAgICBmaWxsOiBcIiNCRkNERERcIixcbiAgICBtYXNrOiBcInVybCgjZClcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNzMuNDU1IDEzMC44MzJoNDkuMzAxTTE2NC45ODQgMTMwLjgzMmg2LjA4OU0xNTUuOTUyIDEzMC44MzJoNi43NU0xNzMuODM3IDE2MC42MTNoNDkuM00xNjUuMzY1IDE2MC42MTNoNi4wODlNMTU1LjU3IDE2MC42MTNoNi43NTFcIixcbiAgICBzdHJva2U6IFwiIzdDOTBBNVwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjEuMTI0XCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsXG4gICAgbWFzazogXCJ1cmwoI2QpXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTU5LjU2MyAxNTEuMDM4YTIuNDA3IDIuNDA3IDAgMSAxIDAtNC44MTQgMi40MDcgMi40MDcgMCAwIDEgMCA0LjgxNE0xNjYuOTggMTUxLjAzOGEyLjQwNyAyLjQwNyAwIDEgMSAwLTQuODE0IDIuNDA3IDIuNDA3IDAgMCAxIDAgNC44MTRNMTc0LjM5NyAxNTEuMDM4YTIuNDA3IDIuNDA3IDAgMSAxIC4wMDEtNC44MTQgMi40MDcgMi40MDcgMCAwIDEgMCA0LjgxNE0yMjIuNTM5IDE1MS4wMzhoLTIyLjQ2MWEuODAyLjgwMiAwIDAgMS0uODAyLS44MDJ2LTMuMjA5YzAtLjQ0My4zNTktLjgwMi44MDItLjgwMmgyMi40NmMuNDQ0IDAgLjgwMy4zNi44MDMuODAydjMuMjA5YzAgLjQ0My0uMzYuODAyLS44MDIuODAyTTE1OS41NjMgMTc5Ljk4N2EyLjQwNyAyLjQwNyAwIDEgMSAwLTQuODEzIDIuNDA3IDIuNDA3IDAgMCAxIDAgNC44MTNNMTY2Ljk4IDE3OS45ODdhMi40MDcgMi40MDcgMCAxIDEgMC00LjgxMyAyLjQwNyAyLjQwNyAwIDAgMSAwIDQuODEzTTE3NC4zOTcgMTc5Ljk4N2EyLjQwNyAyLjQwNyAwIDEgMSAwLTQuODEzIDIuNDA3IDIuNDA3IDAgMCAxIDAgNC44MTNNMjIyLjUzOSAxNzkuOTg3aC0yMi40NjFhLjgwMi44MDIgMCAwIDEtLjgwMi0uODAydi0zLjIwOWMwLS40NDMuMzU5LS44MDIuODAyLS44MDJoMjIuNDZjLjQ0NCAwIC44MDMuMzYuODAzLjgwMnYzLjIwOWMwIC40NDMtLjM2LjgwMi0uODAyLjgwMlwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiLFxuICAgIG1hc2s6IFwidXJsKCNkKVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTIwMy4wNCAyMjEuMTA4aC0yNy4zNzJhMi40MTMgMi40MTMgMCAwIDEtMi40MDYtMi40MDd2LTExLjQ0OGEyLjQxNCAyLjQxNCAwIDAgMSAyLjQwNi0yLjQwN2gyNy4zNzJhMi40MTQgMi40MTQgMCAwIDEgMi40MDcgMi40MDdWMjE4LjdhMi40MTMgMi40MTMgMCAwIDEtMi40MDcgMi40MDdcIixcbiAgICBmaWxsOiBcIiNCRkNERERcIixcbiAgICBtYXNrOiBcInVybCgjZClcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNzcuMjU5IDIwNy4yMTd2MTEuNTJNMjAxLjA1IDIwNy4yMTd2MTEuNTJcIixcbiAgICBzdHJva2U6IFwiI0EzQjRDNlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjEuMTI0XCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsXG4gICAgbWFzazogXCJ1cmwoI2QpXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTYyLjg3MyAyNjcuODk0YTkuNDIyIDkuNDIyIDAgMCAxLTkuNDIyLTkuNDIydi0xNC44MmE5LjQyMyA5LjQyMyAwIDAgMSAxOC44NDUgMHYxNC44MmE5LjQyMyA5LjQyMyAwIDAgMS05LjQyMyA5LjQyMlwiLFxuICAgIGZpbGw6IFwiIzVCQTAyRVwiLFxuICAgIG1hc2s6IFwidXJsKCNkKVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE3MS4yMiAyNjcuODNhOS40MjIgOS40MjIgMCAwIDEtOS40MjItOS40MjN2LTMuNDM4YTkuNDIzIDkuNDIzIDAgMCAxIDE4Ljg0NSAwdjMuNDM4YTkuNDIzIDkuNDIzIDAgMCAxLTkuNDIyIDkuNDIzXCIsXG4gICAgZmlsbDogXCIjOTJDMTEwXCIsXG4gICAgbWFzazogXCJ1cmwoI2QpXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTgxLjMxIDI5My42NjZoLTI3LjcxMmEzLjIwOSAzLjIwOSAwIDAgMS0zLjIwOS0zLjIxVjI2OS43OWEzLjIwOSAzLjIwOSAwIDAgMSAzLjIwOS0zLjIxaDI3LjcxMWEzLjIwOSAzLjIwOSAwIDAgMSAzLjIwOSAzLjIxdjIwLjY2OGEzLjIwOSAzLjIwOSAwIDAgMS0zLjIwOSAzLjIwOVwiLFxuICAgIGZpbGw6IFwiI0YyRDdBRFwiLFxuICAgIG1hc2s6IFwidXJsKCNkKVwiXG4gIH0pKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU2VydmVyRXJyb3I7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFVuYXV0aG9yaXplZCA9IGZ1bmN0aW9uIFVuYXV0aG9yaXplZCgpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICB3aWR0aDogXCIyNTFcIixcbiAgICBoZWlnaHQ6IFwiMjk0XCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0wIDEyOS4wMjN2LTIuMDg0QzAgNTguMzY0IDU1LjU5MSAyLjc3NCAxMjQuMTY1IDIuNzc0aDIuMDg1YzY4LjU3NCAwIDEyNC4xNjUgNTUuNTkgMTI0LjE2NSAxMjQuMTY1djIuMDg0YzAgNjguNTc1LTU1LjU5IDEyNC4xNjYtMTI0LjE2NSAxMjQuMTY2aC0yLjA4NUM1NS41OTEgMjUzLjE4OSAwIDE5Ny41OTggMCAxMjkuMDIzXCIsXG4gICAgZmlsbDogXCIjRTRFQkY3XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNDEuNDE3IDEzMi45MmE4LjIzMSA4LjIzMSAwIDEgMS0xNi4zOC0xLjY1IDguMjMxIDguMjMxIDAgMCAxIDE2LjM4IDEuNjVcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0zOC42NTIgMTM2LjM2bDEwLjQyNSA1LjkxTTQ5Ljk4OSAxNDguNTA1bC0xMi41OCAxMC43M1wiLFxuICAgIHN0cm9rZTogXCIjRkZGXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTQxLjUzNiAxNjEuMjhhNS42MzYgNS42MzYgMCAxIDEtMTEuMjE2LTEuMTMgNS42MzYgNS42MzYgMCAwIDEgMTEuMjE2IDEuMTNNNTkuMTU0IDE0NS4yNjFhNS42NzcgNS42NzcgMCAxIDEtMTEuMjk3LTEuMTM4IDUuNjc3IDUuNjc3IDAgMCAxIDExLjI5NyAxLjEzOE0xMDAuMzYgMjkuNTE2bDI5LjY2LS4wMTNhNC41NjIgNC41NjIgMCAxIDAtLjAwNC05LjEyNmwtMjkuNjYuMDEzYTQuNTYzIDQuNTYzIDAgMCAwIC4wMDUgOS4xMjZNMTExLjcwNSA0Ny43NTRsMjkuNjU5LS4wMTNhNC41NjMgNC41NjMgMCAxIDAtLjAwNC05LjEyNmwtMjkuNjYuMDEzYTQuNTYzIDQuNTYzIDAgMSAwIC4wMDUgOS4xMjZcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMTQuMDY2IDI5LjUwM1YyOS41bDE1LjY5OC0uMDA3YTQuNTYzIDQuNTYzIDAgMSAwIC4wMDQgOS4xMjZsLTE1LjY5OC4wMDd2LS4wMDJhNC41NjIgNC41NjIgMCAwIDAtLjAwNC05LjEyMk0xODUuNDA1IDEzNy43MjNjLS41NSA1LjQ1NS01LjQxOCA5LjQzMi0xMC44NzMgOC44ODItNS40NTYtLjU1LTkuNDMyLTUuNDE4LTguODgyLTEwLjg3My41NS01LjQ1NSA1LjQxOC05LjQzMiAxMC44NzMtOC44ODIgNS40NTUuNTUgOS40MzIgNS40MTggOC44ODIgMTAuODczXCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTgwLjE3IDE0My43NzJsMTIuNTcyIDcuMTI5TTE5My44NDEgMTU4LjQyTDE3OC42NyAxNzEuMzZcIixcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xODUuNTUgMTcxLjkyNmE2Ljc5OCA2Ljc5OCAwIDEgMS0xMy41MjgtMS4zNjMgNi43OTggNi43OTggMCAwIDEgMTMuNTI3IDEuMzYzTTIwNC4xMiAxNTUuMjg1YTYuODQ4IDYuODQ4IDAgMSAxLTEzLjYyNy0xLjM3NSA2Ljg0OCA2Ljg0OCAwIDAgMSAxMy42MjYgMS4zNzVcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNTIuOTg4IDE5NC4wNzRhMi4yMSAyLjIxIDAgMSAxLTQuNDIgMCAyLjIxIDIuMjEgMCAwIDEgNC40MiAwek0yMjUuOTMxIDExOC4yMTdhMi4yMSAyLjIxIDAgMSAxLTQuNDIxIDAgMi4yMSAyLjIxIDAgMCAxIDQuNDIxIDB6TTIxNy4wOSAxNTMuMDUxYTIuMjEgMi4yMSAwIDEgMS00LjQyMSAwIDIuMjEgMi4yMSAwIDAgMSA0LjQyIDB6TTE3Ny44NCAxMDkuODQyYTIuMjEgMi4yMSAwIDEgMS00LjQyMiAwIDIuMjEgMi4yMSAwIDAgMSA0LjQyMSAwek0xOTYuMTE0IDk0LjQ1NGEyLjIxIDIuMjEgMCAxIDEtNC40MjEgMCAyLjIxIDIuMjEgMCAwIDEgNC40MjEgMHpNMjAyLjg0NCAxODIuNTIzYTIuMjEgMi4yMSAwIDEgMS00LjQyIDAgMi4yMSAyLjIxIDAgMCAxIDQuNDIgMHpcIixcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBzdHJva2U6IFwiI0ZGRlwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIixcbiAgICBkOiBcIk0yMTUuMTI1IDE1NS4yNjJsLTEuOTAyIDIwLjA3NS0xMC44NyA1Ljk1OE0xNzQuNjAxIDE3Ni42MzZsLTYuMzIyIDkuNzYxSDE1Ni45OGwtNC40ODQgNi40NDlNMTc1Ljg3NCAxMjcuMjhWMTExLjU2TTIyMS41MSAxMTkuNDA0bC0xMi43NyA3Ljg1OS0xNS4yMjgtNy44NlY5Ni42NjhcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xODAuNjggMjkuMzJDMTgwLjY4IDEzLjEyOCAxOTMuODA2IDAgMjEwIDBjMTYuMTkzIDAgMjkuMzIgMTMuMTI3IDI5LjMyIDI5LjMyIDAgMTYuMTk0LTEzLjEyNyAyOS4zMjItMjkuMzIgMjkuMzIyLTE2LjE5MyAwLTI5LjMyLTEzLjEyOC0yOS4zMi0yOS4zMjFcIixcbiAgICBmaWxsOiBcIiNBMjZFRjRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0yMjEuNDUgNDEuNzA2bC0yMS41NjMtLjEyNWExLjc0NCAxLjc0NCAwIDAgMS0xLjczNC0xLjc1NGwuMDcxLTEyLjIzYTEuNzQ0IDEuNzQ0IDAgMCAxIDEuNzU0LTEuNzM0bDIxLjU2Mi4xMjVjLjk2NC4wMDYgMS43NC43OTEgMS43MzUgMS43NTVsLS4wNzEgMTIuMjI5YTEuNzQ0IDEuNzQ0IDAgMCAxLTEuNzU0IDEuNzM0XCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMjE1LjEwNiAyOS4xOTJjLS4wMTUgMi41NzctMi4wNDkgNC42NTQtNC41NDMgNC42NC0yLjQ5NC0uMDE0LTQuNTA0LTIuMTE1LTQuNDg5LTQuNjkzbC4wNC02LjkyNWMuMDE2LTIuNTc3IDIuMDUtNC42NTQgNC41NDMtNC42NCAyLjQ5NC4wMTUgNC41MDQgMi4xMTYgNC40OSA0LjY5M2wtLjA0IDYuOTI1em0tNC41My0xNC4wNzRhNi44NzcgNi44NzcgMCAwIDAtNi45MTYgNi44MzdsLS4wNDMgNy4zNjhhNi44NzcgNi44NzcgMCAwIDAgMTMuNzU0LjA4bC4wNDItNy4zNjhhNi44NzggNi44NzggMCAwIDAtNi44MzctNi45MTd6TTE2Ny41NjYgNjguMzY3aC0zLjkzYTQuNzMgNC43MyAwIDAgMS00LjcxNy00LjcxNyA0LjczIDQuNzMgMCAwIDEgNC43MTctNC43MTdoMy45M2E0LjczIDQuNzMgMCAwIDEgNC43MTcgNC43MTcgNC43MyA0LjczIDAgMCAxLTQuNzE3IDQuNzE3XCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTY4LjIxNCAyNDguODM4YTYuNjExIDYuNjExIDAgMCAxLTYuNjEtNi42MTF2LTY2LjEwOGE2LjYxMSA2LjYxMSAwIDAgMSAxMy4yMjEgMHY2Ni4xMDhhNi42MTEgNi42MTEgMCAwIDEtNi42MSA2LjYxXCIsXG4gICAgZmlsbDogXCIjNUJBMDJFXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTc2LjE0NyAyNDguMTc2YTYuNjExIDYuNjExIDAgMCAxLTYuNjEtNi42MXYtMzMuMDU0YTYuNjExIDYuNjExIDAgMSAxIDEzLjIyMSAwdjMzLjA1M2E2LjYxMSA2LjYxMSAwIDAgMS02LjYxIDYuNjExXCIsXG4gICAgZmlsbDogXCIjOTJDMTEwXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTg1Ljk5NCAyOTMuODloLTI3LjM3NmEzLjE3IDMuMTcgMCAwIDEtMy4xNy0zLjE3di00NS44ODdhMy4xNyAzLjE3IDAgMCAxIDMuMTctMy4xN2gyNy4zNzZhMy4xNyAzLjE3IDAgMCAxIDMuMTcgMy4xN3Y0NS44ODZhMy4xNyAzLjE3IDAgMCAxLTMuMTcgMy4xN1wiLFxuICAgIGZpbGw6IFwiI0YyRDdBRFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTgxLjk3MiAxNDcuNjczczYuMzc3LS45MjcgMTcuNTY2LTEuMjhjMTEuNzI5LS4zNzEgMTcuNTcgMS4wODYgMTcuNTcgMS4wODZzMy42OTctMy44NTUuOTY4LTguNDI0YzEuMjc4LTEyLjA3NyA1Ljk4Mi0zMi44MjcuMzM1LTQ4LjI3My0xLjExNi0xLjMzOS0zLjc0My0xLjUxMi03LjUzNi0uNjItMS4zMzcuMzE1LTcuMTQ3LS4xNDktNy45ODMtLjFsLTE1LjMxMS0uMzQ3cy0zLjQ4Ny0uMTctOC4wMzUtLjUwOGMtMS41MTItLjExMy00LjIyNy0xLjY4My01LjQ1OC0uMzM4LS40MDYuNDQzLTIuNDI1IDUuNjY5LTEuOTcgMTYuMDc3bDguNjM1IDM1LjY0MnMtMy4xNDEgMy42MSAxLjIxOSA3LjA4NVwiLFxuICAgIGZpbGw6IFwiI0ZGRlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTc1Ljc2OCA3My4zMjVsLS45LTYuMzk3IDExLjk4Mi02LjUyczcuMzAyLS4xMTggOC4wMzggMS4yMDVjLjczNyAxLjMyNC01LjYxNi45OTMtNS42MTYuOTkzcy0xLjgzNiAxLjM4OC0yLjYxNSAyLjVjLTEuNjU0IDIuMzYzLS45ODYgNi40NzEtOC4zMTggNS45ODYtMS43MDguMjg0LTIuNTcgMi4yMzMtMi41NyAyLjIzM1wiLFxuICAgIGZpbGw6IFwiI0ZGQzZBMFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTUyLjQ0IDc3LjY3MnMxNC4yMTcgOS40MDYgMjQuOTczIDE0LjQ0NGMxLjA2MS40OTctMi4wOTQgMTYuMTgzLTExLjg5MiAxMS44MTEtNy40MzYtMy4zMTgtMjAuMTYyLTguNDQtMjEuNDgyLTE0LjQ5Ni0uNzEtMy4yNTggMi41NDMtNy42NDMgOC40MDEtMTEuNzZNMTQxLjg2MiA4MC4xMTNzLTYuNjkzIDIuOTk5LTEzLjg0NCA2Ljg3NmMtMy44OTQgMi4xMS0xMC4xMzcgNC43MDQtMTIuMzMgNy45ODgtNi4yMjQgOS4zMTQgMy41MzYgMTEuMjIgMTIuOTQ3IDcuNTAzIDYuNzEtMi42NTEgMjguOTk5LTEyLjEyNyAxMy4yMjctMjIuMzY3XCIsXG4gICAgZmlsbDogXCIjRkZCNTk0XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzYuMTY2IDY2LjM2bDMuMDYgMy44ODFzLTIuNzgzIDIuNjctNi4zMSA1Ljc0N2MtNy4xMDMgNi4xOTUtMTIuODAzIDE0LjI5Ni0xNS45OTUgMTYuNDQtMy45NjYgMi42NjItOS43NTQgMy4zMTQtMTIuMTc3LS4xMTgtMy41NTMtNS4wMzIuNDY0LTE0LjYyOCAzMS40MjItMjUuOTVcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk02NC42NzQgODUuMTE2cy0yLjM0IDguNDEzLTguOTEyIDE0LjQ0N2MuNjUyLjU0OCAxOC41ODYgMTAuNTEgMjIuMTQ0IDEwLjA1NiA1LjIzOC0uNjY5IDYuNDE3LTE4Ljk2OCAxLjE0NS0yMC41MzEtLjcwMi0uMjA4LTUuOTAxLTEuMjg2LTguODUzLTIuMTY3LS44Ny0uMjYtMS42MTEtMS43MS0zLjU0NS0uOTM2bC0xLjk4LS44Njl6TTEyOC4zNjIgODUuODI2czUuMzE4IDEuOTU2IDcuMzI1IDEzLjczNGMtLjU0Ni4yNzQtMTcuNTUgMTIuMzUtMjEuODI5IDcuODA1LTYuNTM0LTYuOTQtLjc2Ni0xNy4zOTMgNC4yNzUtMTguNjEgNC42NDYtMS4xMjEgNS4wMy0xLjM3IDEwLjIzLTIuOTI5XCIsXG4gICAgZmlsbDogXCIjRkZGXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzguMTggOTQuNjU2cy45MTEgNy40MS00LjkxNCAxMy4wNzhcIixcbiAgICBzdHJva2U6IFwiI0U0RUJGN1wiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjEuMDUxXCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNODcuMzk3IDk0LjY4czMuMTI0IDIuNTcyIDEwLjI2MyAyLjU3MmM3LjE0IDAgOS4wNzQtMy40MzcgOS4wNzQtMy40MzdcIixcbiAgICBzdHJva2U6IFwiI0U0RUJGN1wiLFxuICAgIHN0cm9rZVdpZHRoOiBcIi45MzJcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMTcuMTg0IDY4LjYzOWwtNi43ODEtNi4xNzdzLTUuMzU1LTQuMzE0LTkuMjIzLS44OTNjLTMuODY3IDMuNDIyIDQuNDYzIDIuMDgzIDUuNjUzIDQuMTY1IDEuMTkgMi4wODIuODQ4IDEuMTQzLTIuMDgzLjQ0Ni01LjYwMy0xLjMzMS0yLjA4Mi44OTMgMi45NzUgNS4zNTUgMi4wOTEgMS44NDUgNi45OTIuOTU1IDYuOTkyLjk1NWwyLjQ2Ny0zLjg1MXpcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDUuMjgyIDkxLjMxNWwtLjI5Ny0xMC45MzctMTUuOTE4LS4wMjctLjUzIDEwLjQ1Yy0uMDI2LjQwMy4xNy43ODguNTE1Ljk5OSAyLjA0OSAxLjI1MSA5LjM4NyA1LjA5MyAxNS43OTkuNDI0LjI4Ny0uMjEuNDQzLS41NTQuNDMxLS45MVwiLFxuICAgIGZpbGw6IFwiI0ZGQjU5NFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwNy41NzMgNzQuMjRjLjgxNy0xLjE0Ny45ODItOS4xMTggMS4wMTUtMTEuOTI4YTEuMDQ2IDEuMDQ2IDAgMCAwLS45NjUtMS4wNTVsLTQuNjItLjM2NWMtNy43MS0xLjA0NC0xNy4wNzEuNjI0LTE4LjI1MyA2LjM0Ni01LjQ4MiA1LjgxMy0uNDIxIDEzLjI0NC0uNDIxIDEzLjI0NHMxLjk2MyAzLjU2NiA0LjMwNSA2Ljc5MWMuNzU2IDEuMDQxLjM5OC0zLjczMSAzLjA0LTUuOTI5IDUuNTI0LTQuNTk0IDE1Ljg5OS03LjEwMyAxNS44OTktNy4xMDNcIixcbiAgICBmaWxsOiBcIiM1QzI1NTJcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk04OC40MjYgODMuMjA2czIuNjg1IDYuMjAyIDExLjYwMiA2LjUyMmM3LjgyLjI4IDguOTczLTcuMDA4IDcuNDM0LTE3LjUwNWwtLjkwOS01LjQ4M2MtNi4xMTgtMi44OTctMTUuNDc4LjU0LTE1LjQ3OC41NHMtLjU3NiAyLjA0NC0uMTkgNS41MDRjLTIuMjc2IDIuMDY2LTEuODI0IDUuNjE4LTEuODI0IDUuNjE4cy0uOTA1LTEuOTIyLTEuOTgtMi4zMjFjLS44Ni0uMzItMS44OTcuMDg5LTIuMzIyIDEuOTgtMS4wNCA0LjYzMiAzLjY2NyA1LjE0NSAzLjY2NyA1LjE0NVwiLFxuICAgIGZpbGw6IFwiI0ZGQzZBMFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIHN0cm9rZTogXCIjREI4MzZFXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xNDVcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIixcbiAgICBkOiBcIk0xMDAuODQzIDc3LjA5OWwxLjcwMS0uOTI4LTEuMDE1LTQuMzI0LjY3NC0xLjQwNlwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwNS41NDYgNzQuMDkyYy0uMDIyLjcxMy0uNDUyIDEuMjc5LS45NiAxLjI2My0uNTEtLjAxNi0uOTA0LS42MDctLjg4Mi0xLjMyLjAyMS0uNzEzLjQ1Mi0xLjI3OC45Ni0xLjI2My41MS4wMTYuOTA0LjYwNy44ODIgMS4zMk05Ny41OTIgNzQuMzQ5Yy0uMDIyLjcxMy0uNDUyIDEuMjc4LS45NjEgMS4yNjMtLjUwOS0uMDE2LS45MDQtLjYwNy0uODgyLTEuMzIuMDIyLS43MTMuNDUyLTEuMjc5Ljk2MS0xLjI2My41MS4wMTYuOTA0LjYwNi44ODIgMS4zMlwiLFxuICAgIGZpbGw6IFwiIzU1Mjk1MFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTkxLjEzMiA4Ni43ODZzNS4yNjkgNC45NTcgMTIuNjc5IDIuMzI3XCIsXG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjE0NVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTk5Ljc3NiA4MS45MDNzLTMuNTkyLjIzMi0xLjQ0LTIuNzljMS41OS0xLjQ5NiA0Ljg5Ny0uNDYgNC44OTctLjQ2czEuMTU2IDMuOTA2LTMuNDU3IDMuMjVcIixcbiAgICBmaWxsOiBcIiNEQjgzNkVcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDIuODggNzAuNnMyLjQ4My44NCAzLjQwMi43MTVNOTMuODgzIDcxLjk3NXMyLjQ5Mi0xLjE0NCA0Ljc3OC0xLjA3M1wiLFxuICAgIHN0cm9rZTogXCIjNUMyNTUyXCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS41MjZcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk04Ni4zMiA3Ny4zNzRzLjk2MS44NzkgMS40NTggMi4xMDZjLS4zNzcuNDgtMS4wMzMgMS4xNTItLjIzNiAxLjgwOU05OS4zMzcgODMuNzE5czEuOTExLjE1MSAyLjUwOS0uMjU0XCIsXG4gICAgc3Ryb2tlOiBcIiNEQjgzNkVcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjE0NVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTg3Ljc4MiAxMTUuODIxbDE1LjczLTMuMDEyTTEwMC4xNjUgMTE1LjgyMWwxMC4wNC0yLjAwOFwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wNTFcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk02Ni41MDggODYuNzYzcy0xLjU5OCA4LjgzLTYuNjk3IDE0LjA3OFwiLFxuICAgIHN0cm9rZTogXCIjRTRFQkY3XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4xMTRcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMjguMzEgODcuOTM0czMuMDEzIDQuMTIxIDQuMDYgMTEuNzg1XCIsXG4gICAgc3Ryb2tlOiBcIiNFNEVCRjdcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTY0LjA5IDg0LjgxNnMtNi4wMyA5LjkxMi0xMy42MDcgOS45MDNcIixcbiAgICBzdHJva2U6IFwiI0RCODM2RVwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIi43OTVcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMTIuMzY2IDY1LjkwOWwtLjE0MiA1LjMyczUuOTkzIDQuNDcyIDExLjk0NSA5LjIwMmM0LjQ4MiAzLjU2MiA4Ljg4OCA3LjQ1NSAxMC45ODUgOC42NjIgNC44MDQgMi43NjYgOC45IDMuMzU1IDExLjA3NiAxLjgwOCA0LjA3MS0yLjg5NCA0LjM3My05Ljg3OC04LjEzNi0xNS4yNjMtNC4yNzEtMS44MzgtMTYuMTQ0LTYuMzYtMjUuNzI4LTkuNzNcIixcbiAgICBmaWxsOiBcIiNGRkM2QTBcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMzAuNTMyIDg1LjQ4OHM0LjU4OCA1Ljc1NyAxMS42MTkgNi4yMTRcIixcbiAgICBzdHJva2U6IFwiI0RCODM2RVwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIi43NVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEyMS43MDggMTA1Ljczcy0uMzkzIDguNTY0LTEuMzQgMTMuNjEyXCIsXG4gICAgc3Ryb2tlOiBcIiNFNEVCRjdcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTExNS43ODQgMTYxLjUxMnMtMy41Ny0xLjQ4OC0yLjY3OC03LjE0XCIsXG4gICAgc3Ryb2tlOiBcIiM2NDhCRDhcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwMS41MiAyOTAuMjQ2czQuMzI2IDIuMDU3IDcuNDA4IDEuMDNjMi44NDItLjk0OCA0LjU2NC42NzMgNy4xMzIgMS4xODYgMi41Ny41MTQgNi45MjUgMS4xMDggMTEuNzcyLTEuMjY5LS4xMDQtNS41NTEtNi45MzktNC4wMS0xMi4wNDgtNi43NjMtMi41ODItMS4zOS0zLjgxMi00Ljc1Ny0zLjYyNS04Ljg2M2gtOS40NzFzLTEuNDAyIDEwLjU5Ni0xLjE2OSAxNC42OFwiLFxuICAgIGZpbGw6IFwiI0NCRDFEMVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwMS40OTYgMjkwLjA3M3MyLjQ0NyAxLjI4MSA2LjgwOS42NThjMy4wODEtLjQ0IDMuNzQuNDg1IDcuNDc5IDEuMDM5IDMuNzM5LjU1NCAxMC44MDItLjA3IDExLjkxLS45LjQxNSAxLjEwOC0uMzQ3IDIuMDc3LS4zNDcgMi4wNzdzLTEuNTIzLjYwOC00Ljg0Ny44MzFjLTIuMDQ1LjEzNy01Ljg0My4yOTMtNy42NjMtLjUwNy0xLjgtMS4zODUtNS4yODYtMS45MTctNS43Ny0uMjQzLTMuOTQ3Ljk1OC03LjQxLS4yODgtNy40MS0uMjg4bC0uMTYtMi42Njd6XCIsXG4gICAgZmlsbDogXCIjMkIwODQ5XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTA4LjgyNCAyNzYuMTloMy4xMTZzLS4xMDMgNi43NTEgNC41NyA4LjYyYy00LjY3My42MjQtOC42Mi0yLjMyLTcuNjg2LTguNjJcIixcbiAgICBmaWxsOiBcIiNBNEFBQkFcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01Ny42NSAyNzIuNTJzLTIuMTIyIDcuNDctNC41MTggMTIuMzk2Yy0xLjgxMSAzLjcyNC00LjI1NSA3LjU0OCA1LjUwNSA3LjU0OCA2LjY5OCAwIDkuMDItLjQ4MyA3LjQ3OS02LjY0OC0xLjU0MS02LjE2NC4yNjgtMTMuMjk2LjI2OC0xMy4yOTZINTcuNjV6XCIsXG4gICAgZmlsbDogXCIjQ0JEMUQxXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNTEuNTQgMjkwLjA0czIuMTExIDEuMTc4IDYuNjgyIDEuMTc4YzYuMTI4IDAgOC4zMS0xLjY2MiA4LjMxLTEuNjYycy42MDUgMS4xMjItLjYyNCAyLjE4Yy0xIC44NjItMy42MjQgMS42MDMtNy40NDQgMS41NTktNC4xNzctLjA0OS01Ljg3Ni0uNTctNi43ODYtMS4xNzctLjgzMS0uNTU0LS42OTItMS41OTMtLjEzOC0yLjA3OFwiLFxuICAgIGZpbGw6IFwiIzJCMDg0OVwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTU4LjUzMyAyNzQuNDM4cy4wMzQgMS41MjktLjMxNSAyLjk1Yy0uMzUyIDEuNDMxLTEuMDg3IDMuMTI3LTEuMTM5IDQuMTctLjA1OCAxLjE2IDQuNTcgMS41OTIgNS4xOTQuMDM1LjYyMy0xLjU1OSAxLjMwMy02LjQ3NSAxLjkyNy03LjMwNi42MjItLjgzMS00Ljk0LTIuMTM1LTUuNjY3LjE1XCIsXG4gICAgZmlsbDogXCIjQTRBQUJBXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTAwLjg4NSAyNzcuMDE1bDEzLjMwNi4wOTJzMS4yOTEtNTQuMjI4IDEuODQzLTY0LjA1NmMuNTUyLTkuODI4IDMuNzU2LTQzLjEzLjk5Ny02Mi43ODhsLTEyLjQ4LS42NC0yMi43MjUuNzc2cy0uNDMzIDMuOTQ0LTEuMTkgOS45MjFjLS4wNjIuNDkzLS42NzcuODM4LS43NDQgMS4zNTgtLjA3NS41ODIuNDIgMS4zNDcuMzE4IDEuOTU2LTIuMzUgMTQuMDAzLTYuMzQzIDMyLjkyNi04LjY5NyA0Ni40MjUtLjExNi42NjMtMS4yMjcgMS4wMDQtMS40NSAyLjY3Ny0uMDQuMy4yMSAxLjUxNi4xMTIgMS43ODUtNi44MzYgMTguNjQzLTEwLjg5IDQ3LjU4NC0xNC4yIDYxLjU1MWwxNC41MjgtLjAxNHMyLjE4NS04LjUyNCA0LjAwOC0xNi44NzhjMi43OTYtMTIuODE3IDIyLjk4Ny04NC41NTMgMjIuOTg3LTg0LjU1M2wzLS41MTcgMS4wMzcgNDYuMXMtLjIyMyAxLjIyOC4zMzQgMi4wMDhjLjU1OC43ODItLjU1NiAxLjExNy0uMzkgMi4yMzNsLjM5IDEuNzg0cy0uNDQ2IDcuMTQtLjg5MiAxMS44MjZjLS40NDYgNC42ODUtLjA5MiAzOC45NTQtLjA5MiAzOC45NTRcIixcbiAgICBmaWxsOiBcIiM3QkIyRjlcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk03Ny40MzggMjIwLjQzNGMxLjE0Ni4wOTQgNC4wMTYtMi4wMDggNi45MTYtNC45MU0xMDcuNTUgMjIzLjkzMXMyLjc1OC0xLjEwMyA2LjA2OS0zLjg2MlwiLFxuICAgIHN0cm9rZTogXCIjNjQ4QkQ4XCIsXG4gICAgc3Ryb2tlV2lkdGg6IFwiMS4wNTFcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDguNDU5IDIyMC45MDVzMi43NTktMS4xMDQgNi4wNy0zLjg2M1wiLFxuICAgIHN0cm9rZTogXCIjNjQ4QkQ4XCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzYuMDk5IDIyMy41NTdzMi42MDgtLjU4NyA2LjQ3LTMuMzQ2TTg3LjMzIDE1MC44MmMtLjI3IDMuMDg4LjI5NyA4LjQ3OC00LjMxNSA5LjA3M00xMDQuODI5IDE0OS4wNzVzLjExIDEzLjkzNi0xLjI4NiAxNC45ODNjLTIuMjA3IDEuNjU1LTIuOTc1IDEuOTM0LTIuOTc1IDEuOTM0TTEwMS4wMTQgMTQ5LjYzcy4wMzUgMTIuODEtMS4xOSAyNC4yNDVNOTQuOTMgMTc0Ljk2NXM3LjE3NC0xLjY1NSA5LjM4LTEuNjU1TTc1LjY3MSAyMDQuNzU0Yy0uMzE2IDEuNTUtLjY0IDMuMDY3LS45NzMgNC41MzUgMCAwLTEuNDUgMS44MjItMS4wMDMgMy43NTYuNDQ2IDEuOTM0LS45NDMgMi4wMzQtNC45NiAxNS4yNzMtMS42ODYgNS41NTktNC40NjQgMTguNDktNi4zMTMgMjcuNDQ3LS4wNzguMzgtNC4wMTggMTguMDYtNC4wOTMgMTguNDIzTTc3LjA0MyAxOTYuNzQzYTMxMy4yNjkgMzEzLjI2OSAwIDAgMS0uODc3IDQuNzI5TTgzLjkwOCAxNTEuNDE0bC0xLjE5IDEwLjQxM3MtMS4wOTEuMTQ4LS40OTYgMi4yM2MuMTExIDEuMzQtMi42NiAxNS42OTItNS4xNTMgMzAuMjY3TTU3LjU4IDI3Mi45NGgxMy4yMzhcIixcbiAgICBzdHJva2U6IFwiIzY0OEJEOFwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjEuMDUxXCIsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTE3LjM3NyAxNDcuNDIzcy0xNi45NTUtMy4wODctMzUuNy4xOTljLjE1NyAyLjUwMS0uMDAyIDQuMTI4LS4wMDIgNC4xMjhzMTQuNjA3LTIuODAyIDM1LjQ3Ni0uMzFjLjI1MS0yLjM0Mi4yMjYtNC4wMTcuMjI2LTQuMDE3XCIsXG4gICAgZmlsbDogXCIjMTkyMDY0XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTA3LjUxMSAxNTAuMzUzbC4wMDQtNC44ODVhLjgwNy44MDcgMCAwIDAtLjc3NC0uODFjLTIuNDI4LS4wOTItNS4wNC0uMTA4LTcuNzk1LS4wMTRhLjgxNC44MTQgMCAwIDAtLjc4NC44MWwtLjAwMyA0Ljg4YzAgLjQ1Ni4zNzEuODIuODI3LjgwOGExNDAuNzYgMTQwLjc2IDAgMCAxIDcuNjg4LjAxNy44MS44MSAwIDAgMCAuODM3LS44MDZcIixcbiAgICBmaWxsOiBcIiNGRkZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDYuNDAyIDE0OS40MjZsLjAwMi0zLjA2YS42NC42NCAwIDAgMC0uNjE2LS42NDMgOTQuMTM1IDk0LjEzNSAwIDAgMC01LjgzNC0uMDA5LjY0Ny42NDcgMCAwIDAtLjYyNi42NDNsLS4wMDEgMy4wNTZjMCAuMzYuMjkxLjY0OC42NTEuNjQgMS43OC0uMDQgMy43MDgtLjA0MSA1Ljc2Mi4wMTIuMzYuMDA5LjY2Mi0uMjc5LjY2Mi0uNjRcIixcbiAgICBmaWxsOiBcIiMxOTIwNjRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMDEuNDg1IDI3My45MzNoMTIuMjcyTTEwMi42NTIgMjY5LjA3NWMuMDA2IDMuMzY4LjA0IDUuNzU5LjExIDYuNDdNMTAyLjY2NyAyNjMuMTI1Yy0uMDA5IDEuNTMtLjAxNSAyLjk4LS4wMTYgNC4zMTNNMTAyLjIwNCAxNzQuMDI0bC44OTMgNDQuNDAycy42NjkgMS41NjEtLjIyNCAyLjY3N2MtLjg5MiAxLjExNiAyLjQ1NS42Ny44OTMgMi4yMzEtMS41NjIgMS41NjIuODkzIDEuMTE2IDAgMy4zNDctLjU5MiAxLjQ4LS45ODggMjAuOTg3LTEuMDkgMzQuOTU2XCIsXG4gICAgc3Ryb2tlOiBcIiM2NDhCRDhcIixcbiAgICBzdHJva2VXaWR0aDogXCIxLjA1MVwiLFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiXG4gIH0pKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgVW5hdXRob3JpemVkOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgQ2hlY2tDaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NoZWNrQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQ2xvc2VDaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgV2FybmluZ0ZpbGxlZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvV2FybmluZ0ZpbGxlZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL191dGlsL3dhcm5pbmcnO1xuaW1wb3J0IG5vRm91bmQgZnJvbSAnLi9ub0ZvdW5kJztcbmltcG9ydCBzZXJ2ZXJFcnJvciBmcm9tICcuL3NlcnZlckVycm9yJztcbmltcG9ydCB1bmF1dGhvcml6ZWQgZnJvbSAnLi91bmF1dGhvcml6ZWQnO1xuZXhwb3J0IHZhciBJY29uTWFwID0ge1xuICBzdWNjZXNzOiBDaGVja0NpcmNsZUZpbGxlZCxcbiAgZXJyb3I6IENsb3NlQ2lyY2xlRmlsbGVkLFxuICBpbmZvOiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCxcbiAgd2FybmluZzogV2FybmluZ0ZpbGxlZFxufTtcbmV4cG9ydCB2YXIgRXhjZXB0aW9uTWFwID0ge1xuICAnNDA0Jzogbm9Gb3VuZCxcbiAgJzUwMCc6IHNlcnZlckVycm9yLFxuICAnNDAzJzogdW5hdXRob3JpemVkXG59O1xuLy8gRXhjZXB0aW9uSW1hZ2VNYXAga2V5c1xudmFyIEV4Y2VwdGlvblN0YXR1cyA9IE9iamVjdC5rZXlzKEV4Y2VwdGlvbk1hcCk7XG52YXIgSWNvbiA9IGZ1bmN0aW9uIEljb24oX3JlZikge1xuICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgaWNvbiA9IF9yZWYuaWNvbixcbiAgICBzdGF0dXMgPSBfcmVmLnN0YXR1cztcbiAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uXCIpKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBpY29uID09PSAnc3RyaW5nJyAmJiBpY29uLmxlbmd0aCA+IDIpLCAnUmVzdWx0JywgXCJgaWNvbmAgaXMgdXNpbmcgUmVhY3ROb2RlIGluc3RlYWQgb2Ygc3RyaW5nIG5hbWluZyBpbiB2NC4gUGxlYXNlIGNoZWNrIGBcIi5jb25jYXQoaWNvbiwgXCJgIGF0IGh0dHBzOi8vYW50LmRlc2lnbi9jb21wb25lbnRzL2ljb25cIikpIDogdm9pZCAwO1xuICBpZiAoRXhjZXB0aW9uU3RhdHVzLmluY2x1ZGVzKFwiXCIuY29uY2F0KHN0YXR1cykpKSB7XG4gICAgdmFyIFNWR0NvbXBvbmVudCA9IEV4Y2VwdGlvbk1hcFtzdGF0dXNdO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIgXCIpLmNvbmNhdChwcmVmaXhDbHMsIFwiLWltYWdlXCIpXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU1ZHQ29tcG9uZW50LCBudWxsKSk7XG4gIH1cbiAgdmFyIGljb25Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbk1hcFtzdGF0dXNdKTtcbiAgaWYgKGljb24gPT09IG51bGwgfHwgaWNvbiA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIGljb24gfHwgaWNvbk5vZGUpO1xufTtcbnZhciBFeHRyYSA9IGZ1bmN0aW9uIEV4dHJhKF9yZWYyKSB7XG4gIHZhciBwcmVmaXhDbHMgPSBfcmVmMi5wcmVmaXhDbHMsXG4gICAgZXh0cmEgPSBfcmVmMi5leHRyYTtcbiAgaWYgKCFleHRyYSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWV4dHJhXCIpXG4gIH0sIGV4dHJhKTtcbn07XG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gUmVzdWx0KF9yZWYzKSB7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBfcmVmMy5wcmVmaXhDbHMsXG4gICAgY3VzdG9taXplQ2xhc3NOYW1lID0gX3JlZjMuY2xhc3NOYW1lLFxuICAgIHN1YlRpdGxlID0gX3JlZjMuc3ViVGl0bGUsXG4gICAgdGl0bGUgPSBfcmVmMy50aXRsZSxcbiAgICBzdHlsZSA9IF9yZWYzLnN0eWxlLFxuICAgIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgX3JlZjMkc3RhdHVzID0gX3JlZjMuc3RhdHVzLFxuICAgIHN0YXR1cyA9IF9yZWYzJHN0YXR1cyA9PT0gdm9pZCAwID8gJ2luZm8nIDogX3JlZjMkc3RhdHVzLFxuICAgIGljb24gPSBfcmVmMy5pY29uLFxuICAgIGV4dHJhID0gX3JlZjMuZXh0cmE7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygncmVzdWx0JywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc3RhdHVzKSwgY3VzdG9taXplQ2xhc3NOYW1lLCBfZGVmaW5lUHJvcGVydHkoe30sIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICBpY29uOiBpY29uXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRpdGxlXCIpXG4gIH0sIHRpdGxlKSwgc3ViVGl0bGUgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zdWJ0aXRsZVwiKVxuICB9LCBzdWJUaXRsZSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEV4dHJhLCB7XG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgZXh0cmE6IGV4dHJhXG4gIH0pLCBjaGlsZHJlbiAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbnRlbnRcIilcbiAgfSwgY2hpbGRyZW4pKTtcbn07XG5SZXN1bHQuUFJFU0VOVEVEX0lNQUdFXzQwMyA9IEV4Y2VwdGlvbk1hcFsnNDAzJ107XG5SZXN1bHQuUFJFU0VOVEVEX0lNQUdFXzQwNCA9IEV4Y2VwdGlvbk1hcFsnNDA0J107XG5SZXN1bHQuUFJFU0VOVEVEX0lNQUdFXzUwMCA9IEV4Y2VwdGlvbk1hcFsnNTAwJ107XG5leHBvcnQgZGVmYXVsdCBSZXN1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==