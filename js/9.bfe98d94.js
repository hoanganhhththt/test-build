(window.webpackJsonp=window.webpackJsonp||[]).push([[9],Array(356).concat([function(e,t,r){"use strict";r.r(t),r.d(t,"TinyColor",(function(){return n.a})),r.d(t,"tinycolor",(function(){return n.b})),r.d(t,"names",(function(){return o.a})),r.d(t,"readability",(function(){return a})),r.d(t,"isReadable",(function(){return l})),r.d(t,"mostReadable",(function(){return u})),r.d(t,"toMsFilter",(function(){return c})),r.d(t,"fromRatio",(function(){return s})),r.d(t,"legacyRandom",(function(){return d})),r.d(t,"inputToRGB",(function(){return p.a})),r.d(t,"stringInputToObject",(function(){return p.c})),r.d(t,"isValidCSSUnit",(function(){return p.b})),r.d(t,"random",(function(){return v})),r.d(t,"bounds",(function(){return b})),r.d(t,"rgbToRgb",(function(){return i.j})),r.d(t,"rgbToHsl",(function(){return i.h})),r.d(t,"hslToRgb",(function(){return i.c})),r.d(t,"rgbToHsv",(function(){return i.i})),r.d(t,"hsvToRgb",(function(){return i.d})),r.d(t,"rgbToHex",(function(){return i.g})),r.d(t,"rgbaToHex",(function(){return i.l})),r.d(t,"rgbaToArgbHex",(function(){return i.k})),r.d(t,"convertDecimalToHex",(function(){return i.a})),r.d(t,"convertHexToDecimal",(function(){return i.b})),r.d(t,"parseIntFromHex",(function(){return i.f})),r.d(t,"numberInputToObject",(function(){return i.e}));var n=r(563),o=r(153);function a(e,t){var r=new n.a(e),o=new n.a(t);return(Math.max(r.getLuminance(),o.getLuminance())+.05)/(Math.min(r.getLuminance(),o.getLuminance())+.05)}function l(e,t,r){var n,o;void 0===r&&(r={level:"AA",size:"small"});var l=a(e,t);switch((null!==(n=r.level)&&void 0!==n?n:"AA")+(null!==(o=r.size)&&void 0!==o?o:"small")){case"AAsmall":case"AAAlarge":return l>=4.5;case"AAlarge":return l>=3;case"AAAsmall":return l>=7;default:return!1}}function u(e,t,r){void 0===r&&(r={includeFallbackColors:!1,level:"AA",size:"small"});for(var o=null,i=0,c=r.includeFallbackColors,f=r.level,s=r.size,d=0,p=t;d<p.length;d++){var v=p[d],m=a(e,v);m>i&&(i=m,o=new n.a(v))}return l(e,o,{level:f,size:s})||!c?o:(r.includeFallbackColors=!1,u(e,["#fff","#000"],r))}var i=r(20);function c(e,t){var r=new n.a(e),o="#"+Object(i.k)(r.r,r.g,r.b,r.a),a=o,l=r.gradientType?"GradientType = 1, ":"";if(t){var u=new n.a(t);a="#"+Object(i.k)(u.r,u.g,u.b,u.a)}return"progid:DXImageTransform.Microsoft.gradient(".concat(l,"startColorstr=").concat(o,",endColorstr=").concat(a,")")}var f=r(10);function s(e,t){var r={r:Object(f.d)(e.r),g:Object(f.d)(e.g),b:Object(f.d)(e.b)};return void 0!==e.a&&(r.a=Number(e.a)),new n.a(r,t)}function d(){return new n.a({r:Math.random(),g:Math.random(),b:Math.random()})}var p=r(111);function v(e){if(void 0===e&&(e={}),void 0!==e.count&&null!==e.count){var t=e.count,r=[];for(e.count=void 0;t>r.length;)e.count=null,e.seed&&(e.seed+=1),r.push(v(e));return e.count=t,r}var o=function(e,t){var r=y(function(e){var t=parseInt(e,10);if(!Number.isNaN(t)&&t<360&&t>0)return[t,t];if("string"==typeof e){var r=b.find((function(t){return t.name===e}));if(r){var o=g(r);if(o.hueRange)return o.hueRange}var a=new n.a(e);if(a.isValid){var l=a.toHsv().h;return[l,l]}}return[0,360]}(e),t);r<0&&(r=360+r);return r}(e.hue,e.seed),a=function(e,t){if("monochrome"===t.hue)return 0;if("random"===t.luminosity)return y([0,100],t.seed);var r=m(e).saturationRange,n=r[0],o=r[1];switch(t.luminosity){case"bright":n=55;break;case"dark":n=o-10;break;case"light":o=55}return y([n,o],t.seed)}(o,e),l={h:o,s:a,v:function(e,t,r){var n=function(e,t){for(var r=m(e).lowerBounds,n=0;n<r.length-1;n++){var o=r[n][0],a=r[n][1],l=r[n+1][0],u=r[n+1][1];if(t>=o&&t<=l){var i=(u-a)/(l-o);return i*t+(a-i*o)}}return 0}(e,t),o=100;switch(r.luminosity){case"dark":o=n+20;break;case"light":n=(o+n)/2;break;case"random":n=0,o=100}return y([n,o],r.seed)}(o,a,e)};return void 0!==e.alpha&&(l.a=e.alpha),new n.a(l)}function m(e){e>=334&&e<=360&&(e-=360);for(var t=0,r=b;t<r.length;t++){var n=g(r[t]);if(n.hueRange&&e>=n.hueRange[0]&&e<=n.hueRange[1])return n}throw Error("Color not found")}function y(e,t){if(void 0===t)return Math.floor(e[0]+Math.random()*(e[1]+1-e[0]));var r=e[1]||1,n=e[0]||0,o=(t=(9301*t+49297)%233280)/233280;return Math.floor(n+o*(r-n))}function g(e){var t=e.lowerBounds[0][0],r=e.lowerBounds[e.lowerBounds.length-1][0],n=e.lowerBounds[e.lowerBounds.length-1][1],o=e.lowerBounds[0][1];return{name:e.name,hueRange:e.hueRange,lowerBounds:e.lowerBounds,saturationRange:[t,r],brightnessRange:[n,o]}}var b=[{name:"monochrome",hueRange:null,lowerBounds:[[0,0],[100,0]]},{name:"red",hueRange:[-26,18],lowerBounds:[[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]},{name:"orange",hueRange:[19,46],lowerBounds:[[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]},{name:"yellow",hueRange:[47,62],lowerBounds:[[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]},{name:"green",hueRange:[63,178],lowerBounds:[[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]},{name:"blue",hueRange:[179,257],lowerBounds:[[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]},{name:"purple",hueRange:[258,282],lowerBounds:[[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]},{name:"pink",hueRange:[283,334],lowerBounds:[[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]}];t.default=n.b},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(572).default;function o(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(o=function(e){return e?r:t})(e)}e.exports=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var r=o(t);if(r&&r.has(e))return r.get(e);var a={},l=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=l?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(a,u,i):a[u]=e[u]}return a.default=e,r&&r.set(e,a),a},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(t){return e.exports=r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,r(t)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(){return e.exports=r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,r.apply(this,arguments)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(652);e.exports=function(e,t,r){return(t=n(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(657),o=r(729),a=r(617),l=r(658);e.exports=function(e,t){return n(e)||o(e,t)||a(e,t)||l()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ConfigConsumer",{enumerable:!0,get:function(){return y.ConfigConsumer}}),Object.defineProperty(t,"ConfigContext",{enumerable:!0,get:function(){return y.ConfigContext}}),t.globalConfig=t.defaultPrefixCls=t.defaultIconPrefixCls=t.default=t.configConsumerProps=void 0;var a=o(r(573)),l=o(r(618)),u=o(r(656)),i=n(r(0)),c=r(718),f=o(r(659)),s=n(r(721)),d=o(r(663)),p=o(r(603)),v=o(r(619)),m=o(r(748)),y=r(766),g=r(767),b=r(600),h=n(r(591));t.configConsumerProps=["getTargetContainer","getPopupContainer","rootPrefixCls","getPrefixCls","renderEmpty","csp","autoInsertSpaceInButton","locale","pageHeader"];var x=["getTargetContainer","getPopupContainer","renderEmpty","pageHeader","input","pagination","form"];t.defaultPrefixCls="ant";var C,w;function O(){return C||"ant"}function _(){return w||"anticon"}t.defaultIconPrefixCls="anticon";t.globalConfig=function(){return{getPrefixCls:function(e,t){return t||(e?"".concat(O(),"-").concat(e):O())},getIconPrefixCls:_,getRootPrefixCls:function(e,t){return e||(C||(t&&t.includes("-")?t.replace(/^(.*)-[^-]*$/,"$1"):O()))}}};var P=function(e){var t=e.children,r=e.csp,n=e.autoInsertSpaceInButton,o=e.form,d=e.locale,v=e.componentSize,m=e.direction,g=e.space,C=e.virtual,w=e.dropdownMatchSelectWidth,O=e.legacyLocale,_=e.parentContext,P=e.iconPrefixCls,j=e.componentDisabled,M=i.useCallback((function(t,r){var n=e.prefixCls;if(r)return r;var o=n||_.getPrefixCls("");return t?"".concat(o,"-").concat(t):o}),[_.getPrefixCls,e.prefixCls]),E=(0,a.default)((0,a.default)({},_),{csp:r,autoInsertSpaceInButton:n,locale:d||O,direction:m,space:g,virtual:C,dropdownMatchSelectWidth:w,getPrefixCls:M});x.forEach((function(t){var r=e[t];r&&(E[t]=r)}));var k=(0,u.default)((function(){return E}),E,(function(e,t){var r=Object.keys(e),n=Object.keys(t);return r.length!==n.length||r.some((function(r){return e[r]!==t[r]}))})),S=i.useMemo((function(){return{prefixCls:P,csp:r}}),[P,r]),N=t,T=i.useMemo((function(){var e,t,r,n;return(0,c.merge)((null===(e=p.default.Form)||void 0===e?void 0:e.defaultValidateMessages)||{},(null===(r=null===(t=k.locale)||void 0===t?void 0:t.Form)||void 0===r?void 0:r.defaultValidateMessages)||{},(null===(n=k.form)||void 0===n?void 0:n.validateMessages)||{},(null==o?void 0:o.validateMessages)||{})}),[k,null==o?void 0:o.validateMessages]);return Object.keys(T).length>0&&(N=i.createElement(f.default.Provider,{value:T},t)),d&&(N=i.createElement(s.default,{locale:d,_ANT_MARK__:s.ANT_MARK},N)),(P||r)&&(N=i.createElement(l.default.Provider,{value:S},N)),v&&(N=i.createElement(h.SizeContextProvider,{size:v},N)),void 0!==j&&(N=i.createElement(b.DisabledContextProvider,{disabled:j},N)),i.createElement(y.ConfigContext.Provider,{value:k},N)},j=function(e){return i.useEffect((function(){e.direction&&(v.default.config({rtl:"rtl"===e.direction}),m.default.config({rtl:"rtl"===e.direction}))}),[e.direction]),i.createElement(d.default,null,(function(t,r,n){return i.createElement(y.ConfigConsumer,null,(function(t){return i.createElement(P,(0,a.default)({parentContext:t,legacyLocale:n},e))}))}))};j.ConfigContext=y.ConfigContext,j.SizeContext=h.default,j.config=function(e){var t=e.prefixCls,r=e.iconPrefixCls,n=e.theme;void 0!==t&&(C=t),void 0!==r&&(w=r),n&&(0,g.registerTheme)(O(),n)};var M=j;t.default=M},function(e,t,r){var n=r(574);function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}e.exports=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e},e.exports.__esModule=!0,e.exports.default=e.exports},,,function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.NoStyleItemContext=t.NoFormStyle=t.FormProvider=t.FormItemPrefixContext=t.FormItemInputContext=t.FormContext=void 0;var a=o(r(573)),l=r(53),u=o(r(597)),i=n(r(0)),c=i.createContext({labelAlign:"right",vertical:!1,itemRef:function(){}});t.FormContext=c;var f=i.createContext(null);t.NoStyleItemContext=f;t.FormProvider=function(e){var t=(0,u.default)(e,["prefixCls"]);return i.createElement(l.FormProvider,(0,a.default)({},t))};var s=i.createContext({prefixCls:""});t.FormItemPrefixContext=s;var d=i.createContext({});t.FormItemInputContext=d;t.NoFormStyle=function(e){var t=e.children,r=e.status,n=e.override,o=(0,i.useContext)(d),l=(0,i.useMemo)((function(){var e=(0,a.default)({},o);return n&&delete e.isFormItemInput,r&&(delete e.status,delete e.hasFeedback,delete e.feedbackIcon),e}),[r,n,o]);return i.createElement(d.Provider,{value:l},t)}},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=n(r(575)),u=n(r(574)),i=n(r(665)),c=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=y(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),f=n(r(5)),s=n(r(618)),d=n(r(666)),p=r(732),v=r(620),m=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];function y(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(y=function(e){return e?r:t})(e)}(0,p.setTwoToneColor)("#1890ff");var g=c.forwardRef((function(e,t){var r,n=e.className,o=e.icon,p=e.spin,y=e.rotate,g=e.tabIndex,b=e.onClick,h=e.twoToneColor,x=(0,i.default)(e,m),C=c.useContext(s.default),w=C.prefixCls,O=void 0===w?"anticon":w,_=C.rootClassName,P=(0,f.default)(_,O,(r={},(0,u.default)(r,"".concat(O,"-").concat(o.name),!!o.name),(0,u.default)(r,"".concat(O,"-spin"),!!p||"loading"===o.name),r),n),j=g;void 0===j&&b&&(j=-1);var M=y?{msTransform:"rotate(".concat(y,"deg)"),transform:"rotate(".concat(y,"deg)")}:void 0,E=(0,v.normalizeTwoToneColors)(h),k=(0,l.default)(E,2),S=k[0],N=k[1];return c.createElement("span",(0,a.default)((0,a.default)({role:"img","aria-label":o.name},x),{},{ref:t,tabIndex:j,onClick:b,className:P}),c.createElement(d.default,{icon:o,primaryColor:S,secondaryColor:N,style:M}))}));g.displayName="AntdIcon",g.getTwoToneColor=p.getTwoToneColor,g.setTwoToneColor=p.setTwoToneColor;var b=g;t.default=b},,,,,function(e,t,r){"use strict";var n=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.noop=a,Object.defineProperty(t,"resetWarned",{enumerable:!0,get:function(){return o.resetWarned}});var o=n(r(651));function a(){}var l=a;t.default=l},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tupleNum=t.tuple=void 0;t.tuple=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t};t.tupleNum=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t}},,,function(e,t,r){"use strict";var n=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.SizeContextProvider=void 0;var o=n(r(0)),a=o.createContext(void 0);t.SizeContextProvider=function(e){var t=e.children,r=e.size;return o.createElement(a.Consumer,null,(function(e){return o.createElement(a.Provider,{value:r||e},t)}))};var l=a;t.default=l},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.composeRef=i,t.fillRef=u,t.supportRef=function(e){var t,r,n=(0,a.isMemo)(e)?e.type.type:e.type;if("function"==typeof n&&(null===(t=n.prototype)||void 0===t||!t.render))return!1;if("function"==typeof e&&(null===(r=e.prototype)||void 0===r||!r.render))return!1;return!0},t.useComposeRef=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return(0,l.default)((function(){return i.apply(void 0,t)}),t,(function(e,t){return e.length!==t.length||e.every((function(e,r){return e!==t[r]}))}))};var o=n(r(572)),a=r(189),l=n(r(656));function u(e,t){"function"==typeof e?e(t):"object"===(0,o.default)(e)&&e&&"current"in e&&(e.current=t)}function i(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=t.filter((function(e){return e}));return n.length<=1?n[0]:function(e){t.forEach((function(t){u(t,e)}))}}},function(e,t,r){"use strict";var n=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.cloneElement=function(e,t){return l(e,e,t)},t.isFragment=function(e){return e&&a(e)&&e.type===o.Fragment},t.isValidElement=void 0,t.replaceElement=l;var o=n(r(0)),a=o.isValidElement;function l(e,t,r){return a(e)?o.cloneElement(e,"function"==typeof r?r(e.props||{}):r):t}t.isValidElement=a},,,,function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=(0,o.default)({},e);Array.isArray(t)&&t.forEach((function(e){delete r[e]}));return r};var o=n(r(577))},function(e,t,r){var n=r(716),o=r(655),a=r(617),l=r(717);e.exports=function(e){return n(e)||o(e)||a(e)||l()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}},function(e,t,r){"use strict";var n=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.DisabledContextProvider=void 0;var o=n(r(0)),a=o.createContext(!1);t.DisabledContextProvider=function(e){var t=e.children,r=e.disabled,n=o.useContext(a);return o.createElement(a.Provider,{value:null!=r?r:n},t)};var l=a;t.default=l},,,function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(723)),a=n(r(724)),l=n(r(660)),u=n(r(661)),i="${label} is not a valid ${type}",c={locale:"en",Pagination:o.default,DatePicker:l.default,TimePicker:u.default,Calendar:a.default,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:i,method:i,array:i,object:i,number:i,date:i,boolean:i,integer:i,float:i,regexp:i,email:i,url:i,hex:i},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}};t.default=c},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(733))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.fixControlledValue=function(e){if(null==e)return"";return String(e)},t.resolveOnChange=function(e,t,r,n){if(!r)return;var o=t;if("click"===t.type){var a=e.cloneNode(!0);return o=Object.create(t,{target:{value:a},currentTarget:{value:a}}),a.value="",void r(o)}if(void 0!==n)return o=Object.create(t,{target:{value:e},currentTarget:{value:e}}),e.value=n,void r(o);r(o)},t.triggerFocus=function(e,t){if(!e)return;e.focus(t);var r=(t||{}).cursor;if(r){var n=e.value.length;switch(r){case"start":e.setSelectionRange(0,0);break;case"end":e.setSelectionRange(n,n);break;default:e.setSelectionRange(0,n)}}};var a=o(r(574)),l=o(r(573)),u=o(r(572)),i=o(r(604)),c=o(r(5)),f=o(r(338)),s=r(592),d=n(r(0)),p=r(576),v=o(r(600)),m=o(r(591)),y=r(580),g=r(628),b=r(629),h=(o(r(586)),o(r(679))),x=r(797),C=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};var w=(0,d.forwardRef)((function(e,t){var r,n,o,w=e.prefixCls,O=e.bordered,_=void 0===O||O,P=e.status,j=e.size,M=e.disabled,E=e.onBlur,k=e.onFocus,S=e.suffix,N=e.allowClear,T=e.addonAfter,I=e.addonBefore,A=e.className,R=e.onChange,L=C(e,["prefixCls","bordered","status","size","disabled","onBlur","onFocus","suffix","allowClear","addonAfter","addonBefore","className","onChange"]),F=d.default.useContext(p.ConfigContext),z=F.getPrefixCls,D=F.direction,W=F.input,B=z("input",w),q=(0,d.useRef)(null),$=(0,g.useCompactItemContext)(B,D),V=$.compactSize,H=$.compactItemClassnames,U=d.default.useContext(m.default),G=V||j||U,Y=d.default.useContext(v.default),K=null!=M?M:Y,Q=(0,d.useContext)(y.FormItemInputContext),X=Q.status,J=Q.hasFeedback,Z=Q.feedbackIcon,ee=(0,b.getMergedStatus)(X,P),te=(0,x.hasPrefixSuffix)(e)||!!J,re=(0,d.useRef)(te);(0,d.useEffect)((function(){te&&re.current,re.current=te}),[te]);var ne,oe=(0,h.default)(q,!0),ae=(J||S)&&d.default.createElement(d.default.Fragment,null,S,J&&Z);return"object"===(0,u.default)(N)&&(null==N?void 0:N.clearIcon)?ne=N:N&&(ne={clearIcon:d.default.createElement(i.default,null)}),d.default.createElement(f.default,(0,l.default)({ref:(0,s.composeRef)(t,q),prefixCls:B,autoComplete:null==W?void 0:W.autoComplete},L,{disabled:K||void 0,onBlur:function(e){oe(),null==E||E(e)},onFocus:function(e){oe(),null==k||k(e)},suffix:ae,allowClear:ne,className:(0,c.default)(A,H),onChange:function(e){oe(),null==R||R(e)},addonAfter:T&&d.default.createElement(g.NoCompactStyle,null,d.default.createElement(y.NoFormStyle,{override:!0,status:!0},T)),addonBefore:I&&d.default.createElement(g.NoCompactStyle,null,d.default.createElement(y.NoFormStyle,{override:!0,status:!0},I)),inputClassName:(0,c.default)((r={},(0,a.default)(r,"".concat(B,"-sm"),"small"===G),(0,a.default)(r,"".concat(B,"-lg"),"large"===G),(0,a.default)(r,"".concat(B,"-rtl"),"rtl"===D),(0,a.default)(r,"".concat(B,"-borderless"),!_),r),!te&&(0,b.getStatusClassNames)(B,ee)),affixWrapperClassName:(0,c.default)((n={},(0,a.default)(n,"".concat(B,"-affix-wrapper-sm"),"small"===G),(0,a.default)(n,"".concat(B,"-affix-wrapper-lg"),"large"===G),(0,a.default)(n,"".concat(B,"-affix-wrapper-rtl"),"rtl"===D),(0,a.default)(n,"".concat(B,"-affix-wrapper-borderless"),!_),n),(0,b.getStatusClassNames)("".concat(B,"-affix-wrapper"),ee,J)),wrapperClassName:(0,c.default)((0,a.default)({},"".concat(B,"-group-rtl"),"rtl"===D)),groupClassName:(0,c.default)((o={},(0,a.default)(o,"".concat(B,"-group-wrapper-sm"),"small"===G),(0,a.default)(o,"".concat(B,"-group-wrapper-lg"),"large"===G),(0,a.default)(o,"".concat(B,"-group-wrapper-rtl"),"rtl"===D),o),(0,b.getStatusClassNames)("".concat(B,"-group-wrapper"),ee,J))}))}));t.default=w},,,,,,,,,,,,function(e,t,r){var n=r(654);e.exports=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)({});t.default=n},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.attachTypeApi=I,t.getInstance=t.default=void 0,t.getKeyThenIncreaseKey=M,t.typeList=void 0;var a,l,u,i,c=o(r(573)),f=o(r(574)),s=o(r(664)),d=o(r(604)),p=o(r(667)),v=o(r(737)),m=o(r(622)),y=o(r(5)),g=o(r(192)),b=n(r(0)),h=n(r(576)),x=o(r(742)),C=3,w=1,O="",_="move-up",P=!1,j=!1;function M(){return w++}function E(e,t){var r=e.prefixCls,n=e.getPopupContainer,o=(0,h.globalConfig)(),c=o.getPrefixCls,f=o.getRootPrefixCls,s=o.getIconPrefixCls,d=c("message",r||O),p=f(e.rootPrefixCls,d),v=s();if(a)t({prefixCls:d,rootPrefixCls:p,iconPrefixCls:v,instance:a});else{var m={prefixCls:d,transitionName:P?_:"".concat(p,"-").concat(_),style:{top:l},getContainer:u||n,maxCount:i};g.default.newInstance(m,(function(e){a?t({prefixCls:d,rootPrefixCls:p,iconPrefixCls:v,instance:a}):(a=e,t({prefixCls:d,rootPrefixCls:p,iconPrefixCls:v,instance:e}))}))}}var k={info:v.default,success:s.default,error:d.default,warning:p.default,loading:m.default},S=Object.keys(k);function N(e,t,r){var n,o=void 0!==e.duration?e.duration:C,a=k[e.type],l=(0,y.default)("".concat(t,"-custom-content"),(n={},(0,f.default)(n,"".concat(t,"-").concat(e.type),e.type),(0,f.default)(n,"".concat(t,"-rtl"),!0===j),n));return{key:e.key,duration:o,style:e.style||{},className:e.className,content:b.createElement(h.default,{iconPrefixCls:r},b.createElement("div",{className:l},e.icon||a&&b.createElement(a,null),b.createElement("span",null,e.content))),onClose:e.onClose,onClick:e.onClick}}t.typeList=S;var T={open:function(e){var t=e.key||M(),r=new Promise((function(r){var n=function(){return"function"==typeof e.onClose&&e.onClose(),r(!0)};E(e,(function(r){var o=r.prefixCls,a=r.iconPrefixCls;r.instance.notice(N((0,c.default)((0,c.default)({},e),{key:t,onClose:n}),o,a))}))})),n=function(){var r;a&&(a.removeNotice(t),null===(r=e.onClose)||void 0===r||r.call(e))};return n.then=function(e,t){return r.then(e,t)},n.promise=r,n},config:function(e){void 0!==e.top&&(l=e.top,a=null),void 0!==e.duration&&(C=e.duration),void 0!==e.prefixCls&&(O=e.prefixCls),void 0!==e.getContainer&&(u=e.getContainer,a=null),void 0!==e.transitionName&&(_=e.transitionName,a=null,P=!0),void 0!==e.maxCount&&(i=e.maxCount,a=null),void 0!==e.rtl&&(j=e.rtl)},destroy:function(e){if(a)if(e){(0,a.removeNotice)(e)}else{var t=a.destroy;t(),a=null}}};function I(e,t){e[t]=function(r,n,o){return function(e){return"[object Object]"===Object.prototype.toString.call(e)&&!!e.content}(r)?e.open((0,c.default)((0,c.default)({},r),{type:t})):("function"==typeof n&&(o=n,n=void 0),e.open({content:r,duration:n,type:t,onClose:o}))}}S.forEach((function(e){return I(T,e)})),T.warn=T.warning,T.useMessage=(0,x.default)(E,N);t.getInstance=function(){return null};var A=T;t.default=A},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.generate=function e(t,r,n){if(!n)return i.default.createElement(t.tag,(0,a.default)({key:r},v(t.attrs)),(t.children||[]).map((function(n,o){return e(n,"".concat(r,"-").concat(t.tag,"-").concat(o))})));return i.default.createElement(t.tag,(0,a.default)((0,a.default)({key:r},v(t.attrs)),n),(t.children||[]).map((function(n,o){return e(n,"".concat(r,"-").concat(t.tag,"-").concat(o))})))},t.getSecondaryColor=function(e){return(0,u.generate)(e)[0]},t.iconStyles=void 0,t.isIconDefinition=function(e){return"object"===(0,l.default)(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===(0,l.default)(e.icon)||"function"==typeof e.icon)},t.normalizeAttrs=v,t.normalizeTwoToneColors=function(e){if(!e)return[];return Array.isArray(e)?e:[e]},t.useInsertStyles=t.svgBaseProps=void 0,t.warning=function(e,t){(0,c.default)(e,"[@ant-design/icons] ".concat(t))};var a=n(r(577)),l=n(r(572)),u=r(152),i=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=p(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),c=n(r(651)),f=r(621),s=n(r(618)),d=n(r(320));function p(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(p=function(e){return e?r:t})(e)}function v(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,r){var n=e[r];switch(r){case"class":t.className=n,delete t.class;break;default:delete t[r],t[(0,d.default)(r)]=n}return t}),{})}t.svgBaseProps={width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true",focusable:"false"};var m="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";t.iconStyles=m;t.useInsertStyles=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:m,t=(0,i.useContext)(s.default),r=t.csp;(0,i.useEffect)((function(){(0,f.updateCSS)(e,"@ant-design-icons",{prepend:!0,csp:r})}),[])}},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.clearContainerCache=function(){l.clear()},t.injectCSS=s,t.removeCSS=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=d(e,t);if(r){var n=i(t);n.removeChild(r)}},t.updateCSS=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=i(r);p(n,r);var o=d(t,r);if(o){var a,l,c;if(null!==(a=r.csp)&&void 0!==a&&a.nonce&&o.nonce!==(null===(l=r.csp)||void 0===l?void 0:l.nonce))o.nonce=null===(c=r.csp)||void 0===c?void 0:c.nonce;return o.innerHTML!==e&&(o.innerHTML=e),o}var f=s(e,r);return f.setAttribute(u(r),t),f};var o=n(r(599)),a=n(r(731)),l=new Map;function u(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):"rc-util-key"}function i(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function c(e){return"queue"===e?"prependQueue":e?"prepend":"append"}function f(e){return Array.from((l.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,o.default)())return null;var r=t.csp,n=t.prepend,a=t.priority,l=void 0===a?0:a,u=c(n),s="prependQueue"===u,d=document.createElement("style");d.setAttribute("data-rc-order",u),s&&l&&d.setAttribute("data-rc-priority","".concat(l)),null!=r&&r.nonce&&(d.nonce=null==r?void 0:r.nonce),d.innerHTML=e;var p=i(t),v=p.firstChild;if(n){if(s){var m=f(p).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute("data-rc-order")))return!1;var t=Number(e.getAttribute("data-rc-priority")||0);return l>=t}));if(m.length)return p.insertBefore(d,m[m.length-1].nextSibling),d}p.insertBefore(d,v)}else p.appendChild(d);return d}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=i(t);return f(r).find((function(r){return r.getAttribute(u(t))===e}))}function p(e,t){var r=l.get(e);if(!r||!(0,a.default)(document,r)){var n=s("",t),o=n.parentNode;l.set(e,o),e.removeChild(n)}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(740))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(652);function o(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,n(o.key),o)}}e.exports=function(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(744);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&n(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(745),o=r(746),a=r(747);e.exports=function(e){var t=o();return function(){var r,o=n(e);if(t){var l=n(this).constructor;r=Reflect.construct(o,arguments,l)}else r=o.apply(this,arguments);return a(this,r)}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(574)),l=o(r(573)),u=o(r(572)),i=o(r(5)),c=n(r(0)),f=r(576),s=o(r(676)),d=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};var p=["xs","sm","md","lg","xl","xxl"];var v=c.forwardRef((function(e,t){var r,n=c.useContext(f.ConfigContext),o=n.getPrefixCls,v=n.direction,m=c.useContext(s.default),y=m.gutter,g=m.wrap,b=m.supportFlexGap,h=e.prefixCls,x=e.span,C=e.order,w=e.offset,O=e.push,_=e.pull,P=e.className,j=e.children,M=e.flex,E=e.style,k=d(e,["prefixCls","span","order","offset","push","pull","className","children","flex","style"]),S=o("col",h),N={};p.forEach((function(t){var r,n={},o=e[t];"number"==typeof o?n.span=o:"object"===(0,u.default)(o)&&(n=o||{}),delete k[t],N=(0,l.default)((0,l.default)({},N),(r={},(0,a.default)(r,"".concat(S,"-").concat(t,"-").concat(n.span),void 0!==n.span),(0,a.default)(r,"".concat(S,"-").concat(t,"-order-").concat(n.order),n.order||0===n.order),(0,a.default)(r,"".concat(S,"-").concat(t,"-offset-").concat(n.offset),n.offset||0===n.offset),(0,a.default)(r,"".concat(S,"-").concat(t,"-push-").concat(n.push),n.push||0===n.push),(0,a.default)(r,"".concat(S,"-").concat(t,"-pull-").concat(n.pull),n.pull||0===n.pull),(0,a.default)(r,"".concat(S,"-rtl"),"rtl"===v),r))}));var T=(0,i.default)(S,(r={},(0,a.default)(r,"".concat(S,"-").concat(x),void 0!==x),(0,a.default)(r,"".concat(S,"-order-").concat(C),C),(0,a.default)(r,"".concat(S,"-offset-").concat(w),w),(0,a.default)(r,"".concat(S,"-push-").concat(O),O),(0,a.default)(r,"".concat(S,"-pull-").concat(_),_),r),P,N),I={};if(y&&y[0]>0){var A=y[0]/2;I.paddingLeft=A,I.paddingRight=A}if(y&&y[1]>0&&!b){var R=y[1]/2;I.paddingTop=R,I.paddingBottom=R}return M&&(I.flex=function(e){return"number"==typeof e?"".concat(e," ").concat(e," auto"):/^\d+(\.\d+)?(px|em|rem|%)$/.test(e)?"0 0 ".concat(e):e}(M),!1!==g||I.minWidth||(I.minWidth=0)),c.createElement("div",(0,l.default)({},k,{style:(0,l.default)((0,l.default)({},I),E),className:T,ref:t}),j)}));t.default=v},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.useCompactItemContext=t.default=t.SpaceCompactItemContext=t.NoCompactStyle=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(5)),i=o(r(796)),c=n(r(0)),f=r(576),s=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},d=c.createContext(null);t.SpaceCompactItemContext=d;t.useCompactItemContext=function(e,t){var r=c.useContext(d),n=c.useMemo((function(){var n;if(!r)return"";var o=r.compactDirection,a=r.isFirstItem,i=r.isLastItem,c="vertical"===o?"-vertical-":"-";return(0,u.default)((n={},(0,l.default)(n,"".concat(e,"-compact").concat(c,"item"),!0),(0,l.default)(n,"".concat(e,"-compact").concat(c,"first-item"),a),(0,l.default)(n,"".concat(e,"-compact").concat(c,"last-item"),i),(0,l.default)(n,"".concat(e,"-compact").concat(c,"item-rtl"),"rtl"===t),n))}),[e,t,r]);return{compactSize:null==r?void 0:r.compactSize,compactDirection:null==r?void 0:r.compactDirection,compactItemClassnames:n}};t.NoCompactStyle=function(e){var t=e.children;return c.createElement(d.Provider,{value:null},t)};var p=function(e){var t=e.children,r=s(e,["children"]);return c.createElement(d.Provider,{value:r},t)},v=function(e){var t,r=c.useContext(f.ConfigContext),n=r.getPrefixCls,o=r.direction,v=e.size,m=void 0===v?"middle":v,y=e.direction,g=e.block,b=e.prefixCls,h=e.className,x=e.children,C=s(e,["size","direction","block","prefixCls","className","children"]),w=n("space-compact",b),O=(0,u.default)(w,(t={},(0,l.default)(t,"".concat(w,"-rtl"),"rtl"===o),(0,l.default)(t,"".concat(w,"-block"),g),(0,l.default)(t,"".concat(w,"-vertical"),"vertical"===y),t),h),_=c.useContext(d),P=(0,i.default)(x),j=c.useMemo((function(){return P.map((function(e,t){var r=e&&e.key||"".concat(w,"-item-").concat(t);return c.createElement(p,{key:r,compactSize:m,compactDirection:y,isFirstItem:0===t&&(!_||(null==_?void 0:_.isFirstItem)),isLastItem:t===P.length-1&&(!_||(null==_?void 0:_.isLastItem))},e)}))}),[m,P,_]);return 0===P.length?null:c.createElement("div",(0,a.default)({className:O},C),j)};t.default=v},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.getMergedStatus=void 0,t.getStatusClassNames=function(e,t,r){var n;return(0,a.default)((n={},(0,o.default)(n,"".concat(e,"-status-success"),"success"===t),(0,o.default)(n,"".concat(e,"-status-warning"),"warning"===t),(0,o.default)(n,"".concat(e,"-status-error"),"error"===t),(0,o.default)(n,"".concat(e,"-status-validating"),"validating"===t),(0,o.default)(n,"".concat(e,"-has-feedback"),r),n))};var o=n(r(574)),a=n(r(5));(0,r(588).tuple)("warning","error","");t.getMergedStatus=function(e,t){return t||e}},,,,,,,,,,,,,,,,,,,,,,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.call=c,t.default=void 0,t.note=u,t.noteOnce=s,t.preMessage=void 0,t.resetWarned=i,t.warning=l,t.warningOnce=f;var n={},o=[],a=function(e){o.push(e)};function l(e,t){}function u(e,t){}function i(){n={}}function c(e,t,r){t||n[r]||(e(!1,r),n[r]=!0)}function f(e,t){c(l,e,t)}function s(e,t){c(u,e,t)}t.preMessage=a,f.preMessage=a,f.resetWarned=i,f.noteOnce=s;var d=f;t.default=d},function(e,t,r){var n=r(572).default,o=r(715);e.exports=function(e){var t=o(e,"string");return"symbol"===n(t)?t:String(t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.help,r=e.helpStatus,n=e.errors,o=void 0===n?m:n,g=e.warnings,b=void 0===g?m:g,h=e.className,x=e.fieldId,C=e.onVisibleChanged,w=f.useContext(p.FormItemPrefixContext).prefixCls,O=f.useContext(s.ConfigContext).getPrefixCls,_="".concat(w,"-item-explain"),P=O(),j=(0,v.default)(o),M=(0,v.default)(b),E=f.useMemo((function(){return null!=t?[y(t,r,"help")]:[].concat((0,u.default)(j.map((function(e,t){return y(e,"error","error",t)}))),(0,u.default)(M.map((function(e,t){return y(e,"warning","warning",t)}))))}),[t,r,j,M]),k={};x&&(k.id="".concat(x,"_help"));return f.createElement(c.default,{motionDeadline:d.default.motionDeadline,motionName:"".concat(P,"-show-help"),visible:!!E.length,onVisibleChanged:C},(function(e){var t=e.className,r=e.style;return f.createElement("div",(0,l.default)({},k,{className:(0,i.default)(_,t,h),style:r,role:"alert"}),f.createElement(c.CSSMotionList,(0,l.default)({keys:E},d.default,{motionName:"".concat(P,"-show-help-item"),component:!1}),(function(e){var t=e.key,r=e.error,n=e.errorStatus,o=e.className,l=e.style;return f.createElement("div",{key:t,className:(0,i.default)(o,(0,a.default)({},"".concat(_,"-").concat(n),n)),style:l},r)})))}))};var a=o(r(574)),l=o(r(573)),u=o(r(598)),i=o(r(5)),c=n(r(56)),f=n(r(0)),s=r(576),d=o(r(670)),p=r(580),v=o(r(671)),m=[];function y(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return{key:"string"==typeof e?e:"".concat(r,"-").concat(n),error:e,errorStatus:t}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var n=o.useRef({});"value"in n.current&&!r(n.current.condition,t)||(n.current.value=e(),n.current.condition=t);return n.current.value};var o=n(r(0))},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)(void 0);t.default=n},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(573)),a=n(r(725)),l=n(r(661)),u={lang:(0,o.default)({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},a.default),timePickerLocale:(0,o.default)({},l.default)};t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={placeholder:"Select time",rangePlaceholder:["Start time","End time"]};t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)(void 0);t.default=n},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.useLocaleReceiver=t.default=void 0;var a=o(r(573)),l=n(r(0)),u=o(r(662)),i=o(r(726)),c=function(e){var t=e.componentName,r=void 0===t?"global":t,n=e.defaultLocale,o=e.children,c=l.useContext(u.default);return o(l.useMemo((function(){var e,t=n||i.default[r],o=null!==(e=null==c?void 0:c[r])&&void 0!==e?e:{};return(0,a.default)((0,a.default)({},t instanceof Function?t():t),o||{})}),[r,n,c]),l.useMemo((function(){var e=c&&c.locale;return c&&c.exist&&!e?i.default.locale:e}),[c]),c)};t.default=c;t.useLocaleReceiver=function(e,t){var r=l.useContext(u.default);return[l.useMemo((function(){var n,o=t||i.default[e],l=null!==(n=null==r?void 0:r[e])&&void 0!==n?n:{};return(0,a.default)((0,a.default)({},"function"==typeof o?o():o),l||{})}),[e,t,r])]}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(727))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){var n=r(730);e.exports=function(e,t){if(null==e)return{};var r,o,a=n(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(570);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(665)),a=n(r(577)),l=r(620),u=["icon","className","onClick","style","primaryColor","secondaryColor"],i={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1};var c=function(e){var t=e.icon,r=e.className,n=e.onClick,c=e.style,f=e.primaryColor,s=e.secondaryColor,d=(0,o.default)(e,u),p=i;if(f&&(p={primaryColor:f,secondaryColor:s||(0,l.getSecondaryColor)(f)}),(0,l.useInsertStyles)(),(0,l.warning)((0,l.isIconDefinition)(t),"icon should be icon definiton, but got ".concat(t)),!(0,l.isIconDefinition)(t))return null;var v=t;return v&&"function"==typeof v.icon&&(v=(0,a.default)((0,a.default)({},v),{},{icon:v.icon(p.primaryColor,p.secondaryColor)})),(0,l.generate)(v.icon,"svg-".concat(v.name),(0,a.default)({className:r,onClick:n,style:c,"data-icon":v.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},d))};c.displayName="IconReact",c.getTwoToneColors=function(){return(0,a.default)({},i)},c.setTwoToneColors=function(e){var t=e.primaryColor,r=e.secondaryColor;i.primaryColor=t,i.secondaryColor=r||(0,l.getSecondaryColor)(t),i.calculated=!!r};var f=c;t.default=f},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(735))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=i.useRef({}),r=i.useState([]),n=(0,u.default)(r,2),o=n[0],f=n[1];return[function(r){var n=!0;e.add(r,(function(e,r){var o=r.key;if(e&&(!t.current[o]||n)){var u=i.createElement(c.default,(0,l.default)({},r,{holder:e}));t.current[o]=u,f((function(e){var t=e.findIndex((function(e){return e.key===r.key}));if(-1===t)return[].concat((0,a.default)(e),[u]);var n=(0,a.default)(e);return n[t]=u,n}))}n=!1}))},i.createElement(i.Fragment,null,o)]};var a=n(r(598)),l=n(r(573)),u=n(r(575)),i=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=f(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),c=n(r(743));function f(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(f=function(e){return e?r:t})(e)}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTransitionName=t.getTransitionDirection=t.default=void 0;var n=function(){return{height:0,opacity:0}},o=function(e){return{height:e.scrollHeight,opacity:1}},a=function(e,t){return!0===(null==t?void 0:t.deadline)||"height"===t.propertyName},l={motionName:"ant-motion-collapse",onAppearStart:n,onEnterStart:n,onAppearActive:o,onEnterActive:o,onLeaveStart:function(e){return{height:e?e.offsetHeight:0}},onLeaveActive:n,onAppearEnd:a,onEnterEnd:a,onLeaveEnd:a,motionDeadline:500};(0,r(588).tuple)("bottomLeft","bottomRight","topLeft","topRight");t.getTransitionDirection=function(e){return void 0===e||"topLeft"!==e&&"topRight"!==e?"slide-up":"slide-down"};t.getTransitionName=function(e,t,r){return void 0!==r?r:"".concat(e,"-").concat(t)};var u=l;t.default=u},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.useState(e),r=(0,a.default)(t,2),n=r[0],o=r[1];return l.useEffect((function(){var t=setTimeout((function(){o(e)}),e.length?0:10);return function(){clearTimeout(t)}}),[e]),n};var a=o(r(575)),l=n(r(0))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFieldId=function(e,t){if(!e.length)return;var r=e.join("_");if(t)return"".concat(t,"_").concat(r);return n.includes(r)?"".concat("form_item","_").concat(r):r},t.toArray=function(e){return void 0===e||!1===e?[]:Array.isArray(e)?e:[e]};var n=["parentNode"]},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.useRef(!1),r=l.useState(e),n=(0,a.default)(r,2),o=n[0],u=n[1];return l.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[o,function(e,r){if(r&&t.current)return;u(e)}]};var a=o(r(575)),l=n(r(0))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e){return+setTimeout(e,16)},o=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(n=function(e){return window.requestAnimationFrame(e)},o=function(e){return window.cancelAnimationFrame(e)});var a=0,l=new Map;function u(e){l.delete(e)}var i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=a+=1;function o(t){if(0===t)u(r),e();else{var a=n((function(){o(t-1)}));l.set(r,a)}}return o(t),r};i.cancel=function(e){var t=l.get(e);return u(t),o(t)};var c=i;t.default=c},function(e,t,r){"use strict";var n=r(570).default,o=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.useLayoutUpdateEffect=t.default=void 0;var a=o(r(0)),l=(0,n(r(599)).default)()?a.useLayoutEffect:a.useEffect,u=function(e,t){var r=a.useRef(!0);l((function(){return e(r.current)}),t),l((function(){return r.current=!1,function(){r.current=!0}}),[])};t.useLayoutUpdateEffect=function(e,t){u((function(t){if(!t)return e()}),t)};var i=u;t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)({});t.default=n},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.responsiveMap=t.responsiveArray=t.default=void 0;var o=n(r(574)),a=n(r(573));t.responsiveArray=["xxl","xl","lg","md","sm","xs"];var l={xs:"(max-width: 575px)",sm:"(min-width: 576px)",md:"(min-width: 768px)",lg:"(min-width: 992px)",xl:"(min-width: 1200px)",xxl:"(min-width: 1600px)"};t.responsiveMap=l;var u=new Map,i=-1,c={},f={matchHandlers:{},dispatch:function(e){return c=e,u.forEach((function(e){return e(c)})),u.size>=1},subscribe:function(e){return u.size||this.register(),i+=1,u.set(i,e),e(c),i},unsubscribe:function(e){u.delete(e),u.size||this.unregister()},unregister:function(){var e=this;Object.keys(l).forEach((function(t){var r=l[t],n=e.matchHandlers[r];null==n||n.mql.removeListener(null==n?void 0:n.listener)})),u.clear()},register:function(){var e=this;Object.keys(l).forEach((function(t){var r=l[t],n=function(r){var n=r.matches;e.dispatch((0,a.default)((0,a.default)({},c),(0,o.default)({},t,n)))},u=window.matchMedia(r);u.addListener(n),e.matchHandlers[r]={mql:u,listener:n},n(u)}))}};t.default=f},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=t||{},n=r.defaultValue,c=r.value,f=r.onChange,s=r.postState,d=(0,u.default)((function(){return i(c)?c:i(n)?"function"==typeof n?n():n:"function"==typeof e?e():e})),p=(0,o.default)(d,2),v=p[0],m=p[1],y=void 0!==c?c:v,g=s?s(y):y,b=(0,a.default)(f),h=(0,u.default)([y]),x=(0,o.default)(h,2),C=x[0],w=x[1];(0,l.useLayoutUpdateEffect)((function(){var e=C[0];v!==e&&b(v,e)}),[C]),(0,l.useLayoutUpdateEffect)((function(){i(c)||m(c)}),[c]);var O=(0,a.default)((function(e,t){m(e,t),w([y],t)}));return[g,O]};var o=n(r(575)),a=n(r(787)),l=r(675),u=n(r(673));function i(e){return void 0!==e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=(0,n.useRef)([]),o=function(){r.current.push(setTimeout((function(){var t,r,n,o;(null===(t=e.current)||void 0===t?void 0:t.input)&&"password"===(null===(r=e.current)||void 0===r?void 0:r.input.getAttribute("type"))&&(null===(n=e.current)||void 0===n?void 0:n.input.hasAttribute("value"))&&(null===(o=e.current)||void 0===o||o.input.removeAttribute("value"))})))};return(0,n.useEffect)((function(){return t&&o(),function(){return r.current.forEach((function(e){e&&clearTimeout(e)}))}}),[]),o};var n=r(0)},,,,,,,,,,,,,,,,,,function(e,t,r){"use strict";var n=r(3),o=r(0),a={icon:function(e,t){return{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M81.8 537.8a60.3 60.3 0 010-51.5C176.6 286.5 319.8 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c-192.1 0-335.4-100.5-430.2-300.2z",fill:t}},{tag:"path",attrs:{d:"M512 258c-161.3 0-279.4 81.8-362.7 254C232.6 684.2 350.7 766 512 766c161.4 0 279.5-81.8 362.7-254C791.4 339.8 673.3 258 512 258zm-4 430c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z",fill:t}},{tag:"path",attrs:{d:"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258s279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z",fill:e}},{tag:"path",attrs:{d:"M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z",fill:e}}]}},name:"eye",theme:"twotone"},l=r(14),u=function(e,t){return o.createElement(l.a,Object(n.a)(Object(n.a)({},e),{},{ref:t,icon:a}))};u.displayName="EyeTwoTone";t.a=o.forwardRef(u)},function(e,t,r){"use strict";var n=r(3),o=r(0),a={icon:function(e,t){return{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M254.89 758.85l125.57-125.57a176 176 0 01248.82-248.82L757 256.72Q651.69 186.07 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q69.27 145.91 173.09 221.05zM942.2 486.2Q889.46 375.11 816.7 305L672.48 449.27a176.09 176.09 0 01-227.22 227.21L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5z",fill:t}},{tag:"path",attrs:{d:"M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zM878.63 165.56L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z",fill:e}},{tag:"path",attrs:{d:"M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z",fill:e}}]}},name:"eye-invisible",theme:"twotone"},l=r(14),u=function(e,t){return o.createElement(l.a,Object(n.a)(Object(n.a)({},e),{},{ref:t,icon:a}))};u.displayName="EyeInvisibleTwoTone";t.a=o.forwardRef(u)},,,,,,,,,,,function(e,t,r){"use strict";var n=r(6),o=r(710);n({target:"String",proto:!0,forced:r(711)("sub")},{sub:function(){return o(this,"sub","","")}})},function(e,t,r){"use strict";var n=r(11),o=r(89),a=r(49),l=/"/g,u=n("".replace);e.exports=function(e,t,r,n){var i=a(o(e)),c="<"+t;return""!==r&&(c+=" "+r+'="'+u(a(n),l,"&quot;")+'"'),c+">"+i+"</"+t+">"}},function(e,t,r){"use strict";var n=r(13);e.exports=function(e){return n((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},,function(e,t,r){"use strict";function n(e){this.message=e}n.prototype=new Error,n.prototype.name="InvalidCharacterError";var o="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new n("'atob' failed: The string to be decoded is not correctly encoded.");for(var r,o,a=0,l=0,u="";o=t.charAt(l++);~o&&(r=a%4?64*r+o:o,a++%4)?u+=String.fromCharCode(255&r>>(-2*a&6)):0)o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o);return u};function a(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(o(e).replace(/(.)/g,(function(e,t){var r=t.charCodeAt(0).toString(16).toUpperCase();return r.length<2&&(r="0"+r),"%"+r})))}(t)}catch(e){return o(t)}}function l(e){this.message=e}l.prototype=new Error,l.prototype.name="InvalidTokenError",t.a=function(e,t){if("string"!=typeof e)throw new l("Invalid token specified");var r=!0===(t=t||{}).header?0:1;try{return JSON.parse(a(e.split(".")[r]))}catch(e){throw new l("Invalid token specified: "+e.message)}}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;o(r(586));var a=r(580),l=o(r(653)),u=n(r(768)),i=o(r(770)),c=o(r(792)),f=o(r(793)),s=u.default;s.Item=i.default,s.List=c.default,s.ErrorList=l.default,s.useForm=u.useForm,s.useFormInstance=f.default,s.useWatch=u.useWatch,s.Provider=a.FormProvider,s.create=function(){};var d=s;t.default=d},function(e,t,r){var n=r(572).default;e.exports=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(654);e.exports=function(e){if(Array.isArray(e))return n(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=f,t.merge=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=d(t[0]);return t.forEach((function(e){!function t(r,a){var u=new Set(a),c=(0,i.default)(e,r),v=Array.isArray(c);if(v||s(c)){if(!u.has(c)){u.add(c);var m=(0,i.default)(n,r);v?n=f(n,r,[]):m&&"object"===(0,o.default)(m)||(n=f(n,r,d(c))),p(c).forEach((function(e){t([].concat((0,l.default)(r),[e]),u)}))}}else n=f(n,r,c)}([])})),n};var o=n(r(572)),a=n(r(577)),l=n(r(598)),u=n(r(719)),i=n(r(720));function c(e,t,r,n){if(!t.length)return r;var o,i=(0,u.default)(t),f=i[0],s=i.slice(1);return o=e||"number"!=typeof f?Array.isArray(e)?(0,l.default)(e):(0,a.default)({},e):[],n&&void 0===r&&1===s.length?delete o[f][s[0]]:o[f]=c(o[f],s,r,n),o}function f(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&n&&void 0===r&&!(0,i.default)(e,t.slice(0,-1))?e:c(e,t,r,n)}function s(e){return"object"===(0,o.default)(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function d(e){return Array.isArray(e)?[]:{}}var p="undefined"==typeof Reflect?Object.keys:Reflect.ownKeys},function(e,t,r){var n=r(657),o=r(655),a=r(617),l=r(658);e.exports=function(e){return n(e)||o(e)||a(e)||l()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(var r=e,n=0;n<t.length;n+=1){if(null==r)return;r=r[t[n]]}return r}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ANT_MARK=void 0;var a=o(r(573)),l=n(r(0)),u=(o(r(586)),r(722)),i=o(r(662));t.ANT_MARK="internalMark";var c=function(e){var t=e.locale,r=void 0===t?{}:t,n=e.children;e._ANT_MARK__;l.useEffect((function(){return(0,u.changeConfirmLocale)(r&&r.Modal),function(){(0,u.changeConfirmLocale)()}}),[r]);var o=l.useMemo((function(){return(0,a.default)((0,a.default)({},r),{exist:!0})}),[r]);return l.createElement(i.default.Provider,{value:o},n)};t.default=c},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.changeConfirmLocale=function(e){l=e?(0,o.default)((0,o.default)({},l),e):(0,o.default)({},a.default.Modal)},t.getConfirmLocale=function(){return l};var o=n(r(573)),a=n(r(603)),l=(0,o.default)({},a.default.Modal)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"}},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(660)).default;t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"OK",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"};t.default=n},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(603)).default;t.default=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(728)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="CheckCircleFilled";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"}},function(e,t){e.exports=function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,l,u=[],i=!0,c=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;i=!1}else for(;!(i=(n=a.call(r)).done)&&(u.push(n.value),u.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{if(!i&&null!=r.return&&(l=r.return(),Object(l)!==l))return}finally{if(c)throw o}}return u}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!e)return!1;if(e.contains)return e.contains(t);var r=t;for(;r;){if(r===e)return!0;r=r.parentNode}return!1}},function(e,t,r){"use strict";var n=r(570);Object.defineProperty(t,"__esModule",{value:!0}),t.getTwoToneColor=function(){var e=a.default.getTwoToneColors();if(!e.calculated)return e.primaryColor;return[e.primaryColor,e.secondaryColor]},t.setTwoToneColor=function(e){var t=(0,l.normalizeTwoToneColors)(e),r=(0,o.default)(t,2),n=r[0],u=r[1];return a.default.setTwoToneColors({primaryColor:n,secondaryColor:u})};var o=n(r(575)),a=n(r(666)),l=r(620)},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(734)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="CloseCircleFilled";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z"}}]},name:"close-circle",theme:"filled"}},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(736)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="ExclamationCircleFilled";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(738))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(739)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="InfoCircleFilled";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"}},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(741)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="LoadingOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return function(){var r,n,o=null,s={add:function(e,t){null==o||o.component.add(e,t)}},d=(0,u.default)(s),p=(0,l.default)(d,2),v=p[0],m=p[1];var y=i.useRef({});return y.current.open=function(l){var u=l.prefixCls,i=r("message",u),f=r(),s=l.key||(0,c.getKeyThenIncreaseKey)(),d=new Promise((function(r){var u=function(){return"function"==typeof l.onClose&&l.onClose(),r(!0)};e((0,a.default)((0,a.default)({},l),{prefixCls:i,rootPrefixCls:f,getPopupContainer:n}),(function(e){var r=e.prefixCls,n=e.instance;o=n,v(t((0,a.default)((0,a.default)({},l),{key:s,onClose:u}),r))}))})),p=function(){o&&o.removeNotice(s)};return p.then=function(e,t){return d.then(e,t)},p.promise=d,p},c.typeList.forEach((function(e){return(0,c.attachTypeApi)(y.current,e)})),[y.current,i.createElement(f.ConfigConsumer,{key:"holder"},(function(e){return r=e.getPrefixCls,n=e.getPopupContainer,m}))]}};var a=o(r(573)),l=o(r(575)),u=o(r(668)),i=n(r(0)),c=r(619),f=r(576)},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(573)),l=n(r(574)),u=n(r(623)),i=n(r(624)),c=n(r(625)),f=n(r(626)),s=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=v(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),d=n(r(47)),p=n(r(5));function v(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(v=function(e){return e?r:t})(e)}var m=function(e){(0,c.default)(r,e);var t=(0,f.default)(r);function r(){var e;(0,u.default)(this,r);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var r=e.props,n=r.onClose,o=r.noticeKey;n&&n(o)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return(0,i.default)(r,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){(this.props.duration!==e.duration||this.props.updateMark!==e.updateMark||this.props.visible!==e.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var e=this,t=this.props,r=t.prefixCls,n=t.className,o=t.closable,u=t.closeIcon,i=t.style,c=t.onClick,f=t.children,v=t.holder,m="".concat(r,"-notice"),y=Object.keys(this.props).reduce((function(t,r){return"data-"!==r.substr(0,5)&&"aria-"!==r.substr(0,5)&&"role"!==r||(t[r]=e.props[r]),t}),{}),g=s.createElement("div",(0,a.default)({className:(0,p.default)(m,n,(0,l.default)({},"".concat(m,"-closable"),o)),style:i,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:c},y),s.createElement("div",{className:"".concat(m,"-content")},f),o?s.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(m,"-close")},u||s.createElement("span",{className:"".concat(m,"-close-x")})):null);return v?d.default.createPortal(g,v):g}}]),r}(s.Component);t.default=m,m.defaultProps={onClose:function(){},duration:1.5}},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,r(t,n)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,r(t)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(572).default,o=r(669);e.exports=function(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return o(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.getInstance=t.default=void 0;var a,l,u,i=o(r(749)),c=o(r(573)),f=o(r(574)),s=o(r(750)),d=o(r(753)),p=o(r(756)),v=o(r(759)),m=o(r(762)),y=o(r(5)),g=o(r(192)),b=n(r(0)),h=n(r(576)),x=o(r(765)),C=function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function l(e){try{i(n.next(e))}catch(e){a(e)}}function u(e){try{i(n.throw(e))}catch(e){a(e)}}function i(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(l,u)}i((n=n.apply(e,t||[])).next())}))},w={},O=4.5,_=24,P=24,j="",M="topRight",E=!1;function k(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:P;switch(e){case"top":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:r,bottom:"auto"};break;case"topLeft":t={left:0,top:r,bottom:"auto"};break;case"topRight":t={right:0,top:r,bottom:"auto"};break;case"bottom":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:"auto",bottom:n};break;case"bottomLeft":t={left:0,top:"auto",bottom:n};break;default:t={right:0,top:"auto",bottom:n}}return t}function S(e,t){var r=e.placement,n=void 0===r?M:r,o=e.top,l=e.bottom,i=e.getContainer,c=void 0===i?a:i,s=e.prefixCls,d=(0,h.globalConfig)(),p=d.getPrefixCls,v=d.getIconPrefixCls,m=p("notification",s||j),b=v(),x="".concat(m,"-").concat(n),C=w[x];if(C)Promise.resolve(C).then((function(e){t({prefixCls:"".concat(m,"-notice"),iconPrefixCls:b,instance:e})}));else{var O=(0,y.default)("".concat(m,"-").concat(n),(0,f.default)({},"".concat(m,"-rtl"),!0===E));w[x]=new Promise((function(e){g.default.newInstance({prefixCls:m,className:O,style:k(n,o,l),getContainer:c,maxCount:u},(function(r){e(r),t({prefixCls:"".concat(m,"-notice"),iconPrefixCls:b,instance:r})}))}))}}var N={success:s.default,info:m.default,error:d.default,warning:v.default};function T(e,t,r){var n=e.duration,o=e.icon,a=e.type,u=e.description,i=e.message,c=e.btn,s=e.onClose,d=e.onClick,v=e.key,m=e.style,g=e.className,x=e.closeIcon,C=void 0===x?l:x,w=e.props,_=void 0===n?O:n,P=null;o?P=b.createElement("span",{className:"".concat(t,"-icon")},e.icon):a&&(P=b.createElement(N[a]||null,{className:"".concat(t,"-icon ").concat(t,"-icon-").concat(a)}));var j=void 0===C?b.createElement("span",{className:"".concat(t,"-close-x")},b.createElement(p.default,{className:"".concat(t,"-close-icon")})):C,M=!u&&P?b.createElement("span",{className:"".concat(t,"-message-single-line-auto-margin")}):null;return{content:b.createElement(h.default,{iconPrefixCls:r},b.createElement("div",{className:P?"".concat(t,"-with-icon"):"",role:"alert"},P,b.createElement("div",{className:"".concat(t,"-message")},M,i),b.createElement("div",{className:"".concat(t,"-description")},u),c?b.createElement("span",{className:"".concat(t,"-btn")},c):null)),duration:_,closable:!0,closeIcon:j,onClose:s,onClick:d,key:v,style:m||{},className:(0,y.default)(g,(0,f.default)({},"".concat(t,"-").concat(a),!!a)),props:w}}var I={open:function(e){S(e,(function(t){var r=t.prefixCls,n=t.iconPrefixCls;t.instance.notice(T(e,r,n))}))},close:function(e){Object.keys(w).forEach((function(t){return Promise.resolve(w[t]).then((function(t){t.removeNotice(e)}))}))},config:function(e){var t=e.duration,r=e.placement,n=e.bottom,o=e.top,i=e.getContainer,c=e.closeIcon,f=e.prefixCls;void 0!==f&&(j=f),void 0!==t&&(O=t),void 0!==r?M=r:e.rtl&&(M="topLeft"),void 0!==n&&(P=n),void 0!==o&&(_=o),void 0!==i&&(a=i),void 0!==c&&(l=c),void 0!==e.rtl&&(E=e.rtl),void 0!==e.maxCount&&(u=e.maxCount)},destroy:function(){Object.keys(w).forEach((function(e){Promise.resolve(w[e]).then((function(e){e.destroy()})),delete w[e]}))}};["success","info","warning","error"].forEach((function(e){I[e]=function(t){return I.open((0,c.default)((0,c.default)({},t),{type:e}))}})),I.warn=I.warning,I.useNotification=(0,x.default)(S,T);t.getInstance=function(e){return C(void 0,void 0,void 0,(0,i.default)().mark((function e(){return(0,i.default)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",null);case 1:case"end":return e.stop()}}),e)})))};var A=I;t.default=A},function(e,t,r){var n=r(572).default;function o(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */e.exports=o=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},r=Object.prototype,a=r.hasOwnProperty,l=Object.defineProperty||function(e,t,r){e[t]=r.value},u="function"==typeof Symbol?Symbol:{},i=u.iterator||"@@iterator",c=u.asyncIterator||"@@asyncIterator",f=u.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function d(e,t,r,n){var o=t&&t.prototype instanceof m?t:m,a=Object.create(o.prototype),u=new E(n||[]);return l(a,"_invoke",{value:_(e,r,u)}),a}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=d;var v={};function m(){}function y(){}function g(){}var b={};s(b,i,(function(){return this}));var h=Object.getPrototypeOf,x=h&&h(h(k([])));x&&x!==r&&a.call(x,i)&&(b=x);var C=g.prototype=m.prototype=Object.create(b);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){var r;l(this,"_invoke",{value:function(o,l){function u(){return new t((function(r,u){!function r(o,l,u,i){var c=p(e[o],e,l);if("throw"!==c.type){var f=c.arg,s=f.value;return s&&"object"==n(s)&&a.call(s,"__await")?t.resolve(s.__await).then((function(e){r("next",e,u,i)}),(function(e){r("throw",e,u,i)})):t.resolve(s).then((function(e){f.value=e,u(f)}),(function(e){return r("throw",e,u,i)}))}i(c.arg)}(o,l,r,u)}))}return r=r?r.then(u,u):u()}})}function _(e,t,r){var n="suspendedStart";return function(o,a){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw a;return{value:void 0,done:!0}}for(r.method=o,r.arg=a;;){var l=r.delegate;if(l){var u=P(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var i=p(e,t,r);if("normal"===i.type){if(n=r.done?"completed":"suspendedYield",i.arg===v)continue;return{value:i.arg,done:r.done}}"throw"===i.type&&(n="completed",r.method="throw",r.arg=i.arg)}}}function P(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,P(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=p(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,v):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function M(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function k(e){if(e||""===e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(a.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}throw new TypeError(n(e)+" is not iterable")}return y.prototype=g,l(C,"constructor",{value:g,configurable:!0}),l(g,"constructor",{value:y,configurable:!0}),y.displayName=s(g,f,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,f,"GeneratorFunction")),e.prototype=Object.create(C),e},t.awrap=function(e){return{__await:e}},w(O.prototype),s(O.prototype,c,(function(){return this})),t.AsyncIterator=O,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var l=new O(d(e,r,n,o),a);return t.isGeneratorFunction(r)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},w(C),s(C,f,"Generator"),s(C,i,(function(){return this})),s(C,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(M),!e)for(var t in this)"t"===t.charAt(0)&&a.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,n){return l.type="throw",l.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],l=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var u=a.call(o,"catchLoc"),i=a.call(o,"finallyLoc");if(u&&i){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!i)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&a.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),M(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;M(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:k(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),v}},t}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(751))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(752)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="CheckCircleOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"check-circle",theme:"outlined"}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(754))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(755)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="CloseCircleOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm0 76c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm128.01 198.83c.03 0 .05.01.09.06l45.02 45.01a.2.2 0 01.05.09.12.12 0 010 .07c0 .02-.01.04-.05.08L557.25 512l127.87 127.86a.27.27 0 01.05.06v.02a.12.12 0 010 .07c0 .03-.01.05-.05.09l-45.02 45.02a.2.2 0 01-.09.05.12.12 0 01-.07 0c-.02 0-.04-.01-.08-.05L512 557.25 384.14 685.12c-.04.04-.06.05-.08.05a.12.12 0 01-.07 0c-.03 0-.05-.01-.09-.05l-45.02-45.02a.2.2 0 01-.05-.09.12.12 0 010-.07c0-.02.01-.04.06-.08L466.75 512 338.88 384.14a.27.27 0 01-.05-.06l-.01-.02a.12.12 0 010-.07c0-.03.01-.05.05-.09l45.02-45.02a.2.2 0 01.09-.05.12.12 0 01.07 0c.02 0 .04.01.08.06L512 466.75l127.86-127.86c.04-.05.06-.06.08-.06a.12.12 0 01.07 0z"}}]},name:"close-circle",theme:"outlined"}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(757))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(758)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="CloseOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M799.86 166.31c.02 0 .04.02.08.06l57.69 57.7c.04.03.05.05.06.08a.12.12 0 010 .06c0 .03-.02.05-.06.09L569.93 512l287.7 287.7c.04.04.05.06.06.09a.12.12 0 010 .07c0 .02-.02.04-.06.08l-57.7 57.69c-.03.04-.05.05-.07.06a.12.12 0 01-.07 0c-.03 0-.05-.02-.09-.06L512 569.93l-287.7 287.7c-.04.04-.06.05-.09.06a.12.12 0 01-.07 0c-.02 0-.04-.02-.08-.06l-57.69-57.7c-.04-.03-.05-.05-.06-.07a.12.12 0 010-.07c0-.03.02-.05.06-.09L454.07 512l-287.7-287.7c-.04-.04-.05-.06-.06-.09a.12.12 0 010-.07c0-.02.02-.04.06-.08l57.7-57.69c.03-.04.05-.05.07-.06a.12.12 0 01.07 0c.03 0 .05.02.09.06L512 454.07l287.7-287.7c.04-.04.06-.05.09-.06a.12.12 0 01.07 0z"}}]},name:"close",theme:"outlined"}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(760))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(761)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="ExclamationCircleOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"}}]},name:"exclamation-circle",theme:"outlined"}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(763))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(764)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="InfoCircleOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"}}]},name:"info-circle",theme:"outlined"}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return function(){var r,n=null,o={add:function(e,t){null==n||n.component.add(e,t)}},f=(0,u.default)(o),s=(0,l.default)(f,2),d=s[0],p=s[1];var v=i.useRef({});return v.current.open=function(o){var l=o.prefixCls,u=r("notification",l);e((0,a.default)((0,a.default)({},o),{prefixCls:u}),(function(e){var r=e.prefixCls,a=e.instance;n=a,d(t(o,r))}))},["success","info","warning","error"].forEach((function(e){v.current[e]=function(t){return v.current.open((0,a.default)((0,a.default)({},t),{type:e}))}})),[v.current,i.createElement(c.ConfigConsumer,{key:"holder"},(function(e){return r=e.getPrefixCls,p}))]}};var a=o(r(573)),l=o(r(575)),u=o(r(668)),i=n(r(0)),c=r(576)},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigContext=t.ConfigConsumer=void 0,t.withConfigConsumer=function(e){return function(t){var r=t.constructor;r&&r.displayName||t.name;return function(r){return l.createElement(i,null,(function(n){var o=e.prefixCls,u=(0,n.getPrefixCls)(o,r.prefixCls);return l.createElement(t,(0,a.default)({},n,r,{prefixCls:u}))}))}}};var a=o(r(573)),l=n(r(0)),u=l.createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")}});t.ConfigContext=u;var i=u.Consumer;t.ConfigConsumer=i},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.getStyle=c,t.registerTheme=function(e,t){var r=c(e,t);(0,l.default)()&&(0,u.updateCSS)(r,"".concat(i,"-dynamic-theme"))};var o=r(152),a=r(356),l=n(r(599)),u=r(621),i=(n(r(586)),"-ant-".concat(Date.now(),"-").concat(Math.random()));function c(e,t){var r={},n=function(e,t){var r=e.clone();return(r=(null==t?void 0:t(r))||r).toRgbString()},l=function(e,t){var l=new a.TinyColor(e),u=(0,o.generate)(l.toRgbString());r["".concat(t,"-color")]=n(l),r["".concat(t,"-color-disabled")]=u[1],r["".concat(t,"-color-hover")]=u[4],r["".concat(t,"-color-active")]=u[6],r["".concat(t,"-color-outline")]=l.clone().setAlpha(.2).toRgbString(),r["".concat(t,"-color-deprecated-bg")]=u[0],r["".concat(t,"-color-deprecated-border")]=u[2]};if(t.primaryColor){l(t.primaryColor,"primary");var u=new a.TinyColor(t.primaryColor),i=(0,o.generate)(u.toRgbString());i.forEach((function(e,t){r["primary-".concat(t+1)]=e})),r["primary-color-deprecated-l-35"]=n(u,(function(e){return e.lighten(35)})),r["primary-color-deprecated-l-20"]=n(u,(function(e){return e.lighten(20)})),r["primary-color-deprecated-t-20"]=n(u,(function(e){return e.tint(20)})),r["primary-color-deprecated-t-50"]=n(u,(function(e){return e.tint(50)})),r["primary-color-deprecated-f-12"]=n(u,(function(e){return e.setAlpha(.12*e.getAlpha())}));var c=new a.TinyColor(i[0]);r["primary-color-active-deprecated-f-30"]=n(c,(function(e){return e.setAlpha(.3*e.getAlpha())})),r["primary-color-active-deprecated-d-02"]=n(c,(function(e){return e.darken(2)}))}t.successColor&&l(t.successColor,"success"),t.warningColor&&l(t.warningColor,"warning"),t.errorColor&&l(t.errorColor,"error"),t.infoColor&&l(t.infoColor,"info");var f=Object.keys(r).map((function(t){return"--".concat(e,"-").concat(t,": ").concat(r[t],";")}));return"\n  :root {\n    ".concat(f.join("\n"),"\n  }\n  ").trim()}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"List",{enumerable:!0,get:function(){return f.List}}),t.default=void 0,Object.defineProperty(t,"useForm",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"useWatch",{enumerable:!0,get:function(){return f.useWatch}});var a=o(r(573)),l=o(r(572)),u=o(r(575)),i=o(r(574)),c=o(r(5)),f=n(r(53)),s=n(r(0)),d=r(576),p=n(r(600)),v=n(r(591)),m=r(580),y=o(r(659)),g=o(r(769)),b=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},h=function(e,t){var r,n=s.useContext(v.default),o=s.useContext(p.default),h=s.useContext(d.ConfigContext),x=h.getPrefixCls,C=h.direction,w=h.form,O=e.prefixCls,_=e.className,P=void 0===_?"":_,j=e.size,M=void 0===j?n:j,E=e.disabled,k=void 0===E?o:E,S=e.form,N=e.colon,T=e.labelAlign,I=e.labelWrap,A=e.labelCol,R=e.wrapperCol,L=e.hideRequiredMark,F=e.layout,z=void 0===F?"horizontal":F,D=e.scrollToFirstError,W=e.requiredMark,B=e.onFinishFailed,q=e.name,$=b(e,["prefixCls","className","size","disabled","form","colon","labelAlign","labelWrap","labelCol","wrapperCol","hideRequiredMark","layout","scrollToFirstError","requiredMark","onFinishFailed","name"]),V=s.useContext(y.default),H=(0,s.useMemo)((function(){return void 0!==W?W:w&&void 0!==w.requiredMark?w.requiredMark:!L}),[L,W,w]),U=null!=N?N:null==w?void 0:w.colon,G=x("form",O),Y=(0,c.default)(G,(r={},(0,i.default)(r,"".concat(G,"-").concat(z),!0),(0,i.default)(r,"".concat(G,"-hide-required-mark"),!1===H),(0,i.default)(r,"".concat(G,"-rtl"),"rtl"===C),(0,i.default)(r,"".concat(G,"-").concat(M),M),r),P),K=(0,g.default)(S),Q=(0,u.default)(K,1)[0],X=Q.__INTERNAL__;X.name=q;var J=(0,s.useMemo)((function(){return{name:q,labelAlign:T,labelCol:A,labelWrap:I,wrapperCol:R,vertical:"vertical"===z,colon:U,requiredMark:H,itemRef:X.itemRef,form:Q}}),[q,T,A,R,z,U,H,Q]);s.useImperativeHandle(t,(function(){return Q}));return s.createElement(p.DisabledContextProvider,{disabled:k},s.createElement(v.SizeContextProvider,{size:M},s.createElement(m.FormProvider,(0,a.default)({},{validateMessages:V}),s.createElement(m.FormContext.Provider,{value:J},s.createElement(f.default,(0,a.default)({id:q},$,{name:q,onFinishFailed:function(e){null==B||B(e);var t={block:"nearest"};D&&e.errorFields.length&&("object"===(0,l.default)(D)&&(t=D),Q.scrollToField(e.errorFields[0].name,t))},form:Q,className:Y}))))))},x=s.forwardRef(h);t.default=x},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=(0,u.useForm)(),r=(0,l.default)(t,1)[0],n=i.useRef({}),o=i.useMemo((function(){return null!=e?e:(0,a.default)((0,a.default)({},r),{__INTERNAL__:{itemRef:function(e){return function(t){var r=s(e);t?n.current[r]=t:delete n.current[r]}}},scrollToField:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=(0,f.toArray)(e),n=(0,f.getFieldId)(r,o.__INTERNAL__.name),l=n?document.getElementById(n):null;l&&(0,c.default)(l,(0,a.default)({scrollMode:"if-needed",block:"nearest"},t))},getFieldInstance:function(e){var t=s(e);return n.current[t]}})}),[e,r]);return[o]};var a=o(r(573)),l=o(r(575)),u=r(53),i=n(r(0)),c=o(r(342)),f=r(672);function s(e){return(0,f.toArray)(e).join("_")}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(572)),l=o(r(573)),u=o(r(598)),i=o(r(575)),c=r(53),f=o(r(673)),s=r(592),d=n(r(0)),p=o(r(771)),v=r(576),m=r(593),y=r(588),g=(o(r(586)),r(580)),b=o(r(772)),h=o(r(773)),x=r(672),C=o(r(774)),w=((0,y.tuple)("success","warning","error","validating",""),d.memo((function(e){return e.children}),(function(e,t){return e.value===t.value&&e.update===t.update&&e.childProps.length===t.childProps.length&&e.childProps.every((function(e,r){return e===t.childProps[r]}))})));var O=function(e){var t=e.name,r=e.noStyle,n=e.dependencies,o=e.prefixCls,p=e.shouldUpdate,y=e.rules,O=e.children,_=e.required,P=e.label,j=e.messageVariables,M=e.trigger,E=void 0===M?"onChange":M,k=e.validateTrigger,S=e.hidden,N=(0,d.useContext)(v.ConfigContext).getPrefixCls,T=(0,d.useContext)(g.FormContext).name,I="function"==typeof O,A=(0,d.useContext)(g.NoStyleItemContext),R=(0,d.useContext)(c.FieldContext).validateTrigger,L=void 0!==k?k:R,F=function(e){return!(null==e)}(t),z=N("form",o),D=d.useContext(c.ListContext),W=d.useRef(),B=(0,b.default)({}),q=(0,i.default)(B,2),$=q[0],V=q[1],H=(0,f.default)((function(){return{errors:[],warnings:[],touched:!1,validating:!1,validated:!1,name:[]}})),U=(0,i.default)(H,2),G=U[0],Y=U[1],K=function(e,t){V((function(r){var n=(0,l.default)({},r),o=[].concat((0,u.default)(e.name.slice(0,-1)),(0,u.default)(t)).join("__SPLIT__");return e.destroy?delete n[o]:n[o]=e,n}))},Q=d.useMemo((function(){var e=(0,u.default)(G.errors),t=(0,u.default)(G.warnings);return Object.values($).forEach((function(r){e.push.apply(e,(0,u.default)(r.errors||[])),t.push.apply(t,(0,u.default)(r.warnings||[]))})),[e,t]}),[$,G.errors,G.warnings]),X=(0,i.default)(Q,2),J=X[0],Z=X[1],ee=(0,h.default)();function te(t,n,o){return r&&!S?t:d.createElement(C.default,(0,l.default)({key:"row"},e,{prefixCls:z,fieldId:n,isRequired:o,errors:J,warnings:Z,meta:G,onSubItemMetaChange:K}),t)}if(!F&&!I&&!n)return te(O);var re={};return"string"==typeof P?re.label=P:t&&(re.label=String(t)),j&&(re=(0,l.default)((0,l.default)({},re),j)),d.createElement(c.Field,(0,l.default)({},e,{messageVariables:re,trigger:E,validateTrigger:L,onMetaChange:function(e){var t=null==D?void 0:D.getKey(e.name);if(Y(e.destroy?{errors:[],warnings:[],touched:!1,validating:!1,validated:!1,name:[]}:e,!0),r&&A){var n=e.name;if(e.destroy)n=W.current||n;else if(void 0!==t){var o=(0,i.default)(t,2),a=o[0],l=o[1];n=[a].concat((0,u.default)(l)),W.current=n}A(e,n)}}}),(function(r,o,i){var c=(0,x.toArray)(t).length&&o?o.name:[],f=(0,x.getFieldId)(c,T),v=void 0!==_?_:!(!y||!y.some((function(e){if(e&&"object"===(0,a.default)(e)&&e.required&&!e.warningOnly)return!0;if("function"==typeof e){var t=e(i);return t&&t.required&&!t.warningOnly}return!1}))),g=(0,l.default)({},r),b=null;if(Array.isArray(O)&&F)b=O;else if(I&&(!p&&!n||F));else if(!n||I||F)if((0,m.isValidElement)(O)){var h=(0,l.default)((0,l.default)({},O.props),g);if(h.id||(h.id=f),e.help||J.length>0||Z.length>0||e.extra){var C=[];(e.help||J.length>0)&&C.push("".concat(f,"_help")),e.extra&&C.push("".concat(f,"_extra")),h["aria-describedby"]=C.join(" ")}J.length>0&&(h["aria-invalid"]="true"),v&&(h["aria-required"]="true"),(0,s.supportRef)(O)&&(h.ref=ee(c,O)),new Set([].concat((0,u.default)((0,x.toArray)(E)),(0,u.default)((0,x.toArray)(L)))).forEach((function(e){h[e]=function(){for(var t,r,n,o,a,l=arguments.length,u=new Array(l),i=0;i<l;i++)u[i]=arguments[i];null===(n=g[e])||void 0===n||(t=n).call.apply(t,[g].concat(u)),null===(a=(o=O.props)[e])||void 0===a||(r=a).call.apply(r,[o].concat(u))}}));var P=[h["aria-required"],h["aria-invalid"],h["aria-describedby"]];b=d.createElement(w,{value:g[e.valuePropName||"value"],update:O,childProps:P},(0,m.cloneElement)(O,h))}else b=I&&(p||n)&&!F?O(i):O;else;return te(b,f,v)}))};O.useStatus=p.default;var _=O;t.default=_},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(0),a=r(580),l=(n(r(586)),function(){return{status:(0,o.useContext)(a.FormItemInputContext).status}});t.default=l},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=u.useState(e),r=(0,a.default)(t,2),n=r[0],o=r[1],i=(0,u.useRef)(null),c=(0,u.useRef)([]),f=(0,u.useRef)(!1);return u.useEffect((function(){return f.current=!1,function(){f.current=!0,l.default.cancel(i.current),i.current=null}}),[]),[n,function(e){if(f.current)return;null===i.current&&(c.current=[],i.current=(0,l.default)((function(){i.current=null,o((function(e){var t=e;return c.current.forEach((function(e){t=e(t)})),t}))})));c.current.push(e)}]};var a=o(r(575)),l=o(r(674)),u=n(r(0))},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=u.useContext(i.FormContext).itemRef,t=u.useRef({});return function(r,n){var o=n&&"object"===(0,a.default)(n)&&n.ref,u=r.join("_");return t.current.name===u&&t.current.originRef===o||(t.current.name=u,t.current.originRef=o,t.current.ref=(0,l.composeRef)(e(r),o)),t.current.ref}};var a=o(r(572)),l=r(592),u=n(r(0)),i=r(580)},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,r=e.prefixCls,n=e.className,o=e.style,i=e.help,c=e.errors,f=e.warnings,s=e.validateStatus,O=e.meta,_=e.hasFeedback,P=e.hidden,j=e.children,M=e.fieldId,E=e.isRequired,k=e.onSubItemMetaChange,S=C(e,["prefixCls","className","style","help","errors","warnings","validateStatus","meta","hasFeedback","hidden","children","fieldId","isRequired","onSubItemMetaChange"]),N="".concat(r,"-item"),T=v.useContext(h.FormContext).requiredMark,I=v.useRef(null),A=(0,x.default)(c),R=(0,x.default)(f),L=null!=i,F=!!(L||c.length||f.length),z=v.useState(null),D=(0,u.default)(z,2),W=D[0],B=D[1];(0,d.default)((function(){if(F&&I.current){var e=getComputedStyle(I.current);B(parseInt(e.marginBottom,10))}}),[F]);var q="";void 0!==s?q=s:O.validating?q="validating":A.length?q="error":R.length?q="warning":O.touched&&(q="success");var $=v.useMemo((function(){var e;if(_){var t=q&&w[q];e=t?v.createElement("span",{className:(0,p.default)("".concat(N,"-feedback-icon"),"".concat(N,"-feedback-icon-").concat(q))},v.createElement(t,null)):null}return{status:q,hasFeedback:_,feedbackIcon:e,isFormItemInput:!0}}),[q,_]),V=(t={},(0,l.default)(t,N,!0),(0,l.default)(t,"".concat(N,"-with-help"),L||A.length||R.length),(0,l.default)(t,"".concat(n),!!n),(0,l.default)(t,"".concat(N,"-has-feedback"),q&&_),(0,l.default)(t,"".concat(N,"-has-success"),"success"===q),(0,l.default)(t,"".concat(N,"-has-warning"),"warning"===q),(0,l.default)(t,"".concat(N,"-has-error"),"error"===q),(0,l.default)(t,"".concat(N,"-is-validating"),"validating"===q),(0,l.default)(t,"".concat(N,"-hidden"),P),t);return v.createElement("div",{className:(0,p.default)(V),style:o,ref:I},v.createElement(y.Row,(0,a.default)({className:"".concat(N,"-row")},(0,m.default)(S,["_internalItemRender","colon","dependencies","extra","fieldKey","getValueFromEvent","getValueProps","htmlFor","id","initialValue","isListField","label","labelAlign","labelCol","labelWrap","messageVariables","name","normalize","noStyle","preserve","required","requiredMark","rules","shouldUpdate","trigger","tooltip","validateFirst","validateTrigger","valuePropName","wrapperCol"])),v.createElement(g.default,(0,a.default)({htmlFor:M,required:E,requiredMark:T},e,{prefixCls:r})),v.createElement(b.default,(0,a.default)({},e,O,{errors:A,warnings:R,prefixCls:r,status:q,help:i,marginBottom:W,onErrorVisibleChanged:function(e){e||B(null)}}),v.createElement(h.NoStyleItemContext.Provider,{value:k},v.createElement(h.FormItemInputContext.Provider,{value:$},j)))),!!W&&v.createElement("div",{className:"".concat(N,"-margin-offset"),style:{marginBottom:-W}}))};var a=o(r(573)),l=o(r(574)),u=o(r(575)),i=o(r(664)),c=o(r(604)),f=o(r(667)),s=o(r(622)),d=o(r(675)),p=o(r(5)),v=n(r(0)),m=o(r(597)),y=r(775),g=o(r(782)),b=o(r(791)),h=r(580),x=o(r(671)),C=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},w={success:i.default,warning:f.default,error:c.default,validating:s.default}},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Col",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"Row",{enumerable:!0,get:function(){return l.default}}),t.default=void 0;var o=n(r(627)),a=n(r(776)),l=n(r(778));var u={useBreakpoint:function(){return(0,a.default)()}};t.default=u},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(0),a=n(r(777)),l=n(r(677));var u=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=(0,o.useRef)({}),r=(0,a.default)();return(0,o.useEffect)((function(){var n=l.default.subscribe((function(n){t.current=n,e&&r()}));return function(){return l.default.unsubscribe(n)}}),[]),t.current};t.default=u},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=l.useReducer((function(e){return e+1}),0);return(0,a.default)(e,2)[1]};var a=o(r(575)),l=n(r(0))},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(572)),i=o(r(575)),c=o(r(5)),f=n(r(0)),s=r(576),d=o(r(779)),p=n(r(677)),v=r(588),m=o(r(676)),y=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};(0,v.tuple)("top","middle","bottom","stretch"),(0,v.tuple)("start","end","center","space-around","space-between","space-evenly");function g(e,t){var r=f.useState("string"==typeof e?e:""),n=(0,i.default)(r,2),o=n[0],a=n[1];return f.useEffect((function(){!function(){if("string"==typeof e&&a(e),"object"===(0,u.default)(e))for(var r=0;r<p.responsiveArray.length;r++){var n=p.responsiveArray[r];if(t[n]){var o=e[n];if(void 0!==o)return void a(o)}}}()}),[JSON.stringify(e),t]),o}var b=f.forwardRef((function(e,t){var r,n=e.prefixCls,o=e.justify,v=e.align,b=e.className,h=e.style,x=e.children,C=e.gutter,w=void 0===C?0:C,O=e.wrap,_=y(e,["prefixCls","justify","align","className","style","children","gutter","wrap"]),P=f.useContext(s.ConfigContext),j=P.getPrefixCls,M=P.direction,E=f.useState({xs:!0,sm:!0,md:!0,lg:!0,xl:!0,xxl:!0}),k=(0,i.default)(E,2),S=k[0],N=k[1],T=f.useState({xs:!1,sm:!1,md:!1,lg:!1,xl:!1,xxl:!1}),I=(0,i.default)(T,2),A=I[0],R=I[1],L=g(v,A),F=g(o,A),z=(0,d.default)(),D=f.useRef(w);f.useEffect((function(){var e=p.default.subscribe((function(e){R(e);var t=D.current||0;(!Array.isArray(t)&&"object"===(0,u.default)(t)||Array.isArray(t)&&("object"===(0,u.default)(t[0])||"object"===(0,u.default)(t[1])))&&N(e)}));return function(){return p.default.unsubscribe(e)}}),[]);var W,B=j("row",n),q=(W=[void 0,void 0],(Array.isArray(w)?w:[w,void 0]).forEach((function(e,t){if("object"===(0,u.default)(e))for(var r=0;r<p.responsiveArray.length;r++){var n=p.responsiveArray[r];if(S[n]&&void 0!==e[n]){W[t]=e[n];break}}else W[t]=e})),W),$=(0,c.default)(B,(r={},(0,l.default)(r,"".concat(B,"-no-wrap"),!1===O),(0,l.default)(r,"".concat(B,"-").concat(F),F),(0,l.default)(r,"".concat(B,"-").concat(L),L),(0,l.default)(r,"".concat(B,"-rtl"),"rtl"===M),r),b),V={},H=null!=q[0]&&q[0]>0?q[0]/-2:void 0,U=null!=q[1]&&q[1]>0?q[1]/-2:void 0;if(H&&(V.marginLeft=H,V.marginRight=H),z){var G=(0,i.default)(q,2);V.rowGap=G[1]}else U&&(V.marginTop=U,V.marginBottom=U);var Y=(0,i.default)(q,2),K=Y[0],Q=Y[1],X=f.useMemo((function(){return{gutter:[K,Q],wrap:O,supportFlexGap:z}}),[K,Q,O,z]);return f.createElement(m.default.Provider,{value:X},f.createElement("div",(0,a.default)({},_,{className:$,style:(0,a.default)((0,a.default)({},V),h),ref:t}),x))}));t.default=b},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(575)),l=n(r(0)),u=r(780);t.default=function(){var e=l.useState(!1),t=(0,a.default)(e,2),r=t[0],n=t[1];return l.useEffect((function(){n((0,u.detectFlexGapSupported)())}),[]),r}},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.detectFlexGapSupported=t.canUseDocElement=void 0,Object.defineProperty(t,"isStyleSupport",{enumerable:!0,get:function(){return l.isStyleSupport}});var o,a=n(r(599)),l=r(781),u=function(){return(0,a.default)()&&window.document.documentElement};t.canUseDocElement=u;t.detectFlexGapSupported=function(){if(!u())return!1;if(void 0!==o)return o;var e=document.createElement("div");return e.style.display="flex",e.style.flexDirection="column",e.style.rowGap="1px",e.appendChild(document.createElement("div")),e.appendChild(document.createElement("div")),document.body.appendChild(e),o=1===e.scrollHeight,document.body.removeChild(e),o}},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.isStyleSupport=function(e,t){if(!Array.isArray(e)&&void 0!==t)return function(e,t){if(!a(e))return!1;var r=document.createElement("div"),n=r.style[e];return r.style[e]=t,r.style[e]!==n}(e,t);return a(e)};var o=n(r(599)),a=function(e){if((0,o.default)()&&window.document.documentElement){var t=Array.isArray(e)?e:[e],r=window.document.documentElement;return t.some((function(e){return e in r.style}))}return!1}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(575)),i=o(r(572)),c=o(r(783)),f=o(r(5)),s=n(r(0)),d=o(r(627)),p=r(663),v=o(r(603)),m=o(r(786)),y=r(580),g=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};var b=function(e){var t=e.prefixCls,r=e.label,n=e.htmlFor,o=e.labelCol,b=e.labelAlign,h=e.colon,x=e.required,C=e.requiredMark,w=e.tooltip,O=(0,p.useLocaleReceiver)("Form"),_=(0,u.default)(O,1)[0];return r?s.createElement(y.FormContext.Consumer,{key:"label"},(function(e){var u,p,y=e.vertical,O=e.labelAlign,P=e.labelCol,j=e.labelWrap,M=e.colon,E=o||P||{},k=b||O,S="".concat(t,"-item-label"),N=(0,f.default)(S,"left"===k&&"".concat(S,"-left"),E.className,(0,l.default)({},"".concat(S,"-wrap"),!!j)),T=r,I=!0===h||!1!==M&&!1!==h;I&&!y&&"string"==typeof r&&""!==r.trim()&&(T=r.replace(/[:|：]\s*$/,""));var A=function(e){return e?"object"!==(0,i.default)(e)||s.isValidElement(e)?{title:e}:e:null}(w);if(A){var R=A.icon,L=void 0===R?s.createElement(c.default,null):R,F=g(A,["icon"]),z=s.createElement(m.default,(0,a.default)({},F),s.cloneElement(L,{className:"".concat(t,"-item-tooltip"),title:""}));T=s.createElement(s.Fragment,null,T,z)}"optional"!==C||x||(T=s.createElement(s.Fragment,null,T,s.createElement("span",{className:"".concat(t,"-item-optional"),title:""},(null==_?void 0:_.optional)||(null===(p=v.default.Form)||void 0===p?void 0:p.optional))));var D=(0,f.default)((u={},(0,l.default)(u,"".concat(t,"-item-required"),x),(0,l.default)(u,"".concat(t,"-item-required-mark-optional"),"optional"===C),(0,l.default)(u,"".concat(t,"-item-no-colon"),!I),u));return s.createElement(d.default,(0,a.default)({},E,{className:N}),s.createElement("label",{htmlFor:n,className:D,title:"string"==typeof r?r:""},T))})):null};t.default=b},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(784))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(785)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="QuestionCircleOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z"}}]},name:"question-circle",theme:"outlined"}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(574)),l=o(r(575)),u=o(r(573)),i=o(r(5)),c=o(r(339)),f=o(r(678)),s=n(r(0)),d=r(576),p=r(788),v=r(670),m=o(r(789)),y=r(593),g=(o(r(586)),function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}),b=new RegExp("^(".concat(p.PresetColorTypes.join("|"),")(-inverse)?$"));function h(e,t){var r=e.type;if((!0===r.__ANT_BUTTON||"button"===e.type)&&e.props.disabled||!0===r.__ANT_SWITCH&&(e.props.disabled||e.props.loading)||!0===r.__ANT_RADIO&&e.props.disabled){var n=function(e,t){var r={},n=(0,u.default)({},e);return t.forEach((function(t){e&&t in e&&(r[t]=e[t],delete n[t])})),{picked:r,omitted:n}}(e.props.style,["position","left","right","top","bottom","float","display","zIndex"]),o=n.picked,a=n.omitted,l=(0,u.default)((0,u.default)({display:"inline-block"},o),{cursor:"not-allowed",width:e.props.block?"100%":void 0}),c=(0,u.default)((0,u.default)({},a),{pointerEvents:"none"}),f=(0,y.cloneElement)(e,{style:c,className:null});return s.createElement("span",{style:l,className:(0,i.default)(e.props.className,"".concat(t,"-disabled-compatible-wrapper"))},f)}return e}var x=s.forwardRef((function(e,t){var r,n=s.useContext(d.ConfigContext),o=n.getPopupContainer,p=n.getPrefixCls,x=n.direction;var C=(0,f.default)(!1,{value:void 0!==e.open?e.open:e.visible,defaultValue:void 0!==e.defaultOpen?e.defaultOpen:e.defaultVisible}),w=(0,l.default)(C,2),O=w[0],_=w[1],P=function(){var t=e.title,r=e.overlay;return!t&&!r&&0!==t},j=function(){var t=e.builtinPlacements,r=e.arrowPointAtCenter,n=void 0!==r&&r,o=e.autoAdjustOverflow,a=void 0===o||o;return t||(0,m.default)({arrowPointAtCenter:n,autoAdjustOverflow:a})},M=e.getPopupContainer,E=e.placement,k=void 0===E?"top":E,S=e.mouseEnterDelay,N=void 0===S?.1:S,T=e.mouseLeaveDelay,I=void 0===T?.1:T,A=g(e,["getPopupContainer","placement","mouseEnterDelay","mouseLeaveDelay"]),R=e.prefixCls,L=e.openClassName,F=e.getTooltipContainer,z=e.overlayClassName,D=e.color,W=e.overlayInnerStyle,B=e.children,q=p("tooltip",R),$=p(),V=O;"open"in e||"visible"in e||!P()||(V=!1);var H,U,G=h((0,y.isValidElement)(B)&&!(0,y.isFragment)(B)?B:s.createElement("span",null,B),q),Y=G.props,K=Y.className&&"string"!=typeof Y.className?Y.className:(0,i.default)(Y.className,(0,a.default)({},L||"".concat(q,"-open"),!0)),Q=(0,i.default)(z,(r={},(0,a.default)(r,"".concat(q,"-rtl"),"rtl"===x),(0,a.default)(r,"".concat(q,"-").concat(D),D&&b.test(D)),r)),X=W,J={};return D&&!b.test(D)&&(X=(0,u.default)((0,u.default)({},W),{background:D}),J={"--antd-arrow-background-color":D}),s.createElement(c.default,(0,u.default)({},A,{placement:k,mouseEnterDelay:N,mouseLeaveDelay:I,prefixCls:q,overlayClassName:Q,getTooltipContainer:M||F||o,ref:t,builtinPlacements:j(),overlay:(H=e.title,U=e.overlay,0===H?H:U||H||""),visible:V,onVisibleChange:function(t){var r,n;_(!P()&&t),P()||(null===(r=e.onOpenChange)||void 0===r||r.call(e,t),null===(n=e.onVisibleChange)||void 0===n||n.call(e,t))},onPopupAlign:function(e,t){var r=j(),n=Object.keys(r).find((function(e){var n,o;return r[e].points[0]===(null===(n=t.points)||void 0===n?void 0:n[0])&&r[e].points[1]===(null===(o=t.points)||void 0===o?void 0:o[1])}));if(n){var o=e.getBoundingClientRect(),a={top:"50%",left:"50%"};/top|Bottom/.test(n)?a.top="".concat(o.height-t.offset[1],"px"):/Top|bottom/.test(n)&&(a.top="".concat(-t.offset[1],"px")),/left|Right/.test(n)?a.left="".concat(o.width-t.offset[0],"px"):/right|Left/.test(n)&&(a.left="".concat(-t.offset[0],"px")),e.style.transformOrigin="".concat(a.left," ").concat(a.top)}},overlayInnerStyle:X,arrowContent:s.createElement("span",{className:"".concat(q,"-arrow-content"),style:J}),motion:{motionName:(0,v.getTransitionName)($,"zoom-big-fast",e.transitionName),motionDeadline:1e3}}),V?(0,y.cloneElement)(G,{className:K}):G)}));t.default=x},function(e,t,r){"use strict";var n=r(571).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=o.useRef();return t.current=e,o.useCallback((function(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return null===(e=t.current)||void 0===e?void 0:e.call.apply(e,[t].concat(n))}),[])};var o=n(r(0))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PresetStatusColorTypes=t.PresetColorTypes=void 0;var n=r(588),o=(0,n.tuple)("success","processing","error","default","warning");t.PresetStatusColorTypes=o;var a=(0,n.tuple)("pink","red","yellow","orange","cyan","green","blue","purple","geekblue","magenta","volcano","gold","lime");t.PresetColorTypes=a},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.arrowWidth,r=void 0===t?4:t,n=e.horizontalArrowShift,l=void 0===n?16:n,u=e.verticalArrowShift,f=void 0===u?8:u,s=e.autoAdjustOverflow,d=e.arrowPointAtCenter,p={left:{points:["cr","cl"],offset:[-4,0]},right:{points:["cl","cr"],offset:[4,0]},top:{points:["bc","tc"],offset:[0,-4]},bottom:{points:["tc","bc"],offset:[0,4]},topLeft:{points:["bl","tc"],offset:[-(l+r),-4]},leftTop:{points:["tr","cl"],offset:[-4,-(f+r)]},topRight:{points:["br","tc"],offset:[l+r,-4]},rightTop:{points:["tl","cr"],offset:[4,-(f+r)]},bottomRight:{points:["tr","bc"],offset:[l+r,4]},rightBottom:{points:["bl","cr"],offset:[4,f+r]},bottomLeft:{points:["tl","bc"],offset:[-(l+r),4]},leftBottom:{points:["br","cl"],offset:[-4,f+r]}};return Object.keys(p).forEach((function(e){p[e]=d?(0,o.default)((0,o.default)({},p[e]),{overflow:c(s),targetOffset:i}):(0,o.default)((0,o.default)({},a.placements[e]),{overflow:c(s)}),p[e].ignoreShake=!0})),p},t.getOverflowOptions=c;var o=n(r(573)),a=r(790),l={adjustX:1,adjustY:1},u={adjustX:0,adjustY:0},i=[0,0];function c(e){return"boolean"==typeof e?e?l:u:(0,o.default)((0,o.default)({},u),e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.placements=void 0;var n={adjustX:1,adjustY:1},o=[0,0],a={left:{points:["cr","cl"],overflow:n,offset:[-4,0],targetOffset:o},right:{points:["cl","cr"],overflow:n,offset:[4,0],targetOffset:o},top:{points:["bc","tc"],overflow:n,offset:[0,-4],targetOffset:o},bottom:{points:["tc","bc"],overflow:n,offset:[0,4],targetOffset:o},topLeft:{points:["bl","tl"],overflow:n,offset:[0,-4],targetOffset:o},leftTop:{points:["tr","tl"],overflow:n,offset:[-4,0],targetOffset:o},topRight:{points:["br","tr"],overflow:n,offset:[0,-4],targetOffset:o},rightTop:{points:["tl","tr"],overflow:n,offset:[4,0],targetOffset:o},bottomRight:{points:["tr","br"],overflow:n,offset:[0,4],targetOffset:o},rightBottom:{points:["bl","br"],overflow:n,offset:[4,0],targetOffset:o},bottomLeft:{points:["tl","bl"],overflow:n,offset:[0,4],targetOffset:o},leftBottom:{points:["br","bl"],overflow:n,offset:[-4,0],targetOffset:o}};t.placements=a;var l=a;t.default=l},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(573)),l=o(r(5)),u=n(r(0)),i=o(r(627)),c=r(580),f=o(r(653)),s=function(e){var t=e.prefixCls,r=e.status,n=e.wrapperCol,o=e.children,s=e.errors,d=e.warnings,p=e._internalItemRender,v=e.extra,m=e.help,y=e.fieldId,g=e.marginBottom,b=e.onErrorVisibleChanged,h="".concat(t,"-item"),x=u.useContext(c.FormContext),C=n||x.wrapperCol||{},w=(0,l.default)("".concat(h,"-control"),C.className),O=u.useMemo((function(){return(0,a.default)({},x)}),[x]);delete O.labelCol,delete O.wrapperCol;var _=u.createElement("div",{className:"".concat(h,"-control-input")},u.createElement("div",{className:"".concat(h,"-control-input-content")},o)),P=u.useMemo((function(){return{prefixCls:t,status:r}}),[t,r]),j=null!==g||s.length||d.length?u.createElement("div",{style:{display:"flex",flexWrap:"nowrap"}},u.createElement(c.FormItemPrefixContext.Provider,{value:P},u.createElement(f.default,{fieldId:y,errors:s,warnings:d,help:m,helpStatus:r,className:"".concat(h,"-explain-connected"),onVisibleChanged:b})),!!g&&u.createElement("div",{style:{width:0,height:g}})):null,M={};y&&(M.id="".concat(y,"_extra"));var E=v?u.createElement("div",(0,a.default)({},M,{className:"".concat(h,"-extra")}),v):null,k=p&&"pro_table_render"===p.mark&&p.render?p.render(e,{input:_,errorList:j,extra:E}):u.createElement(u.Fragment,null,_,j,E);return u.createElement(c.FormContext.Provider,{value:O},u.createElement(i.default,(0,a.default)({},C,{className:w}),k))};t.default=s},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(573)),l=r(53),u=n(r(0)),i=r(576),c=(o(r(586)),r(580)),f=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},s=function(e){var t=e.prefixCls,r=e.children,n=f(e,["prefixCls","children"]),o=(0,u.useContext(i.ConfigContext).getPrefixCls)("form",t),s=u.useMemo((function(){return{prefixCls:o,status:"error"}}),[o]);return u.createElement(l.List,(0,a.default)({},n),(function(e,t,n){return u.createElement(c.FormItemPrefixContext.Provider,{value:s},r(e.map((function(e){return(0,a.default)((0,a.default)({},e),{fieldKey:e.key})})),t,{errors:n.errors,warnings:n.warnings}))}))};t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return(0,n.useContext)(o.FormContext).form};var n=r(0),o=r(580)},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(795)),a=n(r(605)),l=n(r(798)),u=n(r(805)),i=n(r(815)),c=a.default;c.Group=o.default,c.Search=u.default,c.TextArea=i.default,c.Password=l.default;var f=c;t.default=f},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(5)),i=n(r(0)),c=r(576),f=r(580),s=function(e){var t,r=(0,i.useContext)(c.ConfigContext),n=r.getPrefixCls,o=r.direction,s=e.prefixCls,d=e.className,p=void 0===d?"":d,v=n("input-group",s),m=(0,u.default)(v,(t={},(0,l.default)(t,"".concat(v,"-lg"),"large"===e.size),(0,l.default)(t,"".concat(v,"-sm"),"small"===e.size),(0,l.default)(t,"".concat(v,"-compact"),e.compact),(0,l.default)(t,"".concat(v,"-rtl"),"rtl"===o),t),p),y=(0,i.useContext)(f.FormItemInputContext),g=(0,i.useMemo)((function(){return(0,a.default)((0,a.default)({},y),{isFormItemInput:!1})}),[y]);return i.createElement("span",{className:m,style:e.style,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onFocus:e.onFocus,onBlur:e.onBlur},i.createElement(f.FormItemInputContext.Provider,{value:g},e.children))};t.default=s},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];return o.default.Children.forEach(t,(function(t){(null!=t||r.keepEmpty)&&(Array.isArray(t)?n=n.concat(e(t)):(0,a.isFragment)(t)&&t.props?n=n.concat(e(t.props.children,r)):n.push(t))})),n};var o=n(r(0)),a=r(189)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasPrefixSuffix=function(e){return!!(e.prefix||e.suffix||e.allowClear)}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(575)),i=o(r(572)),c=o(r(799)),f=o(r(802)),s=o(r(5)),d=o(r(597)),p=r(592),v=n(r(0)),m=r(576),y=o(r(679)),g=o(r(605)),b=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},h=function(e){return e?v.createElement(f.default,null):v.createElement(c.default,null)},x={click:"onClick",hover:"onMouseOver"};var C=v.forwardRef((function(e,t){var r=e.visibilityToggle,n=void 0===r||r,o="object"===(0,i.default)(n)&&void 0!==n.visible,c=(0,v.useState)((function(){return!!o&&n.visible})),f=(0,u.default)(c,2),C=f[0],w=f[1],O=(0,v.useRef)(null);v.useEffect((function(){o&&w(n.visible)}),[o,n]);var _=(0,y.default)(O),P=function(){e.disabled||(C&&_(),w((function(e){var t,r=!e;return"object"===(0,i.default)(n)&&(null===(t=n.onVisibleChange)||void 0===t||t.call(n,r)),r})))},j=function(r){var o=r.getPrefixCls,u=e.className,i=e.prefixCls,c=e.inputPrefixCls,f=e.size,m=b(e,["className","prefixCls","inputPrefixCls","size"]),y=o("input",c),w=o("input-password",i),_=n&&function(t){var r,n=e.action,o=void 0===n?"click":n,a=e.iconRender,u=x[o]||"",i=(void 0===a?h:a)(C),c=(r={},(0,l.default)(r,u,P),(0,l.default)(r,"className","".concat(t,"-icon")),(0,l.default)(r,"key","passwordIcon"),(0,l.default)(r,"onMouseDown",(function(e){e.preventDefault()})),(0,l.default)(r,"onMouseUp",(function(e){e.preventDefault()})),r);return v.cloneElement(v.isValidElement(i)?i:v.createElement("span",null,i),c)}(w),j=(0,s.default)(w,u,(0,l.default)({},"".concat(w,"-").concat(f),!!f)),M=(0,a.default)((0,a.default)({},(0,d.default)(m,["suffix","iconRender","visibilityToggle"])),{type:C?"text":"password",className:j,prefixCls:y,suffix:_});return f&&(M.size=f),v.createElement(g.default,(0,a.default)({ref:(0,p.composeRef)(t,O)},M))};return v.createElement(m.ConfigConsumer,null,j)}));t.default=C},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(800))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(801)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="EyeInvisibleOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"}},{tag:"path",attrs:{d:"M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"}}]},name:"eye-invisible",theme:"outlined"}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(803))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(804)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="EyeOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z"}}]},name:"eye",theme:"outlined"}},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(574)),l=o(r(573)),u=o(r(806)),i=o(r(5)),c=r(592),f=n(r(0)),s=o(r(809)),d=r(576),p=o(r(591)),v=r(628),m=r(593),y=o(r(605)),g=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};var b=f.forwardRef((function(e,t){var r,n,o=e.prefixCls,b=e.inputPrefixCls,h=e.className,x=e.size,C=e.suffix,w=e.enterButton,O=void 0!==w&&w,_=e.addonAfter,P=e.loading,j=e.disabled,M=e.onSearch,E=e.onChange,k=e.onCompositionStart,S=e.onCompositionEnd,N=g(e,["prefixCls","inputPrefixCls","className","size","suffix","enterButton","addonAfter","loading","disabled","onSearch","onChange","onCompositionStart","onCompositionEnd"]),T=f.useContext(d.ConfigContext),I=T.getPrefixCls,A=T.direction,R=f.useContext(p.default),L=f.useRef(!1),F=I("input-search",o),z=I("input",b),D=(0,v.useCompactItemContext)(F,A).compactSize||x||R,W=f.useRef(null),B=function(e){var t;document.activeElement===(null===(t=W.current)||void 0===t?void 0:t.input)&&e.preventDefault()},q=function(e){var t,r;M&&M(null===(r=null===(t=W.current)||void 0===t?void 0:t.input)||void 0===r?void 0:r.value,e)},$="boolean"==typeof O?f.createElement(u.default,null):null,V="".concat(F,"-button"),H=O||{},U=H.type&&!0===H.type.__ANT_BUTTON;n=U||"button"===H.type?(0,m.cloneElement)(H,(0,l.default)({onMouseDown:B,onClick:function(e){var t,r;null===(r=null===(t=null==H?void 0:H.props)||void 0===t?void 0:t.onClick)||void 0===r||r.call(t,e),q(e)},key:"enterButton"},U?{className:V,size:D}:{})):f.createElement(s.default,{className:V,type:O?"primary":void 0,size:D,disabled:j,key:"enterButton",onMouseDown:B,onClick:q,loading:P,icon:$},O),_&&(n=[n,(0,m.cloneElement)(_,{key:"addonAfter"})]);var G=(0,i.default)(F,(r={},(0,a.default)(r,"".concat(F,"-rtl"),"rtl"===A),(0,a.default)(r,"".concat(F,"-").concat(D),!!D),(0,a.default)(r,"".concat(F,"-with-button"),!!O),r),h);return f.createElement(y.default,(0,l.default)({ref:(0,c.composeRef)(W,t),onPressEnter:function(e){L.current||P||q(e)}},N,{size:D,onCompositionStart:function(e){L.current=!0,null==k||k(e)},onCompositionEnd:function(e){L.current=!1,null==S||S(e)},prefixCls:z,addonAfter:n,suffix:C,onChange:function(e){e&&e.target&&"click"===e.type&&M&&M(e.target.value,e),E&&E(e)},className:G,disabled:j}))}));t.default=b},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(n=r(807))&&n.__esModule?n:{default:n};t.default=o,e.exports=o},function(e,t,r){"use strict";var n=r(570),o=r(572);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(r(577)),l=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var r=c(t);if(r&&r.has(e))return r.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=a?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(n,l,u):n[l]=e[l]}n.default=e,r&&r.set(e,n);return n}(r(0)),u=n(r(808)),i=n(r(581));function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(c=function(e){return e?r:t})(e)}var f=function(e,t){return l.createElement(i.default,(0,a.default)((0,a.default)({},e),{},{ref:t,icon:u.default}))};f.displayName="SearchOutlined";var s=l.forwardRef(f);t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z"}}]},name:"search",theme:"outlined"}},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(810)).default;t.default=o},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.convertLegacyProps=function(e){if("danger"===e)return{danger:!0};return{type:e}},t.default=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(575)),i=o(r(572)),c=o(r(5)),f=o(r(597)),s=n(r(0)),d=r(576),p=o(r(600)),v=o(r(591)),m=r(628),y=r(593),g=r(588),b=(o(r(586)),o(r(811))),h=n(r(813)),x=o(r(814)),C=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},w=/^[\u4e00-\u9fa5]{2}$/,O=w.test.bind(w);function _(e){return"text"===e||"link"===e}function P(e,t){var r=!1,n=[];return s.Children.forEach(e,(function(e){var t=(0,i.default)(e),o="string"===t||"number"===t;if(r&&o){var a=n.length-1,l=n[a];n[a]="".concat(l).concat(e)}else n.push(e);r=o})),s.Children.map(n,(function(e){return function(e,t){if(null!=e){var r=t?" ":"";return"string"!=typeof e&&"number"!=typeof e&&"string"==typeof e.type&&O(e.props.children)?(0,y.cloneElement)(e,{children:e.props.children.split("").join(r)}):"string"==typeof e?O(e)?s.createElement("span",null,e.split("").join(r)):s.createElement("span",null,e):(0,y.isFragment)(e)?s.createElement("span",null,e):e}}(e,t)}))}(0,g.tuple)("default","primary","ghost","dashed","link","text"),(0,g.tuple)("default","circle","round"),(0,g.tuple)("submit","button","reset");var j=function(e,t){var r,n=e.loading,o=void 0!==n&&n,i=e.prefixCls,y=e.type,g=void 0===y?"default":y,w=e.danger,j=e.shape,M=void 0===j?"default":j,E=e.size,k=e.disabled,S=e.className,N=e.children,T=e.icon,I=e.ghost,A=void 0!==I&&I,R=e.block,L=void 0!==R&&R,F=e.htmlType,z=void 0===F?"button":F,D=C(e,["loading","prefixCls","type","danger","shape","size","disabled","className","children","icon","ghost","block","htmlType"]),W=s.useContext(v.default),B=s.useContext(p.default),q=null!=k?k:B,$=s.useContext(h.GroupSizeContext),V=s.useState(!!o),H=(0,u.default)(V,2),U=H[0],G=H[1],Y=s.useState(!1),K=(0,u.default)(Y,2),Q=K[0],X=K[1],J=s.useContext(d.ConfigContext),Z=J.getPrefixCls,ee=J.autoInsertSpaceInButton,te=J.direction,re=t||s.createRef(),ne=function(){return 1===s.Children.count(N)&&!T&&!_(g)},oe="boolean"==typeof o?o:(null==o?void 0:o.delay)||!0;s.useEffect((function(){var e=null;return"number"==typeof oe?e=window.setTimeout((function(){e=null,G(oe)}),oe):G(oe),function(){e&&(window.clearTimeout(e),e=null)}}),[oe]),s.useEffect((function(){if(re&&re.current&&!1!==ee){var e=re.current.textContent;ne()&&O(e)?Q||X(!0):Q&&X(!1)}}),[re]);var ae=function(t){var r=e.onClick;U||q?t.preventDefault():null==r||r(t)},le=Z("btn",i),ue=!1!==ee,ie=(0,m.useCompactItemContext)(le,te),ce=ie.compactSize,fe=ie.compactItemClassnames,se=ce||$||E||W,de=se&&{large:"lg",small:"sm",middle:void 0}[se]||"",pe=U?"loading":T,ve=(0,f.default)(D,["navigate"]),me=(0,c.default)(le,(r={},(0,l.default)(r,"".concat(le,"-").concat(M),"default"!==M&&M),(0,l.default)(r,"".concat(le,"-").concat(g),g),(0,l.default)(r,"".concat(le,"-").concat(de),de),(0,l.default)(r,"".concat(le,"-icon-only"),!N&&0!==N&&!!pe),(0,l.default)(r,"".concat(le,"-background-ghost"),A&&!_(g)),(0,l.default)(r,"".concat(le,"-loading"),U),(0,l.default)(r,"".concat(le,"-two-chinese-chars"),Q&&ue&&!U),(0,l.default)(r,"".concat(le,"-block"),L),(0,l.default)(r,"".concat(le,"-dangerous"),!!w),(0,l.default)(r,"".concat(le,"-rtl"),"rtl"===te),(0,l.default)(r,"".concat(le,"-disabled"),void 0!==ve.href&&q),r),fe,S),ye=T&&!U?T:s.createElement(x.default,{existIcon:!!T,prefixCls:le,loading:!!U}),ge=N||0===N?P(N,ne()&&ue):null;if(void 0!==ve.href)return s.createElement("a",(0,a.default)({},ve,{className:me,onClick:ae,ref:re}),ye,ge);var be=s.createElement("button",(0,a.default)({},D,{type:z,className:me,onClick:ae,disabled:q,ref:re}),ye,ge);return _(g)?be:s.createElement(b.default,{disabled:!!U},be)},M=s.forwardRef(j);M.Group=h.default,M.__ANT_BUTTON=!0;var E=M;t.default=E},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,l=o(r(623)),u=o(r(624)),i=o(r(669)),c=o(r(625)),f=o(r(626)),s=r(621),d=r(592),p=n(r(0)),v=r(576),m=o(r(812)),y=r(593);function g(e){return!e||null===e.offsetParent||e.hidden}function b(e){return e instanceof Document?e.body:Array.from(e.childNodes).find((function(e){return(null==e?void 0:e.nodeType)===Node.ELEMENT_NODE}))}function h(e){var t=(e||"").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);return!(t&&t[1]&&t[2]&&t[3])||!(t[1]===t[2]&&t[2]===t[3])}var x=function(e){(0,c.default)(r,e);var t=(0,f.default)(r);function r(){var e;return(0,l.default)(this,r),(e=t.apply(this,arguments)).containerRef=p.createRef(),e.animationStart=!1,e.destroyed=!1,e.onClick=function(t,r){var n,o,l=e.props,u=l.insertExtraNode;if(!l.disabled&&t&&!g(t)&&!t.className.includes("-leave")){e.extraNode=document.createElement("div");var c=(0,i.default)(e).extraNode,f=e.context.getPrefixCls;c.className="".concat(f(""),"-click-animating-node");var d=e.getAttributeName();if(t.setAttribute(d,"true"),r&&"#fff"!==r&&"#ffffff"!==r&&"rgb(255, 255, 255)"!==r&&"rgba(255, 255, 255, 1)"!==r&&h(r)&&!/rgba\((?:\d*, ){3}0\)/.test(r)&&"transparent"!==r){c.style.borderColor=r;var p=(null===(n=t.getRootNode)||void 0===n?void 0:n.call(t))||t.ownerDocument,v=null!==(o=b(p))&&void 0!==o?o:p;a=(0,s.updateCSS)("\n      [".concat(f(""),"-click-animating-without-extra-node='true']::after, .").concat(f(""),"-click-animating-node {\n        --antd-wave-shadow-color: ").concat(r,";\n      }"),"antd-wave",{csp:e.csp,attachTo:v})}u&&t.appendChild(c),["transition","animation"].forEach((function(r){t.addEventListener("".concat(r,"start"),e.onTransitionStart),t.addEventListener("".concat(r,"end"),e.onTransitionEnd)}))}},e.onTransitionStart=function(t){if(!e.destroyed){var r=e.containerRef.current;t&&t.target===r&&!e.animationStart&&e.resetEffect(r)}},e.onTransitionEnd=function(t){t&&"fadeEffect"===t.animationName&&e.resetEffect(t.target)},e.bindAnimationEvent=function(t){if(t&&t.getAttribute&&!t.getAttribute("disabled")&&!t.className.includes("disabled")){var r=function(r){if("INPUT"!==r.target.tagName&&!g(r.target)){e.resetEffect(t);var n=getComputedStyle(t).getPropertyValue("border-top-color")||getComputedStyle(t).getPropertyValue("border-color")||getComputedStyle(t).getPropertyValue("background-color");e.clickWaveTimeoutId=window.setTimeout((function(){return e.onClick(t,n)}),0),m.default.cancel(e.animationStartId),e.animationStart=!0,e.animationStartId=(0,m.default)((function(){e.animationStart=!1}),10)}};return t.addEventListener("click",r,!0),{cancel:function(){t.removeEventListener("click",r,!0)}}}},e.renderWave=function(t){var r=t.csp,n=e.props.children;if(e.csp=r,!p.isValidElement(n))return n;var o=e.containerRef;return(0,d.supportRef)(n)&&(o=(0,d.composeRef)(n.ref,e.containerRef)),(0,y.cloneElement)(n,{ref:o})},e}return(0,u.default)(r,[{key:"componentDidMount",value:function(){this.destroyed=!1;var e=this.containerRef.current;e&&1===e.nodeType&&(this.instance=this.bindAnimationEvent(e))}},{key:"componentWillUnmount",value:function(){this.instance&&this.instance.cancel(),this.clickWaveTimeoutId&&clearTimeout(this.clickWaveTimeoutId),this.destroyed=!0}},{key:"getAttributeName",value:function(){var e=this.context.getPrefixCls,t=this.props.insertExtraNode;return"".concat(e(""),t?"-click-animating":"-click-animating-without-extra-node")}},{key:"resetEffect",value:function(e){var t=this;if(e&&e!==this.extraNode&&e instanceof Element){var r=this.props.insertExtraNode,n=this.getAttributeName();e.setAttribute(n,"false"),a&&(a.innerHTML=""),r&&this.extraNode&&e.contains(this.extraNode)&&e.removeChild(this.extraNode),["transition","animation"].forEach((function(r){e.removeEventListener("".concat(r,"start"),t.onTransitionStart),e.removeEventListener("".concat(r,"end"),t.onTransitionEnd)}))}}},{key:"render",value:function(){return p.createElement(v.ConfigConsumer,null,this.renderWave)}}]),r}(p.Component);x.contextType=v.ConfigContext;var C=x;t.default=C},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=u;var o=n(r(674)),a=0,l={};function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=a++,n=t;function u(){(n-=1)<=0?(e(),delete l[r]):l[r]=(0,o.default)(u)}return l[r]=(0,o.default)(u),r}u.cancel=function(e){void 0!==e&&(o.default.cancel(l[e]),delete l[e])},u.ids=l},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.GroupSizeContext=void 0;var a=o(r(573)),l=o(r(574)),u=o(r(5)),i=n(r(0)),c=r(576),f=(o(r(586)),function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}),s=i.createContext(void 0);t.GroupSizeContext=s;var d=function(e){var t,r=i.useContext(c.ConfigContext),n=r.getPrefixCls,o=r.direction,d=e.prefixCls,p=e.size,v=e.className,m=f(e,["prefixCls","size","className"]),y=n("btn-group",d),g="";switch(p){case"large":g="lg";break;case"small":g="sm"}var b=(0,u.default)(y,(t={},(0,l.default)(t,"".concat(y,"-").concat(g),g),(0,l.default)(t,"".concat(y,"-rtl"),"rtl"===o),t),v);return i.createElement(s.Provider,{value:p},i.createElement("div",(0,a.default)({},m,{className:b})))};t.default=d},function(e,t,r){"use strict";var n=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(622)),a=n(r(56)),l=n(r(0)),u=function(){return{width:0,opacity:0,transform:"scale(0)"}},i=function(e){return{width:e.scrollWidth,opacity:1,transform:"scale(1)"}},c=function(e){var t=e.prefixCls,r=!!e.loading;return e.existIcon?l.default.createElement("span",{className:"".concat(t,"-loading-icon")},l.default.createElement(o.default,null)):l.default.createElement(a.default,{visible:r,motionName:"".concat(t,"-loading-icon-motion"),removeOnLeave:!0,onAppearStart:u,onAppearActive:i,onEnterStart:u,onEnterActive:i,onLeaveStart:i,onLeaveActive:u},(function(e,r){var n=e.className,a=e.style;return l.default.createElement("span",{className:"".concat(t,"-loading-icon"),style:a,ref:r},l.default.createElement(o.default,{className:n}))}))};t.default=c},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(572)),l=o(r(574)),u=o(r(573)),i=o(r(575)),c=o(r(598)),f=o(r(5)),s=o(r(340)),d=o(r(678)),p=o(r(597)),v=n(r(0)),m=r(576),y=o(r(600)),g=o(r(591)),b=r(580),h=r(629),x=o(r(816)),C=r(605),w=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};function O(e,t){return(0,c.default)(e||"").slice(0,t).join("")}function _(e,t,r,n){var o=r;return e?o=O(r,n):(0,c.default)(t||"").length<r.length&&(0,c.default)(r||"").length>n&&(o=t),o}var P=v.forwardRef((function(e,t){var r,n=e.prefixCls,o=e.bordered,P=void 0===o||o,j=e.showCount,M=void 0!==j&&j,E=e.maxLength,k=e.className,S=e.style,N=e.size,T=e.disabled,I=e.onCompositionStart,A=e.onCompositionEnd,R=e.onChange,L=e.onFocus,F=e.onBlur,z=e.status,D=w(e,["prefixCls","bordered","showCount","maxLength","className","style","size","disabled","onCompositionStart","onCompositionEnd","onChange","onFocus","onBlur","status"]),W=v.useContext(m.ConfigContext),B=W.getPrefixCls,q=W.direction,$=v.useContext(g.default),V=v.useContext(y.default),H=null!=T?T:V,U=v.useContext(b.FormItemInputContext),G=U.status,Y=U.hasFeedback,K=U.isFormItemInput,Q=U.feedbackIcon,X=(0,h.getMergedStatus)(G,z),J=v.useRef(null),Z=v.useRef(null),ee=v.useState(!1),te=(0,i.default)(ee,2),re=te[0],ne=te[1],oe=v.useState(!1),ae=(0,i.default)(oe,2),le=ae[0],ue=ae[1],ie=v.useRef(),ce=v.useRef(0),fe=(0,d.default)(D.defaultValue,{value:D.value}),se=(0,i.default)(fe,2),de=se[0],pe=se[1],ve=D.hidden,me=function(e,t){void 0===D.value&&(pe(e),null==t||t())},ye=Number(E)>0;v.useEffect((function(){ue((function(e){return!H&&e}))}),[H]);var ge=B("input",n);v.useImperativeHandle(t,(function(){var e;return{resizableTextArea:null===(e=J.current)||void 0===e?void 0:e.resizableTextArea,focus:function(e){var t,r;(0,C.triggerFocus)(null===(r=null===(t=J.current)||void 0===t?void 0:t.resizableTextArea)||void 0===r?void 0:r.textArea,e)},blur:function(){var e;return null===(e=J.current)||void 0===e?void 0:e.blur()}}}));var be=v.createElement(s.default,(0,u.default)({},(0,p.default)(D,["allowClear"]),{disabled:H,className:(0,f.default)((r={},(0,l.default)(r,"".concat(ge,"-borderless"),!P),(0,l.default)(r,k,k&&!M),(0,l.default)(r,"".concat(ge,"-sm"),"small"===$||"small"===N),(0,l.default)(r,"".concat(ge,"-lg"),"large"===$||"large"===N),r),(0,h.getStatusClassNames)(ge,X)),style:M?{resize:null==S?void 0:S.resize}:S,prefixCls:ge,onCompositionStart:function(e){ne(!0),ie.current=de,ce.current=e.currentTarget.selectionStart,null==I||I(e)},onChange:function(e){var t=e.target.value;!re&&ye&&(t=_(e.target.selectionStart>=E+1||e.target.selectionStart===t.length||!e.target.selectionStart,de,t,E));me(t),(0,C.resolveOnChange)(e.currentTarget,e,R,t)},onBlur:function(e){ue(!1),null==F||F(e)},onFocus:function(e){ue(!0),null==L||L(e)},onCompositionEnd:function(e){var t;ne(!1);var r=e.currentTarget.value;ye&&(r=_(ce.current>=E+1||ce.current===(null===(t=ie.current)||void 0===t?void 0:t.length),ie.current,r,E));r!==de&&(me(r),(0,C.resolveOnChange)(e.currentTarget,e,R,r)),null==A||A(e)},ref:J})),he=(0,C.fixControlledValue)(de);re||!ye||null!==D.value&&void 0!==D.value||(he=O(he,E));var xe=v.createElement(x.default,(0,u.default)({disabled:H,focused:le},D,{prefixCls:ge,direction:q,inputType:"text",value:he,element:be,handleReset:function(e){var t,r,n;me(""),null===(t=J.current)||void 0===t||t.focus(),(0,C.resolveOnChange)(null===(n=null===(r=J.current)||void 0===r?void 0:r.resizableTextArea)||void 0===n?void 0:n.textArea,e,R)},ref:Z,bordered:P,status:z,style:M?void 0:S}));if(M||Y){var Ce,we=(0,c.default)(he).length,Oe="";return Oe="object"===(0,a.default)(M)?M.formatter({value:he,count:we,maxLength:E}):"".concat(we).concat(ye?" / ".concat(E):""),v.createElement("div",{hidden:ve,className:(0,f.default)("".concat(ge,"-textarea"),(Ce={},(0,l.default)(Ce,"".concat(ge,"-textarea-rtl"),"rtl"===q),(0,l.default)(Ce,"".concat(ge,"-textarea-show-count"),M),(0,l.default)(Ce,"".concat(ge,"-textarea-in-form-item"),K),Ce),(0,h.getStatusClassNames)("".concat(ge,"-textarea"),X,Y),k),style:S,"data-count":Oe},xe,Y&&v.createElement("span",{className:"".concat(ge,"-textarea-suffix")},Q))}return xe}));t.default=P},function(e,t,r){"use strict";var n=r(571).default,o=r(570).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(r(574)),l=o(r(623)),u=o(r(624)),i=o(r(625)),c=o(r(626)),f=o(r(604)),s=o(r(5)),d=n(r(0)),p=r(580),v=r(593),m=r(629),y=(0,r(588).tuple)("text","input");var g=function(e){(0,i.default)(r,e);var t=(0,c.default)(r);function r(){return(0,l.default)(this,r),t.apply(this,arguments)}return(0,u.default)(r,[{key:"renderClearIcon",value:function(e){var t,r=this.props,n=r.value,o=r.disabled,l=r.readOnly,u=r.handleReset,i=r.suffix,c=!o&&!l&&n,p="".concat(e,"-clear-icon");return d.createElement(f.default,{onClick:u,onMouseDown:function(e){return e.preventDefault()},className:(0,s.default)((t={},(0,a.default)(t,"".concat(p,"-hidden"),!c),(0,a.default)(t,"".concat(p,"-has-suffix"),!!i),t),p),role:"button"})}},{key:"renderTextAreaWithClearIcon",value:function(e,t,r){var n,o=this.props,l=o.value,u=o.allowClear,i=o.className,c=o.focused,f=o.style,p=o.direction,y=o.bordered,g=o.hidden,b=o.status,h=r.status,x=r.hasFeedback;if(!u)return(0,v.cloneElement)(t,{value:l});var C,w=(0,s.default)("".concat(e,"-affix-wrapper"),"".concat(e,"-affix-wrapper-textarea-with-clear-btn"),(0,m.getStatusClassNames)("".concat(e,"-affix-wrapper"),(0,m.getMergedStatus)(h,b),x),(n={},(0,a.default)(n,"".concat(e,"-affix-wrapper-focused"),c),(0,a.default)(n,"".concat(e,"-affix-wrapper-rtl"),"rtl"===p),(0,a.default)(n,"".concat(e,"-affix-wrapper-borderless"),!y),(0,a.default)(n,"".concat(i),!((C=this.props).addonBefore||C.addonAfter)&&i),n));return d.createElement("span",{className:w,style:f,hidden:g},(0,v.cloneElement)(t,{style:null,value:l}),this.renderClearIcon(e))}},{key:"render",value:function(){var e=this;return d.createElement(p.FormItemInputContext.Consumer,null,(function(t){var r=e.props,n=r.prefixCls,o=r.inputType,a=r.element;if(o===y[0])return e.renderTextAreaWithClearIcon(n,a,t)}))}}]),r}(d.Component);t.default=g}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL3JlYWRhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3RybC90aW55Y29sb3IvZGlzdC9tb2R1bGUvdG8tbXMtZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3RybC90aW55Y29sb3IvZGlzdC9tb2R1bGUvZnJvbS1yYXRpby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL3JhbmRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL3B1YmxpY19hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY29uZmlnLXByb3ZpZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2Zvcm0vY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvbGliL2NvbXBvbmVudHMvQW50ZEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9fdXRpbC9yZWFjdE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvbGliL29taXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvbGliL0RvbS9jYW5Vc2VEb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2NvbmZpZy1wcm92aWRlci9EaXNhYmxlZENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2xvY2FsZS9kZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvaW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL21lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvRG9tL2R5bmFtaWNDU1MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL0xvYWRpbmdPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVTdXBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZ3JpZC9jb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3NwYWNlL0NvbXBhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL3N0YXR1c1V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2Zvcm0vRXJyb3JMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi9ob29rcy91c2VNZW1vLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZm9ybS92YWxpZGF0ZU1lc3NhZ2VzQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZGF0ZS1waWNrZXIvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90aW1lLXBpY2tlci9sb2NhbGUvZW5fVVMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2xvY2FsZS1wcm92aWRlci9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL0NoZWNrQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9saWIvY29tcG9uZW50cy9JY29uQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW5vdGlmaWNhdGlvbi9saWIvdXNlTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvX3V0aWwvbW90aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL2hvb2tzL3VzZURlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvbGliL2hvb2tzL3VzZVN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi9yYWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvbGliL2hvb2tzL3VzZUxheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZ3JpZC9Sb3dDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9fdXRpbC9yZXNwb25zaXZlT2JzZXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvaG9va3MvdXNlTWVyZ2VkU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2lucHV0L2hvb2tzL3VzZVJlbW92ZVBhc3N3b3JkVGltZW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeWVUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeWVUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0V5ZUludmlzaWJsZVR3b1RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0V5ZUludmlzaWJsZVR3b1RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qd3QtZGVjb2RlL2J1aWxkL2p3dC1kZWNvZGUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi91dGlscy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvdXRpbHMvZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9sb2NhbGUtcHJvdmlkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL21vZGFsL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtcGFnaW5hdGlvbi9saWIvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9jYWxlbmRhci9sb2NhbGUvZW5fVVMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXBpY2tlci9saWIvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9sb2NhbGUtcHJvdmlkZXIvZGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvbGliL2ljb25zL0NoZWNrQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9DaGVja0NpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi9Eb20vY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9jb21wb25lbnRzL3R3b1RvbmVQcmltYXJ5Q29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vQ2xvc2VDaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL0luZm9DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9pY29ucy9JbmZvQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9JbmZvQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9saWIvaWNvbnMvTG9hZGluZ091dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9Mb2FkaW5nT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL21lc3NhZ2UvaG9va3MvdXNlTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2xpYi9Ob3RpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL25vdGlmaWNhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvclJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL0NoZWNrQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9pY29ucy9DaGVja0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9DaGVja0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9DbG9zZUNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9saWIvaWNvbnMvQ2xvc2VDaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vQ2xvc2VDaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvQ2xvc2VPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvbGliL2ljb25zL0Nsb3NlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0Nsb3NlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9JbmZvQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2xpYi9pY29ucy9JbmZvQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0luZm9DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvbm90aWZpY2F0aW9uL2hvb2tzL3VzZU5vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY29uZmlnLXByb3ZpZGVyL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2NvbmZpZy1wcm92aWRlci9jc3NWYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2Zvcm0vRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZm9ybS9ob29rcy91c2VGb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL0Zvcm1JdGVtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL2hvb2tzL3VzZUZvcm1JdGVtU3RhdHVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL2hvb2tzL3VzZUZyYW1lU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2Zvcm0vaG9va3MvdXNlSXRlbVJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZm9ybS9Gb3JtSXRlbS9JdGVtSG9sZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9ncmlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9ncmlkL2hvb2tzL3VzZUJyZWFrcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL2hvb2tzL3VzZUZvcmNlVXBkYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9ncmlkL3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvX3V0aWwvaG9va3MvdXNlRmxleEdhcFN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL3N0eWxlQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvRG9tL3N0eWxlQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZm9ybS9Gb3JtSXRlbUxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9RdWVzdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9saWIvaWNvbnMvUXVlc3Rpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vUXVlc3Rpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvdG9vbHRpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9saWIvaG9va3MvdXNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvX3V0aWwvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdG9vbHRpcC9saWIvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZm9ybS9Gb3JtSXRlbUlucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL0Zvcm1MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9mb3JtL2hvb2tzL3VzZUZvcm1JbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvaW5wdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2lucHV0L0dyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi9DaGlsZHJlbi90b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9pbnB1dC91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvaW5wdXQvUGFzc3dvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL0V5ZUludmlzaWJsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9saWIvaWNvbnMvRXllSW52aXNpYmxlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0V5ZUludmlzaWJsZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9FeWVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvbGliL2ljb25zL0V5ZU91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9FeWVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvaW5wdXQvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9TZWFyY2hPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvbGliL2ljb25zL1NlYXJjaE91dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9TZWFyY2hPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9idXR0b24vYnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9fdXRpbC93YXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9fdXRpbC9yYWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2J1dHRvbi9idXR0b24tZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2J1dHRvbi9Mb2FkaW5nSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvaW5wdXQvVGV4dEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2lucHV0L0NsZWFyYWJsZUxhYmVsZWRJbnB1dC5qcyJdLCJuYW1lcyI6WyJyZWFkYWJpbGl0eSIsImNvbG9yMSIsImNvbG9yMiIsImMxIiwiYzIiLCJNYXRoIiwibWF4IiwiZ2V0THVtaW5hbmNlIiwibWluIiwiaXNSZWFkYWJsZSIsIndjYWcyIiwiX2EiLCJfYiIsImxldmVsIiwic2l6ZSIsInJlYWRhYmlsaXR5TGV2ZWwiLCJtb3N0UmVhZGFibGUiLCJiYXNlQ29sb3IiLCJjb2xvckxpc3QiLCJhcmdzIiwiaW5jbHVkZUZhbGxiYWNrQ29sb3JzIiwiYmVzdENvbG9yIiwiYmVzdFNjb3JlIiwiX2kiLCJjb2xvckxpc3RfMSIsImxlbmd0aCIsImNvbG9yIiwic2NvcmUiLCJ0b01zRmlsdGVyIiwiZmlyc3RDb2xvciIsInNlY29uZENvbG9yIiwiaGV4OFN0cmluZyIsInIiLCJnIiwiYiIsImEiLCJzZWNvbmRIZXg4U3RyaW5nIiwiZ3JhZGllbnRUeXBlIiwicyIsImNvbmNhdCIsImZyb21SYXRpbyIsInJhdGlvIiwib3B0cyIsIm5ld0NvbG9yIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwibGVnYWN5UmFuZG9tIiwicmFuZG9tIiwib3B0aW9ucyIsImNvdW50IiwidG90YWxDb2xvcnMiLCJjb2xvcnMiLCJzZWVkIiwicHVzaCIsImgiLCJodWUiLCJyZXMiLCJyYW5kb21XaXRoaW4iLCJjb2xvcklucHV0IiwibnVtIiwicGFyc2VJbnQiLCJpc05hTiIsIm5hbWVkQ29sb3IiLCJib3VuZHMiLCJmaW5kIiwibiIsIm5hbWUiLCJkZWZpbmVDb2xvciIsImh1ZVJhbmdlIiwicGFyc2VkIiwiaXNWYWxpZCIsInRvSHN2IiwiZ2V0SHVlUmFuZ2UiLCJwaWNrSHVlIiwibHVtaW5vc2l0eSIsInNhdHVyYXRpb25SYW5nZSIsImdldENvbG9ySW5mbyIsInNNaW4iLCJzTWF4IiwicGlja1NhdHVyYXRpb24iLCJ2IiwiSCIsIlMiLCJiTWluIiwibG93ZXJCb3VuZHMiLCJpIiwiczEiLCJ2MSIsInMyIiwidjIiLCJtIiwiZ2V0TWluaW11bUJyaWdodG5lc3MiLCJiTWF4IiwicGlja0JyaWdodG5lc3MiLCJhbHBoYSIsImJvdW5kc18xIiwiRXJyb3IiLCJyYW5nZSIsImZsb29yIiwicm5kIiwiYm91bmQiLCJicmlnaHRuZXNzUmFuZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwib2JqIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJ0b1Byb3BlcnR5S2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCJhcnIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29udGV4dCIsIkNvbmZpZ0NvbnN1bWVyIiwiQ29uZmlnQ29udGV4dCIsImdsb2JhbENvbmZpZyIsImRlZmF1bHRQcmVmaXhDbHMiLCJkZWZhdWx0SWNvblByZWZpeENscyIsImNvbmZpZ0NvbnN1bWVyUHJvcHMiLCJfZXh0ZW5kczIiLCJfQ29udGV4dCIsIl91c2VNZW1vIiwiUmVhY3QiLCJfc2V0IiwiX3ZhbGlkYXRlTWVzc2FnZXNDb250ZXh0IiwiX2xvY2FsZVByb3ZpZGVyIiwiX0xvY2FsZVJlY2VpdmVyIiwiX2RlZmF1bHQyIiwiX21lc3NhZ2UiLCJfbm90aWZpY2F0aW9uIiwiX2Nzc1ZhcmlhYmxlcyIsIl9EaXNhYmxlZENvbnRleHQiLCJfU2l6ZUNvbnRleHQiLCJQQVNTRURfUFJPUFMiLCJnbG9iYWxQcmVmaXhDbHMiLCJnbG9iYWxJY29uUHJlZml4Q2xzIiwiZ2V0R2xvYmFsUHJlZml4Q2xzIiwiZ2V0R2xvYmFsSWNvblByZWZpeENscyIsImdldFByZWZpeENscyIsInN1ZmZpeENscyIsImN1c3RvbWl6ZVByZWZpeENscyIsImdldEljb25QcmVmaXhDbHMiLCJnZXRSb290UHJlZml4Q2xzIiwicm9vdFByZWZpeENscyIsImluY2x1ZGVzIiwicmVwbGFjZSIsIlByb3ZpZGVyQ2hpbGRyZW4iLCJwcm9wcyIsImNoaWxkcmVuIiwiY3NwIiwiYXV0b0luc2VydFNwYWNlSW5CdXR0b24iLCJmb3JtIiwibG9jYWxlIiwiY29tcG9uZW50U2l6ZSIsImRpcmVjdGlvbiIsInNwYWNlIiwidmlydHVhbCIsImRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCIsImxlZ2FjeUxvY2FsZSIsInBhcmVudENvbnRleHQiLCJpY29uUHJlZml4Q2xzIiwiY29tcG9uZW50RGlzYWJsZWQiLCJ1c2VDYWxsYmFjayIsInByZWZpeENscyIsIm1lcmdlZFByZWZpeENscyIsImNvbmZpZyIsImZvckVhY2giLCJwcm9wTmFtZSIsInByb3BWYWx1ZSIsIm1lbW9lZENvbmZpZyIsInByZXZDb25maWciLCJjdXJyZW50Q29uZmlnIiwicHJldktleXMiLCJrZXlzIiwiY3VycmVudEtleXMiLCJzb21lIiwibWVtb0ljb25Db250ZXh0VmFsdWUiLCJ1c2VNZW1vIiwiY2hpbGROb2RlIiwidmFsaWRhdGVNZXNzYWdlcyIsIl9jIiwiX2QiLCJtZXJnZSIsIkZvcm0iLCJkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIl9BTlRfTUFSS19fIiwiQU5UX01BUksiLCJTaXplQ29udGV4dFByb3ZpZGVyIiwiRGlzYWJsZWRDb250ZXh0UHJvdmlkZXIiLCJkaXNhYmxlZCIsIkNvbmZpZ1Byb3ZpZGVyIiwidXNlRWZmZWN0IiwicnRsIiwiXyIsIl9fIiwiY29udGV4dCIsIlNpemVDb250ZXh0IiwiX3JlZiIsInRoZW1lIiwicmVnaXN0ZXJUaGVtZSIsIl9kZWZhdWx0Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiTm9TdHlsZUl0ZW1Db250ZXh0IiwiTm9Gb3JtU3R5bGUiLCJGb3JtUHJvdmlkZXIiLCJGb3JtSXRlbVByZWZpeENvbnRleHQiLCJGb3JtSXRlbUlucHV0Q29udGV4dCIsIkZvcm1Db250ZXh0IiwiX3JjRmllbGRGb3JtIiwiX29taXQiLCJjcmVhdGVDb250ZXh0IiwibGFiZWxBbGlnbiIsInZlcnRpY2FsIiwiaXRlbVJlZiIsInByb3ZpZGVyUHJvcHMiLCJzdGF0dXMiLCJvdmVycmlkZSIsImZvcm1JdGVtSW5wdXRDb250ZXh0IiwidXNlQ29udGV4dCIsIm5ld0Zvcm1JdGVtSW5wdXRDb250ZXh0IiwibmV3Q29udGV4dCIsImlzRm9ybUl0ZW1JbnB1dCIsImhhc0ZlZWRiYWNrIiwiZmVlZGJhY2tJY29uIiwiZGVmYXVsdCIsIl9vYmplY3RTcHJlYWQyIiwiX3NsaWNlZFRvQXJyYXkyIiwiX2RlZmluZVByb3BlcnR5MiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfY2xhc3NuYW1lcyIsIl9JY29uQmFzZSIsIl90d29Ub25lUHJpbWFyeUNvbG9yIiwiX3V0aWxzIiwiX2V4Y2x1ZGVkIiwic2V0VHdvVG9uZUNvbG9yIiwiSWNvbiIsImZvcndhcmRSZWYiLCJyZWYiLCJfY2xhc3NOYW1lcyIsImNsYXNzTmFtZSIsImljb24iLCJzcGluIiwicm90YXRlIiwidGFiSW5kZXgiLCJvbkNsaWNrIiwidHdvVG9uZUNvbG9yIiwicmVzdFByb3BzIiwiX1JlYWN0JHVzZUNvbnRleHQiLCJfUmVhY3QkdXNlQ29udGV4dCRwcmUiLCJyb290Q2xhc3NOYW1lIiwiY2xhc3NTdHJpbmciLCJpY29uVGFiSW5kZXgiLCJzdmdTdHlsZSIsIm1zVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiX25vcm1hbGl6ZVR3b1RvbmVDb2xvIiwibm9ybWFsaXplVHdvVG9uZUNvbG9ycyIsIl9ub3JtYWxpemVUd29Ub25lQ29sbzIiLCJwcmltYXJ5Q29sb3IiLCJzZWNvbmRhcnlDb2xvciIsInJvbGUiLCJzdHlsZSIsImRpc3BsYXlOYW1lIiwiZ2V0VHdvVG9uZUNvbG9yIiwibm9vcCIsIl93YXJuaW5nIiwicmVzZXRXYXJuZWQiLCJ0dXBsZU51bSIsInR1cGxlIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsIl9sZW4yIiwiX2tleTIiLCJDb25zdW1lciIsIm9yaWdpblNpemUiLCJjb21wb3NlUmVmIiwiZmlsbFJlZiIsInN1cHBvcnRSZWYiLCJub2RlT3JDb21wb25lbnQiLCJfdHlwZSRwcm90b3R5cGUiLCJfbm9kZU9yQ29tcG9uZW50JHByb3QiLCJ0eXBlIiwiX3JlYWN0SXMiLCJpc01lbW8iLCJyZW5kZXIiLCJ1c2VDb21wb3NlUmVmIiwicmVmcyIsInByZXYiLCJuZXh0IiwiZXZlcnkiLCJfdHlwZW9mMiIsIm5vZGUiLCJjdXJyZW50IiwicmVmTGlzdCIsImNsb25lRWxlbWVudCIsImVsZW1lbnQiLCJyZXBsYWNlRWxlbWVudCIsImlzRnJhZ21lbnQiLCJjaGlsZCIsImlzVmFsaWRFbGVtZW50IiwiRnJhZ21lbnQiLCJyZXBsYWNlbWVudCIsImZpZWxkcyIsImNsb25lIiwiaXNBcnJheSIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIkRpc2FibGVkQ29udGV4dCIsIm9yaWdpbkRpc2FibGVkIiwiX2VuX1VTIiwiX2VuX1VTMiIsIl9lbl9VUzMiLCJfZW5fVVM0IiwidHlwZVRlbXBsYXRlIiwiUGFnaW5hdGlvbiIsIkRhdGVQaWNrZXIiLCJUaW1lUGlja2VyIiwiQ2FsZW5kYXIiLCJnbG9iYWwiLCJwbGFjZWhvbGRlciIsIlRhYmxlIiwiZmlsdGVyVGl0bGUiLCJmaWx0ZXJDb25maXJtIiwiZmlsdGVyUmVzZXQiLCJmaWx0ZXJFbXB0eVRleHQiLCJmaWx0ZXJDaGVja2FsbCIsImZpbHRlclNlYXJjaFBsYWNlaG9sZGVyIiwiZW1wdHlUZXh0Iiwic2VsZWN0QWxsIiwic2VsZWN0SW52ZXJ0Iiwic2VsZWN0Tm9uZSIsInNlbGVjdGlvbkFsbCIsInNvcnRUaXRsZSIsImV4cGFuZCIsImNvbGxhcHNlIiwidHJpZ2dlckRlc2MiLCJ0cmlnZ2VyQXNjIiwiY2FuY2VsU29ydCIsIk1vZGFsIiwib2tUZXh0IiwiY2FuY2VsVGV4dCIsImp1c3RPa1RleHQiLCJQb3Bjb25maXJtIiwiVHJhbnNmZXIiLCJ0aXRsZXMiLCJzZWFyY2hQbGFjZWhvbGRlciIsIml0ZW1Vbml0IiwiaXRlbXNVbml0IiwicmVtb3ZlIiwic2VsZWN0Q3VycmVudCIsInJlbW92ZUN1cnJlbnQiLCJyZW1vdmVBbGwiLCJVcGxvYWQiLCJ1cGxvYWRpbmciLCJyZW1vdmVGaWxlIiwidXBsb2FkRXJyb3IiLCJwcmV2aWV3RmlsZSIsImRvd25sb2FkRmlsZSIsIkVtcHR5IiwiZGVzY3JpcHRpb24iLCJUZXh0IiwiZWRpdCIsImNvcHkiLCJjb3BpZWQiLCJQYWdlSGVhZGVyIiwiYmFjayIsIm9wdGlvbmFsIiwicmVxdWlyZWQiLCJ3aGl0ZXNwYWNlIiwiZGF0ZSIsImZvcm1hdCIsInBhcnNlIiwiaW52YWxpZCIsInR5cGVzIiwic3RyaW5nIiwibWV0aG9kIiwiYXJyYXkiLCJudW1iZXIiLCJpbnRlZ2VyIiwicmVnZXhwIiwiZW1haWwiLCJ1cmwiLCJoZXgiLCJsZW4iLCJwYXR0ZXJuIiwibWlzbWF0Y2giLCJJbWFnZSIsInByZXZpZXciLCJmaXhDb250cm9sbGVkVmFsdWUiLCJTdHJpbmciLCJyZXNvbHZlT25DaGFuZ2UiLCJlIiwib25DaGFuZ2UiLCJ0YXJnZXRWYWx1ZSIsImV2ZW50IiwiY3VycmVudFRhcmdldCIsImNsb25lTm9kZSIsImNyZWF0ZSIsInRyaWdnZXJGb2N1cyIsIm9wdGlvbiIsImZvY3VzIiwiY3Vyc29yIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJfQ2xvc2VDaXJjbGVGaWxsZWQiLCJfcmNJbnB1dCIsIl9yZWYyIiwiX3JlYWN0IiwiX2NvbmZpZ1Byb3ZpZGVyIiwiX0NvbXBhY3QiLCJfc3RhdHVzVXRpbHMiLCJfdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0IiwiX19yZXN0IiwidCIsInAiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfY2xhc3NOYW1lczIiLCJfY2xhc3NOYW1lczQiLCJfcHJvcHMkYm9yZGVyZWQiLCJib3JkZXJlZCIsImN1c3RvbVN0YXR1cyIsImN1c3RvbVNpemUiLCJjdXN0b21EaXNhYmxlZCIsIm9uQmx1ciIsIm9uRm9jdXMiLCJzdWZmaXgiLCJhbGxvd0NsZWFyIiwiYWRkb25BZnRlciIsImFkZG9uQmVmb3JlIiwicmVzdCIsImlucHV0IiwiaW5wdXRSZWYiLCJ1c2VSZWYiLCJfdXNlQ29tcGFjdEl0ZW1Db250ZXgiLCJ1c2VDb21wYWN0SXRlbUNvbnRleHQiLCJjb21wYWN0U2l6ZSIsImNvbXBhY3RJdGVtQ2xhc3NuYW1lcyIsIm1lcmdlZFNpemUiLCJtZXJnZWREaXNhYmxlZCIsIl91c2VDb250ZXh0IiwiY29udGV4dFN0YXR1cyIsIm1lcmdlZFN0YXR1cyIsImdldE1lcmdlZFN0YXR1cyIsImlucHV0SGFzUHJlZml4U3VmZml4IiwiaGFzUHJlZml4U3VmZml4IiwicHJldkhhc1ByZWZpeFN1ZmZpeCIsIm1lcmdlZEFsbG93Q2xlYXIiLCJyZW1vdmVQYXNzd29yZFRpbWVvdXQiLCJzdWZmaXhOb2RlIiwiY2xlYXJJY29uIiwiYXV0b0NvbXBsZXRlIiwiTm9Db21wYWN0U3R5bGUiLCJpbnB1dENsYXNzTmFtZSIsImdldFN0YXR1c0NsYXNzTmFtZXMiLCJhZmZpeFdyYXBwZXJDbGFzc05hbWUiLCJ3cmFwcGVyQ2xhc3NOYW1lIiwiZ3JvdXBDbGFzc05hbWUiLCJhcnJheUxpa2VUb0FycmF5IiwibyIsIm1pbkxlbiIsInRvU3RyaW5nIiwic2xpY2UiLCJmcm9tIiwidGVzdCIsImF0dGFjaFR5cGVBcGkiLCJnZXRJbnN0YW5jZSIsImdldEtleVRoZW5JbmNyZWFzZUtleSIsInR5cGVMaXN0IiwibWVzc2FnZUluc3RhbmNlIiwiZGVmYXVsdFRvcCIsImdldENvbnRhaW5lciIsIm1heENvdW50IiwiX0NoZWNrQ2lyY2xlRmlsbGVkIiwiX0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkIiwiX0luZm9DaXJjbGVGaWxsZWQiLCJfTG9hZGluZ091dGxpbmVkIiwiX3JjTm90aWZpY2F0aW9uIiwiX3VzZU1lc3NhZ2UiLCJkZWZhdWx0RHVyYXRpb24iLCJsb2NhbFByZWZpeENscyIsInRyYW5zaXRpb25OYW1lIiwiaGFzVHJhbnNpdGlvbk5hbWUiLCJnZXRSQ05vdGlmaWNhdGlvbkluc3RhbmNlIiwiY2FsbGJhY2siLCJnZXRDb250ZXh0UG9wdXBDb250YWluZXIiLCJnZXRQb3B1cENvbnRhaW5lciIsIl9nbG9iYWxDb25maWciLCJpbnN0YW5jZSIsImluc3RhbmNlQ29uZmlnIiwidG9wIiwibmV3SW5zdGFuY2UiLCJ0eXBlVG9JY29uIiwiaW5mbyIsInN1Y2Nlc3MiLCJlcnJvciIsIndhcm5pbmciLCJsb2FkaW5nIiwiZ2V0UkNOb3RpY2VQcm9wcyIsImR1cmF0aW9uIiwiSWNvbkNvbXBvbmVudCIsIm1lc3NhZ2VDbGFzcyIsImNvbnRlbnQiLCJvbkNsb3NlIiwiYXBpIiwib3BlbiIsImNsb3NlUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibm90aWNlIiwicmVzdWx0IiwicmVtb3ZlTm90aWNlIiwidGhlbiIsImZpbGxlZCIsInJlamVjdGVkIiwicHJvbWlzZSIsImRlc3Ryb3kiLCJtZXNzYWdlS2V5Iiwib3JpZ2luYWxBcGkiLCJpc0FyZ3NQcm9wcyIsIndhcm4iLCJ1c2VNZXNzYWdlIiwiX3R5cGVvZjMiLCJnZW5lcmF0ZSIsInJvb3RQcm9wcyIsInRhZyIsIm5vcm1hbGl6ZUF0dHJzIiwiYXR0cnMiLCJtYXAiLCJpbmRleCIsImdldFNlY29uZGFyeUNvbG9yIiwiX2NvbG9ycyIsImljb25TdHlsZXMiLCJpc0ljb25EZWZpbml0aW9uIiwidXNlSW5zZXJ0U3R5bGVzIiwic3ZnQmFzZVByb3BzIiwidmFsaWQiLCJtZXNzYWdlIiwiX2R5bmFtaWNDU1MiLCJfY2FtZWxDYXNlIiwicmVkdWNlIiwiYWNjIiwidmFsIiwiY2xhc3MiLCJ3aWR0aCIsImhlaWdodCIsImZpbGwiLCJmb2N1c2FibGUiLCJzdHlsZVN0ciIsInVwZGF0ZUNTUyIsInByZXBlbmQiLCJjbGVhckNvbnRhaW5lckNhY2hlIiwiY29udGFpbmVyQ2FjaGUiLCJjbGVhciIsImluamVjdENTUyIsInJlbW92ZUNTUyIsImV4aXN0Tm9kZSIsImZpbmRFeGlzdE5vZGUiLCJjb250YWluZXIiLCJyZW1vdmVDaGlsZCIsImNzcyIsInN5bmNSZWFsQ29udGFpbmVyIiwiX29wdGlvbiRjc3AiLCJfb3B0aW9uJGNzcDIiLCJfb3B0aW9uJGNzcDMiLCJub25jZSIsImlubmVySFRNTCIsIm5ld05vZGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRNYXJrIiwiX2NhblVzZURvbSIsIl9jb250YWlucyIsIk1hcCIsIm1hcmsiLCJzdGFydHNXaXRoIiwiYXR0YWNoVG8iLCJxdWVyeVNlbGVjdG9yIiwiYm9keSIsImdldE9yZGVyIiwiZmluZFN0eWxlcyIsInRhZ05hbWUiLCJfb3B0aW9uJHByaW9yaXR5IiwicHJpb3JpdHkiLCJtZXJnZWRPcmRlciIsImlzUHJlcGVuZFF1ZXVlIiwic3R5bGVOb2RlIiwiZmlyc3RDaGlsZCIsImV4aXN0U3R5bGUiLCJnZXRBdHRyaWJ1dGUiLCJub2RlUHJpb3JpdHkiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsImFwcGVuZENoaWxkIiwiY2FjaGVkUmVhbENvbnRhaW5lciIsInBsYWNlaG9sZGVyU3R5bGUiLCJwYXJlbnROb2RlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJzZXRQcm90b3R5cGVPZiIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImdldFByb3RvdHlwZU9mIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiX2V4dGVuZHMzIiwiX1Jvd0NvbnRleHQiLCJzaXplcyIsIl9SZWFjdCR1c2VDb250ZXh0MiIsImd1dHRlciIsIndyYXAiLCJzdXBwb3J0RmxleEdhcCIsInNwYW4iLCJvcmRlciIsIm9mZnNldCIsInB1bGwiLCJmbGV4Iiwib3RoZXJzIiwic2l6ZUNsYXNzT2JqIiwic2l6ZVByb3BzIiwicHJvcFNpemUiLCJjbGFzc2VzIiwibWVyZ2VkU3R5bGUiLCJob3Jpem9udGFsR3V0dGVyIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ2ZXJ0aWNhbEd1dHRlciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFyc2VGbGV4IiwibWluV2lkdGgiLCJTcGFjZUNvbXBhY3RJdGVtQ29udGV4dCIsIl90b0FycmF5IiwiY29tcGFjdEl0ZW1Db250ZXh0IiwiY29tcGFjdERpcmVjdGlvbiIsImlzRmlyc3RJdGVtIiwiaXNMYXN0SXRlbSIsInNlcGFyYXRvciIsIkNvbXBhY3RJdGVtIiwib3RoZXJQcm9wcyIsImRpcmVjdGlvbkNvbmZpZyIsIl9wcm9wcyRzaXplIiwiYmxvY2siLCJjbHgiLCJjaGlsZE5vZGVzIiwibm9kZXMiLCJub3RlIiwibm90ZU9uY2UiLCJwcmVNZXNzYWdlIiwid2FybmluZ09uY2UiLCJ3YXJuZWQiLCJwcmVXYXJuaW5nRm5zIiwiZm4iLCJ0b1ByaW1pdGl2ZSIsImFyZyIsImhlbHAiLCJoZWxwU3RhdHVzIiwiX3JlZiRlcnJvcnMiLCJlcnJvcnMiLCJFTVBUWV9MSVNUIiwiX3JlZiR3YXJuaW5ncyIsIndhcm5pbmdzIiwiZmllbGRJZCIsIm9uVmlzaWJsZUNoYW5nZWQiLCJiYXNlQ2xhc3NOYW1lIiwiZGVib3VuY2VFcnJvcnMiLCJfdXNlRGVib3VuY2UiLCJkZWJvdW5jZVdhcm5pbmdzIiwiZnVsbEtleUxpc3QiLCJ0b0Vycm9yRW50aXR5IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImhlbHBQcm9wcyIsImlkIiwiX3JjTW90aW9uIiwibW90aW9uRGVhZGxpbmUiLCJfbW90aW9uIiwibW90aW9uTmFtZSIsInZpc2libGUiLCJob2xkZXJQcm9wcyIsImhvbGRlckNsYXNzTmFtZSIsImhvbGRlclN0eWxlIiwiQ1NTTW90aW9uTGlzdCIsImNvbXBvbmVudCIsIml0ZW1Qcm9wcyIsImVycm9yU3RhdHVzIiwiaXRlbUNsYXNzTmFtZSIsIml0ZW1TdHlsZSIsInByZWZpeCIsImFycjIiLCJpdGVyIiwiZ2V0VmFsdWUiLCJjb25kaXRpb24iLCJzaG91bGRVcGRhdGUiLCJjYWNoZVJlZiIsImxhbmciLCJ5ZWFyUGxhY2Vob2xkZXIiLCJxdWFydGVyUGxhY2Vob2xkZXIiLCJtb250aFBsYWNlaG9sZGVyIiwid2Vla1BsYWNlaG9sZGVyIiwicmFuZ2VQbGFjZWhvbGRlciIsInJhbmdlWWVhclBsYWNlaG9sZGVyIiwicmFuZ2VRdWFydGVyUGxhY2Vob2xkZXIiLCJyYW5nZU1vbnRoUGxhY2Vob2xkZXIiLCJyYW5nZVdlZWtQbGFjZWhvbGRlciIsInRpbWVQaWNrZXJMb2NhbGUiLCJ1c2VMb2NhbGVSZWNlaXZlciIsIl9wcm9wcyRjb21wb25lbnROYW1lIiwiY29tcG9uZW50TmFtZSIsImRlZmF1bHRMb2NhbGUiLCJhbnRMb2NhbGUiLCJsb2NhbGVGcm9tQ29udGV4dCIsIkZ1bmN0aW9uIiwibG9jYWxlQ29kZSIsImV4aXN0Iiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlU3ltYm9sS2V5cyIsInR3b1RvbmVDb2xvclBhbGV0dGUiLCJjYWxjdWxhdGVkIiwiSWNvbkJhc2UiLCJnZXRUd29Ub25lQ29sb3JzIiwic2V0VHdvVG9uZUNvbG9ycyIsIm5vdGlmaWNhdGlvbkluc3RhbmNlIiwiY3JlYXRlZFJlZiIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsImVsZW1lbnRzIiwic2V0RWxlbWVudHMiLCJub3RpY2VQcm9wcyIsImZpcnN0TW91bnQiLCJhZGQiLCJkaXYiLCJub3RpY2VFbGUiLCJfTm90aWNlIiwiaG9sZGVyIiwib3JpZ2luRWxlbWVudHMiLCJmaW5kSW5kZXgiLCJlbGUiLCJjbG9uZUxpc3QiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJnZXRUcmFuc2l0aW9uTmFtZSIsImdldFRyYW5zaXRpb25EaXJlY3Rpb24iLCJnZXRDb2xsYXBzZWRIZWlnaHQiLCJvcGFjaXR5IiwiZ2V0UmVhbEhlaWdodCIsInNjcm9sbEhlaWdodCIsInNraXBPcGFjaXR5VHJhbnNpdGlvbiIsImRlYWRsaW5lIiwicHJvcGVydHlOYW1lIiwiY29sbGFwc2VNb3Rpb24iLCJvbkFwcGVhclN0YXJ0Iiwib25FbnRlclN0YXJ0Iiwib25BcHBlYXJBY3RpdmUiLCJvbkVudGVyQWN0aXZlIiwib25MZWF2ZVN0YXJ0Iiwib2Zmc2V0SGVpZ2h0Iiwib25MZWF2ZUFjdGl2ZSIsIm9uQXBwZWFyRW5kIiwib25FbnRlckVuZCIsIm9uTGVhdmVFbmQiLCJwbGFjZW1lbnQiLCJtb3Rpb24iLCJjYWNoZVZhbHVlIiwic2V0Q2FjaGVWYWx1ZSIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZ2V0RmllbGRJZCIsIm5hbWVQYXRoIiwiZm9ybU5hbWUiLCJtZXJnZWRJZCIsImpvaW4iLCJmb3JtSXRlbU5hbWVCbGFja0xpc3QiLCJ0b0FycmF5IiwiY2FuZGlkYXRlIiwiZGVmYXVsdFZhbHVlIiwiZGVzdHJveVJlZiIsInNldFZhbHVlIiwidXBkYXRlciIsImlnbm9yZURlc3Ryb3kiLCJyYWYiLCJjYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJoYW5kbGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJhZlVVSUQiLCJyYWZJZHMiLCJjbGVhbnVwIiwiZGVsZXRlIiwid3JhcHBlclJhZiIsInRpbWVzIiwiY2FsbFJlZiIsImxlZnRUaW1lcyIsInJlYWxJZCIsImNhbmNlbCIsInVzZUxheW91dFVwZGF0ZUVmZmVjdCIsInVzZUludGVybmFsTGF5b3V0RWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwiZGVwcyIsImZpcnN0TW91bnRSZWYiLCJyZXNwb25zaXZlTWFwIiwicmVzcG9uc2l2ZUFycmF5IiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInh4bCIsInN1YnNjcmliZXJzIiwic3ViVWlkIiwic2NyZWVucyIsIm1hdGNoSGFuZGxlcnMiLCJkaXNwYXRjaCIsInBvaW50TWFwIiwiZnVuYyIsInN1YnNjcmliZSIsInJlZ2lzdGVyIiwidW5zdWJzY3JpYmUiLCJ0b2tlbiIsInVucmVnaXN0ZXIiLCJfdGhpcyIsInNjcmVlbiIsIm1hdGNoTWVkaWFRdWVyeSIsImhhbmRsZXIiLCJtcWwiLCJyZW1vdmVMaXN0ZW5lciIsImxpc3RlbmVyIiwiX3RoaXMyIiwibWF0Y2hlcyIsIm1hdGNoTWVkaWEiLCJhZGRMaXN0ZW5lciIsImRlZmF1bHRTdGF0ZVZhbHVlIiwicG9zdFN0YXRlIiwiX3VzZVN0YXRlIiwiX3VzZVN0YXRlNSIsImhhc1ZhbHVlIiwiX3VzZVN0YXRlMiIsImlubmVyVmFsdWUiLCJzZXRJbm5lclZhbHVlIiwibWVyZ2VkVmFsdWUiLCJwb3N0TWVyZ2VkVmFsdWUiLCJvbkNoYW5nZUZuIiwiX3VzZUV2ZW50IiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJwcmV2VmFsdWUiLCJzZXRQcmV2VmFsdWUiLCJfdXNlTGF5b3V0RWZmZWN0IiwidHJpZ2dlckNoYW5nZSIsInRyaWdnZXJPbk1vdW50IiwicmVtb3ZlUGFzc3dvcmRUaW1lb3V0UmVmIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwidGltZXIiLCJBbnRkSWNvbiIsIiQiLCJjcmVhdGVIVE1MIiwicHJvdG8iLCJmb3JjZWQiLCJmb3JjZWRTdHJpbmdIVE1MTWV0aG9kIiwic3ViIiwidW5jdXJyeVRoaXMiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwicXVvdCIsImF0dHJpYnV0ZSIsInAxIiwiZmFpbHMiLCJNRVRIT0RfTkFNRSIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJhdG9iIiwiYyIsImNoYXJBdCIsImZyb21DaGFyQ29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsImhlYWRlciIsIkpTT04iLCJfRXJyb3JMaXN0IiwiX0Zvcm0iLCJfRm9ybUl0ZW0iLCJfRm9ybUxpc3QiLCJfdXNlRm9ybUluc3RhbmNlIiwiSXRlbSIsIkxpc3QiLCJFcnJvckxpc3QiLCJ1c2VGb3JtIiwidXNlRm9ybUluc3RhbmNlIiwidXNlV2F0Y2giLCJoaW50IiwicHJpbSIsInNvdXJjZXMiLCJjcmVhdGVFbXB0eSIsInNyYyIsImludGVybmFsTWVyZ2UiLCJwYXRoIiwicGFyZW50TG9vcFNldCIsImxvb3BTZXQiLCJTZXQiLCJfZ2V0IiwiaXNBcnIiLCJpc09iamVjdCIsIm9yaWdpblZhbHVlIiwiX3RvQXJyYXkyIiwiaW50ZXJuYWxTZXQiLCJlbnRpdHkiLCJwYXRocyIsInJlbW92ZUlmVW5kZWZpbmVkIiwiX3BhdGhzIiwicmVzdFBhdGgiLCJfbG9jYWxlIiwiX3Byb3BzJGxvY2FsZSIsImNoYW5nZUNvbmZpcm1Mb2NhbGUiLCJnZXRNZW1vaXplZENvbnRleHRWYWx1ZSIsIm5ld0xvY2FsZSIsInJ1bnRpbWVMb2NhbGUiLCJnZXRDb25maXJtTG9jYWxlIiwiaXRlbXNfcGVyX3BhZ2UiLCJqdW1wX3RvIiwianVtcF90b19jb25maXJtIiwicGFnZSIsInByZXZfcGFnZSIsIm5leHRfcGFnZSIsInByZXZfNSIsIm5leHRfNSIsInByZXZfMyIsIm5leHRfMyIsInBhZ2Vfc2l6ZSIsInRvZGF5Iiwibm93IiwiYmFja1RvVG9kYXkiLCJvayIsIm1vbnRoIiwieWVhciIsInRpbWVTZWxlY3QiLCJkYXRlU2VsZWN0Iiwid2Vla1NlbGVjdCIsIm1vbnRoU2VsZWN0IiwieWVhclNlbGVjdCIsImRlY2FkZVNlbGVjdCIsInllYXJGb3JtYXQiLCJkYXRlRm9ybWF0IiwiZGF5Rm9ybWF0IiwiZGF0ZVRpbWVGb3JtYXQiLCJtb250aEJlZm9yZVllYXIiLCJwcmV2aW91c01vbnRoIiwibmV4dE1vbnRoIiwicHJldmlvdXNZZWFyIiwibmV4dFllYXIiLCJwcmV2aW91c0RlY2FkZSIsIm5leHREZWNhZGUiLCJwcmV2aW91c0NlbnR1cnkiLCJuZXh0Q2VudHVyeSIsIl9BbnRkSWNvbiIsIkNoZWNrQ2lyY2xlRmlsbGVkIiwiX3MiLCJfZSIsIl94IiwiX3IiLCJfYXJyIiwiX24iLCJkb25lIiwiZXJyIiwic291cmNlS2V5cyIsInJvb3QiLCJjb250YWlucyIsIkNsb3NlQ2lyY2xlRmlsbGVkIiwiRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQiLCJJbmZvQ2lyY2xlRmlsbGVkIiwiTG9hZGluZ091dGxpbmVkIiwiZ2V0UmNOb3RpZmljYXRpb25JbnN0YW5jZSIsImlubmVySW5zdGFuY2UiLCJwcm94eSIsImhvbGRlckNhbGxiYWNrIiwiX3VzZVJDTm90aWZpY2F0aW9uIiwiX3VzZU5vdGlmaWNhdGlvbiIsIl91c2VSQ05vdGlmaWNhdGlvbjIiLCJob29rTm90aWZ5IiwiaG9va0FwaVJlZiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVTdXBlcjIiLCJfcmVhY3REb20iLCJOb3RpY2UiLCJfQ29tcG9uZW50IiwiX3N1cGVyIiwiY2xvc2VUaW1lciIsImNsb3NlIiwic3RvcFByb3BhZ2F0aW9uIiwiY2xlYXJDbG9zZVRpbWVyIiwiX3RoaXMkcHJvcHMiLCJub3RpY2VLZXkiLCJzdGFydENsb3NlVGltZXIiLCJwcmV2UHJvcHMiLCJ1cGRhdGVNYXJrIiwicmVzdGFydENsb3NlVGltZXIiLCJfdGhpcyRwcm9wczIiLCJjbG9zYWJsZSIsImNsb3NlSWNvbiIsImNvbXBvbmVudENsYXNzIiwiZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzIiwic3Vic3RyIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwiY3JlYXRlUG9ydGFsIiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiX3NldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2dldFByb3RvdHlwZU9mIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJkZWZhdWx0R2V0Q29udGFpbmVyIiwiZGVmYXVsdENsb3NlSWNvbiIsIl9yZWdlbmVyYXRvclJ1bnRpbWUyIiwiX0NoZWNrQ2lyY2xlT3V0bGluZWQiLCJfQ2xvc2VDaXJjbGVPdXRsaW5lZCIsIl9DbG9zZU91dGxpbmVkIiwiX0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQiLCJfSW5mb0NpcmNsZU91dGxpbmVkIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsImRlZmF1bHRCb3R0b20iLCJkZWZhdWx0UGxhY2VtZW50IiwiZ2V0UGxhY2VtZW50U3R5bGUiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJnZXROb3RpZmljYXRpb25JbnN0YW5jZSIsIl9hcmdzJHBsYWNlbWVudCIsIl9hcmdzJGdldENvbnRhaW5lciIsImNhY2hlS2V5IiwiY2FjaGVJbnN0YW5jZSIsIm5vdGlmaWNhdGlvbkNsYXNzIiwibm90aWZpY2F0aW9uIiwiZHVyYXRpb25BcmciLCJidG4iLCJfYXJncyRjbG9zZUljb24iLCJpY29uTm9kZSIsImNsb3NlSWNvblRvUmVuZGVyIiwiYXV0b01hcmdpblRhZyIsInVzZU5vdGlmaWNhdGlvbiIsIl9jYWxsZWUiLCJhYnJ1cHQiLCJzdG9wIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkNvbnRpbnVlU2VudGluZWwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJyZWNvcmQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwic3RhdGUiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwibWV0aG9kTmFtZSIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImF3cmFwIiwiYXN5bmMiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiQ2hlY2tDaXJjbGVPdXRsaW5lZCIsIkNsb3NlQ2lyY2xlT3V0bGluZWQiLCJDbG9zZU91dGxpbmVkIiwiRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCIsIkluZm9DaXJjbGVPdXRsaW5lZCIsIndpdGhDb25maWdDb25zdW1lciIsImNvbnMiLCJjb25maWdQcm9wcyIsImJhc2ljUHJlZml4Q2xzIiwiZ2V0U3R5bGUiLCJkeW5hbWljU3R5bGVNYXJrIiwiX3Rpbnljb2xvciIsIkRhdGUiLCJ2YXJpYWJsZXMiLCJmb3JtYXRDb2xvciIsInRvUmdiU3RyaW5nIiwiZmlsbENvbG9yIiwiY29sb3JWYWwiLCJUaW55Q29sb3IiLCJjb2xvclBhbGV0dGVzIiwic2V0QWxwaGEiLCJwcmltYXJ5Q29sb3JzIiwibGlnaHRlbiIsInRpbnQiLCJnZXRBbHBoYSIsInByaW1hcnlBY3RpdmVDb2xvciIsImRhcmtlbiIsInN1Y2Nlc3NDb2xvciIsIndhcm5pbmdDb2xvciIsImVycm9yQ29sb3IiLCJpbmZvQ29sb3IiLCJjc3NMaXN0IiwidHJpbSIsIl91c2VGb3JtMyIsIkludGVybmFsRm9ybSIsImNvbnRleHRTaXplIiwiY29udGV4dERpc2FibGVkIiwiY29udGV4dEZvcm0iLCJfcHJvcHMkY2xhc3NOYW1lIiwiX3Byb3BzJGRpc2FibGVkIiwiY29sb24iLCJsYWJlbFdyYXAiLCJsYWJlbENvbCIsIndyYXBwZXJDb2wiLCJoaWRlUmVxdWlyZWRNYXJrIiwiX3Byb3BzJGxheW91dCIsImxheW91dCIsInNjcm9sbFRvRmlyc3RFcnJvciIsInJlcXVpcmVkTWFyayIsIm9uRmluaXNoRmFpbGVkIiwicmVzdEZvcm1Qcm9wcyIsImNvbnRleHRWYWxpZGF0ZU1lc3NhZ2VzIiwibWVyZ2VkUmVxdWlyZWRNYXJrIiwibWVyZ2VkQ29sb24iLCJmb3JtQ2xhc3NOYW1lIiwiX3VzZUZvcm0iLCJ3cmFwRm9ybSIsIl9fSU5URVJOQUxfXyIsImZvcm1Db250ZXh0VmFsdWUiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiZXJyb3JJbmZvIiwiZGVmYXVsdFNjcm9sbFRvRmlyc3RFcnJvciIsImVycm9yRmllbGRzIiwic2Nyb2xsVG9GaWVsZCIsIl91c2VSY0Zvcm0iLCJyY0Zvcm0iLCJpdGVtc1JlZiIsIm5hbWVQYXRoU3RyIiwidG9OYW1lUGF0aFN0ciIsIl91dGlsIiwiZ2V0RWxlbWVudEJ5SWQiLCJfc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCIsInNjcm9sbE1vZGUiLCJnZXRGaWVsZEluc3RhbmNlIiwiX3VzZUZvcm1JdGVtU3RhdHVzIiwiX3JlYWN0Tm9kZSIsIl90eXBlIiwiX3VzZUZyYW1lU3RhdGUzIiwiX3VzZUl0ZW1SZWYiLCJfSXRlbUhvbGRlciIsIk1lbW9JbnB1dCIsIm1lbW8iLCJ1cGRhdGUiLCJjaGlsZFByb3BzIiwiRm9ybUl0ZW0iLCJub1N0eWxlIiwiZGVwZW5kZW5jaWVzIiwicnVsZXMiLCJsYWJlbCIsIm1lc3NhZ2VWYXJpYWJsZXMiLCJfcHJvcHMkdHJpZ2dlciIsInRyaWdnZXIiLCJ2YWxpZGF0ZVRyaWdnZXIiLCJoaWRkZW4iLCJpc1JlbmRlclByb3BzIiwibm90aWZ5UGFyZW50TWV0YUNoYW5nZSIsImNvbnRleHRWYWxpZGF0ZVRyaWdnZXIiLCJGaWVsZENvbnRleHQiLCJtZXJnZWRWYWxpZGF0ZVRyaWdnZXIiLCJoYXNOYW1lIiwiaGFzVmFsaWROYW1lIiwibGlzdENvbnRleHQiLCJMaXN0Q29udGV4dCIsImZpZWxkS2V5UGF0aFJlZiIsIl91c2VGcmFtZVN0YXRlIiwiX3VzZUZyYW1lU3RhdGUyIiwic3ViRmllbGRFcnJvcnMiLCJzZXRTdWJGaWVsZEVycm9ycyIsInRvdWNoZWQiLCJ2YWxpZGF0aW5nIiwidmFsaWRhdGVkIiwibWV0YSIsInNldE1ldGEiLCJvblN1Ykl0ZW1NZXRhQ2hhbmdlIiwic3ViTWV0YSIsInVuaXF1ZUtleXMiLCJwcmV2U3ViRmllbGRFcnJvcnMiLCJtZXJnZWROYW1lS2V5IiwiX1JlYWN0JHVzZU1lbW8iLCJlcnJvckxpc3QiLCJ3YXJuaW5nTGlzdCIsInN1YkZpZWxkRXJyb3IiLCJfUmVhY3QkdXNlTWVtbzIiLCJtZXJnZWRFcnJvcnMiLCJtZXJnZWRXYXJuaW5ncyIsImdldEl0ZW1SZWYiLCJyZW5kZXJMYXlvdXQiLCJiYXNlQ2hpbGRyZW4iLCJpc1JlcXVpcmVkIiwiRmllbGQiLCJvbk1ldGFDaGFuZ2UiLCJuZXh0TWV0YSIsImtleUluZm8iLCJnZXRLZXkiLCJfa2V5SW5mbyIsImZpZWxkS2V5IiwiY29udHJvbCIsInJlbmRlck1ldGEiLCJtZXJnZWROYW1lIiwicnVsZSIsIndhcm5pbmdPbmx5IiwicnVsZUVudGl0eSIsIm1lcmdlZENvbnRyb2wiLCJleHRyYSIsImRlc2NyaWJlZGJ5QXJyIiwiZXZlbnROYW1lIiwiX2EyIiwiX2MyIiwid2F0Y2hpbmdDaGlsZFByb3BzIiwidmFsdWVQcm9wTmFtZSIsInVzZVN0YXR1cyIsImZyYW1lUmVmIiwiYmF0Y2hSZWYiLCJfcmFmIiwiY2hpbGRyZW5SZWYiLCJuYW1lU3RyIiwib3JpZ2luUmVmIiwiX2l0ZW1DbGFzc05hbWUiLCJ2YWxpZGF0ZVN0YXR1cyIsIml0ZW1QcmVmaXhDbHMiLCJoYXNIZWxwIiwiaGFzRXJyb3IiLCJtYXJnaW5Cb3R0b20iLCJzZXRNYXJnaW5Cb3R0b20iLCJnZXRDb21wdXRlZFN0eWxlIiwibWVyZ2VkVmFsaWRhdGVTdGF0dXMiLCJmb3JtSXRlbVN0YXR1c0NvbnRleHQiLCJJY29uTm9kZSIsImljb25NYXAiLCJfZ3JpZCIsIlJvdyIsIl9Gb3JtSXRlbUxhYmVsIiwiaHRtbEZvciIsIl9Gb3JtSXRlbUlucHV0Iiwib25FcnJvclZpc2libGVDaGFuZ2VkIiwibmV4dFZpc2libGUiLCJfY29sIiwiX3JvdyIsIl91c2VCcmVha3BvaW50IiwidXNlQnJlYWtwb2ludCIsIl91c2VGb3JjZVVwZGF0ZSIsIl9yZXNwb25zaXZlT2JzZXJ2ZSIsInJlZnJlc2hPbkNoYW5nZSIsInNjcmVlbnNSZWYiLCJmb3JjZVVwZGF0ZSIsInN1cHBvcnRTY3JlZW5zIiwiX1JlYWN0JHVzZVJlZHVjZXIiLCJ1c2VSZWR1Y2VyIiwieCIsIl91c2VGbGV4R2FwU3VwcG9ydCIsInVzZU1lcmdlUHJvcEJ5U2NyZWVuIiwib3JpUHJvcCIsInByb3AiLCJzZXRQcm9wIiwiYnJlYWtwb2ludCIsImN1clZhbCIsImNsYWNNZXJnZUFsaWduT3JKdXN0aWZ5Iiwic3RyaW5naWZ5IiwianVzdGlmeSIsImFsaWduIiwiX3Byb3BzJGd1dHRlciIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0Iiwic2V0U2NyZWVucyIsIl9SZWFjdCR1c2VTdGF0ZTUiLCJfUmVhY3QkdXNlU3RhdGU2IiwiY3VyU2NyZWVucyIsInNldEN1clNjcmVlbnMiLCJtZXJnZUFsaWduIiwibWVyZ2VKdXN0aWZ5IiwiZ3V0dGVyUmVmIiwiY3VycmVudEd1dHRlciIsInJlc3VsdHMiLCJndXR0ZXJzIiwicm93U3R5bGUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJfZ3V0dGVycyIsInJvd0dhcCIsIm1hcmdpblRvcCIsIl9ndXR0ZXJzMiIsImd1dHRlckgiLCJndXR0ZXJWIiwicm93Q29udGV4dCIsIl9zdHlsZUNoZWNrZXIiLCJmbGV4aWJsZSIsInNldEZsZXhpYmxlIiwiZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCIsImNhblVzZURvY0VsZW1lbnQiLCJpc1N0eWxlU3VwcG9ydCIsImZsZXhHYXBTdXBwb3J0ZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsInN0eWxlTmFtZSIsInN0eWxlVmFsdWUiLCJpc1N0eWxlTmFtZVN1cHBvcnQiLCJvcmlnaW4iLCJpc1N0eWxlVmFsdWVTdXBwb3J0Iiwic3R5bGVOYW1lTGlzdCIsIl9RdWVzdGlvbkNpcmNsZU91dGxpbmVkIiwiX3Rvb2x0aXAiLCJ0b29sdGlwIiwiX3VzZUxvY2FsZVJlY2VpdmVyIiwiZm9ybUxvY2FsZSIsImNvbnRleHRMYWJlbEFsaWduIiwiY29udGV4dExhYmVsQ29sIiwiY29udGV4dENvbG9uIiwibWVyZ2VkTGFiZWxDb2wiLCJtZXJnZWRMYWJlbEFsaWduIiwibGFiZWxDbHNCYXNpYyIsImxhYmVsQ29sQ2xhc3NOYW1lIiwibGFiZWxDaGlsZHJlbiIsImNvbXB1dGVkQ29sb24iLCJ0b29sdGlwUHJvcHMiLCJ0aXRsZSIsInRvVG9vbHRpcFByb3BzIiwiX3Rvb2x0aXBQcm9wcyRpY29uIiwicmVzdFRvb2x0aXBQcm9wcyIsInRvb2x0aXBOb2RlIiwibGFiZWxDbGFzc05hbWUiLCJRdWVzdGlvbkNpcmNsZU91dGxpbmVkIiwiX3JjVG9vbHRpcCIsIl91c2VNZXJnZWRTdGF0ZTMiLCJfcGxhY2VtZW50cyIsIlByZXNldENvbG9yUmVnZXgiLCJSZWdFeHAiLCJQcmVzZXRDb2xvclR5cGVzIiwiZ2V0RGlzYWJsZWRDb21wYXRpYmxlQ2hpbGRyZW4iLCJlbGVtZW50VHlwZSIsIl9fQU5UX0JVVFRPTiIsIl9fQU5UX1NXSVRDSCIsIl9fQU5UX1JBRElPIiwiX3NwbGl0T2JqZWN0IiwicGlja2VkIiwib21pdHRlZCIsInNwbGl0T2JqZWN0Iiwic3BhblN0eWxlIiwiYnV0dG9uU3R5bGUiLCJwb2ludGVyRXZlbnRzIiwiX3VzZU1lcmdlZFN0YXRlIiwiZGVmYXVsdE9wZW4iLCJkZWZhdWx0VmlzaWJsZSIsIl91c2VNZXJnZWRTdGF0ZTIiLCJzZXRPcGVuIiwiaXNOb1RpdGxlIiwib3ZlcmxheSIsImdldFRvb2x0aXBQbGFjZW1lbnRzIiwiYnVpbHRpblBsYWNlbWVudHMiLCJfcHJvcHMkYXJyb3dQb2ludEF0Q2UiLCJhcnJvd1BvaW50QXRDZW50ZXIiLCJfcHJvcHMkYXV0b0FkanVzdE92ZXIiLCJhdXRvQWRqdXN0T3ZlcmZsb3ciLCJfcHJvcHMkcGxhY2VtZW50IiwiX3Byb3BzJG1vdXNlRW50ZXJEZWxhIiwibW91c2VFbnRlckRlbGF5IiwiX3Byb3BzJG1vdXNlTGVhdmVEZWxhIiwibW91c2VMZWF2ZURlbGF5Iiwib3BlbkNsYXNzTmFtZSIsImdldFRvb2x0aXBDb250YWluZXIiLCJvdmVybGF5Q2xhc3NOYW1lIiwib3ZlcmxheUlubmVyU3R5bGUiLCJ0ZW1wT3BlbiIsImNoaWxkQ2xzIiwiY3VzdG9tT3ZlcmxheUNsYXNzTmFtZSIsImZvcm1hdHRlZE92ZXJsYXlJbm5lclN0eWxlIiwiYXJyb3dDb250ZW50U3R5bGUiLCJiYWNrZ3JvdW5kIiwib25WaXNpYmxlQ2hhbmdlIiwidmlzIiwib25PcGVuQ2hhbmdlIiwib25Qb3B1cEFsaWduIiwiZG9tTm9kZSIsInBsYWNlbWVudHMiLCJwb2ludHMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidHJhbnNmb3JtT3JpZ2luIiwiYXJyb3dDb250ZW50IiwiZm5SZWYiLCJfZm5SZWYkY3VycmVudCIsIlByZXNldFN0YXR1c0NvbG9yVHlwZXMiLCJfY29uZmlnJGFycm93V2lkdGgiLCJhcnJvd1dpZHRoIiwiX2NvbmZpZyRob3Jpem9udGFsQXJyIiwiaG9yaXpvbnRhbEFycm93U2hpZnQiLCJfY29uZmlnJHZlcnRpY2FsQXJyb3ciLCJ2ZXJ0aWNhbEFycm93U2hpZnQiLCJwbGFjZW1lbnRNYXAiLCJ0b3BMZWZ0IiwibGVmdFRvcCIsInRvcFJpZ2h0IiwicmlnaHRUb3AiLCJib3R0b21SaWdodCIsInJpZ2h0Qm90dG9tIiwiYm90dG9tTGVmdCIsImxlZnRCb3R0b20iLCJvdmVyZmxvdyIsImdldE92ZXJmbG93T3B0aW9ucyIsInRhcmdldE9mZnNldCIsImlnbm9yZVNoYWtlIiwiYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCIsImFkanVzdFgiLCJhZGp1c3RZIiwiYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQiLCJmb3JtSXRlbVJlbmRlciIsIl9pbnRlcm5hbEl0ZW1SZW5kZXIiLCJmb3JtQ29udGV4dCIsIm1lcmdlZFdyYXBwZXJDb2wiLCJzdWJGb3JtQ29udGV4dCIsImlucHV0RG9tIiwiZm9ybUl0ZW1Db250ZXh0IiwiZXJyb3JMaXN0RG9tIiwiZmxleFdyYXAiLCJleHRyYVByb3BzIiwiZXh0cmFEb20iLCJkb20iLCJjb250ZXh0VmFsdWUiLCJvcGVyYXRpb24iLCJmaWVsZCIsIl9Hcm91cCIsIl9JbnB1dCIsIl9QYXNzd29yZCIsIl9TZWFyY2giLCJfVGV4dEFyZWEiLCJJbnB1dCIsIkdyb3VwIiwiU2VhcmNoIiwiVGV4dEFyZWEiLCJQYXNzd29yZCIsImNscyIsImNvbXBhY3QiLCJncm91cEZvcm1JdGVtQ29udGV4dCIsInJldCIsIkNoaWxkcmVuIiwia2VlcEVtcHR5IiwiX0V5ZUludmlzaWJsZU91dGxpbmVkIiwiX0V5ZU91dGxpbmVkIiwiZGVmYXVsdEljb25SZW5kZXIiLCJBY3Rpb25NYXAiLCJjbGljayIsImhvdmVyIiwiX3Byb3BzJHZpc2liaWxpdHlUb2dnIiwidmlzaWJpbGl0eVRvZ2dsZSIsInZpc2liaWxpdHlDb250cm9sbGVkIiwic2V0VmlzaWJsZSIsInByZXZTdGF0ZSIsIm5ld1N0YXRlIiwicmVuZGVyUGFzc3dvcmQiLCJjdXN0b21pemVJbnB1dFByZWZpeENscyIsImlucHV0UHJlZml4Q2xzIiwic3VmZml4SWNvbiIsIl9pY29uUHJvcHMiLCJfcHJvcHMkYWN0aW9uIiwiYWN0aW9uIiwiX3Byb3BzJGljb25SZW5kZXIiLCJpY29uUmVuZGVyIiwiaWNvblRyaWdnZXIiLCJpY29uUHJvcHMiLCJwcmV2ZW50RGVmYXVsdCIsImdldEljb24iLCJvbWl0dGVkUHJvcHMiLCJFeWVJbnZpc2libGVPdXRsaW5lZCIsIkV5ZU91dGxpbmVkIiwiX1NlYXJjaE91dGxpbmVkIiwiX2J1dHRvbiIsImJ1dHRvbiIsImN1c3RvbWl6ZVNpemUiLCJfcHJvcHMkZW50ZXJCdXR0b24iLCJlbnRlckJ1dHRvbiIsImN1c3RvbU9uU2VhcmNoIiwib25TZWFyY2giLCJjdXN0b21PbkNoYW5nZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJjb21wb3NlZFJlZiIsIm9uTW91c2VEb3duIiwiYWN0aXZlRWxlbWVudCIsInNlYXJjaEljb24iLCJidG5DbGFzc05hbWUiLCJlbnRlckJ1dHRvbkFzRWxlbWVudCIsImlzQW50ZEJ1dHRvbiIsIm9uUHJlc3NFbnRlciIsIlNlYXJjaE91dGxpbmVkIiwiY29udmVydExlZ2FjeVByb3BzIiwiZGFuZ2VyIiwiX3dhdmUiLCJfYnV0dG9uR3JvdXAiLCJfTG9hZGluZ0ljb24iLCJyeFR3b0NOQ2hhciIsImlzVHdvQ05DaGFyIiwiaXNVbkJvcmRlcmVkQnV0dG9uVHlwZSIsInNwYWNlQ2hpbGRyZW4iLCJuZWVkSW5zZXJ0ZWQiLCJpc1ByZXZDaGlsZFB1cmUiLCJjaGlsZExpc3QiLCJpc0N1cnJlbnRDaGlsZFB1cmUiLCJsYXN0SW5kZXgiLCJsYXN0Q2hpbGQiLCJTUEFDRSIsImluc2VydFNwYWNlIiwiSW50ZXJuYWxCdXR0b24iLCJfcHJvcHMkbG9hZGluZyIsIl9wcm9wcyR0eXBlIiwiX3Byb3BzJHNoYXBlIiwic2hhcGUiLCJfcHJvcHMkZ2hvc3QiLCJnaG9zdCIsIl9wcm9wcyRibG9jayIsIl9wcm9wcyRodG1sVHlwZSIsImh0bWxUeXBlIiwiZ3JvdXBTaXplIiwiR3JvdXBTaXplQ29udGV4dCIsImlubmVyTG9hZGluZyIsInNldExvYWRpbmciLCJoYXNUd29DTkNoYXIiLCJzZXRIYXNUd29DTkNoYXIiLCJidXR0b25SZWYiLCJjcmVhdGVSZWYiLCJpc05lZWRJbnNlcnRlZCIsImxvYWRpbmdPckRlbGF5IiwiZGVsYXkiLCJkZWxheVRpbWVyIiwiYnV0dG9uVGV4dCIsInRleHRDb250ZW50IiwiaGFuZGxlQ2xpY2siLCJhdXRvSW5zZXJ0U3BhY2UiLCJzaXplRnVsbG5hbWUiLCJzaXplQ2xzIiwibGFyZ2UiLCJzbWFsbCIsIm1pZGRsZSIsImljb25UeXBlIiwibGlua0J1dHRvblJlc3RQcm9wcyIsImhyZWYiLCJleGlzdEljb24iLCJraWRzIiwiYnV0dG9uTm9kZSIsIkJ1dHRvbiIsInN0eWxlRm9yUHNldWRvIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJpc0hpZGRlbiIsIm9mZnNldFBhcmVudCIsImdldFZhbGlkYXRlQ29udGFpbmVyIiwibm9kZVJvb3QiLCJEb2N1bWVudCIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImlzTm90R3JleSIsIm1hdGNoIiwiV2F2ZSIsIl9SZWFjdCRDb21wb25lbnQiLCJjb250YWluZXJSZWYiLCJhbmltYXRpb25TdGFydCIsImRlc3Ryb3llZCIsIndhdmVDb2xvciIsImluc2VydEV4dHJhTm9kZSIsImV4dHJhTm9kZSIsImF0dHJpYnV0ZU5hbWUiLCJnZXRBdHRyaWJ1dGVOYW1lIiwiYm9yZGVyQ29sb3IiLCJnZXRSb290Tm9kZSIsIm93bmVyRG9jdW1lbnQiLCJub2RlQm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblRyYW5zaXRpb25TdGFydCIsIm9uVHJhbnNpdGlvbkVuZCIsInJlc2V0RWZmZWN0IiwiYW5pbWF0aW9uTmFtZSIsImJpbmRBbmltYXRpb25FdmVudCIsImdldFByb3BlcnR5VmFsdWUiLCJjbGlja1dhdmVUaW1lb3V0SWQiLCJhbmltYXRpb25TdGFydElkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbmRlcldhdmUiLCJFbGVtZW50IiwiY29udGV4dFR5cGUiLCJpZHMiLCJkZWxheUZyYW1lcyIsIm15SWQiLCJyZXN0RnJhbWVzIiwiaW50ZXJuYWxDYWxsYmFjayIsInBpZCIsImdldENvbGxhcHNlZFdpZHRoIiwiZ2V0UmVhbFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJyZW1vdmVPbkxlYXZlIiwiX3JjVGV4dGFyZWEiLCJfQ2xlYXJhYmxlTGFiZWxlZElucHV0IiwiZml4RW1vamlMZW5ndGgiLCJtYXhMZW5ndGgiLCJzZXRUcmlnZ2VyVmFsdWUiLCJpc0N1cnNvckluRW5kIiwicHJlVmFsdWUiLCJ0cmlnZ2VyVmFsdWUiLCJuZXdUcmlnZ2VyVmFsdWUiLCJfYSRib3JkZXJlZCIsIl9hJHNob3dDb3VudCIsInNob3dDb3VudCIsImlubmVyUmVmIiwiY2xlYXJhYmxlSW5wdXRSZWYiLCJjb21wb3NpdGluZyIsInNldENvbXBvc2l0aW5nIiwiZm9jdXNlZCIsInNldEZvY3VzZWQiLCJvbGRDb21wb3NpdGlvblZhbHVlUmVmIiwib2xkU2VsZWN0aW9uU3RhcnRSZWYiLCJoYW5kbGVTZXRWYWx1ZSIsImhhc01heExlbmd0aCIsInJlc2l6YWJsZVRleHRBcmVhIiwidGV4dEFyZWEiLCJibHVyIiwicmVzaXplIiwic2VsZWN0aW9uU3RhcnQiLCJ0ZXh0YXJlYU5vZGUiLCJpbnB1dFR5cGUiLCJoYW5kbGVSZXNldCIsInZhbHVlTGVuZ3RoIiwiZGF0YUNvdW50IiwiZm9ybWF0dGVyIiwiQ2xlYXJhYmxlSW5wdXRUeXBlIiwiQ2xlYXJhYmxlTGFiZWxlZElucHV0IiwicmVhZE9ubHkiLCJuZWVkQ2xlYXIiLCJzdGF0dXNDb250ZXh0IiwiYWZmaXhXcmFwcGVyQ2xzIiwicmVuZGVyQ2xlYXJJY29uIiwiX3RoaXMkcHJvcHMzIiwicmVuZGVyVGV4dEFyZWFXaXRoQ2xlYXJJY29uIl0sIm1hcHBpbmdzIjoiK3hDQVNPLFNBQVNBLEVBQVlDLEVBQVFDLEdBQ2hDLElBQUlDLEVBQUssSUFBSSxJQUFVRixHQUNuQkcsRUFBSyxJQUFJLElBQVVGLEdBQ3ZCLE9BQVNHLEtBQUtDLElBQUlILEVBQUdJLGVBQWdCSCxFQUFHRyxnQkFBa0IsTUFDckRGLEtBQUtHLElBQUlMLEVBQUdJLGVBQWdCSCxFQUFHRyxnQkFBa0IsS0FlbkQsU0FBU0UsRUFBV1IsRUFBUUMsRUFBUVEsR0FDdkMsSUFBSUMsRUFBSUMsT0FDTSxJQUFWRixJQUFvQkEsRUFBUSxDQUFFRyxNQUFPLEtBQU1DLEtBQU0sVUFDckQsSUFBSUMsRUFBbUJmLEVBQVlDLEVBQVFDLEdBQzNDLFFBQWdDLFFBQXRCUyxFQUFLRCxFQUFNRyxhQUEwQixJQUFQRixFQUFnQkEsRUFBSyxPQUErQixRQUFyQkMsRUFBS0YsRUFBTUksWUFBeUIsSUFBUEYsRUFBZ0JBLEVBQUssVUFDckgsSUFBSyxVQUNMLElBQUssV0FDRCxPQUFPRyxHQUFvQixJQUMvQixJQUFLLFVBQ0QsT0FBT0EsR0FBb0IsRUFDL0IsSUFBSyxXQUNELE9BQU9BLEdBQW9CLEVBQy9CLFFBQ0ksT0FBTyxHQW9CWixTQUFTQyxFQUFhQyxFQUFXQyxFQUFXQyxRQUNsQyxJQUFUQSxJQUFtQkEsRUFBTyxDQUFFQyx1QkFBdUIsRUFBT1AsTUFBTyxLQUFNQyxLQUFNLFVBSWpGLElBSEEsSUFBSU8sRUFBWSxLQUNaQyxFQUFZLEVBQ1pGLEVBQXdCRCxFQUFLQyxzQkFBdUJQLEVBQVFNLEVBQUtOLE1BQU9DLEVBQU9LLEVBQUtMLEtBQy9FUyxFQUFLLEVBQUdDLEVBQWNOLEVBQVdLLEVBQUtDLEVBQVlDLE9BQVFGLElBQU0sQ0FDckUsSUFBSUcsRUFBUUYsRUFBWUQsR0FDcEJJLEVBQVEzQixFQUFZaUIsRUFBV1MsR0FDL0JDLEVBQVFMLElBQ1JBLEVBQVlLLEVBQ1pOLEVBQVksSUFBSSxJQUFVSyxJQUdsQyxPQUFJakIsRUFBV1EsRUFBV0ksRUFBVyxDQUFFUixNQUFPQSxFQUFPQyxLQUFNQSxNQUFZTSxFQUM1REMsR0FFWEYsRUFBS0MsdUJBQXdCLEVBQ3RCSixFQUFhQyxFQUFXLENBQUMsT0FBUSxRQUFTRSxJLFlDekU5QyxTQUFTUyxFQUFXQyxFQUFZQyxHQUNuQyxJQUFJSixFQUFRLElBQUksSUFBVUcsR0FDdEJFLEVBQWEsSUFBTSxZQUFjTCxFQUFNTSxFQUFHTixFQUFNTyxFQUFHUCxFQUFNUSxFQUFHUixFQUFNUyxHQUNsRUMsRUFBbUJMLEVBQ25CTSxFQUFlWCxFQUFNVyxhQUFlLHFCQUF1QixHQUMvRCxHQUFJUCxFQUFhLENBQ2IsSUFBSVEsRUFBSSxJQUFJLElBQVVSLEdBQ3RCTSxFQUFtQixJQUFNLFlBQWNFLEVBQUVOLEVBQUdNLEVBQUVMLEVBQUdLLEVBQUVKLEVBQUdJLEVBQUVILEdBRTVELE1BQU8sOENBQThDSSxPQUFPRixFQUFjLGtCQUFrQkUsT0FBT1IsRUFBWSxpQkFBaUJRLE9BQU9ILEVBQWtCLEssWUNSdEosU0FBU0ksRUFBVUMsRUFBT0MsR0FDN0IsSUFBSUMsRUFBVyxDQUNYWCxFQUFHLFlBQW9CUyxFQUFNVCxHQUM3QkMsRUFBRyxZQUFvQlEsRUFBTVIsR0FDN0JDLEVBQUcsWUFBb0JPLEVBQU1QLElBS2pDLFlBSGdCVSxJQUFaSCxFQUFNTixJQUNOUSxFQUFTUixFQUFJVSxPQUFPSixFQUFNTixJQUV2QixJQUFJLElBQVVRLEVBQVVELEdBRzVCLFNBQVNJLElBQ1osT0FBTyxJQUFJLElBQVUsQ0FDakJkLEVBQUczQixLQUFLMEMsU0FDUmQsRUFBRzVCLEtBQUswQyxTQUNSYixFQUFHN0IsS0FBSzBDLFcsYUNsQlQsU0FBU0EsRUFBT0MsR0FHbkIsUUFGZ0IsSUFBWkEsSUFBc0JBLEVBQVUsU0FFZEosSUFBbEJJLEVBQVFDLE9BQ1UsT0FBbEJELEVBQVFDLE1BQWdCLENBQ3hCLElBQUlDLEVBQWNGLEVBQVFDLE1BQ3RCRSxFQUFTLEdBRWIsSUFEQUgsRUFBUUMsV0FBUUwsRUFDVE0sRUFBY0MsRUFBTzFCLFFBSXhCdUIsRUFBUUMsTUFBUSxLQUNaRCxFQUFRSSxPQUNSSixFQUFRSSxNQUFRLEdBRXBCRCxFQUFPRSxLQUFLTixFQUFPQyxJQUd2QixPQURBQSxFQUFRQyxNQUFRQyxFQUNUQyxFQUdYLElBQUlHLEVBWVIsU0FBaUJDLEVBQUtILEdBQ2xCLElBQ0lJLEVBQU1DLEVBbUVkLFNBQXFCQyxHQUNqQixJQUFJQyxFQUFNQyxTQUFTRixFQUFZLElBQy9CLElBQUtiLE9BQU9nQixNQUFNRixJQUFRQSxFQUFNLEtBQU9BLEVBQU0sRUFDekMsTUFBTyxDQUFDQSxFQUFLQSxHQUVqQixHQUEwQixpQkFBZkQsRUFBeUIsQ0FDaEMsSUFBSUksRUFBYUMsRUFBT0MsTUFBSyxTQUFVQyxHQUFLLE9BQU9BLEVBQUVDLE9BQVNSLEtBQzlELEdBQUlJLEVBQVksQ0FDWixJQUFJcEMsRUFBUXlDLEVBQVlMLEdBQ3hCLEdBQUlwQyxFQUFNMEMsU0FDTixPQUFPMUMsRUFBTTBDLFNBR3JCLElBQUlDLEVBQVMsSUFBSSxJQUFVWCxHQUMzQixHQUFJVyxFQUFPQyxRQUFTLENBQ2hCLElBQUlmLEVBQU1jLEVBQU9FLFFBQVFqQixFQUN6QixNQUFPLENBQUNDLEVBQUtBLElBR3JCLE1BQU8sQ0FBQyxFQUFHLEtBdkZJaUIsQ0FBWWpCLEdBQ01ILEdBRzdCSSxFQUFNLElBQ05BLEVBQU0sSUFBTUEsR0FFaEIsT0FBT0EsRUFwQkNpQixDQUFRekIsRUFBUU8sSUFBS1AsRUFBUUksTUFFakNkLEVBb0JSLFNBQXdCaUIsRUFBS1AsR0FDekIsR0FBb0IsZUFBaEJBLEVBQVFPLElBQ1IsT0FBTyxFQUVYLEdBQTJCLFdBQXZCUCxFQUFRMEIsV0FDUixPQUFPakIsRUFBYSxDQUFDLEVBQUcsS0FBTVQsRUFBUUksTUFFMUMsSUFBSXVCLEVBQWtCQyxFQUFhckIsR0FBS29CLGdCQUNwQ0UsRUFBT0YsRUFBZ0IsR0FDdkJHLEVBQU9ILEVBQWdCLEdBQzNCLE9BQVEzQixFQUFRMEIsWUFDWixJQUFLLFNBQ0RHLEVBQU8sR0FDUCxNQUNKLElBQUssT0FDREEsRUFBT0MsRUFBTyxHQUNkLE1BQ0osSUFBSyxRQUNEQSxFQUFPLEdBS2YsT0FBT3JCLEVBQWEsQ0FBQ29CLEVBQU1DLEdBQU85QixFQUFRSSxNQTNDbEMyQixDQUFlekIsRUFBR04sR0FHdEJRLEVBQU0sQ0FBRUYsRUFBR0EsRUFBR2hCLEVBQUdBLEVBQUcwQyxFQTBDNUIsU0FBd0JDLEVBQUdDLEVBQUdsQyxHQUMxQixJQUFJbUMsRUFrQlIsU0FBOEJGLEVBQUdDLEdBRTdCLElBREEsSUFBSUUsRUFBY1IsRUFBYUssR0FBR0csWUFDekJDLEVBQUksRUFBR0EsRUFBSUQsRUFBWTNELE9BQVMsRUFBRzRELElBQUssQ0FDN0MsSUFBSUMsRUFBS0YsRUFBWUMsR0FBRyxHQUNwQkUsRUFBS0gsRUFBWUMsR0FBRyxHQUNwQkcsRUFBS0osRUFBWUMsRUFBSSxHQUFHLEdBQ3hCSSxFQUFLTCxFQUFZQyxFQUFJLEdBQUcsR0FDNUIsR0FBSUgsR0FBS0ksR0FBTUosR0FBS00sRUFBSSxDQUNwQixJQUFJRSxHQUFLRCxFQUFLRixJQUFPQyxFQUFLRixHQUUxQixPQUFPSSxFQUFJUixHQURISyxFQUFLRyxFQUFJSixJQUl6QixPQUFPLEVBL0JJSyxDQUFxQlYsRUFBR0MsR0FDL0JVLEVBQU8sSUFDWCxPQUFRNUMsRUFBUTBCLFlBQ1osSUFBSyxPQUNEa0IsRUFBT1QsRUFBTyxHQUNkLE1BQ0osSUFBSyxRQUNEQSxHQUFRUyxFQUFPVCxHQUFRLEVBQ3ZCLE1BQ0osSUFBSyxTQUNEQSxFQUFPLEVBQ1BTLEVBQU8sSUFLZixPQUFPbkMsRUFBYSxDQUFDMEIsRUFBTVMsR0FBTzVDLEVBQVFJLE1BNURsQ3lDLENBQWV2QyxFQUFHaEIsRUFBR1UsSUFNN0IsWUFKc0JKLElBQWxCSSxFQUFROEMsUUFDUnRDLEVBQUlyQixFQUFJYSxFQUFROEMsT0FHYixJQUFJLElBQVV0QyxHQTRGekIsU0FBU29CLEVBQWFyQixHQUVkQSxHQUFPLEtBQU9BLEdBQU8sTUFDckJBLEdBQU8sS0FFWCxJQUFLLElBQUloQyxFQUFLLEVBQUd3RSxFQUFXaEMsRUFBUXhDLEVBQUt3RSxFQUFTdEUsT0FBUUYsSUFBTSxDQUM1RCxJQUNJRyxFQUFReUMsRUFEQTRCLEVBQVN4RSxJQUVyQixHQUFJRyxFQUFNMEMsVUFBWWIsR0FBTzdCLEVBQU0wQyxTQUFTLElBQU1iLEdBQU83QixFQUFNMEMsU0FBUyxHQUNwRSxPQUFPMUMsRUFHZixNQUFNc0UsTUFBTSxtQkFFaEIsU0FBU3ZDLEVBQWF3QyxFQUFPN0MsR0FDekIsUUFBYVIsSUFBVFEsRUFDQSxPQUFPL0MsS0FBSzZGLE1BQU1ELEVBQU0sR0FBSzVGLEtBQUswQyxVQUFZa0QsRUFBTSxHQUFLLEVBQUlBLEVBQU0sS0FHdkUsSUFBSTNGLEVBQU0yRixFQUFNLElBQU0sRUFDbEJ6RixFQUFNeUYsRUFBTSxJQUFNLEVBRWxCRSxHQURKL0MsR0FBZSxLQUFQQSxFQUFjLE9BQVMsUUFDZCxPQUNqQixPQUFPL0MsS0FBSzZGLE1BQU0xRixFQUFNMkYsR0FBTzdGLEVBQU1FLElBRXpDLFNBQVMyRCxFQUFZaUMsR0FDakIsSUFBSXZCLEVBQU91QixFQUFNaEIsWUFBWSxHQUFHLEdBQzVCTixFQUFPc0IsRUFBTWhCLFlBQVlnQixFQUFNaEIsWUFBWTNELE9BQVMsR0FBRyxHQUN2RDBELEVBQU9pQixFQUFNaEIsWUFBWWdCLEVBQU1oQixZQUFZM0QsT0FBUyxHQUFHLEdBQ3ZEbUUsRUFBT1EsRUFBTWhCLFlBQVksR0FBRyxHQUNoQyxNQUFPLENBQ0hsQixLQUFNa0MsRUFBTWxDLEtBQ1pFLFNBQVVnQyxFQUFNaEMsU0FDaEJnQixZQUFhZ0IsRUFBTWhCLFlBQ25CVCxnQkFBaUIsQ0FBQ0UsRUFBTUMsR0FDeEJ1QixnQkFBaUIsQ0FBQ2xCLEVBQU1TLElBTXpCLElBQUk3QixFQUFTLENBQ2hCLENBQ0lHLEtBQU0sYUFDTkUsU0FBVSxLQUNWZ0IsWUFBYSxDQUNULENBQUMsRUFBRyxHQUNKLENBQUMsSUFBSyxLQUdkLENBQ0lsQixLQUFNLE1BQ05FLFNBQVUsRUFBRSxHQUFJLElBQ2hCZ0IsWUFBYSxDQUNULENBQUMsR0FBSSxLQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsSUFBSyxNQUdkLENBQ0lsQixLQUFNLFNBQ05FLFNBQVUsQ0FBQyxHQUFJLElBQ2ZnQixZQUFhLENBQ1QsQ0FBQyxHQUFJLEtBQ0wsQ0FBQyxHQUFJLElBQ0wsQ0FBQyxHQUFJLElBQ0wsQ0FBQyxHQUFJLElBQ0wsQ0FBQyxHQUFJLElBQ0wsQ0FBQyxHQUFJLElBQ0wsQ0FBQyxJQUFLLE1BR2QsQ0FDSWxCLEtBQU0sU0FDTkUsU0FBVSxDQUFDLEdBQUksSUFDZmdCLFlBQWEsQ0FDVCxDQUFDLEdBQUksS0FDTCxDQUFDLEdBQUksSUFDTCxDQUFDLEdBQUksSUFDTCxDQUFDLEdBQUksSUFDTCxDQUFDLEdBQUksSUFDTCxDQUFDLEdBQUksSUFDTCxDQUFDLEdBQUksSUFDTCxDQUFDLElBQUssTUFHZCxDQUNJbEIsS0FBTSxRQUNORSxTQUFVLENBQUMsR0FBSSxLQUNmZ0IsWUFBYSxDQUNULENBQUMsR0FBSSxLQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsSUFBSyxNQUdkLENBQ0lsQixLQUFNLE9BQ05FLFNBQVUsQ0FBQyxJQUFLLEtBQ2hCZ0IsWUFBYSxDQUNULENBQUMsR0FBSSxLQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsSUFBSyxNQUdkLENBQ0lsQixLQUFNLFNBQ05FLFNBQVUsQ0FBQyxJQUFLLEtBQ2hCZ0IsWUFBYSxDQUNULENBQUMsR0FBSSxLQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsSUFBSyxNQUdkLENBQ0lsQixLQUFNLE9BQ05FLFNBQVUsQ0FBQyxJQUFLLEtBQ2hCZ0IsWUFBYSxDQUNULENBQUMsR0FBSSxLQUNMLENBQUMsR0FBSSxJQUNMLENBQUMsR0FBSSxJQUNMLENB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dCI6WyJpbXBvcnQgeyBUaW55Q29sb3IgfSBmcm9tICcuL2luZGV4Jztcbi8vIFJlYWRhYmlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNjb250cmFzdC1yYXRpb2RlZiAoV0NBRyBWZXJzaW9uIDIpXG4vKipcbiAqIEFLQSBgY29udHJhc3RgXG4gKlxuICogQW5hbHl6ZSB0aGUgMiBjb2xvcnMgYW5kIHJldHVybnMgdGhlIGNvbG9yIGNvbnRyYXN0IGRlZmluZWQgYnkgKFdDQUcgVmVyc2lvbiAyKVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZGFiaWxpdHkoY29sb3IxLCBjb2xvcjIpIHtcbiAgICB2YXIgYzEgPSBuZXcgVGlueUNvbG9yKGNvbG9yMSk7XG4gICAgdmFyIGMyID0gbmV3IFRpbnlDb2xvcihjb2xvcjIpO1xuICAgIHJldHVybiAoKE1hdGgubWF4KGMxLmdldEx1bWluYW5jZSgpLCBjMi5nZXRMdW1pbmFuY2UoKSkgKyAwLjA1KSAvXG4gICAgICAgIChNYXRoLm1pbihjMS5nZXRMdW1pbmFuY2UoKSwgYzIuZ2V0THVtaW5hbmNlKCkpICsgMC4wNSkpO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGNvbWJpbmF0aW9ucyBtZWV0IFdDQUcyIGd1aWRlbGluZXMuXG4gKiBUaGUgdGhpcmQgYXJndW1lbnQgaXMgYW4gb2JqZWN0LlxuICogICAgICB0aGUgJ2xldmVsJyBwcm9wZXJ0eSBzdGF0ZXMgJ0FBJyBvciAnQUFBJyAtIGlmIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgZGVmYXVsdHMgdG8gJ0FBJztcbiAqICAgICAgdGhlICdzaXplJyBwcm9wZXJ0eSBzdGF0ZXMgJ2xhcmdlJyBvciAnc21hbGwnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnc21hbGwnLlxuICogSWYgdGhlIGVudGlyZSBvYmplY3QgaXMgYWJzZW50LCBpc1JlYWRhYmxlIGRlZmF1bHRzIHRvIHtsZXZlbDpcIkFBXCIsc2l6ZTpcInNtYWxsXCJ9LlxuICpcbiAqIEV4YW1wbGVcbiAqIGBgYHRzXG4gKiBuZXcgVGlueUNvbG9yKCkuaXNSZWFkYWJsZSgnIzAwMCcsICcjMTExJykgPT4gZmFsc2VcbiAqIG5ldyBUaW55Q29sb3IoKS5pc1JlYWRhYmxlKCcjMDAwJywgJyMxMTEnLCB7IGxldmVsOiAnQUEnLCBzaXplOiAnbGFyZ2UnIH0pID0+IGZhbHNlXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGUoY29sb3IxLCBjb2xvcjIsIHdjYWcyKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAod2NhZzIgPT09IHZvaWQgMCkgeyB3Y2FnMiA9IHsgbGV2ZWw6ICdBQScsIHNpemU6ICdzbWFsbCcgfTsgfVxuICAgIHZhciByZWFkYWJpbGl0eUxldmVsID0gcmVhZGFiaWxpdHkoY29sb3IxLCBjb2xvcjIpO1xuICAgIHN3aXRjaCAoKChfYSA9IHdjYWcyLmxldmVsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnQUEnKSArICgoX2IgPSB3Y2FnMi5zaXplKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnc21hbGwnKSkge1xuICAgICAgICBjYXNlICdBQXNtYWxsJzpcbiAgICAgICAgY2FzZSAnQUFBbGFyZ2UnOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRhYmlsaXR5TGV2ZWwgPj0gNC41O1xuICAgICAgICBjYXNlICdBQWxhcmdlJzpcbiAgICAgICAgICAgIHJldHVybiByZWFkYWJpbGl0eUxldmVsID49IDM7XG4gICAgICAgIGNhc2UgJ0FBQXNtYWxsJzpcbiAgICAgICAgICAgIHJldHVybiByZWFkYWJpbGl0eUxldmVsID49IDc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBHaXZlbiBhIGJhc2UgY29sb3IgYW5kIGEgbGlzdCBvZiBwb3NzaWJsZSBmb3JlZ3JvdW5kIG9yIGJhY2tncm91bmRcbiAqIGNvbG9ycyBmb3IgdGhhdCBiYXNlLCByZXR1cm5zIHRoZSBtb3N0IHJlYWRhYmxlIGNvbG9yLlxuICogT3B0aW9uYWxseSByZXR1cm5zIEJsYWNrIG9yIFdoaXRlIGlmIHRoZSBtb3N0IHJlYWRhYmxlIGNvbG9yIGlzIHVucmVhZGFibGUuXG4gKlxuICogQHBhcmFtIGJhc2VDb2xvciAtIHRoZSBiYXNlIGNvbG9yLlxuICogQHBhcmFtIGNvbG9yTGlzdCAtIGFycmF5IG9mIGNvbG9ycyB0byBwaWNrIHRoZSBtb3N0IHJlYWRhYmxlIG9uZSBmcm9tLlxuICogQHBhcmFtIGFyZ3MgLSBhbmQgb2JqZWN0IHdpdGggZXh0cmEgYXJndW1lbnRzXG4gKlxuICogRXhhbXBsZVxuICogYGBgdHNcbiAqIG5ldyBUaW55Q29sb3IoKS5tb3N0UmVhZGFibGUoJyMxMjMnLCBbJyMxMjRcIiwgXCIjMTI1J10sIHsgaW5jbHVkZUZhbGxiYWNrQ29sb3JzOiBmYWxzZSB9KS50b0hleFN0cmluZygpOyAvLyBcIiMxMTIyNTVcIlxuICogbmV3IFRpbnlDb2xvcigpLm1vc3RSZWFkYWJsZSgnIzEyMycsIFsnIzEyNFwiLCBcIiMxMjUnXSx7IGluY2x1ZGVGYWxsYmFja0NvbG9yczogdHJ1ZSB9KS50b0hleFN0cmluZygpOyAgLy8gXCIjZmZmZmZmXCJcbiAqIG5ldyBUaW55Q29sb3IoKS5tb3N0UmVhZGFibGUoJyNhODAxNWEnLCBbXCIjZmFmM2YzXCJdLCB7IGluY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLCBsZXZlbDogJ0FBQScsIHNpemU6ICdsYXJnZScgfSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmFmM2YzXCJcbiAqIG5ldyBUaW55Q29sb3IoKS5tb3N0UmVhZGFibGUoJyNhODAxNWEnLCBbXCIjZmFmM2YzXCJdLCB7IGluY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLCBsZXZlbDogJ0FBQScsIHNpemU6ICdzbWFsbCcgfSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmZmZmZmXCJcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9zdFJlYWRhYmxlKGJhc2VDb2xvciwgY29sb3JMaXN0LCBhcmdzKSB7XG4gICAgaWYgKGFyZ3MgPT09IHZvaWQgMCkgeyBhcmdzID0geyBpbmNsdWRlRmFsbGJhY2tDb2xvcnM6IGZhbHNlLCBsZXZlbDogJ0FBJywgc2l6ZTogJ3NtYWxsJyB9OyB9XG4gICAgdmFyIGJlc3RDb2xvciA9IG51bGw7XG4gICAgdmFyIGJlc3RTY29yZSA9IDA7XG4gICAgdmFyIGluY2x1ZGVGYWxsYmFja0NvbG9ycyA9IGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzLCBsZXZlbCA9IGFyZ3MubGV2ZWwsIHNpemUgPSBhcmdzLnNpemU7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBjb2xvckxpc3RfMSA9IGNvbG9yTGlzdDsgX2kgPCBjb2xvckxpc3RfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGNvbG9yID0gY29sb3JMaXN0XzFbX2ldO1xuICAgICAgICB2YXIgc2NvcmUgPSByZWFkYWJpbGl0eShiYXNlQ29sb3IsIGNvbG9yKTtcbiAgICAgICAgaWYgKHNjb3JlID4gYmVzdFNjb3JlKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgIGJlc3RDb2xvciA9IG5ldyBUaW55Q29sb3IoY29sb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlYWRhYmxlKGJhc2VDb2xvciwgYmVzdENvbG9yLCB7IGxldmVsOiBsZXZlbCwgc2l6ZTogc2l6ZSB9KSB8fCAhaW5jbHVkZUZhbGxiYWNrQ29sb3JzKSB7XG4gICAgICAgIHJldHVybiBiZXN0Q29sb3I7XG4gICAgfVxuICAgIGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzID0gZmFsc2U7XG4gICAgcmV0dXJuIG1vc3RSZWFkYWJsZShiYXNlQ29sb3IsIFsnI2ZmZicsICcjMDAwJ10sIGFyZ3MpO1xufVxuIiwiaW1wb3J0IHsgcmdiYVRvQXJnYkhleCB9IGZyb20gJy4vY29udmVyc2lvbic7XG5pbXBvcnQgeyBUaW55Q29sb3IgfSBmcm9tICcuL2luZGV4Jztcbi8qKlxuICogUmV0dXJucyB0aGUgY29sb3IgcmVwcmVzZW50ZWQgYXMgYSBNaWNyb3NvZnQgZmlsdGVyIGZvciB1c2UgaW4gb2xkIHZlcnNpb25zIG9mIElFLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Nc0ZpbHRlcihmaXJzdENvbG9yLCBzZWNvbmRDb2xvcikge1xuICAgIHZhciBjb2xvciA9IG5ldyBUaW55Q29sb3IoZmlyc3RDb2xvcik7XG4gICAgdmFyIGhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIGNvbG9yLmEpO1xuICAgIHZhciBzZWNvbmRIZXg4U3RyaW5nID0gaGV4OFN0cmluZztcbiAgICB2YXIgZ3JhZGllbnRUeXBlID0gY29sb3IuZ3JhZGllbnRUeXBlID8gJ0dyYWRpZW50VHlwZSA9IDEsICcgOiAnJztcbiAgICBpZiAoc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgdmFyIHMgPSBuZXcgVGlueUNvbG9yKHNlY29uZENvbG9yKTtcbiAgICAgICAgc2Vjb25kSGV4OFN0cmluZyA9ICcjJyArIHJnYmFUb0FyZ2JIZXgocy5yLCBzLmcsIHMuYiwgcy5hKTtcbiAgICB9XG4gICAgcmV0dXJuIFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiLmNvbmNhdChncmFkaWVudFR5cGUsIFwic3RhcnRDb2xvcnN0cj1cIikuY29uY2F0KGhleDhTdHJpbmcsIFwiLGVuZENvbG9yc3RyPVwiKS5jb25jYXQoc2Vjb25kSGV4OFN0cmluZywgXCIpXCIpO1xufVxuIiwiaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBjb252ZXJ0VG9QZXJjZW50YWdlIH0gZnJvbSAnLi91dGlsJztcbi8qKlxuICogSWYgaW5wdXQgaXMgYW4gb2JqZWN0LCBmb3JjZSAxIGludG8gXCIxLjBcIiB0byBoYW5kbGUgcmF0aW9zIHByb3Blcmx5XG4gKiBTdHJpbmcgaW5wdXQgcmVxdWlyZXMgXCIxLjBcIiBhcyBpbnB1dCwgc28gMSB3aWxsIGJlIHRyZWF0ZWQgYXMgMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJhdGlvKHJhdGlvLCBvcHRzKSB7XG4gICAgdmFyIG5ld0NvbG9yID0ge1xuICAgICAgICByOiBjb252ZXJ0VG9QZXJjZW50YWdlKHJhdGlvLnIpLFxuICAgICAgICBnOiBjb252ZXJ0VG9QZXJjZW50YWdlKHJhdGlvLmcpLFxuICAgICAgICBiOiBjb252ZXJ0VG9QZXJjZW50YWdlKHJhdGlvLmIpLFxuICAgIH07XG4gICAgaWYgKHJhdGlvLmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdDb2xvci5hID0gTnVtYmVyKHJhdGlvLmEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihuZXdDb2xvciwgb3B0cyk7XG59XG4vKiogb2xkIHJhbmRvbSBmdW5jdGlvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlZ2FjeVJhbmRvbSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbnlDb2xvcih7XG4gICAgICAgIHI6IE1hdGgucmFuZG9tKCksXG4gICAgICAgIGc6IE1hdGgucmFuZG9tKCksXG4gICAgICAgIGI6IE1hdGgucmFuZG9tKCksXG4gICAgfSk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkdW5kYW50LXR5cGUtY29uc3RpdHVlbnRzICovXG4vLyByYW5kb21Db2xvciBieSBEYXZpZCBNZXJmaWVsZCB1bmRlciB0aGUgQ0MwIGxpY2Vuc2Vcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZG1lcmZpZWxkL3JhbmRvbUNvbG9yL1xuaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnLi9pbmRleCc7XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gZ2VuZXJhdGUgbXVsdGlwbGUgY29sb3JzXG4gICAgaWYgKG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBvcHRpb25zLmNvdW50ICE9PSBudWxsKSB7XG4gICAgICAgIHZhciB0b3RhbENvbG9ycyA9IG9wdGlvbnMuY291bnQ7XG4gICAgICAgIHZhciBjb2xvcnMgPSBbXTtcbiAgICAgICAgb3B0aW9ucy5jb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgd2hpbGUgKHRvdGFsQ29sb3JzID4gY29sb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gU2luY2Ugd2UncmUgZ2VuZXJhdGluZyBtdWx0aXBsZSBjb2xvcnMsXG4gICAgICAgICAgICAvLyBpbmNyZW1lbWVudCB0aGUgc2VlZC4gT3RoZXJ3aXNlIHdlJ2QganVzdFxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHNhbWUgY29sb3IgZWFjaCB0aW1lLi4uXG4gICAgICAgICAgICBvcHRpb25zLmNvdW50ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNlZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNlZWQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbG9ycy5wdXNoKHJhbmRvbShvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5jb3VudCA9IHRvdGFsQ29sb3JzO1xuICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgIH1cbiAgICAvLyBGaXJzdCB3ZSBwaWNrIGEgaHVlIChIKVxuICAgIHZhciBoID0gcGlja0h1ZShvcHRpb25zLmh1ZSwgb3B0aW9ucy5zZWVkKTtcbiAgICAvLyBUaGVuIHVzZSBIIHRvIGRldGVybWluZSBzYXR1cmF0aW9uIChTKVxuICAgIHZhciBzID0gcGlja1NhdHVyYXRpb24oaCwgb3B0aW9ucyk7XG4gICAgLy8gVGhlbiB1c2UgUyBhbmQgSCB0byBkZXRlcm1pbmUgYnJpZ2h0bmVzcyAoQikuXG4gICAgdmFyIHYgPSBwaWNrQnJpZ2h0bmVzcyhoLCBzLCBvcHRpb25zKTtcbiAgICB2YXIgcmVzID0geyBoOiBoLCBzOiBzLCB2OiB2IH07XG4gICAgaWYgKG9wdGlvbnMuYWxwaGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXMuYSA9IG9wdGlvbnMuYWxwaGE7XG4gICAgfVxuICAgIC8vIFRoZW4gd2UgcmV0dXJuIHRoZSBIU0IgY29sb3IgaW4gdGhlIGRlc2lyZWQgZm9ybWF0XG4gICAgcmV0dXJuIG5ldyBUaW55Q29sb3IocmVzKTtcbn1cbmZ1bmN0aW9uIHBpY2tIdWUoaHVlLCBzZWVkKSB7XG4gICAgdmFyIGh1ZVJhbmdlID0gZ2V0SHVlUmFuZ2UoaHVlKTtcbiAgICB2YXIgcmVzID0gcmFuZG9tV2l0aGluKGh1ZVJhbmdlLCBzZWVkKTtcbiAgICAvLyBJbnN0ZWFkIG9mIHN0b3JpbmcgcmVkIGFzIHR3byBzZXBlcmF0ZSByYW5nZXMsXG4gICAgLy8gd2UgZ3JvdXAgdGhlbSwgdXNpbmcgbmVnYXRpdmUgbnVtYmVyc1xuICAgIGlmIChyZXMgPCAwKSB7XG4gICAgICAgIHJlcyA9IDM2MCArIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHBpY2tTYXR1cmF0aW9uKGh1ZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmh1ZSA9PT0gJ21vbm9jaHJvbWUnKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sdW1pbm9zaXR5ID09PSAncmFuZG9tJykge1xuICAgICAgICByZXR1cm4gcmFuZG9tV2l0aGluKFswLCAxMDBdLCBvcHRpb25zLnNlZWQpO1xuICAgIH1cbiAgICB2YXIgc2F0dXJhdGlvblJhbmdlID0gZ2V0Q29sb3JJbmZvKGh1ZSkuc2F0dXJhdGlvblJhbmdlO1xuICAgIHZhciBzTWluID0gc2F0dXJhdGlvblJhbmdlWzBdO1xuICAgIHZhciBzTWF4ID0gc2F0dXJhdGlvblJhbmdlWzFdO1xuICAgIHN3aXRjaCAob3B0aW9ucy5sdW1pbm9zaXR5KSB7XG4gICAgICAgIGNhc2UgJ2JyaWdodCc6XG4gICAgICAgICAgICBzTWluID0gNTU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGFyayc6XG4gICAgICAgICAgICBzTWluID0gc01heCAtIDEwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgICAgIHNNYXggPSA1NTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByYW5kb21XaXRoaW4oW3NNaW4sIHNNYXhdLCBvcHRpb25zLnNlZWQpO1xufVxuZnVuY3Rpb24gcGlja0JyaWdodG5lc3MoSCwgUywgb3B0aW9ucykge1xuICAgIHZhciBiTWluID0gZ2V0TWluaW11bUJyaWdodG5lc3MoSCwgUyk7XG4gICAgdmFyIGJNYXggPSAxMDA7XG4gICAgc3dpdGNoIChvcHRpb25zLmx1bWlub3NpdHkpIHtcbiAgICAgICAgY2FzZSAnZGFyayc6XG4gICAgICAgICAgICBiTWF4ID0gYk1pbiArIDIwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgICAgIGJNaW4gPSAoYk1heCArIGJNaW4pIC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyYW5kb20nOlxuICAgICAgICAgICAgYk1pbiA9IDA7XG4gICAgICAgICAgICBiTWF4ID0gMTAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJhbmRvbVdpdGhpbihbYk1pbiwgYk1heF0sIG9wdGlvbnMuc2VlZCk7XG59XG5mdW5jdGlvbiBnZXRNaW5pbXVtQnJpZ2h0bmVzcyhILCBTKSB7XG4gICAgdmFyIGxvd2VyQm91bmRzID0gZ2V0Q29sb3JJbmZvKEgpLmxvd2VyQm91bmRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG93ZXJCb3VuZHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBzMSA9IGxvd2VyQm91bmRzW2ldWzBdO1xuICAgICAgICB2YXIgdjEgPSBsb3dlckJvdW5kc1tpXVsxXTtcbiAgICAgICAgdmFyIHMyID0gbG93ZXJCb3VuZHNbaSArIDFdWzBdO1xuICAgICAgICB2YXIgdjIgPSBsb3dlckJvdW5kc1tpICsgMV1bMV07XG4gICAgICAgIGlmIChTID49IHMxICYmIFMgPD0gczIpIHtcbiAgICAgICAgICAgIHZhciBtID0gKHYyIC0gdjEpIC8gKHMyIC0gczEpO1xuICAgICAgICAgICAgdmFyIGIgPSB2MSAtIG0gKiBzMTtcbiAgICAgICAgICAgIHJldHVybiBtICogUyArIGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBnZXRIdWVSYW5nZShjb2xvcklucHV0KSB7XG4gICAgdmFyIG51bSA9IHBhcnNlSW50KGNvbG9ySW5wdXQsIDEwKTtcbiAgICBpZiAoIU51bWJlci5pc05hTihudW0pICYmIG51bSA8IDM2MCAmJiBudW0gPiAwKSB7XG4gICAgICAgIHJldHVybiBbbnVtLCBudW1dO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbG9ySW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBuYW1lZENvbG9yID0gYm91bmRzLmZpbmQoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4ubmFtZSA9PT0gY29sb3JJbnB1dDsgfSk7XG4gICAgICAgIGlmIChuYW1lZENvbG9yKSB7XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBkZWZpbmVDb2xvcihuYW1lZENvbG9yKTtcbiAgICAgICAgICAgIGlmIChjb2xvci5odWVSYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvci5odWVSYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyc2VkID0gbmV3IFRpbnlDb2xvcihjb2xvcklucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZC5pc1ZhbGlkKSB7XG4gICAgICAgICAgICB2YXIgaHVlID0gcGFyc2VkLnRvSHN2KCkuaDtcbiAgICAgICAgICAgIHJldHVybiBbaHVlLCBodWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbMCwgMzYwXTtcbn1cbmZ1bmN0aW9uIGdldENvbG9ySW5mbyhodWUpIHtcbiAgICAvLyBNYXBzIHJlZCBjb2xvcnMgdG8gbWFrZSBwaWNraW5nIGh1ZSBlYXNpZXJcbiAgICBpZiAoaHVlID49IDMzNCAmJiBodWUgPD0gMzYwKSB7XG4gICAgICAgIGh1ZSAtPSAzNjA7XG4gICAgfVxuICAgIGZvciAodmFyIF9pID0gMCwgYm91bmRzXzEgPSBib3VuZHM7IF9pIDwgYm91bmRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBib3VuZCA9IGJvdW5kc18xW19pXTtcbiAgICAgICAgdmFyIGNvbG9yID0gZGVmaW5lQ29sb3IoYm91bmQpO1xuICAgICAgICBpZiAoY29sb3IuaHVlUmFuZ2UgJiYgaHVlID49IGNvbG9yLmh1ZVJhbmdlWzBdICYmIGh1ZSA8PSBjb2xvci5odWVSYW5nZVsxXSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IEVycm9yKCdDb2xvciBub3QgZm91bmQnKTtcbn1cbmZ1bmN0aW9uIHJhbmRvbVdpdGhpbihyYW5nZSwgc2VlZCkge1xuICAgIGlmIChzZWVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IocmFuZ2VbMF0gKyBNYXRoLnJhbmRvbSgpICogKHJhbmdlWzFdICsgMSAtIHJhbmdlWzBdKSk7XG4gICAgfVxuICAgIC8vIFNlZWRlZCByYW5kb20gYWxnb3JpdGhtIGZyb20gaHR0cDovL2luZGllZ2Ftci5jb20vZ2VuZXJhdGUtcmVwZWF0YWJsZS1yYW5kb20tbnVtYmVycy1pbi1qcy9cbiAgICB2YXIgbWF4ID0gcmFuZ2VbMV0gfHwgMTtcbiAgICB2YXIgbWluID0gcmFuZ2VbMF0gfHwgMDtcbiAgICBzZWVkID0gKHNlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xuICAgIHZhciBybmQgPSBzZWVkIC8gMjMzMjgwLjA7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobWluICsgcm5kICogKG1heCAtIG1pbikpO1xufVxuZnVuY3Rpb24gZGVmaW5lQ29sb3IoYm91bmQpIHtcbiAgICB2YXIgc01pbiA9IGJvdW5kLmxvd2VyQm91bmRzWzBdWzBdO1xuICAgIHZhciBzTWF4ID0gYm91bmQubG93ZXJCb3VuZHNbYm91bmQubG93ZXJCb3VuZHMubGVuZ3RoIC0gMV1bMF07XG4gICAgdmFyIGJNaW4gPSBib3VuZC5sb3dlckJvdW5kc1tib3VuZC5sb3dlckJvdW5kcy5sZW5ndGggLSAxXVsxXTtcbiAgICB2YXIgYk1heCA9IGJvdW5kLmxvd2VyQm91bmRzWzBdWzFdO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGJvdW5kLm5hbWUsXG4gICAgICAgIGh1ZVJhbmdlOiBib3VuZC5odWVSYW5nZSxcbiAgICAgICAgbG93ZXJCb3VuZHM6IGJvdW5kLmxvd2VyQm91bmRzLFxuICAgICAgICBzYXR1cmF0aW9uUmFuZ2U6IFtzTWluLCBzTWF4XSxcbiAgICAgICAgYnJpZ2h0bmVzc1JhbmdlOiBbYk1pbiwgYk1heF0sXG4gICAgfTtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdmFyIGJvdW5kcyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICdtb25vY2hyb21lJyxcbiAgICAgICAgaHVlUmFuZ2U6IG51bGwsXG4gICAgICAgIGxvd2VyQm91bmRzOiBbXG4gICAgICAgICAgICBbMCwgMF0sXG4gICAgICAgICAgICBbMTAwLCAwXSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ3JlZCcsXG4gICAgICAgIGh1ZVJhbmdlOiBbLTI2LCAxOF0sXG4gICAgICAgIGxvd2VyQm91bmRzOiBbXG4gICAgICAgICAgICBbMjAsIDEwMF0sXG4gICAgICAgICAgICBbMzAsIDkyXSxcbiAgICAgICAgICAgIFs0MCwgODldLFxuICAgICAgICAgICAgWzUwLCA4NV0sXG4gICAgICAgICAgICBbNjAsIDc4XSxcbiAgICAgICAgICAgIFs3MCwgNzBdLFxuICAgICAgICAgICAgWzgwLCA2MF0sXG4gICAgICAgICAgICBbOTAsIDU1XSxcbiAgICAgICAgICAgIFsxMDAsIDUwXSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ29yYW5nZScsXG4gICAgICAgIGh1ZVJhbmdlOiBbMTksIDQ2XSxcbiAgICAgICAgbG93ZXJCb3VuZHM6IFtcbiAgICAgICAgICAgIFsyMCwgMTAwXSxcbiAgICAgICAgICAgIFszMCwgOTNdLFxuICAgICAgICAgICAgWzQwLCA4OF0sXG4gICAgICAgICAgICBbNTAsIDg2XSxcbiAgICAgICAgICAgIFs2MCwgODVdLFxuICAgICAgICAgICAgWzcwLCA3MF0sXG4gICAgICAgICAgICBbMTAwLCA3MF0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICd5ZWxsb3cnLFxuICAgICAgICBodWVSYW5nZTogWzQ3LCA2Ml0sXG4gICAgICAgIGxvd2VyQm91bmRzOiBbXG4gICAgICAgICAgICBbMjUsIDEwMF0sXG4gICAgICAgICAgICBbNDAsIDk0XSxcbiAgICAgICAgICAgIFs1MCwgODldLFxuICAgICAgICAgICAgWzYwLCA4Nl0sXG4gICAgICAgICAgICBbNzAsIDg0XSxcbiAgICAgICAgICAgIFs4MCwgODJdLFxuICAgICAgICAgICAgWzkwLCA4MF0sXG4gICAgICAgICAgICBbMTAwLCA3NV0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdncmVlbicsXG4gICAgICAgIGh1ZVJhbmdlOiBbNjMsIDE3OF0sXG4gICAgICAgIGxvd2VyQm91bmRzOiBbXG4gICAgICAgICAgICBbMzAsIDEwMF0sXG4gICAgICAgICAgICBbNDAsIDkwXSxcbiAgICAgICAgICAgIFs1MCwgODVdLFxuICAgICAgICAgICAgWzYwLCA4MV0sXG4gICAgICAgICAgICBbNzAsIDc0XSxcbiAgICAgICAgICAgIFs4MCwgNjRdLFxuICAgICAgICAgICAgWzkwLCA1MF0sXG4gICAgICAgICAgICBbMTAwLCA0MF0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdibHVlJyxcbiAgICAgICAgaHVlUmFuZ2U6IFsxNzksIDI1N10sXG4gICAgICAgIGxvd2VyQm91bmRzOiBbXG4gICAgICAgICAgICBbMjAsIDEwMF0sXG4gICAgICAgICAgICBbMzAsIDg2XSxcbiAgICAgICAgICAgIFs0MCwgODBdLFxuICAgICAgICAgICAgWzUwLCA3NF0sXG4gICAgICAgICAgICBbNjAsIDYwXSxcbiAgICAgICAgICAgIFs3MCwgNTJdLFxuICAgICAgICAgICAgWzgwLCA0NF0sXG4gICAgICAgICAgICBbOTAsIDM5XSxcbiAgICAgICAgICAgIFsxMDAsIDM1XSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ3B1cnBsZScsXG4gICAgICAgIGh1ZVJhbmdlOiBbMjU4LCAyODJdLFxuICAgICAgICBsb3dlckJvdW5kczogW1xuICAgICAgICAgICAgWzIwLCAxMDBdLFxuICAgICAgICAgICAgWzMwLCA4N10sXG4gICAgICAgICAgICBbNDAsIDc5XSxcbiAgICAgICAgICAgIFs1MCwgNzBdLFxuICAgICAgICAgICAgWzYwLCA2NV0sXG4gICAgICAgICAgICBbNzAsIDU5XSxcbiAgICAgICAgICAgIFs4MCwgNTJdLFxuICAgICAgICAgICAgWzkwLCA0NV0sXG4gICAgICAgICAgICBbMTAwLCA0Ml0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdwaW5rJyxcbiAgICAgICAgaHVlUmFuZ2U6IFsyODMsIDMzNF0sXG4gICAgICAgIGxvd2VyQm91bmRzOiBbXG4gICAgICAgICAgICBbMjAsIDEwMF0sXG4gICAgICAgICAgICBbMzAsIDkwXSxcbiAgICAgICAgICAgIFs0MCwgODZdLFxuICAgICAgICAgICAgWzYwLCA4NF0sXG4gICAgICAgICAgICBbODAsIDgwXSxcbiAgICAgICAgICAgIFs5MCwgNzVdLFxuICAgICAgICAgICAgWzEwMCwgNzNdLFxuICAgICAgICBdLFxuICAgIH0sXG5dO1xuIiwiaW1wb3J0IHsgdGlueWNvbG9yIH0gZnJvbSAnLi9pbmRleCc7XG5leHBvcnQgKiBmcm9tICcuL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vY3NzLWNvbG9yLW5hbWVzJztcbmV4cG9ydCAqIGZyb20gJy4vcmVhZGFiaWxpdHknO1xuZXhwb3J0ICogZnJvbSAnLi90by1tcy1maWx0ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9mcm9tLXJhdGlvJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybWF0LWlucHV0JztcbmV4cG9ydCAqIGZyb20gJy4vcmFuZG9tJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbnZlcnNpb24nO1xuLy8ga2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkgd2l0aCB2MVxuZXhwb3J0IGRlZmF1bHQgdGlueWNvbG9yO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7XG4gICAgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wO1xuICB9KShub2RlSW50ZXJvcCk7XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7XG4gIGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJkZWZhdWx0XCI6IG9ialxuICAgIH07XG4gIH1cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTtcbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqO1xuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICB9XG4gIHJldHVybiBuZXdPYmo7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiAobW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cyksIF90eXBlb2Yob2JqKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoXCIuL3RvUHJvcGVydHlLZXkuanNcIik7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXMuanNcIik7XG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiKTtcbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiKTtcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zbGljZWRUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbmZpZ0NvbnN1bWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb250ZXh0LkNvbmZpZ0NvbnN1bWVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbmZpZ0NvbnRleHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NvbnRleHQuQ29uZmlnQ29udGV4dDtcbiAgfVxufSk7XG5leHBvcnRzLmdsb2JhbENvbmZpZyA9IGV4cG9ydHMuZGVmYXVsdFByZWZpeENscyA9IGV4cG9ydHMuZGVmYXVsdEljb25QcmVmaXhDbHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuY29uZmlnQ29uc3VtZXJQcm9wcyA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9Db250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvbGliL2NvbXBvbmVudHMvQ29udGV4dFwiKSk7XG52YXIgX3VzZU1lbW8gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9ob29rcy91c2VNZW1vXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3NldCA9IHJlcXVpcmUoXCJyYy11dGlsL2xpYi91dGlscy9zZXRcIik7XG52YXIgX3ZhbGlkYXRlTWVzc2FnZXNDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZm9ybS92YWxpZGF0ZU1lc3NhZ2VzQ29udGV4dFwiKSk7XG52YXIgX2xvY2FsZVByb3ZpZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4uL2xvY2FsZS1wcm92aWRlclwiKSk7XG52YXIgX0xvY2FsZVJlY2VpdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlLXByb3ZpZGVyL0xvY2FsZVJlY2VpdmVyXCIpKTtcbnZhciBfZGVmYXVsdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUvZGVmYXVsdFwiKSk7XG52YXIgX21lc3NhZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9tZXNzYWdlXCIpKTtcbnZhciBfbm90aWZpY2F0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbm90aWZpY2F0aW9uXCIpKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuL2NvbnRleHRcIik7XG52YXIgX2Nzc1ZhcmlhYmxlcyA9IHJlcXVpcmUoXCIuL2Nzc1ZhcmlhYmxlc1wiKTtcbnZhciBfRGlzYWJsZWRDb250ZXh0ID0gcmVxdWlyZShcIi4vRGlzYWJsZWRDb250ZXh0XCIpO1xudmFyIF9TaXplQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1NpemVDb250ZXh0XCIpKTtcbnZhciBjb25maWdDb25zdW1lclByb3BzID0gWydnZXRUYXJnZXRDb250YWluZXInLCAnZ2V0UG9wdXBDb250YWluZXInLCAncm9vdFByZWZpeENscycsICdnZXRQcmVmaXhDbHMnLCAncmVuZGVyRW1wdHknLCAnY3NwJywgJ2F1dG9JbnNlcnRTcGFjZUluQnV0dG9uJywgJ2xvY2FsZScsICdwYWdlSGVhZGVyJ107XG4vLyBUaGVzZSBwcm9wcyBpcyB1c2VkIGJ5IGB1c2VDb250ZXh0YCBkaXJlY3RseSBpbiBzdWIgY29tcG9uZW50XG5leHBvcnRzLmNvbmZpZ0NvbnN1bWVyUHJvcHMgPSBjb25maWdDb25zdW1lclByb3BzO1xudmFyIFBBU1NFRF9QUk9QUyA9IFsnZ2V0VGFyZ2V0Q29udGFpbmVyJywgJ2dldFBvcHVwQ29udGFpbmVyJywgJ3JlbmRlckVtcHR5JywgJ3BhZ2VIZWFkZXInLCAnaW5wdXQnLCAncGFnaW5hdGlvbicsICdmb3JtJ107XG52YXIgZGVmYXVsdFByZWZpeENscyA9ICdhbnQnO1xuZXhwb3J0cy5kZWZhdWx0UHJlZml4Q2xzID0gZGVmYXVsdFByZWZpeENscztcbnZhciBkZWZhdWx0SWNvblByZWZpeENscyA9ICdhbnRpY29uJztcbmV4cG9ydHMuZGVmYXVsdEljb25QcmVmaXhDbHMgPSBkZWZhdWx0SWNvblByZWZpeENscztcbnZhciBnbG9iYWxQcmVmaXhDbHM7XG52YXIgZ2xvYmFsSWNvblByZWZpeENscztcbmZ1bmN0aW9uIGdldEdsb2JhbFByZWZpeENscygpIHtcbiAgcmV0dXJuIGdsb2JhbFByZWZpeENscyB8fCBkZWZhdWx0UHJlZml4Q2xzO1xufVxuZnVuY3Rpb24gZ2V0R2xvYmFsSWNvblByZWZpeENscygpIHtcbiAgcmV0dXJuIGdsb2JhbEljb25QcmVmaXhDbHMgfHwgZGVmYXVsdEljb25QcmVmaXhDbHM7XG59XG52YXIgc2V0R2xvYmFsQ29uZmlnID0gZnVuY3Rpb24gc2V0R2xvYmFsQ29uZmlnKF9yZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgIGljb25QcmVmaXhDbHMgPSBfcmVmLmljb25QcmVmaXhDbHMsXG4gICAgdGhlbWUgPSBfcmVmLnRoZW1lO1xuICBpZiAocHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBnbG9iYWxQcmVmaXhDbHMgPSBwcmVmaXhDbHM7XG4gIH1cbiAgaWYgKGljb25QcmVmaXhDbHMgIT09IHVuZGVmaW5lZCkge1xuICAgIGdsb2JhbEljb25QcmVmaXhDbHMgPSBpY29uUHJlZml4Q2xzO1xuICB9XG4gIGlmICh0aGVtZSkge1xuICAgICgwLCBfY3NzVmFyaWFibGVzLnJlZ2lzdGVyVGhlbWUpKGdldEdsb2JhbFByZWZpeENscygpLCB0aGVtZSk7XG4gIH1cbn07XG52YXIgZ2xvYmFsQ29uZmlnID0gZnVuY3Rpb24gZ2xvYmFsQ29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGdldFByZWZpeENsczogZnVuY3Rpb24gZ2V0UHJlZml4Q2xzKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gICAgICBpZiAoY3VzdG9taXplUHJlZml4Q2xzKSByZXR1cm4gY3VzdG9taXplUHJlZml4Q2xzO1xuICAgICAgcmV0dXJuIHN1ZmZpeENscyA/IFwiXCIuY29uY2F0KGdldEdsb2JhbFByZWZpeENscygpLCBcIi1cIikuY29uY2F0KHN1ZmZpeENscykgOiBnZXRHbG9iYWxQcmVmaXhDbHMoKTtcbiAgICB9LFxuICAgIGdldEljb25QcmVmaXhDbHM6IGdldEdsb2JhbEljb25QcmVmaXhDbHMsXG4gICAgZ2V0Um9vdFByZWZpeENsczogZnVuY3Rpb24gZ2V0Um9vdFByZWZpeENscyhyb290UHJlZml4Q2xzLCBjdXN0b21pemVQcmVmaXhDbHMpIHtcbiAgICAgIC8vIEN1c3RvbWl6ZSByb290UHJlZml4Q2xzIGlzIGZpcnN0IHByaW9yaXR5XG4gICAgICBpZiAocm9vdFByZWZpeENscykge1xuICAgICAgICByZXR1cm4gcm9vdFByZWZpeENscztcbiAgICAgIH1cbiAgICAgIC8vIElmIEdsb2JhbCBwcmVmaXhDbHMgcHJvdmlkZWQsIHVzZSB0aGlzXG4gICAgICBpZiAoZ2xvYmFsUHJlZml4Q2xzKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxQcmVmaXhDbHM7XG4gICAgICB9XG4gICAgICAvLyBbTGVnYWN5XSBJZiBjdXN0b21pemUgcHJlZml4Q2xzIHByb3ZpZGVkLCB3ZSBjdXQgaXQgdG8gZ2V0IHRoZSBwcmVmaXhDbHNcbiAgICAgIGlmIChjdXN0b21pemVQcmVmaXhDbHMgJiYgY3VzdG9taXplUHJlZml4Q2xzLmluY2x1ZGVzKCctJykpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbWl6ZVByZWZpeENscy5yZXBsYWNlKC9eKC4qKS1bXi1dKiQvLCAnJDEnKTtcbiAgICAgIH1cbiAgICAgIC8vIEZhbGxiYWNrIHRvIGRlZmF1bHQgcHJlZml4Q2xzXG4gICAgICByZXR1cm4gZ2V0R2xvYmFsUHJlZml4Q2xzKCk7XG4gICAgfVxuICB9O1xufTtcbmV4cG9ydHMuZ2xvYmFsQ29uZmlnID0gZ2xvYmFsQ29uZmlnO1xudmFyIFByb3ZpZGVyQ2hpbGRyZW4gPSBmdW5jdGlvbiBQcm92aWRlckNoaWxkcmVuKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIGNzcCA9IHByb3BzLmNzcCxcbiAgICBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbiA9IHByb3BzLmF1dG9JbnNlcnRTcGFjZUluQnV0dG9uLFxuICAgIGZvcm0gPSBwcm9wcy5mb3JtLFxuICAgIGxvY2FsZSA9IHByb3BzLmxvY2FsZSxcbiAgICBjb21wb25lbnRTaXplID0gcHJvcHMuY29tcG9uZW50U2l6ZSxcbiAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgc3BhY2UgPSBwcm9wcy5zcGFjZSxcbiAgICB2aXJ0dWFsID0gcHJvcHMudmlydHVhbCxcbiAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGggPSBwcm9wcy5kcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgsXG4gICAgbGVnYWN5TG9jYWxlID0gcHJvcHMubGVnYWN5TG9jYWxlLFxuICAgIHBhcmVudENvbnRleHQgPSBwcm9wcy5wYXJlbnRDb250ZXh0LFxuICAgIGljb25QcmVmaXhDbHMgPSBwcm9wcy5pY29uUHJlZml4Q2xzLFxuICAgIGNvbXBvbmVudERpc2FibGVkID0gcHJvcHMuY29tcG9uZW50RGlzYWJsZWQ7XG4gIHZhciBnZXRQcmVmaXhDbHMgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoc3VmZml4Q2xzLCBjdXN0b21pemVQcmVmaXhDbHMpIHtcbiAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzO1xuICAgIGlmIChjdXN0b21pemVQcmVmaXhDbHMpIHJldHVybiBjdXN0b21pemVQcmVmaXhDbHM7XG4gICAgdmFyIG1lcmdlZFByZWZpeENscyA9IHByZWZpeENscyB8fCBwYXJlbnRDb250ZXh0LmdldFByZWZpeENscygnJyk7XG4gICAgcmV0dXJuIHN1ZmZpeENscyA/IFwiXCIuY29uY2F0KG1lcmdlZFByZWZpeENscywgXCItXCIpLmNvbmNhdChzdWZmaXhDbHMpIDogbWVyZ2VkUHJlZml4Q2xzO1xuICB9LCBbcGFyZW50Q29udGV4dC5nZXRQcmVmaXhDbHMsIHByb3BzLnByZWZpeENsc10pO1xuICB2YXIgY29uZmlnID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcGFyZW50Q29udGV4dCksIHtcbiAgICBjc3A6IGNzcCxcbiAgICBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbjogYXV0b0luc2VydFNwYWNlSW5CdXR0b24sXG4gICAgbG9jYWxlOiBsb2NhbGUgfHwgbGVnYWN5TG9jYWxlLFxuICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgIHNwYWNlOiBzcGFjZSxcbiAgICB2aXJ0dWFsOiB2aXJ0dWFsLFxuICAgIGRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aDogZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoLFxuICAgIGdldFByZWZpeENsczogZ2V0UHJlZml4Q2xzXG4gIH0pO1xuICAvLyBQYXNzIHRoZSBwcm9wcyB1c2VkIGJ5IGB1c2VDb250ZXh0YCBkaXJlY3RseSB3aXRoIGNoaWxkIGNvbXBvbmVudC5cbiAgLy8gVGhlc2UgcHJvcHMgc2hvdWxkIG1lcmdlZCBpbnRvIGBjb25maWdgLlxuICBQQVNTRURfUFJPUFMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgIGNvbmZpZ1twcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuICB9KTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMjc2MTdcbiAgdmFyIG1lbW9lZENvbmZpZyA9ICgwLCBfdXNlTWVtb1tcImRlZmF1bHRcIl0pKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9LCBjb25maWcsIGZ1bmN0aW9uIChwcmV2Q29uZmlnLCBjdXJyZW50Q29uZmlnKSB7XG4gICAgdmFyIHByZXZLZXlzID0gT2JqZWN0LmtleXMocHJldkNvbmZpZyk7XG4gICAgdmFyIGN1cnJlbnRLZXlzID0gT2JqZWN0LmtleXMoY3VycmVudENvbmZpZyk7XG4gICAgcmV0dXJuIHByZXZLZXlzLmxlbmd0aCAhPT0gY3VycmVudEtleXMubGVuZ3RoIHx8IHByZXZLZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHByZXZDb25maWdba2V5XSAhPT0gY3VycmVudENvbmZpZ1trZXldO1xuICAgIH0pO1xuICB9KTtcbiAgdmFyIG1lbW9JY29uQ29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgIGNzcDogY3NwXG4gICAgfTtcbiAgfSwgW2ljb25QcmVmaXhDbHMsIGNzcF0pO1xuICB2YXIgY2hpbGROb2RlID0gY2hpbGRyZW47XG4gIHZhciB2YWxpZGF0ZU1lc3NhZ2VzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHJldHVybiAoMCwgX3NldC5tZXJnZSkoKChfYSA9IF9kZWZhdWx0MltcImRlZmF1bHRcIl0uRm9ybSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fSwgKChfYyA9IChfYiA9IG1lbW9lZENvbmZpZy5sb2NhbGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5Gb3JtKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMpIHx8IHt9LCAoKF9kID0gbWVtb2VkQ29uZmlnLmZvcm0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC52YWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fSwgKGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybS52YWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fSk7XG4gIH0sIFttZW1vZWRDb25maWcsIGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybS52YWxpZGF0ZU1lc3NhZ2VzXSk7XG4gIGlmIChPYmplY3Qua2V5cyh2YWxpZGF0ZU1lc3NhZ2VzKS5sZW5ndGggPiAwKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3ZhbGlkYXRlTWVzc2FnZXNDb250ZXh0W1wiZGVmYXVsdFwiXS5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHZhbGlkYXRlTWVzc2FnZXNcbiAgICB9LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKGxvY2FsZSkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9sb2NhbGVQcm92aWRlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgX0FOVF9NQVJLX186IF9sb2NhbGVQcm92aWRlci5BTlRfTUFSS1xuICAgIH0sIGNoaWxkTm9kZSk7XG4gIH1cbiAgaWYgKGljb25QcmVmaXhDbHMgfHwgY3NwKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0NvbnRleHRbXCJkZWZhdWx0XCJdLlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogbWVtb0ljb25Db250ZXh0VmFsdWVcbiAgICB9LCBjaGlsZE5vZGUpO1xuICB9XG4gIGlmIChjb21wb25lbnRTaXplKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1NpemVDb250ZXh0LlNpemVDb250ZXh0UHJvdmlkZXIsIHtcbiAgICAgIHNpemU6IGNvbXBvbmVudFNpemVcbiAgICB9LCBjaGlsZE5vZGUpO1xuICB9XG4gIGlmIChjb21wb25lbnREaXNhYmxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0Rpc2FibGVkQ29udGV4dC5EaXNhYmxlZENvbnRleHRQcm92aWRlciwge1xuICAgICAgZGlzYWJsZWQ6IGNvbXBvbmVudERpc2FibGVkXG4gICAgfSwgY2hpbGROb2RlKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbnRleHQuQ29uZmlnQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBtZW1vZWRDb25maWdcbiAgfSwgY2hpbGROb2RlKTtcbn07XG52YXIgQ29uZmlnUHJvdmlkZXIgPSBmdW5jdGlvbiBDb25maWdQcm92aWRlcihwcm9wcykge1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9wcy5kaXJlY3Rpb24pIHtcbiAgICAgIF9tZXNzYWdlW1wiZGVmYXVsdFwiXS5jb25maWcoe1xuICAgICAgICBydGw6IHByb3BzLmRpcmVjdGlvbiA9PT0gJ3J0bCdcbiAgICAgIH0pO1xuICAgICAgX25vdGlmaWNhdGlvbltcImRlZmF1bHRcIl0uY29uZmlnKHtcbiAgICAgICAgcnRsOiBwcm9wcy5kaXJlY3Rpb24gPT09ICdydGwnXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm9wcy5kaXJlY3Rpb25dKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Mb2NhbGVSZWNlaXZlcltcImRlZmF1bHRcIl0sIG51bGwsIGZ1bmN0aW9uIChfLCBfXywgbGVnYWN5TG9jYWxlKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9jb250ZXh0LkNvbmZpZ0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyQ2hpbGRyZW4sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICAgIHBhcmVudENvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIGxlZ2FjeUxvY2FsZTogbGVnYWN5TG9jYWxlXG4gICAgICB9LCBwcm9wcykpO1xuICAgIH0pO1xuICB9KTtcbn07XG4vKiogQHByaXZhdGUgaW50ZXJuYWwgVXNhZ2UuIGRvIG5vdCB1c2UgaW4geW91ciBwcm9kdWN0aW9uICovXG5Db25maWdQcm92aWRlci5Db25maWdDb250ZXh0ID0gX2NvbnRleHQuQ29uZmlnQ29udGV4dDtcbkNvbmZpZ1Byb3ZpZGVyLlNpemVDb250ZXh0ID0gX1NpemVDb250ZXh0W1wiZGVmYXVsdFwiXTtcbkNvbmZpZ1Byb3ZpZGVyLmNvbmZpZyA9IHNldEdsb2JhbENvbmZpZztcbnZhciBfZGVmYXVsdCA9IENvbmZpZ1Byb3ZpZGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiKTtcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFNwcmVhZDIsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ob1N0eWxlSXRlbUNvbnRleHQgPSBleHBvcnRzLk5vRm9ybVN0eWxlID0gZXhwb3J0cy5Gb3JtUHJvdmlkZXIgPSBleHBvcnRzLkZvcm1JdGVtUHJlZml4Q29udGV4dCA9IGV4cG9ydHMuRm9ybUl0ZW1JbnB1dENvbnRleHQgPSBleHBvcnRzLkZvcm1Db250ZXh0ID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX3JjRmllbGRGb3JtID0gcmVxdWlyZShcInJjLWZpZWxkLWZvcm1cIik7XG52YXIgX29taXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9vbWl0XCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgRm9ybUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGxhYmVsQWxpZ246ICdyaWdodCcsXG4gIHZlcnRpY2FsOiBmYWxzZSxcbiAgaXRlbVJlZjogZnVuY3Rpb24gaXRlbVJlZigpIHt9XG59KTtcbmV4cG9ydHMuRm9ybUNvbnRleHQgPSBGb3JtQ29udGV4dDtcbnZhciBOb1N0eWxlSXRlbUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydHMuTm9TdHlsZUl0ZW1Db250ZXh0ID0gTm9TdHlsZUl0ZW1Db250ZXh0O1xudmFyIEZvcm1Qcm92aWRlciA9IGZ1bmN0aW9uIEZvcm1Qcm92aWRlcihwcm9wcykge1xuICB2YXIgcHJvdmlkZXJQcm9wcyA9ICgwLCBfb21pdFtcImRlZmF1bHRcIl0pKHByb3BzLCBbJ3ByZWZpeENscyddKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yY0ZpZWxkRm9ybS5Gb3JtUHJvdmlkZXIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvdmlkZXJQcm9wcykpO1xufTtcbmV4cG9ydHMuRm9ybVByb3ZpZGVyID0gRm9ybVByb3ZpZGVyO1xudmFyIEZvcm1JdGVtUHJlZml4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgcHJlZml4Q2xzOiAnJ1xufSk7XG5leHBvcnRzLkZvcm1JdGVtUHJlZml4Q29udGV4dCA9IEZvcm1JdGVtUHJlZml4Q29udGV4dDtcbnZhciBGb3JtSXRlbUlucHV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmV4cG9ydHMuRm9ybUl0ZW1JbnB1dENvbnRleHQgPSBGb3JtSXRlbUlucHV0Q29udGV4dDtcbnZhciBOb0Zvcm1TdHlsZSA9IGZ1bmN0aW9uIE5vRm9ybVN0eWxlKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBzdGF0dXMgPSBfcmVmLnN0YXR1cyxcbiAgICBvdmVycmlkZSA9IF9yZWYub3ZlcnJpZGU7XG4gIHZhciBmb3JtSXRlbUlucHV0Q29udGV4dCA9ICgwLCBSZWFjdC51c2VDb250ZXh0KShGb3JtSXRlbUlucHV0Q29udGV4dCk7XG4gIHZhciBuZXdGb3JtSXRlbUlucHV0Q29udGV4dCA9ICgwLCBSZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5ld0NvbnRleHQgPSAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGZvcm1JdGVtSW5wdXRDb250ZXh0KTtcbiAgICBpZiAob3ZlcnJpZGUpIHtcbiAgICAgIGRlbGV0ZSBuZXdDb250ZXh0LmlzRm9ybUl0ZW1JbnB1dDtcbiAgICB9XG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgZGVsZXRlIG5ld0NvbnRleHQuc3RhdHVzO1xuICAgICAgZGVsZXRlIG5ld0NvbnRleHQuaGFzRmVlZGJhY2s7XG4gICAgICBkZWxldGUgbmV3Q29udGV4dC5mZWVkYmFja0ljb247XG4gICAgfVxuICAgIHJldHVybiBuZXdDb250ZXh0O1xuICB9LCBbc3RhdHVzLCBvdmVycmlkZSwgZm9ybUl0ZW1JbnB1dENvbnRleHRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JdGVtSW5wdXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5ld0Zvcm1JdGVtSW5wdXRDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn07XG5leHBvcnRzLk5vRm9ybVN0eWxlID0gTm9Gb3JtU3R5bGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX0NvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnRleHRcIikpO1xudmFyIF9JY29uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSWNvbkJhc2VcIikpO1xudmFyIF90d29Ub25lUHJpbWFyeUNvbG9yID0gcmVxdWlyZShcIi4vdHdvVG9uZVByaW1hcnlDb2xvclwiKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG52YXIgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiaWNvblwiLCBcInNwaW5cIiwgXCJyb3RhdGVcIiwgXCJ0YWJJbmRleFwiLCBcIm9uQ2xpY2tcIiwgXCJ0d29Ub25lQ29sb3JcIl07XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gSW5pdGlhbCBzZXR0aW5nXG4vLyBzaG91bGQgbW92ZSBpdCB0byBhbnRkIG1haW4gcmVwbz9cbigwLCBfdHdvVG9uZVByaW1hcnlDb2xvci5zZXRUd29Ub25lQ29sb3IpKCcjMTg5MGZmJyk7XG52YXIgSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICBzcGluID0gcHJvcHMuc3BpbixcbiAgICByb3RhdGUgPSBwcm9wcy5yb3RhdGUsXG4gICAgdGFiSW5kZXggPSBwcm9wcy50YWJJbmRleCxcbiAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICB0d29Ub25lQ29sb3IgPSBwcm9wcy50d29Ub25lQ29sb3IsXG4gICAgcmVzdFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoX0NvbnRleHQuZGVmYXVsdCksXG4gICAgX1JlYWN0JHVzZUNvbnRleHQkcHJlID0gX1JlYWN0JHVzZUNvbnRleHQucHJlZml4Q2xzLFxuICAgIHByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0JHByZSA9PT0gdm9pZCAwID8gJ2FudGljb24nIDogX1JlYWN0JHVzZUNvbnRleHQkcHJlLFxuICAgIHJvb3RDbGFzc05hbWUgPSBfUmVhY3QkdXNlQ29udGV4dC5yb290Q2xhc3NOYW1lO1xuICB2YXIgY2xhc3NTdHJpbmcgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkocm9vdENsYXNzTmFtZSwgcHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChpY29uLm5hbWUpLCAhIWljb24ubmFtZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNwaW5cIiksICEhc3BpbiB8fCBpY29uLm5hbWUgPT09ICdsb2FkaW5nJyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcbiAgdmFyIGljb25UYWJJbmRleCA9IHRhYkluZGV4O1xuICBpZiAoaWNvblRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgb25DbGljaykge1xuICAgIGljb25UYWJJbmRleCA9IC0xO1xuICB9XG4gIHZhciBzdmdTdHlsZSA9IHJvdGF0ZSA/IHtcbiAgICBtc1RyYW5zZm9ybTogXCJyb3RhdGUoXCIuY29uY2F0KHJvdGF0ZSwgXCJkZWcpXCIpLFxuICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoXCIuY29uY2F0KHJvdGF0ZSwgXCJkZWcpXCIpXG4gIH0gOiB1bmRlZmluZWQ7XG4gIHZhciBfbm9ybWFsaXplVHdvVG9uZUNvbG8gPSAoMCwgX3V0aWxzLm5vcm1hbGl6ZVR3b1RvbmVDb2xvcnMpKHR3b1RvbmVDb2xvciksXG4gICAgX25vcm1hbGl6ZVR3b1RvbmVDb2xvMiA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkoX25vcm1hbGl6ZVR3b1RvbmVDb2xvLCAyKSxcbiAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgIHNlY29uZGFyeUNvbG9yID0gX25vcm1hbGl6ZVR3b1RvbmVDb2xvMlsxXTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHtcbiAgICByb2xlOiBcImltZ1wiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBpY29uLm5hbWVcbiAgfSwgcmVzdFByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICB0YWJJbmRleDogaWNvblRhYkluZGV4LFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZ1xuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0ljb25CYXNlLmRlZmF1bHQsIHtcbiAgICBpY29uOiBpY29uLFxuICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yOiBzZWNvbmRhcnlDb2xvcixcbiAgICBzdHlsZTogc3ZnU3R5bGVcbiAgfSkpO1xufSk7XG5JY29uLmRpc3BsYXlOYW1lID0gJ0FudGRJY29uJztcbkljb24uZ2V0VHdvVG9uZUNvbG9yID0gX3R3b1RvbmVQcmltYXJ5Q29sb3IuZ2V0VHdvVG9uZUNvbG9yO1xuSWNvbi5zZXRUd29Ub25lQ29sb3IgPSBfdHdvVG9uZVByaW1hcnlDb2xvci5zZXRUd29Ub25lQ29sb3I7XG52YXIgX2RlZmF1bHQgPSBJY29uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlc2V0V2FybmVkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF93YXJuaW5nLnJlc2V0V2FybmVkO1xuICB9XG59KTtcbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyYy11dGlsL2xpYi93YXJuaW5nXCIpKTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcbnZhciB3YXJuaW5nID0gbm9vcDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBjb21wb25lbnQsIG1lc3NhZ2UpIHtcbiAgICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSh2YWxpZCwgXCJbYW50ZDogXCIuY29uY2F0KGNvbXBvbmVudCwgXCJdIFwiKS5jb25jYXQobWVzc2FnZSkpO1xuICAgIC8vIFN0cmljdE1vZGUgd2lsbCBpbmplY3QgY29uc29sZSB3aGljaCB3aWxsIG5vdCB0aHJvdyB3YXJuaW5nIGluIFJlYWN0IDE3LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICAoMCwgX3dhcm5pbmcucmVzZXRXYXJuZWQpKCk7XG4gICAgfVxuICB9O1xufVxudmFyIF9kZWZhdWx0ID0gd2FybmluZztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnR1cGxlTnVtID0gZXhwb3J0cy50dXBsZSA9IHZvaWQgMDtcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ2MTc2MTY1L3dheXMtdG8tZ2V0LXN0cmluZy1saXRlcmFsLXR5cGUtb2YtYXJyYXktdmFsdWVzLXdpdGhvdXQtZW51bS1vdmVyaGVhZFxudmFyIHR1cGxlID0gZnVuY3Rpb24gdHVwbGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgcmV0dXJuIGFyZ3M7XG59O1xuZXhwb3J0cy50dXBsZSA9IHR1cGxlO1xudmFyIHR1cGxlTnVtID0gZnVuY3Rpb24gdHVwbGVOdW0oKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuICByZXR1cm4gYXJncztcbn07XG5leHBvcnRzLnR1cGxlTnVtID0gdHVwbGVOdW07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5TaXplQ29udGV4dFByb3ZpZGVyID0gdm9pZCAwO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBTaXplQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG52YXIgU2l6ZUNvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uIFNpemVDb250ZXh0UHJvdmlkZXIoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgIHNpemUgPSBfcmVmLnNpemU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTaXplQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKG9yaWdpblNpemUpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2l6ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBzaXplIHx8IG9yaWdpblNpemVcbiAgICB9LCBjaGlsZHJlbik7XG4gIH0pO1xufTtcbmV4cG9ydHMuU2l6ZUNvbnRleHRQcm92aWRlciA9IFNpemVDb250ZXh0UHJvdmlkZXI7XG52YXIgX2RlZmF1bHQgPSBTaXplQ29udGV4dDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLmRlZmF1bHQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jb21wb3NlUmVmID0gY29tcG9zZVJlZjtcbmV4cG9ydHMuZmlsbFJlZiA9IGZpbGxSZWY7XG5leHBvcnRzLnN1cHBvcnRSZWYgPSBzdXBwb3J0UmVmO1xuZXhwb3J0cy51c2VDb21wb3NlUmVmID0gdXNlQ29tcG9zZVJlZjtcbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcbnZhciBfcmVhY3RJcyA9IHJlcXVpcmUoXCJyZWFjdC1pc1wiKTtcbnZhciBfdXNlTWVtbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaG9va3MvdXNlTWVtb1wiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5mdW5jdGlvbiBmaWxsUmVmKHJlZiwgbm9kZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihub2RlKTtcbiAgfSBlbHNlIGlmICgoMCwgX3R5cGVvZjIuZGVmYXVsdCkocmVmKSA9PT0gJ29iamVjdCcgJiYgcmVmICYmICdjdXJyZW50JyBpbiByZWYpIHtcbiAgICByZWYuY3VycmVudCA9IG5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSByZWZzIGludG8gb25lIHJlZiBmdW5jdGlvbiB0byBzdXBwb3J0IHJlZiBwYXNzaW5nLlxuICovXG5mdW5jdGlvbiBjb21wb3NlUmVmKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVmcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICByZWZzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHZhciByZWZMaXN0ID0gcmVmcy5maWx0ZXIoZnVuY3Rpb24gKHJlZikge1xuICAgIHJldHVybiByZWY7XG4gIH0pO1xuICBpZiAocmVmTGlzdC5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiByZWZMaXN0WzBdO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJlZnMuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICBmaWxsUmVmKHJlZiwgbm9kZSk7XG4gICAgfSk7XG4gIH07XG59XG5mdW5jdGlvbiB1c2VDb21wb3NlUmVmKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlZnMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICByZWZzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cbiAgcmV0dXJuICgwLCBfdXNlTWVtby5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbXBvc2VSZWYuYXBwbHkodm9pZCAwLCByZWZzKTtcbiAgfSwgcmVmcywgZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgICByZXR1cm4gcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoIHx8IHByZXYuZXZlcnkoZnVuY3Rpb24gKHJlZiwgaSkge1xuICAgICAgcmV0dXJuIHJlZiAhPT0gbmV4dFtpXTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBzdXBwb3J0UmVmKG5vZGVPckNvbXBvbmVudCkge1xuICB2YXIgX3R5cGUkcHJvdG90eXBlLCBfbm9kZU9yQ29tcG9uZW50JHByb3Q7XG4gIHZhciB0eXBlID0gKDAsIF9yZWFjdElzLmlzTWVtbykobm9kZU9yQ29tcG9uZW50KSA/IG5vZGVPckNvbXBvbmVudC50eXBlLnR5cGUgOiBub2RlT3JDb21wb25lbnQudHlwZTtcblxuICAvLyBGdW5jdGlvbiBjb21wb25lbnQgbm9kZVxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgISgoX3R5cGUkcHJvdG90eXBlID0gdHlwZS5wcm90b3R5cGUpICE9PSBudWxsICYmIF90eXBlJHByb3RvdHlwZSAhPT0gdm9pZCAwICYmIF90eXBlJHByb3RvdHlwZS5yZW5kZXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gQ2xhc3MgY29tcG9uZW50XG4gIGlmICh0eXBlb2Ygbm9kZU9yQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmICEoKF9ub2RlT3JDb21wb25lbnQkcHJvdCA9IG5vZGVPckNvbXBvbmVudC5wcm90b3R5cGUpICE9PSBudWxsICYmIF9ub2RlT3JDb21wb25lbnQkcHJvdCAhPT0gdm9pZCAwICYmIF9ub2RlT3JDb21wb25lbnQkcHJvdC5yZW5kZXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuLyogZXNsaW50LWVuYWJsZSAqLyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGNsb25lRWxlbWVudDtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGlzRnJhZ21lbnQ7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50ID0gdm9pZCAwO1xuZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IHJlcGxhY2VFbGVtZW50O1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBpc1ZhbGlkRWxlbWVudCA9IFJlYWN0LmlzVmFsaWRFbGVtZW50O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudCA9IGlzVmFsaWRFbGVtZW50O1xuZnVuY3Rpb24gaXNGcmFnbWVudChjaGlsZCkge1xuICByZXR1cm4gY2hpbGQgJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnR5cGUgPT09IFJlYWN0LkZyYWdtZW50O1xufVxuZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbWVudCwgcmVwbGFjZW1lbnQsIHByb3BzKSB7XG4gIGlmICghaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgdHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nID8gcHJvcHMoZWxlbWVudC5wcm9wcyB8fCB7fSkgOiBwcm9wcyk7XG59XG5mdW5jdGlvbiBjbG9uZUVsZW1lbnQoZWxlbWVudCwgcHJvcHMpIHtcbiAgcmV0dXJuIHJlcGxhY2VFbGVtZW50KGVsZW1lbnQsIGVsZW1lbnQsIHByb3BzKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBvbWl0O1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbmZ1bmN0aW9uIG9taXQob2JqLCBmaWVsZHMpIHtcbiAgdmFyIGNsb25lID0gKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBvYmopO1xuICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZHMpKSB7XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsZXRlIGNsb25lW2tleV07XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lO1xufSIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCIpO1xudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiKTtcbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIik7XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYW5Vc2VEb207XG5mdW5jdGlvbiBjYW5Vc2VEb20oKSB7XG4gIHJldHVybiAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuRGlzYWJsZWRDb250ZXh0UHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIERpc2FibGVkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcbnZhciBEaXNhYmxlZENvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uIERpc2FibGVkQ29udGV4dFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQ7XG4gIHZhciBvcmlnaW5EaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoRGlzYWJsZWRDb250ZXh0KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERpc2FibGVkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkaXNhYmxlZCAhPT0gbnVsbCAmJiBkaXNhYmxlZCAhPT0gdm9pZCAwID8gZGlzYWJsZWQgOiBvcmlnaW5EaXNhYmxlZFxuICB9LCBjaGlsZHJlbik7XG59O1xuZXhwb3J0cy5EaXNhYmxlZENvbnRleHRQcm92aWRlciA9IERpc2FibGVkQ29udGV4dFByb3ZpZGVyO1xudmFyIF9kZWZhdWx0ID0gRGlzYWJsZWRDb250ZXh0O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9lbl9VUyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXBhZ2luYXRpb24vbGliL2xvY2FsZS9lbl9VU1wiKSk7XG52YXIgX2VuX1VTMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NhbGVuZGFyL2xvY2FsZS9lbl9VU1wiKSk7XG52YXIgX2VuX1VTMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2RhdGUtcGlja2VyL2xvY2FsZS9lbl9VU1wiKSk7XG52YXIgX2VuX1VTNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VU1wiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcgKi9cblxudmFyIHR5cGVUZW1wbGF0ZSA9ICcke2xhYmVsfSBpcyBub3QgYSB2YWxpZCAke3R5cGV9JztcbnZhciBsb2NhbGVWYWx1ZXMgPSB7XG4gIGxvY2FsZTogJ2VuJyxcbiAgUGFnaW5hdGlvbjogX2VuX1VTW1wiZGVmYXVsdFwiXSxcbiAgRGF0ZVBpY2tlcjogX2VuX1VTM1tcImRlZmF1bHRcIl0sXG4gIFRpbWVQaWNrZXI6IF9lbl9VUzRbXCJkZWZhdWx0XCJdLFxuICBDYWxlbmRhcjogX2VuX1VTMltcImRlZmF1bHRcIl0sXG4gIGdsb2JhbDoge1xuICAgIHBsYWNlaG9sZGVyOiAnUGxlYXNlIHNlbGVjdCdcbiAgfSxcbiAgVGFibGU6IHtcbiAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRlciBtZW51JyxcbiAgICBmaWx0ZXJDb25maXJtOiAnT0snLFxuICAgIGZpbHRlclJlc2V0OiAnUmVzZXQnLFxuICAgIGZpbHRlckVtcHR5VGV4dDogJ05vIGZpbHRlcnMnLFxuICAgIGZpbHRlckNoZWNrYWxsOiAnU2VsZWN0IGFsbCBpdGVtcycsXG4gICAgZmlsdGVyU2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggaW4gZmlsdGVycycsXG4gICAgZW1wdHlUZXh0OiAnTm8gZGF0YScsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0IGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0SW52ZXJ0OiAnSW52ZXJ0IGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0Tm9uZTogJ0NsZWFyIGFsbCBkYXRhJyxcbiAgICBzZWxlY3Rpb25BbGw6ICdTZWxlY3QgYWxsIGRhdGEnLFxuICAgIHNvcnRUaXRsZTogJ1NvcnQnLFxuICAgIGV4cGFuZDogJ0V4cGFuZCByb3cnLFxuICAgIGNvbGxhcHNlOiAnQ29sbGFwc2Ugcm93JyxcbiAgICB0cmlnZ2VyRGVzYzogJ0NsaWNrIHRvIHNvcnQgZGVzY2VuZGluZycsXG4gICAgdHJpZ2dlckFzYzogJ0NsaWNrIHRvIHNvcnQgYXNjZW5kaW5nJyxcbiAgICBjYW5jZWxTb3J0OiAnQ2xpY2sgdG8gY2FuY2VsIHNvcnRpbmcnXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnLFxuICAgIGp1c3RPa1RleHQ6ICdPSydcbiAgfSxcbiAgUG9wY29uZmlybToge1xuICAgIG9rVGV4dDogJ09LJyxcbiAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsJ1xuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIHRpdGxlczogWycnLCAnJ10sXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggaGVyZScsXG4gICAgaXRlbVVuaXQ6ICdpdGVtJyxcbiAgICBpdGVtc1VuaXQ6ICdpdGVtcycsXG4gICAgcmVtb3ZlOiAnUmVtb3ZlJyxcbiAgICBzZWxlY3RDdXJyZW50OiAnU2VsZWN0IGN1cnJlbnQgcGFnZScsXG4gICAgcmVtb3ZlQ3VycmVudDogJ1JlbW92ZSBjdXJyZW50IHBhZ2UnLFxuICAgIHNlbGVjdEFsbDogJ1NlbGVjdCBhbGwgZGF0YScsXG4gICAgcmVtb3ZlQWxsOiAnUmVtb3ZlIGFsbCBkYXRhJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnQgY3VycmVudCBwYWdlJ1xuICB9LFxuICBVcGxvYWQ6IHtcbiAgICB1cGxvYWRpbmc6ICdVcGxvYWRpbmcuLi4nLFxuICAgIHJlbW92ZUZpbGU6ICdSZW1vdmUgZmlsZScsXG4gICAgdXBsb2FkRXJyb3I6ICdVcGxvYWQgZXJyb3InLFxuICAgIHByZXZpZXdGaWxlOiAnUHJldmlldyBmaWxlJyxcbiAgICBkb3dubG9hZEZpbGU6ICdEb3dubG9hZCBmaWxlJ1xuICB9LFxuICBFbXB0eToge1xuICAgIGRlc2NyaXB0aW9uOiAnTm8gZGF0YSdcbiAgfSxcbiAgSWNvbjoge1xuICAgIGljb246ICdpY29uJ1xuICB9LFxuICBUZXh0OiB7XG4gICAgZWRpdDogJ0VkaXQnLFxuICAgIGNvcHk6ICdDb3B5JyxcbiAgICBjb3BpZWQ6ICdDb3BpZWQnLFxuICAgIGV4cGFuZDogJ0V4cGFuZCdcbiAgfSxcbiAgUGFnZUhlYWRlcjoge1xuICAgIGJhY2s6ICdCYWNrJ1xuICB9LFxuICBGb3JtOiB7XG4gICAgb3B0aW9uYWw6ICcob3B0aW9uYWwpJyxcbiAgICBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlczoge1xuICAgICAgXCJkZWZhdWx0XCI6ICdGaWVsZCB2YWxpZGF0aW9uIGVycm9yIGZvciAke2xhYmVsfScsXG4gICAgICByZXF1aXJlZDogJ1BsZWFzZSBlbnRlciAke2xhYmVsfScsXG4gICAgICBcImVudW1cIjogJyR7bGFiZWx9IG11c3QgYmUgb25lIG9mIFske2VudW19XScsXG4gICAgICB3aGl0ZXNwYWNlOiAnJHtsYWJlbH0gY2Fubm90IGJlIGEgYmxhbmsgY2hhcmFjdGVyJyxcbiAgICAgIGRhdGU6IHtcbiAgICAgICAgZm9ybWF0OiAnJHtsYWJlbH0gZGF0ZSBmb3JtYXQgaXMgaW52YWxpZCcsXG4gICAgICAgIHBhcnNlOiAnJHtsYWJlbH0gY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIGRhdGUnLFxuICAgICAgICBpbnZhbGlkOiAnJHtsYWJlbH0gaXMgYW4gaW52YWxpZCBkYXRlJ1xuICAgICAgfSxcbiAgICAgIHR5cGVzOiB7XG4gICAgICAgIHN0cmluZzogdHlwZVRlbXBsYXRlLFxuICAgICAgICBtZXRob2Q6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgYXJyYXk6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgb2JqZWN0OiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIG51bWJlcjogdHlwZVRlbXBsYXRlLFxuICAgICAgICBkYXRlOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIFwiYm9vbGVhblwiOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGludGVnZXI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgXCJmbG9hdFwiOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIHJlZ2V4cDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBlbWFpbDogdHlwZVRlbXBsYXRlLFxuICAgICAgICB1cmw6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgaGV4OiB0eXBlVGVtcGxhdGVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgbGVuOiAnJHtsYWJlbH0gbXVzdCBiZSAke2xlbn0gY2hhcmFjdGVycycsXG4gICAgICAgIG1pbjogJyR7bGFiZWx9IG11c3QgYmUgYXQgbGVhc3QgJHttaW59IGNoYXJhY3RlcnMnLFxuICAgICAgICBtYXg6ICcke2xhYmVsfSBtdXN0IGJlIHVwIHRvICR7bWF4fSBjaGFyYWN0ZXJzJyxcbiAgICAgICAgcmFuZ2U6ICcke2xhYmVsfSBtdXN0IGJlIGJldHdlZW4gJHttaW59LSR7bWF4fSBjaGFyYWN0ZXJzJ1xuICAgICAgfSxcbiAgICAgIG51bWJlcjoge1xuICAgICAgICBsZW46ICcke2xhYmVsfSBtdXN0IGJlIGVxdWFsIHRvICR7bGVufScsXG4gICAgICAgIG1pbjogJyR7bGFiZWx9IG11c3QgYmUgbWluaW11bSAke21pbn0nLFxuICAgICAgICBtYXg6ICcke2xhYmVsfSBtdXN0IGJlIG1heGltdW0gJHttYXh9JyxcbiAgICAgICAgcmFuZ2U6ICcke2xhYmVsfSBtdXN0IGJlIGJldHdlZW4gJHttaW59LSR7bWF4fSdcbiAgICAgIH0sXG4gICAgICBhcnJheToge1xuICAgICAgICBsZW46ICdNdXN0IGJlICR7bGVufSAke2xhYmVsfScsXG4gICAgICAgIG1pbjogJ0F0IGxlYXN0ICR7bWlufSAke2xhYmVsfScsXG4gICAgICAgIG1heDogJ0F0IG1vc3QgJHttYXh9ICR7bGFiZWx9JyxcbiAgICAgICAgcmFuZ2U6ICdUaGUgYW1vdW50IG9mICR7bGFiZWx9IG11c3QgYmUgYmV0d2VlbiAke21pbn0tJHttYXh9J1xuICAgICAgfSxcbiAgICAgIHBhdHRlcm46IHtcbiAgICAgICAgbWlzbWF0Y2g6ICcke2xhYmVsfSBkb2VzIG5vdCBtYXRjaCB0aGUgcGF0dGVybiAke3BhdHRlcm59J1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgSW1hZ2U6IHtcbiAgICBwcmV2aWV3OiAnUHJldmlldydcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IGxvY2FsZVZhbHVlcztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBcbiAgdmFyIF9DbG9zZUNpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9saWIvaWNvbnMvQ2xvc2VDaXJjbGVGaWxsZWQnKSk7XG4gIFxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG4gIFxuICB2YXIgX2RlZmF1bHQgPSBfQ2xvc2VDaXJjbGVGaWxsZWQ7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuICBtb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmV4cG9ydHMuZml4Q29udHJvbGxlZFZhbHVlID0gZml4Q29udHJvbGxlZFZhbHVlO1xuZXhwb3J0cy5yZXNvbHZlT25DaGFuZ2UgPSByZXNvbHZlT25DaGFuZ2U7XG5leHBvcnRzLnRyaWdnZXJGb2N1cyA9IHRyaWdnZXJGb2N1cztcbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcbnZhciBfQ2xvc2VDaXJjbGVGaWxsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZFwiKSk7XG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBfcmNJbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLWlucHV0XCIpKTtcbnZhciBfcmVmMiA9IHJlcXVpcmUoXCJyYy11dGlsL2xpYi9yZWZcIik7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9EaXNhYmxlZENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXIvRGlzYWJsZWRDb250ZXh0XCIpKTtcbnZhciBfU2l6ZUNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXIvU2l6ZUNvbnRleHRcIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4uL2Zvcm0vY29udGV4dFwiKTtcbnZhciBfQ29tcGFjdCA9IHJlcXVpcmUoXCIuLi9zcGFjZS9Db21wYWN0XCIpO1xudmFyIF9zdGF0dXNVdGlscyA9IHJlcXVpcmUoXCIuLi9fdXRpbC9zdGF0dXNVdGlsc1wiKTtcbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xudmFyIF91c2VSZW1vdmVQYXNzd29yZFRpbWVvdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hvb2tzL3VzZVJlbW92ZVBhc3N3b3JkVGltZW91dFwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuZnVuY3Rpb24gZml4Q29udHJvbGxlZFZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZU9uQ2hhbmdlKHRhcmdldCwgZSwgb25DaGFuZ2UsIHRhcmdldFZhbHVlKSB7XG4gIGlmICghb25DaGFuZ2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGV2ZW50ID0gZTtcbiAgaWYgKGUudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgIC8vIENsb25lIGEgbmV3IHRhcmdldCBmb3IgZXZlbnQuXG4gICAgLy8gQXZvaWQgdGhlIGZvbGxvd2luZyB1c2FnZSwgdGhlIHNldFF1ZXJ5IG1ldGhvZCBnZXRzIHRoZSBvcmlnaW5hbCB2YWx1ZS5cbiAgICAvL1xuICAgIC8vIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gUmVhY3QudXNlU3RhdGUoJycpO1xuICAgIC8vIDxJbnB1dFxuICAgIC8vICAgYWxsb3dDbGVhclxuICAgIC8vICAgdmFsdWU9e3F1ZXJ5fVxuICAgIC8vICAgb25DaGFuZ2U9eyhlKT0+IHtcbiAgICAvLyAgICAgc2V0UXVlcnkoKHByZXZTdGF0dXMpID0+IGUudGFyZ2V0LnZhbHVlKTtcbiAgICAvLyAgIH19XG4gICAgLy8gLz5cbiAgICB2YXIgY3VycmVudFRhcmdldCA9IHRhcmdldC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgLy8gY2xpY2sgY2xlYXIgaWNvblxuICAgIGV2ZW50ID0gT2JqZWN0LmNyZWF0ZShlLCB7XG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgdmFsdWU6IGN1cnJlbnRUYXJnZXRcbiAgICAgIH0sXG4gICAgICBjdXJyZW50VGFyZ2V0OiB7XG4gICAgICAgIHZhbHVlOiBjdXJyZW50VGFyZ2V0XG4gICAgICB9XG4gICAgfSk7XG4gICAgY3VycmVudFRhcmdldC52YWx1ZSA9ICcnO1xuICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gVHJpZ2dlciBieSBjb21wb3NpdGlvbiBldmVudCwgdGhpcyBtZWFucyB3ZSBuZWVkIGZvcmNlIGNoYW5nZSB0aGUgaW5wdXQgdmFsdWVcbiAgaWYgKHRhcmdldFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBldmVudCA9IE9iamVjdC5jcmVhdGUoZSwge1xuICAgICAgdGFyZ2V0OiB7XG4gICAgICAgIHZhbHVlOiB0YXJnZXRcbiAgICAgIH0sXG4gICAgICBjdXJyZW50VGFyZ2V0OiB7XG4gICAgICAgIHZhbHVlOiB0YXJnZXRcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0YXJnZXQudmFsdWUgPSB0YXJnZXRWYWx1ZTtcbiAgICBvbkNoYW5nZShldmVudCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9uQ2hhbmdlKGV2ZW50KTtcbn1cbmZ1bmN0aW9uIHRyaWdnZXJGb2N1cyhlbGVtZW50LCBvcHRpb24pIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuZm9jdXMob3B0aW9uKTtcbiAgLy8gU2VsZWN0aW9uIGNvbnRlbnRcbiAgdmFyIF9yZWYgPSBvcHRpb24gfHwge30sXG4gICAgY3Vyc29yID0gX3JlZi5jdXJzb3I7XG4gIGlmIChjdXJzb3IpIHtcbiAgICB2YXIgbGVuID0gZWxlbWVudC52YWx1ZS5sZW5ndGg7XG4gICAgc3dpdGNoIChjdXJzb3IpIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSgwLCAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGxlbiwgbGVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGxlbik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxudmFyIElucHV0ID0gLyojX19QVVJFX18qLygwLCBfcmVhY3QuZm9yd2FyZFJlZikoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzLCBfY2xhc3NOYW1lczIsIF9jbGFzc05hbWVzNDtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBfcHJvcHMkYm9yZGVyZWQgPSBwcm9wcy5ib3JkZXJlZCxcbiAgICBib3JkZXJlZCA9IF9wcm9wcyRib3JkZXJlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRib3JkZXJlZCxcbiAgICBjdXN0b21TdGF0dXMgPSBwcm9wcy5zdGF0dXMsXG4gICAgY3VzdG9tU2l6ZSA9IHByb3BzLnNpemUsXG4gICAgY3VzdG9tRGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgc3VmZml4ID0gcHJvcHMuc3VmZml4LFxuICAgIGFsbG93Q2xlYXIgPSBwcm9wcy5hbGxvd0NsZWFyLFxuICAgIGFkZG9uQWZ0ZXIgPSBwcm9wcy5hZGRvbkFmdGVyLFxuICAgIGFkZG9uQmVmb3JlID0gcHJvcHMuYWRkb25CZWZvcmUsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wicHJlZml4Q2xzXCIsIFwiYm9yZGVyZWRcIiwgXCJzdGF0dXNcIiwgXCJzaXplXCIsIFwiZGlzYWJsZWRcIiwgXCJvbkJsdXJcIiwgXCJvbkZvY3VzXCIsIFwic3VmZml4XCIsIFwiYWxsb3dDbGVhclwiLCBcImFkZG9uQWZ0ZXJcIiwgXCJhZGRvbkJlZm9yZVwiLCBcImNsYXNzTmFtZVwiLCBcIm9uQ2hhbmdlXCJdKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gX3JlYWN0W1wiZGVmYXVsdFwiXS51c2VDb250ZXh0KF9jb25maWdQcm92aWRlci5Db25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uLFxuICAgIGlucHV0ID0gX1JlYWN0JHVzZUNvbnRleHQuaW5wdXQ7XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2lucHV0JywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIGlucHV0UmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKG51bGwpO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gQ29tcGFjdCBJdGVtID09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgX3VzZUNvbXBhY3RJdGVtQ29udGV4ID0gKDAsIF9Db21wYWN0LnVzZUNvbXBhY3RJdGVtQ29udGV4dCkocHJlZml4Q2xzLCBkaXJlY3Rpb24pLFxuICAgIGNvbXBhY3RTaXplID0gX3VzZUNvbXBhY3RJdGVtQ29udGV4LmNvbXBhY3RTaXplLFxuICAgIGNvbXBhY3RJdGVtQ2xhc3NuYW1lcyA9IF91c2VDb21wYWN0SXRlbUNvbnRleC5jb21wYWN0SXRlbUNsYXNzbmFtZXM7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBTaXplID09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgc2l6ZSA9IF9yZWFjdFtcImRlZmF1bHRcIl0udXNlQ29udGV4dChfU2l6ZUNvbnRleHRbXCJkZWZhdWx0XCJdKTtcbiAgdmFyIG1lcmdlZFNpemUgPSBjb21wYWN0U2l6ZSB8fCBjdXN0b21TaXplIHx8IHNpemU7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBEaXNhYmxlZCA9PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIGRpc2FibGVkID0gX3JlYWN0W1wiZGVmYXVsdFwiXS51c2VDb250ZXh0KF9EaXNhYmxlZENvbnRleHRbXCJkZWZhdWx0XCJdKTtcbiAgdmFyIG1lcmdlZERpc2FibGVkID0gY3VzdG9tRGlzYWJsZWQgIT09IG51bGwgJiYgY3VzdG9tRGlzYWJsZWQgIT09IHZvaWQgMCA/IGN1c3RvbURpc2FibGVkIDogZGlzYWJsZWQ7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBTdGF0dXMgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBfdXNlQ29udGV4dCA9ICgwLCBfcmVhY3QudXNlQ29udGV4dCkoX2NvbnRleHQuRm9ybUl0ZW1JbnB1dENvbnRleHQpLFxuICAgIGNvbnRleHRTdGF0dXMgPSBfdXNlQ29udGV4dC5zdGF0dXMsXG4gICAgaGFzRmVlZGJhY2sgPSBfdXNlQ29udGV4dC5oYXNGZWVkYmFjayxcbiAgICBmZWVkYmFja0ljb24gPSBfdXNlQ29udGV4dC5mZWVkYmFja0ljb247XG4gIHZhciBtZXJnZWRTdGF0dXMgPSAoMCwgX3N0YXR1c1V0aWxzLmdldE1lcmdlZFN0YXR1cykoY29udGV4dFN0YXR1cywgY3VzdG9tU3RhdHVzKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09IEZvY3VzIHdhcm5pbmcgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBpbnB1dEhhc1ByZWZpeFN1ZmZpeCA9ICgwLCBfdXRpbHMuaGFzUHJlZml4U3VmZml4KShwcm9wcykgfHwgISFoYXNGZWVkYmFjaztcbiAgdmFyIHByZXZIYXNQcmVmaXhTdWZmaXggPSAoMCwgX3JlYWN0LnVzZVJlZikoaW5wdXRIYXNQcmVmaXhTdWZmaXgpO1xuICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoaW5wdXRIYXNQcmVmaXhTdWZmaXggJiYgIXByZXZIYXNQcmVmaXhTdWZmaXguY3VycmVudCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gKChfYSA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbnB1dCksICdJbnB1dCcsIFwiV2hlbiBJbnB1dCBpcyBmb2N1c2VkLCBkeW5hbWljIGFkZCBvciByZW1vdmUgcHJlZml4IC8gc3VmZml4IHdpbGwgbWFrZSBpdCBsb3NlIGZvY3VzIGNhdXNlZCBieSBkb20gc3RydWN0dXJlIGNoYW5nZS4gUmVhZCBtb3JlOiBodHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy9pbnB1dC8jRkFRXCIpIDogdm9pZCAwO1xuICAgIH1cbiAgICBwcmV2SGFzUHJlZml4U3VmZml4LmN1cnJlbnQgPSBpbnB1dEhhc1ByZWZpeFN1ZmZpeDtcbiAgfSwgW2lucHV0SGFzUHJlZml4U3VmZml4XSk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBSZW1vdmUgUGFzc3dvcmQgdmFsdWUgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciByZW1vdmVQYXNzd29yZFRpbWVvdXQgPSAoMCwgX3VzZVJlbW92ZVBhc3N3b3JkVGltZW91dFtcImRlZmF1bHRcIl0pKGlucHV0UmVmLCB0cnVlKTtcbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGUpIHtcbiAgICByZW1vdmVQYXNzd29yZFRpbWVvdXQoKTtcbiAgICBvbkJsdXIgPT09IG51bGwgfHwgb25CbHVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJsdXIoZSk7XG4gIH07XG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGUpIHtcbiAgICByZW1vdmVQYXNzd29yZFRpbWVvdXQoKTtcbiAgICBvbkZvY3VzID09PSBudWxsIHx8IG9uRm9jdXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRm9jdXMoZSk7XG4gIH07XG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgIHJlbW92ZVBhc3N3b3JkVGltZW91dCgpO1xuICAgIG9uQ2hhbmdlID09PSBudWxsIHx8IG9uQ2hhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNoYW5nZShlKTtcbiAgfTtcbiAgdmFyIHN1ZmZpeE5vZGUgPSAoaGFzRmVlZGJhY2sgfHwgc3VmZml4KSAmJiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdFtcImRlZmF1bHRcIl0uRnJhZ21lbnQsIG51bGwsIHN1ZmZpeCwgaGFzRmVlZGJhY2sgJiYgZmVlZGJhY2tJY29uKTtcbiAgLy8gQWxsb3cgY2xlYXJcbiAgdmFyIG1lcmdlZEFsbG93Q2xlYXI7XG4gIGlmICgoMCwgX3R5cGVvZjJbXCJkZWZhdWx0XCJdKShhbGxvd0NsZWFyKSA9PT0gJ29iamVjdCcgJiYgKGFsbG93Q2xlYXIgPT09IG51bGwgfHwgYWxsb3dDbGVhciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWxsb3dDbGVhci5jbGVhckljb24pKSB7XG4gICAgbWVyZ2VkQWxsb3dDbGVhciA9IGFsbG93Q2xlYXI7XG4gIH0gZWxzZSBpZiAoYWxsb3dDbGVhcikge1xuICAgIG1lcmdlZEFsbG93Q2xlYXIgPSB7XG4gICAgICBjbGVhckljb246IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQ2lyY2xlRmlsbGVkW1wiZGVmYXVsdFwiXSwgbnVsbClcbiAgICB9O1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yY0lucHV0W1wiZGVmYXVsdFwiXSwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICByZWY6ICgwLCBfcmVmMi5jb21wb3NlUmVmKShyZWYsIGlucHV0UmVmKSxcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICBhdXRvQ29tcGxldGU6IGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dC5hdXRvQ29tcGxldGVcbiAgfSwgcmVzdCwge1xuICAgIGRpc2FibGVkOiBtZXJnZWREaXNhYmxlZCB8fCB1bmRlZmluZWQsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIHN1ZmZpeDogc3VmZml4Tm9kZSxcbiAgICBhbGxvd0NsZWFyOiBtZXJnZWRBbGxvd0NsZWFyLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoY2xhc3NOYW1lLCBjb21wYWN0SXRlbUNsYXNzbmFtZXMpLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgYWRkb25BZnRlcjogYWRkb25BZnRlciAmJiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9Db21wYWN0Lk5vQ29tcGFjdFN0eWxlLCBudWxsLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9jb250ZXh0Lk5vRm9ybVN0eWxlLCB7XG4gICAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICAgIHN0YXR1czogdHJ1ZVxuICAgIH0sIGFkZG9uQWZ0ZXIpKSxcbiAgICBhZGRvbkJlZm9yZTogYWRkb25CZWZvcmUgJiYgLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ29tcGFjdC5Ob0NvbXBhY3RTdHlsZSwgbnVsbCwgLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfY29udGV4dC5Ob0Zvcm1TdHlsZSwge1xuICAgICAgb3ZlcnJpZGU6IHRydWUsXG4gICAgICBzdGF0dXM6IHRydWVcbiAgICB9LCBhZGRvbkJlZm9yZSkpLFxuICAgIGlucHV0Q2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKSgoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zbVwiKSwgbWVyZ2VkU2l6ZSA9PT0gJ3NtYWxsJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbGdcIiksIG1lcmdlZFNpemUgPT09ICdsYXJnZScpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYm9yZGVybGVzc1wiKSwgIWJvcmRlcmVkKSwgX2NsYXNzTmFtZXMpLCAhaW5wdXRIYXNQcmVmaXhTdWZmaXggJiYgKDAsIF9zdGF0dXNVdGlscy5nZXRTdGF0dXNDbGFzc05hbWVzKShwcmVmaXhDbHMsIG1lcmdlZFN0YXR1cykpLFxuICAgIGFmZml4V3JhcHBlckNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyLXNtXCIpLCBtZXJnZWRTaXplID09PSAnc21hbGwnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1sZ1wiKSwgbWVyZ2VkU2l6ZSA9PT0gJ2xhcmdlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFmZml4LXdyYXBwZXItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlci1ib3JkZXJsZXNzXCIpLCAhYm9yZGVyZWQpLCBfY2xhc3NOYW1lczIpLCAoMCwgX3N0YXR1c1V0aWxzLmdldFN0YXR1c0NsYXNzTmFtZXMpKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlclwiKSwgbWVyZ2VkU3RhdHVzLCBoYXNGZWVkYmFjaykpLFxuICAgIHdyYXBwZXJDbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKCgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXAtcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSksXG4gICAgZ3JvdXBDbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKChfY2xhc3NOYW1lczQgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczQsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ3JvdXAtd3JhcHBlci1zbVwiKSwgbWVyZ2VkU2l6ZSA9PT0gJ3NtYWxsJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXM0LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWdyb3VwLXdyYXBwZXItbGdcIiksIG1lcmdlZFNpemUgPT09ICdsYXJnZScpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzNCwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ncm91cC13cmFwcGVyLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksIF9jbGFzc05hbWVzNCksICgwLCBfc3RhdHVzVXRpbHMuZ2V0U3RhdHVzQ2xhc3NOYW1lcykoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ncm91cC13cmFwcGVyXCIpLCBtZXJnZWRTdGF0dXMsIGhhc0ZlZWRiYWNrKSlcbiAgfSkpO1xufSk7XG52YXIgX2RlZmF1bHQgPSBJbnB1dDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIEljb25Db250ZXh0ID0gLyojX19QVVJFX18qLygwLCBfcmVhY3QuY3JlYXRlQ29udGV4dCkoe30pO1xudmFyIF9kZWZhdWx0ID0gSWNvbkNvbnRleHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hdHRhY2hUeXBlQXBpID0gYXR0YWNoVHlwZUFwaTtcbmV4cG9ydHMuZ2V0SW5zdGFuY2UgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0S2V5VGhlbkluY3JlYXNlS2V5ID0gZ2V0S2V5VGhlbkluY3JlYXNlS2V5O1xuZXhwb3J0cy50eXBlTGlzdCA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfQ2hlY2tDaXJjbGVGaWxsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9DaGVja0NpcmNsZUZpbGxlZFwiKSk7XG52YXIgX0Nsb3NlQ2lyY2xlRmlsbGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvQ2xvc2VDaXJjbGVGaWxsZWRcIikpO1xudmFyIF9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCIpKTtcbnZhciBfSW5mb0NpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL0luZm9DaXJjbGVGaWxsZWRcIikpO1xudmFyIF9Mb2FkaW5nT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9Mb2FkaW5nT3V0bGluZWRcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3JjTm90aWZpY2F0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtbm90aWZpY2F0aW9uXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKSk7XG52YXIgX3VzZU1lc3NhZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hvb2tzL3VzZU1lc3NhZ2VcIikpO1xudmFyIG1lc3NhZ2VJbnN0YW5jZTtcbnZhciBkZWZhdWx0RHVyYXRpb24gPSAzO1xudmFyIGRlZmF1bHRUb3A7XG52YXIga2V5ID0gMTtcbnZhciBsb2NhbFByZWZpeENscyA9ICcnO1xudmFyIHRyYW5zaXRpb25OYW1lID0gJ21vdmUtdXAnO1xudmFyIGhhc1RyYW5zaXRpb25OYW1lID0gZmFsc2U7XG52YXIgZ2V0Q29udGFpbmVyO1xudmFyIG1heENvdW50O1xudmFyIHJ0bCA9IGZhbHNlO1xuZnVuY3Rpb24gZ2V0S2V5VGhlbkluY3JlYXNlS2V5KCkge1xuICByZXR1cm4ga2V5Kys7XG59XG5mdW5jdGlvbiBzZXRNZXNzYWdlQ29uZmlnKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0VG9wID0gb3B0aW9ucy50b3A7XG4gICAgbWVzc2FnZUluc3RhbmNlID0gbnVsbDsgLy8gZGVsZXRlIG1lc3NhZ2VJbnN0YW5jZSBmb3IgbmV3IGRlZmF1bHRUb3BcbiAgfVxuXG4gIGlmIChvcHRpb25zLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0RHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uO1xuICB9XG4gIGlmIChvcHRpb25zLnByZWZpeENscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbG9jYWxQcmVmaXhDbHMgPSBvcHRpb25zLnByZWZpeENscztcbiAgfVxuICBpZiAob3B0aW9ucy5nZXRDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGdldENvbnRhaW5lciA9IG9wdGlvbnMuZ2V0Q29udGFpbmVyO1xuICAgIG1lc3NhZ2VJbnN0YW5jZSA9IG51bGw7IC8vIGRlbGV0ZSBtZXNzYWdlSW5zdGFuY2UgZm9yIG5ldyBnZXRDb250YWluZXJcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRyYW5zaXRpb25OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICB0cmFuc2l0aW9uTmFtZSA9IG9wdGlvbnMudHJhbnNpdGlvbk5hbWU7XG4gICAgbWVzc2FnZUluc3RhbmNlID0gbnVsbDsgLy8gZGVsZXRlIG1lc3NhZ2VJbnN0YW5jZSBmb3IgbmV3IHRyYW5zaXRpb25OYW1lXG4gICAgaGFzVHJhbnNpdGlvbk5hbWUgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRpb25zLm1heENvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBtYXhDb3VudCA9IG9wdGlvbnMubWF4Q291bnQ7XG4gICAgbWVzc2FnZUluc3RhbmNlID0gbnVsbDtcbiAgfVxuICBpZiAob3B0aW9ucy5ydGwgIT09IHVuZGVmaW5lZCkge1xuICAgIHJ0bCA9IG9wdGlvbnMucnRsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSQ05vdGlmaWNhdGlvbkluc3RhbmNlKGFyZ3MsIGNhbGxiYWNrKSB7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBhcmdzLnByZWZpeENscyxcbiAgICBnZXRDb250ZXh0UG9wdXBDb250YWluZXIgPSBhcmdzLmdldFBvcHVwQ29udGFpbmVyO1xuICB2YXIgX2dsb2JhbENvbmZpZyA9ICgwLCBfY29uZmlnUHJvdmlkZXIuZ2xvYmFsQ29uZmlnKSgpLFxuICAgIGdldFByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0UHJlZml4Q2xzLFxuICAgIGdldFJvb3RQcmVmaXhDbHMgPSBfZ2xvYmFsQ29uZmlnLmdldFJvb3RQcmVmaXhDbHMsXG4gICAgZ2V0SWNvblByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0SWNvblByZWZpeENscztcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnbWVzc2FnZScsIGN1c3RvbWl6ZVByZWZpeENscyB8fCBsb2NhbFByZWZpeENscyk7XG4gIHZhciByb290UHJlZml4Q2xzID0gZ2V0Um9vdFByZWZpeENscyhhcmdzLnJvb3RQcmVmaXhDbHMsIHByZWZpeENscyk7XG4gIHZhciBpY29uUHJlZml4Q2xzID0gZ2V0SWNvblByZWZpeENscygpO1xuICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgY2FsbGJhY2soe1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgIGluc3RhbmNlOiBtZXNzYWdlSW5zdGFuY2VcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluc3RhbmNlQ29uZmlnID0ge1xuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIHRyYW5zaXRpb25OYW1lOiBoYXNUcmFuc2l0aW9uTmFtZSA/IHRyYW5zaXRpb25OYW1lIDogXCJcIi5jb25jYXQocm9vdFByZWZpeENscywgXCItXCIpLmNvbmNhdCh0cmFuc2l0aW9uTmFtZSksXG4gICAgc3R5bGU6IHtcbiAgICAgIHRvcDogZGVmYXVsdFRvcFxuICAgIH0sXG4gICAgZ2V0Q29udGFpbmVyOiBnZXRDb250YWluZXIgfHwgZ2V0Q29udGV4dFBvcHVwQ29udGFpbmVyLFxuICAgIG1heENvdW50OiBtYXhDb3VudFxuICB9O1xuICBfcmNOb3RpZmljYXRpb25bXCJkZWZhdWx0XCJdLm5ld0luc3RhbmNlKGluc3RhbmNlQ29uZmlnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBjYWxsYmFjayh7XG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgICBpbnN0YW5jZTogbWVzc2FnZUluc3RhbmNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWVzc2FnZUluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICAgIG1lc3NhZ2VJbnN0YW5jZS5jb25maWcgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB9XG4gICAgY2FsbGJhY2soe1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgIH0pO1xuICB9KTtcbn1cbnZhciB0eXBlVG9JY29uID0ge1xuICBpbmZvOiBfSW5mb0NpcmNsZUZpbGxlZFtcImRlZmF1bHRcIl0sXG4gIHN1Y2Nlc3M6IF9DaGVja0NpcmNsZUZpbGxlZFtcImRlZmF1bHRcIl0sXG4gIGVycm9yOiBfQ2xvc2VDaXJjbGVGaWxsZWRbXCJkZWZhdWx0XCJdLFxuICB3YXJuaW5nOiBfRXhjbGFtYXRpb25DaXJjbGVGaWxsZWRbXCJkZWZhdWx0XCJdLFxuICBsb2FkaW5nOiBfTG9hZGluZ091dGxpbmVkW1wiZGVmYXVsdFwiXVxufTtcbnZhciB0eXBlTGlzdCA9IE9iamVjdC5rZXlzKHR5cGVUb0ljb24pO1xuZXhwb3J0cy50eXBlTGlzdCA9IHR5cGVMaXN0O1xuZnVuY3Rpb24gZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgZHVyYXRpb24gPSBhcmdzLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBhcmdzLmR1cmF0aW9uIDogZGVmYXVsdER1cmF0aW9uO1xuICB2YXIgSWNvbkNvbXBvbmVudCA9IHR5cGVUb0ljb25bYXJncy50eXBlXTtcbiAgdmFyIG1lc3NhZ2VDbGFzcyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY3VzdG9tLWNvbnRlbnRcIiksIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoYXJncy50eXBlKSwgYXJncy50eXBlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIHJ0bCA9PT0gdHJ1ZSksIF9jbGFzc05hbWVzKSk7XG4gIHJldHVybiB7XG4gICAga2V5OiBhcmdzLmtleSxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgc3R5bGU6IGFyZ3Muc3R5bGUgfHwge30sXG4gICAgY2xhc3NOYW1lOiBhcmdzLmNsYXNzTmFtZSxcbiAgICBjb250ZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBtZXNzYWdlQ2xhc3NcbiAgICB9LCBhcmdzLmljb24gfHwgSWNvbkNvbXBvbmVudCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCBudWxsKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGFyZ3MuY29udGVudCkpKSxcbiAgICBvbkNsb3NlOiBhcmdzLm9uQ2xvc2UsXG4gICAgb25DbGljazogYXJncy5vbkNsaWNrXG4gIH07XG59XG5mdW5jdGlvbiBub3RpY2UoYXJncykge1xuICB2YXIgdGFyZ2V0ID0gYXJncy5rZXkgfHwgZ2V0S2V5VGhlbkluY3JlYXNlS2V5KCk7XG4gIHZhciBjbG9zZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmdzLm9uQ2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYXJncy5vbkNsb3NlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICB9O1xuICAgIGdldFJDTm90aWZpY2F0aW9uSW5zdGFuY2UoYXJncywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgICAgaWNvblByZWZpeENscyA9IF9yZWYuaWNvblByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlO1xuICAgICAgaW5zdGFuY2Uubm90aWNlKGdldFJDTm90aWNlUHJvcHMoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgYXJncyksIHtcbiAgICAgICAga2V5OiB0YXJnZXQsXG4gICAgICAgIG9uQ2xvc2U6IGNhbGxiYWNrXG4gICAgICB9KSwgcHJlZml4Q2xzLCBpY29uUHJlZml4Q2xzKSk7XG4gICAgfSk7XG4gIH0pO1xuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBtZXNzYWdlSW5zdGFuY2UucmVtb3ZlTm90aWNlKHRhcmdldCk7XG4gICAgICAoX2EgPSBhcmdzLm9uQ2xvc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGFyZ3MpO1xuICAgIH1cbiAgfTtcbiAgcmVzdWx0LnRoZW4gPSBmdW5jdGlvbiAoZmlsbGVkLCByZWplY3RlZCkge1xuICAgIHJldHVybiBjbG9zZVByb21pc2UudGhlbihmaWxsZWQsIHJlamVjdGVkKTtcbiAgfTtcbiAgcmVzdWx0LnByb21pc2UgPSBjbG9zZVByb21pc2U7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc0FyZ3NQcm9wcyhjb250ZW50KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29udGVudCkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmICEhY29udGVudC5jb250ZW50O1xufVxudmFyIGFwaSA9IHtcbiAgb3Blbjogbm90aWNlLFxuICBjb25maWc6IHNldE1lc3NhZ2VDb25maWcsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kobWVzc2FnZUtleSkge1xuICAgIGlmIChtZXNzYWdlSW5zdGFuY2UpIHtcbiAgICAgIGlmIChtZXNzYWdlS2V5KSB7XG4gICAgICAgIHZhciBfbWVzc2FnZUluc3RhbmNlID0gbWVzc2FnZUluc3RhbmNlLFxuICAgICAgICAgIHJlbW92ZU5vdGljZSA9IF9tZXNzYWdlSW5zdGFuY2UucmVtb3ZlTm90aWNlO1xuICAgICAgICByZW1vdmVOb3RpY2UobWVzc2FnZUtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX21lc3NhZ2VJbnN0YW5jZTIgPSBtZXNzYWdlSW5zdGFuY2UsXG4gICAgICAgICAgZGVzdHJveSA9IF9tZXNzYWdlSW5zdGFuY2UyLmRlc3Ryb3k7XG4gICAgICAgIGRlc3Ryb3koKTtcbiAgICAgICAgbWVzc2FnZUluc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBhdHRhY2hUeXBlQXBpKG9yaWdpbmFsQXBpLCB0eXBlKSB7XG4gIG9yaWdpbmFsQXBpW3R5cGVdID0gZnVuY3Rpb24gKGNvbnRlbnQsIGR1cmF0aW9uLCBvbkNsb3NlKSB7XG4gICAgaWYgKGlzQXJnc1Byb3BzKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxBcGkub3BlbigoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBjb250ZW50KSwge1xuICAgICAgICB0eXBlOiB0eXBlXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uQ2xvc2UgPSBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ2luYWxBcGkub3Blbih7XG4gICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2VcbiAgICB9KTtcbiAgfTtcbn1cbnR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIGF0dGFjaFR5cGVBcGkoYXBpLCB0eXBlKTtcbn0pO1xuYXBpLndhcm4gPSBhcGkud2FybmluZztcbmFwaS51c2VNZXNzYWdlID0gKDAsIF91c2VNZXNzYWdlW1wiZGVmYXVsdFwiXSkoZ2V0UkNOb3RpZmljYXRpb25JbnN0YW5jZSwgZ2V0UkNOb3RpY2VQcm9wcyk7XG4vKiogQGludGVybmFsIHRlc3QgT25seSBmdW5jdGlvbi4gTm90IHdvcmsgb24gcHJvZHVjdGlvbiAqL1xudmFyIGdldEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnID8gbWVzc2FnZUluc3RhbmNlIDogbnVsbDtcbn07XG5leHBvcnRzLmdldEluc3RhbmNlID0gZ2V0SW5zdGFuY2U7XG52YXIgX2RlZmF1bHQgPSBhcGk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mMyA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG5leHBvcnRzLmdldFNlY29uZGFyeUNvbG9yID0gZ2V0U2Vjb25kYXJ5Q29sb3I7XG5leHBvcnRzLmljb25TdHlsZXMgPSB2b2lkIDA7XG5leHBvcnRzLmlzSWNvbkRlZmluaXRpb24gPSBpc0ljb25EZWZpbml0aW9uO1xuZXhwb3J0cy5ub3JtYWxpemVBdHRycyA9IG5vcm1hbGl6ZUF0dHJzO1xuZXhwb3J0cy5ub3JtYWxpemVUd29Ub25lQ29sb3JzID0gbm9ybWFsaXplVHdvVG9uZUNvbG9ycztcbmV4cG9ydHMudXNlSW5zZXJ0U3R5bGVzID0gZXhwb3J0cy5zdmdCYXNlUHJvcHMgPSB2b2lkIDA7XG5leHBvcnRzLndhcm5pbmcgPSB3YXJuaW5nO1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcbnZhciBfY29sb3JzID0gcmVxdWlyZShcIkBhbnQtZGVzaWduL2NvbG9yc1wiKTtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvd2FybmluZ1wiKSk7XG52YXIgX2R5bmFtaWNDU1MgPSByZXF1aXJlKFwicmMtdXRpbC9saWIvRG9tL2R5bmFtaWNDU1NcIik7XG52YXIgX0NvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvQ29udGV4dFwiKSk7XG52YXIgX2NhbWVsQ2FzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9jYW1lbENhc2VcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZjMob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5mdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBtZXNzYWdlKSB7XG4gICgwLCBfd2FybmluZy5kZWZhdWx0KSh2YWxpZCwgXCJbQGFudC1kZXNpZ24vaWNvbnNdIFwiLmNvbmNhdChtZXNzYWdlKSk7XG59XG5mdW5jdGlvbiBpc0ljb25EZWZpbml0aW9uKHRhcmdldCkge1xuICByZXR1cm4gKDAsIF90eXBlb2YyLmRlZmF1bHQpKHRhcmdldCkgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQubmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHRhcmdldC50aGVtZSA9PT0gJ3N0cmluZycgJiYgKCgwLCBfdHlwZW9mMi5kZWZhdWx0KSh0YXJnZXQuaWNvbikgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVBdHRycygpIHtcbiAgdmFyIGF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgdmFyIHZhbCA9IGF0dHJzW2tleV07XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2NsYXNzJzpcbiAgICAgICAgYWNjLmNsYXNzTmFtZSA9IHZhbDtcbiAgICAgICAgZGVsZXRlIGFjYy5jbGFzcztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBkZWxldGUgYWNjW2tleV07XG4gICAgICAgIGFjY1soMCwgX2NhbWVsQ2FzZS5kZWZhdWx0KShrZXkpXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSwga2V5LCByb290UHJvcHMpIHtcbiAgaWYgKCFyb290UHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQobm9kZS50YWcsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIG5vcm1hbGl6ZUF0dHJzKG5vZGUuYXR0cnMpKSwgKG5vZGUuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gZ2VuZXJhdGUoY2hpbGQsIFwiXCIuY29uY2F0KGtleSwgXCItXCIpLmNvbmNhdChub2RlLnRhZywgXCItXCIpLmNvbmNhdChpbmRleCkpO1xuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQobm9kZS50YWcsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSgoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe1xuICAgIGtleToga2V5XG4gIH0sIG5vcm1hbGl6ZUF0dHJzKG5vZGUuYXR0cnMpKSwgcm9vdFByb3BzKSwgKG5vZGUuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlKGNoaWxkLCBcIlwiLmNvbmNhdChrZXksIFwiLVwiKS5jb25jYXQobm9kZS50YWcsIFwiLVwiKS5jb25jYXQoaW5kZXgpKTtcbiAgfSkpO1xufVxuZnVuY3Rpb24gZ2V0U2Vjb25kYXJ5Q29sb3IocHJpbWFyeUNvbG9yKSB7XG4gIC8vIGNob29zZSB0aGUgc2Vjb25kIGNvbG9yXG4gIHJldHVybiAoMCwgX2NvbG9ycy5nZW5lcmF0ZSkocHJpbWFyeUNvbG9yKVswXTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnModHdvVG9uZUNvbG9yKSB7XG4gIGlmICghdHdvVG9uZUNvbG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHR3b1RvbmVDb2xvcikgPyB0d29Ub25lQ29sb3IgOiBbdHdvVG9uZUNvbG9yXTtcbn1cbi8vIFRoZXNlIHByb3BzIG1ha2Ugc3VyZSB0aGF0IHRoZSBTVkcgYmVoYXZpb3VycyBsaWtlIGdlbmVyYWwgdGV4dC5cbi8vIFJlZmVyZW5jZTogaHR0cHM6Ly9ibG9nLnByb3RvdHlwci5pby9hbGlnbi1zdmctaWNvbnMtdG8tdGV4dC1hbmQtc2F5LWdvb2RieWUtdG8tZm9udC1pY29ucy1kNDRiM2Q3YjI2YjRcbnZhciBzdmdCYXNlUHJvcHMgPSB7XG4gIHdpZHRoOiAnMWVtJyxcbiAgaGVpZ2h0OiAnMWVtJyxcbiAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgZm9jdXNhYmxlOiAnZmFsc2UnXG59O1xuZXhwb3J0cy5zdmdCYXNlUHJvcHMgPSBzdmdCYXNlUHJvcHM7XG52YXIgaWNvblN0eWxlcyA9IFwiXFxuLmFudGljb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjEyNWVtO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuLmFudGljb24gPiAqIHtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG4uYW50aWNvbiBzdmcge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uYW50aWNvbjo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5hbnRpY29uIC5hbnRpY29uLWljb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5hbnRpY29uW3RhYmluZGV4XSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5hbnRpY29uLXNwaW46OmJlZm9yZSxcXG4uYW50aWNvbi1zcGluIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBsb2FkaW5nQ2lyY2xlIDFzIGluZmluaXRlIGxpbmVhcjtcXG4gIGFuaW1hdGlvbjogbG9hZGluZ0NpcmNsZSAxcyBpbmZpbml0ZSBsaW5lYXI7XFxufVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBsb2FkaW5nQ2lyY2xlIHtcXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgbG9hZGluZ0NpcmNsZSB7XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgfVxcbn1cXG5cIjtcbmV4cG9ydHMuaWNvblN0eWxlcyA9IGljb25TdHlsZXM7XG52YXIgdXNlSW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gdXNlSW5zZXJ0U3R5bGVzKCkge1xuICB2YXIgc3R5bGVTdHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGljb25TdHlsZXM7XG4gIHZhciBfdXNlQ29udGV4dCA9ICgwLCBfcmVhY3QudXNlQ29udGV4dCkoX0NvbnRleHQuZGVmYXVsdCksXG4gICAgY3NwID0gX3VzZUNvbnRleHQuY3NwO1xuICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgICgwLCBfZHluYW1pY0NTUy51cGRhdGVDU1MpKHN0eWxlU3RyLCAnQGFudC1kZXNpZ24taWNvbnMnLCB7XG4gICAgICBwcmVwZW5kOiB0cnVlLFxuICAgICAgY3NwOiBjc3BcbiAgICB9KTtcbiAgfSwgW10pO1xufTtcbmV4cG9ydHMudXNlSW5zZXJ0U3R5bGVzID0gdXNlSW5zZXJ0U3R5bGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKS5kZWZhdWx0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xlYXJDb250YWluZXJDYWNoZSA9IGNsZWFyQ29udGFpbmVyQ2FjaGU7XG5leHBvcnRzLmluamVjdENTUyA9IGluamVjdENTUztcbmV4cG9ydHMucmVtb3ZlQ1NTID0gcmVtb3ZlQ1NTO1xuZXhwb3J0cy51cGRhdGVDU1MgPSB1cGRhdGVDU1M7XG52YXIgX2NhblVzZURvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY2FuVXNlRG9tXCIpKTtcbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnRhaW5zXCIpKTtcbnZhciBBUFBFTkRfT1JERVIgPSAnZGF0YS1yYy1vcmRlcic7XG52YXIgQVBQRU5EX1BSSU9SSVRZID0gJ2RhdGEtcmMtcHJpb3JpdHknO1xudmFyIE1BUktfS0VZID0gXCJyYy11dGlsLWtleVwiO1xudmFyIGNvbnRhaW5lckNhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWFyaygpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgIG1hcmsgPSBfcmVmLm1hcms7XG4gIGlmIChtYXJrKSB7XG4gICAgcmV0dXJuIG1hcmsuc3RhcnRzV2l0aCgnZGF0YS0nKSA/IG1hcmsgOiBcImRhdGEtXCIuY29uY2F0KG1hcmspO1xuICB9XG4gIHJldHVybiBNQVJLX0tFWTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi5hdHRhY2hUbykge1xuICAgIHJldHVybiBvcHRpb24uYXR0YWNoVG87XG4gIH1cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gIHJldHVybiBoZWFkIHx8IGRvY3VtZW50LmJvZHk7XG59XG5mdW5jdGlvbiBnZXRPcmRlcihwcmVwZW5kKSB7XG4gIGlmIChwcmVwZW5kID09PSAncXVldWUnKSB7XG4gICAgcmV0dXJuICdwcmVwZW5kUXVldWUnO1xuICB9XG4gIHJldHVybiBwcmVwZW5kID8gJ3ByZXBlbmQnIDogJ2FwcGVuZCc7XG59XG5cbi8qKlxuICogRmluZCBzdHlsZSB3aGljaCBpbmplY3QgYnkgcmMtdXRpbFxuICovXG5mdW5jdGlvbiBmaW5kU3R5bGVzKGNvbnRhaW5lcikge1xuICByZXR1cm4gQXJyYXkuZnJvbSgoY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcikgfHwgY29udGFpbmVyKS5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ1NUWUxFJztcbiAgfSk7XG59XG5mdW5jdGlvbiBpbmplY3RDU1MoY3NzKSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBpZiAoISgwLCBfY2FuVXNlRG9tLmRlZmF1bHQpKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgY3NwID0gb3B0aW9uLmNzcCxcbiAgICBwcmVwZW5kID0gb3B0aW9uLnByZXBlbmQsXG4gICAgX29wdGlvbiRwcmlvcml0eSA9IG9wdGlvbi5wcmlvcml0eSxcbiAgICBwcmlvcml0eSA9IF9vcHRpb24kcHJpb3JpdHkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9uJHByaW9yaXR5O1xuICB2YXIgbWVyZ2VkT3JkZXIgPSBnZXRPcmRlcihwcmVwZW5kKTtcbiAgdmFyIGlzUHJlcGVuZFF1ZXVlID0gbWVyZ2VkT3JkZXIgPT09ICdwcmVwZW5kUXVldWUnO1xuICB2YXIgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGVOb2RlLnNldEF0dHJpYnV0ZShBUFBFTkRfT1JERVIsIG1lcmdlZE9yZGVyKTtcbiAgaWYgKGlzUHJlcGVuZFF1ZXVlICYmIHByaW9yaXR5KSB7XG4gICAgc3R5bGVOb2RlLnNldEF0dHJpYnV0ZShBUFBFTkRfUFJJT1JJVFksIFwiXCIuY29uY2F0KHByaW9yaXR5KSk7XG4gIH1cbiAgaWYgKGNzcCAhPT0gbnVsbCAmJiBjc3AgIT09IHZvaWQgMCAmJiBjc3Aubm9uY2UpIHtcbiAgICBzdHlsZU5vZGUubm9uY2UgPSBjc3AgPT09IG51bGwgfHwgY3NwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjc3Aubm9uY2U7XG4gIH1cbiAgc3R5bGVOb2RlLmlubmVySFRNTCA9IGNzcztcbiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICB2YXIgZmlyc3RDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICBpZiAocHJlcGVuZCkge1xuICAgIC8vIElmIGlzIHF1ZXVlIGBwcmVwZW5kYCwgaXQgd2lsbCBwcmVwZW5kIGZpcnN0IHN0eWxlIGFuZCB0aGVuIGFwcGVuZCByZXN0IHN0eWxlXG4gICAgaWYgKGlzUHJlcGVuZFF1ZXVlKSB7XG4gICAgICB2YXIgZXhpc3RTdHlsZSA9IGZpbmRTdHlsZXMoY29udGFpbmVyKS5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gSWdub3JlIHN0eWxlIHdoaWNoIG5vdCBpbmplY3RlZCBieSByYy11dGlsIHdpdGggcHJlcGVuZFxuICAgICAgICBpZiAoIVsncHJlcGVuZCcsICdwcmVwZW5kUXVldWUnXS5pbmNsdWRlcyhub2RlLmdldEF0dHJpYnV0ZShBUFBFTkRfT1JERVIpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElnbm9yZSBzdHlsZSB3aGljaCBwcmlvcml0eSBsZXNzIHRoZW4gbmV3IHN0eWxlXG4gICAgICAgIHZhciBub2RlUHJpb3JpdHkgPSBOdW1iZXIobm9kZS5nZXRBdHRyaWJ1dGUoQVBQRU5EX1BSSU9SSVRZKSB8fCAwKTtcbiAgICAgICAgcmV0dXJuIHByaW9yaXR5ID49IG5vZGVQcmlvcml0eTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGV4aXN0U3R5bGUubGVuZ3RoKSB7XG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBleGlzdFN0eWxlW2V4aXN0U3R5bGUubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmcpO1xuICAgICAgICByZXR1cm4gc3R5bGVOb2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVzZSBgaW5zZXJ0QmVmb3JlYCBhcyBgcHJlcGVuZGBcbiAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHN0eWxlTm9kZSwgZmlyc3RDaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHN0eWxlTm9kZSk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlTm9kZTtcbn1cbmZ1bmN0aW9uIGZpbmRFeGlzdE5vZGUoa2V5KSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbik7XG4gIHJldHVybiBmaW5kU3R5bGVzKGNvbnRhaW5lcikuZmluZChmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZShnZXRNYXJrKG9wdGlvbikpID09PSBrZXk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVtb3ZlQ1NTKGtleSkge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIGV4aXN0Tm9kZSA9IGZpbmRFeGlzdE5vZGUoa2V5LCBvcHRpb24pO1xuICBpZiAoZXhpc3ROb2RlKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChleGlzdE5vZGUpO1xuICB9XG59XG5cbi8qKlxuICogcWlhbmt1biB3aWxsIGluamVjdCBgYXBwZW5kQ2hpbGRgIHRvIGluc2VydCBpbnRvIG90aGVyXG4gKi9cbmZ1bmN0aW9uIHN5bmNSZWFsQ29udGFpbmVyKGNvbnRhaW5lciwgb3B0aW9uKSB7XG4gIHZhciBjYWNoZWRSZWFsQ29udGFpbmVyID0gY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcik7XG5cbiAgLy8gRmluZCByZWFsIGNvbnRhaW5lciB3aGVuIG5vdCBjYWNoZWQgb3IgY2FjaGVkIGNvbnRhaW5lciByZW1vdmVkXG4gIGlmICghY2FjaGVkUmVhbENvbnRhaW5lciB8fCAhKDAsIF9jb250YWlucy5kZWZhdWx0KShkb2N1bWVudCwgY2FjaGVkUmVhbENvbnRhaW5lcikpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXJTdHlsZSA9IGluamVjdENTUygnJywgb3B0aW9uKTtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHBsYWNlaG9sZGVyU3R5bGUucGFyZW50Tm9kZTtcbiAgICBjb250YWluZXJDYWNoZS5zZXQoY29udGFpbmVyLCBwYXJlbnROb2RlKTtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQocGxhY2Vob2xkZXJTdHlsZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBtYW51YWxseSBjbGVhciBjb250YWluZXIgY2FjaGUgdG8gYXZvaWQgZ2xvYmFsIGNhY2hlIGluIHVuaXQgdGVzdGVzXG4gKi9cbmZ1bmN0aW9uIGNsZWFyQ29udGFpbmVyQ2FjaGUoKSB7XG4gIGNvbnRhaW5lckNhY2hlLmNsZWFyKCk7XG59XG5mdW5jdGlvbiB1cGRhdGVDU1MoY3NzLCBrZXkpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9uKTtcblxuICAvLyBTeW5jIHJlYWwgcGFyZW50XG4gIHN5bmNSZWFsQ29udGFpbmVyKGNvbnRhaW5lciwgb3B0aW9uKTtcbiAgdmFyIGV4aXN0Tm9kZSA9IGZpbmRFeGlzdE5vZGUoa2V5LCBvcHRpb24pO1xuICBpZiAoZXhpc3ROb2RlKSB7XG4gICAgdmFyIF9vcHRpb24kY3NwLCBfb3B0aW9uJGNzcDI7XG4gICAgaWYgKChfb3B0aW9uJGNzcCA9IG9wdGlvbi5jc3ApICE9PSBudWxsICYmIF9vcHRpb24kY3NwICE9PSB2b2lkIDAgJiYgX29wdGlvbiRjc3Aubm9uY2UgJiYgZXhpc3ROb2RlLm5vbmNlICE9PSAoKF9vcHRpb24kY3NwMiA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AyLm5vbmNlKSkge1xuICAgICAgdmFyIF9vcHRpb24kY3NwMztcbiAgICAgIGV4aXN0Tm9kZS5ub25jZSA9IChfb3B0aW9uJGNzcDMgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb24kY3NwMy5ub25jZTtcbiAgICB9XG4gICAgaWYgKGV4aXN0Tm9kZS5pbm5lckhUTUwgIT09IGNzcykge1xuICAgICAgZXhpc3ROb2RlLmlubmVySFRNTCA9IGNzcztcbiAgICB9XG4gICAgcmV0dXJuIGV4aXN0Tm9kZTtcbiAgfVxuICB2YXIgbmV3Tm9kZSA9IGluamVjdENTUyhjc3MsIG9wdGlvbik7XG4gIG5ld05vZGUuc2V0QXR0cmlidXRlKGdldE1hcmsob3B0aW9uKSwga2V5KTtcbiAgcmV0dXJuIG5ld05vZGU7XG59IiwiJ3VzZSBzdHJpY3QnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBcbiAgdmFyIF9Mb2FkaW5nT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vbGliL2ljb25zL0xvYWRpbmdPdXRsaW5lZCcpKTtcbiAgXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cbiAgXG4gIHZhciBfZGVmYXVsdCA9IF9Mb2FkaW5nT3V0bGluZWQ7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuICBtb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjaywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZShcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiKTtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHRvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2YuanNcIik7XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL2dldFByb3RvdHlwZU9mLmpzXCIpO1xudmFyIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IHJlcXVpcmUoXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiKTtcbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gcmVxdWlyZShcIi4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1wiKTtcbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7XG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBnZXRQcm90b3R5cGVPZihEZXJpdmVkKSxcbiAgICAgIHJlc3VsdDtcbiAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IGdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZVN1cGVyLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG52YXIgX1Jvd0NvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Jvd0NvbnRleHRcIikpO1xudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbmZ1bmN0aW9uIHBhcnNlRmxleChmbGV4KSB7XG4gIGlmICh0eXBlb2YgZmxleCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoZmxleCwgXCIgXCIpLmNvbmNhdChmbGV4LCBcIiBhdXRvXCIpO1xuICB9XG4gIGlmICgvXlxcZCsoXFwuXFxkKyk/KHB4fGVtfHJlbXwlKSQvLnRlc3QoZmxleCkpIHtcbiAgICByZXR1cm4gXCIwIDAgXCIuY29uY2F0KGZsZXgpO1xuICB9XG4gIHJldHVybiBmbGV4O1xufVxudmFyIHNpemVzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsICd4eGwnXTtcbnZhciBDb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb24gPSBfUmVhY3QkdXNlQ29udGV4dC5kaXJlY3Rpb247XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dDIgPSBSZWFjdC51c2VDb250ZXh0KF9Sb3dDb250ZXh0W1wiZGVmYXVsdFwiXSksXG4gICAgZ3V0dGVyID0gX1JlYWN0JHVzZUNvbnRleHQyLmd1dHRlcixcbiAgICB3cmFwID0gX1JlYWN0JHVzZUNvbnRleHQyLndyYXAsXG4gICAgc3VwcG9ydEZsZXhHYXAgPSBfUmVhY3QkdXNlQ29udGV4dDIuc3VwcG9ydEZsZXhHYXA7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgc3BhbiA9IHByb3BzLnNwYW4sXG4gICAgb3JkZXIgPSBwcm9wcy5vcmRlcixcbiAgICBvZmZzZXQgPSBwcm9wcy5vZmZzZXQsXG4gICAgcHVzaCA9IHByb3BzLnB1c2gsXG4gICAgcHVsbCA9IHByb3BzLnB1bGwsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgZmxleCA9IHByb3BzLmZsZXgsXG4gICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICBvdGhlcnMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcInNwYW5cIiwgXCJvcmRlclwiLCBcIm9mZnNldFwiLCBcInB1c2hcIiwgXCJwdWxsXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJmbGV4XCIsIFwic3R5bGVcIl0pO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjb2wnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgc2l6ZUNsYXNzT2JqID0ge307XG4gIHNpemVzLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuICAgIHZhciBzaXplUHJvcHMgPSB7fTtcbiAgICB2YXIgcHJvcFNpemUgPSBwcm9wc1tzaXplXTtcbiAgICBpZiAodHlwZW9mIHByb3BTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgc2l6ZVByb3BzLnNwYW4gPSBwcm9wU2l6ZTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKHByb3BTaXplKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHNpemVQcm9wcyA9IHByb3BTaXplIHx8IHt9O1xuICAgIH1cbiAgICBkZWxldGUgb3RoZXJzW3NpemVdO1xuICAgIHNpemVDbGFzc09iaiA9ICgwLCBfZXh0ZW5kczNbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMzW1wiZGVmYXVsdFwiXSkoe30sIHNpemVDbGFzc09iaiksIChfZXh0ZW5kczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1cIikuY29uY2F0KHNpemVQcm9wcy5zcGFuKSwgc2l6ZVByb3BzLnNwYW4gIT09IHVuZGVmaW5lZCksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2V4dGVuZHMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSwgXCItb3JkZXItXCIpLmNvbmNhdChzaXplUHJvcHMub3JkZXIpLCBzaXplUHJvcHMub3JkZXIgfHwgc2l6ZVByb3BzLm9yZGVyID09PSAwKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1vZmZzZXQtXCIpLmNvbmNhdChzaXplUHJvcHMub2Zmc2V0KSwgc2l6ZVByb3BzLm9mZnNldCB8fCBzaXplUHJvcHMub2Zmc2V0ID09PSAwKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfZXh0ZW5kczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplLCBcIi1wdXNoLVwiKS5jb25jYXQoc2l6ZVByb3BzLnB1c2gpLCBzaXplUHJvcHMucHVzaCB8fCBzaXplUHJvcHMucHVzaCA9PT0gMCksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2V4dGVuZHMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSwgXCItcHVsbC1cIikuY29uY2F0KHNpemVQcm9wcy5wdWxsKSwgc2l6ZVByb3BzLnB1bGwgfHwgc2l6ZVByb3BzLnB1bGwgPT09IDApLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9leHRlbmRzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCBfZXh0ZW5kczIpKTtcbiAgfSk7XG4gIHZhciBjbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHNwYW4pLCBzcGFuICE9PSB1bmRlZmluZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW9yZGVyLVwiKS5jb25jYXQob3JkZXIpLCBvcmRlciksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItb2Zmc2V0LVwiKS5jb25jYXQob2Zmc2V0KSwgb2Zmc2V0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wdXNoLVwiKS5jb25jYXQocHVzaCksIHB1c2gpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXB1bGwtXCIpLmNvbmNhdChwdWxsKSwgcHVsbCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lLCBzaXplQ2xhc3NPYmopO1xuICB2YXIgbWVyZ2VkU3R5bGUgPSB7fTtcbiAgLy8gSG9yaXpvbnRhbCBndXR0ZXIgdXNlIHBhZGRpbmdcbiAgaWYgKGd1dHRlciAmJiBndXR0ZXJbMF0gPiAwKSB7XG4gICAgdmFyIGhvcml6b250YWxHdXR0ZXIgPSBndXR0ZXJbMF0gLyAyO1xuICAgIG1lcmdlZFN0eWxlLnBhZGRpbmdMZWZ0ID0gaG9yaXpvbnRhbEd1dHRlcjtcbiAgICBtZXJnZWRTdHlsZS5wYWRkaW5nUmlnaHQgPSBob3Jpem9udGFsR3V0dGVyO1xuICB9XG4gIC8vIFZlcnRpY2FsIGd1dHRlciB1c2UgcGFkZGluZyB3aGVuIGdhcCBub3Qgc3VwcG9ydFxuICBpZiAoZ3V0dGVyICYmIGd1dHRlclsxXSA+IDAgJiYgIXN1cHBvcnRGbGV4R2FwKSB7XG4gICAgdmFyIHZlcnRpY2FsR3V0dGVyID0gZ3V0dGVyWzFdIC8gMjtcbiAgICBtZXJnZWRTdHlsZS5wYWRkaW5nVG9wID0gdmVydGljYWxHdXR0ZXI7XG4gICAgbWVyZ2VkU3R5bGUucGFkZGluZ0JvdHRvbSA9IHZlcnRpY2FsR3V0dGVyO1xuICB9XG4gIGlmIChmbGV4KSB7XG4gICAgbWVyZ2VkU3R5bGUuZmxleCA9IHBhcnNlRmxleChmbGV4KTtcbiAgICAvLyBIYWNrIGZvciBGaXJlZm94IHRvIGF2b2lkIHNpemUgaXNzdWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL3B1bGwvMjAwMjMjaXNzdWVjb21tZW50LTU2NDM4OTU1M1xuICAgIGlmICh3cmFwID09PSBmYWxzZSAmJiAhbWVyZ2VkU3R5bGUubWluV2lkdGgpIHtcbiAgICAgIG1lcmdlZFN0eWxlLm1pbldpZHRoID0gMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczNbXCJkZWZhdWx0XCJdKSh7fSwgb3RoZXJzLCB7XG4gICAgc3R5bGU6ICgwLCBfZXh0ZW5kczNbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMzW1wiZGVmYXVsdFwiXSkoe30sIG1lcmdlZFN0eWxlKSwgc3R5bGUpLFxuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICByZWY6IHJlZlxuICB9KSwgY2hpbGRyZW4pO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDb2wuZGlzcGxheU5hbWUgPSAnQ29sJztcbn1cbnZhciBfZGVmYXVsdCA9IENvbDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlQ29tcGFjdEl0ZW1Db250ZXh0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLlNwYWNlQ29tcGFjdEl0ZW1Db250ZXh0ID0gZXhwb3J0cy5Ob0NvbXBhY3RTdHlsZSA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIF90b0FycmF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvQ2hpbGRyZW4vdG9BcnJheVwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xudmFyIFNwYWNlQ29tcGFjdEl0ZW1Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnRzLlNwYWNlQ29tcGFjdEl0ZW1Db250ZXh0ID0gU3BhY2VDb21wYWN0SXRlbUNvbnRleHQ7XG52YXIgdXNlQ29tcGFjdEl0ZW1Db250ZXh0ID0gZnVuY3Rpb24gdXNlQ29tcGFjdEl0ZW1Db250ZXh0KHByZWZpeENscywgZGlyZWN0aW9uKSB7XG4gIHZhciBjb21wYWN0SXRlbUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFNwYWNlQ29tcGFjdEl0ZW1Db250ZXh0KTtcbiAgdmFyIGNvbXBhY3RJdGVtQ2xhc3NuYW1lcyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY2xhc3NOYW1lcztcbiAgICBpZiAoIWNvbXBhY3RJdGVtQ29udGV4dCkgcmV0dXJuICcnO1xuICAgIHZhciBjb21wYWN0RGlyZWN0aW9uID0gY29tcGFjdEl0ZW1Db250ZXh0LmNvbXBhY3REaXJlY3Rpb24sXG4gICAgICBpc0ZpcnN0SXRlbSA9IGNvbXBhY3RJdGVtQ29udGV4dC5pc0ZpcnN0SXRlbSxcbiAgICAgIGlzTGFzdEl0ZW0gPSBjb21wYWN0SXRlbUNvbnRleHQuaXNMYXN0SXRlbTtcbiAgICB2YXIgc2VwYXJhdG9yID0gY29tcGFjdERpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/ICctdmVydGljYWwtJyA6ICctJztcbiAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKS5jb25jYXQoc2VwYXJhdG9yLCBcIml0ZW1cIiksIHRydWUpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbXBhY3RcIikuY29uY2F0KHNlcGFyYXRvciwgXCJmaXJzdC1pdGVtXCIpLCBpc0ZpcnN0SXRlbSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKS5jb25jYXQoc2VwYXJhdG9yLCBcImxhc3QtaXRlbVwiKSwgaXNMYXN0SXRlbSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKS5jb25jYXQoc2VwYXJhdG9yLCBcIml0ZW0tcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpKTtcbiAgfSwgW3ByZWZpeENscywgZGlyZWN0aW9uLCBjb21wYWN0SXRlbUNvbnRleHRdKTtcbiAgcmV0dXJuIHtcbiAgICBjb21wYWN0U2l6ZTogY29tcGFjdEl0ZW1Db250ZXh0ID09PSBudWxsIHx8IGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGFjdEl0ZW1Db250ZXh0LmNvbXBhY3RTaXplLFxuICAgIGNvbXBhY3REaXJlY3Rpb246IGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gbnVsbCB8fCBjb21wYWN0SXRlbUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBhY3RJdGVtQ29udGV4dC5jb21wYWN0RGlyZWN0aW9uLFxuICAgIGNvbXBhY3RJdGVtQ2xhc3NuYW1lczogY29tcGFjdEl0ZW1DbGFzc25hbWVzXG4gIH07XG59O1xuZXhwb3J0cy51c2VDb21wYWN0SXRlbUNvbnRleHQgPSB1c2VDb21wYWN0SXRlbUNvbnRleHQ7XG52YXIgTm9Db21wYWN0U3R5bGUgPSBmdW5jdGlvbiBOb0NvbXBhY3RTdHlsZShfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTcGFjZUNvbXBhY3RJdGVtQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIGNoaWxkcmVuKTtcbn07XG5leHBvcnRzLk5vQ29tcGFjdFN0eWxlID0gTm9Db21wYWN0U3R5bGU7XG52YXIgQ29tcGFjdEl0ZW0gPSBmdW5jdGlvbiBDb21wYWN0SXRlbShfYSkge1xuICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICBvdGhlclByb3BzID0gX19yZXN0KF9hLCBbXCJjaGlsZHJlblwiXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTcGFjZUNvbXBhY3RJdGVtQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBvdGhlclByb3BzXG4gIH0sIGNoaWxkcmVuKTtcbn07XG52YXIgQ29tcGFjdCA9IGZ1bmN0aW9uIENvbXBhY3QocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzMjtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbkNvbmZpZyA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtaWRkbGUnIDogX3Byb3BzJHNpemUsXG4gICAgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgIGJsb2NrID0gcHJvcHMuYmxvY2ssXG4gICAgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wic2l6ZVwiLCBcImRpcmVjdGlvblwiLCBcImJsb2NrXCIsIFwicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdzcGFjZS1jb21wYWN0JywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIGNseCA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHByZWZpeENscywgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbkNvbmZpZyA9PT0gJ3J0bCcpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ibG9ja1wiKSwgYmxvY2spLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi12ZXJ0aWNhbFwiKSwgZGlyZWN0aW9uID09PSAndmVydGljYWwnKSwgX2NsYXNzTmFtZXMyKSwgY2xhc3NOYW1lKTtcbiAgdmFyIGNvbXBhY3RJdGVtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoU3BhY2VDb21wYWN0SXRlbUNvbnRleHQpO1xuICB2YXIgY2hpbGROb2RlcyA9ICgwLCBfdG9BcnJheVtcImRlZmF1bHRcIl0pKGNoaWxkcmVuKTtcbiAgdmFyIG5vZGVzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoaWxkTm9kZXMubWFwKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgdmFyIGtleSA9IGNoaWxkICYmIGNoaWxkLmtleSB8fCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tXCIpLmNvbmNhdChpKTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wYWN0SXRlbSwge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgY29tcGFjdFNpemU6IHNpemUsXG4gICAgICAgIGNvbXBhY3REaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgaXNGaXJzdEl0ZW06IGkgPT09IDAgJiYgKCFjb21wYWN0SXRlbUNvbnRleHQgfHwgKGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gbnVsbCB8fCBjb21wYWN0SXRlbUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBhY3RJdGVtQ29udGV4dC5pc0ZpcnN0SXRlbSkpLFxuICAgICAgICBpc0xhc3RJdGVtOiBpID09PSBjaGlsZE5vZGVzLmxlbmd0aCAtIDEgJiYgKCFjb21wYWN0SXRlbUNvbnRleHQgfHwgKGNvbXBhY3RJdGVtQ29udGV4dCA9PT0gbnVsbCB8fCBjb21wYWN0SXRlbUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBhY3RJdGVtQ29udGV4dC5pc0xhc3RJdGVtKSlcbiAgICAgIH0sIGNoaWxkKTtcbiAgICB9KTtcbiAgfSwgW3NpemUsIGNoaWxkTm9kZXMsIGNvbXBhY3RJdGVtQ29udGV4dF0pO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBpZiAoY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICBjbGFzc05hbWU6IGNseFxuICB9LCByZXN0UHJvcHMpLCBub2Rlcyk7XG59O1xudmFyIF9kZWZhdWx0ID0gQ29tcGFjdDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldE1lcmdlZFN0YXR1cyA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0U3RhdHVzQ2xhc3NOYW1lcyA9IGdldFN0YXR1c0NsYXNzTmFtZXM7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3R5cGUgPSByZXF1aXJlKFwiLi90eXBlXCIpO1xudmFyIElucHV0U3RhdHVzZXMgPSAoMCwgX3R5cGUudHVwbGUpKCd3YXJuaW5nJywgJ2Vycm9yJywgJycpO1xuZnVuY3Rpb24gZ2V0U3RhdHVzQ2xhc3NOYW1lcyhwcmVmaXhDbHMsIHN0YXR1cywgaGFzRmVlZGJhY2spIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICByZXR1cm4gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc3RhdHVzLXN1Y2Nlc3NcIiksIHN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zdGF0dXMtd2FybmluZ1wiKSwgc3RhdHVzID09PSAnd2FybmluZycpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXN0YXR1cy1lcnJvclwiKSwgc3RhdHVzID09PSAnZXJyb3InKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zdGF0dXMtdmFsaWRhdGluZ1wiKSwgc3RhdHVzID09PSAndmFsaWRhdGluZycpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhhcy1mZWVkYmFja1wiKSwgaGFzRmVlZGJhY2spLCBfY2xhc3NOYW1lcykpO1xufVxudmFyIGdldE1lcmdlZFN0YXR1cyA9IGZ1bmN0aW9uIGdldE1lcmdlZFN0YXR1cyhjb250ZXh0U3RhdHVzLCBjdXN0b21TdGF0dXMpIHtcbiAgcmV0dXJuIGN1c3RvbVN0YXR1cyB8fCBjb250ZXh0U3RhdHVzO1xufTtcbmV4cG9ydHMuZ2V0TWVyZ2VkU3RhdHVzID0gZ2V0TWVyZ2VkU3RhdHVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYWxsID0gY2FsbDtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmV4cG9ydHMubm90ZSA9IG5vdGU7XG5leHBvcnRzLm5vdGVPbmNlID0gbm90ZU9uY2U7XG5leHBvcnRzLnByZU1lc3NhZ2UgPSB2b2lkIDA7XG5leHBvcnRzLnJlc2V0V2FybmVkID0gcmVzZXRXYXJuZWQ7XG5leHBvcnRzLndhcm5pbmcgPSB3YXJuaW5nO1xuZXhwb3J0cy53YXJuaW5nT25jZSA9IHdhcm5pbmdPbmNlO1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIHdhcm5lZCA9IHt9O1xudmFyIHByZVdhcm5pbmdGbnMgPSBbXTtcblxuLyoqXG4gKiBQcmUgd2FybmluZyBlbmFibGUgeW91IHRvIHBhcnNlIGNvbnRlbnQgYmVmb3JlIGNvbnNvbGUuZXJyb3IuXG4gKiBNb2RpZnkgdG8gbnVsbCB3aWxsIHByZXZlbnQgd2FybmluZy5cbiAqL1xudmFyIHByZU1lc3NhZ2UgPSBmdW5jdGlvbiBwcmVNZXNzYWdlKGZuKSB7XG4gIHByZVdhcm5pbmdGbnMucHVzaChmbik7XG59O1xuZXhwb3J0cy5wcmVNZXNzYWdlID0gcHJlTWVzc2FnZTtcbmZ1bmN0aW9uIHdhcm5pbmcodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmaW5hbE1lc3NhZ2UgPSBwcmVXYXJuaW5nRm5zLnJlZHVjZShmdW5jdGlvbiAobXNnLCBwcmVNZXNzYWdlRm4pIHtcbiAgICAgIHJldHVybiBwcmVNZXNzYWdlRm4obXNnICE9PSBudWxsICYmIG1zZyAhPT0gdm9pZCAwID8gbXNnIDogJycsICd3YXJuaW5nJyk7XG4gICAgfSwgbWVzc2FnZSk7XG4gICAgaWYgKGZpbmFsTWVzc2FnZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIldhcm5pbmc6IFwiLmNvbmNhdChmaW5hbE1lc3NhZ2UpKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG5vdGUodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmaW5hbE1lc3NhZ2UgPSBwcmVXYXJuaW5nRm5zLnJlZHVjZShmdW5jdGlvbiAobXNnLCBwcmVNZXNzYWdlRm4pIHtcbiAgICAgIHJldHVybiBwcmVNZXNzYWdlRm4obXNnICE9PSBudWxsICYmIG1zZyAhPT0gdm9pZCAwID8gbXNnIDogJycsICdub3RlJyk7XG4gICAgfSwgbWVzc2FnZSk7XG4gICAgaWYgKGZpbmFsTWVzc2FnZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiTm90ZTogXCIuY29uY2F0KGZpbmFsTWVzc2FnZSkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuZnVuY3Rpb24gY2FsbChtZXRob2QsIHZhbGlkLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsaWQgJiYgIXdhcm5lZFttZXNzYWdlXSkge1xuICAgIG1ldGhvZChmYWxzZSwgbWVzc2FnZSk7XG4gICAgd2FybmVkW21lc3NhZ2VdID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gd2FybmluZ09uY2UodmFsaWQsIG1lc3NhZ2UpIHtcbiAgY2FsbCh3YXJuaW5nLCB2YWxpZCwgbWVzc2FnZSk7XG59XG5mdW5jdGlvbiBub3RlT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKG5vdGUsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbndhcm5pbmdPbmNlLnByZU1lc3NhZ2UgPSBwcmVNZXNzYWdlO1xud2FybmluZ09uY2UucmVzZXRXYXJuZWQgPSByZXNldFdhcm5lZDtcbndhcm5pbmdPbmNlLm5vdGVPbmNlID0gbm90ZU9uY2U7XG52YXIgX2RlZmF1bHQgPSB3YXJuaW5nT25jZTtcbi8qIGVzbGludC1lbmFibGUgKi9cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoXCIuL3RvUHJpbWl0aXZlLmpzXCIpO1xuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF90b1Byb3BlcnR5S2V5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRXJyb3JMaXN0O1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIF9yY01vdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyYy1tb3Rpb25cIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9tb3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC9tb3Rpb25cIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dFwiKTtcbnZhciBfdXNlRGVib3VuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hvb2tzL3VzZURlYm91bmNlXCIpKTtcbnZhciBFTVBUWV9MSVNUID0gW107XG5mdW5jdGlvbiB0b0Vycm9yRW50aXR5KGVycm9yLCBlcnJvclN0YXR1cywgcHJlZml4KSB7XG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycgPyBlcnJvciA6IFwiXCIuY29uY2F0KHByZWZpeCwgXCItXCIpLmNvbmNhdChpbmRleCksXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGVycm9yU3RhdHVzOiBlcnJvclN0YXR1c1xuICB9O1xufVxuZnVuY3Rpb24gRXJyb3JMaXN0KF9yZWYpIHtcbiAgdmFyIGhlbHAgPSBfcmVmLmhlbHAsXG4gICAgaGVscFN0YXR1cyA9IF9yZWYuaGVscFN0YXR1cyxcbiAgICBfcmVmJGVycm9ycyA9IF9yZWYuZXJyb3JzLFxuICAgIGVycm9ycyA9IF9yZWYkZXJyb3JzID09PSB2b2lkIDAgPyBFTVBUWV9MSVNUIDogX3JlZiRlcnJvcnMsXG4gICAgX3JlZiR3YXJuaW5ncyA9IF9yZWYud2FybmluZ3MsXG4gICAgd2FybmluZ3MgPSBfcmVmJHdhcm5pbmdzID09PSB2b2lkIDAgPyBFTVBUWV9MSVNUIDogX3JlZiR3YXJuaW5ncyxcbiAgICByb290Q2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgZmllbGRJZCA9IF9yZWYuZmllbGRJZCxcbiAgICBvblZpc2libGVDaGFuZ2VkID0gX3JlZi5vblZpc2libGVDaGFuZ2VkO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KF9jb250ZXh0LkZvcm1JdGVtUHJlZml4Q29udGV4dCksXG4gICAgcHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQucHJlZml4Q2xzO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQyID0gUmVhY3QudXNlQ29udGV4dChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQyLmdldFByZWZpeENscztcbiAgdmFyIGJhc2VDbGFzc05hbWUgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tZXhwbGFpblwiKTtcbiAgdmFyIHJvb3RQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoKTtcbiAgLy8gV2UgaGF2ZSB0byBkZWJvdW5jZSBoZXJlIGFnYWluIHNpbmNlIHNvbWV3aGVyZSB1c2UgRXJyb3JMaXN0IGRpcmVjdGx5IHN0aWxsIG5lZWQgbm8gc2hha2luZ1xuICAvLyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzM2MzM2XG4gIHZhciBkZWJvdW5jZUVycm9ycyA9ICgwLCBfdXNlRGVib3VuY2VbXCJkZWZhdWx0XCJdKShlcnJvcnMpO1xuICB2YXIgZGVib3VuY2VXYXJuaW5ncyA9ICgwLCBfdXNlRGVib3VuY2VbXCJkZWZhdWx0XCJdKSh3YXJuaW5ncyk7XG4gIHZhciBmdWxsS2V5TGlzdCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmIChoZWxwICE9PSB1bmRlZmluZWQgJiYgaGVscCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFt0b0Vycm9yRW50aXR5KGhlbHAsIGhlbHBTdGF0dXMsICdoZWxwJyldO1xuICAgIH1cbiAgICByZXR1cm4gW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoZGVib3VuY2VFcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvciwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB0b0Vycm9yRW50aXR5KGVycm9yLCAnZXJyb3InLCAnZXJyb3InLCBpbmRleCk7XG4gICAgfSkpLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGRlYm91bmNlV2FybmluZ3MubWFwKGZ1bmN0aW9uICh3YXJuaW5nLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHRvRXJyb3JFbnRpdHkod2FybmluZywgJ3dhcm5pbmcnLCAnd2FybmluZycsIGluZGV4KTtcbiAgICB9KSkpO1xuICB9LCBbaGVscCwgaGVscFN0YXR1cywgZGVib3VuY2VFcnJvcnMsIGRlYm91bmNlV2FybmluZ3NdKTtcbiAgdmFyIGhlbHBQcm9wcyA9IHt9O1xuICBpZiAoZmllbGRJZCkge1xuICAgIGhlbHBQcm9wcy5pZCA9IFwiXCIuY29uY2F0KGZpZWxkSWQsIFwiX2hlbHBcIik7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yY01vdGlvbltcImRlZmF1bHRcIl0sIHtcbiAgICBtb3Rpb25EZWFkbGluZTogX21vdGlvbltcImRlZmF1bHRcIl0ubW90aW9uRGVhZGxpbmUsXG4gICAgbW90aW9uTmFtZTogXCJcIi5jb25jYXQocm9vdFByZWZpeENscywgXCItc2hvdy1oZWxwXCIpLFxuICAgIHZpc2libGU6ICEhZnVsbEtleUxpc3QubGVuZ3RoLFxuICAgIG9uVmlzaWJsZUNoYW5nZWQ6IG9uVmlzaWJsZUNoYW5nZWRcbiAgfSwgZnVuY3Rpb24gKGhvbGRlclByb3BzKSB7XG4gICAgdmFyIGhvbGRlckNsYXNzTmFtZSA9IGhvbGRlclByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGhvbGRlclN0eWxlID0gaG9sZGVyUHJvcHMuc3R5bGU7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgaGVscFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKGJhc2VDbGFzc05hbWUsIGhvbGRlckNsYXNzTmFtZSwgcm9vdENsYXNzTmFtZSksXG4gICAgICBzdHlsZTogaG9sZGVyU3R5bGUsXG4gICAgICByb2xlOiBcImFsZXJ0XCJcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjTW90aW9uLkNTU01vdGlvbkxpc3QsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBrZXlzOiBmdWxsS2V5TGlzdFxuICAgIH0sIF9tb3Rpb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICBtb3Rpb25OYW1lOiBcIlwiLmNvbmNhdChyb290UHJlZml4Q2xzLCBcIi1zaG93LWhlbHAtaXRlbVwiKSxcbiAgICAgIGNvbXBvbmVudDogZmFsc2VcbiAgICB9KSwgZnVuY3Rpb24gKGl0ZW1Qcm9wcykge1xuICAgICAgdmFyIGtleSA9IGl0ZW1Qcm9wcy5rZXksXG4gICAgICAgIGVycm9yID0gaXRlbVByb3BzLmVycm9yLFxuICAgICAgICBlcnJvclN0YXR1cyA9IGl0ZW1Qcm9wcy5lcnJvclN0YXR1cyxcbiAgICAgICAgaXRlbUNsYXNzTmFtZSA9IGl0ZW1Qcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGl0ZW1TdHlsZSA9IGl0ZW1Qcm9wcy5zdHlsZTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKGl0ZW1DbGFzc05hbWUsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiLVwiKS5jb25jYXQoZXJyb3JTdGF0dXMpLCBlcnJvclN0YXR1cykpLFxuICAgICAgICBzdHlsZTogaXRlbVN0eWxlXG4gICAgICB9LCBlcnJvcik7XG4gICAgfSkpO1xuICB9KTtcbn0iLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKS5kZWZhdWx0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZU1lbW87XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gdXNlTWVtbyhnZXRWYWx1ZSwgY29uZGl0aW9uLCBzaG91bGRVcGRhdGUpIHtcbiAgdmFyIGNhY2hlUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgaWYgKCEoJ3ZhbHVlJyBpbiBjYWNoZVJlZi5jdXJyZW50KSB8fCBzaG91bGRVcGRhdGUoY2FjaGVSZWYuY3VycmVudC5jb25kaXRpb24sIGNvbmRpdGlvbikpIHtcbiAgICBjYWNoZVJlZi5jdXJyZW50LnZhbHVlID0gZ2V0VmFsdWUoKTtcbiAgICBjYWNoZVJlZi5jdXJyZW50LmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgfVxuICByZXR1cm4gY2FjaGVSZWYuY3VycmVudC52YWx1ZTtcbn0iLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3QsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbi8vIFpvbWJpZUo6IFdlIGV4cG9ydCBzaW5nbGUgZmlsZSBoZXJlIHNpbmNlXG4vLyBDb25maWdQcm92aWRlciB1c2UgdGhpcyB3aGljaCB3aWxsIG1ha2UgbG9vcCBkZXBzXG4vLyB0byBpbXBvcnQgd2hvbGUgYHJjLWZpZWxkLWZvcm1gXG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovKDAsIF9yZWFjdC5jcmVhdGVDb250ZXh0KSh1bmRlZmluZWQpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX2VuX1VTID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtcGlja2VyL2xpYi9sb2NhbGUvZW5fVVNcIikpO1xudmFyIF9lbl9VUzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90aW1lLXBpY2tlci9sb2NhbGUvZW5fVVNcIikpO1xuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbnZhciBsb2NhbGUgPSB7XG4gIGxhbmc6ICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgZGF0ZScsXG4gICAgeWVhclBsYWNlaG9sZGVyOiAnU2VsZWN0IHllYXInLFxuICAgIHF1YXJ0ZXJQbGFjZWhvbGRlcjogJ1NlbGVjdCBxdWFydGVyJyxcbiAgICBtb250aFBsYWNlaG9sZGVyOiAnU2VsZWN0IG1vbnRoJyxcbiAgICB3ZWVrUGxhY2Vob2xkZXI6ICdTZWxlY3Qgd2VlaycsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWydTdGFydCBkYXRlJywgJ0VuZCBkYXRlJ10sXG4gICAgcmFuZ2VZZWFyUGxhY2Vob2xkZXI6IFsnU3RhcnQgeWVhcicsICdFbmQgeWVhciddLFxuICAgIHJhbmdlUXVhcnRlclBsYWNlaG9sZGVyOiBbJ1N0YXJ0IHF1YXJ0ZXInLCAnRW5kIHF1YXJ0ZXInXSxcbiAgICByYW5nZU1vbnRoUGxhY2Vob2xkZXI6IFsnU3RhcnQgbW9udGgnLCAnRW5kIG1vbnRoJ10sXG4gICAgcmFuZ2VXZWVrUGxhY2Vob2xkZXI6IFsnU3RhcnQgd2VlaycsICdFbmQgd2VlayddXG4gIH0sIF9lbl9VU1tcImRlZmF1bHRcIl0pLFxuICB0aW1lUGlja2VyTG9jYWxlOiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIF9lbl9VUzJbXCJkZWZhdWx0XCJdKVxufTtcbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG52YXIgX2RlZmF1bHQgPSBsb2NhbGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1NlbGVjdCB0aW1lJyxcbiAgcmFuZ2VQbGFjZWhvbGRlcjogWydTdGFydCB0aW1lJywgJ0VuZCB0aW1lJ11cbn07XG52YXIgX2RlZmF1bHQgPSBsb2NhbGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIExvY2FsZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovKDAsIF9yZWFjdC5jcmVhdGVDb250ZXh0KSh1bmRlZmluZWQpO1xudmFyIF9kZWZhdWx0ID0gTG9jYWxlQ29udGV4dDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlTG9jYWxlUmVjZWl2ZXIgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29udGV4dFwiKSk7XG52YXIgX2RlZmF1bHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWZhdWx0XCIpKTtcbnZhciBMb2NhbGVSZWNlaXZlciA9IGZ1bmN0aW9uIExvY2FsZVJlY2VpdmVyKHByb3BzKSB7XG4gIHZhciBfcHJvcHMkY29tcG9uZW50TmFtZSA9IHByb3BzLmNvbXBvbmVudE5hbWUsXG4gICAgY29tcG9uZW50TmFtZSA9IF9wcm9wcyRjb21wb25lbnROYW1lID09PSB2b2lkIDAgPyAnZ2xvYmFsJyA6IF9wcm9wcyRjb21wb25lbnROYW1lLFxuICAgIGRlZmF1bHRMb2NhbGUgPSBwcm9wcy5kZWZhdWx0TG9jYWxlLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gIHZhciBhbnRMb2NhbGUgPSBSZWFjdC51c2VDb250ZXh0KF9jb250ZXh0W1wiZGVmYXVsdFwiXSk7XG4gIHZhciBnZXRMb2NhbGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGxvY2FsZSA9IGRlZmF1bHRMb2NhbGUgfHwgX2RlZmF1bHQyW1wiZGVmYXVsdFwiXVtjb21wb25lbnROYW1lXTtcbiAgICB2YXIgbG9jYWxlRnJvbUNvbnRleHQgPSAoX2EgPSBhbnRMb2NhbGUgPT09IG51bGwgfHwgYW50TG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhbnRMb2NhbGVbY29tcG9uZW50TmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgIHJldHVybiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBsb2NhbGUgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGxvY2FsZSgpIDogbG9jYWxlKSwgbG9jYWxlRnJvbUNvbnRleHQgfHwge30pO1xuICB9LCBbY29tcG9uZW50TmFtZSwgZGVmYXVsdExvY2FsZSwgYW50TG9jYWxlXSk7XG4gIHZhciBnZXRMb2NhbGVDb2RlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxvY2FsZUNvZGUgPSBhbnRMb2NhbGUgJiYgYW50TG9jYWxlLmxvY2FsZTtcbiAgICAvLyBIYWQgdXNlIExvY2FsZVByb3ZpZGUgYnV0IGRpZG4ndCBzZXQgbG9jYWxlXG4gICAgaWYgKGFudExvY2FsZSAmJiBhbnRMb2NhbGUuZXhpc3QgJiYgIWxvY2FsZUNvZGUpIHtcbiAgICAgIHJldHVybiBfZGVmYXVsdDJbXCJkZWZhdWx0XCJdLmxvY2FsZTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZUNvZGU7XG4gIH0sIFthbnRMb2NhbGVdKTtcbiAgcmV0dXJuIGNoaWxkcmVuKGdldExvY2FsZSwgZ2V0TG9jYWxlQ29kZSwgYW50TG9jYWxlKTtcbn07XG52YXIgX2RlZmF1bHQgPSBMb2NhbGVSZWNlaXZlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG52YXIgdXNlTG9jYWxlUmVjZWl2ZXIgPSBmdW5jdGlvbiB1c2VMb2NhbGVSZWNlaXZlcihjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlKSB7XG4gIHZhciBhbnRMb2NhbGUgPSBSZWFjdC51c2VDb250ZXh0KF9jb250ZXh0W1wiZGVmYXVsdFwiXSk7XG4gIHZhciBnZXRMb2NhbGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGxvY2FsZSA9IGRlZmF1bHRMb2NhbGUgfHwgX2RlZmF1bHQyW1wiZGVmYXVsdFwiXVtjb21wb25lbnROYW1lXTtcbiAgICB2YXIgbG9jYWxlRnJvbUNvbnRleHQgPSAoX2EgPSBhbnRMb2NhbGUgPT09IG51bGwgfHwgYW50TG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhbnRMb2NhbGVbY29tcG9uZW50TmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgIHJldHVybiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCB0eXBlb2YgbG9jYWxlID09PSAnZnVuY3Rpb24nID8gbG9jYWxlKCkgOiBsb2NhbGUpLCBsb2NhbGVGcm9tQ29udGV4dCB8fCB7fSk7XG4gIH0sIFtjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlLCBhbnRMb2NhbGVdKTtcbiAgcmV0dXJuIFtnZXRMb2NhbGVdO1xufTtcbmV4cG9ydHMudXNlTG9jYWxlUmVjZWl2ZXIgPSB1c2VMb2NhbGVSZWNlaXZlcjsiLCIndXNlIHN0cmljdCc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4gIFxuICB2YXIgX0NoZWNrQ2lyY2xlRmlsbGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9DaGVja0NpcmNsZUZpbGxlZCcpKTtcbiAgXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cbiAgXG4gIHZhciBfZGVmYXVsdCA9IF9DaGVja0NpcmNsZUZpbGxlZDtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4gIG1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSByZXF1aXJlKFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzXCIpO1xuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIF9leGNsdWRlZCA9IFtcImljb25cIiwgXCJjbGFzc05hbWVcIiwgXCJvbkNsaWNrXCIsIFwic3R5bGVcIiwgXCJwcmltYXJ5Q29sb3JcIiwgXCJzZWNvbmRhcnlDb2xvclwiXTtcbnZhciB0d29Ub25lQ29sb3JQYWxldHRlID0ge1xuICBwcmltYXJ5Q29sb3I6ICcjMzMzJyxcbiAgc2Vjb25kYXJ5Q29sb3I6ICcjRTZFNkU2JyxcbiAgY2FsY3VsYXRlZDogZmFsc2Vcbn07XG5mdW5jdGlvbiBzZXRUd29Ub25lQ29sb3JzKF9yZWYpIHtcbiAgdmFyIHByaW1hcnlDb2xvciA9IF9yZWYucHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yID0gX3JlZi5zZWNvbmRhcnlDb2xvcjtcbiAgdHdvVG9uZUNvbG9yUGFsZXR0ZS5wcmltYXJ5Q29sb3IgPSBwcmltYXJ5Q29sb3I7XG4gIHR3b1RvbmVDb2xvclBhbGV0dGUuc2Vjb25kYXJ5Q29sb3IgPSBzZWNvbmRhcnlDb2xvciB8fCAoMCwgX3V0aWxzLmdldFNlY29uZGFyeUNvbG9yKShwcmltYXJ5Q29sb3IpO1xuICB0d29Ub25lQ29sb3JQYWxldHRlLmNhbGN1bGF0ZWQgPSAhIXNlY29uZGFyeUNvbG9yO1xufVxuZnVuY3Rpb24gZ2V0VHdvVG9uZUNvbG9ycygpIHtcbiAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgdHdvVG9uZUNvbG9yUGFsZXR0ZSk7XG59XG52YXIgSWNvbkJhc2UgPSBmdW5jdGlvbiBJY29uQmFzZShwcm9wcykge1xuICB2YXIgaWNvbiA9IHByb3BzLmljb24sXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgcHJpbWFyeUNvbG9yID0gcHJvcHMucHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yID0gcHJvcHMuc2Vjb25kYXJ5Q29sb3IsXG4gICAgcmVzdFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIHZhciBjb2xvcnMgPSB0d29Ub25lQ29sb3JQYWxldHRlO1xuICBpZiAocHJpbWFyeUNvbG9yKSB7XG4gICAgY29sb3JzID0ge1xuICAgICAgcHJpbWFyeUNvbG9yOiBwcmltYXJ5Q29sb3IsXG4gICAgICBzZWNvbmRhcnlDb2xvcjogc2Vjb25kYXJ5Q29sb3IgfHwgKDAsIF91dGlscy5nZXRTZWNvbmRhcnlDb2xvcikocHJpbWFyeUNvbG9yKVxuICAgIH07XG4gIH1cbiAgKDAsIF91dGlscy51c2VJbnNlcnRTdHlsZXMpKCk7XG4gICgwLCBfdXRpbHMud2FybmluZykoKDAsIF91dGlscy5pc0ljb25EZWZpbml0aW9uKShpY29uKSwgXCJpY29uIHNob3VsZCBiZSBpY29uIGRlZmluaXRvbiwgYnV0IGdvdCBcIi5jb25jYXQoaWNvbikpO1xuICBpZiAoISgwLCBfdXRpbHMuaXNJY29uRGVmaW5pdGlvbikoaWNvbikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgdGFyZ2V0ID0gaWNvbjtcbiAgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0Lmljb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0YXJnZXQgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCB0YXJnZXQpLCB7fSwge1xuICAgICAgaWNvbjogdGFyZ2V0Lmljb24oY29sb3JzLnByaW1hcnlDb2xvciwgY29sb3JzLnNlY29uZGFyeUNvbG9yKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiAoMCwgX3V0aWxzLmdlbmVyYXRlKSh0YXJnZXQuaWNvbiwgXCJzdmctXCIuY29uY2F0KHRhcmdldC5uYW1lKSwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICAnZGF0YS1pY29uJzogdGFyZ2V0Lm5hbWUsXG4gICAgd2lkdGg6ICcxZW0nLFxuICAgIGhlaWdodDogJzFlbScsXG4gICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gIH0sIHJlc3RQcm9wcykpO1xufTtcbkljb25CYXNlLmRpc3BsYXlOYW1lID0gJ0ljb25SZWFjdCc7XG5JY29uQmFzZS5nZXRUd29Ub25lQ29sb3JzID0gZ2V0VHdvVG9uZUNvbG9ycztcbkljb25CYXNlLnNldFR3b1RvbmVDb2xvcnMgPSBzZXRUd29Ub25lQ29sb3JzO1xudmFyIF9kZWZhdWx0ID0gSWNvbkJhc2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4gIFxuICB2YXIgX0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCcpKTtcbiAgXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cbiAgXG4gIHZhciBfZGVmYXVsdCA9IF9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZDtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4gIG1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlTm90aWZpY2F0aW9uO1xudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9Ob3RpY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05vdGljZVwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuZnVuY3Rpb24gdXNlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkluc3RhbmNlKSB7XG4gIHZhciBjcmVhdGVkUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKFtdKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIGVsZW1lbnRzID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRFbGVtZW50cyA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG4gIGZ1bmN0aW9uIG5vdGlmeShub3RpY2VQcm9wcykge1xuICAgIHZhciBmaXJzdE1vdW50ID0gdHJ1ZTtcbiAgICBub3RpZmljYXRpb25JbnN0YW5jZS5hZGQobm90aWNlUHJvcHMsIGZ1bmN0aW9uIChkaXYsIHByb3BzKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHMua2V5O1xuICAgICAgaWYgKGRpdiAmJiAoIWNyZWF0ZWRSZWYuY3VycmVudFtrZXldIHx8IGZpcnN0TW91bnQpKSB7XG4gICAgICAgIHZhciBub3RpY2VFbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfTm90aWNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICAgICAgaG9sZGVyOiBkaXZcbiAgICAgICAgfSkpO1xuICAgICAgICBjcmVhdGVkUmVmLmN1cnJlbnRba2V5XSA9IG5vdGljZUVsZTtcbiAgICAgICAgc2V0RWxlbWVudHMoZnVuY3Rpb24gKG9yaWdpbkVsZW1lbnRzKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gb3JpZ2luRWxlbWVudHMuZmluZEluZGV4KGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGUua2V5ID09PSBwcm9wcy5rZXk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShvcmlnaW5FbGVtZW50cyksIFtub3RpY2VFbGVdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNsb25lTGlzdCA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKG9yaWdpbkVsZW1lbnRzKTtcbiAgICAgICAgICBjbG9uZUxpc3RbaW5kZXhdID0gbm90aWNlRWxlO1xuICAgICAgICAgIHJldHVybiBjbG9uZUxpc3Q7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZmlyc3RNb3VudCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBbbm90aWZ5LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgZWxlbWVudHMpXTtcbn0iLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRUcmFuc2l0aW9uTmFtZSA9IGV4cG9ydHMuZ2V0VHJhbnNpdGlvbkRpcmVjdGlvbiA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF90eXBlID0gcmVxdWlyZShcIi4vdHlwZVwiKTtcbi8vID09PT09PT09PT09PT09PT09PSBDb2xsYXBzZSBNb3Rpb24gPT09PT09PT09PT09PT09PT09XG52YXIgZ2V0Q29sbGFwc2VkSGVpZ2h0ID0gZnVuY3Rpb24gZ2V0Q29sbGFwc2VkSGVpZ2h0KCkge1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogMCxcbiAgICBvcGFjaXR5OiAwXG4gIH07XG59O1xudmFyIGdldFJlYWxIZWlnaHQgPSBmdW5jdGlvbiBnZXRSZWFsSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIHNjcm9sbEhlaWdodCA9IG5vZGUuc2Nyb2xsSGVpZ2h0O1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogc2Nyb2xsSGVpZ2h0LFxuICAgIG9wYWNpdHk6IDFcbiAgfTtcbn07XG52YXIgZ2V0Q3VycmVudEhlaWdodCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRIZWlnaHQobm9kZSkge1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogbm9kZSA/IG5vZGUub2Zmc2V0SGVpZ2h0IDogMFxuICB9O1xufTtcbnZhciBza2lwT3BhY2l0eVRyYW5zaXRpb24gPSBmdW5jdGlvbiBza2lwT3BhY2l0eVRyYW5zaXRpb24oXywgZXZlbnQpIHtcbiAgcmV0dXJuIChldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQuZGVhZGxpbmUpID09PSB0cnVlIHx8IGV2ZW50LnByb3BlcnR5TmFtZSA9PT0gJ2hlaWdodCc7XG59O1xudmFyIGNvbGxhcHNlTW90aW9uID0ge1xuICBtb3Rpb25OYW1lOiAnYW50LW1vdGlvbi1jb2xsYXBzZScsXG4gIG9uQXBwZWFyU3RhcnQ6IGdldENvbGxhcHNlZEhlaWdodCxcbiAgb25FbnRlclN0YXJ0OiBnZXRDb2xsYXBzZWRIZWlnaHQsXG4gIG9uQXBwZWFyQWN0aXZlOiBnZXRSZWFsSGVpZ2h0LFxuICBvbkVudGVyQWN0aXZlOiBnZXRSZWFsSGVpZ2h0LFxuICBvbkxlYXZlU3RhcnQ6IGdldEN1cnJlbnRIZWlnaHQsXG4gIG9uTGVhdmVBY3RpdmU6IGdldENvbGxhcHNlZEhlaWdodCxcbiAgb25BcHBlYXJFbmQ6IHNraXBPcGFjaXR5VHJhbnNpdGlvbixcbiAgb25FbnRlckVuZDogc2tpcE9wYWNpdHlUcmFuc2l0aW9uLFxuICBvbkxlYXZlRW5kOiBza2lwT3BhY2l0eVRyYW5zaXRpb24sXG4gIG1vdGlvbkRlYWRsaW5lOiA1MDBcbn07XG52YXIgU2VsZWN0UGxhY2VtZW50cyA9ICgwLCBfdHlwZS50dXBsZSkoJ2JvdHRvbUxlZnQnLCAnYm90dG9tUmlnaHQnLCAndG9wTGVmdCcsICd0b3BSaWdodCcpO1xudmFyIGdldFRyYW5zaXRpb25EaXJlY3Rpb24gPSBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uRGlyZWN0aW9uKHBsYWNlbWVudCkge1xuICBpZiAocGxhY2VtZW50ICE9PSB1bmRlZmluZWQgJiYgKHBsYWNlbWVudCA9PT0gJ3RvcExlZnQnIHx8IHBsYWNlbWVudCA9PT0gJ3RvcFJpZ2h0JykpIHtcbiAgICByZXR1cm4gXCJzbGlkZS1kb3duXCI7XG4gIH1cbiAgcmV0dXJuIFwic2xpZGUtdXBcIjtcbn07XG5leHBvcnRzLmdldFRyYW5zaXRpb25EaXJlY3Rpb24gPSBnZXRUcmFuc2l0aW9uRGlyZWN0aW9uO1xudmFyIGdldFRyYW5zaXRpb25OYW1lID0gZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUocm9vdFByZWZpeENscywgbW90aW9uLCB0cmFuc2l0aW9uTmFtZSkge1xuICBpZiAodHJhbnNpdGlvbk5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgfVxuICByZXR1cm4gXCJcIi5jb25jYXQocm9vdFByZWZpeENscywgXCItXCIpLmNvbmNhdChtb3Rpb24pO1xufTtcbmV4cG9ydHMuZ2V0VHJhbnNpdGlvbk5hbWUgPSBnZXRUcmFuc2l0aW9uTmFtZTtcbnZhciBfZGVmYXVsdCA9IGNvbGxhcHNlTW90aW9uO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB1c2VEZWJvdW5jZTtcbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIHVzZURlYm91bmNlKHZhbHVlKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh2YWx1ZSksXG4gICAgX1JlYWN0JHVzZVN0YXRlMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIGNhY2hlVmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldENhY2hlVmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRDYWNoZVZhbHVlKHZhbHVlKTtcbiAgICB9LCB2YWx1ZS5sZW5ndGggPyAwIDogMTApO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgfTtcbiAgfSwgW3ZhbHVlXSk7XG4gIHJldHVybiBjYWNoZVZhbHVlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRGaWVsZElkID0gZ2V0RmllbGRJZDtcbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG4vLyBmb3JtIGl0ZW0gbmFtZSBibGFjayBsaXN0LiAgaW4gZm9ybSAseW91IGNhbiB1c2UgZm9ybS5pZCBnZXQgdGhlIGZvcm0gaXRlbSBlbGVtZW50LlxuLy8gdXNlIG9iamVjdCBoYXNPd25Qcm9wZXJ0eSB3aWxsIGdldCBiZXR0ZXIgcGVyZm9ybWFuY2UgaWYgYmxhY2sgbGlzdCBpcyBsb25nZXIuXG52YXIgZm9ybUl0ZW1OYW1lQmxhY2tMaXN0ID0gWydwYXJlbnROb2RlJ107XG4vLyBkZWZhdWx0IGZvcm0gaXRlbSBpZCBwcmVmaXguXG52YXIgZGVmYXVsdEl0ZW1OYW1lUHJlZml4Q2xzID0gJ2Zvcm1faXRlbSc7XG5mdW5jdGlvbiB0b0FycmF5KGNhbmRpZGF0ZSkge1xuICBpZiAoY2FuZGlkYXRlID09PSB1bmRlZmluZWQgfHwgY2FuZGlkYXRlID09PSBmYWxzZSkgcmV0dXJuIFtdO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjYW5kaWRhdGUpID8gY2FuZGlkYXRlIDogW2NhbmRpZGF0ZV07XG59XG5mdW5jdGlvbiBnZXRGaWVsZElkKG5hbWVQYXRoLCBmb3JtTmFtZSkge1xuICBpZiAoIW5hbWVQYXRoLmxlbmd0aCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIG1lcmdlZElkID0gbmFtZVBhdGguam9pbignXycpO1xuICBpZiAoZm9ybU5hbWUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9ybU5hbWUsIFwiX1wiKS5jb25jYXQobWVyZ2VkSWQpO1xuICB9XG4gIHZhciBpc0lsbGVnYWxOYW1lID0gZm9ybUl0ZW1OYW1lQmxhY2tMaXN0LmluY2x1ZGVzKG1lcmdlZElkKTtcbiAgcmV0dXJuIGlzSWxsZWdhbE5hbWUgPyBcIlwiLmNvbmNhdChkZWZhdWx0SXRlbU5hbWVQcmVmaXhDbHMsIFwiX1wiKS5jb25jYXQobWVyZ2VkSWQpIDogbWVyZ2VkSWQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIikuZGVmYXVsdDtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLmRlZmF1bHQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlU2FmZVN0YXRlO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuLyoqXG4gKiBTYW1lIGFzIFJlYWN0LnVzZVN0YXRlIGJ1dCBgc2V0U3RhdGVgIGFjY2VwdCBgaWdub3JlRGVzdHJveWAgcGFyYW0gdG8gbm90IHRvIHNldFN0YXRlIGFmdGVyIGRlc3Ryb3llZC5cbiAqIFdlIGRvIG5vdCBtYWtlIHRoaXMgYXV0byBpcyB0byBhdm9pZCByZWFsIG1lbW9yeSBsZWFrLlxuICogRGV2ZWxvcGVyIHNob3VsZCBjb25maXJtIGl0J3Mgc2FmZSB0byBpZ25vcmUgdGhlbXNlbHZlcy5cbiAqL1xuZnVuY3Rpb24gdXNlU2FmZVN0YXRlKGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgZGVzdHJveVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0VmFsdWUpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyLmRlZmF1bHQpKF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgdmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBkZXN0cm95UmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZGVzdHJveVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZSh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KSB7XG4gICAgaWYgKGlnbm9yZURlc3Ryb3kgJiYgZGVzdHJveVJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldFZhbHVlKHVwZGF0ZXIpO1xuICB9XG4gIHJldHVybiBbdmFsdWUsIHNhZmVTZXRTdGF0ZV07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgcmFmID0gZnVuY3Rpb24gcmFmKGNhbGxiYWNrKSB7XG4gIHJldHVybiArc2V0VGltZW91dChjYWxsYmFjaywgMTYpO1xufTtcbnZhciBjYWYgPSBmdW5jdGlvbiBjYWYobnVtKSB7XG4gIHJldHVybiBjbGVhclRpbWVvdXQobnVtKTtcbn07XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScgaW4gd2luZG93KSB7XG4gIHJhZiA9IGZ1bmN0aW9uIHJhZihjYWxsYmFjaykge1xuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgfTtcbiAgY2FmID0gZnVuY3Rpb24gY2FmKGhhbmRsZSkge1xuICAgIHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTtcbiAgfTtcbn1cbnZhciByYWZVVUlEID0gMDtcbnZhciByYWZJZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBjbGVhbnVwKGlkKSB7XG4gIHJhZklkcy5kZWxldGUoaWQpO1xufVxudmFyIHdyYXBwZXJSYWYgPSBmdW5jdGlvbiB3cmFwcGVyUmFmKGNhbGxiYWNrKSB7XG4gIHZhciB0aW1lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgcmFmVVVJRCArPSAxO1xuICB2YXIgaWQgPSByYWZVVUlEO1xuICBmdW5jdGlvbiBjYWxsUmVmKGxlZnRUaW1lcykge1xuICAgIGlmIChsZWZ0VGltZXMgPT09IDApIHtcbiAgICAgIC8vIENsZWFuIHVwXG4gICAgICBjbGVhbnVwKGlkKTtcblxuICAgICAgLy8gVHJpZ2dlclxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTmV4dCByYWZcbiAgICAgIHZhciByZWFsSWQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsUmVmKGxlZnRUaW1lcyAtIDEpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEJpbmQgcmVhbCByYWYgaWRcbiAgICAgIHJhZklkcy5zZXQoaWQsIHJlYWxJZCk7XG4gICAgfVxuICB9XG4gIGNhbGxSZWYodGltZXMpO1xuICByZXR1cm4gaWQ7XG59O1xud3JhcHBlclJhZi5jYW5jZWwgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHJlYWxJZCA9IHJhZklkcy5nZXQoaWQpO1xuICBjbGVhbnVwKHJlYWxJZCk7XG4gIHJldHVybiBjYWYocmVhbElkKTtcbn07XG52YXIgX2RlZmF1bHQgPSB3cmFwcGVyUmFmO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLmRlZmF1bHQ7XG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpLmRlZmF1bHQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy51c2VMYXlvdXRVcGRhdGVFZmZlY3QgPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jYW5Vc2VEb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Eb20vY2FuVXNlRG9tXCIpKTtcbi8qKlxuICogV3JhcCBgUmVhY3QudXNlTGF5b3V0RWZmZWN0YCB3aGljaCB3aWxsIG5vdCB0aHJvdyB3YXJuaW5nIG1lc3NhZ2UgaW4gdGVzdCBlbnZcbiAqL1xudmFyIHVzZUludGVybmFsTGF5b3V0RWZmZWN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiAoMCwgX2NhblVzZURvbS5kZWZhdWx0KSgpID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHVzZUxheW91dEVmZmVjdCA9IGZ1bmN0aW9uIHVzZUxheW91dEVmZmVjdChjYWxsYmFjaywgZGVwcykge1xuICB2YXIgZmlyc3RNb3VudFJlZiA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgdXNlSW50ZXJuYWxMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsYmFjayhmaXJzdE1vdW50UmVmLmN1cnJlbnQpO1xuICB9LCBkZXBzKTtcblxuICAvLyBXZSB0ZWxsIHJlYWN0IHRoYXQgZmlyc3QgbW91bnQgaGFzIHBhc3NlZFxuICB1c2VJbnRlcm5hbExheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZmlyc3RNb3VudFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZpcnN0TW91bnRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xufTtcbnZhciB1c2VMYXlvdXRVcGRhdGVFZmZlY3QgPSBmdW5jdGlvbiB1c2VMYXlvdXRVcGRhdGVFZmZlY3QoY2FsbGJhY2ssIGRlcHMpIHtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIChmaXJzdE1vdW50KSB7XG4gICAgaWYgKCFmaXJzdE1vdW50KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gIH0sIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0VXBkYXRlRWZmZWN0ID0gdXNlTGF5b3V0VXBkYXRlRWZmZWN0O1xudmFyIF9kZWZhdWx0ID0gdXNlTGF5b3V0RWZmZWN0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgUm93Q29udGV4dCA9IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmNyZWF0ZUNvbnRleHQpKHt9KTtcbnZhciBfZGVmYXVsdCA9IFJvd0NvbnRleHQ7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZXNwb25zaXZlTWFwID0gZXhwb3J0cy5yZXNwb25zaXZlQXJyYXkgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciByZXNwb25zaXZlQXJyYXkgPSBbJ3h4bCcsICd4bCcsICdsZycsICdtZCcsICdzbScsICd4cyddO1xuZXhwb3J0cy5yZXNwb25zaXZlQXJyYXkgPSByZXNwb25zaXZlQXJyYXk7XG52YXIgcmVzcG9uc2l2ZU1hcCA9IHtcbiAgeHM6ICcobWF4LXdpZHRoOiA1NzVweCknLFxuICBzbTogJyhtaW4td2lkdGg6IDU3NnB4KScsXG4gIG1kOiAnKG1pbi13aWR0aDogNzY4cHgpJyxcbiAgbGc6ICcobWluLXdpZHRoOiA5OTJweCknLFxuICB4bDogJyhtaW4td2lkdGg6IDEyMDBweCknLFxuICB4eGw6ICcobWluLXdpZHRoOiAxNjAwcHgpJ1xufTtcbmV4cG9ydHMucmVzcG9uc2l2ZU1hcCA9IHJlc3BvbnNpdmVNYXA7XG52YXIgc3Vic2NyaWJlcnMgPSBuZXcgTWFwKCk7XG52YXIgc3ViVWlkID0gLTE7XG52YXIgc2NyZWVucyA9IHt9O1xudmFyIHJlc3BvbnNpdmVPYnNlcnZlID0ge1xuICBtYXRjaEhhbmRsZXJzOiB7fSxcbiAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKHBvaW50TWFwKSB7XG4gICAgc2NyZWVucyA9IHBvaW50TWFwO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jKHNjcmVlbnMpO1xuICAgIH0pO1xuICAgIHJldHVybiBzdWJzY3JpYmVycy5zaXplID49IDE7XG4gIH0sXG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGZ1bmMpIHtcbiAgICBpZiAoIXN1YnNjcmliZXJzLnNpemUpIHRoaXMucmVnaXN0ZXIoKTtcbiAgICBzdWJVaWQgKz0gMTtcbiAgICBzdWJzY3JpYmVycy5zZXQoc3ViVWlkLCBmdW5jKTtcbiAgICBmdW5jKHNjcmVlbnMpO1xuICAgIHJldHVybiBzdWJVaWQ7XG4gIH0sXG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSh0b2tlbikge1xuICAgIHN1YnNjcmliZXJzW1wiZGVsZXRlXCJdKHRva2VuKTtcbiAgICBpZiAoIXN1YnNjcmliZXJzLnNpemUpIHRoaXMudW5yZWdpc3RlcigpO1xuICB9LFxuICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMocmVzcG9uc2l2ZU1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc2NyZWVuKSB7XG4gICAgICB2YXIgbWF0Y2hNZWRpYVF1ZXJ5ID0gcmVzcG9uc2l2ZU1hcFtzY3JlZW5dO1xuICAgICAgdmFyIGhhbmRsZXIgPSBfdGhpcy5tYXRjaEhhbmRsZXJzW21hdGNoTWVkaWFRdWVyeV07XG4gICAgICBoYW5kbGVyID09PSBudWxsIHx8IGhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhhbmRsZXIubXFsLnJlbW92ZUxpc3RlbmVyKGhhbmRsZXIgPT09IG51bGwgfHwgaGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGFuZGxlci5saXN0ZW5lcik7XG4gICAgfSk7XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgfSxcbiAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgIE9iamVjdC5rZXlzKHJlc3BvbnNpdmVNYXApLmZvckVhY2goZnVuY3Rpb24gKHNjcmVlbikge1xuICAgICAgdmFyIG1hdGNoTWVkaWFRdWVyeSA9IHJlc3BvbnNpdmVNYXBbc2NyZWVuXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKF9yZWYpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBfcmVmLm1hdGNoZXM7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCgoMCwgX2V4dGVuZHMzW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzM1tcImRlZmF1bHRcIl0pKHt9LCBzY3JlZW5zKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgc2NyZWVuLCBtYXRjaGVzKSkpO1xuICAgICAgfTtcbiAgICAgIHZhciBtcWwgPSB3aW5kb3cubWF0Y2hNZWRpYShtYXRjaE1lZGlhUXVlcnkpO1xuICAgICAgbXFsLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIF90aGlzMi5tYXRjaEhhbmRsZXJzW21hdGNoTWVkaWFRdWVyeV0gPSB7XG4gICAgICAgIG1xbDogbXFsLFxuICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXJcbiAgICAgIH07XG4gICAgICBsaXN0ZW5lcihtcWwpO1xuICAgIH0pO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gcmVzcG9uc2l2ZU9ic2VydmU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKS5kZWZhdWx0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZU1lcmdlZFN0YXRlO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX3VzZUV2ZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91c2VFdmVudFwiKSk7XG52YXIgX3VzZUxheW91dEVmZmVjdCA9IHJlcXVpcmUoXCIuL3VzZUxheW91dEVmZmVjdFwiKTtcbnZhciBfdXNlU3RhdGU1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91c2VTdGF0ZVwiKSk7XG4vKiogV2Ugb25seSB0aGluayBgdW5kZWZpbmVkYCBpcyBlbXB0eSAqL1xuZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogU2ltaWxhciB0byBgdXNlU3RhdGVgIGJ1dCB3aWxsIHVzZSBwcm9wcyB2YWx1ZSBpZiBwcm92aWRlZC5cbiAqIE5vdGUgdGhhdCBpbnRlcm5hbCB1c2UgcmMtdXRpbCBgdXNlU3RhdGVgIGhvb2suXG4gKi9cbmZ1bmN0aW9uIHVzZU1lcmdlZFN0YXRlKGRlZmF1bHRTdGF0ZVZhbHVlLCBvcHRpb24pIHtcbiAgdmFyIF9yZWYgPSBvcHRpb24gfHwge30sXG4gICAgZGVmYXVsdFZhbHVlID0gX3JlZi5kZWZhdWx0VmFsdWUsXG4gICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICBwb3N0U3RhdGUgPSBfcmVmLnBvc3RTdGF0ZTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PSBJbml0ID09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBfdXNlU3RhdGUgPSAoMCwgX3VzZVN0YXRlNS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaGFzVmFsdWUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzVmFsdWUoZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZSgpIDogZGVmYXVsdFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0U3RhdGVWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRTdGF0ZVZhbHVlKCkgOiBkZWZhdWx0U3RhdGVWYWx1ZTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBfdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfdXNlU3RhdGUsIDIpLFxuICAgIGlubmVyVmFsdWUgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldElubmVyVmFsdWUgPSBfdXNlU3RhdGUyWzFdO1xuICB2YXIgbWVyZ2VkVmFsdWUgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBpbm5lclZhbHVlO1xuICB2YXIgcG9zdE1lcmdlZFZhbHVlID0gcG9zdFN0YXRlID8gcG9zdFN0YXRlKG1lcmdlZFZhbHVlKSA6IG1lcmdlZFZhbHVlO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT0gQ2hhbmdlID09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIG9uQ2hhbmdlRm4gPSAoMCwgX3VzZUV2ZW50LmRlZmF1bHQpKG9uQ2hhbmdlKTtcbiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3VzZVN0YXRlNS5kZWZhdWx0KShbbWVyZ2VkVmFsdWVdKSxcbiAgICBfdXNlU3RhdGU0ID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfdXNlU3RhdGUzLCAyKSxcbiAgICBwcmV2VmFsdWUgPSBfdXNlU3RhdGU0WzBdLFxuICAgIHNldFByZXZWYWx1ZSA9IF91c2VTdGF0ZTRbMV07XG4gICgwLCBfdXNlTGF5b3V0RWZmZWN0LnVzZUxheW91dFVwZGF0ZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2ID0gcHJldlZhbHVlWzBdO1xuICAgIGlmIChpbm5lclZhbHVlICE9PSBwcmV2KSB7XG4gICAgICBvbkNoYW5nZUZuKGlubmVyVmFsdWUsIHByZXYpO1xuICAgIH1cbiAgfSwgW3ByZXZWYWx1ZV0pO1xuXG4gIC8vIFN5bmMgdmFsdWUgYmFjayB0byBgdW5kZWZpbmVkYCB3aGVuIGl0IGZyb20gY29udHJvbCB0byB1bi1jb250cm9sXG4gICgwLCBfdXNlTGF5b3V0RWZmZWN0LnVzZUxheW91dFVwZGF0ZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaGFzVmFsdWUodmFsdWUpKSB7XG4gICAgICBzZXRJbm5lclZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT0gVXBkYXRlID09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIHRyaWdnZXJDaGFuZ2UgPSAoMCwgX3VzZUV2ZW50LmRlZmF1bHQpKGZ1bmN0aW9uICh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KSB7XG4gICAgc2V0SW5uZXJWYWx1ZSh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KTtcbiAgICBzZXRQcmV2VmFsdWUoW21lcmdlZFZhbHVlXSwgaWdub3JlRGVzdHJveSk7XG4gIH0pO1xuICByZXR1cm4gW3Bvc3RNZXJnZWRWYWx1ZSwgdHJpZ2dlckNoYW5nZV07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHVzZVJlbW92ZVBhc3N3b3JkVGltZW91dDtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiB1c2VSZW1vdmVQYXNzd29yZFRpbWVvdXQoaW5wdXRSZWYsIHRyaWdnZXJPbk1vdW50KSB7XG4gIHZhciByZW1vdmVQYXNzd29yZFRpbWVvdXRSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikoW10pO1xuICB2YXIgcmVtb3ZlUGFzc3dvcmRUaW1lb3V0ID0gZnVuY3Rpb24gcmVtb3ZlUGFzc3dvcmRUaW1lb3V0KCkge1xuICAgIHJlbW92ZVBhc3N3b3JkVGltZW91dFJlZi5jdXJyZW50LnB1c2goc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICBpZiAoKChfYSA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbnB1dCkgJiYgKChfYiA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbnB1dC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSkgPT09ICdwYXNzd29yZCcgJiYgKChfYyA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5pbnB1dC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpKSB7XG4gICAgICAgIChfZCA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5pbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9O1xuICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0cmlnZ2VyT25Nb3VudCkge1xuICAgICAgcmVtb3ZlUGFzc3dvcmRUaW1lb3V0KCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlUGFzc3dvcmRUaW1lb3V0UmVmLmN1cnJlbnQuZm9yRWFjaChmdW5jdGlvbiAodGltZXIpIHtcbiAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gcmVtb3ZlUGFzc3dvcmRUaW1lb3V0O1xufSIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEV5ZVR3b1RvbmUgPSB7IFwiaWNvblwiOiBmdW5jdGlvbiByZW5kZXIocHJpbWFyeUNvbG9yLCBzZWNvbmRhcnlDb2xvcikgeyByZXR1cm4geyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk04MS44IDUzNy44YTYwLjMgNjAuMyAwIDAxMC01MS41QzE3Ni42IDI4Ni41IDMxOS44IDE4NiA1MTIgMTg2Yy0xOTIuMiAwLTMzNS40IDEwMC41LTQzMC4yIDMwMC4zYTYwLjMgNjAuMyAwIDAwMCA1MS41QzE3Ni42IDczNy41IDMxOS45IDgzOCA1MTIgODM4Yy0xOTIuMSAwLTMzNS40LTEwMC41LTQzMC4yLTMwMC4yelwiLCBcImZpbGxcIjogc2Vjb25kYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiAyNThjLTE2MS4zIDAtMjc5LjQgODEuOC0zNjIuNyAyNTRDMjMyLjYgNjg0LjIgMzUwLjcgNzY2IDUxMiA3NjZjMTYxLjQgMCAyNzkuNS04MS44IDM2Mi43LTI1NEM3OTEuNCAzMzkuOCA2NzMuMyAyNTggNTEyIDI1OHptLTQgNDMwYy05Ny4yIDAtMTc2LTc4LjgtMTc2LTE3NnM3OC44LTE3NiAxNzYtMTc2IDE3NiA3OC44IDE3NiAxNzYtNzguOCAxNzYtMTc2IDE3NnpcIiwgXCJmaWxsXCI6IHNlY29uZGFyeUNvbG9yIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk05NDIuMiA0ODYuMkM4NDcuNCAyODYuNSA3MDQuMSAxODYgNTEyIDE4NmMtMTkyLjIgMC0zMzUuNCAxMDAuNS00MzAuMiAzMDAuM2E2MC4zIDYwLjMgMCAwMDAgNTEuNUMxNzYuNiA3MzcuNSAzMTkuOSA4MzggNTEyIDgzOGMxOTIuMiAwIDMzNS40LTEwMC41IDQzMC4yLTMwMC4zIDcuNy0xNi4yIDcuNy0zNSAwLTUxLjV6TTUxMiA3NjZjLTE2MS4zIDAtMjc5LjQtODEuOC0zNjIuNy0yNTRDMjMyLjYgMzM5LjggMzUwLjcgMjU4IDUxMiAyNThzMjc5LjQgODEuOCAzNjIuNyAyNTRDNzkxLjUgNjg0LjIgNjczLjQgNzY2IDUxMiA3NjZ6XCIsIFwiZmlsbFwiOiBwcmltYXJ5Q29sb3IgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUwOCAzMzZjLTk3LjIgMC0xNzYgNzguOC0xNzYgMTc2czc4LjggMTc2IDE3NiAxNzYgMTc2LTc4LjggMTc2LTE3Ni03OC44LTE3Ni0xNzYtMTc2em0wIDI4OGMtNjEuOSAwLTExMi01MC4xLTExMi0xMTJzNTAuMS0xMTIgMTEyLTExMiAxMTIgNTAuMSAxMTIgMTEyLTUwLjEgMTEyLTExMiAxMTJ6XCIsIFwiZmlsbFwiOiBwcmltYXJ5Q29sb3IgfSB9XSB9OyB9LCBcIm5hbWVcIjogXCJleWVcIiwgXCJ0aGVtZVwiOiBcInR3b3RvbmVcIiB9O1xuZXhwb3J0IGRlZmF1bHQgRXllVHdvVG9uZTtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEV5ZVR3b1RvbmVTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRXllVHdvVG9uZVwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xudmFyIEV5ZVR3b1RvbmUgPSBmdW5jdGlvbiBFeWVUd29Ub25lKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBFeWVUd29Ub25lU3ZnXG4gIH0pKTtcbn07XG5FeWVUd29Ub25lLmRpc3BsYXlOYW1lID0gJ0V5ZVR3b1RvbmUnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoRXllVHdvVG9uZSk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgRXllSW52aXNpYmxlVHdvVG9uZSA9IHsgXCJpY29uXCI6IGZ1bmN0aW9uIHJlbmRlcihwcmltYXJ5Q29sb3IsIHNlY29uZGFyeUNvbG9yKSB7IHJldHVybiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTI1NC44OSA3NTguODVsMTI1LjU3LTEyNS41N2ExNzYgMTc2IDAgMDEyNDguODItMjQ4LjgyTDc1NyAyNTYuNzJRNjUxLjY5IDE4Ni4wNyA1MTIgMTg2cS0yODguMyAwLTQzMC4yIDMwMC4zYTYwLjMgNjAuMyAwIDAwMCA1MS41cTY5LjI3IDE0NS45MSAxNzMuMDkgMjIxLjA1ek05NDIuMiA0ODYuMlE4ODkuNDYgMzc1LjExIDgxNi43IDMwNUw2NzIuNDggNDQ5LjI3YTE3Ni4wOSAxNzYuMDkgMCAwMS0yMjcuMjIgMjI3LjIxTDMyMyA3OTguNzVRNDA4IDgzOCA1MTIgODM4cTI4OC4zIDAgNDMwLjItMzAwLjNhNjAuMjkgNjAuMjkgMCAwMDAtNTEuNXpcIiwgXCJmaWxsXCI6IHNlY29uZGFyeUNvbG9yIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk05NDIuMiA0ODYuMlE4ODkuNDcgMzc1LjExIDgxNi43IDMwNWwtNTAuODggNTAuODhDODA3LjMxIDM5NS41MyA4NDMuNDUgNDQ3LjQgODc0LjcgNTEyIDc5MS41IDY4NC4yIDY3My40IDc2NiA1MTIgNzY2cS03Mi42NyAwLTEzMy44Ny0yMi4zOEwzMjMgNzk4Ljc1UTQwOCA4MzggNTEyIDgzOHEyODguMyAwIDQzMC4yLTMwMC4zYTYwLjI5IDYwLjI5IDAgMDAwLTUxLjV6TTg3OC42MyAxNjUuNTZMODM2IDEyMi44OGE4IDggMCAwMC0xMS4zMiAwTDcxNS4zMSAyMzIuMlE2MjQuODYgMTg2IDUxMiAxODZxLTI4OC4zIDAtNDMwLjIgMzAwLjNhNjAuMyA2MC4zIDAgMDAwIDUxLjVxNTYuNjkgMTE5LjQgMTM2LjUgMTkxLjQxTDExMi40OCA4MzVhOCA4IDAgMDAwIDExLjMxTDE1NS4xNyA4ODlhOCA4IDAgMDAxMS4zMSAwbDcxMi4xNS03MTIuMTJhOCA4IDAgMDAwLTExLjMyek0xNDkuMyA1MTJDMjMyLjYgMzM5LjggMzUwLjcgMjU4IDUxMiAyNThjNTQuNTQgMCAxMDQuMTMgOS4zNiAxNDkuMTIgMjguMzlsLTcwLjMgNzAuM2ExNzYgMTc2IDAgMDAtMjM4LjEzIDIzOC4xM2wtODMuNDIgODMuNDJDMjIzLjEgNjM3LjQ5IDE4My4zIDU4Mi4yOCAxNDkuMyA1MTJ6bTI0Ni43IDBhMTEyLjExIDExMi4xMSAwIDAxMTQ2LjItMTA2LjY5TDQwMS4zMSA1NDYuMkExMTIgMTEyIDAgMDEzOTYgNTEyelwiLCBcImZpbGxcIjogcHJpbWFyeUNvbG9yIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MDggNjI0Yy0zLjQ2IDAtNi44Ny0uMTYtMTAuMjUtLjQ3bC01Mi44MiA1Mi44MmExNzYuMDkgMTc2LjA5IDAgMDAyMjcuNDItMjI3LjQybC01Mi44MiA1Mi44MmMuMzEgMy4zOC40NyA2Ljc5LjQ3IDEwLjI1YTExMS45NCAxMTEuOTQgMCAwMS0xMTIgMTEyelwiLCBcImZpbGxcIjogcHJpbWFyeUNvbG9yIH0gfV0gfTsgfSwgXCJuYW1lXCI6IFwiZXllLWludmlzaWJsZVwiLCBcInRoZW1lXCI6IFwidHdvdG9uZVwiIH07XG5leHBvcnQgZGVmYXVsdCBFeWVJbnZpc2libGVUd29Ub25lO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRXllSW52aXNpYmxlVHdvVG9uZVN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeWVJbnZpc2libGVUd29Ub25lXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG52YXIgRXllSW52aXNpYmxlVHdvVG9uZSA9IGZ1bmN0aW9uIEV5ZUludmlzaWJsZVR3b1RvbmUocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEV5ZUludmlzaWJsZVR3b1RvbmVTdmdcbiAgfSkpO1xufTtcbkV5ZUludmlzaWJsZVR3b1RvbmUuZGlzcGxheU5hbWUgPSAnRXllSW52aXNpYmxlVHdvVG9uZSc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeWVJbnZpc2libGVUd29Ub25lKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3ViYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdWInKSB9LCB7XG4gIHN1YjogZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgcXVvdCA9IC9cIi9nO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcblxuLy8gYENyZWF0ZUhUTUxgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVodG1sXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgcmVwbGFjZSh0b1N0cmluZyh2YWx1ZSksIHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCJmdW5jdGlvbiBlKGUpe3RoaXMubWVzc2FnZT1lfWUucHJvdG90eXBlPW5ldyBFcnJvcixlLnByb3RvdHlwZS5uYW1lPVwiSW52YWxpZENoYXJhY3RlckVycm9yXCI7dmFyIHI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmF0b2ImJndpbmRvdy5hdG9iLmJpbmQod2luZG93KXx8ZnVuY3Rpb24ocil7dmFyIHQ9U3RyaW5nKHIpLnJlcGxhY2UoLz0rJC8sXCJcIik7aWYodC5sZW5ndGglND09MSl0aHJvdyBuZXcgZShcIidhdG9iJyBmYWlsZWQ6IFRoZSBzdHJpbmcgdG8gYmUgZGVjb2RlZCBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQuXCIpO2Zvcih2YXIgbixvLGE9MCxpPTAsYz1cIlwiO289dC5jaGFyQXQoaSsrKTt+byYmKG49YSU0PzY0Km4rbzpvLGErKyU0KT9jKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSZuPj4oLTIqYSY2KSk6MClvPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIi5pbmRleE9mKG8pO3JldHVybiBjfTtmdW5jdGlvbiB0KGUpe3ZhciB0PWUucmVwbGFjZSgvLS9nLFwiK1wiKS5yZXBsYWNlKC9fL2csXCIvXCIpO3N3aXRjaCh0Lmxlbmd0aCU0KXtjYXNlIDA6YnJlYWs7Y2FzZSAyOnQrPVwiPT1cIjticmVhaztjYXNlIDM6dCs9XCI9XCI7YnJlYWs7ZGVmYXVsdDp0aHJvd1wiSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIVwifXRyeXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyKGUpLnJlcGxhY2UoLyguKS9nLChmdW5jdGlvbihlLHIpe3ZhciB0PXIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtyZXR1cm4gdC5sZW5ndGg8MiYmKHQ9XCIwXCIrdCksXCIlXCIrdH0pKSl9KHQpfWNhdGNoKGUpe3JldHVybiByKHQpfX1mdW5jdGlvbiBuKGUpe3RoaXMubWVzc2FnZT1lfWZ1bmN0aW9uIG8oZSxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgbihcIkludmFsaWQgdG9rZW4gc3BlY2lmaWVkXCIpO3ZhciBvPSEwPT09KHI9cnx8e30pLmhlYWRlcj8wOjE7dHJ5e3JldHVybiBKU09OLnBhcnNlKHQoZS5zcGxpdChcIi5cIilbb10pKX1jYXRjaChlKXt0aHJvdyBuZXcgbihcIkludmFsaWQgdG9rZW4gc3BlY2lmaWVkOiBcIitlLm1lc3NhZ2UpfX1uLnByb3RvdHlwZT1uZXcgRXJyb3Isbi5wcm90b3R5cGUubmFtZT1cIkludmFsaWRUb2tlbkVycm9yXCI7ZXhwb3J0IGRlZmF1bHQgbztleHBvcnR7biBhcyBJbnZhbGlkVG9rZW5FcnJvcn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qd3QtZGVjb2RlLmVzbS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dFwiKTtcbnZhciBfRXJyb3JMaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9FcnJvckxpc3RcIikpO1xudmFyIF9Gb3JtID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRm9ybVwiKSk7XG52YXIgX0Zvcm1JdGVtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtSXRlbVwiKSk7XG52YXIgX0Zvcm1MaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtTGlzdFwiKSk7XG52YXIgX3VzZUZvcm1JbnN0YW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaG9va3MvdXNlRm9ybUluc3RhbmNlXCIpKTtcbnZhciBGb3JtID0gX0Zvcm1bXCJkZWZhdWx0XCJdO1xuRm9ybS5JdGVtID0gX0Zvcm1JdGVtW1wiZGVmYXVsdFwiXTtcbkZvcm0uTGlzdCA9IF9Gb3JtTGlzdFtcImRlZmF1bHRcIl07XG5Gb3JtLkVycm9yTGlzdCA9IF9FcnJvckxpc3RbXCJkZWZhdWx0XCJdO1xuRm9ybS51c2VGb3JtID0gX0Zvcm0udXNlRm9ybTtcbkZvcm0udXNlRm9ybUluc3RhbmNlID0gX3VzZUZvcm1JbnN0YW5jZVtcImRlZmF1bHRcIl07XG5Gb3JtLnVzZVdhdGNoID0gX0Zvcm0udXNlV2F0Y2g7XG5Gb3JtLlByb3ZpZGVyID0gX2NvbnRleHQuRm9ybVByb3ZpZGVyO1xuRm9ybS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKGZhbHNlLCAnRm9ybScsICdhbnRkIHY0IHJlbW92ZWQgYEZvcm0uY3JlYXRlYC4gUGxlYXNlIHJlbW92ZSBvciB1c2UgYEBhbnQtZGVzaWduL2NvbXBhdGlibGVgIGluc3RlYWQuJykgOiB2b2lkIDA7XG59O1xudmFyIF9kZWZhdWx0ID0gRm9ybTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gIGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvUHJpbWl0aXZlLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXQ7XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcbnZhciBfdG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQXJyYXlcIikpO1xudmFyIF9nZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldFwiKSk7XG5mdW5jdGlvbiBpbnRlcm5hbFNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpIHtcbiAgaWYgKCFwYXRocy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIF9wYXRocyA9ICgwLCBfdG9BcnJheTIuZGVmYXVsdCkocGF0aHMpLFxuICAgIHBhdGggPSBfcGF0aHNbMF0sXG4gICAgcmVzdFBhdGggPSBfcGF0aHMuc2xpY2UoMSk7XG4gIHZhciBjbG9uZTtcbiAgaWYgKCFlbnRpdHkgJiYgdHlwZW9mIHBhdGggPT09ICdudW1iZXInKSB7XG4gICAgY2xvbmUgPSBbXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVudGl0eSkpIHtcbiAgICBjbG9uZSA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKGVudGl0eSk7XG4gIH0gZWxzZSB7XG4gICAgY2xvbmUgPSAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIGVudGl0eSk7XG4gIH1cblxuICAvLyBEZWxldGUgcHJvcCBpZiBgcmVtb3ZlSWZVbmRlZmluZWRgIGFuZCB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgaWYgKHJlbW92ZUlmVW5kZWZpbmVkICYmIHZhbHVlID09PSB1bmRlZmluZWQgJiYgcmVzdFBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsZXRlIGNsb25lW3BhdGhdW3Jlc3RQYXRoWzBdXTtcbiAgfSBlbHNlIHtcbiAgICBjbG9uZVtwYXRoXSA9IGludGVybmFsU2V0KGNsb25lW3BhdGhdLCByZXN0UGF0aCwgdmFsdWUsIHJlbW92ZUlmVW5kZWZpbmVkKTtcbiAgfVxuICByZXR1cm4gY2xvbmU7XG59XG5mdW5jdGlvbiBzZXQoZW50aXR5LCBwYXRocywgdmFsdWUpIHtcbiAgdmFyIHJlbW92ZUlmVW5kZWZpbmVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgLy8gRG8gbm90aGluZyBpZiBgcmVtb3ZlSWZVbmRlZmluZWRgIGFuZCBwYXJlbnQgb2JqZWN0IG5vdCBleGlzdFxuICBpZiAocGF0aHMubGVuZ3RoICYmIHJlbW92ZUlmVW5kZWZpbmVkICYmIHZhbHVlID09PSB1bmRlZmluZWQgJiYgISgwLCBfZ2V0LmRlZmF1bHQpKGVudGl0eSwgcGF0aHMuc2xpY2UoMCwgLTEpKSkge1xuICAgIHJldHVybiBlbnRpdHk7XG4gIH1cbiAgcmV0dXJuIGludGVybmFsU2V0KGVudGl0eSwgcGF0aHMsIHZhbHVlLCByZW1vdmVJZlVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuICgwLCBfdHlwZW9mMi5kZWZhdWx0KShvYmopID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5mdW5jdGlvbiBjcmVhdGVFbXB0eShzb3VyY2UpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG59XG52YXIga2V5cyA9IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IE9iamVjdC5rZXlzIDogUmVmbGVjdC5vd25LZXlzO1xuXG4vKipcbiAqIE1lcmdlIG9iamVjdHMgd2hpY2ggd2lsbCBjcmVhdGVcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHNvdXJjZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgdmFyIGNsb25lID0gY3JlYXRlRW1wdHkoc291cmNlc1swXSk7XG4gIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc3JjKSB7XG4gICAgZnVuY3Rpb24gaW50ZXJuYWxNZXJnZShwYXRoLCBwYXJlbnRMb29wU2V0KSB7XG4gICAgICB2YXIgbG9vcFNldCA9IG5ldyBTZXQocGFyZW50TG9vcFNldCk7XG4gICAgICB2YXIgdmFsdWUgPSAoMCwgX2dldC5kZWZhdWx0KShzcmMsIHBhdGgpO1xuICAgICAgdmFyIGlzQXJyID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIgfHwgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIC8vIE9ubHkgYWRkIG5vdCBsb29wIG9ialxuICAgICAgICBpZiAoIWxvb3BTZXQuaGFzKHZhbHVlKSkge1xuICAgICAgICAgIGxvb3BTZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgICB2YXIgb3JpZ2luVmFsdWUgPSAoMCwgX2dldC5kZWZhdWx0KShjbG9uZSwgcGF0aCk7XG4gICAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgICAvLyBBcnJheSB3aWxsIGFsd2F5cyBiZSBvdmVycmlkZVxuICAgICAgICAgICAgY2xvbmUgPSBzZXQoY2xvbmUsIHBhdGgsIFtdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFvcmlnaW5WYWx1ZSB8fCAoMCwgX3R5cGVvZjIuZGVmYXVsdCkob3JpZ2luVmFsdWUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gSW5pdCBjb250YWluZXIgaWYgbm90IGV4aXN0XG4gICAgICAgICAgICBjbG9uZSA9IHNldChjbG9uZSwgcGF0aCwgY3JlYXRlRW1wdHkodmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpbnRlcm5hbE1lcmdlKFtdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShwYXRoKSwgW2tleV0pLCBsb29wU2V0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvbmUgPSBzZXQoY2xvbmUsIHBhdGgsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW50ZXJuYWxNZXJnZShbXSk7XG4gIH0pO1xuICByZXR1cm4gY2xvbmU7XG59IiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXMuanNcIik7XG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5LmpzXCIpO1xudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCIpO1xuZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF90b0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXQ7XG5mdW5jdGlvbiBnZXQoZW50aXR5LCBwYXRoKSB7XG4gIHZhciBjdXJyZW50ID0gZW50aXR5O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCB8fCBjdXJyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhbaV1dO1xuICB9XG4gIHJldHVybiBjdXJyZW50O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuQU5UX01BUksgPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC93YXJuaW5nXCIpKTtcbnZhciBfbG9jYWxlID0gcmVxdWlyZShcIi4uL21vZGFsL2xvY2FsZVwiKTtcbnZhciBfY29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29udGV4dFwiKSk7XG52YXIgQU5UX01BUksgPSAnaW50ZXJuYWxNYXJrJztcbmV4cG9ydHMuQU5UX01BUksgPSBBTlRfTUFSSztcbnZhciBMb2NhbGVQcm92aWRlciA9IGZ1bmN0aW9uIExvY2FsZVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBfcHJvcHMkbG9jYWxlID0gcHJvcHMubG9jYWxlLFxuICAgIGxvY2FsZSA9IF9wcm9wcyRsb2NhbGUgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJGxvY2FsZSxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIF9BTlRfTUFSS19fID0gcHJvcHMuX0FOVF9NQVJLX187XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoX0FOVF9NQVJLX18gPT09IEFOVF9NQVJLLCAnTG9jYWxlUHJvdmlkZXInLCAnYExvY2FsZVByb3ZpZGVyYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBsb2NhbGVgIHdpdGggYENvbmZpZ1Byb3ZpZGVyYCBpbnN0ZWFkOiBodHRwOi8vdS5hbnQuZGVzaWduL2xvY2FsZScpIDogdm9pZCAwO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgKDAsIF9sb2NhbGUuY2hhbmdlQ29uZmlybUxvY2FsZSkobG9jYWxlICYmIGxvY2FsZS5Nb2RhbCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICgwLCBfbG9jYWxlLmNoYW5nZUNvbmZpcm1Mb2NhbGUpKCk7XG4gICAgfTtcbiAgfSwgW2xvY2FsZV0pO1xuICB2YXIgZ2V0TWVtb2l6ZWRDb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgbG9jYWxlKSwge1xuICAgICAgZXhpc3Q6IHRydWVcbiAgICB9KTtcbiAgfSwgW2xvY2FsZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbnRleHRbXCJkZWZhdWx0XCJdLlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGdldE1lbW9pemVkQ29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn07XG52YXIgX2RlZmF1bHQgPSBMb2NhbGVQcm92aWRlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNoYW5nZUNvbmZpcm1Mb2NhbGUgPSBjaGFuZ2VDb25maXJtTG9jYWxlO1xuZXhwb3J0cy5nZXRDb25maXJtTG9jYWxlID0gZ2V0Q29uZmlybUxvY2FsZTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9kZWZhdWx0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlL2RlZmF1bHRcIikpO1xudmFyIHJ1bnRpbWVMb2NhbGUgPSAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIF9kZWZhdWx0W1wiZGVmYXVsdFwiXS5Nb2RhbCk7XG5mdW5jdGlvbiBjaGFuZ2VDb25maXJtTG9jYWxlKG5ld0xvY2FsZSkge1xuICBpZiAobmV3TG9jYWxlKSB7XG4gICAgcnVudGltZUxvY2FsZSA9ICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHJ1bnRpbWVMb2NhbGUpLCBuZXdMb2NhbGUpO1xuICB9IGVsc2Uge1xuICAgIHJ1bnRpbWVMb2NhbGUgPSAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIF9kZWZhdWx0W1wiZGVmYXVsdFwiXS5Nb2RhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENvbmZpcm1Mb2NhbGUoKSB7XG4gIHJldHVybiBydW50aW1lTG9jYWxlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gcGFnZScsXG4gIGp1bXBfdG86ICdHbyB0bycsXG4gIGp1bXBfdG9fY29uZmlybTogJ2NvbmZpcm0nLFxuICBwYWdlOiAnUGFnZScsXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1ByZXZpb3VzIFBhZ2UnLFxuICBuZXh0X3BhZ2U6ICdOZXh0IFBhZ2UnLFxuICBwcmV2XzU6ICdQcmV2aW91cyA1IFBhZ2VzJyxcbiAgbmV4dF81OiAnTmV4dCA1IFBhZ2VzJyxcbiAgcHJldl8zOiAnUHJldmlvdXMgMyBQYWdlcycsXG4gIG5leHRfMzogJ05leHQgMyBQYWdlcycsXG4gIHBhZ2Vfc2l6ZTogJ1BhZ2UgU2l6ZSdcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9lbl9VUyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL2RhdGUtcGlja2VyL2xvY2FsZS9lbl9VU1wiKSk7XG52YXIgX2RlZmF1bHQgPSBfZW5fVVNbXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBsb2NhbGUgPSB7XG4gIGxvY2FsZTogJ2VuX1VTJyxcbiAgdG9kYXk6ICdUb2RheScsXG4gIG5vdzogJ05vdycsXG4gIGJhY2tUb1RvZGF5OiAnQmFjayB0byB0b2RheScsXG4gIG9rOiAnT0snLFxuICBjbGVhcjogJ0NsZWFyJyxcbiAgbW9udGg6ICdNb250aCcsXG4gIHllYXI6ICdZZWFyJyxcbiAgdGltZVNlbGVjdDogJ3NlbGVjdCB0aW1lJyxcbiAgZGF0ZVNlbGVjdDogJ3NlbGVjdCBkYXRlJyxcbiAgd2Vla1NlbGVjdDogJ0Nob29zZSBhIHdlZWsnLFxuICBtb250aFNlbGVjdDogJ0Nob29zZSBhIG1vbnRoJyxcbiAgeWVhclNlbGVjdDogJ0Nob29zZSBhIHllYXInLFxuICBkZWNhZGVTZWxlY3Q6ICdDaG9vc2UgYSBkZWNhZGUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdNL0QvWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ00vRC9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGggKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOZXh0IG1vbnRoIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdMYXN0IHllYXIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTmV4dCB5ZWFyIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdMYXN0IGRlY2FkZScsXG4gIG5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ0xhc3QgY2VudHVyeScsXG4gIG5leHRDZW50dXJ5OiAnTmV4dCBjZW50dXJ5J1xufTtcbnZhciBfZGVmYXVsdCA9IGxvY2FsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2RlZmF1bHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlL2RlZmF1bHRcIikpO1xudmFyIF9kZWZhdWx0ID0gX2RlZmF1bHQyW1wiZGVmYXVsdFwiXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX0NoZWNrQ2lyY2xlRmlsbGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vQ2hlY2tDaXJjbGVGaWxsZWRcIikpO1xudmFyIF9BbnRkSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbXBvbmVudHMvQW50ZEljb25cIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5cbnZhciBDaGVja0NpcmNsZUZpbGxlZCA9IGZ1bmN0aW9uIENoZWNrQ2lyY2xlRmlsbGVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9BbnRkSWNvbi5kZWZhdWx0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogX0NoZWNrQ2lyY2xlRmlsbGVkLmRlZmF1bHRcbiAgfSkpO1xufTtcbkNoZWNrQ2lyY2xlRmlsbGVkLmRpc3BsYXlOYW1lID0gJ0NoZWNrQ2lyY2xlRmlsbGVkJztcbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENoZWNrQ2lyY2xlRmlsbGVkKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ2hlY2tDaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0xOTMuNSAzMDEuN2wtMjEwLjYgMjkyYTMxLjggMzEuOCAwIDAxLTUxLjcgMEwzMTguNSA0ODQuOWMtMy44LTUuMyAwLTEyLjcgNi41LTEyLjdoNDYuOWMxMC4yIDAgMTkuOSA0LjkgMjUuOSAxMy4zbDcxLjIgOTguOCAxNTcuMi0yMThjNi04LjMgMTUuNi0xMy4zIDI1LjktMTMuM0g2OTljNi41IDAgMTAuMyA3LjQgNi41IDEyLjd6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBDaGVja0NpcmNsZUZpbGxlZDtcbiIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gbnVsbCA9PSBhcnIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChudWxsICE9IF9pKSB7XG4gICAgdmFyIF9zLFxuICAgICAgX2UsXG4gICAgICBfeCxcbiAgICAgIF9yLFxuICAgICAgX2FyciA9IFtdLFxuICAgICAgX24gPSAhMCxcbiAgICAgIF9kID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChfeCA9IChfaSA9IF9pLmNhbGwoYXJyKSkubmV4dCwgMCA9PT0gaSkge1xuICAgICAgICBpZiAoT2JqZWN0KF9pKSAhPT0gX2kpIHJldHVybjtcbiAgICAgICAgX24gPSAhMTtcbiAgICAgIH0gZWxzZSBmb3IgKDsgIShfbiA9IChfcyA9IF94LmNhbGwoX2kpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gITAsIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIG51bGwgIT0gX2lbXCJyZXR1cm5cIl0gJiYgKF9yID0gX2lbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KF9yKSAhPT0gX3IpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2FycjtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29udGFpbnM7XG5mdW5jdGlvbiBjb250YWlucyhyb290LCBuKSB7XG4gIGlmICghcm9vdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFVzZSBuYXRpdmUgaWYgc3VwcG9ydFxuICBpZiAocm9vdC5jb250YWlucykge1xuICAgIHJldHVybiByb290LmNvbnRhaW5zKG4pO1xuICB9XG5cbiAgLy8gYGRvY3VtZW50LmNvbnRhaW5zYCBub3Qgc3VwcG9ydCB3aXRoIElFMTFcbiAgdmFyIG5vZGUgPSBuO1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlID09PSByb290KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0VHdvVG9uZUNvbG9yID0gZ2V0VHdvVG9uZUNvbG9yO1xuZXhwb3J0cy5zZXRUd29Ub25lQ29sb3IgPSBzZXRUd29Ub25lQ29sb3I7XG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcbnZhciBfSWNvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ljb25CYXNlXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5mdW5jdGlvbiBzZXRUd29Ub25lQ29sb3IodHdvVG9uZUNvbG9yKSB7XG4gIHZhciBfbm9ybWFsaXplVHdvVG9uZUNvbG8gPSAoMCwgX3V0aWxzLm5vcm1hbGl6ZVR3b1RvbmVDb2xvcnMpKHR3b1RvbmVDb2xvciksXG4gICAgX25vcm1hbGl6ZVR3b1RvbmVDb2xvMiA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkoX25vcm1hbGl6ZVR3b1RvbmVDb2xvLCAyKSxcbiAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgIHNlY29uZGFyeUNvbG9yID0gX25vcm1hbGl6ZVR3b1RvbmVDb2xvMlsxXTtcbiAgcmV0dXJuIF9JY29uQmFzZS5kZWZhdWx0LnNldFR3b1RvbmVDb2xvcnMoe1xuICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yOiBzZWNvbmRhcnlDb2xvclxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFR3b1RvbmVDb2xvcigpIHtcbiAgdmFyIGNvbG9ycyA9IF9JY29uQmFzZS5kZWZhdWx0LmdldFR3b1RvbmVDb2xvcnMoKTtcbiAgaWYgKCFjb2xvcnMuY2FsY3VsYXRlZCkge1xuICAgIHJldHVybiBjb2xvcnMucHJpbWFyeUNvbG9yO1xuICB9XG4gIHJldHVybiBbY29sb3JzLnByaW1hcnlDb2xvciwgY29sb3JzLnNlY29uZGFyeUNvbG9yXTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG52YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfQ2xvc2VDaXJjbGVGaWxsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9DbG9zZUNpcmNsZUZpbGxlZFwiKSk7XG52YXIgX0FudGRJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxudmFyIENsb3NlQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gQ2xvc2VDaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0FudGRJY29uLmRlZmF1bHQsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSgoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBfQ2xvc2VDaXJjbGVGaWxsZWQuZGVmYXVsdFxuICB9KSk7XG59O1xuQ2xvc2VDaXJjbGVGaWxsZWQuZGlzcGxheU5hbWUgPSAnQ2xvc2VDaXJjbGVGaWxsZWQnO1xudmFyIF9kZWZhdWx0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ2xvc2VDaXJjbGVGaWxsZWQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDbG9zZUNpcmNsZUZpbGxlZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwiZmlsbC1ydWxlXCI6IFwiZXZlbm9kZFwiLCBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NGMyNDcuNCAwIDQ0OCAyMDAuNiA0NDggNDQ4Uzc1OS40IDk2MCA1MTIgOTYwIDY0IDc1OS40IDY0IDUxMiAyNjQuNiA2NCA1MTIgNjR6bTEyNy45OCAyNzQuODJoLS4wNGwtLjA4LjA2TDUxMiA0NjYuNzUgMzg0LjE0IDMzOC44OGMtLjA0LS4wNS0uMDYtLjA2LS4wOC0uMDZhLjEyLjEyIDAgMDAtLjA3IDBjLS4wMyAwLS4wNS4wMS0uMDkuMDVsLTQ1LjAyIDQ1LjAyYS4yLjIgMCAwMC0uMDUuMDkuMTIuMTIgMCAwMDAgLjA3di4wMmEuMjcuMjcgMCAwMC4wNi4wNkw0NjYuNzUgNTEyIDMzOC44OCA2MzkuODZjLS4wNS4wNC0uMDYuMDYtLjA2LjA4YS4xMi4xMiAwIDAwMCAuMDdjMCAuMDMuMDEuMDUuMDUuMDlsNDUuMDIgNDUuMDJhLjIuMiAwIDAwLjA5LjA1LjEyLjEyIDAgMDAuMDcgMGMuMDIgMCAuMDQtLjAxLjA4LS4wNUw1MTIgNTU3LjI1bDEyNy44NiAxMjcuODdjLjA0LjA0LjA2LjA1LjA4LjA1YS4xMi4xMiAwIDAwLjA3IDBjLjAzIDAgLjA1LS4wMS4wOS0uMDVsNDUuMDItNDUuMDJhLjIuMiAwIDAwLjA1LS4wOS4xMi4xMiAwIDAwMC0uMDd2LS4wMmEuMjcuMjcgMCAwMC0uMDUtLjA2TDU1Ny4yNSA1MTJsMTI3Ljg3LTEyNy44NmMuMDQtLjA0LjA1LS4wNi4wNS0uMDhhLjEyLjEyIDAgMDAwLS4wN2MwLS4wMy0uMDEtLjA1LS4wNS0uMDlsLTQ1LjAyLTQ1LjAyYS4yLjIgMCAwMC0uMDktLjA1LjEyLjEyIDAgMDAtLjA3IDB6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjbG9zZS1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBDbG9zZUNpcmNsZUZpbGxlZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCIpKTtcbnZhciBfQW50ZEljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuXG52YXIgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQgPSBmdW5jdGlvbiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQW50ZEljb24uZGVmYXVsdCwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IF9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5kZWZhdWx0XG4gIH0pKTtcbn07XG5FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5kaXNwbGF5TmFtZSA9ICdFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCc7XG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptLTMyIDIzMmMwLTQuNCAzLjYtOCA4LThoNDhjNC40IDAgOCAzLjYgOCA4djI3MmMwIDQuNC0zLjYgOC04IDhoLTQ4Yy00LjQgMC04LTMuNi04LThWMjk2em0zMiA0NDBhNDguMDEgNDguMDEgMCAwMTAtOTYgNDguMDEgNDguMDEgMCAwMTAgOTZ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJleGNsYW1hdGlvbi1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZDtcbiIsIid1c2Ugc3RyaWN0JztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgXG4gIHZhciBfSW5mb0NpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9saWIvaWNvbnMvSW5mb0NpcmNsZUZpbGxlZCcpKTtcbiAgXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cbiAgXG4gIHZhciBfZGVmYXVsdCA9IF9JbmZvQ2lyY2xlRmlsbGVkO1xuICBleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG52YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfSW5mb0NpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0luZm9DaXJjbGVGaWxsZWRcIikpO1xudmFyIF9BbnRkSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbXBvbmVudHMvQW50ZEljb25cIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5cbnZhciBJbmZvQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gSW5mb0NpcmNsZUZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQW50ZEljb24uZGVmYXVsdCwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IF9JbmZvQ2lyY2xlRmlsbGVkLmRlZmF1bHRcbiAgfSkpO1xufTtcbkluZm9DaXJjbGVGaWxsZWQuZGlzcGxheU5hbWUgPSAnSW5mb0NpcmNsZUZpbGxlZCc7XG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbmZvQ2lyY2xlRmlsbGVkKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgSW5mb0NpcmNsZUZpbGxlZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTMyIDY2NGMwIDQuNC0zLjYgOC04IDhoLTQ4Yy00LjQgMC04LTMuNi04LThWNDU2YzAtNC40IDMuNi04IDgtOGg0OGM0LjQgMCA4IDMuNiA4IDh2Mjcyem0tMzItMzQ0YTQ4LjAxIDQ4LjAxIDAgMDEwLTk2IDQ4LjAxIDQ4LjAxIDAgMDEwIDk2elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiaW5mby1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBJbmZvQ2lyY2xlRmlsbGVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX0xvYWRpbmdPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0xvYWRpbmdPdXRsaW5lZFwiKSk7XG52YXIgX0FudGRJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxudmFyIExvYWRpbmdPdXRsaW5lZCA9IGZ1bmN0aW9uIExvYWRpbmdPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQW50ZEljb24uZGVmYXVsdCwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IF9Mb2FkaW5nT3V0bGluZWQuZGVmYXVsdFxuICB9KSk7XG59O1xuTG9hZGluZ091dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0xvYWRpbmdPdXRsaW5lZCc7XG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihMb2FkaW5nT3V0bGluZWQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMb2FkaW5nT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTk4OCA1NDhjLTE5LjkgMC0zNi0xNi4xLTM2LTM2IDAtNTkuNC0xMS42LTExNy0zNC42LTE3MS4zYTQ0MC40NSA0NDAuNDUgMCAwMC05NC4zLTEzOS45IDQzNy43MSA0MzcuNzEgMCAwMC0xMzkuOS05NC4zQzYyOSA4My42IDU3MS40IDcyIDUxMiA3MmMtMTkuOSAwLTM2LTE2LjEtMzYtMzZzMTYuMS0zNiAzNi0zNmM2OS4xIDAgMTM2LjIgMTMuNSAxOTkuMyA0MC4zQzc3Mi4zIDY2IDgyNyAxMDMgODc0IDE1MGM0NyA0NyA4My45IDEwMS44IDEwOS43IDE2Mi43IDI2LjcgNjMuMSA0MC4yIDEzMC4yIDQwLjIgMTk5LjMuMSAxOS45LTE2IDM2LTM1LjkgMzZ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJsb2FkaW5nXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBMb2FkaW5nT3V0bGluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjcmVhdGVVc2VNZXNzYWdlO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcbnZhciBfdXNlTm90aWZpY2F0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtbm90aWZpY2F0aW9uL2xpYi91c2VOb3RpZmljYXRpb25cIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfID0gcmVxdWlyZShcIi4uXCIpO1xudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWctcHJvdmlkZXJcIik7XG5mdW5jdGlvbiBjcmVhdGVVc2VNZXNzYWdlKGdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpIHtcbiAgdmFyIHVzZU1lc3NhZ2UgPSBmdW5jdGlvbiB1c2VNZXNzYWdlKCkge1xuICAgIC8vIFdlIGNhbiBvbmx5IGdldCBjb250ZW50IGJ5IHJlbmRlclxuICAgIHZhciBnZXRQcmVmaXhDbHM7XG4gICAgdmFyIGdldFBvcHVwQ29udGFpbmVyO1xuICAgIC8vIFdlIGNyZWF0ZSBhIHByb3h5IHRvIGhhbmRsZSBkZWxheSBjcmVhdGVkIGluc3RhbmNlXG4gICAgdmFyIGlubmVySW5zdGFuY2UgPSBudWxsO1xuICAgIHZhciBwcm94eSA9IHtcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG5vdGljZVByb3BzLCBob2xkZXJDYWxsYmFjaykge1xuICAgICAgICBpbm5lckluc3RhbmNlID09PSBudWxsIHx8IGlubmVySW5zdGFuY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVySW5zdGFuY2UuY29tcG9uZW50LmFkZChub3RpY2VQcm9wcywgaG9sZGVyQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIF91c2VSQ05vdGlmaWNhdGlvbiA9ICgwLCBfdXNlTm90aWZpY2F0aW9uW1wiZGVmYXVsdFwiXSkocHJveHkpLFxuICAgICAgX3VzZVJDTm90aWZpY2F0aW9uMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfdXNlUkNOb3RpZmljYXRpb24sIDIpLFxuICAgICAgaG9va05vdGlmeSA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMF0sXG4gICAgICBob2xkZXIgPSBfdXNlUkNOb3RpZmljYXRpb24yWzFdO1xuICAgIGZ1bmN0aW9uIG5vdGlmeShhcmdzKSB7XG4gICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gYXJncy5wcmVmaXhDbHM7XG4gICAgICB2YXIgbWVyZ2VkUHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdtZXNzYWdlJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIHZhciByb290UHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYXJncy5rZXkgfHwgKDAsIF8uZ2V0S2V5VGhlbkluY3JlYXNlS2V5KSgpO1xuICAgICAgdmFyIGNsb3NlUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJncy5vbkNsb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzLm9uQ2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgYXJncyksIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IG1lcmdlZFByZWZpeENscyxcbiAgICAgICAgICByb290UHJlZml4Q2xzOiByb290UHJlZml4Q2xzLFxuICAgICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBnZXRQb3B1cENvbnRhaW5lclxuICAgICAgICB9KSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICAgICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2U7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGhvb2tOb3RpZnkoZ2V0UkNOb3RpY2VQcm9wcygoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBhcmdzKSwge1xuICAgICAgICAgICAga2V5OiB0YXJnZXQsXG4gICAgICAgICAgICBvbkNsb3NlOiBjYWxsYmFja1xuICAgICAgICAgIH0pLCBwcmVmaXhDbHMpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICAgIGlmIChpbm5lckluc3RhbmNlKSB7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZS5yZW1vdmVOb3RpY2UodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlc3VsdC50aGVuID0gZnVuY3Rpb24gKGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGNsb3NlUHJvbWlzZS50aGVuKGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgICAgfTtcbiAgICAgIHJlc3VsdC5wcm9taXNlID0gY2xvc2VQcm9taXNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gRmlsbCBmdW5jdGlvbnNcbiAgICB2YXIgaG9va0FwaVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gICAgaG9va0FwaVJlZi5jdXJyZW50Lm9wZW4gPSBub3RpZnk7XG4gICAgXy50eXBlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gKDAsIF8uYXR0YWNoVHlwZUFwaSkoaG9va0FwaVJlZi5jdXJyZW50LCB0eXBlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hvb2tBcGlSZWYuY3VycmVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCB7XG4gICAgICBrZXk6IFwiaG9sZGVyXCJcbiAgICB9LCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgZ2V0UHJlZml4Q2xzID0gY29udGV4dC5nZXRQcmVmaXhDbHM7XG4gICAgICBnZXRQb3B1cENvbnRhaW5lciA9IGNvbnRleHQuZ2V0UG9wdXBDb250YWluZXI7XG4gICAgICByZXR1cm4gaG9sZGVyO1xuICAgIH0pXTtcbiAgfTtcbiAgcmV0dXJuIHVzZU1lc3NhZ2U7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xudmFyIF9jcmVhdGVTdXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZVN1cGVyXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbnZhciBOb3RpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoTm90aWNlLCBfQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9ICgwLCBfY3JlYXRlU3VwZXIyLmRlZmF1bHQpKE5vdGljZSk7XG4gIGZ1bmN0aW9uIE5vdGljZSgpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTm90aWNlKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICBfdGhpcy5jbG9zZVRpbWVyID0gbnVsbDtcbiAgICBfdGhpcy5jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgIG5vdGljZUtleSA9IF90aGlzJHByb3BzLm5vdGljZUtleTtcbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2Uobm90aWNlS2V5KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIF90aGlzLnN0YXJ0Q2xvc2VUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kdXJhdGlvbikge1xuICAgICAgICBfdGhpcy5jbG9zZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgIH0sIF90aGlzLnByb3BzLmR1cmF0aW9uICogMTAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfdGhpcy5jbGVhckNsb3NlVGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuY2xvc2VUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuY2xvc2VUaW1lcik7XG4gICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKE5vdGljZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuZHVyYXRpb24gIT09IHByZXZQcm9wcy5kdXJhdGlvbiB8fCB0aGlzLnByb3BzLnVwZGF0ZU1hcmsgIT09IHByZXZQcm9wcy51cGRhdGVNYXJrIHx8XG4gICAgICAvLyBWaXNpYmxlIGFnYWluIG5lZWQgcmVzZXQgdGltZXJcbiAgICAgIHRoaXMucHJvcHMudmlzaWJsZSAhPT0gcHJldlByb3BzLnZpc2libGUgJiYgdGhpcy5wcm9wcy52aXNpYmxlKSB7XG4gICAgICAgIHRoaXMucmVzdGFydENsb3NlVGltZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXN0YXJ0Q2xvc2VUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0YXJ0Q2xvc2VUaW1lcigpIHtcbiAgICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMyLnByZWZpeENscyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2xvc2FibGUgPSBfdGhpcyRwcm9wczIuY2xvc2FibGUsXG4gICAgICAgIGNsb3NlSWNvbiA9IF90aGlzJHByb3BzMi5jbG9zZUljb24sXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMyLm9uQ2xpY2ssXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICBob2xkZXIgPSBfdGhpcyRwcm9wczIuaG9sZGVyO1xuICAgICAgdmFyIGNvbXBvbmVudENsYXNzID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ub3RpY2VcIik7XG4gICAgICB2YXIgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBpZiAoa2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkuc3Vic3RyKDAsIDUpID09PSAnYXJpYS0nIHx8IGtleSA9PT0gJ3JvbGUnKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSBfdGhpczIucHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgdmFyIG5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY29tcG9uZW50Q2xhc3MsIGNsYXNzTmFtZSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jbG9zYWJsZVwiKSwgY2xvc2FibGUpKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuY2xlYXJDbG9zZVRpbWVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuc3RhcnRDbG9zZVRpbWVyLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICB9LCBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNvbnRlbnRcIilcbiAgICAgIH0sIGNoaWxkcmVuKSwgY2xvc2FibGUgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICB0YWJJbmRleDogMCxcbiAgICAgICAgb25DbGljazogdGhpcy5jbG9zZSxcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY2xvc2VcIilcbiAgICAgIH0sIGNsb3NlSWNvbiB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jbG9zZS14XCIpXG4gICAgICB9KSkgOiBudWxsKTtcbiAgICAgIGlmIChob2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3REb20uZGVmYXVsdC5jcmVhdGVQb3J0YWwobm9kZSwgaG9sZGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTm90aWNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTm90aWNlO1xuTm90aWNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBkdXJhdGlvbjogMS41XG59OyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG4gIHRyeSB7XG4gICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCIpO1xuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldEluc3RhbmNlID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX3JlZ2VuZXJhdG9yUnVudGltZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZVwiKSk7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG52YXIgX0NoZWNrQ2lyY2xlT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9DaGVja0NpcmNsZU91dGxpbmVkXCIpKTtcbnZhciBfQ2xvc2VDaXJjbGVPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL0Nsb3NlQ2lyY2xlT3V0bGluZWRcIikpO1xudmFyIF9DbG9zZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvQ2xvc2VPdXRsaW5lZFwiKSk7XG52YXIgX0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkXCIpKTtcbnZhciBfSW5mb0NpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvSW5mb0NpcmNsZU91dGxpbmVkXCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIF9yY05vdGlmaWNhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLW5vdGlmaWNhdGlvblwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jb25maWdQcm92aWRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIikpO1xudmFyIF91c2VOb3RpZmljYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hvb2tzL3VzZU5vdGlmaWNhdGlvblwiKSk7XG52YXIgX19hd2FpdGVyID0gdm9pZCAwICYmICh2b2lkIDApLl9fYXdhaXRlciB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIH1cbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufTtcbnZhciBub3RpZmljYXRpb25JbnN0YW5jZSA9IHt9O1xudmFyIGRlZmF1bHREdXJhdGlvbiA9IDQuNTtcbnZhciBkZWZhdWx0VG9wID0gMjQ7XG52YXIgZGVmYXVsdEJvdHRvbSA9IDI0O1xudmFyIGRlZmF1bHRQcmVmaXhDbHMgPSAnJztcbnZhciBkZWZhdWx0UGxhY2VtZW50ID0gJ3RvcFJpZ2h0JztcbnZhciBkZWZhdWx0R2V0Q29udGFpbmVyO1xudmFyIGRlZmF1bHRDbG9zZUljb247XG52YXIgcnRsID0gZmFsc2U7XG52YXIgbWF4Q291bnQ7XG5mdW5jdGlvbiBzZXROb3RpZmljYXRpb25Db25maWcob3B0aW9ucykge1xuICB2YXIgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgIHBsYWNlbWVudCA9IG9wdGlvbnMucGxhY2VtZW50LFxuICAgIGJvdHRvbSA9IG9wdGlvbnMuYm90dG9tLFxuICAgIHRvcCA9IG9wdGlvbnMudG9wLFxuICAgIGdldENvbnRhaW5lciA9IG9wdGlvbnMuZ2V0Q29udGFpbmVyLFxuICAgIGNsb3NlSWNvbiA9IG9wdGlvbnMuY2xvc2VJY29uLFxuICAgIHByZWZpeENscyA9IG9wdGlvbnMucHJlZml4Q2xzO1xuICBpZiAocHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0UHJlZml4Q2xzID0gcHJlZml4Q2xzO1xuICB9XG4gIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdER1cmF0aW9uID0gZHVyYXRpb247XG4gIH1cbiAgaWYgKHBsYWNlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdFBsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgfSBlbHNlIGlmIChvcHRpb25zLnJ0bCkge1xuICAgIGRlZmF1bHRQbGFjZW1lbnQgPSAndG9wTGVmdCc7XG4gIH1cbiAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdEJvdHRvbSA9IGJvdHRvbTtcbiAgfVxuICBpZiAodG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0VG9wID0gdG9wO1xuICB9XG4gIGlmIChnZXRDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRHZXRDb250YWluZXIgPSBnZXRDb250YWluZXI7XG4gIH1cbiAgaWYgKGNsb3NlSWNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdENsb3NlSWNvbiA9IGNsb3NlSWNvbjtcbiAgfVxuICBpZiAob3B0aW9ucy5ydGwgIT09IHVuZGVmaW5lZCkge1xuICAgIHJ0bCA9IG9wdGlvbnMucnRsO1xuICB9XG4gIGlmIChvcHRpb25zLm1heENvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBtYXhDb3VudCA9IG9wdGlvbnMubWF4Q291bnQ7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFBsYWNlbWVudFN0eWxlKHBsYWNlbWVudCkge1xuICB2YXIgdG9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0VG9wO1xuICB2YXIgYm90dG9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0Qm90dG9tO1xuICB2YXIgc3R5bGU7XG4gIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBib3R0b206ICdhdXRvJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RvcExlZnQnOlxuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBib3R0b206ICdhdXRvJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RvcFJpZ2h0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogJ2F1dG8nXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2JvdHRvbUxlZnQnOlxuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldE5vdGlmaWNhdGlvbkluc3RhbmNlKGFyZ3MsIGNhbGxiYWNrKSB7XG4gIHZhciBfYXJncyRwbGFjZW1lbnQgPSBhcmdzLnBsYWNlbWVudCxcbiAgICBwbGFjZW1lbnQgPSBfYXJncyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRQbGFjZW1lbnQgOiBfYXJncyRwbGFjZW1lbnQsXG4gICAgdG9wID0gYXJncy50b3AsXG4gICAgYm90dG9tID0gYXJncy5ib3R0b20sXG4gICAgX2FyZ3MkZ2V0Q29udGFpbmVyID0gYXJncy5nZXRDb250YWluZXIsXG4gICAgZ2V0Q29udGFpbmVyID0gX2FyZ3MkZ2V0Q29udGFpbmVyID09PSB2b2lkIDAgPyBkZWZhdWx0R2V0Q29udGFpbmVyIDogX2FyZ3MkZ2V0Q29udGFpbmVyLFxuICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IGFyZ3MucHJlZml4Q2xzO1xuICB2YXIgX2dsb2JhbENvbmZpZyA9ICgwLCBfY29uZmlnUHJvdmlkZXIuZ2xvYmFsQ29uZmlnKSgpLFxuICAgIGdldFByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0UHJlZml4Q2xzLFxuICAgIGdldEljb25QcmVmaXhDbHMgPSBfZ2xvYmFsQ29uZmlnLmdldEljb25QcmVmaXhDbHM7XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ25vdGlmaWNhdGlvbicsIGN1c3RvbWl6ZVByZWZpeENscyB8fCBkZWZhdWx0UHJlZml4Q2xzKTtcbiAgdmFyIGljb25QcmVmaXhDbHMgPSBnZXRJY29uUHJlZml4Q2xzKCk7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChwbGFjZW1lbnQpO1xuICB2YXIgY2FjaGVJbnN0YW5jZSA9IG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XTtcbiAgaWYgKGNhY2hlSW5zdGFuY2UpIHtcbiAgICBQcm9taXNlLnJlc29sdmUoY2FjaGVJbnN0YW5jZSkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgcHJlZml4Q2xzOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vdGljZVwiKSxcbiAgICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5vdGlmaWNhdGlvbkNsYXNzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHBsYWNlbWVudCksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBydGwgPT09IHRydWUpKTtcbiAgbm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBfcmNOb3RpZmljYXRpb25bXCJkZWZhdWx0XCJdLm5ld0luc3RhbmNlKHtcbiAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgY2xhc3NOYW1lOiBub3RpZmljYXRpb25DbGFzcyxcbiAgICAgIHN0eWxlOiBnZXRQbGFjZW1lbnRTdHlsZShwbGFjZW1lbnQsIHRvcCwgYm90dG9tKSxcbiAgICAgIGdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyLFxuICAgICAgbWF4Q291bnQ6IG1heENvdW50XG4gICAgfSwgZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgcmVzb2x2ZShub3RpZmljYXRpb24pO1xuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBwcmVmaXhDbHM6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbm90aWNlXCIpLFxuICAgICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgICBpbnN0YW5jZTogbm90aWZpY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG52YXIgdHlwZVRvSWNvbiA9IHtcbiAgc3VjY2VzczogX0NoZWNrQ2lyY2xlT3V0bGluZWRbXCJkZWZhdWx0XCJdLFxuICBpbmZvOiBfSW5mb0NpcmNsZU91dGxpbmVkW1wiZGVmYXVsdFwiXSxcbiAgZXJyb3I6IF9DbG9zZUNpcmNsZU91dGxpbmVkW1wiZGVmYXVsdFwiXSxcbiAgd2FybmluZzogX0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWRbXCJkZWZhdWx0XCJdXG59O1xuZnVuY3Rpb24gZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpIHtcbiAgdmFyIGR1cmF0aW9uQXJnID0gYXJncy5kdXJhdGlvbixcbiAgICBpY29uID0gYXJncy5pY29uLFxuICAgIHR5cGUgPSBhcmdzLnR5cGUsXG4gICAgZGVzY3JpcHRpb24gPSBhcmdzLmRlc2NyaXB0aW9uLFxuICAgIG1lc3NhZ2UgPSBhcmdzLm1lc3NhZ2UsXG4gICAgYnRuID0gYXJncy5idG4sXG4gICAgb25DbG9zZSA9IGFyZ3Mub25DbG9zZSxcbiAgICBvbkNsaWNrID0gYXJncy5vbkNsaWNrLFxuICAgIGtleSA9IGFyZ3Mua2V5LFxuICAgIHN0eWxlID0gYXJncy5zdHlsZSxcbiAgICBjbGFzc05hbWUgPSBhcmdzLmNsYXNzTmFtZSxcbiAgICBfYXJncyRjbG9zZUljb24gPSBhcmdzLmNsb3NlSWNvbixcbiAgICBjbG9zZUljb24gPSBfYXJncyRjbG9zZUljb24gPT09IHZvaWQgMCA/IGRlZmF1bHRDbG9zZUljb24gOiBfYXJncyRjbG9zZUljb24sXG4gICAgcHJvcHMgPSBhcmdzLnByb3BzO1xuICB2YXIgZHVyYXRpb24gPSBkdXJhdGlvbkFyZyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdER1cmF0aW9uIDogZHVyYXRpb25Bcmc7XG4gIHZhciBpY29uTm9kZSA9IG51bGw7XG4gIGlmIChpY29uKSB7XG4gICAgaWNvbk5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb25cIilcbiAgICB9LCBhcmdzLmljb24pO1xuICB9IGVsc2UgaWYgKHR5cGUpIHtcbiAgICBpY29uTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHR5cGVUb0ljb25bdHlwZV0gfHwgbnVsbCwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb24gXCIpLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb24tXCIpLmNvbmNhdCh0eXBlKVxuICAgIH0pO1xuICB9XG4gIHZhciBjbG9zZUljb25Ub1JlbmRlciA9IHR5cGVvZiBjbG9zZUljb24gPT09ICd1bmRlZmluZWQnID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2xvc2UteFwiKVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQ2xvc2VPdXRsaW5lZFtcImRlZmF1bHRcIl0sIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2xvc2UtaWNvblwiKVxuICB9KSkgOiBjbG9zZUljb247XG4gIHZhciBhdXRvTWFyZ2luVGFnID0gIWRlc2NyaXB0aW9uICYmIGljb25Ob2RlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWVzc2FnZS1zaW5nbGUtbGluZS1hdXRvLW1hcmdpblwiKVxuICB9KSA6IG51bGw7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENsc1xuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogaWNvbk5vZGUgPyBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdpdGgtaWNvblwiKSA6ICcnLFxuICAgICAgcm9sZTogXCJhbGVydFwiXG4gICAgfSwgaWNvbk5vZGUsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlXCIpXG4gICAgfSwgYXV0b01hcmdpblRhZywgbWVzc2FnZSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kZXNjcmlwdGlvblwiKVxuICAgIH0sIGRlc2NyaXB0aW9uKSwgYnRuID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1idG5cIilcbiAgICB9LCBidG4pIDogbnVsbCkpLFxuICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICBjbG9zYWJsZTogdHJ1ZSxcbiAgICBjbG9zZUljb246IGNsb3NlSWNvblRvUmVuZGVyLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBrZXk6IGtleSxcbiAgICBzdHlsZTogc3R5bGUgfHwge30sXG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShjbGFzc05hbWUsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdCh0eXBlKSwgISF0eXBlKSksXG4gICAgcHJvcHM6IHByb3BzXG4gIH07XG59XG5mdW5jdGlvbiBub3RpY2UoYXJncykge1xuICBnZXROb3RpZmljYXRpb25JbnN0YW5jZShhcmdzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgIGljb25QcmVmaXhDbHMgPSBfcmVmLmljb25QcmVmaXhDbHMsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2U7XG4gICAgaW5zdGFuY2Uubm90aWNlKGdldFJDTm90aWNlUHJvcHMoYXJncywgcHJlZml4Q2xzLCBpY29uUHJlZml4Q2xzKSk7XG4gIH0pO1xufVxudmFyIGFwaSA9IHtcbiAgb3Blbjogbm90aWNlLFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2Uoa2V5KSB7XG4gICAgT2JqZWN0LmtleXMobm90aWZpY2F0aW9uSW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlS2V5KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UucmVtb3ZlTm90aWNlKGtleSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgY29uZmlnOiBzZXROb3RpZmljYXRpb25Db25maWcsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgT2JqZWN0LmtleXMobm90aWZpY2F0aW9uSW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlS2V5KSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUobm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldKS50aGVuKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV07IC8vIGxndG1banMvbWlzc2luZy1hd2FpdF1cbiAgICB9KTtcbiAgfVxufTtcblxuWydzdWNjZXNzJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvciddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgYXBpW3R5cGVdID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICByZXR1cm4gYXBpLm9wZW4oKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgYXJncyksIHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KSk7XG4gIH07XG59KTtcbmFwaS53YXJuID0gYXBpLndhcm5pbmc7XG5hcGkudXNlTm90aWZpY2F0aW9uID0gKDAsIF91c2VOb3RpZmljYXRpb25bXCJkZWZhdWx0XCJdKShnZXROb3RpZmljYXRpb25JbnN0YW5jZSwgZ2V0UkNOb3RpY2VQcm9wcyk7XG4vKiogQGludGVybmFsIHRlc3QgT25seSBmdW5jdGlvbi4gTm90IHdvcmsgb24gcHJvZHVjdGlvbiAqL1xudmFyIGdldEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0SW5zdGFuY2UoY2FjaGVLZXkpIHtcbiAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovKDAsIF9yZWdlbmVyYXRvclJ1bnRpbWUyW1wiZGVmYXVsdFwiXSkoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgcmV0dXJuICgwLCBfcmVnZW5lcmF0b3JSdW50aW1lMltcImRlZmF1bHRcIl0pKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSA6IG51bGwpO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sIF9jYWxsZWUpO1xuICB9KSk7XG59O1xuZXhwb3J0cy5nZXRJbnN0YW5jZSA9IGdldEluc3RhbmNlO1xudmFyIF9kZWZhdWx0ID0gYXBpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICBcInVzZSBzdHJpY3RcIjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqL1xuICBtb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUgPSBmdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHZhciBleHBvcnRzID0ge30sXG4gICAgT3AgPSBPYmplY3QucHJvdG90eXBlLFxuICAgIGhhc093biA9IE9wLmhhc093blByb3BlcnR5LFxuICAgIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykge1xuICAgICAgb2JqW2tleV0gPSBkZXNjLnZhbHVlO1xuICAgIH0sXG4gICAgJFN5bWJvbCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sXG4gICAgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLFxuICAgIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIixcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICB3cml0YWJsZTogITBcbiAgICB9KSwgb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcixcbiAgICAgIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKSxcbiAgICAgIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG4gICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgXCJfaW52b2tlXCIsIHtcbiAgICAgIHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpXG4gICAgfSksIGdlbmVyYXRvcjtcbiAgfVxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGhyb3dcIixcbiAgICAgICAgYXJnOiBlcnJcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSAmJiAoSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSk7XG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChcInRocm93XCIgIT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnLFxuICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgXCJvYmplY3RcIiA9PSBfdHlwZW9mKHZhbHVlKSAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpID8gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pIDogUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodW53cmFwcGVkKSB7XG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkLCByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgfVxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaW52b2tlXCIsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShtZXRob2QsIGFyZykge1xuICAgICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0gcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChcImV4ZWN1dGluZ1wiID09PSBzdGF0ZSkgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIGlmIChcImNvbXBsZXRlZFwiID09PSBzdGF0ZSkge1xuICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSBtZXRob2QpIHRocm93IGFyZztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwibmV4dFwiID09PSBjb250ZXh0Lm1ldGhvZCkgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgICBpZiAoXCJzdXNwZW5kZWRTdGFydFwiID09PSBzdGF0ZSkgdGhyb3cgc3RhdGUgPSBcImNvbXBsZXRlZFwiLCBjb250ZXh0LmFyZztcbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcbiAgICAgICAgfSBlbHNlIFwicmV0dXJuXCIgPT09IGNvbnRleHQubWV0aG9kICYmIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgc3RhdGUgPSBcImV4ZWN1dGluZ1wiO1xuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChcIm5vcm1hbFwiID09PSByZWNvcmQudHlwZSkge1xuICAgICAgICAgIGlmIChzdGF0ZSA9IGNvbnRleHQuZG9uZSA/IFwiY29tcGxldGVkXCIgOiBcInN1c3BlbmRlZFlpZWxkXCIsIHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSBcImNvbXBsZXRlZFwiLCBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kTmFtZSA9IGNvbnRleHQubWV0aG9kLFxuICAgICAgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kTmFtZV07XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSByZXR1cm4gY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIFwidGhyb3dcIiA9PT0gbWV0aG9kTmFtZSAmJiBkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSAmJiAoY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCksIFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHx8IFwicmV0dXJuXCIgIT09IG1ldGhvZE5hbWUgJiYgKGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICdcIiArIG1ldGhvZE5hbWUgKyBcIicgbWV0aG9kXCIpKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSByZXR1cm4gY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZywgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWw7XG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuICAgIHJldHVybiBpbmZvID8gaW5mby5kb25lID8gKGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlLCBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jLCBcInJldHVyblwiICE9PSBjb250ZXh0Lm1ldGhvZCAmJiAoY29udGV4dC5tZXRob2QgPSBcIm5leHRcIiwgY29udGV4dC5hcmcgPSB1bmRlZmluZWQpLCBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgQ29udGludWVTZW50aW5lbCkgOiBpbmZvIDogKGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpO1xuICB9XG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0ge1xuICAgICAgdHJ5TG9jOiBsb2NzWzBdXG4gICAgfTtcbiAgICAxIGluIGxvY3MgJiYgKGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXSksIDIgaW4gbG9jcyAmJiAoZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl0sIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiLCBkZWxldGUgcmVjb3JkLmFyZywgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3tcbiAgICAgIHRyeUxvYzogXCJyb290XCJcbiAgICB9XSwgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpLCB0aGlzLnJlc2V0KCEwKTtcbiAgfVxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUgfHwgXCJcIiA9PT0gaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICBmb3IgKDsgKytpIDwgaXRlcmFibGUubGVuZ3RoOykgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkgcmV0dXJuIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHVuZGVmaW5lZCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoX3R5cGVvZihpdGVyYWJsZSkgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG4gIH1cbiAgcmV0dXJuIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmVQcm9wZXJ0eShHcCwgXCJjb25zdHJ1Y3RvclwiLCB7XG4gICAgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgfSksIGRlZmluZVByb3BlcnR5KEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgICB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sXG4gICAgY29uZmlndXJhYmxlOiAhMFxuICB9KSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGdlbkZ1biAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhY3RvciAmJiAoY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTtcbiAgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgZ2VuRnVuO1xuICB9LCBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBfX2F3YWl0OiBhcmdcbiAgICB9O1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgdm9pZCAwID09PSBQcm9taXNlSW1wbCAmJiAoUHJvbWlzZUltcGwgPSBQcm9taXNlKTtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgIH0pO1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLCBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YXIgb2JqZWN0ID0gT2JqZWN0KHZhbCksXG4gICAgICBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXMucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgZm9yICg7IGtleXMubGVuZ3RoOykge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHJldHVybiBuZXh0LnZhbHVlID0ga2V5LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICB9O1xuICB9LCBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIGlmICh0aGlzLnByZXYgPSAwLCB0aGlzLm5leHQgPSAwLCB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkLCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5kZWxlZ2F0ZSA9IG51bGwsIHRoaXMubWV0aG9kID0gXCJuZXh0XCIsIHRoaXMuYXJnID0gdW5kZWZpbmVkLCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIXNraXBUZW1wUmVzZXQpIGZvciAodmFyIG5hbWUgaW4gdGhpcykgXCJ0XCIgPT09IG5hbWUuY2hhckF0KDApICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkgJiYgKHRoaXNbbmFtZV0gPSB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuZG9uZSA9ICEwO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSB0aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHJvb3RSZWNvcmQudHlwZSkgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IFwidGhyb3dcIiwgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbiwgY29udGV4dC5uZXh0ID0gbG9jLCBjYXVnaHQgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXSxcbiAgICAgICAgICByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICBpZiAoXCJyb290XCIgPT09IGVudHJ5LnRyeUxvYykgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKSxcbiAgICAgICAgICAgIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgITApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc0ZpbmFsbHkpIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZpbmFsbHlFbnRyeSAmJiAoXCJicmVha1wiID09PSB0eXBlIHx8IFwiY29udGludWVcIiA9PT0gdHlwZSkgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jICYmIChmaW5hbGx5RW50cnkgPSBudWxsKTtcbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmV0dXJuIHJlY29yZC50eXBlID0gdHlwZSwgcmVjb3JkLmFyZyA9IGFyZywgZmluYWxseUVudHJ5ID8gKHRoaXMubWV0aG9kID0gXCJuZXh0XCIsIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jLCBDb250aW51ZVNlbnRpbmVsKSA6IHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZShyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIHJldHVybiBcImJyZWFrXCIgPT09IHJlY29yZC50eXBlIHx8IFwiY29udGludWVcIiA9PT0gcmVjb3JkLnR5cGUgPyB0aGlzLm5leHQgPSByZWNvcmQuYXJnIDogXCJyZXR1cm5cIiA9PT0gcmVjb3JkLnR5cGUgPyAodGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnLCB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCIsIHRoaXMubmV4dCA9IFwiZW5kXCIpIDogXCJub3JtYWxcIiA9PT0gcmVjb3JkLnR5cGUgJiYgYWZ0ZXJMb2MgJiYgKHRoaXMubmV4dCA9IGFmdGVyTG9jKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuICAgIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykgcmV0dXJuIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpLCByZXNldFRyeUVudHJ5KGVudHJ5KSwgQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH0sIFwibmV4dFwiID09PSB0aGlzLm1ldGhvZCAmJiAodGhpcy5hcmcgPSB1bmRlZmluZWQpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfSwgZXhwb3J0cztcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yUnVudGltZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0JztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgXG4gIHZhciBfQ2hlY2tDaXJjbGVPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9saWIvaWNvbnMvQ2hlY2tDaXJjbGVPdXRsaW5lZCcpKTtcbiAgXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cbiAgXG4gIHZhciBfZGVmYXVsdCA9IF9DaGVja0NpcmNsZU91dGxpbmVkO1xuICBleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG52YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfQ2hlY2tDaXJjbGVPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0NoZWNrQ2lyY2xlT3V0bGluZWRcIikpO1xudmFyIF9BbnRkSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbXBvbmVudHMvQW50ZEljb25cIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5cbnZhciBDaGVja0NpcmNsZU91dGxpbmVkID0gZnVuY3Rpb24gQ2hlY2tDaXJjbGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQW50ZEljb24uZGVmYXVsdCwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IF9DaGVja0NpcmNsZU91dGxpbmVkLmRlZmF1bHRcbiAgfSkpO1xufTtcbkNoZWNrQ2lyY2xlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnQ2hlY2tDaXJjbGVPdXRsaW5lZCc7XG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDaGVja0NpcmNsZU91dGxpbmVkKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ2hlY2tDaXJjbGVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNjk5IDM1M2gtNDYuOWMtMTAuMiAwLTE5LjkgNC45LTI1LjkgMTMuM0w0NjkgNTg0LjNsLTcxLjItOTguOGMtNi04LjMtMTUuNi0xMy4zLTI1LjktMTMuM0gzMjVjLTYuNSAwLTEwLjMgNy40LTYuNSAxMi43bDEyNC42IDE3Mi44YTMxLjggMzEuOCAwIDAwNTEuNyAwbDIxMC42LTI5MmMzLjktNS4zLjEtMTIuNy02LjQtMTIuN3pcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyelwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiY2hlY2stY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBDaGVja0NpcmNsZU91dGxpbmVkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBcbiAgdmFyIF9DbG9zZUNpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9DbG9zZUNpcmNsZU91dGxpbmVkJykpO1xuICBcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuICBcbiAgdmFyIF9kZWZhdWx0ID0gX0Nsb3NlQ2lyY2xlT3V0bGluZWQ7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuICBtb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9DbG9zZUNpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vQ2xvc2VDaXJjbGVPdXRsaW5lZFwiKSk7XG52YXIgX0FudGRJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxudmFyIENsb3NlQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBDbG9zZUNpcmNsZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9BbnRkSWNvbi5kZWZhdWx0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogX0Nsb3NlQ2lyY2xlT3V0bGluZWQuZGVmYXVsdFxuICB9KSk7XG59O1xuQ2xvc2VDaXJjbGVPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdDbG9zZUNpcmNsZU91dGxpbmVkJztcbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENsb3NlQ2lyY2xlT3V0bGluZWQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDbG9zZUNpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJmaWxsLXJ1bGVcIjogXCJldmVub2RkXCIsIFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0YzI0Ny40IDAgNDQ4IDIwMC42IDQ0OCA0NDhTNzU5LjQgOTYwIDUxMiA5NjAgNjQgNzU5LjQgNjQgNTEyIDI2NC42IDY0IDUxMiA2NHptMCA3NmMtMjA1LjQgMC0zNzIgMTY2LjYtMzcyIDM3MnMxNjYuNiAzNzIgMzcyIDM3MiAzNzItMTY2LjYgMzcyLTM3Mi0xNjYuNi0zNzItMzcyLTM3MnptMTI4LjAxIDE5OC44M2MuMDMgMCAuMDUuMDEuMDkuMDZsNDUuMDIgNDUuMDFhLjIuMiAwIDAxLjA1LjA5LjEyLjEyIDAgMDEwIC4wN2MwIC4wMi0uMDEuMDQtLjA1LjA4TDU1Ny4yNSA1MTJsMTI3Ljg3IDEyNy44NmEuMjcuMjcgMCAwMS4wNS4wNnYuMDJhLjEyLjEyIDAgMDEwIC4wN2MwIC4wMy0uMDEuMDUtLjA1LjA5bC00NS4wMiA0NS4wMmEuMi4yIDAgMDEtLjA5LjA1LjEyLjEyIDAgMDEtLjA3IDBjLS4wMiAwLS4wNC0uMDEtLjA4LS4wNUw1MTIgNTU3LjI1IDM4NC4xNCA2ODUuMTJjLS4wNC4wNC0uMDYuMDUtLjA4LjA1YS4xMi4xMiAwIDAxLS4wNyAwYy0uMDMgMC0uMDUtLjAxLS4wOS0uMDVsLTQ1LjAyLTQ1LjAyYS4yLjIgMCAwMS0uMDUtLjA5LjEyLjEyIDAgMDEwLS4wN2MwLS4wMi4wMS0uMDQuMDYtLjA4TDQ2Ni43NSA1MTIgMzM4Ljg4IDM4NC4xNGEuMjcuMjcgMCAwMS0uMDUtLjA2bC0uMDEtLjAyYS4xMi4xMiAwIDAxMC0uMDdjMC0uMDMuMDEtLjA1LjA1LS4wOWw0NS4wMi00NS4wMmEuMi4yIDAgMDEuMDktLjA1LjEyLjEyIDAgMDEuMDcgMGMuMDIgMCAuMDQuMDEuMDguMDZMNTEyIDQ2Ni43NWwxMjcuODYtMTI3Ljg2Yy4wNC0uMDUuMDYtLjA2LjA4LS4wNmEuMTIuMTIgMCAwMS4wNyAwelwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiY2xvc2UtY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBDbG9zZUNpcmNsZU91dGxpbmVkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBcbiAgdmFyIF9DbG9zZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9DbG9zZU91dGxpbmVkJykpO1xuICBcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuICBcbiAgdmFyIF9kZWZhdWx0ID0gX0Nsb3NlT3V0bGluZWQ7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuICBtb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9DbG9zZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vQ2xvc2VPdXRsaW5lZFwiKSk7XG52YXIgX0FudGRJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxudmFyIENsb3NlT3V0bGluZWQgPSBmdW5jdGlvbiBDbG9zZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9BbnRkSWNvbi5kZWZhdWx0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogX0Nsb3NlT3V0bGluZWQuZGVmYXVsdFxuICB9KSk7XG59O1xuQ2xvc2VPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdDbG9zZU91dGxpbmVkJztcbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENsb3NlT3V0bGluZWQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDbG9zZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJmaWxsLXJ1bGVcIjogXCJldmVub2RkXCIsIFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNzk5Ljg2IDE2Ni4zMWMuMDIgMCAuMDQuMDIuMDguMDZsNTcuNjkgNTcuN2MuMDQuMDMuMDUuMDUuMDYuMDhhLjEyLjEyIDAgMDEwIC4wNmMwIC4wMy0uMDIuMDUtLjA2LjA5TDU2OS45MyA1MTJsMjg3LjcgMjg3LjdjLjA0LjA0LjA1LjA2LjA2LjA5YS4xMi4xMiAwIDAxMCAuMDdjMCAuMDItLjAyLjA0LS4wNi4wOGwtNTcuNyA1Ny42OWMtLjAzLjA0LS4wNS4wNS0uMDcuMDZhLjEyLjEyIDAgMDEtLjA3IDBjLS4wMyAwLS4wNS0uMDItLjA5LS4wNkw1MTIgNTY5LjkzbC0yODcuNyAyODcuN2MtLjA0LjA0LS4wNi4wNS0uMDkuMDZhLjEyLjEyIDAgMDEtLjA3IDBjLS4wMiAwLS4wNC0uMDItLjA4LS4wNmwtNTcuNjktNTcuN2MtLjA0LS4wMy0uMDUtLjA1LS4wNi0uMDdhLjEyLjEyIDAgMDEwLS4wN2MwLS4wMy4wMi0uMDUuMDYtLjA5TDQ1NC4wNyA1MTJsLTI4Ny43LTI4Ny43Yy0uMDQtLjA0LS4wNS0uMDYtLjA2LS4wOWEuMTIuMTIgMCAwMTAtLjA3YzAtLjAyLjAyLS4wNC4wNi0uMDhsNTcuNy01Ny42OWMuMDMtLjA0LjA1LS4wNS4wNy0uMDZhLjEyLjEyIDAgMDEuMDcgMGMuMDMgMCAuMDUuMDIuMDkuMDZMNTEyIDQ1NC4wN2wyODcuNy0yODcuN2MuMDQtLjA0LjA2LS4wNS4wOS0uMDZhLjEyLjEyIDAgMDEuMDcgMHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNsb3NlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBDbG9zZU91dGxpbmVkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBcbiAgdmFyIF9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkJykpO1xuICBcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuICBcbiAgdmFyIF9kZWZhdWx0ID0gX0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQ7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuICBtb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFwiKSk7XG52YXIgX0FudGRJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxudmFyIEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9BbnRkSWNvbi5kZWZhdWx0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogX0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQuZGVmYXVsdFxuICB9KSk7XG59O1xuRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkJztcbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6XCIgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTQ2NCA2ODhhNDggNDggMCAxMDk2IDAgNDggNDggMCAxMC05NiAwem0yNC0xMTJoNDhjNC40IDAgOC0zLjYgOC04VjI5NmMwLTQuNC0zLjYtOC04LThoLTQ4Yy00LjQgMC04IDMuNi04IDh2MjcyYzAgNC40IDMuNiA4IDggOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImV4Y2xhbWF0aW9uLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZDtcbiIsIid1c2Ugc3RyaWN0JztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgXG4gIHZhciBfSW5mb0NpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9JbmZvQ2lyY2xlT3V0bGluZWQnKSk7XG4gIFxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG4gIFxuICB2YXIgX2RlZmF1bHQgPSBfSW5mb0NpcmNsZU91dGxpbmVkO1xuICBleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG52YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfSW5mb0NpcmNsZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vSW5mb0NpcmNsZU91dGxpbmVkXCIpKTtcbnZhciBfQW50ZEljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuXG52YXIgSW5mb0NpcmNsZU91dGxpbmVkID0gZnVuY3Rpb24gSW5mb0NpcmNsZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9BbnRkSWNvbi5kZWZhdWx0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogX0luZm9DaXJjbGVPdXRsaW5lZC5kZWZhdWx0XG4gIH0pKTtcbn07XG5JbmZvQ2lyY2xlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnSW5mb0NpcmNsZU91dGxpbmVkJztcbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEluZm9DaXJjbGVPdXRsaW5lZCk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEluZm9DaXJjbGVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyelwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk00NjQgMzM2YTQ4IDQ4IDAgMTA5NiAwIDQ4IDQ4IDAgMTAtOTYgMHptNzIgMTEyaC00OGMtNC40IDAtOCAzLjYtOCA4djI3MmMwIDQuNCAzLjYgOCA4IDhoNDhjNC40IDAgOC0zLjYgOC04VjQ1NmMwLTQuNC0zLjYtOC04LTh6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJpbmZvLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gSW5mb0NpcmNsZU91dGxpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gY3JlYXRlVXNlTm90aWZpY2F0aW9uO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcbnZhciBfdXNlTm90aWZpY2F0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtbm90aWZpY2F0aW9uL2xpYi91c2VOb3RpZmljYXRpb25cIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuZnVuY3Rpb24gY3JlYXRlVXNlTm90aWZpY2F0aW9uKGdldE5vdGlmaWNhdGlvbkluc3RhbmNlLCBnZXRSQ05vdGljZVByb3BzKSB7XG4gIHZhciB1c2VOb3RpZmljYXRpb24gPSBmdW5jdGlvbiB1c2VOb3RpZmljYXRpb24oKSB7XG4gICAgLy8gV2UgY2FuIG9ubHkgZ2V0IGNvbnRlbnQgYnkgcmVuZGVyXG4gICAgdmFyIGdldFByZWZpeENscztcbiAgICAvLyBXZSBjcmVhdGUgYSBwcm94eSB0byBoYW5kbGUgZGVsYXkgY3JlYXRlZCBpbnN0YW5jZVxuICAgIHZhciBpbm5lckluc3RhbmNlID0gbnVsbDtcbiAgICB2YXIgcHJveHkgPSB7XG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChub3RpY2VQcm9wcywgaG9sZGVyQ2FsbGJhY2spIHtcbiAgICAgICAgaW5uZXJJbnN0YW5jZSA9PT0gbnVsbCB8fCBpbm5lckluc3RhbmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lckluc3RhbmNlLmNvbXBvbmVudC5hZGQobm90aWNlUHJvcHMsIGhvbGRlckNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBfdXNlUkNOb3RpZmljYXRpb24gPSAoMCwgX3VzZU5vdGlmaWNhdGlvbltcImRlZmF1bHRcIl0pKHByb3h5KSxcbiAgICAgIF91c2VSQ05vdGlmaWNhdGlvbjIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX3VzZVJDTm90aWZpY2F0aW9uLCAyKSxcbiAgICAgIGhvb2tOb3RpZnkgPSBfdXNlUkNOb3RpZmljYXRpb24yWzBdLFxuICAgICAgaG9sZGVyID0gX3VzZVJDTm90aWZpY2F0aW9uMlsxXTtcbiAgICBmdW5jdGlvbiBub3RpZnkoYXJncykge1xuICAgICAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IGFyZ3MucHJlZml4Q2xzO1xuICAgICAgdmFyIG1lcmdlZFByZWZpeENscyA9IGdldFByZWZpeENscygnbm90aWZpY2F0aW9uJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIGdldE5vdGlmaWNhdGlvbkluc3RhbmNlKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGFyZ3MpLCB7XG4gICAgICAgIHByZWZpeENsczogbWVyZ2VkUHJlZml4Q2xzXG4gICAgICB9KSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgICAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZTtcbiAgICAgICAgaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBob29rTm90aWZ5KGdldFJDTm90aWNlUHJvcHMoYXJncywgcHJlZml4Q2xzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gRmlsbCBmdW5jdGlvbnNcbiAgICB2YXIgaG9va0FwaVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gICAgaG9va0FwaVJlZi5jdXJyZW50Lm9wZW4gPSBub3RpZnk7XG4gICAgWydzdWNjZXNzJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvciddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIGhvb2tBcGlSZWYuY3VycmVudFt0eXBlXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiBob29rQXBpUmVmLmN1cnJlbnQub3BlbigoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBhcmdzKSwge1xuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hvb2tBcGlSZWYuY3VycmVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCB7XG4gICAgICBrZXk6IFwiaG9sZGVyXCJcbiAgICB9LCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgZ2V0UHJlZml4Q2xzID0gY29udGV4dC5nZXRQcmVmaXhDbHM7XG4gICAgICByZXR1cm4gaG9sZGVyO1xuICAgIH0pXTtcbiAgfTtcbiAgcmV0dXJuIHVzZU5vdGlmaWNhdGlvbjtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Db25maWdDb250ZXh0ID0gZXhwb3J0cy5Db25maWdDb25zdW1lciA9IHZvaWQgMDtcbmV4cG9ydHMud2l0aENvbmZpZ0NvbnN1bWVyID0gd2l0aENvbmZpZ0NvbnN1bWVyO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIGRlZmF1bHRHZXRQcmVmaXhDbHMgPSBmdW5jdGlvbiBkZWZhdWx0R2V0UHJlZml4Q2xzKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gIGlmIChjdXN0b21pemVQcmVmaXhDbHMpIHJldHVybiBjdXN0b21pemVQcmVmaXhDbHM7XG4gIHJldHVybiBzdWZmaXhDbHMgPyBcImFudC1cIi5jb25jYXQoc3VmZml4Q2xzKSA6ICdhbnQnO1xufTtcbi8vIHpvbWJpZUo6IPCfmqggRG8gbm90IHBhc3MgYGRlZmF1bHRSZW5kZXJFbXB0eWAgaGVyZSBzaW5jZSBpdCB3aWxsIGNhc2UgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbnZhciBDb25maWdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAvLyBXZSBwcm92aWRlIGEgZGVmYXVsdCBmdW5jdGlvbiBmb3IgQ29udGV4dCB3aXRob3V0IHByb3ZpZGVyXG4gIGdldFByZWZpeENsczogZGVmYXVsdEdldFByZWZpeENsc1xufSk7XG5leHBvcnRzLkNvbmZpZ0NvbnRleHQgPSBDb25maWdDb250ZXh0O1xudmFyIENvbmZpZ0NvbnN1bWVyID0gQ29uZmlnQ29udGV4dC5Db25zdW1lcjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaG9va3MgaW5zdGVhZC4gVGhpcyBpcyBhIGxlZ2FjeSBmdW5jdGlvbiAqL1xuZXhwb3J0cy5Db25maWdDb25zdW1lciA9IENvbmZpZ0NvbnN1bWVyO1xuZnVuY3Rpb24gd2l0aENvbmZpZ0NvbnN1bWVyKGNvbmZpZykge1xuICByZXR1cm4gZnVuY3Rpb24gd2l0aENvbmZpZ0NvbnN1bWVyRnVuYyhDb21wb25lbnQpIHtcbiAgICAvLyBXcmFwIHdpdGggQ29uZmlnQ29uc3VtZXIuIFNpbmNlIHdlIG5lZWQgY29tcGF0aWJsZSB3aXRoIHJlYWN0IDE1LCBiZSBjYXJlIHdoZW4gdXNpbmcgcmVmIG1ldGhvZHNcbiAgICB2YXIgU0ZDID0gZnVuY3Rpb24gU0ZDKHByb3BzKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb25maWdQcm9wcykge1xuICAgICAgICB2YXIgYmFzaWNQcmVmaXhDbHMgPSBjb25maWcucHJlZml4Q2xzO1xuICAgICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gY29uZmlnUHJvcHMuZ2V0UHJlZml4Q2xzO1xuICAgICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzO1xuICAgICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKGJhc2ljUHJlZml4Q2xzLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGNvbmZpZ1Byb3BzLCBwcm9wcywge1xuICAgICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGNvbnMgPSBDb21wb25lbnQuY29uc3RydWN0b3I7XG4gICAgdmFyIG5hbWUgPSBjb25zICYmIGNvbnMuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFNGQy5kaXNwbGF5TmFtZSA9IFwid2l0aENvbmZpZ0NvbnN1bWVyKFwiLmNvbmNhdChuYW1lLCBcIilcIik7XG4gICAgfVxuICAgIHJldHVybiBTRkM7XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFN0eWxlID0gZ2V0U3R5bGU7XG5leHBvcnRzLnJlZ2lzdGVyVGhlbWUgPSByZWdpc3RlclRoZW1lO1xudmFyIF9jb2xvcnMgPSByZXF1aXJlKFwiQGFudC1kZXNpZ24vY29sb3JzXCIpO1xudmFyIF90aW55Y29sb3IgPSByZXF1aXJlKFwiQGN0cmwvdGlueWNvbG9yXCIpO1xudmFyIF9jYW5Vc2VEb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9Eb20vY2FuVXNlRG9tXCIpKTtcbnZhciBfZHluYW1pY0NTUyA9IHJlcXVpcmUoXCJyYy11dGlsL2xpYi9Eb20vZHluYW1pY0NTU1wiKTtcbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCwgcHJlZmVyLWRlc3RydWN0dXJpbmcgKi9cblxudmFyIGR5bmFtaWNTdHlsZU1hcmsgPSBcIi1hbnQtXCIuY29uY2F0KERhdGUubm93KCksIFwiLVwiKS5jb25jYXQoTWF0aC5yYW5kb20oKSk7XG5mdW5jdGlvbiBnZXRTdHlsZShnbG9iYWxQcmVmaXhDbHMsIHRoZW1lKSB7XG4gIHZhciB2YXJpYWJsZXMgPSB7fTtcbiAgdmFyIGZvcm1hdENvbG9yID0gZnVuY3Rpb24gZm9ybWF0Q29sb3IoY29sb3IsIHVwZGF0ZXIpIHtcbiAgICB2YXIgY2xvbmUgPSBjb2xvci5jbG9uZSgpO1xuICAgIGNsb25lID0gKHVwZGF0ZXIgPT09IG51bGwgfHwgdXBkYXRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXBkYXRlcihjbG9uZSkpIHx8IGNsb25lO1xuICAgIHJldHVybiBjbG9uZS50b1JnYlN0cmluZygpO1xuICB9O1xuICB2YXIgZmlsbENvbG9yID0gZnVuY3Rpb24gZmlsbENvbG9yKGNvbG9yVmFsLCB0eXBlKSB7XG4gICAgdmFyIGJhc2VDb2xvciA9IG5ldyBfdGlueWNvbG9yLlRpbnlDb2xvcihjb2xvclZhbCk7XG4gICAgdmFyIGNvbG9yUGFsZXR0ZXMgPSAoMCwgX2NvbG9ycy5nZW5lcmF0ZSkoYmFzZUNvbG9yLnRvUmdiU3RyaW5nKCkpO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvclwiKV0gPSBmb3JtYXRDb2xvcihiYXNlQ29sb3IpO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1kaXNhYmxlZFwiKV0gPSBjb2xvclBhbGV0dGVzWzFdO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1ob3ZlclwiKV0gPSBjb2xvclBhbGV0dGVzWzRdO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1hY3RpdmVcIildID0gY29sb3JQYWxldHRlc1s2XTtcbiAgICB2YXJpYWJsZXNbXCJcIi5jb25jYXQodHlwZSwgXCItY29sb3Itb3V0bGluZVwiKV0gPSBiYXNlQ29sb3IuY2xvbmUoKS5zZXRBbHBoYSgwLjIpLnRvUmdiU3RyaW5nKCk7XG4gICAgdmFyaWFibGVzW1wiXCIuY29uY2F0KHR5cGUsIFwiLWNvbG9yLWRlcHJlY2F0ZWQtYmdcIildID0gY29sb3JQYWxldHRlc1swXTtcbiAgICB2YXJpYWJsZXNbXCJcIi5jb25jYXQodHlwZSwgXCItY29sb3ItZGVwcmVjYXRlZC1ib3JkZXJcIildID0gY29sb3JQYWxldHRlc1syXTtcbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09PSBQcmltYXJ5IENvbG9yID09PT09PT09PT09PT09PT1cbiAgaWYgKHRoZW1lLnByaW1hcnlDb2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS5wcmltYXJ5Q29sb3IsICdwcmltYXJ5Jyk7XG4gICAgdmFyIHByaW1hcnlDb2xvciA9IG5ldyBfdGlueWNvbG9yLlRpbnlDb2xvcih0aGVtZS5wcmltYXJ5Q29sb3IpO1xuICAgIHZhciBwcmltYXJ5Q29sb3JzID0gKDAsIF9jb2xvcnMuZ2VuZXJhdGUpKHByaW1hcnlDb2xvci50b1JnYlN0cmluZygpKTtcbiAgICAvLyBMZWdhY3kgLSBXZSBzaG91bGQgdXNlIHNlbWFudGljIG5hbWluZyBzdGFuZGFyZFxuICAgIHByaW1hcnlDb2xvcnMuZm9yRWFjaChmdW5jdGlvbiAoY29sb3IsIGluZGV4KSB7XG4gICAgICB2YXJpYWJsZXNbXCJwcmltYXJ5LVwiLmNvbmNhdChpbmRleCArIDEpXSA9IGNvbG9yO1xuICAgIH0pO1xuICAgIC8vIERlcHJlY2F0ZWRcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1sLTM1J10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5saWdodGVuKDM1KTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1sLTIwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5saWdodGVuKDIwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC10LTIwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy50aW50KDIwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC10LTUwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy50aW50KDUwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1mLTEyJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5zZXRBbHBoYShjLmdldEFscGhhKCkgKiAwLjEyKTtcbiAgICB9KTtcbiAgICB2YXIgcHJpbWFyeUFjdGl2ZUNvbG9yID0gbmV3IF90aW55Y29sb3IuVGlueUNvbG9yKHByaW1hcnlDb2xvcnNbMF0pO1xuICAgIHZhcmlhYmxlc1sncHJpbWFyeS1jb2xvci1hY3RpdmUtZGVwcmVjYXRlZC1mLTMwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5QWN0aXZlQ29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5zZXRBbHBoYShjLmdldEFscGhhKCkgKiAwLjMpO1xuICAgIH0pO1xuICAgIHZhcmlhYmxlc1sncHJpbWFyeS1jb2xvci1hY3RpdmUtZGVwcmVjYXRlZC1kLTAyJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5QWN0aXZlQ29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5kYXJrZW4oMik7XG4gICAgfSk7XG4gIH1cbiAgLy8gPT09PT09PT09PT09PT09PSBTdWNjZXNzIENvbG9yID09PT09PT09PT09PT09PT1cbiAgaWYgKHRoZW1lLnN1Y2Nlc3NDb2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS5zdWNjZXNzQ29sb3IsICdzdWNjZXNzJyk7XG4gIH1cbiAgLy8gPT09PT09PT09PT09PT09PSBXYXJuaW5nIENvbG9yID09PT09PT09PT09PT09PT1cbiAgaWYgKHRoZW1lLndhcm5pbmdDb2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS53YXJuaW5nQ29sb3IsICd3YXJuaW5nJyk7XG4gIH1cbiAgLy8gPT09PT09PT09PT09PT09PT0gRXJyb3IgQ29sb3IgPT09PT09PT09PT09PT09PT1cbiAgaWYgKHRoZW1lLmVycm9yQ29sb3IpIHtcbiAgICBmaWxsQ29sb3IodGhlbWUuZXJyb3JDb2xvciwgJ2Vycm9yJyk7XG4gIH1cbiAgLy8gPT09PT09PT09PT09PT09PT0gSW5mbyBDb2xvciA9PT09PT09PT09PT09PT09PT1cbiAgaWYgKHRoZW1lLmluZm9Db2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS5pbmZvQ29sb3IsICdpbmZvJyk7XG4gIH1cbiAgLy8gQ29udmVydCB0byBjc3MgdmFyaWFibGVzXG4gIHZhciBjc3NMaXN0ID0gT2JqZWN0LmtleXModmFyaWFibGVzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBcIi0tXCIuY29uY2F0KGdsb2JhbFByZWZpeENscywgXCItXCIpLmNvbmNhdChrZXksIFwiOiBcIikuY29uY2F0KHZhcmlhYmxlc1trZXldLCBcIjtcIik7XG4gIH0pO1xuICByZXR1cm4gXCJcXG4gIDpyb290IHtcXG4gICAgXCIuY29uY2F0KGNzc0xpc3Quam9pbignXFxuJyksIFwiXFxuICB9XFxuICBcIikudHJpbSgpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJUaGVtZShnbG9iYWxQcmVmaXhDbHMsIHRoZW1lKSB7XG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKGdsb2JhbFByZWZpeENscywgdGhlbWUpO1xuICBpZiAoKDAsIF9jYW5Vc2VEb21bXCJkZWZhdWx0XCJdKSgpKSB7XG4gICAgKDAsIF9keW5hbWljQ1NTLnVwZGF0ZUNTUykoc3R5bGUsIFwiXCIuY29uY2F0KGR5bmFtaWNTdHlsZU1hcmssIFwiLWR5bmFtaWMtdGhlbWVcIikpO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKGZhbHNlLCAnQ29uZmlnUHJvdmlkZXInLCAnU1NSIGRvIG5vdCBzdXBwb3J0IGR5bmFtaWMgdGhlbWUgd2l0aCBjc3MgdmFyaWFibGVzLicpIDogdm9pZCAwO1xuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpc3RcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3JjRmllbGRGb3JtLkxpc3Q7XG4gIH1cbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VGb3JtXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91c2VGb3JtM1tcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlV2F0Y2hcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3JjRmllbGRGb3JtLnVzZVdhdGNoO1xuICB9XG59KTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3JjRmllbGRGb3JtID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJjLWZpZWxkLWZvcm1cIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9EaXNhYmxlZENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyL0Rpc2FibGVkQ29udGV4dFwiKSk7XG52YXIgX1NpemVDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dFwiKSk7XG52YXIgX2NvbnRleHQgPSByZXF1aXJlKFwiLi9jb250ZXh0XCIpO1xudmFyIF92YWxpZGF0ZU1lc3NhZ2VzQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmFsaWRhdGVNZXNzYWdlc0NvbnRleHRcIikpO1xudmFyIF91c2VGb3JtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaG9va3MvdXNlRm9ybVwiKSk7XG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xudmFyIEludGVybmFsRm9ybSA9IGZ1bmN0aW9uIEludGVybmFsRm9ybShwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIGNvbnRleHRTaXplID0gUmVhY3QudXNlQ29udGV4dChfU2l6ZUNvbnRleHRbXCJkZWZhdWx0XCJdKTtcbiAgdmFyIGNvbnRleHREaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoX0Rpc2FibGVkQ29udGV4dFtcImRlZmF1bHRcIl0pO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KF9jb25maWdQcm92aWRlci5Db25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uLFxuICAgIGNvbnRleHRGb3JtID0gX1JlYWN0JHVzZUNvbnRleHQuZm9ybTtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBfcHJvcHMkY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGNsYXNzTmFtZSA9IF9wcm9wcyRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICcnIDogX3Byb3BzJGNsYXNzTmFtZSxcbiAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyBjb250ZXh0U2l6ZSA6IF9wcm9wcyRzaXplLFxuICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBjb250ZXh0RGlzYWJsZWQgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgZm9ybSA9IHByb3BzLmZvcm0sXG4gICAgY29sb24gPSBwcm9wcy5jb2xvbixcbiAgICBsYWJlbEFsaWduID0gcHJvcHMubGFiZWxBbGlnbixcbiAgICBsYWJlbFdyYXAgPSBwcm9wcy5sYWJlbFdyYXAsXG4gICAgbGFiZWxDb2wgPSBwcm9wcy5sYWJlbENvbCxcbiAgICB3cmFwcGVyQ29sID0gcHJvcHMud3JhcHBlckNvbCxcbiAgICBoaWRlUmVxdWlyZWRNYXJrID0gcHJvcHMuaGlkZVJlcXVpcmVkTWFyayxcbiAgICBfcHJvcHMkbGF5b3V0ID0gcHJvcHMubGF5b3V0LFxuICAgIGxheW91dCA9IF9wcm9wcyRsYXlvdXQgPT09IHZvaWQgMCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRsYXlvdXQsXG4gICAgc2Nyb2xsVG9GaXJzdEVycm9yID0gcHJvcHMuc2Nyb2xsVG9GaXJzdEVycm9yLFxuICAgIHJlcXVpcmVkTWFyayA9IHByb3BzLnJlcXVpcmVkTWFyayxcbiAgICBvbkZpbmlzaEZhaWxlZCA9IHByb3BzLm9uRmluaXNoRmFpbGVkLFxuICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgIHJlc3RGb3JtUHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcInNpemVcIiwgXCJkaXNhYmxlZFwiLCBcImZvcm1cIiwgXCJjb2xvblwiLCBcImxhYmVsQWxpZ25cIiwgXCJsYWJlbFdyYXBcIiwgXCJsYWJlbENvbFwiLCBcIndyYXBwZXJDb2xcIiwgXCJoaWRlUmVxdWlyZWRNYXJrXCIsIFwibGF5b3V0XCIsIFwic2Nyb2xsVG9GaXJzdEVycm9yXCIsIFwicmVxdWlyZWRNYXJrXCIsIFwib25GaW5pc2hGYWlsZWRcIiwgXCJuYW1lXCJdKTtcbiAgdmFyIGNvbnRleHRWYWxpZGF0ZU1lc3NhZ2VzID0gUmVhY3QudXNlQ29udGV4dChfdmFsaWRhdGVNZXNzYWdlc0NvbnRleHRbXCJkZWZhdWx0XCJdKTtcbiAgdmFyIG1lcmdlZFJlcXVpcmVkTWFyayA9ICgwLCBSZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlcXVpcmVkTWFyayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZWRNYXJrO1xuICAgIH1cbiAgICBpZiAoY29udGV4dEZvcm0gJiYgY29udGV4dEZvcm0ucmVxdWlyZWRNYXJrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjb250ZXh0Rm9ybS5yZXF1aXJlZE1hcms7XG4gICAgfVxuICAgIGlmIChoaWRlUmVxdWlyZWRNYXJrKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCBbaGlkZVJlcXVpcmVkTWFyaywgcmVxdWlyZWRNYXJrLCBjb250ZXh0Rm9ybV0pO1xuICB2YXIgbWVyZ2VkQ29sb24gPSBjb2xvbiAhPT0gbnVsbCAmJiBjb2xvbiAhPT0gdm9pZCAwID8gY29sb24gOiBjb250ZXh0Rm9ybSA9PT0gbnVsbCB8fCBjb250ZXh0Rm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGV4dEZvcm0uY29sb247XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2Zvcm0nLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgZm9ybUNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHByZWZpeENscywgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChsYXlvdXQpLCB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1oaWRlLXJlcXVpcmVkLW1hcmtcIiksIG1lcmdlZFJlcXVpcmVkTWFyayA9PT0gZmFsc2UpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplKSwgc2l6ZSksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcbiAgdmFyIF91c2VGb3JtID0gKDAsIF91c2VGb3JtM1tcImRlZmF1bHRcIl0pKGZvcm0pLFxuICAgIF91c2VGb3JtMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfdXNlRm9ybSwgMSksXG4gICAgd3JhcEZvcm0gPSBfdXNlRm9ybTJbMF07XG4gIHZhciBfX0lOVEVSTkFMX18gPSB3cmFwRm9ybS5fX0lOVEVSTkFMX187XG4gIF9fSU5URVJOQUxfXy5uYW1lID0gbmFtZTtcbiAgdmFyIGZvcm1Db250ZXh0VmFsdWUgPSAoMCwgUmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgbGFiZWxBbGlnbjogbGFiZWxBbGlnbixcbiAgICAgIGxhYmVsQ29sOiBsYWJlbENvbCxcbiAgICAgIGxhYmVsV3JhcDogbGFiZWxXcmFwLFxuICAgICAgd3JhcHBlckNvbDogd3JhcHBlckNvbCxcbiAgICAgIHZlcnRpY2FsOiBsYXlvdXQgPT09ICd2ZXJ0aWNhbCcsXG4gICAgICBjb2xvbjogbWVyZ2VkQ29sb24sXG4gICAgICByZXF1aXJlZE1hcms6IG1lcmdlZFJlcXVpcmVkTWFyayxcbiAgICAgIGl0ZW1SZWY6IF9fSU5URVJOQUxfXy5pdGVtUmVmLFxuICAgICAgZm9ybTogd3JhcEZvcm1cbiAgICB9O1xuICB9LCBbbmFtZSwgbGFiZWxBbGlnbiwgbGFiZWxDb2wsIHdyYXBwZXJDb2wsIGxheW91dCwgbWVyZ2VkQ29sb24sIG1lcmdlZFJlcXVpcmVkTWFyaywgd3JhcEZvcm1dKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gd3JhcEZvcm07XG4gIH0pO1xuICB2YXIgb25JbnRlcm5hbEZpbmlzaEZhaWxlZCA9IGZ1bmN0aW9uIG9uSW50ZXJuYWxGaW5pc2hGYWlsZWQoZXJyb3JJbmZvKSB7XG4gICAgb25GaW5pc2hGYWlsZWQgPT09IG51bGwgfHwgb25GaW5pc2hGYWlsZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRmluaXNoRmFpbGVkKGVycm9ySW5mbyk7XG4gICAgdmFyIGRlZmF1bHRTY3JvbGxUb0ZpcnN0RXJyb3IgPSB7XG4gICAgICBibG9jazogJ25lYXJlc3QnXG4gICAgfTtcbiAgICBpZiAoc2Nyb2xsVG9GaXJzdEVycm9yICYmIGVycm9ySW5mby5lcnJvckZpZWxkcy5sZW5ndGgpIHtcbiAgICAgIGlmICgoMCwgX3R5cGVvZjJbXCJkZWZhdWx0XCJdKShzY3JvbGxUb0ZpcnN0RXJyb3IpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBkZWZhdWx0U2Nyb2xsVG9GaXJzdEVycm9yID0gc2Nyb2xsVG9GaXJzdEVycm9yO1xuICAgICAgfVxuICAgICAgd3JhcEZvcm0uc2Nyb2xsVG9GaWVsZChlcnJvckluZm8uZXJyb3JGaWVsZHNbMF0ubmFtZSwgZGVmYXVsdFNjcm9sbFRvRmlyc3RFcnJvcik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0Rpc2FibGVkQ29udGV4dC5EaXNhYmxlZENvbnRleHRQcm92aWRlciwge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfU2l6ZUNvbnRleHQuU2l6ZUNvbnRleHRQcm92aWRlciwge1xuICAgIHNpemU6IHNpemVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbnRleHQuRm9ybVByb3ZpZGVyLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHtcbiAgICAvLyBUaGlzIGlzIG5vdCBsaXN0IGluIEFQSSwgd2UgcGFzcyB3aXRoIHNwcmVhZFxuICAgIHZhbGlkYXRlTWVzc2FnZXM6IGNvbnRleHRWYWxpZGF0ZU1lc3NhZ2VzXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29udGV4dC5Gb3JtQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmb3JtQ29udGV4dFZhbHVlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yY0ZpZWxkRm9ybVtcImRlZmF1bHRcIl0sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgaWQ6IG5hbWVcbiAgfSwgcmVzdEZvcm1Qcm9wcywge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25GaW5pc2hGYWlsZWQ6IG9uSW50ZXJuYWxGaW5pc2hGYWlsZWQsXG4gICAgZm9ybTogd3JhcEZvcm0sXG4gICAgY2xhc3NOYW1lOiBmb3JtQ2xhc3NOYW1lXG4gIH0pKSkpKSk7XG59O1xudmFyIEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbnRlcm5hbEZvcm0pO1xudmFyIF9kZWZhdWx0ID0gRm9ybTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdXNlRm9ybTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX3JjRmllbGRGb3JtID0gcmVxdWlyZShcInJjLWZpZWxkLWZvcm1cIik7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9zY3JvbGxJbnRvVmlld0lmTmVlZGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwic2Nyb2xsLWludG8tdmlldy1pZi1uZWVkZWRcIikpO1xudmFyIF91dGlsID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5mdW5jdGlvbiB0b05hbWVQYXRoU3RyKG5hbWUpIHtcbiAgdmFyIG5hbWVQYXRoID0gKDAsIF91dGlsLnRvQXJyYXkpKG5hbWUpO1xuICByZXR1cm4gbmFtZVBhdGguam9pbignXycpO1xufVxuZnVuY3Rpb24gdXNlRm9ybShmb3JtKSB7XG4gIHZhciBfdXNlUmNGb3JtID0gKDAsIF9yY0ZpZWxkRm9ybS51c2VGb3JtKSgpLFxuICAgIF91c2VSY0Zvcm0yID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKF91c2VSY0Zvcm0sIDEpLFxuICAgIHJjRm9ybSA9IF91c2VSY0Zvcm0yWzBdO1xuICB2YXIgaXRlbXNSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICB2YXIgd3JhcEZvcm0gPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm9ybSAhPT0gbnVsbCAmJiBmb3JtICE9PSB2b2lkIDAgPyBmb3JtIDogKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcmNGb3JtKSwge1xuICAgICAgX19JTlRFUk5BTF9fOiB7XG4gICAgICAgIGl0ZW1SZWY6IGZ1bmN0aW9uIGl0ZW1SZWYobmFtZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIG5hbWVQYXRoU3RyID0gdG9OYW1lUGF0aFN0cihuYW1lKTtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgIGl0ZW1zUmVmLmN1cnJlbnRbbmFtZVBhdGhTdHJdID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBpdGVtc1JlZi5jdXJyZW50W25hbWVQYXRoU3RyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2Nyb2xsVG9GaWVsZDogZnVuY3Rpb24gc2Nyb2xsVG9GaWVsZChuYW1lKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgdmFyIG5hbWVQYXRoID0gKDAsIF91dGlsLnRvQXJyYXkpKG5hbWUpO1xuICAgICAgICB2YXIgZmllbGRJZCA9ICgwLCBfdXRpbC5nZXRGaWVsZElkKShuYW1lUGF0aCwgd3JhcEZvcm0uX19JTlRFUk5BTF9fLm5hbWUpO1xuICAgICAgICB2YXIgbm9kZSA9IGZpZWxkSWQgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmaWVsZElkKSA6IG51bGw7XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgKDAsIF9zY3JvbGxJbnRvVmlld0lmTmVlZGVkW1wiZGVmYXVsdFwiXSkobm9kZSwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgICAgICAgIHNjcm9sbE1vZGU6ICdpZi1uZWVkZWQnLFxuICAgICAgICAgICAgYmxvY2s6ICduZWFyZXN0J1xuICAgICAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldEZpZWxkSW5zdGFuY2U6IGZ1bmN0aW9uIGdldEZpZWxkSW5zdGFuY2UobmFtZSkge1xuICAgICAgICB2YXIgbmFtZVBhdGhTdHIgPSB0b05hbWVQYXRoU3RyKG5hbWUpO1xuICAgICAgICByZXR1cm4gaXRlbXNSZWYuY3VycmVudFtuYW1lUGF0aFN0cl07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFtmb3JtLCByY0Zvcm1dKTtcbiAgcmV0dXJuIFt3cmFwRm9ybV07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX3JjRmllbGRGb3JtID0gcmVxdWlyZShcInJjLWZpZWxkLWZvcm1cIik7XG52YXIgX3VzZVN0YXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXV0aWwvbGliL2hvb2tzL3VzZVN0YXRlXCIpKTtcbnZhciBfcmVmMiA9IHJlcXVpcmUoXCJyYy11dGlsL2xpYi9yZWZcIik7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF91c2VGb3JtSXRlbVN0YXR1cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2hvb2tzL3VzZUZvcm1JdGVtU3RhdHVzXCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9yZWFjdE5vZGUgPSByZXF1aXJlKFwiLi4vLi4vX3V0aWwvcmVhY3ROb2RlXCIpO1xudmFyIF90eXBlID0gcmVxdWlyZShcIi4uLy4uL191dGlsL3R5cGVcIik7XG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9fdXRpbC93YXJuaW5nXCIpKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuLi9jb250ZXh0XCIpO1xudmFyIF91c2VGcmFtZVN0YXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2hvb2tzL3VzZUZyYW1lU3RhdGVcIikpO1xudmFyIF91c2VJdGVtUmVmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaG9va3MvdXNlSXRlbVJlZlwiKSk7XG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbnZhciBfSXRlbUhvbGRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSXRlbUhvbGRlclwiKSk7XG52YXIgTkFNRV9TUExJVCA9ICdfX1NQTElUX18nO1xudmFyIFZhbGlkYXRlU3RhdHVzZXMgPSAoMCwgX3R5cGUudHVwbGUpKCdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InLCAndmFsaWRhdGluZycsICcnKTtcbnZhciBNZW1vSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyhmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW47XG59LCBmdW5jdGlvbiAocHJldiwgbmV4dCkge1xuICByZXR1cm4gcHJldi52YWx1ZSA9PT0gbmV4dC52YWx1ZSAmJiBwcmV2LnVwZGF0ZSA9PT0gbmV4dC51cGRhdGUgJiYgcHJldi5jaGlsZFByb3BzLmxlbmd0aCA9PT0gbmV4dC5jaGlsZFByb3BzLmxlbmd0aCAmJiBwcmV2LmNoaWxkUHJvcHMuZXZlcnkoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbmV4dC5jaGlsZFByb3BzW2luZGV4XTtcbiAgfSk7XG59KTtcbmZ1bmN0aW9uIGhhc1ZhbGlkTmFtZShuYW1lKSB7XG4gIGlmIChuYW1lID09PSBudWxsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoZmFsc2UsICdGb3JtLkl0ZW0nLCAnYG51bGxgIGlzIHBhc3NlZCBhcyBgbmFtZWAgcHJvcGVydHknKSA6IHZvaWQgMDtcbiAgfVxuICByZXR1cm4gIShuYW1lID09PSB1bmRlZmluZWQgfHwgbmFtZSA9PT0gbnVsbCk7XG59XG5mdW5jdGlvbiBnZW5FbXB0eU1ldGEoKSB7XG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW10sXG4gICAgdG91Y2hlZDogZmFsc2UsXG4gICAgdmFsaWRhdGluZzogZmFsc2UsXG4gICAgdmFsaWRhdGVkOiBmYWxzZSxcbiAgICBuYW1lOiBbXVxuICB9O1xufVxuZnVuY3Rpb24gSW50ZXJuYWxGb3JtSXRlbShwcm9wcykge1xuICB2YXIgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgbm9TdHlsZSA9IHByb3BzLm5vU3R5bGUsXG4gICAgZGVwZW5kZW5jaWVzID0gcHJvcHMuZGVwZW5kZW5jaWVzLFxuICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBzaG91bGRVcGRhdGUgPSBwcm9wcy5zaG91bGRVcGRhdGUsXG4gICAgcnVsZXMgPSBwcm9wcy5ydWxlcyxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICBtZXNzYWdlVmFyaWFibGVzID0gcHJvcHMubWVzc2FnZVZhcmlhYmxlcyxcbiAgICBfcHJvcHMkdHJpZ2dlciA9IHByb3BzLnRyaWdnZXIsXG4gICAgdHJpZ2dlciA9IF9wcm9wcyR0cmlnZ2VyID09PSB2b2lkIDAgPyAnb25DaGFuZ2UnIDogX3Byb3BzJHRyaWdnZXIsXG4gICAgdmFsaWRhdGVUcmlnZ2VyID0gcHJvcHMudmFsaWRhdGVUcmlnZ2VyLFxuICAgIGhpZGRlbiA9IHByb3BzLmhpZGRlbjtcbiAgdmFyIF91c2VDb250ZXh0ID0gKDAsIFJlYWN0LnVzZUNvbnRleHQpKF9jb25maWdQcm92aWRlci5Db25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfdXNlQ29udGV4dC5nZXRQcmVmaXhDbHM7XG4gIHZhciBfdXNlQ29udGV4dDIgPSAoMCwgUmVhY3QudXNlQ29udGV4dCkoX2NvbnRleHQuRm9ybUNvbnRleHQpLFxuICAgIGZvcm1OYW1lID0gX3VzZUNvbnRleHQyLm5hbWU7XG4gIHZhciBpc1JlbmRlclByb3BzID0gdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nO1xuICB2YXIgbm90aWZ5UGFyZW50TWV0YUNoYW5nZSA9ICgwLCBSZWFjdC51c2VDb250ZXh0KShfY29udGV4dC5Ob1N0eWxlSXRlbUNvbnRleHQpO1xuICB2YXIgX3VzZUNvbnRleHQzID0gKDAsIFJlYWN0LnVzZUNvbnRleHQpKF9yY0ZpZWxkRm9ybS5GaWVsZENvbnRleHQpLFxuICAgIGNvbnRleHRWYWxpZGF0ZVRyaWdnZXIgPSBfdXNlQ29udGV4dDMudmFsaWRhdGVUcmlnZ2VyO1xuICB2YXIgbWVyZ2VkVmFsaWRhdGVUcmlnZ2VyID0gdmFsaWRhdGVUcmlnZ2VyICE9PSB1bmRlZmluZWQgPyB2YWxpZGF0ZVRyaWdnZXIgOiBjb250ZXh0VmFsaWRhdGVUcmlnZ2VyO1xuICB2YXIgaGFzTmFtZSA9IGhhc1ZhbGlkTmFtZShuYW1lKTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnZm9ybScsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT0gTUlTQyA9PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEdldCBgbm9TdHlsZWAgcmVxdWlyZWQgaW5mb1xuICB2YXIgbGlzdENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KF9yY0ZpZWxkRm9ybS5MaXN0Q29udGV4dCk7XG4gIHZhciBmaWVsZEtleVBhdGhSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IEVycm9ycyA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPj4+Pj4gQ29sbGVjdCBzdWIgZmllbGQgZXJyb3JzXG4gIHZhciBfdXNlRnJhbWVTdGF0ZSA9ICgwLCBfdXNlRnJhbWVTdGF0ZTNbXCJkZWZhdWx0XCJdKSh7fSksXG4gICAgX3VzZUZyYW1lU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKF91c2VGcmFtZVN0YXRlLCAyKSxcbiAgICBzdWJGaWVsZEVycm9ycyA9IF91c2VGcmFtZVN0YXRlMlswXSxcbiAgICBzZXRTdWJGaWVsZEVycm9ycyA9IF91c2VGcmFtZVN0YXRlMlsxXTtcbiAgLy8gPj4+Pj4gQ3VycmVudCBmaWVsZCBlcnJvcnNcbiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfdXNlU3RhdGUzW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdlbkVtcHR5TWV0YSgpO1xuICAgIH0pLFxuICAgIF91c2VTdGF0ZTIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX3VzZVN0YXRlLCAyKSxcbiAgICBtZXRhID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRNZXRhID0gX3VzZVN0YXRlMlsxXTtcbiAgdmFyIG9uTWV0YUNoYW5nZSA9IGZ1bmN0aW9uIG9uTWV0YUNoYW5nZShuZXh0TWV0YSkge1xuICAgIC8vIFRoaXMga2V5SW5mbyBpcyBub3QgY29ycmVjdCB3aGVuIGZpZWxkIGlzIHJlbW92ZWRcbiAgICAvLyBTaW5jZSBvcmlnaW4ga2V5TWFuYWdlciBubyBsb25nZXIga2VlcCB0aGUgb3JpZ2luIGtleSBhbnltb3JlXG4gICAgLy8gV2hpY2ggbWVhbnMgd2UgbmVlZCBjYWNoZSBvcmlnaW4gb25lIGFuZCByZXVzZSB3aGVuIHJlbW92ZWRcbiAgICB2YXIga2V5SW5mbyA9IGxpc3RDb250ZXh0ID09PSBudWxsIHx8IGxpc3RDb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0Q29udGV4dC5nZXRLZXkobmV4dE1ldGEubmFtZSk7XG4gICAgLy8gRGVzdHJveSB3aWxsIHJlc2V0IGFsbCB0aGUgbWV0YVxuICAgIHNldE1ldGEobmV4dE1ldGEuZGVzdHJveSA/IGdlbkVtcHR5TWV0YSgpIDogbmV4dE1ldGEsIHRydWUpO1xuICAgIC8vIEJ1bXAgdG8gcGFyZW50IHNpbmNlIG5vU3R5bGVcbiAgICBpZiAobm9TdHlsZSAmJiBub3RpZnlQYXJlbnRNZXRhQ2hhbmdlKSB7XG4gICAgICB2YXIgbmFtZVBhdGggPSBuZXh0TWV0YS5uYW1lO1xuICAgICAgaWYgKCFuZXh0TWV0YS5kZXN0cm95KSB7XG4gICAgICAgIGlmIChrZXlJbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgX2tleUluZm8gPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoa2V5SW5mbywgMiksXG4gICAgICAgICAgICBmaWVsZEtleSA9IF9rZXlJbmZvWzBdLFxuICAgICAgICAgICAgcmVzdFBhdGggPSBfa2V5SW5mb1sxXTtcbiAgICAgICAgICBuYW1lUGF0aCA9IFtmaWVsZEtleV0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkocmVzdFBhdGgpKTtcbiAgICAgICAgICBmaWVsZEtleVBhdGhSZWYuY3VycmVudCA9IG5hbWVQYXRoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVc2Ugb3JpZ2luIGNhY2hlIGRhdGFcbiAgICAgICAgbmFtZVBhdGggPSBmaWVsZEtleVBhdGhSZWYuY3VycmVudCB8fCBuYW1lUGF0aDtcbiAgICAgIH1cbiAgICAgIG5vdGlmeVBhcmVudE1ldGFDaGFuZ2UobmV4dE1ldGEsIG5hbWVQYXRoKTtcbiAgICB9XG4gIH07XG4gIC8vID4+Pj4+IENvbGxlY3Qgbm9TdHlsZSBGaWVsZCBlcnJvciB0byB0aGUgdG9wIEZvcm1JdGVtXG4gIHZhciBvblN1Ykl0ZW1NZXRhQ2hhbmdlID0gZnVuY3Rpb24gb25TdWJJdGVtTWV0YUNoYW5nZShzdWJNZXRhLCB1bmlxdWVLZXlzKSB7XG4gICAgLy8gT25seSBgbm9TdHlsZWAgc3ViIGl0ZW0gd2lsbCB0cmlnZ2VyXG4gICAgc2V0U3ViRmllbGRFcnJvcnMoZnVuY3Rpb24gKHByZXZTdWJGaWVsZEVycm9ycykge1xuICAgICAgdmFyIGNsb25lID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwcmV2U3ViRmllbGRFcnJvcnMpO1xuICAgICAgLy8gbmFtZTogWyd1c2VyJywgMV0gKyBrZXk6IFs0XSA9IFsndXNlcicsIDRdXG4gICAgICB2YXIgbWVyZ2VkTmFtZVBhdGggPSBbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShzdWJNZXRhLm5hbWUuc2xpY2UoMCwgLTEpKSwgKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKSh1bmlxdWVLZXlzKSk7XG4gICAgICB2YXIgbWVyZ2VkTmFtZUtleSA9IG1lcmdlZE5hbWVQYXRoLmpvaW4oTkFNRV9TUExJVCk7XG4gICAgICBpZiAoc3ViTWV0YS5kZXN0cm95KSB7XG4gICAgICAgIC8vIFJlbW92ZVxuICAgICAgICBkZWxldGUgY2xvbmVbbWVyZ2VkTmFtZUtleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVcGRhdGVcbiAgICAgICAgY2xvbmVbbWVyZ2VkTmFtZUtleV0gPSBzdWJNZXRhO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH0pO1xuICB9O1xuICAvLyA+Pj4+PiBHZXQgbWVyZ2VkIGVycm9yc1xuICB2YXIgX1JlYWN0JHVzZU1lbW8gPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlcnJvckxpc3QgPSAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKG1ldGEuZXJyb3JzKTtcbiAgICAgIHZhciB3YXJuaW5nTGlzdCA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkobWV0YS53YXJuaW5ncyk7XG4gICAgICBPYmplY3QudmFsdWVzKHN1YkZpZWxkRXJyb3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJGaWVsZEVycm9yKSB7XG4gICAgICAgIGVycm9yTGlzdC5wdXNoLmFwcGx5KGVycm9yTGlzdCwgKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShzdWJGaWVsZEVycm9yLmVycm9ycyB8fCBbXSkpO1xuICAgICAgICB3YXJuaW5nTGlzdC5wdXNoLmFwcGx5KHdhcm5pbmdMaXN0LCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHN1YkZpZWxkRXJyb3Iud2FybmluZ3MgfHwgW10pKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtlcnJvckxpc3QsIHdhcm5pbmdMaXN0XTtcbiAgICB9LCBbc3ViRmllbGRFcnJvcnMsIG1ldGEuZXJyb3JzLCBtZXRhLndhcm5pbmdzXSksXG4gICAgX1JlYWN0JHVzZU1lbW8yID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKF9SZWFjdCR1c2VNZW1vLCAyKSxcbiAgICBtZXJnZWRFcnJvcnMgPSBfUmVhY3QkdXNlTWVtbzJbMF0sXG4gICAgbWVyZ2VkV2FybmluZ3MgPSBfUmVhY3QkdXNlTWVtbzJbMV07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PSBDaGlsZHJlbiBSZWYgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBnZXRJdGVtUmVmID0gKDAsIF91c2VJdGVtUmVmW1wiZGVmYXVsdFwiXSkoKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IFJlbmRlciA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgZnVuY3Rpb24gcmVuZGVyTGF5b3V0KGJhc2VDaGlsZHJlbiwgZmllbGRJZCwgaXNSZXF1aXJlZCkge1xuICAgIGlmIChub1N0eWxlICYmICFoaWRkZW4pIHtcbiAgICAgIHJldHVybiBiYXNlQ2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfSXRlbUhvbGRlcltcImRlZmF1bHRcIl0sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBrZXk6IFwicm93XCJcbiAgICB9LCBwcm9wcywge1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICBmaWVsZElkOiBmaWVsZElkLFxuICAgICAgaXNSZXF1aXJlZDogaXNSZXF1aXJlZCxcbiAgICAgIGVycm9yczogbWVyZ2VkRXJyb3JzLFxuICAgICAgd2FybmluZ3M6IG1lcmdlZFdhcm5pbmdzLFxuICAgICAgbWV0YTogbWV0YSxcbiAgICAgIG9uU3ViSXRlbU1ldGFDaGFuZ2U6IG9uU3ViSXRlbU1ldGFDaGFuZ2VcbiAgICB9KSwgYmFzZUNoaWxkcmVuKTtcbiAgfVxuICBpZiAoIWhhc05hbWUgJiYgIWlzUmVuZGVyUHJvcHMgJiYgIWRlcGVuZGVuY2llcykge1xuICAgIHJldHVybiByZW5kZXJMYXlvdXQoY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2YXJpYWJsZXMgPSB7fTtcbiAgaWYgKHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXJpYWJsZXMubGFiZWwgPSBsYWJlbDtcbiAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgdmFyaWFibGVzLmxhYmVsID0gU3RyaW5nKG5hbWUpO1xuICB9XG4gIGlmIChtZXNzYWdlVmFyaWFibGVzKSB7XG4gICAgdmFyaWFibGVzID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgdmFyaWFibGVzKSwgbWVzc2FnZVZhcmlhYmxlcyk7XG4gIH1cbiAgLy8gPj4+Pj4gV2l0aCBGaWVsZFxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjRmllbGRGb3JtLkZpZWxkLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHByb3BzLCB7XG4gICAgbWVzc2FnZVZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgIHRyaWdnZXI6IHRyaWdnZXIsXG4gICAgdmFsaWRhdGVUcmlnZ2VyOiBtZXJnZWRWYWxpZGF0ZVRyaWdnZXIsXG4gICAgb25NZXRhQ2hhbmdlOiBvbk1ldGFDaGFuZ2VcbiAgfSksIGZ1bmN0aW9uIChjb250cm9sLCByZW5kZXJNZXRhLCBjb250ZXh0KSB7XG4gICAgdmFyIG1lcmdlZE5hbWUgPSAoMCwgX3V0aWwudG9BcnJheSkobmFtZSkubGVuZ3RoICYmIHJlbmRlck1ldGEgPyByZW5kZXJNZXRhLm5hbWUgOiBbXTtcbiAgICB2YXIgZmllbGRJZCA9ICgwLCBfdXRpbC5nZXRGaWVsZElkKShtZXJnZWROYW1lLCBmb3JtTmFtZSk7XG4gICAgdmFyIGlzUmVxdWlyZWQgPSByZXF1aXJlZCAhPT0gdW5kZWZpbmVkID8gcmVxdWlyZWQgOiAhIShydWxlcyAmJiBydWxlcy5zb21lKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBpZiAocnVsZSAmJiAoMCwgX3R5cGVvZjJbXCJkZWZhdWx0XCJdKShydWxlKSA9PT0gJ29iamVjdCcgJiYgcnVsZS5yZXF1aXJlZCAmJiAhcnVsZS53YXJuaW5nT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcnVsZUVudGl0eSA9IHJ1bGUoY29udGV4dCk7XG4gICAgICAgIHJldHVybiBydWxlRW50aXR5ICYmIHJ1bGVFbnRpdHkucmVxdWlyZWQgJiYgIXJ1bGVFbnRpdHkud2FybmluZ09ubHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkpO1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09IENoaWxkcmVuID09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFyIG1lcmdlZENvbnRyb2wgPSAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGNvbnRyb2wpO1xuICAgIHZhciBjaGlsZE5vZGUgPSBudWxsO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEoc2hvdWxkVXBkYXRlICYmIGRlcGVuZGVuY2llcyksICdGb3JtLkl0ZW0nLCBcImBzaG91bGRVcGRhdGVgIGFuZCBgZGVwZW5kZW5jaWVzYCBzaG91bGRuJ3QgYmUgdXNlZCB0b2dldGhlci4gU2VlIGh0dHBzOi8vdS5hbnQuZGVzaWduL2Zvcm0tZGVwcy5cIikgOiB2b2lkIDA7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGhhc05hbWUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKGZhbHNlLCAnRm9ybS5JdGVtJywgJ0EgYEZvcm0uSXRlbWAgd2l0aCBhIGBuYW1lYCBwcm9wIG11c3QgaGF2ZSBhIHNpbmdsZSBjaGlsZCBlbGVtZW50LiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRvIHJlbmRlciBtb3JlIGNvbXBsZXggZm9ybSBpdGVtcywgc2VlIGh0dHBzOi8vdS5hbnQuZGVzaWduL2NvbXBsZXgtZm9ybS1pdGVtLicpIDogdm9pZCAwO1xuICAgICAgY2hpbGROb2RlID0gY2hpbGRyZW47XG4gICAgfSBlbHNlIGlmIChpc1JlbmRlclByb3BzICYmICghKHNob3VsZFVwZGF0ZSB8fCBkZXBlbmRlbmNpZXMpIHx8IGhhc05hbWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSghIShzaG91bGRVcGRhdGUgfHwgZGVwZW5kZW5jaWVzKSwgJ0Zvcm0uSXRlbScsICdBIGBGb3JtLkl0ZW1gIHdpdGggYSByZW5kZXIgZnVuY3Rpb24gbXVzdCBoYXZlIGVpdGhlciBgc2hvdWxkVXBkYXRlYCBvciBgZGVwZW5kZW5jaWVzYC4nKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCFoYXNOYW1lLCAnRm9ybS5JdGVtJywgJ0EgYEZvcm0uSXRlbWAgd2l0aCBhIHJlbmRlciBmdW5jdGlvbiBjYW5ub3QgYmUgYSBmaWVsZCwgYW5kIHRodXMgY2Fubm90IGhhdmUgYSBgbmFtZWAgcHJvcC4nKSA6IHZvaWQgMDtcbiAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY2llcyAmJiAhaXNSZW5kZXJQcm9wcyAmJiAhaGFzTmFtZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoZmFsc2UsICdGb3JtLkl0ZW0nLCAnTXVzdCBzZXQgYG5hbWVgIG9yIHVzZSBhIHJlbmRlciBmdW5jdGlvbiB3aGVuIGBkZXBlbmRlbmNpZXNgIGlzIHNldC4nKSA6IHZvaWQgMDtcbiAgICB9IGVsc2UgaWYgKCgwLCBfcmVhY3ROb2RlLmlzVmFsaWRFbGVtZW50KShjaGlsZHJlbikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKGNoaWxkcmVuLnByb3BzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkLCAnRm9ybS5JdGVtJywgJ2BkZWZhdWx0VmFsdWVgIHdpbGwgbm90IHdvcmsgb24gY29udHJvbGxlZCBGaWVsZC4gWW91IHNob3VsZCB1c2UgYGluaXRpYWxWYWx1ZXNgIG9mIEZvcm0gaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjaGlsZFByb3BzID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgY2hpbGRyZW4ucHJvcHMpLCBtZXJnZWRDb250cm9sKTtcbiAgICAgIGlmICghY2hpbGRQcm9wcy5pZCkge1xuICAgICAgICBjaGlsZFByb3BzLmlkID0gZmllbGRJZDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5oZWxwIHx8IG1lcmdlZEVycm9ycy5sZW5ndGggPiAwIHx8IG1lcmdlZFdhcm5pbmdzLmxlbmd0aCA+IDAgfHwgcHJvcHMuZXh0cmEpIHtcbiAgICAgICAgdmFyIGRlc2NyaWJlZGJ5QXJyID0gW107XG4gICAgICAgIGlmIChwcm9wcy5oZWxwIHx8IG1lcmdlZEVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGVzY3JpYmVkYnlBcnIucHVzaChcIlwiLmNvbmNhdChmaWVsZElkLCBcIl9oZWxwXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuZXh0cmEpIHtcbiAgICAgICAgICBkZXNjcmliZWRieUFyci5wdXNoKFwiXCIuY29uY2F0KGZpZWxkSWQsIFwiX2V4dHJhXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZFByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10gPSBkZXNjcmliZWRieUFyci5qb2luKCcgJyk7XG4gICAgICB9XG4gICAgICBpZiAobWVyZ2VkRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2hpbGRQcm9wc1snYXJpYS1pbnZhbGlkJ10gPSAndHJ1ZSc7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBjaGlsZFByb3BzWydhcmlhLXJlcXVpcmVkJ10gPSAndHJ1ZSc7XG4gICAgICB9XG4gICAgICBpZiAoKDAsIF9yZWYyLnN1cHBvcnRSZWYpKGNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZFByb3BzLnJlZiA9IGdldEl0ZW1SZWYobWVyZ2VkTmFtZSwgY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgLy8gV2Ugc2hvdWxkIGtlZXAgdXNlciBvcmlnaW4gZXZlbnQgaGFuZGxlclxuICAgICAgdmFyIHRyaWdnZXJzID0gbmV3IFNldChbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKSgoMCwgX3V0aWwudG9BcnJheSkodHJpZ2dlcikpLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKCgwLCBfdXRpbC50b0FycmF5KShtZXJnZWRWYWxpZGF0ZVRyaWdnZXIpKSkpO1xuICAgICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIGNoaWxkUHJvcHNbZXZlbnROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgX2EyLCBfYzI7XG4gICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICAoX2EgPSBtZXJnZWRDb250cm9sW2V2ZW50TmFtZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2EyID0gX2EpLmNhbGwuYXBwbHkoX2EyLCBbbWVyZ2VkQ29udHJvbF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgICAoX2MgPSAoX2IgPSBjaGlsZHJlbi5wcm9wcylbZXZlbnROYW1lXSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYzIgPSBfYykuY2FsbC5hcHBseShfYzIsIFtfYl0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgLy8gTGlzdCBvZiBwcm9wcyB0aGF0IG5lZWQgdG8gYmUgd2F0Y2hlZCBmb3IgY2hhbmdlcyAtPiBpZiBjaGFuZ2VzIGFyZSBkZXRlY3RlZCBpbiBNZW1vSW5wdXQgLT4gcmVyZW5kZXJcbiAgICAgIHZhciB3YXRjaGluZ0NoaWxkUHJvcHMgPSBbY2hpbGRQcm9wc1snYXJpYS1yZXF1aXJlZCddLCBjaGlsZFByb3BzWydhcmlhLWludmFsaWQnXSwgY2hpbGRQcm9wc1snYXJpYS1kZXNjcmliZWRieSddXTtcbiAgICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbW9JbnB1dCwge1xuICAgICAgICB2YWx1ZTogbWVyZ2VkQ29udHJvbFtwcm9wcy52YWx1ZVByb3BOYW1lIHx8ICd2YWx1ZSddLFxuICAgICAgICB1cGRhdGU6IGNoaWxkcmVuLFxuICAgICAgICBjaGlsZFByb3BzOiB3YXRjaGluZ0NoaWxkUHJvcHNcbiAgICAgIH0sICgwLCBfcmVhY3ROb2RlLmNsb25lRWxlbWVudCkoY2hpbGRyZW4sIGNoaWxkUHJvcHMpKTtcbiAgICB9IGVsc2UgaWYgKGlzUmVuZGVyUHJvcHMgJiYgKHNob3VsZFVwZGF0ZSB8fCBkZXBlbmRlbmNpZXMpICYmICFoYXNOYW1lKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZHJlbihjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoIW1lcmdlZE5hbWUubGVuZ3RoLCAnRm9ybS5JdGVtJywgJ2BuYW1lYCBpcyBvbmx5IHVzZWQgZm9yIHZhbGlkYXRlIFJlYWN0IGVsZW1lbnQuIElmIHlvdSBhcmUgdXNpbmcgRm9ybS5JdGVtIGFzIGxheW91dCBkaXNwbGF5LCBwbGVhc2UgcmVtb3ZlIGBuYW1lYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgY2hpbGROb2RlID0gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJMYXlvdXQoY2hpbGROb2RlLCBmaWVsZElkLCBpc1JlcXVpcmVkKTtcbiAgfSk7XG59XG52YXIgRm9ybUl0ZW0gPSBJbnRlcm5hbEZvcm1JdGVtO1xuRm9ybUl0ZW0udXNlU3RhdHVzID0gX3VzZUZvcm1JdGVtU3RhdHVzW1wiZGVmYXVsdFwiXTtcbnZhciBfZGVmYXVsdCA9IEZvcm1JdGVtO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuLi9jb250ZXh0XCIpO1xudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vX3V0aWwvd2FybmluZ1wiKSk7XG52YXIgdXNlRm9ybUl0ZW1TdGF0dXMgPSBmdW5jdGlvbiB1c2VGb3JtSXRlbVN0YXR1cygpIHtcbiAgdmFyIF91c2VDb250ZXh0ID0gKDAsIF9yZWFjdC51c2VDb250ZXh0KShfY29udGV4dC5Gb3JtSXRlbUlucHV0Q29udGV4dCksXG4gICAgc3RhdHVzID0gX3VzZUNvbnRleHQuc3RhdHVzO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKShzdGF0dXMgIT09IHVuZGVmaW5lZCwgJ0Zvcm0uSXRlbScsIFwiRm9ybS5JdGVtLnVzZVN0YXR1cyBzaG91bGQgYmUgdXNlZCB1bmRlciBGb3JtLkl0ZW0gY29tcG9uZW50LiBGb3IgbW9yZSBpbmZvcm1hdGlvbjogXCIuY29uY2F0KHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCwgXCIvL1wiKS5jb25jYXQod2luZG93LmxvY2F0aW9uLmhvc3QsIFwiL2NvbXBvbmVudHMvZm9ybS1jbi8jRm9ybS5JdGVtLnVzZVN0YXR1c1wiKSkgOiB2b2lkIDA7XG4gIHJldHVybiB7XG4gICAgc3RhdHVzOiBzdGF0dXNcbiAgfTtcbn07XG52YXIgX2RlZmF1bHQgPSB1c2VGb3JtSXRlbVN0YXR1cztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdXNlRnJhbWVTdGF0ZTtcbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xudmFyIF9yYWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9yYWZcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIHVzZUZyYW1lU3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0VmFsdWUpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICB2YWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgc2V0VmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgZnJhbWVSZWYgPSAoMCwgUmVhY3QudXNlUmVmKShudWxsKTtcbiAgdmFyIGJhdGNoUmVmID0gKDAsIFJlYWN0LnVzZVJlZikoW10pO1xuICB2YXIgZGVzdHJveVJlZiA9ICgwLCBSZWFjdC51c2VSZWYpKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBkZXN0cm95UmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZGVzdHJveVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIF9yYWZbXCJkZWZhdWx0XCJdLmNhbmNlbChmcmFtZVJlZi5jdXJyZW50KTtcbiAgICAgIGZyYW1lUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgZnVuY3Rpb24gc2V0RnJhbWVWYWx1ZSh1cGRhdGVyKSB7XG4gICAgaWYgKGRlc3Ryb3lSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZnJhbWVSZWYuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgYmF0Y2hSZWYuY3VycmVudCA9IFtdO1xuICAgICAgZnJhbWVSZWYuY3VycmVudCA9ICgwLCBfcmFmW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgc2V0VmFsdWUoZnVuY3Rpb24gKHByZXZWYWx1ZSkge1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gcHJldlZhbHVlO1xuICAgICAgICAgIGJhdGNoUmVmLmN1cnJlbnQuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICAgICAgY3VycmVudCA9IGZ1bmMoY3VycmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGJhdGNoUmVmLmN1cnJlbnQucHVzaCh1cGRhdGVyKTtcbiAgfVxuICByZXR1cm4gW3ZhbHVlLCBzZXRGcmFtZVZhbHVlXTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB1c2VJdGVtUmVmO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9yZWYgPSByZXF1aXJlKFwicmMtdXRpbC9saWIvcmVmXCIpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuLi9jb250ZXh0XCIpO1xuZnVuY3Rpb24gdXNlSXRlbVJlZigpIHtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChfY29udGV4dC5Gb3JtQ29udGV4dCksXG4gICAgaXRlbVJlZiA9IF9SZWFjdCR1c2VDb250ZXh0Lml0ZW1SZWY7XG4gIHZhciBjYWNoZVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGZ1bmN0aW9uIGdldFJlZihuYW1lLCBjaGlsZHJlbikge1xuICAgIHZhciBjaGlsZHJlblJlZiA9IGNoaWxkcmVuICYmICgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKGNoaWxkcmVuKSA9PT0gJ29iamVjdCcgJiYgY2hpbGRyZW4ucmVmO1xuICAgIHZhciBuYW1lU3RyID0gbmFtZS5qb2luKCdfJyk7XG4gICAgaWYgKGNhY2hlUmVmLmN1cnJlbnQubmFtZSAhPT0gbmFtZVN0ciB8fCBjYWNoZVJlZi5jdXJyZW50Lm9yaWdpblJlZiAhPT0gY2hpbGRyZW5SZWYpIHtcbiAgICAgIGNhY2hlUmVmLmN1cnJlbnQubmFtZSA9IG5hbWVTdHI7XG4gICAgICBjYWNoZVJlZi5jdXJyZW50Lm9yaWdpblJlZiA9IGNoaWxkcmVuUmVmO1xuICAgICAgY2FjaGVSZWYuY3VycmVudC5yZWYgPSAoMCwgX3JlZi5jb21wb3NlUmVmKShpdGVtUmVmKG5hbWUpLCBjaGlsZHJlblJlZik7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVJlZi5jdXJyZW50LnJlZjtcbiAgfVxuICByZXR1cm4gZ2V0UmVmO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEl0ZW1Ib2xkZXI7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcbnZhciBfQ2hlY2tDaXJjbGVGaWxsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9DaGVja0NpcmNsZUZpbGxlZFwiKSk7XG52YXIgX0Nsb3NlQ2lyY2xlRmlsbGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvQ2xvc2VDaXJjbGVGaWxsZWRcIikpO1xudmFyIF9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCIpKTtcbnZhciBfTG9hZGluZ091dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvTG9hZGluZ091dGxpbmVkXCIpKTtcbnZhciBfdXNlTGF5b3V0RWZmZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvaG9va3MvdXNlTGF5b3V0RWZmZWN0XCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfb21pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXV0aWwvbGliL29taXRcIikpO1xudmFyIF9ncmlkID0gcmVxdWlyZShcIi4uLy4uL2dyaWRcIik7XG52YXIgX0Zvcm1JdGVtTGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtSXRlbUxhYmVsXCIpKTtcbnZhciBfRm9ybUl0ZW1JbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0Zvcm1JdGVtSW5wdXRcIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4uL2NvbnRleHRcIik7XG52YXIgX3VzZURlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaG9va3MvdXNlRGVib3VuY2VcIikpO1xudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbnZhciBpY29uTWFwID0ge1xuICBzdWNjZXNzOiBfQ2hlY2tDaXJjbGVGaWxsZWRbXCJkZWZhdWx0XCJdLFxuICB3YXJuaW5nOiBfRXhjbGFtYXRpb25DaXJjbGVGaWxsZWRbXCJkZWZhdWx0XCJdLFxuICBlcnJvcjogX0Nsb3NlQ2lyY2xlRmlsbGVkW1wiZGVmYXVsdFwiXSxcbiAgdmFsaWRhdGluZzogX0xvYWRpbmdPdXRsaW5lZFtcImRlZmF1bHRcIl1cbn07XG5mdW5jdGlvbiBJdGVtSG9sZGVyKHByb3BzKSB7XG4gIHZhciBfaXRlbUNsYXNzTmFtZTtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICBoZWxwID0gcHJvcHMuaGVscCxcbiAgICBlcnJvcnMgPSBwcm9wcy5lcnJvcnMsXG4gICAgd2FybmluZ3MgPSBwcm9wcy53YXJuaW5ncyxcbiAgICB2YWxpZGF0ZVN0YXR1cyA9IHByb3BzLnZhbGlkYXRlU3RhdHVzLFxuICAgIG1ldGEgPSBwcm9wcy5tZXRhLFxuICAgIGhhc0ZlZWRiYWNrID0gcHJvcHMuaGFzRmVlZGJhY2ssXG4gICAgaGlkZGVuID0gcHJvcHMuaGlkZGVuLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgZmllbGRJZCA9IHByb3BzLmZpZWxkSWQsXG4gICAgaXNSZXF1aXJlZCA9IHByb3BzLmlzUmVxdWlyZWQsXG4gICAgb25TdWJJdGVtTWV0YUNoYW5nZSA9IHByb3BzLm9uU3ViSXRlbU1ldGFDaGFuZ2UsXG4gICAgcmVzdFByb3BzID0gX19yZXN0KHByb3BzLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImhlbHBcIiwgXCJlcnJvcnNcIiwgXCJ3YXJuaW5nc1wiLCBcInZhbGlkYXRlU3RhdHVzXCIsIFwibWV0YVwiLCBcImhhc0ZlZWRiYWNrXCIsIFwiaGlkZGVuXCIsIFwiY2hpbGRyZW5cIiwgXCJmaWVsZElkXCIsIFwiaXNSZXF1aXJlZFwiLCBcIm9uU3ViSXRlbU1ldGFDaGFuZ2VcIl0pO1xuICB2YXIgaXRlbVByZWZpeENscyA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbVwiKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChfY29udGV4dC5Gb3JtQ29udGV4dCksXG4gICAgcmVxdWlyZWRNYXJrID0gX1JlYWN0JHVzZUNvbnRleHQucmVxdWlyZWRNYXJrO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gTWFyZ2luID09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgaXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGRlYm91bmNlRXJyb3JzID0gKDAsIF91c2VEZWJvdW5jZVtcImRlZmF1bHRcIl0pKGVycm9ycyk7XG4gIHZhciBkZWJvdW5jZVdhcm5pbmdzID0gKDAsIF91c2VEZWJvdW5jZVtcImRlZmF1bHRcIl0pKHdhcm5pbmdzKTtcbiAgdmFyIGhhc0hlbHAgPSBoZWxwICE9PSB1bmRlZmluZWQgJiYgaGVscCAhPT0gbnVsbDtcbiAgdmFyIGhhc0Vycm9yID0gISEoaGFzSGVscCB8fCBlcnJvcnMubGVuZ3RoIHx8IHdhcm5pbmdzLmxlbmd0aCk7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShudWxsKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgbWFyZ2luQm90dG9tID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRNYXJnaW5Cb3R0b20gPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICAoMCwgX3VzZUxheW91dEVmZmVjdFtcImRlZmF1bHRcIl0pKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaGFzRXJyb3IgJiYgaXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgaXRlbVN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShpdGVtUmVmLmN1cnJlbnQpO1xuICAgICAgc2V0TWFyZ2luQm90dG9tKHBhcnNlSW50KGl0ZW1TdHlsZS5tYXJnaW5Cb3R0b20sIDEwKSk7XG4gICAgfVxuICB9LCBbaGFzRXJyb3JdKTtcbiAgdmFyIG9uRXJyb3JWaXNpYmxlQ2hhbmdlZCA9IGZ1bmN0aW9uIG9uRXJyb3JWaXNpYmxlQ2hhbmdlZChuZXh0VmlzaWJsZSkge1xuICAgIGlmICghbmV4dFZpc2libGUpIHtcbiAgICAgIHNldE1hcmdpbkJvdHRvbShudWxsKTtcbiAgICB9XG4gIH07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBTdGF0dXMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBtZXJnZWRWYWxpZGF0ZVN0YXR1cyA9ICcnO1xuICBpZiAodmFsaWRhdGVTdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG1lcmdlZFZhbGlkYXRlU3RhdHVzID0gdmFsaWRhdGVTdGF0dXM7XG4gIH0gZWxzZSBpZiAobWV0YS52YWxpZGF0aW5nKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAndmFsaWRhdGluZyc7XG4gIH0gZWxzZSBpZiAoZGVib3VuY2VFcnJvcnMubGVuZ3RoKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAnZXJyb3InO1xuICB9IGVsc2UgaWYgKGRlYm91bmNlV2FybmluZ3MubGVuZ3RoKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAnd2FybmluZyc7XG4gIH0gZWxzZSBpZiAobWV0YS50b3VjaGVkKSB7XG4gICAgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPSAnc3VjY2Vzcyc7XG4gIH1cbiAgdmFyIGZvcm1JdGVtU3RhdHVzQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBmZWVkYmFja0ljb247XG4gICAgaWYgKGhhc0ZlZWRiYWNrKSB7XG4gICAgICB2YXIgSWNvbk5vZGUgPSBtZXJnZWRWYWxpZGF0ZVN0YXR1cyAmJiBpY29uTWFwW21lcmdlZFZhbGlkYXRlU3RhdHVzXTtcbiAgICAgIGZlZWRiYWNrSWNvbiA9IEljb25Ob2RlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1mZWVkYmFjay1pY29uXCIpLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1mZWVkYmFjay1pY29uLVwiKS5jb25jYXQobWVyZ2VkVmFsaWRhdGVTdGF0dXMpKVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbk5vZGUsIG51bGwpKSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IG1lcmdlZFZhbGlkYXRlU3RhdHVzLFxuICAgICAgaGFzRmVlZGJhY2s6IGhhc0ZlZWRiYWNrLFxuICAgICAgZmVlZGJhY2tJY29uOiBmZWVkYmFja0ljb24sXG4gICAgICBpc0Zvcm1JdGVtSW5wdXQ6IHRydWVcbiAgICB9O1xuICB9LCBbbWVyZ2VkVmFsaWRhdGVTdGF0dXMsIGhhc0ZlZWRiYWNrXSk7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBpdGVtQ2xhc3NOYW1lID0gKF9pdGVtQ2xhc3NOYW1lID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2l0ZW1DbGFzc05hbWUsIGl0ZW1QcmVmaXhDbHMsIHRydWUpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi13aXRoLWhlbHBcIiksIGhhc0hlbHAgfHwgZGVib3VuY2VFcnJvcnMubGVuZ3RoIHx8IGRlYm91bmNlV2FybmluZ3MubGVuZ3RoKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfaXRlbUNsYXNzTmFtZSwgXCJcIi5jb25jYXQoY2xhc3NOYW1lKSwgISFjbGFzc05hbWUpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1oYXMtZmVlZGJhY2tcIiksIG1lcmdlZFZhbGlkYXRlU3RhdHVzICYmIGhhc0ZlZWRiYWNrKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfaXRlbUNsYXNzTmFtZSwgXCJcIi5jb25jYXQoaXRlbVByZWZpeENscywgXCItaGFzLXN1Y2Nlc3NcIiksIG1lcmdlZFZhbGlkYXRlU3RhdHVzID09PSAnc3VjY2VzcycpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1oYXMtd2FybmluZ1wiKSwgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPT09ICd3YXJuaW5nJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2l0ZW1DbGFzc05hbWUsIFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLWhhcy1lcnJvclwiKSwgbWVyZ2VkVmFsaWRhdGVTdGF0dXMgPT09ICdlcnJvcicpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pdGVtQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1pcy12YWxpZGF0aW5nXCIpLCBtZXJnZWRWYWxpZGF0ZVN0YXR1cyA9PT0gJ3ZhbGlkYXRpbmcnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfaXRlbUNsYXNzTmFtZSwgXCJcIi5jb25jYXQoaXRlbVByZWZpeENscywgXCItaGlkZGVuXCIpLCBoaWRkZW4pLCBfaXRlbUNsYXNzTmFtZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShpdGVtQ2xhc3NOYW1lKSxcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgcmVmOiBpdGVtUmVmXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9ncmlkLlJvdywgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLXJvd1wiKVxuICB9LCAoMCwgX29taXRbXCJkZWZhdWx0XCJdKShyZXN0UHJvcHMsIFsnX2ludGVybmFsSXRlbVJlbmRlcicsICdjb2xvbicsICdkZXBlbmRlbmNpZXMnLCAnZXh0cmEnLCAnZmllbGRLZXknLCAnZ2V0VmFsdWVGcm9tRXZlbnQnLCAnZ2V0VmFsdWVQcm9wcycsICdodG1sRm9yJywgJ2lkJywgJ2luaXRpYWxWYWx1ZScsICdpc0xpc3RGaWVsZCcsICdsYWJlbCcsICdsYWJlbEFsaWduJywgJ2xhYmVsQ29sJywgJ2xhYmVsV3JhcCcsICdtZXNzYWdlVmFyaWFibGVzJywgJ25hbWUnLCAnbm9ybWFsaXplJywgJ25vU3R5bGUnLCAncHJlc2VydmUnLCAncmVxdWlyZWQnLCAncmVxdWlyZWRNYXJrJywgJ3J1bGVzJywgJ3Nob3VsZFVwZGF0ZScsICd0cmlnZ2VyJywgJ3Rvb2x0aXAnLCAndmFsaWRhdGVGaXJzdCcsICd2YWxpZGF0ZVRyaWdnZXInLCAndmFsdWVQcm9wTmFtZScsICd3cmFwcGVyQ29sJ10pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1JdGVtTGFiZWxbXCJkZWZhdWx0XCJdLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgIGh0bWxGb3I6IGZpZWxkSWQsXG4gICAgcmVxdWlyZWQ6IGlzUmVxdWlyZWQsXG4gICAgcmVxdWlyZWRNYXJrOiByZXF1aXJlZE1hcmtcbiAgfSwgcHJvcHMsIHtcbiAgICBwcmVmaXhDbHM6IHByZWZpeENsc1xuICB9KSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Gb3JtSXRlbUlucHV0W1wiZGVmYXVsdFwiXSwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwcm9wcywgbWV0YSwge1xuICAgIGVycm9yczogZGVib3VuY2VFcnJvcnMsXG4gICAgd2FybmluZ3M6IGRlYm91bmNlV2FybmluZ3MsXG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgc3RhdHVzOiBtZXJnZWRWYWxpZGF0ZVN0YXR1cyxcbiAgICBoZWxwOiBoZWxwLFxuICAgIG1hcmdpbkJvdHRvbTogbWFyZ2luQm90dG9tLFxuICAgIG9uRXJyb3JWaXNpYmxlQ2hhbmdlZDogb25FcnJvclZpc2libGVDaGFuZ2VkXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29udGV4dC5Ob1N0eWxlSXRlbUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogb25TdWJJdGVtTWV0YUNoYW5nZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29udGV4dC5Gb3JtSXRlbUlucHV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmb3JtSXRlbVN0YXR1c0NvbnRleHRcbiAgfSwgY2hpbGRyZW4pKSkpLCAhIW1hcmdpbkJvdHRvbSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChpdGVtUHJlZml4Q2xzLCBcIi1tYXJnaW4tb2Zmc2V0XCIpLFxuICAgIHN0eWxlOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IC1tYXJnaW5Cb3R0b21cbiAgICB9XG4gIH0pKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY29sW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3dcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3Jvd1tcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2NvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29sXCIpKTtcbnZhciBfdXNlQnJlYWtwb2ludCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaG9va3MvdXNlQnJlYWtwb2ludFwiKSk7XG52YXIgX3JvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcm93XCIpKTtcbi8vIERvIG5vdCBleHBvcnQgcGFyYW1zXG5mdW5jdGlvbiB1c2VCcmVha3BvaW50KCkge1xuICByZXR1cm4gKDAsIF91c2VCcmVha3BvaW50W1wiZGVmYXVsdFwiXSkoKTtcbn1cbnZhciBfZGVmYXVsdCA9IHtcbiAgdXNlQnJlYWtwb2ludDogdXNlQnJlYWtwb2ludFxufTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgX3VzZUZvcmNlVXBkYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vX3V0aWwvaG9va3MvdXNlRm9yY2VVcGRhdGVcIikpO1xudmFyIF9yZXNwb25zaXZlT2JzZXJ2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL191dGlsL3Jlc3BvbnNpdmVPYnNlcnZlXCIpKTtcbmZ1bmN0aW9uIHVzZUJyZWFrcG9pbnQoKSB7XG4gIHZhciByZWZyZXNoT25DaGFuZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gIHZhciBzY3JlZW5zUmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKHt9KTtcbiAgdmFyIGZvcmNlVXBkYXRlID0gKDAsIF91c2VGb3JjZVVwZGF0ZVtcImRlZmF1bHRcIl0pKCk7XG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRva2VuID0gX3Jlc3BvbnNpdmVPYnNlcnZlW1wiZGVmYXVsdFwiXS5zdWJzY3JpYmUoZnVuY3Rpb24gKHN1cHBvcnRTY3JlZW5zKSB7XG4gICAgICBzY3JlZW5zUmVmLmN1cnJlbnQgPSBzdXBwb3J0U2NyZWVucztcbiAgICAgIGlmIChyZWZyZXNoT25DaGFuZ2UpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9yZXNwb25zaXZlT2JzZXJ2ZVtcImRlZmF1bHRcIl0udW5zdWJzY3JpYmUodG9rZW4pO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHNjcmVlbnNSZWYuY3VycmVudDtcbn1cbnZhciBfZGVmYXVsdCA9IHVzZUJyZWFrcG9pbnQ7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHVzZUZvcmNlVXBkYXRlO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gIHZhciBfUmVhY3QkdXNlUmVkdWNlciA9IFJlYWN0LnVzZVJlZHVjZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4ICsgMTtcbiAgICB9LCAwKSxcbiAgICBfUmVhY3QkdXNlUmVkdWNlcjIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX1JlYWN0JHVzZVJlZHVjZXIsIDIpLFxuICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVJlZHVjZXIyWzFdO1xuICByZXR1cm4gZm9yY2VVcGRhdGU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcbnZhciBfdXNlRmxleEdhcFN1cHBvcnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC9ob29rcy91c2VGbGV4R2FwU3VwcG9ydFwiKSk7XG52YXIgX3Jlc3BvbnNpdmVPYnNlcnZlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4uL191dGlsL3Jlc3BvbnNpdmVPYnNlcnZlXCIpKTtcbnZhciBfdHlwZSA9IHJlcXVpcmUoXCIuLi9fdXRpbC90eXBlXCIpO1xudmFyIF9Sb3dDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Sb3dDb250ZXh0XCIpKTtcbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG52YXIgUm93QWxpZ25zID0gKDAsIF90eXBlLnR1cGxlKSgndG9wJywgJ21pZGRsZScsICdib3R0b20nLCAnc3RyZXRjaCcpO1xudmFyIFJvd0p1c3RpZnkgPSAoMCwgX3R5cGUudHVwbGUpKCdzdGFydCcsICdlbmQnLCAnY2VudGVyJywgJ3NwYWNlLWFyb3VuZCcsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWV2ZW5seScpO1xuZnVuY3Rpb24gdXNlTWVyZ2VQcm9wQnlTY3JlZW4ob3JpUHJvcCwgc2NyZWVuKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh0eXBlb2Ygb3JpUHJvcCA9PT0gJ3N0cmluZycgPyBvcmlQcm9wIDogJycpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICBwcm9wID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRQcm9wID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgdmFyIGNsYWNNZXJnZUFsaWduT3JKdXN0aWZ5ID0gZnVuY3Rpb24gY2xhY01lcmdlQWxpZ25Pckp1c3RpZnkoKSB7XG4gICAgaWYgKHR5cGVvZiBvcmlQcm9wID09PSAnc3RyaW5nJykge1xuICAgICAgc2V0UHJvcChvcmlQcm9wKTtcbiAgICB9XG4gICAgaWYgKCgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKG9yaVByb3ApICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9yZXNwb25zaXZlT2JzZXJ2ZS5yZXNwb25zaXZlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBicmVha3BvaW50ID0gX3Jlc3BvbnNpdmVPYnNlcnZlLnJlc3BvbnNpdmVBcnJheVtpXTtcbiAgICAgIC8vIGlmIGRvIG5vdCBtYXRjaCwgZG8gbm90aGluZ1xuICAgICAgaWYgKCFzY3JlZW5bYnJlYWtwb2ludF0pIGNvbnRpbnVlO1xuICAgICAgdmFyIGN1clZhbCA9IG9yaVByb3BbYnJlYWtwb2ludF07XG4gICAgICBpZiAoY3VyVmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0UHJvcChjdXJWYWwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNsYWNNZXJnZUFsaWduT3JKdXN0aWZ5KCk7XG4gIH0sIFtKU09OLnN0cmluZ2lmeShvcmlQcm9wKSwgc2NyZWVuXSk7XG4gIHJldHVybiBwcm9wO1xufVxudmFyIFJvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBqdXN0aWZ5ID0gcHJvcHMuanVzdGlmeSxcbiAgICBhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgX3Byb3BzJGd1dHRlciA9IHByb3BzLmd1dHRlcixcbiAgICBndXR0ZXIgPSBfcHJvcHMkZ3V0dGVyID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGd1dHRlcixcbiAgICB3cmFwID0gcHJvcHMud3JhcCxcbiAgICBvdGhlcnMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImp1c3RpZnlcIiwgXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJndXR0ZXJcIiwgXCJ3cmFwXCJdKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgICB4czogdHJ1ZSxcbiAgICAgIHNtOiB0cnVlLFxuICAgICAgbWQ6IHRydWUsXG4gICAgICBsZzogdHJ1ZSxcbiAgICAgIHhsOiB0cnVlLFxuICAgICAgeHhsOiB0cnVlXG4gICAgfSksXG4gICAgX1JlYWN0JHVzZVN0YXRlNCA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICBzY3JlZW5zID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICBzZXRTY3JlZW5zID0gX1JlYWN0JHVzZVN0YXRlNFsxXTtcbiAgLy8gdG8gc2F2ZSBzY3JlZW5zIGluZm8gd2hlbiByZXNwb25zaXZlT2JzZXJ2ZSBjYWxsYmFjayBoYWQgYmVlbiBjYWxsXG4gIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gUmVhY3QudXNlU3RhdGUoe1xuICAgICAgeHM6IGZhbHNlLFxuICAgICAgc206IGZhbHNlLFxuICAgICAgbWQ6IGZhbHNlLFxuICAgICAgbGc6IGZhbHNlLFxuICAgICAgeGw6IGZhbHNlLFxuICAgICAgeHhsOiBmYWxzZVxuICAgIH0pLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTYgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX1JlYWN0JHVzZVN0YXRlNSwgMiksXG4gICAgY3VyU2NyZWVucyA9IF9SZWFjdCR1c2VTdGF0ZTZbMF0sXG4gICAgc2V0Q3VyU2NyZWVucyA9IF9SZWFjdCR1c2VTdGF0ZTZbMV07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gY2FsYyByZXBvbnNpdmUgZGF0YSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBtZXJnZUFsaWduID0gdXNlTWVyZ2VQcm9wQnlTY3JlZW4oYWxpZ24sIGN1clNjcmVlbnMpO1xuICB2YXIgbWVyZ2VKdXN0aWZ5ID0gdXNlTWVyZ2VQcm9wQnlTY3JlZW4oanVzdGlmeSwgY3VyU2NyZWVucyk7XG4gIHZhciBzdXBwb3J0RmxleEdhcCA9ICgwLCBfdXNlRmxleEdhcFN1cHBvcnRbXCJkZWZhdWx0XCJdKSgpO1xuICB2YXIgZ3V0dGVyUmVmID0gUmVhY3QudXNlUmVmKGd1dHRlcik7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRWZmZWN0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdG9rZW4gPSBfcmVzcG9uc2l2ZU9ic2VydmVbXCJkZWZhdWx0XCJdLnN1YnNjcmliZShmdW5jdGlvbiAoc2NyZWVuKSB7XG4gICAgICBzZXRDdXJTY3JlZW5zKHNjcmVlbik7XG4gICAgICB2YXIgY3VycmVudEd1dHRlciA9IGd1dHRlclJlZi5jdXJyZW50IHx8IDA7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudEd1dHRlcikgJiYgKDAsIF90eXBlb2YyW1wiZGVmYXVsdFwiXSkoY3VycmVudEd1dHRlcikgPT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoY3VycmVudEd1dHRlcikgJiYgKCgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKGN1cnJlbnRHdXR0ZXJbMF0pID09PSAnb2JqZWN0JyB8fCAoMCwgX3R5cGVvZjJbXCJkZWZhdWx0XCJdKShjdXJyZW50R3V0dGVyWzFdKSA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgIHNldFNjcmVlbnMoc2NyZWVuKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9yZXNwb25zaXZlT2JzZXJ2ZVtcImRlZmF1bHRcIl0udW5zdWJzY3JpYmUodG9rZW4pO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgZ2V0R3V0dGVyID0gZnVuY3Rpb24gZ2V0R3V0dGVyKCkge1xuICAgIHZhciByZXN1bHRzID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXTtcbiAgICB2YXIgbm9ybWFsaXplZEd1dHRlciA9IEFycmF5LmlzQXJyYXkoZ3V0dGVyKSA/IGd1dHRlciA6IFtndXR0ZXIsIHVuZGVmaW5lZF07XG4gICAgbm9ybWFsaXplZEd1dHRlci5mb3JFYWNoKGZ1bmN0aW9uIChnLCBpbmRleCkge1xuICAgICAgaWYgKCgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKGcpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9yZXNwb25zaXZlT2JzZXJ2ZS5yZXNwb25zaXZlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgYnJlYWtwb2ludCA9IF9yZXNwb25zaXZlT2JzZXJ2ZS5yZXNwb25zaXZlQXJyYXlbaV07XG4gICAgICAgICAgaWYgKHNjcmVlbnNbYnJlYWtwb2ludF0gJiYgZ1ticmVha3BvaW50XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IGdbYnJlYWtwb2ludF07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHNbaW5kZXhdID0gZztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygncm93JywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgdmFyIGd1dHRlcnMgPSBnZXRHdXR0ZXIoKTtcbiAgdmFyIGNsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vLXdyYXBcIiksIHdyYXAgPT09IGZhbHNlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KG1lcmdlSnVzdGlmeSksIG1lcmdlSnVzdGlmeSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChtZXJnZUFsaWduKSwgbWVyZ2VBbGlnbiksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpO1xuICAvLyBBZGQgZ3V0dGVyIHJlbGF0ZWQgc3R5bGVcbiAgdmFyIHJvd1N0eWxlID0ge307XG4gIHZhciBob3Jpem9udGFsR3V0dGVyID0gZ3V0dGVyc1swXSAhPSBudWxsICYmIGd1dHRlcnNbMF0gPiAwID8gZ3V0dGVyc1swXSAvIC0yIDogdW5kZWZpbmVkO1xuICB2YXIgdmVydGljYWxHdXR0ZXIgPSBndXR0ZXJzWzFdICE9IG51bGwgJiYgZ3V0dGVyc1sxXSA+IDAgPyBndXR0ZXJzWzFdIC8gLTIgOiB1bmRlZmluZWQ7XG4gIGlmIChob3Jpem9udGFsR3V0dGVyKSB7XG4gICAgcm93U3R5bGUubWFyZ2luTGVmdCA9IGhvcml6b250YWxHdXR0ZXI7XG4gICAgcm93U3R5bGUubWFyZ2luUmlnaHQgPSBob3Jpem9udGFsR3V0dGVyO1xuICB9XG4gIGlmIChzdXBwb3J0RmxleEdhcCkge1xuICAgIC8vIFNldCBnYXAgZGlyZWN0IGlmIGZsZXggZ2FwIHN1cHBvcnRcbiAgICB2YXIgX2d1dHRlcnMgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoZ3V0dGVycywgMik7XG4gICAgcm93U3R5bGUucm93R2FwID0gX2d1dHRlcnNbMV07XG4gIH0gZWxzZSBpZiAodmVydGljYWxHdXR0ZXIpIHtcbiAgICByb3dTdHlsZS5tYXJnaW5Ub3AgPSB2ZXJ0aWNhbEd1dHRlcjtcbiAgICByb3dTdHlsZS5tYXJnaW5Cb3R0b20gPSB2ZXJ0aWNhbEd1dHRlcjtcbiAgfVxuICAvLyBcImd1dHRlcnNcIiBpcyBhIG5ldyBhcnJheSBpbiBlYWNoIHJlbmRlcmluZyBwaGFzZSwgaXQnbGwgbWFrZSAnUmVhY3QudXNlTWVtbycgZWZmZWN0bGVzcy5cbiAgLy8gU28gd2UgZGVjb25zdHJ1Y3QgXCJndXR0ZXJzXCIgdmFyaWFibGUgaGVyZS5cbiAgdmFyIF9ndXR0ZXJzMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShndXR0ZXJzLCAyKSxcbiAgICBndXR0ZXJIID0gX2d1dHRlcnMyWzBdLFxuICAgIGd1dHRlclYgPSBfZ3V0dGVyczJbMV07XG4gIHZhciByb3dDb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGd1dHRlcjogW2d1dHRlckgsIGd1dHRlclZdLFxuICAgICAgd3JhcDogd3JhcCxcbiAgICAgIHN1cHBvcnRGbGV4R2FwOiBzdXBwb3J0RmxleEdhcFxuICAgIH07XG4gIH0sIFtndXR0ZXJILCBndXR0ZXJWLCB3cmFwLCBzdXBwb3J0RmxleEdhcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1Jvd0NvbnRleHRbXCJkZWZhdWx0XCJdLlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvd0NvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBvdGhlcnMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgc3R5bGU6ICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHJvd1N0eWxlKSwgc3R5bGUpLFxuICAgIHJlZjogcmVmXG4gIH0pLCBjaGlsZHJlbikpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSb3cuZGlzcGxheU5hbWUgPSAnUm93Jztcbn1cbnZhciBfZGVmYXVsdCA9IFJvdztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9zdHlsZUNoZWNrZXIgPSByZXF1aXJlKFwiLi4vc3R5bGVDaGVja2VyXCIpO1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgX1JlYWN0JHVzZVN0YXRlMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIGZsZXhpYmxlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRGbGV4aWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0RmxleGlibGUoKDAsIF9zdHlsZUNoZWNrZXIuZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCkoKSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGZsZXhpYmxlO1xufTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRldGVjdEZsZXhHYXBTdXBwb3J0ZWQgPSBleHBvcnRzLmNhblVzZURvY0VsZW1lbnQgPSB2b2lkIDA7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1N0eWxlU3VwcG9ydFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfc3R5bGVDaGVja2VyLmlzU3R5bGVTdXBwb3J0O1xuICB9XG59KTtcbnZhciBfY2FuVXNlRG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvRG9tL2NhblVzZURvbVwiKSk7XG52YXIgX3N0eWxlQ2hlY2tlciA9IHJlcXVpcmUoXCJyYy11dGlsL2xpYi9Eb20vc3R5bGVDaGVja2VyXCIpO1xudmFyIGNhblVzZURvY0VsZW1lbnQgPSBmdW5jdGlvbiBjYW5Vc2VEb2NFbGVtZW50KCkge1xuICByZXR1cm4gKDAsIF9jYW5Vc2VEb21bXCJkZWZhdWx0XCJdKSgpICYmIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59O1xuZXhwb3J0cy5jYW5Vc2VEb2NFbGVtZW50ID0gY2FuVXNlRG9jRWxlbWVudDtcbnZhciBmbGV4R2FwU3VwcG9ydGVkO1xudmFyIGRldGVjdEZsZXhHYXBTdXBwb3J0ZWQgPSBmdW5jdGlvbiBkZXRlY3RGbGV4R2FwU3VwcG9ydGVkKCkge1xuICBpZiAoIWNhblVzZURvY0VsZW1lbnQoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZmxleEdhcFN1cHBvcnRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZsZXhHYXBTdXBwb3J0ZWQ7XG4gIH1cbiAgLy8gY3JlYXRlIGZsZXggY29udGFpbmVyIHdpdGggcm93LWdhcCBzZXRcbiAgdmFyIGZsZXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZmxleC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICBmbGV4LnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcbiAgZmxleC5zdHlsZS5yb3dHYXAgPSAnMXB4JztcbiAgLy8gY3JlYXRlIHR3bywgZWxlbWVudHMgaW5zaWRlIGl0XG4gIGZsZXguYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICBmbGV4LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgLy8gYXBwZW5kIHRvIHRoZSBET00gKG5lZWRlZCB0byBvYnRhaW4gc2Nyb2xsSGVpZ2h0KVxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZsZXgpO1xuICBmbGV4R2FwU3VwcG9ydGVkID0gZmxleC5zY3JvbGxIZWlnaHQgPT09IDE7IC8vIGZsZXggY29udGFpbmVyIHNob3VsZCBiZSAxcHggaGlnaCBmcm9tIHRoZSByb3ctZ2FwXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZmxleCk7XG4gIHJldHVybiBmbGV4R2FwU3VwcG9ydGVkO1xufTtcbmV4cG9ydHMuZGV0ZWN0RmxleEdhcFN1cHBvcnRlZCA9IGRldGVjdEZsZXhHYXBTdXBwb3J0ZWQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLmRlZmF1bHQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc1N0eWxlU3VwcG9ydCA9IGlzU3R5bGVTdXBwb3J0O1xudmFyIF9jYW5Vc2VEb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NhblVzZURvbVwiKSk7XG52YXIgaXNTdHlsZU5hbWVTdXBwb3J0ID0gZnVuY3Rpb24gaXNTdHlsZU5hbWVTdXBwb3J0KHN0eWxlTmFtZSkge1xuICBpZiAoKDAsIF9jYW5Vc2VEb20uZGVmYXVsdCkoKSAmJiB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgdmFyIHN0eWxlTmFtZUxpc3QgPSBBcnJheS5pc0FycmF5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBbc3R5bGVOYW1lXTtcbiAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICByZXR1cm4gc3R5bGVOYW1lTGlzdC5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gbmFtZSBpbiBkb2N1bWVudEVsZW1lbnQuc3R5bGU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBpc1N0eWxlVmFsdWVTdXBwb3J0ID0gZnVuY3Rpb24gaXNTdHlsZVZhbHVlU3VwcG9ydChzdHlsZU5hbWUsIHZhbHVlKSB7XG4gIGlmICghaXNTdHlsZU5hbWVTdXBwb3J0KHN0eWxlTmFtZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgb3JpZ2luID0gZWxlLnN0eWxlW3N0eWxlTmFtZV07XG4gIGVsZS5zdHlsZVtzdHlsZU5hbWVdID0gdmFsdWU7XG4gIHJldHVybiBlbGUuc3R5bGVbc3R5bGVOYW1lXSAhPT0gb3JpZ2luO1xufTtcbmZ1bmN0aW9uIGlzU3R5bGVTdXBwb3J0KHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoc3R5bGVOYW1lKSAmJiBzdHlsZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaXNTdHlsZVZhbHVlU3VwcG9ydChzdHlsZU5hbWUsIHN0eWxlVmFsdWUpO1xuICB9XG4gIHJldHVybiBpc1N0eWxlTmFtZVN1cHBvcnQoc3R5bGVOYW1lKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcbnZhciBfUXVlc3Rpb25DaXJjbGVPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWRcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9ncmlkL2NvbFwiKSk7XG52YXIgX0xvY2FsZVJlY2VpdmVyID0gcmVxdWlyZShcIi4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlclwiKTtcbnZhciBfZGVmYXVsdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUvZGVmYXVsdFwiKSk7XG52YXIgX3Rvb2x0aXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b29sdGlwXCIpKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuL2NvbnRleHRcIik7XG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuZnVuY3Rpb24gdG9Ub29sdGlwUHJvcHModG9vbHRpcCkge1xuICBpZiAoIXRvb2x0aXApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoKDAsIF90eXBlb2YyW1wiZGVmYXVsdFwiXSkodG9vbHRpcCkgPT09ICdvYmplY3QnICYmICEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KHRvb2x0aXApKSB7XG4gICAgcmV0dXJuIHRvb2x0aXA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogdG9vbHRpcFxuICB9O1xufVxudmFyIEZvcm1JdGVtTGFiZWwgPSBmdW5jdGlvbiBGb3JtSXRlbUxhYmVsKF9yZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICBodG1sRm9yID0gX3JlZi5odG1sRm9yLFxuICAgIGxhYmVsQ29sID0gX3JlZi5sYWJlbENvbCxcbiAgICBsYWJlbEFsaWduID0gX3JlZi5sYWJlbEFsaWduLFxuICAgIGNvbG9uID0gX3JlZi5jb2xvbixcbiAgICByZXF1aXJlZCA9IF9yZWYucmVxdWlyZWQsXG4gICAgcmVxdWlyZWRNYXJrID0gX3JlZi5yZXF1aXJlZE1hcmssXG4gICAgdG9vbHRpcCA9IF9yZWYudG9vbHRpcDtcbiAgdmFyIF91c2VMb2NhbGVSZWNlaXZlciA9ICgwLCBfTG9jYWxlUmVjZWl2ZXIudXNlTG9jYWxlUmVjZWl2ZXIpKCdGb3JtJyksXG4gICAgX3VzZUxvY2FsZVJlY2VpdmVyMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfdXNlTG9jYWxlUmVjZWl2ZXIsIDEpLFxuICAgIGZvcm1Mb2NhbGUgPSBfdXNlTG9jYWxlUmVjZWl2ZXIyWzBdO1xuICBpZiAoIWxhYmVsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9jb250ZXh0LkZvcm1Db250ZXh0LkNvbnN1bWVyLCB7XG4gICAga2V5OiBcImxhYmVsXCJcbiAgfSwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzMjtcbiAgICB2YXIgdmVydGljYWwgPSBfcmVmMi52ZXJ0aWNhbCxcbiAgICAgIGNvbnRleHRMYWJlbEFsaWduID0gX3JlZjIubGFiZWxBbGlnbixcbiAgICAgIGNvbnRleHRMYWJlbENvbCA9IF9yZWYyLmxhYmVsQ29sLFxuICAgICAgbGFiZWxXcmFwID0gX3JlZjIubGFiZWxXcmFwLFxuICAgICAgY29udGV4dENvbG9uID0gX3JlZjIuY29sb247XG4gICAgdmFyIF9hO1xuICAgIHZhciBtZXJnZWRMYWJlbENvbCA9IGxhYmVsQ29sIHx8IGNvbnRleHRMYWJlbENvbCB8fCB7fTtcbiAgICB2YXIgbWVyZ2VkTGFiZWxBbGlnbiA9IGxhYmVsQWxpZ24gfHwgY29udGV4dExhYmVsQWxpZ247XG4gICAgdmFyIGxhYmVsQ2xzQmFzaWMgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tbGFiZWxcIik7XG4gICAgdmFyIGxhYmVsQ29sQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkobGFiZWxDbHNCYXNpYywgbWVyZ2VkTGFiZWxBbGlnbiA9PT0gJ2xlZnQnICYmIFwiXCIuY29uY2F0KGxhYmVsQ2xzQmFzaWMsIFwiLWxlZnRcIiksIG1lcmdlZExhYmVsQ29sLmNsYXNzTmFtZSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgXCJcIi5jb25jYXQobGFiZWxDbHNCYXNpYywgXCItd3JhcFwiKSwgISFsYWJlbFdyYXApKTtcbiAgICB2YXIgbGFiZWxDaGlsZHJlbiA9IGxhYmVsO1xuICAgIC8vIEtlZXAgbGFiZWwgaXMgb3JpZ2luYWwgd2hlcmUgdGhlcmUgc2hvdWxkIGhhdmUgbm8gY29sb25cbiAgICB2YXIgY29tcHV0ZWRDb2xvbiA9IGNvbG9uID09PSB0cnVlIHx8IGNvbnRleHRDb2xvbiAhPT0gZmFsc2UgJiYgY29sb24gIT09IGZhbHNlO1xuICAgIHZhciBoYXZlQ29sb24gPSBjb21wdXRlZENvbG9uICYmICF2ZXJ0aWNhbDtcbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlZCB1c2VyIGlucHV0IGNvbG9uXG4gICAgaWYgKGhhdmVDb2xvbiAmJiB0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnICYmIGxhYmVsLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgIGxhYmVsQ2hpbGRyZW4gPSBsYWJlbC5yZXBsYWNlKC9bOnzvvJpdXFxzKiQvLCAnJyk7XG4gICAgfVxuICAgIC8vIFRvb2x0aXBcbiAgICB2YXIgdG9vbHRpcFByb3BzID0gdG9Ub29sdGlwUHJvcHModG9vbHRpcCk7XG4gICAgaWYgKHRvb2x0aXBQcm9wcykge1xuICAgICAgdmFyIF90b29sdGlwUHJvcHMkaWNvbiA9IHRvb2x0aXBQcm9wcy5pY29uLFxuICAgICAgICBpY29uID0gX3Rvb2x0aXBQcm9wcyRpY29uID09PSB2b2lkIDAgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfUXVlc3Rpb25DaXJjbGVPdXRsaW5lZFtcImRlZmF1bHRcIl0sIG51bGwpIDogX3Rvb2x0aXBQcm9wcyRpY29uLFxuICAgICAgICByZXN0VG9vbHRpcFByb3BzID0gX19yZXN0KHRvb2x0aXBQcm9wcywgW1wiaWNvblwiXSk7XG4gICAgICB2YXIgdG9vbHRpcE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfdG9vbHRpcFtcImRlZmF1bHRcIl0sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcmVzdFRvb2x0aXBQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaWNvbiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS10b29sdGlwXCIpLFxuICAgICAgICB0aXRsZTogJydcbiAgICAgIH0pKTtcbiAgICAgIGxhYmVsQ2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgbGFiZWxDaGlsZHJlbiwgdG9vbHRpcE5vZGUpO1xuICAgIH1cbiAgICAvLyBBZGQgcmVxdWlyZWQgbWFyayBpZiBvcHRpb25hbFxuICAgIGlmIChyZXF1aXJlZE1hcmsgPT09ICdvcHRpb25hbCcgJiYgIXJlcXVpcmVkKSB7XG4gICAgICBsYWJlbENoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGxhYmVsQ2hpbGRyZW4sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLW9wdGlvbmFsXCIpLFxuICAgICAgICB0aXRsZTogXCJcIlxuICAgICAgfSwgKGZvcm1Mb2NhbGUgPT09IG51bGwgfHwgZm9ybUxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZm9ybUxvY2FsZS5vcHRpb25hbCkgfHwgKChfYSA9IF9kZWZhdWx0MltcImRlZmF1bHRcIl0uRm9ybSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wdGlvbmFsKSkpO1xuICAgIH1cbiAgICB2YXIgbGFiZWxDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKSgoX2NsYXNzTmFtZXMyID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tcmVxdWlyZWRcIiksIHJlcXVpcmVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1yZXF1aXJlZC1tYXJrLW9wdGlvbmFsXCIpLCByZXF1aXJlZE1hcmsgPT09ICdvcHRpb25hbCcpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLW5vLWNvbG9uXCIpLCAhY29tcHV0ZWRDb2xvbiksIF9jbGFzc05hbWVzMikpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29sW1wiZGVmYXVsdFwiXSwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBtZXJnZWRMYWJlbENvbCwge1xuICAgICAgY2xhc3NOYW1lOiBsYWJlbENvbENsYXNzTmFtZVxuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICBjbGFzc05hbWU6IGxhYmVsQ2xhc3NOYW1lLFxuICAgICAgdGl0bGU6IHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycgPyBsYWJlbCA6ICcnXG4gICAgfSwgbGFiZWxDaGlsZHJlbikpO1xuICB9KTtcbn07XG52YXIgX2RlZmF1bHQgPSBGb3JtSXRlbUxhYmVsO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4gIFxuICB2YXIgX1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vbGliL2ljb25zL1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQnKSk7XG4gIFxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG4gIFxuICB2YXIgX2RlZmF1bHQgPSBfUXVlc3Rpb25DaXJjbGVPdXRsaW5lZDtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4gIG1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9RdWVzdGlvbkNpcmNsZU91dGxpbmVkXCIpKTtcbnZhciBfQW50ZEljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuXG52YXIgUXVlc3Rpb25DaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0FudGRJY29uLmRlZmF1bHQsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSgoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBfUXVlc3Rpb25DaXJjbGVPdXRsaW5lZC5kZWZhdWx0XG4gIH0pKTtcbn07XG5RdWVzdGlvbkNpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQnO1xudmFyIF9kZWZhdWx0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoUXVlc3Rpb25DaXJjbGVPdXRsaW5lZCk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0wIDgyMGMtMjA1LjQgMC0zNzItMTY2LjYtMzcyLTM3MnMxNjYuNi0zNzIgMzcyLTM3MiAzNzIgMTY2LjYgMzcyIDM3Mi0xNjYuNiAzNzItMzcyIDM3MnpcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNjIzLjYgMzE2LjdDNTkzLjYgMjkwLjQgNTU0IDI3NiA1MTIgMjc2cy04MS42IDE0LjUtMTExLjYgNDAuN0MzNjkuMiAzNDQgMzUyIDM4MC43IDM1MiA0MjB2Ny42YzAgNC40IDMuNiA4IDggOGg0OGM0LjQgMCA4LTMuNiA4LThWNDIwYzAtNDQuMSA0My4xLTgwIDk2LTgwczk2IDM1LjkgOTYgODBjMCAzMS4xLTIyIDU5LjYtNTYuMSA3Mi43LTIxLjIgOC4xLTM5LjIgMjIuMy01Mi4xIDQwLjktMTMuMSAxOS0xOS45IDQxLjgtMTkuOSA2NC45VjYyMGMwIDQuNCAzLjYgOCA4IDhoNDhjNC40IDAgOC0zLjYgOC04di0yMi43YTQ4LjMgNDguMyAwIDAxMzAuOS00NC44YzU5LTIyLjcgOTcuMS03NC43IDk3LjEtMTMyLjUuMS0zOS4zLTE3LjEtNzYtNDguMy0xMDMuM3pNNDcyIDczMmE0MCA0MCAwIDEwODAgMCA0MCA0MCAwIDEwLTgwIDB6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJxdWVzdGlvbi1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydHMuZGVmYXVsdCA9IFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIF9yY1Rvb2x0aXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy10b29sdGlwXCIpKTtcbnZhciBfdXNlTWVyZ2VkU3RhdGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvaG9va3MvdXNlTWVyZ2VkU3RhdGVcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9jb2xvcnMgPSByZXF1aXJlKFwiLi4vX3V0aWwvY29sb3JzXCIpO1xudmFyIF9tb3Rpb24gPSByZXF1aXJlKFwiLi4vX3V0aWwvbW90aW9uXCIpO1xudmFyIF9wbGFjZW1lbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvcGxhY2VtZW50c1wiKSk7XG52YXIgX3JlYWN0Tm9kZSA9IHJlcXVpcmUoXCIuLi9fdXRpbC9yZWFjdE5vZGVcIik7XG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC93YXJuaW5nXCIpKTtcbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG52YXIgc3BsaXRPYmplY3QgPSBmdW5jdGlvbiBzcGxpdE9iamVjdChvYmosIGtleXMpIHtcbiAgdmFyIHBpY2tlZCA9IHt9O1xuICB2YXIgb21pdHRlZCA9ICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgb2JqKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAob2JqICYmIGtleSBpbiBvYmopIHtcbiAgICAgIHBpY2tlZFtrZXldID0gb2JqW2tleV07XG4gICAgICBkZWxldGUgb21pdHRlZFtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcGlja2VkOiBwaWNrZWQsXG4gICAgb21pdHRlZDogb21pdHRlZFxuICB9O1xufTtcbnZhciBQcmVzZXRDb2xvclJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXCIuY29uY2F0KF9jb2xvcnMuUHJlc2V0Q29sb3JUeXBlcy5qb2luKCd8JyksIFwiKSgtaW52ZXJzZSk/JFwiKSk7XG4vLyBGaXggVG9vbHRpcCB3b24ndCBoaWRlIGF0IGRpc2FibGVkIGJ1dHRvblxuLy8gbW91c2UgZXZlbnRzIGRvbid0IHRyaWdnZXIgYXQgZGlzYWJsZWQgYnV0dG9uIGluIENocm9tZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90b29sdGlwL2lzc3Vlcy8xOFxuZnVuY3Rpb24gZ2V0RGlzYWJsZWRDb21wYXRpYmxlQ2hpbGRyZW4oZWxlbWVudCwgcHJlZml4Q2xzKSB7XG4gIHZhciBlbGVtZW50VHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgaWYgKChlbGVtZW50VHlwZS5fX0FOVF9CVVRUT04gPT09IHRydWUgfHwgZWxlbWVudC50eXBlID09PSAnYnV0dG9uJykgJiYgZWxlbWVudC5wcm9wcy5kaXNhYmxlZCB8fCBlbGVtZW50VHlwZS5fX0FOVF9TV0lUQ0ggPT09IHRydWUgJiYgKGVsZW1lbnQucHJvcHMuZGlzYWJsZWQgfHwgZWxlbWVudC5wcm9wcy5sb2FkaW5nKSB8fCBlbGVtZW50VHlwZS5fX0FOVF9SQURJTyA9PT0gdHJ1ZSAmJiBlbGVtZW50LnByb3BzLmRpc2FibGVkKSB7XG4gICAgLy8gUGljayBzb21lIGxheW91dCByZWxhdGVkIHN0eWxlIHByb3BlcnRpZXMgdXAgdG8gc3BhblxuICAgIC8vIFByZXZlbnQgbGF5b3V0IGJ1Z3MgbGlrZSBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy81MjU0XG4gICAgdmFyIF9zcGxpdE9iamVjdCA9IHNwbGl0T2JqZWN0KGVsZW1lbnQucHJvcHMuc3R5bGUsIFsncG9zaXRpb24nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJywgJ2Zsb2F0JywgJ2Rpc3BsYXknLCAnekluZGV4J10pLFxuICAgICAgcGlja2VkID0gX3NwbGl0T2JqZWN0LnBpY2tlZCxcbiAgICAgIG9taXR0ZWQgPSBfc3BsaXRPYmplY3Qub21pdHRlZDtcbiAgICB2YXIgc3BhblN0eWxlID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgIH0sIHBpY2tlZCksIHtcbiAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJyxcbiAgICAgIHdpZHRoOiBlbGVtZW50LnByb3BzLmJsb2NrID8gJzEwMCUnIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgdmFyIGJ1dHRvblN0eWxlID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgb21pdHRlZCksIHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgIH0pO1xuICAgIHZhciBjaGlsZCA9ICgwLCBfcmVhY3ROb2RlLmNsb25lRWxlbWVudCkoZWxlbWVudCwge1xuICAgICAgc3R5bGU6IGJ1dHRvblN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBzdHlsZTogc3BhblN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShlbGVtZW50LnByb3BzLmNsYXNzTmFtZSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kaXNhYmxlZC1jb21wYXRpYmxlLXdyYXBwZXJcIikpXG4gICAgfSwgY2hpbGQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxudmFyIFRvb2x0aXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICB2YXIgX2NsYXNzTmFtZXMyO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KF9jb25maWdQcm92aWRlci5Db25maWdDb250ZXh0KSxcbiAgICBnZXRDb250ZXh0UG9wdXBDb250YWluZXIgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQb3B1cENvbnRhaW5lcixcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uO1xuICAvLyBXYXJuaW5nIGZvciBkZXByZWNhdGVkIHVzYWdlXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgW1sndmlzaWJsZScsICdvcGVuJ10sIFsnZGVmYXVsdFZpc2libGUnLCAnZGVmYXVsdE9wZW4nXSwgWydvblZpc2libGVDaGFuZ2UnLCAnb25PcGVuQ2hhbmdlJ10sIFsnYWZ0ZXJWaXNpYmxlQ2hhbmdlJywgJ2FmdGVyT3BlbkNoYW5nZSddXS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX3JlZjIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX3JlZiwgMiksXG4gICAgICAgIGRlcHJlY2F0ZWROYW1lID0gX3JlZjJbMF0sXG4gICAgICAgIG5ld05hbWUgPSBfcmVmMlsxXTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEoZGVwcmVjYXRlZE5hbWUgaW4gcHJvcHMpLCAnVG9vbHRpcCcsIFwiYFwiLmNvbmNhdChkZXByZWNhdGVkTmFtZSwgXCJgIGlzIGRlcHJlY2F0ZWQgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgdmVyc2lvbiwgcGxlYXNlIHVzZSBgXCIpLmNvbmNhdChuZXdOYW1lLCBcImAgaW5zdGVhZC5cIikpIDogdm9pZCAwO1xuICAgIH0pO1xuICB9XG4gIHZhciBfdXNlTWVyZ2VkU3RhdGUgPSAoMCwgX3VzZU1lcmdlZFN0YXRlM1tcImRlZmF1bHRcIl0pKGZhbHNlLCB7XG4gICAgICB2YWx1ZTogcHJvcHMub3BlbiAhPT0gdW5kZWZpbmVkID8gcHJvcHMub3BlbiA6IHByb3BzLnZpc2libGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IHByb3BzLmRlZmF1bHRPcGVuICE9PSB1bmRlZmluZWQgPyBwcm9wcy5kZWZhdWx0T3BlbiA6IHByb3BzLmRlZmF1bHRWaXNpYmxlXG4gICAgfSksXG4gICAgX3VzZU1lcmdlZFN0YXRlMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfdXNlTWVyZ2VkU3RhdGUsIDIpLFxuICAgIG9wZW4gPSBfdXNlTWVyZ2VkU3RhdGUyWzBdLFxuICAgIHNldE9wZW4gPSBfdXNlTWVyZ2VkU3RhdGUyWzFdO1xuICB2YXIgaXNOb1RpdGxlID0gZnVuY3Rpb24gaXNOb1RpdGxlKCkge1xuICAgIHZhciB0aXRsZSA9IHByb3BzLnRpdGxlLFxuICAgICAgb3ZlcmxheSA9IHByb3BzLm92ZXJsYXk7XG4gICAgcmV0dXJuICF0aXRsZSAmJiAhb3ZlcmxheSAmJiB0aXRsZSAhPT0gMDsgLy8gb3ZlcmxheSBmb3Igb2xkIHZlcnNpb24gY29tcGF0aWJpbGl0eVxuICB9O1xuXG4gIHZhciBvbk9wZW5DaGFuZ2UgPSBmdW5jdGlvbiBvbk9wZW5DaGFuZ2UodmlzKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBzZXRPcGVuKGlzTm9UaXRsZSgpID8gZmFsc2UgOiB2aXMpO1xuICAgIGlmICghaXNOb1RpdGxlKCkpIHtcbiAgICAgIChfYSA9IHByb3BzLm9uT3BlbkNoYW5nZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvcHMsIHZpcyk7XG4gICAgICAoX2IgPSBwcm9wcy5vblZpc2libGVDaGFuZ2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHByb3BzLCB2aXMpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldFRvb2x0aXBQbGFjZW1lbnRzID0gZnVuY3Rpb24gZ2V0VG9vbHRpcFBsYWNlbWVudHMoKSB7XG4gICAgdmFyIGJ1aWx0aW5QbGFjZW1lbnRzID0gcHJvcHMuYnVpbHRpblBsYWNlbWVudHMsXG4gICAgICBfcHJvcHMkYXJyb3dQb2ludEF0Q2UgPSBwcm9wcy5hcnJvd1BvaW50QXRDZW50ZXIsXG4gICAgICBhcnJvd1BvaW50QXRDZW50ZXIgPSBfcHJvcHMkYXJyb3dQb2ludEF0Q2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGFycm93UG9pbnRBdENlLFxuICAgICAgX3Byb3BzJGF1dG9BZGp1c3RPdmVyID0gcHJvcHMuYXV0b0FkanVzdE92ZXJmbG93LFxuICAgICAgYXV0b0FkanVzdE92ZXJmbG93ID0gX3Byb3BzJGF1dG9BZGp1c3RPdmVyID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJGF1dG9BZGp1c3RPdmVyO1xuICAgIHJldHVybiBidWlsdGluUGxhY2VtZW50cyB8fCAoMCwgX3BsYWNlbWVudHNbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBhcnJvd1BvaW50QXRDZW50ZXI6IGFycm93UG9pbnRBdENlbnRlcixcbiAgICAgIGF1dG9BZGp1c3RPdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93XG4gICAgfSk7XG4gIH07XG4gIC8vIOWKqOaAgeiuvue9ruWKqOeUu+eCuVxuICB2YXIgb25Qb3B1cEFsaWduID0gZnVuY3Rpb24gb25Qb3B1cEFsaWduKGRvbU5vZGUsIGFsaWduKSB7XG4gICAgdmFyIHBsYWNlbWVudHMgPSBnZXRUb29sdGlwUGxhY2VtZW50cygpO1xuICAgIC8vIOW9k+WJjei/lOWbnueahOS9jee9rlxuICAgIHZhciBwbGFjZW1lbnQgPSBPYmplY3Qua2V5cyhwbGFjZW1lbnRzKS5maW5kKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICByZXR1cm4gcGxhY2VtZW50c1trZXldLnBvaW50c1swXSA9PT0gKChfYSA9IGFsaWduLnBvaW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzBdKSAmJiBwbGFjZW1lbnRzW2tleV0ucG9pbnRzWzFdID09PSAoKF9iID0gYWxpZ24ucG9pbnRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbMV0pO1xuICAgIH0pO1xuICAgIGlmICghcGxhY2VtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIOagueaNruW9k+WJjeWdkOagh+iuvue9ruWKqOeUu+eCuVxuICAgIHZhciByZWN0ID0gZG9tTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgdHJhbnNmb3JtT3JpZ2luID0ge1xuICAgICAgdG9wOiAnNTAlJyxcbiAgICAgIGxlZnQ6ICc1MCUnXG4gICAgfTtcbiAgICBpZiAoL3RvcHxCb3R0b20vLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luLnRvcCA9IFwiXCIuY29uY2F0KHJlY3QuaGVpZ2h0IC0gYWxpZ24ub2Zmc2V0WzFdLCBcInB4XCIpO1xuICAgIH0gZWxzZSBpZiAoL1RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luLnRvcCA9IFwiXCIuY29uY2F0KC1hbGlnbi5vZmZzZXRbMV0sIFwicHhcIik7XG4gICAgfVxuICAgIGlmICgvbGVmdHxSaWdodC8udGVzdChwbGFjZW1lbnQpKSB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW4ubGVmdCA9IFwiXCIuY29uY2F0KHJlY3Qud2lkdGggLSBhbGlnbi5vZmZzZXRbMF0sIFwicHhcIik7XG4gICAgfSBlbHNlIGlmICgvcmlnaHR8TGVmdC8udGVzdChwbGFjZW1lbnQpKSB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW4ubGVmdCA9IFwiXCIuY29uY2F0KC1hbGlnbi5vZmZzZXRbMF0sIFwicHhcIik7XG4gICAgfVxuICAgIGRvbU5vZGUuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gXCJcIi5jb25jYXQodHJhbnNmb3JtT3JpZ2luLmxlZnQsIFwiIFwiKS5jb25jYXQodHJhbnNmb3JtT3JpZ2luLnRvcCk7XG4gIH07XG4gIHZhciBnZXRPdmVybGF5ID0gZnVuY3Rpb24gZ2V0T3ZlcmxheSgpIHtcbiAgICB2YXIgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgIG92ZXJsYXkgPSBwcm9wcy5vdmVybGF5O1xuICAgIGlmICh0aXRsZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRpdGxlO1xuICAgIH1cbiAgICByZXR1cm4gb3ZlcmxheSB8fCB0aXRsZSB8fCAnJztcbiAgfTtcbiAgdmFyIGdldFBvcHVwQ29udGFpbmVyID0gcHJvcHMuZ2V0UG9wdXBDb250YWluZXIsXG4gICAgX3Byb3BzJHBsYWNlbWVudCA9IHByb3BzLnBsYWNlbWVudCxcbiAgICBwbGFjZW1lbnQgPSBfcHJvcHMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyAndG9wJyA6IF9wcm9wcyRwbGFjZW1lbnQsXG4gICAgX3Byb3BzJG1vdXNlRW50ZXJEZWxhID0gcHJvcHMubW91c2VFbnRlckRlbGF5LFxuICAgIG1vdXNlRW50ZXJEZWxheSA9IF9wcm9wcyRtb3VzZUVudGVyRGVsYSA9PT0gdm9pZCAwID8gMC4xIDogX3Byb3BzJG1vdXNlRW50ZXJEZWxhLFxuICAgIF9wcm9wcyRtb3VzZUxlYXZlRGVsYSA9IHByb3BzLm1vdXNlTGVhdmVEZWxheSxcbiAgICBtb3VzZUxlYXZlRGVsYXkgPSBfcHJvcHMkbW91c2VMZWF2ZURlbGEgPT09IHZvaWQgMCA/IDAuMSA6IF9wcm9wcyRtb3VzZUxlYXZlRGVsYSxcbiAgICBvdGhlclByb3BzID0gX19yZXN0KHByb3BzLCBbXCJnZXRQb3B1cENvbnRhaW5lclwiLCBcInBsYWNlbWVudFwiLCBcIm1vdXNlRW50ZXJEZWxheVwiLCBcIm1vdXNlTGVhdmVEZWxheVwiXSk7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgb3BlbkNsYXNzTmFtZSA9IHByb3BzLm9wZW5DbGFzc05hbWUsXG4gICAgZ2V0VG9vbHRpcENvbnRhaW5lciA9IHByb3BzLmdldFRvb2x0aXBDb250YWluZXIsXG4gICAgb3ZlcmxheUNsYXNzTmFtZSA9IHByb3BzLm92ZXJsYXlDbGFzc05hbWUsXG4gICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICBvdmVybGF5SW5uZXJTdHlsZSA9IHByb3BzLm92ZXJsYXlJbm5lclN0eWxlLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3Rvb2x0aXAnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgcm9vdFByZWZpeENscyA9IGdldFByZWZpeENscygpO1xuICB2YXIgdGVtcE9wZW4gPSBvcGVuO1xuICAvLyBIaWRlIHRvb2x0aXAgd2hlbiB0aGVyZSBpcyBubyB0aXRsZVxuICBpZiAoISgnb3BlbicgaW4gcHJvcHMpICYmICEoJ3Zpc2libGUnIGluIHByb3BzKSAmJiBpc05vVGl0bGUoKSkge1xuICAgIHRlbXBPcGVuID0gZmFsc2U7XG4gIH1cbiAgdmFyIGNoaWxkID0gZ2V0RGlzYWJsZWRDb21wYXRpYmxlQ2hpbGRyZW4oKDAsIF9yZWFjdE5vZGUuaXNWYWxpZEVsZW1lbnQpKGNoaWxkcmVuKSAmJiAhKDAsIF9yZWFjdE5vZGUuaXNGcmFnbWVudCkoY2hpbGRyZW4pID8gY2hpbGRyZW4gOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgY2hpbGRyZW4pLCBwcmVmaXhDbHMpO1xuICB2YXIgY2hpbGRQcm9wcyA9IGNoaWxkLnByb3BzO1xuICB2YXIgY2hpbGRDbHMgPSAhY2hpbGRQcm9wcy5jbGFzc05hbWUgfHwgdHlwZW9mIGNoaWxkUHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJyA/ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKGNoaWxkUHJvcHMuY2xhc3NOYW1lLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBvcGVuQ2xhc3NOYW1lIHx8IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItb3BlblwiKSwgdHJ1ZSkpIDogY2hpbGRQcm9wcy5jbGFzc05hbWU7XG4gIHZhciBjdXN0b21PdmVybGF5Q2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkob3ZlcmxheUNsYXNzTmFtZSwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KGNvbG9yKSwgY29sb3IgJiYgUHJlc2V0Q29sb3JSZWdleC50ZXN0KGNvbG9yKSksIF9jbGFzc05hbWVzMikpO1xuICB2YXIgZm9ybWF0dGVkT3ZlcmxheUlubmVyU3R5bGUgPSBvdmVybGF5SW5uZXJTdHlsZTtcbiAgdmFyIGFycm93Q29udGVudFN0eWxlID0ge307XG4gIGlmIChjb2xvciAmJiAhUHJlc2V0Q29sb3JSZWdleC50ZXN0KGNvbG9yKSkge1xuICAgIGZvcm1hdHRlZE92ZXJsYXlJbm5lclN0eWxlID0gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgb3ZlcmxheUlubmVyU3R5bGUpLCB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvclxuICAgIH0pO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhcnJvd0NvbnRlbnRTdHlsZSA9IHtcbiAgICAgICctLWFudGQtYXJyb3ctYmFja2dyb3VuZC1jb2xvcic6IGNvbG9yXG4gICAgfTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjVG9vbHRpcFtcImRlZmF1bHRcIl0sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgb3RoZXJQcm9wcywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgIG1vdXNlRW50ZXJEZWxheTogbW91c2VFbnRlckRlbGF5LFxuICAgIG1vdXNlTGVhdmVEZWxheTogbW91c2VMZWF2ZURlbGF5LFxuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIG92ZXJsYXlDbGFzc05hbWU6IGN1c3RvbU92ZXJsYXlDbGFzc05hbWUsXG4gICAgZ2V0VG9vbHRpcENvbnRhaW5lcjogZ2V0UG9wdXBDb250YWluZXIgfHwgZ2V0VG9vbHRpcENvbnRhaW5lciB8fCBnZXRDb250ZXh0UG9wdXBDb250YWluZXIsXG4gICAgcmVmOiByZWYsXG4gICAgYnVpbHRpblBsYWNlbWVudHM6IGdldFRvb2x0aXBQbGFjZW1lbnRzKCksXG4gICAgb3ZlcmxheTogZ2V0T3ZlcmxheSgpLFxuICAgIHZpc2libGU6IHRlbXBPcGVuLFxuICAgIG9uVmlzaWJsZUNoYW5nZTogb25PcGVuQ2hhbmdlLFxuICAgIG9uUG9wdXBBbGlnbjogb25Qb3B1cEFsaWduLFxuICAgIG92ZXJsYXlJbm5lclN0eWxlOiBmb3JtYXR0ZWRPdmVybGF5SW5uZXJTdHlsZSxcbiAgICBhcnJvd0NvbnRlbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYXJyb3ctY29udGVudFwiKSxcbiAgICAgIHN0eWxlOiBhcnJvd0NvbnRlbnRTdHlsZVxuICAgIH0pLFxuICAgIG1vdGlvbjoge1xuICAgICAgbW90aW9uTmFtZTogKDAsIF9tb3Rpb24uZ2V0VHJhbnNpdGlvbk5hbWUpKHJvb3RQcmVmaXhDbHMsICd6b29tLWJpZy1mYXN0JywgcHJvcHMudHJhbnNpdGlvbk5hbWUpLFxuICAgICAgbW90aW9uRGVhZGxpbmU6IDEwMDBcbiAgICB9XG4gIH0pLCB0ZW1wT3BlbiA/ICgwLCBfcmVhY3ROb2RlLmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICBjbGFzc05hbWU6IGNoaWxkQ2xzXG4gIH0pIDogY2hpbGQpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUb29sdGlwLmRpc3BsYXlOYW1lID0gJ1Rvb2x0aXAnO1xufVxudmFyIF9kZWZhdWx0ID0gVG9vbHRpcDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VFdmVudDtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiB1c2VFdmVudChjYWxsYmFjaykge1xuICB2YXIgZm5SZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgZm5SZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuICB2YXIgbWVtb0ZuID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBfZm5SZWYkY3VycmVudDtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiAoX2ZuUmVmJGN1cnJlbnQgPSBmblJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfZm5SZWYkY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZuUmVmJGN1cnJlbnQuY2FsbC5hcHBseShfZm5SZWYkY3VycmVudCwgW2ZuUmVmXS5jb25jYXQoYXJncykpO1xuICB9LCBbXSk7XG4gIHJldHVybiBtZW1vRm47XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlByZXNldFN0YXR1c0NvbG9yVHlwZXMgPSBleHBvcnRzLlByZXNldENvbG9yVHlwZXMgPSB2b2lkIDA7XG52YXIgX3R5cGUgPSByZXF1aXJlKFwiLi90eXBlXCIpO1xudmFyIFByZXNldFN0YXR1c0NvbG9yVHlwZXMgPSAoMCwgX3R5cGUudHVwbGUpKCdzdWNjZXNzJywgJ3Byb2Nlc3NpbmcnLCAnZXJyb3InLCAnZGVmYXVsdCcsICd3YXJuaW5nJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0cy5QcmVzZXRTdGF0dXNDb2xvclR5cGVzID0gUHJlc2V0U3RhdHVzQ29sb3JUeXBlcztcbnZhciBQcmVzZXRDb2xvclR5cGVzID0gKDAsIF90eXBlLnR1cGxlKSgncGluaycsICdyZWQnLCAneWVsbG93JywgJ29yYW5nZScsICdjeWFuJywgJ2dyZWVuJywgJ2JsdWUnLCAncHVycGxlJywgJ2dlZWtibHVlJywgJ21hZ2VudGEnLCAndm9sY2FubycsICdnb2xkJywgJ2xpbWUnKTtcbmV4cG9ydHMuUHJlc2V0Q29sb3JUeXBlcyA9IFByZXNldENvbG9yVHlwZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFBsYWNlbWVudHM7XG5leHBvcnRzLmdldE92ZXJmbG93T3B0aW9ucyA9IGdldE92ZXJmbG93T3B0aW9ucztcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9wbGFjZW1lbnRzID0gcmVxdWlyZShcInJjLXRvb2x0aXAvbGliL3BsYWNlbWVudHNcIik7XG52YXIgYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCA9IHtcbiAgYWRqdXN0WDogMSxcbiAgYWRqdXN0WTogMVxufTtcbnZhciBhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCA9IHtcbiAgYWRqdXN0WDogMCxcbiAgYWRqdXN0WTogMFxufTtcbnZhciB0YXJnZXRPZmZzZXQgPSBbMCwgMF07XG5mdW5jdGlvbiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KSB7XG4gIGlmICh0eXBlb2YgYXV0b0FkanVzdE92ZXJmbG93ID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gYXV0b0FkanVzdE92ZXJmbG93ID8gYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCA6IGF1dG9BZGp1c3RPdmVyZmxvd0Rpc2FibGVkO1xuICB9XG4gIHJldHVybiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCksIGF1dG9BZGp1c3RPdmVyZmxvdyk7XG59XG5mdW5jdGlvbiBnZXRQbGFjZW1lbnRzKGNvbmZpZykge1xuICB2YXIgX2NvbmZpZyRhcnJvd1dpZHRoID0gY29uZmlnLmFycm93V2lkdGgsXG4gICAgYXJyb3dXaWR0aCA9IF9jb25maWckYXJyb3dXaWR0aCA9PT0gdm9pZCAwID8gNCA6IF9jb25maWckYXJyb3dXaWR0aCxcbiAgICBfY29uZmlnJGhvcml6b250YWxBcnIgPSBjb25maWcuaG9yaXpvbnRhbEFycm93U2hpZnQsXG4gICAgaG9yaXpvbnRhbEFycm93U2hpZnQgPSBfY29uZmlnJGhvcml6b250YWxBcnIgPT09IHZvaWQgMCA/IDE2IDogX2NvbmZpZyRob3Jpem9udGFsQXJyLFxuICAgIF9jb25maWckdmVydGljYWxBcnJvdyA9IGNvbmZpZy52ZXJ0aWNhbEFycm93U2hpZnQsXG4gICAgdmVydGljYWxBcnJvd1NoaWZ0ID0gX2NvbmZpZyR2ZXJ0aWNhbEFycm93ID09PSB2b2lkIDAgPyA4IDogX2NvbmZpZyR2ZXJ0aWNhbEFycm93LFxuICAgIGF1dG9BZGp1c3RPdmVyZmxvdyA9IGNvbmZpZy5hdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgYXJyb3dQb2ludEF0Q2VudGVyID0gY29uZmlnLmFycm93UG9pbnRBdENlbnRlcjtcbiAgdmFyIHBsYWNlbWVudE1hcCA9IHtcbiAgICBsZWZ0OiB7XG4gICAgICBwb2ludHM6IFsnY3InLCAnY2wnXSxcbiAgICAgIG9mZnNldDogWy00LCAwXVxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHBvaW50czogWydjbCcsICdjciddLFxuICAgICAgb2Zmc2V0OiBbNCwgMF1cbiAgICB9LFxuICAgIHRvcDoge1xuICAgICAgcG9pbnRzOiBbJ2JjJywgJ3RjJ10sXG4gICAgICBvZmZzZXQ6IFswLCAtNF1cbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgcG9pbnRzOiBbJ3RjJywgJ2JjJ10sXG4gICAgICBvZmZzZXQ6IFswLCA0XVxuICAgIH0sXG4gICAgdG9wTGVmdDoge1xuICAgICAgcG9pbnRzOiBbJ2JsJywgJ3RjJ10sXG4gICAgICBvZmZzZXQ6IFstKGhvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCksIC00XVxuICAgIH0sXG4gICAgbGVmdFRvcDoge1xuICAgICAgcG9pbnRzOiBbJ3RyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgLSh2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKV1cbiAgICB9LFxuICAgIHRvcFJpZ2h0OiB7XG4gICAgICBwb2ludHM6IFsnYnInLCAndGMnXSxcbiAgICAgIG9mZnNldDogW2hvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCwgLTRdXG4gICAgfSxcbiAgICByaWdodFRvcDoge1xuICAgICAgcG9pbnRzOiBbJ3RsJywgJ2NyJ10sXG4gICAgICBvZmZzZXQ6IFs0LCAtKHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpXVxuICAgIH0sXG4gICAgYm90dG9tUmlnaHQ6IHtcbiAgICAgIHBvaW50czogWyd0cicsICdiYyddLFxuICAgICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCA0XVxuICAgIH0sXG4gICAgcmlnaHRCb3R0b206IHtcbiAgICAgIHBvaW50czogWydibCcsICdjciddLFxuICAgICAgb2Zmc2V0OiBbNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF1cbiAgICB9LFxuICAgIGJvdHRvbUxlZnQ6IHtcbiAgICAgIHBvaW50czogWyd0bCcsICdiYyddLFxuICAgICAgb2Zmc2V0OiBbLShob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpLCA0XVxuICAgIH0sXG4gICAgbGVmdEJvdHRvbToge1xuICAgICAgcG9pbnRzOiBbJ2JyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF1cbiAgICB9XG4gIH07XG4gIE9iamVjdC5rZXlzKHBsYWNlbWVudE1hcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcGxhY2VtZW50TWFwW2tleV0gPSBhcnJvd1BvaW50QXRDZW50ZXIgPyAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwbGFjZW1lbnRNYXBba2V5XSksIHtcbiAgICAgIG92ZXJmbG93OiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KSxcbiAgICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gICAgfSkgOiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBfcGxhY2VtZW50cy5wbGFjZW1lbnRzW2tleV0pLCB7XG4gICAgICBvdmVyZmxvdzogZ2V0T3ZlcmZsb3dPcHRpb25zKGF1dG9BZGp1c3RPdmVyZmxvdylcbiAgICB9KTtcbiAgICBwbGFjZW1lbnRNYXBba2V5XS5pZ25vcmVTaGFrZSA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcGxhY2VtZW50TWFwO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5wbGFjZW1lbnRzID0gdm9pZCAwO1xudmFyIGF1dG9BZGp1c3RPdmVyZmxvdyA9IHtcbiAgYWRqdXN0WDogMSxcbiAgYWRqdXN0WTogMVxufTtcbnZhciB0YXJnZXRPZmZzZXQgPSBbMCwgMF07XG52YXIgcGxhY2VtZW50cyA9IHtcbiAgbGVmdDoge1xuICAgIHBvaW50czogWydjcicsICdjbCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbLTQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgcG9pbnRzOiBbJ2NsJywgJ2NyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFs0LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICB0b3A6IHtcbiAgICBwb2ludHM6IFsnYmMnLCAndGMnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIC00XSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICBib3R0b206IHtcbiAgICBwb2ludHM6IFsndGMnLCAnYmMnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIDRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHRvcExlZnQ6IHtcbiAgICBwb2ludHM6IFsnYmwnLCAndGwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIC00XSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICBsZWZ0VG9wOiB7XG4gICAgcG9pbnRzOiBbJ3RyJywgJ3RsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgdG9wUmlnaHQ6IHtcbiAgICBwb2ludHM6IFsnYnInLCAndHInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIC00XSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICByaWdodFRvcDoge1xuICAgIHBvaW50czogWyd0bCcsICd0ciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgYm90dG9tUmlnaHQ6IHtcbiAgICBwb2ludHM6IFsndHInLCAnYnInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIDRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHJpZ2h0Qm90dG9tOiB7XG4gICAgcG9pbnRzOiBbJ2JsJywgJ2JyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFs0LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICBib3R0b21MZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ3RsJywgJ2JsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICBsZWZ0Qm90dG9tOiB7XG4gICAgcG9pbnRzOiBbJ2JyJywgJ2JsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfVxufTtcbmV4cG9ydHMucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG52YXIgX2RlZmF1bHQgPSBwbGFjZW1lbnRzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2dyaWQvY29sXCIpKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuL2NvbnRleHRcIik7XG52YXIgX0Vycm9yTGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXJyb3JMaXN0XCIpKTtcbnZhciBGb3JtSXRlbUlucHV0ID0gZnVuY3Rpb24gRm9ybUl0ZW1JbnB1dChwcm9wcykge1xuICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIHN0YXR1cyA9IHByb3BzLnN0YXR1cyxcbiAgICB3cmFwcGVyQ29sID0gcHJvcHMud3JhcHBlckNvbCxcbiAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgIGVycm9ycyA9IHByb3BzLmVycm9ycyxcbiAgICB3YXJuaW5ncyA9IHByb3BzLndhcm5pbmdzLFxuICAgIGZvcm1JdGVtUmVuZGVyID0gcHJvcHMuX2ludGVybmFsSXRlbVJlbmRlcixcbiAgICBleHRyYSA9IHByb3BzLmV4dHJhLFxuICAgIGhlbHAgPSBwcm9wcy5oZWxwLFxuICAgIGZpZWxkSWQgPSBwcm9wcy5maWVsZElkLFxuICAgIG1hcmdpbkJvdHRvbSA9IHByb3BzLm1hcmdpbkJvdHRvbSxcbiAgICBvbkVycm9yVmlzaWJsZUNoYW5nZWQgPSBwcm9wcy5vbkVycm9yVmlzaWJsZUNoYW5nZWQ7XG4gIHZhciBiYXNlQ2xhc3NOYW1lID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtXCIpO1xuICB2YXIgZm9ybUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KF9jb250ZXh0LkZvcm1Db250ZXh0KTtcbiAgdmFyIG1lcmdlZFdyYXBwZXJDb2wgPSB3cmFwcGVyQ29sIHx8IGZvcm1Db250ZXh0LndyYXBwZXJDb2wgfHwge307XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi1jb250cm9sXCIpLCBtZXJnZWRXcmFwcGVyQ29sLmNsYXNzTmFtZSk7XG4gIC8vIFBhc3MgdG8gc3ViIEZvcm1JdGVtIHNob3VsZCBub3Qgd2l0aCBjb2wgaW5mb1xuICB2YXIgc3ViRm9ybUNvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBmb3JtQ29udGV4dCk7XG4gIH0sIFtmb3JtQ29udGV4dF0pO1xuICBkZWxldGUgc3ViRm9ybUNvbnRleHQubGFiZWxDb2w7XG4gIGRlbGV0ZSBzdWJGb3JtQ29udGV4dC53cmFwcGVyQ29sO1xuICB2YXIgaW5wdXREb20gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi1jb250cm9sLWlucHV0XCIpXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiLWNvbnRyb2wtaW5wdXQtY29udGVudFwiKVxuICB9LCBjaGlsZHJlbikpO1xuICB2YXIgZm9ybUl0ZW1Db250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICB9O1xuICB9LCBbcHJlZml4Q2xzLCBzdGF0dXNdKTtcbiAgdmFyIGVycm9yTGlzdERvbSA9IG1hcmdpbkJvdHRvbSAhPT0gbnVsbCB8fCBlcnJvcnMubGVuZ3RoIHx8IHdhcm5pbmdzLmxlbmd0aCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleFdyYXA6ICdub3dyYXAnXG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29udGV4dC5Gb3JtSXRlbVByZWZpeENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZm9ybUl0ZW1Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9FcnJvckxpc3RbXCJkZWZhdWx0XCJdLCB7XG4gICAgZmllbGRJZDogZmllbGRJZCxcbiAgICBlcnJvcnM6IGVycm9ycyxcbiAgICB3YXJuaW5nczogd2FybmluZ3MsXG4gICAgaGVscDogaGVscCxcbiAgICBoZWxwU3RhdHVzOiBzdGF0dXMsXG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi1leHBsYWluLWNvbm5lY3RlZFwiKSxcbiAgICBvblZpc2libGVDaGFuZ2VkOiBvbkVycm9yVmlzaWJsZUNoYW5nZWRcbiAgfSkpLCAhIW1hcmdpbkJvdHRvbSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiBtYXJnaW5Cb3R0b21cbiAgICB9XG4gIH0pKSA6IG51bGw7XG4gIHZhciBleHRyYVByb3BzID0ge307XG4gIGlmIChmaWVsZElkKSB7XG4gICAgZXh0cmFQcm9wcy5pZCA9IFwiXCIuY29uY2F0KGZpZWxkSWQsIFwiX2V4dHJhXCIpO1xuICB9XG4gIC8vIElmIGV4dHJhID0gMCwgJiYgd2lsbCBnb2VzIHdyb25nXG4gIC8vIDAmJmVycm9yIC0+IDBcbiAgdmFyIGV4dHJhRG9tID0gZXh0cmEgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGV4dHJhUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiLWV4dHJhXCIpXG4gIH0pLCBleHRyYSkgOiBudWxsO1xuICB2YXIgZG9tID0gZm9ybUl0ZW1SZW5kZXIgJiYgZm9ybUl0ZW1SZW5kZXIubWFyayA9PT0gJ3Byb190YWJsZV9yZW5kZXInICYmIGZvcm1JdGVtUmVuZGVyLnJlbmRlciA/IGZvcm1JdGVtUmVuZGVyLnJlbmRlcihwcm9wcywge1xuICAgIGlucHV0OiBpbnB1dERvbSxcbiAgICBlcnJvckxpc3Q6IGVycm9yTGlzdERvbSxcbiAgICBleHRyYTogZXh0cmFEb21cbiAgfSkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgaW5wdXREb20sIGVycm9yTGlzdERvbSwgZXh0cmFEb20pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbnRleHQuRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3ViRm9ybUNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbFtcImRlZmF1bHRcIl0sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgbWVyZ2VkV3JhcHBlckNvbCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0pLCBkb20pKTtcbn07XG52YXIgX2RlZmF1bHQgPSBGb3JtSXRlbUlucHV0O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfcmNGaWVsZEZvcm0gPSByZXF1aXJlKFwicmMtZmllbGQtZm9ybVwiKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dFwiKTtcbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG52YXIgRm9ybUxpc3QgPSBmdW5jdGlvbiBGb3JtTGlzdChfYSkge1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImNoaWxkcmVuXCJdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoISFwcm9wcy5uYW1lLCAnRm9ybS5MaXN0JywgJ01pc3MgYG5hbWVgIHByb3AuJykgOiB2b2lkIDA7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscztcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnZm9ybScsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIHZhciBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICB9O1xuICB9LCBbcHJlZml4Q2xzXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfcmNGaWVsZEZvcm0uTGlzdCwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwcm9wcyksIGZ1bmN0aW9uIChmaWVsZHMsIG9wZXJhdGlvbiwgbWV0YSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29udGV4dC5Gb3JtSXRlbVByZWZpeENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICB9LCBjaGlsZHJlbihmaWVsZHMubWFwKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGZpZWxkKSwge1xuICAgICAgICBmaWVsZEtleTogZmllbGQua2V5XG4gICAgICB9KTtcbiAgICB9KSwgb3BlcmF0aW9uLCB7XG4gICAgICBlcnJvcnM6IG1ldGEuZXJyb3JzLFxuICAgICAgd2FybmluZ3M6IG1ldGEud2FybmluZ3NcbiAgICB9KSk7XG4gIH0pO1xufTtcbnZhciBfZGVmYXVsdCA9IEZvcm1MaXN0O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdXNlRm9ybUluc3RhbmNlO1xudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuLi9jb250ZXh0XCIpO1xuZnVuY3Rpb24gdXNlRm9ybUluc3RhbmNlKCkge1xuICB2YXIgX3VzZUNvbnRleHQgPSAoMCwgX3JlYWN0LnVzZUNvbnRleHQpKF9jb250ZXh0LkZvcm1Db250ZXh0KSxcbiAgICBmb3JtID0gX3VzZUNvbnRleHQuZm9ybTtcbiAgcmV0dXJuIGZvcm07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyb3VwXCIpKTtcbnZhciBfSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0XCIpKTtcbnZhciBfUGFzc3dvcmQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Bhc3N3b3JkXCIpKTtcbnZhciBfU2VhcmNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TZWFyY2hcIikpO1xudmFyIF9UZXh0QXJlYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGV4dEFyZWFcIikpO1xudmFyIElucHV0ID0gX0lucHV0W1wiZGVmYXVsdFwiXTtcbklucHV0Lkdyb3VwID0gX0dyb3VwW1wiZGVmYXVsdFwiXTtcbklucHV0LlNlYXJjaCA9IF9TZWFyY2hbXCJkZWZhdWx0XCJdO1xuSW5wdXQuVGV4dEFyZWEgPSBfVGV4dEFyZWFbXCJkZWZhdWx0XCJdO1xuSW5wdXQuUGFzc3dvcmQgPSBfUGFzc3dvcmRbXCJkZWZhdWx0XCJdO1xudmFyIF9kZWZhdWx0ID0gSW5wdXQ7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4uL2Zvcm0vY29udGV4dFwiKTtcbnZhciBHcm91cCA9IGZ1bmN0aW9uIEdyb3VwKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIF91c2VDb250ZXh0ID0gKDAsIFJlYWN0LnVzZUNvbnRleHQpKF9jb25maWdQcm92aWRlci5Db25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX3VzZUNvbnRleHQuZGlyZWN0aW9uO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIF9wcm9wcyRjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgY2xhc3NOYW1lID0gX3Byb3BzJGNsYXNzTmFtZSA9PT0gdm9pZCAwID8gJycgOiBfcHJvcHMkY2xhc3NOYW1lO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdpbnB1dC1ncm91cCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIHZhciBjbHMgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxnXCIpLCBwcm9wcy5zaXplID09PSAnbGFyZ2UnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zbVwiKSwgcHJvcHMuc2l6ZSA9PT0gJ3NtYWxsJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29tcGFjdFwiKSwgcHJvcHMuY29tcGFjdCksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpO1xuICB2YXIgZm9ybUl0ZW1Db250ZXh0ID0gKDAsIFJlYWN0LnVzZUNvbnRleHQpKF9jb250ZXh0LkZvcm1JdGVtSW5wdXRDb250ZXh0KTtcbiAgdmFyIGdyb3VwRm9ybUl0ZW1Db250ZXh0ID0gKDAsIFJlYWN0LnVzZU1lbW8pKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKCgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgZm9ybUl0ZW1Db250ZXh0KSwge1xuICAgICAgaXNGb3JtSXRlbUlucHV0OiBmYWxzZVxuICAgIH0pO1xuICB9LCBbZm9ybUl0ZW1Db250ZXh0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzLFxuICAgIHN0eWxlOiBwcm9wcy5zdHlsZSxcbiAgICBvbk1vdXNlRW50ZXI6IHByb3BzLm9uTW91c2VFbnRlcixcbiAgICBvbk1vdXNlTGVhdmU6IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICBvbkZvY3VzOiBwcm9wcy5vbkZvY3VzLFxuICAgIG9uQmx1cjogcHJvcHMub25CbHVyXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9jb250ZXh0LkZvcm1JdGVtSW5wdXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGdyb3VwRm9ybUl0ZW1Db250ZXh0XG4gIH0sIHByb3BzLmNoaWxkcmVuKSk7XG59O1xudmFyIF9kZWZhdWx0ID0gR3JvdXA7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKS5kZWZhdWx0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQXJyYXk7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9yZWFjdElzID0gcmVxdWlyZShcInJlYWN0LWlzXCIpO1xuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHJldCA9IFtdO1xuICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoKGNoaWxkID09PSB1bmRlZmluZWQgfHwgY2hpbGQgPT09IG51bGwpICYmICFvcHRpb24ua2VlcEVtcHR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgICAgcmV0ID0gcmV0LmNvbmNhdCh0b0FycmF5KGNoaWxkKSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX3JlYWN0SXMuaXNGcmFnbWVudCkoY2hpbGQpICYmIGNoaWxkLnByb3BzKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQucHJvcHMuY2hpbGRyZW4sIG9wdGlvbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFzUHJlZml4U3VmZml4ID0gaGFzUHJlZml4U3VmZml4O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmZ1bmN0aW9uIGhhc1ByZWZpeFN1ZmZpeChwcm9wcykge1xuICByZXR1cm4gISEocHJvcHMucHJlZml4IHx8IHByb3BzLnN1ZmZpeCB8fCBwcm9wcy5hbGxvd0NsZWFyKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcbnZhciBfRXllSW52aXNpYmxlT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy9FeWVJbnZpc2libGVPdXRsaW5lZFwiKSk7XG52YXIgX0V5ZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvRXllT3V0bGluZWRcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX29taXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9vbWl0XCIpKTtcbnZhciBfcmVmMiA9IHJlcXVpcmUoXCJyYy11dGlsL2xpYi9yZWZcIik7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG52YXIgX3VzZVJlbW92ZVBhc3N3b3JkVGltZW91dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaG9va3MvdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0XCIpKTtcbnZhciBfSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0XCIpKTtcbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG52YXIgZGVmYXVsdEljb25SZW5kZXIgPSBmdW5jdGlvbiBkZWZhdWx0SWNvblJlbmRlcih2aXNpYmxlKSB7XG4gIHJldHVybiB2aXNpYmxlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0V5ZU91dGxpbmVkW1wiZGVmYXVsdFwiXSwgbnVsbCkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfRXllSW52aXNpYmxlT3V0bGluZWRbXCJkZWZhdWx0XCJdLCBudWxsKTtcbn07XG52YXIgQWN0aW9uTWFwID0ge1xuICBjbGljazogJ29uQ2xpY2snLFxuICBob3ZlcjogJ29uTW91c2VPdmVyJ1xufTtcbnZhciBQYXNzd29yZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkdmlzaWJpbGl0eVRvZ2cgPSBwcm9wcy52aXNpYmlsaXR5VG9nZ2xlLFxuICAgIHZpc2liaWxpdHlUb2dnbGUgPSBfcHJvcHMkdmlzaWJpbGl0eVRvZ2cgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkdmlzaWJpbGl0eVRvZ2c7XG4gIHZhciB2aXNpYmlsaXR5Q29udHJvbGxlZCA9ICgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKHZpc2liaWxpdHlUb2dnbGUpID09PSAnb2JqZWN0JyAmJiB2aXNpYmlsaXR5VG9nZ2xlLnZpc2libGUgIT09IHVuZGVmaW5lZDtcbiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBSZWFjdC51c2VTdGF0ZSkoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZpc2liaWxpdHlDb250cm9sbGVkID8gdmlzaWJpbGl0eVRvZ2dsZS52aXNpYmxlIDogZmFsc2U7XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfdXNlU3RhdGUsIDIpLFxuICAgIHZpc2libGUgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldFZpc2libGUgPSBfdXNlU3RhdGUyWzFdO1xuICB2YXIgaW5wdXRSZWYgPSAoMCwgUmVhY3QudXNlUmVmKShudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmlzaWJpbGl0eUNvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZpc2libGUodmlzaWJpbGl0eVRvZ2dsZS52aXNpYmxlKTtcbiAgICB9XG4gIH0sIFt2aXNpYmlsaXR5Q29udHJvbGxlZCwgdmlzaWJpbGl0eVRvZ2dsZV0pO1xuICAvLyBSZW1vdmUgUGFzc3dvcmQgdmFsdWVcbiAgdmFyIHJlbW92ZVBhc3N3b3JkVGltZW91dCA9ICgwLCBfdXNlUmVtb3ZlUGFzc3dvcmRUaW1lb3V0W1wiZGVmYXVsdFwiXSkoaW5wdXRSZWYpO1xuICB2YXIgb25WaXNpYmxlQ2hhbmdlID0gZnVuY3Rpb24gb25WaXNpYmxlQ2hhbmdlKCkge1xuICAgIHZhciBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkO1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmlzaWJsZSkge1xuICAgICAgcmVtb3ZlUGFzc3dvcmRUaW1lb3V0KCk7XG4gICAgfVxuICAgIHNldFZpc2libGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgdmFyIF9hO1xuICAgICAgdmFyIG5ld1N0YXRlID0gIXByZXZTdGF0ZTtcbiAgICAgIGlmICgoMCwgX3R5cGVvZjJbXCJkZWZhdWx0XCJdKSh2aXNpYmlsaXR5VG9nZ2xlKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgKF9hID0gdmlzaWJpbGl0eVRvZ2dsZS5vblZpc2libGVDaGFuZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZpc2liaWxpdHlUb2dnbGUsIG5ld1N0YXRlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcbiAgfTtcbiAgdmFyIGdldEljb24gPSBmdW5jdGlvbiBnZXRJY29uKHByZWZpeENscykge1xuICAgIHZhciBfaWNvblByb3BzO1xuICAgIHZhciBfcHJvcHMkYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYWN0aW9uID0gX3Byb3BzJGFjdGlvbiA9PT0gdm9pZCAwID8gJ2NsaWNrJyA6IF9wcm9wcyRhY3Rpb24sXG4gICAgICBfcHJvcHMkaWNvblJlbmRlciA9IHByb3BzLmljb25SZW5kZXIsXG4gICAgICBpY29uUmVuZGVyID0gX3Byb3BzJGljb25SZW5kZXIgPT09IHZvaWQgMCA/IGRlZmF1bHRJY29uUmVuZGVyIDogX3Byb3BzJGljb25SZW5kZXI7XG4gICAgdmFyIGljb25UcmlnZ2VyID0gQWN0aW9uTWFwW2FjdGlvbl0gfHwgJyc7XG4gICAgdmFyIGljb24gPSBpY29uUmVuZGVyKHZpc2libGUpO1xuICAgIHZhciBpY29uUHJvcHMgPSAoX2ljb25Qcm9wcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pY29uUHJvcHMsIGljb25UcmlnZ2VyLCBvblZpc2libGVDaGFuZ2UpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pY29uUHJvcHMsIFwiY2xhc3NOYW1lXCIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaWNvblwiKSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2ljb25Qcm9wcywgXCJrZXlcIiwgJ3Bhc3N3b3JkSWNvbicpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9pY29uUHJvcHMsIFwib25Nb3VzZURvd25cIiwgZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgLy8gUHJldmVudCBmb2N1c2VkIHN0YXRlIGxvc3RcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzE1MTczXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2ljb25Qcm9wcywgXCJvbk1vdXNlVXBcIiwgZnVuY3Rpb24gb25Nb3VzZVVwKGUpIHtcbiAgICAgIC8vIFByZXZlbnQgY2FyZXQgcG9zaXRpb24gY2hhbmdlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8yMzUyNFxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pLCBfaWNvblByb3BzKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudCggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pID8gaWNvbiA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBpY29uKSwgaWNvblByb3BzKTtcbiAgfTtcbiAgdmFyIHJlbmRlclBhc3N3b3JkID0gZnVuY3Rpb24gcmVuZGVyUGFzc3dvcmQoX3JlZikge1xuICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgY3VzdG9taXplSW5wdXRQcmVmaXhDbHMgPSBwcm9wcy5pbnB1dFByZWZpeENscyxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgcmVzdFByb3BzID0gX19yZXN0KHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJwcmVmaXhDbHNcIiwgXCJpbnB1dFByZWZpeENsc1wiLCBcInNpemVcIl0pO1xuICAgIHZhciBpbnB1dFByZWZpeENscyA9IGdldFByZWZpeENscygnaW5wdXQnLCBjdXN0b21pemVJbnB1dFByZWZpeENscyk7XG4gICAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnaW5wdXQtcGFzc3dvcmQnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIHZhciBzdWZmaXhJY29uID0gdmlzaWJpbGl0eVRvZ2dsZSAmJiBnZXRJY29uKHByZWZpeENscyk7XG4gICAgdmFyIGlucHV0Q2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCBjbGFzc05hbWUsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplKSwgISFzaXplKSk7XG4gICAgdmFyIG9taXR0ZWRQcm9wcyA9ICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSgoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfb21pdFtcImRlZmF1bHRcIl0pKHJlc3RQcm9wcywgWydzdWZmaXgnLCAnaWNvblJlbmRlcicsICd2aXNpYmlsaXR5VG9nZ2xlJ10pKSwge1xuICAgICAgdHlwZTogdmlzaWJsZSA/ICd0ZXh0JyA6ICdwYXNzd29yZCcsXG4gICAgICBjbGFzc05hbWU6IGlucHV0Q2xhc3NOYW1lLFxuICAgICAgcHJlZml4Q2xzOiBpbnB1dFByZWZpeENscyxcbiAgICAgIHN1ZmZpeDogc3VmZml4SWNvblxuICAgIH0pO1xuICAgIGlmIChzaXplKSB7XG4gICAgICBvbWl0dGVkUHJvcHMuc2l6ZSA9IHNpemU7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfSW5wdXRbXCJkZWZhdWx0XCJdLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgcmVmOiAoMCwgX3JlZjIuY29tcG9zZVJlZikocmVmLCBpbnB1dFJlZilcbiAgICB9LCBvbWl0dGVkUHJvcHMpKTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9jb25maWdQcm92aWRlci5Db25maWdDb25zdW1lciwgbnVsbCwgcmVuZGVyUGFzc3dvcmQpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQYXNzd29yZC5kaXNwbGF5TmFtZSA9ICdQYXNzd29yZCc7XG59XG52YXIgX2RlZmF1bHQgPSBQYXNzd29yZDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBcbiAgdmFyIF9FeWVJbnZpc2libGVPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9saWIvaWNvbnMvRXllSW52aXNpYmxlT3V0bGluZWQnKSk7XG4gIFxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG4gIFxuICB2YXIgX2RlZmF1bHQgPSBfRXllSW52aXNpYmxlT3V0bGluZWQ7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuICBtb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9FeWVJbnZpc2libGVPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9saWIvYXNuL0V5ZUludmlzaWJsZU91dGxpbmVkXCIpKTtcbnZhciBfQW50ZEljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuXG52YXIgRXllSW52aXNpYmxlT3V0bGluZWQgPSBmdW5jdGlvbiBFeWVJbnZpc2libGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQW50ZEljb24uZGVmYXVsdCwgKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IF9FeWVJbnZpc2libGVPdXRsaW5lZC5kZWZhdWx0XG4gIH0pKTtcbn07XG5FeWVJbnZpc2libGVPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdFeWVJbnZpc2libGVPdXRsaW5lZCc7XG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeWVJbnZpc2libGVPdXRsaW5lZCk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV5ZUludmlzaWJsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk05NDIuMiA0ODYuMlE4ODkuNDcgMzc1LjExIDgxNi43IDMwNWwtNTAuODggNTAuODhDODA3LjMxIDM5NS41MyA4NDMuNDUgNDQ3LjQgODc0LjcgNTEyIDc5MS41IDY4NC4yIDY3My40IDc2NiA1MTIgNzY2cS03Mi42NyAwLTEzMy44Ny0yMi4zOEwzMjMgNzk4Ljc1UTQwOCA4MzggNTEyIDgzOHEyODguMyAwIDQzMC4yLTMwMC4zYTYwLjI5IDYwLjI5IDAgMDAwLTUxLjV6bS02My41Ny0zMjAuNjRMODM2IDEyMi44OGE4IDggMCAwMC0xMS4zMiAwTDcxNS4zMSAyMzIuMlE2MjQuODYgMTg2IDUxMiAxODZxLTI4OC4zIDAtNDMwLjIgMzAwLjNhNjAuMyA2MC4zIDAgMDAwIDUxLjVxNTYuNjkgMTE5LjQgMTM2LjUgMTkxLjQxTDExMi40OCA4MzVhOCA4IDAgMDAwIDExLjMxTDE1NS4xNyA4ODlhOCA4IDAgMDAxMS4zMSAwbDcxMi4xNS03MTIuMTJhOCA4IDAgMDAwLTExLjMyek0xNDkuMyA1MTJDMjMyLjYgMzM5LjggMzUwLjcgMjU4IDUxMiAyNThjNTQuNTQgMCAxMDQuMTMgOS4zNiAxNDkuMTIgMjguMzlsLTcwLjMgNzAuM2ExNzYgMTc2IDAgMDAtMjM4LjEzIDIzOC4xM2wtODMuNDIgODMuNDJDMjIzLjEgNjM3LjQ5IDE4My4zIDU4Mi4yOCAxNDkuMyA1MTJ6bTI0Ni43IDBhMTEyLjExIDExMi4xMSAwIDAxMTQ2LjItMTA2LjY5TDQwMS4zMSA1NDYuMkExMTIgMTEyIDAgMDEzOTYgNTEyelwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MDggNjI0Yy0zLjQ2IDAtNi44Ny0uMTYtMTAuMjUtLjQ3bC01Mi44MiA1Mi44MmExNzYuMDkgMTc2LjA5IDAgMDAyMjcuNDItMjI3LjQybC01Mi44MiA1Mi44MmMuMzEgMy4zOC40NyA2Ljc5LjQ3IDEwLjI1YTExMS45NCAxMTEuOTQgMCAwMS0xMTIgMTEyelwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiZXllLWludmlzaWJsZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRXllSW52aXNpYmxlT3V0bGluZWQ7XG4iLCIndXNlIHN0cmljdCc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4gIFxuICB2YXIgX0V5ZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2xpYi9pY29ucy9FeWVPdXRsaW5lZCcpKTtcbiAgXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cbiAgXG4gIHZhciBfZGVmYXVsdCA9IF9FeWVPdXRsaW5lZDtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4gIG1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX0V5ZU91dGxpbmVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2xpYi9hc24vRXllT3V0bGluZWRcIikpO1xudmFyIF9BbnRkSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbXBvbmVudHMvQW50ZEljb25cIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5cbnZhciBFeWVPdXRsaW5lZCA9IGZ1bmN0aW9uIEV5ZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9BbnRkSWNvbi5kZWZhdWx0LCAoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogX0V5ZU91dGxpbmVkLmRlZmF1bHRcbiAgfSkpO1xufTtcbkV5ZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0V5ZU91dGxpbmVkJztcbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEV5ZU91dGxpbmVkKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXllT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTk0Mi4yIDQ4Ni4yQzg0Ny40IDI4Ni41IDcwNC4xIDE4NiA1MTIgMTg2Yy0xOTIuMiAwLTMzNS40IDEwMC41LTQzMC4yIDMwMC4zYTYwLjMgNjAuMyAwIDAwMCA1MS41QzE3Ni42IDczNy41IDMxOS45IDgzOCA1MTIgODM4YzE5Mi4yIDAgMzM1LjQtMTAwLjUgNDMwLjItMzAwLjMgNy43LTE2LjIgNy43LTM1IDAtNTEuNXpNNTEyIDc2NmMtMTYxLjMgMC0yNzkuNC04MS44LTM2Mi43LTI1NEMyMzIuNiAzMzkuOCAzNTAuNyAyNTggNTEyIDI1OGMxNjEuMyAwIDI3OS40IDgxLjggMzYyLjcgMjU0Qzc5MS41IDY4NC4yIDY3My40IDc2NiA1MTIgNzY2em0tNC00MzBjLTk3LjIgMC0xNzYgNzguOC0xNzYgMTc2czc4LjggMTc2IDE3NiAxNzYgMTc2LTc4LjggMTc2LTE3Ni03OC44LTE3Ni0xNzYtMTc2em0wIDI4OGMtNjEuOSAwLTExMi01MC4xLTExMi0xMTJzNTAuMS0xMTIgMTEyLTExMiAxMTIgNTAuMSAxMTIgMTEyLTUwLjEgMTEyLTExMiAxMTJ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJleWVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydHMuZGVmYXVsdCA9IEV5ZU91dGxpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9TZWFyY2hPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL1NlYXJjaE91dGxpbmVkXCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIF9yZWYgPSByZXF1aXJlKFwicmMtdXRpbC9saWIvcmVmXCIpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfYnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vYnV0dG9uXCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9TaXplQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dFwiKSk7XG52YXIgX0NvbXBhY3QgPSByZXF1aXJlKFwiLi4vc3BhY2UvQ29tcGFjdFwiKTtcbnZhciBfcmVhY3ROb2RlID0gcmVxdWlyZShcIi4uL191dGlsL3JlYWN0Tm9kZVwiKTtcbnZhciBfSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0XCIpKTtcbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG52YXIgU2VhcmNoID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIGN1c3RvbWl6ZUlucHV0UHJlZml4Q2xzID0gcHJvcHMuaW5wdXRQcmVmaXhDbHMsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGN1c3RvbWl6ZVNpemUgPSBwcm9wcy5zaXplLFxuICAgIHN1ZmZpeCA9IHByb3BzLnN1ZmZpeCxcbiAgICBfcHJvcHMkZW50ZXJCdXR0b24gPSBwcm9wcy5lbnRlckJ1dHRvbixcbiAgICBlbnRlckJ1dHRvbiA9IF9wcm9wcyRlbnRlckJ1dHRvbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZW50ZXJCdXR0b24sXG4gICAgYWRkb25BZnRlciA9IHByb3BzLmFkZG9uQWZ0ZXIsXG4gICAgbG9hZGluZyA9IHByb3BzLmxvYWRpbmcsXG4gICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBjdXN0b21PblNlYXJjaCA9IHByb3BzLm9uU2VhcmNoLFxuICAgIGN1c3RvbU9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgb25Db21wb3NpdGlvblN0YXJ0ID0gcHJvcHMub25Db21wb3NpdGlvblN0YXJ0LFxuICAgIG9uQ29tcG9zaXRpb25FbmQgPSBwcm9wcy5vbkNvbXBvc2l0aW9uRW5kLFxuICAgIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wicHJlZml4Q2xzXCIsIFwiaW5wdXRQcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJzaXplXCIsIFwic3VmZml4XCIsIFwiZW50ZXJCdXR0b25cIiwgXCJhZGRvbkFmdGVyXCIsIFwibG9hZGluZ1wiLCBcImRpc2FibGVkXCIsIFwib25TZWFyY2hcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ29tcG9zaXRpb25TdGFydFwiLCBcIm9uQ29tcG9zaXRpb25FbmRcIl0pO1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KF9jb25maWdQcm92aWRlci5Db25maWdDb250ZXh0KSxcbiAgICBnZXRQcmVmaXhDbHMgPSBfUmVhY3QkdXNlQ29udGV4dC5nZXRQcmVmaXhDbHMsXG4gICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uO1xuICB2YXIgY29udGV4dFNpemUgPSBSZWFjdC51c2VDb250ZXh0KF9TaXplQ29udGV4dFtcImRlZmF1bHRcIl0pO1xuICB2YXIgY29tcG9zZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdpbnB1dC1zZWFyY2gnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgaW5wdXRQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2lucHV0JywgY3VzdG9taXplSW5wdXRQcmVmaXhDbHMpO1xuICB2YXIgX3VzZUNvbXBhY3RJdGVtQ29udGV4ID0gKDAsIF9Db21wYWN0LnVzZUNvbXBhY3RJdGVtQ29udGV4dCkocHJlZml4Q2xzLCBkaXJlY3Rpb24pLFxuICAgIGNvbXBhY3RTaXplID0gX3VzZUNvbXBhY3RJdGVtQ29udGV4LmNvbXBhY3RTaXplO1xuICB2YXIgc2l6ZSA9IGNvbXBhY3RTaXplIHx8IGN1c3RvbWl6ZVNpemUgfHwgY29udGV4dFNpemU7XG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG9uQ2hhbmdlID0gZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgIGlmIChlICYmIGUudGFyZ2V0ICYmIGUudHlwZSA9PT0gJ2NsaWNrJyAmJiBjdXN0b21PblNlYXJjaCkge1xuICAgICAgY3VzdG9tT25TZWFyY2goZS50YXJnZXQudmFsdWUsIGUpO1xuICAgIH1cbiAgICBpZiAoY3VzdG9tT25DaGFuZ2UpIHtcbiAgICAgIGN1c3RvbU9uQ2hhbmdlKGUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIG9uTW91c2VEb3duID0gZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gKChfYSA9IGlucHV0UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbnB1dCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIHZhciBvblNlYXJjaCA9IGZ1bmN0aW9uIG9uU2VhcmNoKGUpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChjdXN0b21PblNlYXJjaCkge1xuICAgICAgY3VzdG9tT25TZWFyY2goKF9iID0gKF9hID0gaW5wdXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlucHV0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudmFsdWUsIGUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIG9uUHJlc3NFbnRlciA9IGZ1bmN0aW9uIG9uUHJlc3NFbnRlcihlKSB7XG4gICAgaWYgKGNvbXBvc2VkUmVmLmN1cnJlbnQgfHwgbG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvblNlYXJjaChlKTtcbiAgfTtcbiAgdmFyIHNlYXJjaEljb24gPSB0eXBlb2YgZW50ZXJCdXR0b24gPT09ICdib29sZWFuJyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9TZWFyY2hPdXRsaW5lZFtcImRlZmF1bHRcIl0sIG51bGwpIDogbnVsbDtcbiAgdmFyIGJ0bkNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYnV0dG9uXCIpO1xuICB2YXIgYnV0dG9uO1xuICB2YXIgZW50ZXJCdXR0b25Bc0VsZW1lbnQgPSBlbnRlckJ1dHRvbiB8fCB7fTtcbiAgdmFyIGlzQW50ZEJ1dHRvbiA9IGVudGVyQnV0dG9uQXNFbGVtZW50LnR5cGUgJiYgZW50ZXJCdXR0b25Bc0VsZW1lbnQudHlwZS5fX0FOVF9CVVRUT04gPT09IHRydWU7XG4gIGlmIChpc0FudGRCdXR0b24gfHwgZW50ZXJCdXR0b25Bc0VsZW1lbnQudHlwZSA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b24gPSAoMCwgX3JlYWN0Tm9kZS5jbG9uZUVsZW1lbnQpKGVudGVyQnV0dG9uQXNFbGVtZW50LCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duLFxuICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IGVudGVyQnV0dG9uQXNFbGVtZW50ID09PSBudWxsIHx8IGVudGVyQnV0dG9uQXNFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbnRlckJ1dHRvbkFzRWxlbWVudC5wcm9wcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uQ2xpY2spID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlKTtcbiAgICAgICAgb25TZWFyY2goZSk7XG4gICAgICB9LFxuICAgICAga2V5OiAnZW50ZXJCdXR0b24nXG4gICAgfSwgaXNBbnRkQnV0dG9uID8ge1xuICAgICAgY2xhc3NOYW1lOiBidG5DbGFzc05hbWUsXG4gICAgICBzaXplOiBzaXplXG4gICAgfSA6IHt9KSk7XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2J1dHRvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgIGNsYXNzTmFtZTogYnRuQ2xhc3NOYW1lLFxuICAgICAgdHlwZTogZW50ZXJCdXR0b24gPyAncHJpbWFyeScgOiB1bmRlZmluZWQsXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAga2V5OiBcImVudGVyQnV0dG9uXCIsXG4gICAgICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gICAgICBvbkNsaWNrOiBvblNlYXJjaCxcbiAgICAgIGxvYWRpbmc6IGxvYWRpbmcsXG4gICAgICBpY29uOiBzZWFyY2hJY29uXG4gICAgfSwgZW50ZXJCdXR0b24pO1xuICB9XG4gIGlmIChhZGRvbkFmdGVyKSB7XG4gICAgYnV0dG9uID0gW2J1dHRvbiwgKDAsIF9yZWFjdE5vZGUuY2xvbmVFbGVtZW50KShhZGRvbkFmdGVyLCB7XG4gICAgICBrZXk6ICdhZGRvbkFmdGVyJ1xuICAgIH0pXTtcbiAgfVxuICB2YXIgY2xzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSksICEhc2l6ZSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItd2l0aC1idXR0b25cIiksICEhZW50ZXJCdXR0b24pLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIHZhciBoYW5kbGVPbkNvbXBvc2l0aW9uU3RhcnQgPSBmdW5jdGlvbiBoYW5kbGVPbkNvbXBvc2l0aW9uU3RhcnQoZSkge1xuICAgIGNvbXBvc2VkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG9uQ29tcG9zaXRpb25TdGFydCA9PT0gbnVsbCB8fCBvbkNvbXBvc2l0aW9uU3RhcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ29tcG9zaXRpb25TdGFydChlKTtcbiAgfTtcbiAgdmFyIGhhbmRsZU9uQ29tcG9zaXRpb25FbmQgPSBmdW5jdGlvbiBoYW5kbGVPbkNvbXBvc2l0aW9uRW5kKGUpIHtcbiAgICBjb21wb3NlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgb25Db21wb3NpdGlvbkVuZCA9PT0gbnVsbCB8fCBvbkNvbXBvc2l0aW9uRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNvbXBvc2l0aW9uRW5kKGUpO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0lucHV0W1wiZGVmYXVsdFwiXSwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICByZWY6ICgwLCBfcmVmLmNvbXBvc2VSZWYpKGlucHV0UmVmLCByZWYpLFxuICAgIG9uUHJlc3NFbnRlcjogb25QcmVzc0VudGVyXG4gIH0sIHJlc3RQcm9wcywge1xuICAgIHNpemU6IHNpemUsXG4gICAgb25Db21wb3NpdGlvblN0YXJ0OiBoYW5kbGVPbkNvbXBvc2l0aW9uU3RhcnQsXG4gICAgb25Db21wb3NpdGlvbkVuZDogaGFuZGxlT25Db21wb3NpdGlvbkVuZCxcbiAgICBwcmVmaXhDbHM6IGlucHV0UHJlZml4Q2xzLFxuICAgIGFkZG9uQWZ0ZXI6IGJ1dHRvbixcbiAgICBzdWZmaXg6IHN1ZmZpeCxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgY2xhc3NOYW1lOiBjbHMsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0pKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgU2VhcmNoLmRpc3BsYXlOYW1lID0gJ1NlYXJjaCc7XG59XG52YXIgX2RlZmF1bHQgPSBTZWFyY2g7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgXG4gIHZhciBfU2VhcmNoT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vbGliL2ljb25zL1NlYXJjaE91dGxpbmVkJykpO1xuICBcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuICBcbiAgdmFyIF9kZWZhdWx0ID0gX1NlYXJjaE91dGxpbmVkO1xuICBleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG52YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfU2VhcmNoT3V0bGluZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvbGliL2Fzbi9TZWFyY2hPdXRsaW5lZFwiKSk7XG52YXIgX0FudGRJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxudmFyIFNlYXJjaE91dGxpbmVkID0gZnVuY3Rpb24gU2VhcmNoT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0FudGRJY29uLmRlZmF1bHQsICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSgoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBfU2VhcmNoT3V0bGluZWQuZGVmYXVsdFxuICB9KSk7XG59O1xuU2VhcmNoT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnU2VhcmNoT3V0bGluZWQnO1xudmFyIF9kZWZhdWx0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoU2VhcmNoT3V0bGluZWQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTZWFyY2hPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNOTA5LjYgODU0LjVMNjQ5LjkgNTk0LjhDNjkwLjIgNTQyLjcgNzEyIDQ3OSA3MTIgNDEyYzAtODAuMi0zMS4zLTE1NS40LTg3LjktMjEyLjEtNTYuNi01Ni43LTEzMi04Ny45LTIxMi4xLTg3LjlzLTE1NS41IDMxLjMtMjEyLjEgODcuOUMxNDMuMiAyNTYuNSAxMTIgMzMxLjggMTEyIDQxMmMwIDgwLjEgMzEuMyAxNTUuNSA4Ny45IDIxMi4xQzI1Ni41IDY4MC44IDMzMS44IDcxMiA0MTIgNzEyYzY3IDAgMTMwLjYtMjEuOCAxODIuNy02MmwyNTkuNyAyNTkuNmE4LjIgOC4yIDAgMDAxMS42IDBsNDMuNi00My41YTguMiA4LjIgMCAwMDAtMTEuNnpNNTcwLjQgNTcwLjRDNTI4IDYxMi43IDQ3MS44IDYzNiA0MTIgNjM2cy0xMTYtMjMuMy0xNTguNC02NS42QzIxMS4zIDUyOCAxODggNDcxLjggMTg4IDQxMnMyMy4zLTExNi4xIDY1LjYtMTU4LjRDMjk2IDIxMS4zIDM1Mi4yIDE4OCA0MTIgMTg4czExNi4xIDIzLjIgMTU4LjQgNjUuNlM2MzYgMzUyLjIgNjM2IDQxMnMtMjMuMyAxMTYuMS02NS42IDE1OC40elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwic2VhcmNoXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnRzLmRlZmF1bHQgPSBTZWFyY2hPdXRsaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYnV0dG9uXCIpKTtcbnZhciBfZGVmYXVsdCA9IF9idXR0b25bXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jb252ZXJ0TGVnYWN5UHJvcHMgPSBjb252ZXJ0TGVnYWN5UHJvcHM7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX29taXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9vbWl0XCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcbnZhciBfRGlzYWJsZWRDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyL0Rpc2FibGVkQ29udGV4dFwiKSk7XG52YXIgX1NpemVDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyL1NpemVDb250ZXh0XCIpKTtcbnZhciBfQ29tcGFjdCA9IHJlcXVpcmUoXCIuLi9zcGFjZS9Db21wYWN0XCIpO1xudmFyIF9yZWFjdE5vZGUgPSByZXF1aXJlKFwiLi4vX3V0aWwvcmVhY3ROb2RlXCIpO1xudmFyIF90eXBlID0gcmVxdWlyZShcIi4uL191dGlsL3R5cGVcIik7XG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC93YXJuaW5nXCIpKTtcbnZhciBfd2F2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhdmVcIikpO1xudmFyIF9idXR0b25Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2J1dHRvbi1ncm91cFwiKSk7XG52YXIgX0xvYWRpbmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Mb2FkaW5nSWNvblwiKSk7XG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvYnV0dG9uLWhhcy10eXBlICovXG5cbnZhciByeFR3b0NOQ2hhciA9IC9eW1xcdTRlMDAtXFx1OWZhNV17Mn0kLztcbnZhciBpc1R3b0NOQ2hhciA9IHJ4VHdvQ05DaGFyLnRlc3QuYmluZChyeFR3b0NOQ2hhcik7XG5mdW5jdGlvbiBpc1N0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gaXNVbkJvcmRlcmVkQnV0dG9uVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlID09PSAndGV4dCcgfHwgdHlwZSA9PT0gJ2xpbmsnO1xufVxuLy8gSW5zZXJ0IG9uZSBzcGFjZSBiZXR3ZWVuIHR3byBjaGluZXNlIGNoYXJhY3RlcnMgYXV0b21hdGljYWxseS5cbmZ1bmN0aW9uIGluc2VydFNwYWNlKGNoaWxkLCBuZWVkSW5zZXJ0ZWQpIHtcbiAgLy8gQ2hlY2sgdGhlIGNoaWxkIGlmIGlzIHVuZGVmaW5lZCBvciBudWxsLlxuICBpZiAoY2hpbGQgPT09IG51bGwgfHwgY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgU1BBQ0UgPSBuZWVkSW5zZXJ0ZWQgPyAnICcgOiAnJztcbiAgLy8gc3RyaWN0TnVsbENoZWNrcyBvb3BzLlxuICBpZiAodHlwZW9mIGNoaWxkICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgY2hpbGQgIT09ICdudW1iZXInICYmIGlzU3RyaW5nKGNoaWxkLnR5cGUpICYmIGlzVHdvQ05DaGFyKGNoaWxkLnByb3BzLmNoaWxkcmVuKSkge1xuICAgIHJldHVybiAoMCwgX3JlYWN0Tm9kZS5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGQucHJvcHMuY2hpbGRyZW4uc3BsaXQoJycpLmpvaW4oU1BBQ0UpXG4gICAgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaXNUd29DTkNoYXIoY2hpbGQpID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGNoaWxkLnNwbGl0KCcnKS5qb2luKFNQQUNFKSkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgY2hpbGQpO1xuICB9XG4gIGlmICgoMCwgX3JlYWN0Tm9kZS5pc0ZyYWdtZW50KShjaGlsZCkpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGNoaWxkKTtcbiAgfVxuICByZXR1cm4gY2hpbGQ7XG59XG5mdW5jdGlvbiBzcGFjZUNoaWxkcmVuKGNoaWxkcmVuLCBuZWVkSW5zZXJ0ZWQpIHtcbiAgdmFyIGlzUHJldkNoaWxkUHVyZSA9IGZhbHNlO1xuICB2YXIgY2hpbGRMaXN0ID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHZhciB0eXBlID0gKDAsIF90eXBlb2YyW1wiZGVmYXVsdFwiXSkoY2hpbGQpO1xuICAgIHZhciBpc0N1cnJlbnRDaGlsZFB1cmUgPSB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAnbnVtYmVyJztcbiAgICBpZiAoaXNQcmV2Q2hpbGRQdXJlICYmIGlzQ3VycmVudENoaWxkUHVyZSkge1xuICAgICAgdmFyIGxhc3RJbmRleCA9IGNoaWxkTGlzdC5sZW5ndGggLSAxO1xuICAgICAgdmFyIGxhc3RDaGlsZCA9IGNoaWxkTGlzdFtsYXN0SW5kZXhdO1xuICAgICAgY2hpbGRMaXN0W2xhc3RJbmRleF0gPSBcIlwiLmNvbmNhdChsYXN0Q2hpbGQpLmNvbmNhdChjaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkTGlzdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gICAgaXNQcmV2Q2hpbGRQdXJlID0gaXNDdXJyZW50Q2hpbGRQdXJlO1xuICB9KTtcbiAgLy8gUGFzcyB0byBSZWFjdC5DaGlsZHJlbi5tYXAgdG8gYXV0byBmaWxsIGtleVxuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkTGlzdCwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGluc2VydFNwYWNlKGNoaWxkLCBuZWVkSW5zZXJ0ZWQpO1xuICB9KTtcbn1cbnZhciBCdXR0b25UeXBlcyA9ICgwLCBfdHlwZS50dXBsZSkoJ2RlZmF1bHQnLCAncHJpbWFyeScsICdnaG9zdCcsICdkYXNoZWQnLCAnbGluaycsICd0ZXh0Jyk7XG52YXIgQnV0dG9uU2hhcGVzID0gKDAsIF90eXBlLnR1cGxlKSgnZGVmYXVsdCcsICdjaXJjbGUnLCAncm91bmQnKTtcbnZhciBCdXR0b25IVE1MVHlwZXMgPSAoMCwgX3R5cGUudHVwbGUpKCdzdWJtaXQnLCAnYnV0dG9uJywgJ3Jlc2V0Jyk7XG5mdW5jdGlvbiBjb252ZXJ0TGVnYWN5UHJvcHModHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ2RhbmdlcicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGFuZ2VyOiB0cnVlXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGVcbiAgfTtcbn1cbnZhciBJbnRlcm5hbEJ1dHRvbiA9IGZ1bmN0aW9uIEludGVybmFsQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgX3Byb3BzJGxvYWRpbmcgPSBwcm9wcy5sb2FkaW5nLFxuICAgIGxvYWRpbmcgPSBfcHJvcHMkbG9hZGluZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbG9hZGluZyxcbiAgICBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJHR5cGUsXG4gICAgZGFuZ2VyID0gcHJvcHMuZGFuZ2VyLFxuICAgIF9wcm9wcyRzaGFwZSA9IHByb3BzLnNoYXBlLFxuICAgIHNoYXBlID0gX3Byb3BzJHNoYXBlID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkc2hhcGUsXG4gICAgY3VzdG9taXplU2l6ZSA9IHByb3BzLnNpemUsXG4gICAgY3VzdG9tRGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICBfcHJvcHMkZ2hvc3QgPSBwcm9wcy5naG9zdCxcbiAgICBnaG9zdCA9IF9wcm9wcyRnaG9zdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZ2hvc3QsXG4gICAgX3Byb3BzJGJsb2NrID0gcHJvcHMuYmxvY2ssXG4gICAgYmxvY2sgPSBfcHJvcHMkYmxvY2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGJsb2NrLFxuICAgIF9wcm9wcyRodG1sVHlwZSA9IHByb3BzLmh0bWxUeXBlLFxuICAgIGh0bWxUeXBlID0gX3Byb3BzJGh0bWxUeXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRodG1sVHlwZSxcbiAgICByZXN0ID0gX19yZXN0KHByb3BzLCBbXCJsb2FkaW5nXCIsIFwicHJlZml4Q2xzXCIsIFwidHlwZVwiLCBcImRhbmdlclwiLCBcInNoYXBlXCIsIFwic2l6ZVwiLCBcImRpc2FibGVkXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJpY29uXCIsIFwiZ2hvc3RcIiwgXCJibG9ja1wiLCBcImh0bWxUeXBlXCJdKTtcbiAgdmFyIHNpemUgPSBSZWFjdC51c2VDb250ZXh0KF9TaXplQ29udGV4dFtcImRlZmF1bHRcIl0pO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gRGlzYWJsZWQgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBkaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoX0Rpc2FibGVkQ29udGV4dFtcImRlZmF1bHRcIl0pO1xuICB2YXIgbWVyZ2VkRGlzYWJsZWQgPSBjdXN0b21EaXNhYmxlZCAhPT0gbnVsbCAmJiBjdXN0b21EaXNhYmxlZCAhPT0gdm9pZCAwID8gY3VzdG9tRGlzYWJsZWQgOiBkaXNhYmxlZDtcbiAgdmFyIGdyb3VwU2l6ZSA9IFJlYWN0LnVzZUNvbnRleHQoX2J1dHRvbkdyb3VwLkdyb3VwU2l6ZUNvbnRleHQpO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoISFsb2FkaW5nKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgaW5uZXJMb2FkaW5nID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRMb2FkaW5nID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgX1JlYWN0JHVzZVN0YXRlNCA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICBoYXNUd29DTkNoYXIgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLFxuICAgIHNldEhhc1R3b0NOQ2hhciA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnRleHQpLFxuICAgIGdldFByZWZpeENscyA9IF9SZWFjdCR1c2VDb250ZXh0LmdldFByZWZpeENscyxcbiAgICBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmF1dG9JbnNlcnRTcGFjZUluQnV0dG9uLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIGJ1dHRvblJlZiA9IHJlZiB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCk7XG4gIHZhciBpc05lZWRJbnNlcnRlZCA9IGZ1bmN0aW9uIGlzTmVlZEluc2VydGVkKCkge1xuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEgJiYgIWljb24gJiYgIWlzVW5Cb3JkZXJlZEJ1dHRvblR5cGUodHlwZSk7XG4gIH07XG4gIHZhciBmaXhUd29DTkNoYXIgPSBmdW5jdGlvbiBmaXhUd29DTkNoYXIoKSB7XG4gICAgLy8gRml4IGZvciBIT0MgdXNhZ2UgbGlrZSA8Rm9ybWF0TWVzc2FnZSAvPlxuICAgIGlmICghYnV0dG9uUmVmIHx8ICFidXR0b25SZWYuY3VycmVudCB8fCBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJ1dHRvblRleHQgPSBidXR0b25SZWYuY3VycmVudC50ZXh0Q29udGVudDtcbiAgICBpZiAoaXNOZWVkSW5zZXJ0ZWQoKSAmJiBpc1R3b0NOQ2hhcihidXR0b25UZXh0KSkge1xuICAgICAgaWYgKCFoYXNUd29DTkNoYXIpIHtcbiAgICAgICAgc2V0SGFzVHdvQ05DaGFyKHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFzVHdvQ05DaGFyKSB7XG4gICAgICBzZXRIYXNUd29DTkNoYXIoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgLy8gPT09PT09PT09PT09PT09IFVwZGF0ZSBMb2FkaW5nID09PT09PT09PT09PT09PVxuICB2YXIgbG9hZGluZ09yRGVsYXkgPSB0eXBlb2YgbG9hZGluZyA9PT0gJ2Jvb2xlYW4nID8gbG9hZGluZyA6IChsb2FkaW5nID09PSBudWxsIHx8IGxvYWRpbmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxvYWRpbmcuZGVsYXkpIHx8IHRydWU7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlbGF5VGltZXIgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgbG9hZGluZ09yRGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICBkZWxheVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxheVRpbWVyID0gbnVsbDtcbiAgICAgICAgc2V0TG9hZGluZyhsb2FkaW5nT3JEZWxheSk7XG4gICAgICB9LCBsb2FkaW5nT3JEZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldExvYWRpbmcobG9hZGluZ09yRGVsYXkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlbGF5VGltZXIpIHtcbiAgICAgICAgLy8gaW4gb3JkZXIgdG8gbm90IHBlcmZvcm0gYSBSZWFjdCBzdGF0ZSB1cGRhdGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudFxuICAgICAgICAvLyBhbmQgY2xlYXIgdGltZXIgYWZ0ZXIgJ2xvYWRpbmdPckRlbGF5JyB1cGRhdGVkLlxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGRlbGF5VGltZXIpO1xuICAgICAgICBkZWxheVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbbG9hZGluZ09yRGVsYXldKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZpeFR3b0NOQ2hhciwgW2J1dHRvblJlZl0pO1xuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgdmFyIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzMwMjA3XG4gICAgaWYgKGlubmVyTG9hZGluZyB8fCBtZXJnZWREaXNhYmxlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbkNsaWNrID09PSBudWxsIHx8IG9uQ2xpY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ2xpY2soZSk7XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEodHlwZW9mIGljb24gPT09ICdzdHJpbmcnICYmIGljb24ubGVuZ3RoID4gMiksICdCdXR0b24nLCBcImBpY29uYCBpcyB1c2luZyBSZWFjdE5vZGUgaW5zdGVhZCBvZiBzdHJpbmcgbmFtaW5nIGluIHY0LiBQbGVhc2UgY2hlY2sgYFwiLmNvbmNhdChpY29uLCBcImAgYXQgaHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvaWNvblwiKSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEoZ2hvc3QgJiYgaXNVbkJvcmRlcmVkQnV0dG9uVHlwZSh0eXBlKSksICdCdXR0b24nLCBcImBsaW5rYCBvciBgdGV4dGAgYnV0dG9uIGNhbid0IGJlIGEgYGdob3N0YCBidXR0b24uXCIpIDogdm9pZCAwO1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdidG4nLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICB2YXIgYXV0b0luc2VydFNwYWNlID0gYXV0b0luc2VydFNwYWNlSW5CdXR0b24gIT09IGZhbHNlO1xuICB2YXIgX3VzZUNvbXBhY3RJdGVtQ29udGV4ID0gKDAsIF9Db21wYWN0LnVzZUNvbXBhY3RJdGVtQ29udGV4dCkocHJlZml4Q2xzLCBkaXJlY3Rpb24pLFxuICAgIGNvbXBhY3RTaXplID0gX3VzZUNvbXBhY3RJdGVtQ29udGV4LmNvbXBhY3RTaXplLFxuICAgIGNvbXBhY3RJdGVtQ2xhc3NuYW1lcyA9IF91c2VDb21wYWN0SXRlbUNvbnRleC5jb21wYWN0SXRlbUNsYXNzbmFtZXM7XG4gIHZhciBzaXplQ2xhc3NOYW1lTWFwID0ge1xuICAgIGxhcmdlOiAnbGcnLFxuICAgIHNtYWxsOiAnc20nLFxuICAgIG1pZGRsZTogdW5kZWZpbmVkXG4gIH07XG4gIHZhciBzaXplRnVsbG5hbWUgPSBjb21wYWN0U2l6ZSB8fCBncm91cFNpemUgfHwgY3VzdG9taXplU2l6ZSB8fCBzaXplO1xuICB2YXIgc2l6ZUNscyA9IHNpemVGdWxsbmFtZSA/IHNpemVDbGFzc05hbWVNYXBbc2l6ZUZ1bGxuYW1lXSB8fCAnJyA6ICcnO1xuICB2YXIgaWNvblR5cGUgPSBpbm5lckxvYWRpbmcgPyAnbG9hZGluZycgOiBpY29uO1xuICB2YXIgbGlua0J1dHRvblJlc3RQcm9wcyA9ICgwLCBfb21pdFtcImRlZmF1bHRcIl0pKHJlc3QsIFsnbmF2aWdhdGUnXSk7XG4gIHZhciBjbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHNoYXBlKSwgc2hhcGUgIT09ICdkZWZhdWx0JyAmJiBzaGFwZSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdCh0eXBlKSwgdHlwZSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplQ2xzKSwgc2l6ZUNscyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaWNvbi1vbmx5XCIpLCAhY2hpbGRyZW4gJiYgY2hpbGRyZW4gIT09IDAgJiYgISFpY29uVHlwZSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYmFja2dyb3VuZC1naG9zdFwiKSwgZ2hvc3QgJiYgIWlzVW5Cb3JkZXJlZEJ1dHRvblR5cGUodHlwZSkpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmdcIiksIGlubmVyTG9hZGluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdHdvLWNoaW5lc2UtY2hhcnNcIiksIGhhc1R3b0NOQ2hhciAmJiBhdXRvSW5zZXJ0U3BhY2UgJiYgIWlubmVyTG9hZGluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYmxvY2tcIiksIGJsb2NrKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kYW5nZXJvdXNcIiksICEhZGFuZ2VyKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIGRpcmVjdGlvbiA9PT0gJ3J0bCcpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRpc2FibGVkXCIpLCBsaW5rQnV0dG9uUmVzdFByb3BzLmhyZWYgIT09IHVuZGVmaW5lZCAmJiBtZXJnZWREaXNhYmxlZCksIF9jbGFzc05hbWVzKSwgY29tcGFjdEl0ZW1DbGFzc25hbWVzLCBjbGFzc05hbWUpO1xuICB2YXIgaWNvbk5vZGUgPSBpY29uICYmICFpbm5lckxvYWRpbmcgPyBpY29uIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0xvYWRpbmdJY29uW1wiZGVmYXVsdFwiXSwge1xuICAgIGV4aXN0SWNvbjogISFpY29uLFxuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIGxvYWRpbmc6ICEhaW5uZXJMb2FkaW5nXG4gIH0pO1xuICB2YXIga2lkcyA9IGNoaWxkcmVuIHx8IGNoaWxkcmVuID09PSAwID8gc3BhY2VDaGlsZHJlbihjaGlsZHJlbiwgaXNOZWVkSW5zZXJ0ZWQoKSAmJiBhdXRvSW5zZXJ0U3BhY2UpIDogbnVsbDtcbiAgaWYgKGxpbmtCdXR0b25SZXN0UHJvcHMuaHJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGxpbmtCdXR0b25SZXN0UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiBidXR0b25SZWZcbiAgICB9KSwgaWNvbk5vZGUsIGtpZHMpO1xuICB9XG4gIHZhciBidXR0b25Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCByZXN0LCB7XG4gICAgdHlwZTogaHRtbFR5cGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIGRpc2FibGVkOiBtZXJnZWREaXNhYmxlZCxcbiAgICByZWY6IGJ1dHRvblJlZlxuICB9KSwgaWNvbk5vZGUsIGtpZHMpO1xuICBpZiAoaXNVbkJvcmRlcmVkQnV0dG9uVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBidXR0b25Ob2RlO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfd2F2ZVtcImRlZmF1bHRcIl0sIHtcbiAgICBkaXNhYmxlZDogISFpbm5lckxvYWRpbmdcbiAgfSwgYnV0dG9uTm9kZSk7XG59O1xudmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEludGVybmFsQnV0dG9uKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbi5kaXNwbGF5TmFtZSA9ICdCdXR0b24nO1xufVxuQnV0dG9uLkdyb3VwID0gX2J1dHRvbkdyb3VwW1wiZGVmYXVsdFwiXTtcbkJ1dHRvbi5fX0FOVF9CVVRUT04gPSB0cnVlO1xudmFyIF9kZWZhdWx0ID0gQnV0dG9uO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKVtcImRlZmF1bHRcIl07XG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG52YXIgX2NyZWF0ZVN1cGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlU3VwZXJcIikpO1xudmFyIF9keW5hbWljQ1NTID0gcmVxdWlyZShcInJjLXV0aWwvbGliL0RvbS9keW5hbWljQ1NTXCIpO1xudmFyIF9yZWYyID0gcmVxdWlyZShcInJjLXV0aWwvbGliL3JlZlwiKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcbnZhciBfcmFmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yYWZcIikpO1xudmFyIF9yZWFjdE5vZGUgPSByZXF1aXJlKFwiLi9yZWFjdE5vZGVcIik7XG52YXIgc3R5bGVGb3JQc2V1ZG87XG4vLyBXaGVyZSBlbCBpcyB0aGUgRE9NIGVsZW1lbnQgeW91J2QgbGlrZSB0byB0ZXN0IGZvciB2aXNpYmlsaXR5XG5mdW5jdGlvbiBpc0hpZGRlbihlbGVtZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAhZWxlbWVudCB8fCBlbGVtZW50Lm9mZnNldFBhcmVudCA9PT0gbnVsbCB8fCBlbGVtZW50LmhpZGRlbjtcbn1cbmZ1bmN0aW9uIGdldFZhbGlkYXRlQ29udGFpbmVyKG5vZGVSb290KSB7XG4gIGlmIChub2RlUm9vdCBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgcmV0dXJuIG5vZGVSb290LmJvZHk7XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20obm9kZVJvb3QuY2hpbGROb2RlcykuZmluZChmdW5jdGlvbiAoZWxlKSB7XG4gICAgcmV0dXJuIChlbGUgPT09IG51bGwgfHwgZWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbGUubm9kZVR5cGUpID09PSBOb2RlLkVMRU1FTlRfTk9ERTtcbiAgfSk7XG59XG5mdW5jdGlvbiBpc05vdEdyZXkoY29sb3IpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIHZhciBtYXRjaCA9IChjb2xvciB8fCAnJykubWF0Y2goL3JnYmE/XFwoKFxcZCopLCAoXFxkKiksIChcXGQqKSgsIFtcXGQuXSopP1xcKS8pO1xuICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0gJiYgbWF0Y2hbMl0gJiYgbWF0Y2hbM10pIHtcbiAgICByZXR1cm4gIShtYXRjaFsxXSA9PT0gbWF0Y2hbMl0gJiYgbWF0Y2hbMl0gPT09IG1hdGNoWzNdKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbnZhciBXYXZlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyW1wiZGVmYXVsdFwiXSkoV2F2ZSwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSAoMCwgX2NyZWF0ZVN1cGVyMltcImRlZmF1bHRcIl0pKFdhdmUpO1xuICBmdW5jdGlvbiBXYXZlKCkge1xuICAgIHZhciBfdGhpcztcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMltcImRlZmF1bHRcIl0pKHRoaXMsIFdhdmUpO1xuICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgX3RoaXMuY29udGFpbmVyUmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpO1xuICAgIF90aGlzLmFuaW1hdGlvblN0YXJ0ID0gZmFsc2U7XG4gICAgX3RoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgX3RoaXMub25DbGljayA9IGZ1bmN0aW9uIChub2RlLCB3YXZlQ29sb3IpIHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgaW5zZXJ0RXh0cmFOb2RlID0gX3RoaXMkcHJvcHMuaW5zZXJ0RXh0cmFOb2RlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkO1xuICAgICAgaWYgKGRpc2FibGVkIHx8ICFub2RlIHx8IGlzSGlkZGVuKG5vZGUpIHx8IG5vZGUuY2xhc3NOYW1lLmluY2x1ZGVzKCctbGVhdmUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfdGhpcy5leHRyYU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemUgPSAoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksXG4gICAgICAgIGV4dHJhTm9kZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS5leHRyYU5vZGU7XG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3RoaXMuY29udGV4dC5nZXRQcmVmaXhDbHM7XG4gICAgICBleHRyYU5vZGUuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoZ2V0UHJlZml4Q2xzKCcnKSwgXCItY2xpY2stYW5pbWF0aW5nLW5vZGVcIik7XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IF90aGlzLmdldEF0dHJpYnV0ZU5hbWUoKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICd0cnVlJyk7XG4gICAgICAvLyBOb3Qgd2hpdGUgb3IgdHJhbnNwYXJlbnQgb3IgZ3JleVxuICAgICAgaWYgKHdhdmVDb2xvciAmJiB3YXZlQ29sb3IgIT09ICcjZmZmJyAmJiB3YXZlQ29sb3IgIT09ICcjZmZmZmZmJyAmJiB3YXZlQ29sb3IgIT09ICdyZ2IoMjU1LCAyNTUsIDI1NSknICYmIHdhdmVDb2xvciAhPT0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknICYmIGlzTm90R3JleSh3YXZlQ29sb3IpICYmICEvcmdiYVxcKCg/OlxcZCosICl7M30wXFwpLy50ZXN0KHdhdmVDb2xvcikgJiZcbiAgICAgIC8vIGFueSB0cmFuc3BhcmVudCByZ2JhIGNvbG9yXG4gICAgICB3YXZlQ29sb3IgIT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgZXh0cmFOb2RlLnN0eWxlLmJvcmRlckNvbG9yID0gd2F2ZUNvbG9yO1xuICAgICAgICB2YXIgbm9kZVJvb3QgPSAoKF9hID0gbm9kZS5nZXRSb290Tm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwobm9kZSkpIHx8IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIG5vZGVCb2R5ID0gKF9iID0gZ2V0VmFsaWRhdGVDb250YWluZXIobm9kZVJvb3QpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBub2RlUm9vdDtcbiAgICAgICAgc3R5bGVGb3JQc2V1ZG8gPSAoMCwgX2R5bmFtaWNDU1MudXBkYXRlQ1NTKShcIlxcbiAgICAgIFtcIi5jb25jYXQoZ2V0UHJlZml4Q2xzKCcnKSwgXCItY2xpY2stYW5pbWF0aW5nLXdpdGhvdXQtZXh0cmEtbm9kZT0ndHJ1ZSddOjphZnRlciwgLlwiKS5jb25jYXQoZ2V0UHJlZml4Q2xzKCcnKSwgXCItY2xpY2stYW5pbWF0aW5nLW5vZGUge1xcbiAgICAgICAgLS1hbnRkLXdhdmUtc2hhZG93LWNvbG9yOiBcIikuY29uY2F0KHdhdmVDb2xvciwgXCI7XFxuICAgICAgfVwiKSwgJ2FudGQtd2F2ZScsIHtcbiAgICAgICAgICBjc3A6IF90aGlzLmNzcCxcbiAgICAgICAgICBhdHRhY2hUbzogbm9kZUJvZHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaW5zZXJ0RXh0cmFOb2RlKSB7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZXh0cmFOb2RlKTtcbiAgICAgIH1cbiAgICAgIFsndHJhbnNpdGlvbicsICdhbmltYXRpb24nXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcIlwiLmNvbmNhdChuYW1lLCBcInN0YXJ0XCIpLCBfdGhpcy5vblRyYW5zaXRpb25TdGFydCk7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcIlwiLmNvbmNhdChuYW1lLCBcImVuZFwiKSwgX3RoaXMub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgX3RoaXMub25UcmFuc2l0aW9uU3RhcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbm9kZSA9IF90aGlzLmNvbnRhaW5lclJlZi5jdXJyZW50O1xuICAgICAgaWYgKCFlIHx8IGUudGFyZ2V0ICE9PSBub2RlIHx8IF90aGlzLmFuaW1hdGlvblN0YXJ0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF90aGlzLnJlc2V0RWZmZWN0KG5vZGUpO1xuICAgIH07XG4gICAgX3RoaXMub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghZSB8fCBlLmFuaW1hdGlvbk5hbWUgIT09ICdmYWRlRWZmZWN0Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfdGhpcy5yZXNldEVmZmVjdChlLnRhcmdldCk7XG4gICAgfTtcbiAgICBfdGhpcy5iaW5kQW5pbWF0aW9uRXZlbnQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKCFub2RlIHx8ICFub2RlLmdldEF0dHJpYnV0ZSB8fCBub2RlLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBub2RlLmNsYXNzTmFtZS5pbmNsdWRlcygnZGlzYWJsZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgb25DbGljayA9IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAvLyBGaXggcmFkaW8gYnV0dG9uIGNsaWNrIHR3aWNlXG4gICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnSU5QVVQnIHx8IGlzSGlkZGVuKGUudGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5yZXNldEVmZmVjdChub2RlKTtcbiAgICAgICAgLy8gR2V0IHdhdmUgY29sb3IgZnJvbSB0YXJnZXRcbiAgICAgICAgdmFyIHdhdmVDb2xvciA9IGdldENvbXB1dGVkU3R5bGUobm9kZSkuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC1jb2xvcicpIHx8XG4gICAgICAgIC8vIEZpcmVmb3ggQ29tcGF0aWJsZVxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci1jb2xvcicpIHx8IGdldENvbXB1dGVkU3R5bGUobm9kZSkuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1jb2xvcicpO1xuICAgICAgICBfdGhpcy5jbGlja1dhdmVUaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm9uQ2xpY2sobm9kZSwgd2F2ZUNvbG9yKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIF9yYWZbXCJkZWZhdWx0XCJdLmNhbmNlbChfdGhpcy5hbmltYXRpb25TdGFydElkKTtcbiAgICAgICAgX3RoaXMuYW5pbWF0aW9uU3RhcnQgPSB0cnVlO1xuICAgICAgICAvLyBSZW5kZXIgdG8gdHJpZ2dlciB0cmFuc2l0aW9uIGV2ZW50IGNvc3QgMyBmcmFtZXMuIExldCdzIGRlbGF5IDEwIGZyYW1lcyB0byByZXNldCB0aGlzLlxuICAgICAgICBfdGhpcy5hbmltYXRpb25TdGFydElkID0gKDAsIF9yYWZbXCJkZWZhdWx0XCJdKShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuYW5pbWF0aW9uU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgfTtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIF90aGlzLnJlbmRlcldhdmUgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGNzcCA9IF9yZWYuY3NwO1xuICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICBfdGhpcy5jc3AgPSBjc3A7XG4gICAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSByZXR1cm4gY2hpbGRyZW47XG4gICAgICB2YXIgcmVmID0gX3RoaXMuY29udGFpbmVyUmVmO1xuICAgICAgaWYgKCgwLCBfcmVmMi5zdXBwb3J0UmVmKShjaGlsZHJlbikpIHtcbiAgICAgICAgcmVmID0gKDAsIF9yZWYyLmNvbXBvc2VSZWYpKGNoaWxkcmVuLnJlZiwgX3RoaXMuY29udGFpbmVyUmVmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoMCwgX3JlYWN0Tm9kZS5jbG9uZUVsZW1lbnQpKGNoaWxkcmVuLCB7XG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAoMCwgX2NyZWF0ZUNsYXNzMltcImRlZmF1bHRcIl0pKFdhdmUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBub2RlID0gdGhpcy5jb250YWluZXJSZWYuY3VycmVudDtcbiAgICAgIGlmICghbm9kZSB8fCBub2RlLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5zdGFuY2UgPSB0aGlzLmJpbmRBbmltYXRpb25FdmVudChub2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlLmNhbmNlbCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY2xpY2tXYXZlVGltZW91dElkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsaWNrV2F2ZVRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEF0dHJpYnV0ZU5hbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlTmFtZSgpIHtcbiAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSB0aGlzLmNvbnRleHQuZ2V0UHJlZml4Q2xzO1xuICAgICAgdmFyIGluc2VydEV4dHJhTm9kZSA9IHRoaXMucHJvcHMuaW5zZXJ0RXh0cmFOb2RlO1xuICAgICAgcmV0dXJuIGluc2VydEV4dHJhTm9kZSA/IFwiXCIuY29uY2F0KGdldFByZWZpeENscygnJyksIFwiLWNsaWNrLWFuaW1hdGluZ1wiKSA6IFwiXCIuY29uY2F0KGdldFByZWZpeENscygnJyksIFwiLWNsaWNrLWFuaW1hdGluZy13aXRob3V0LWV4dHJhLW5vZGVcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0RWZmZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0RWZmZWN0KG5vZGUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgaWYgKCFub2RlIHx8IG5vZGUgPT09IHRoaXMuZXh0cmFOb2RlIHx8ICEobm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbnNlcnRFeHRyYU5vZGUgPSB0aGlzLnByb3BzLmluc2VydEV4dHJhTm9kZTtcbiAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGVOYW1lKCk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnZmFsc2UnKTsgLy8gZWRnZSBoYXMgYnVnIG9uIGByZW1vdmVBdHRyaWJ1dGVgICMxNDQ2NlxuICAgICAgaWYgKHN0eWxlRm9yUHNldWRvKSB7XG4gICAgICAgIHN0eWxlRm9yUHNldWRvLmlubmVySFRNTCA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKGluc2VydEV4dHJhTm9kZSAmJiB0aGlzLmV4dHJhTm9kZSAmJiBub2RlLmNvbnRhaW5zKHRoaXMuZXh0cmFOb2RlKSkge1xuICAgICAgICBub2RlLnJlbW92ZUNoaWxkKHRoaXMuZXh0cmFOb2RlKTtcbiAgICAgIH1cbiAgICAgIFsndHJhbnNpdGlvbicsICdhbmltYXRpb24nXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIlwiLmNvbmNhdChuYW1lLCBcInN0YXJ0XCIpLCBfdGhpczIub25UcmFuc2l0aW9uU3RhcnQpO1xuICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJcIi5jb25jYXQobmFtZSwgXCJlbmRcIiksIF90aGlzMi5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlcldhdmUpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gV2F2ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcbldhdmUuY29udGV4dFR5cGUgPSBfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dDtcbnZhciBfZGVmYXVsdCA9IFdhdmU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB3cmFwcGVyUmFmO1xudmFyIF9yYWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9yYWZcIikpO1xudmFyIGlkID0gMDtcbnZhciBpZHMgPSB7fTtcbi8vIFN1cHBvcnQgY2FsbCByYWYgd2l0aCBkZWxheSBzcGVjaWZpZWQgZnJhbWVcbmZ1bmN0aW9uIHdyYXBwZXJSYWYoY2FsbGJhY2spIHtcbiAgdmFyIGRlbGF5RnJhbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICB2YXIgbXlJZCA9IGlkKys7XG4gIHZhciByZXN0RnJhbWVzID0gZGVsYXlGcmFtZXM7XG4gIGZ1bmN0aW9uIGludGVybmFsQ2FsbGJhY2soKSB7XG4gICAgcmVzdEZyYW1lcyAtPSAxO1xuICAgIGlmIChyZXN0RnJhbWVzIDw9IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICBkZWxldGUgaWRzW215SWRdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZHNbbXlJZF0gPSAoMCwgX3JhZltcImRlZmF1bHRcIl0pKGludGVybmFsQ2FsbGJhY2spO1xuICAgIH1cbiAgfVxuICBpZHNbbXlJZF0gPSAoMCwgX3JhZltcImRlZmF1bHRcIl0pKGludGVybmFsQ2FsbGJhY2spO1xuICByZXR1cm4gbXlJZDtcbn1cbndyYXBwZXJSYWYuY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKHBpZCkge1xuICBpZiAocGlkID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgX3JhZltcImRlZmF1bHRcIl0uY2FuY2VsKGlkc1twaWRdKTtcbiAgZGVsZXRlIGlkc1twaWRdO1xufTtcbndyYXBwZXJSYWYuaWRzID0gaWRzOyAvLyBleHBvcnQgdGhpcyBmb3IgdGVzdCB1c2FnZSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuR3JvdXBTaXplQ29udGV4dCA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xudmFyIEdyb3VwU2l6ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuZXhwb3J0cy5Hcm91cFNpemVDb250ZXh0ID0gR3JvdXBTaXplQ29udGV4dDtcbnZhciBCdXR0b25Hcm91cCA9IGZ1bmN0aW9uIEJ1dHRvbkdyb3VwKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgb3RoZXJzID0gX19yZXN0KHByb3BzLCBbXCJwcmVmaXhDbHNcIiwgXCJzaXplXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnYnRuLWdyb3VwJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgLy8gbGFyZ2UgPT4gbGdcbiAgLy8gc21hbGwgPT4gc21cbiAgdmFyIHNpemVDbHMgPSAnJztcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSAnbGFyZ2UnOlxuICAgICAgc2l6ZUNscyA9ICdsZyc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzbWFsbCc6XG4gICAgICBzaXplQ2xzID0gJ3NtJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoIXNpemUsICdCdXR0b24uR3JvdXAnLCAnSW52YWxpZCBwcm9wIGBzaXplYC4nKSA6IHZvaWQgMDtcbiAgfVxuICB2YXIgY2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHByZWZpeENscywgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplQ2xzKSwgc2l6ZUNscyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXBTaXplQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzaXplXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgb3RoZXJzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKSk7XG59O1xudmFyIF9kZWZhdWx0ID0gQnV0dG9uR3JvdXA7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKVtcImRlZmF1bHRcIl07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX0xvYWRpbmdPdXRsaW5lZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBhbnQtZGVzaWduL2ljb25zL0xvYWRpbmdPdXRsaW5lZFwiKSk7XG52YXIgX3JjTW90aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtbW90aW9uXCIpKTtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgZ2V0Q29sbGFwc2VkV2lkdGggPSBmdW5jdGlvbiBnZXRDb2xsYXBzZWRXaWR0aCgpIHtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogMCxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJ1xuICB9O1xufTtcbnZhciBnZXRSZWFsV2lkdGggPSBmdW5jdGlvbiBnZXRSZWFsV2lkdGgobm9kZSkge1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBub2RlLnNjcm9sbFdpZHRoLFxuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gIH07XG59O1xudmFyIExvYWRpbmdJY29uID0gZnVuY3Rpb24gTG9hZGluZ0ljb24oX3JlZikge1xuICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgbG9hZGluZyA9IF9yZWYubG9hZGluZyxcbiAgICBleGlzdEljb24gPSBfcmVmLmV4aXN0SWNvbjtcbiAgdmFyIHZpc2libGUgPSAhIWxvYWRpbmc7XG4gIGlmIChleGlzdEljb24pIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctaWNvblwiKVxuICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0xvYWRpbmdPdXRsaW5lZFtcImRlZmF1bHRcIl0sIG51bGwpKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfcmNNb3Rpb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgdmlzaWJsZTogdmlzaWJsZSxcbiAgICAvLyBXZSBkbyBub3QgcmVhbGx5IHVzZSB0aGlzIG1vdGlvbk5hbWVcbiAgICBtb3Rpb25OYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctaWNvbi1tb3Rpb25cIiksXG4gICAgcmVtb3ZlT25MZWF2ZTogdHJ1ZSxcbiAgICBvbkFwcGVhclN0YXJ0OiBnZXRDb2xsYXBzZWRXaWR0aCxcbiAgICBvbkFwcGVhckFjdGl2ZTogZ2V0UmVhbFdpZHRoLFxuICAgIG9uRW50ZXJTdGFydDogZ2V0Q29sbGFwc2VkV2lkdGgsXG4gICAgb25FbnRlckFjdGl2ZTogZ2V0UmVhbFdpZHRoLFxuICAgIG9uTGVhdmVTdGFydDogZ2V0UmVhbFdpZHRoLFxuICAgIG9uTGVhdmVBY3RpdmU6IGdldENvbGxhcHNlZFdpZHRoXG4gIH0sIGZ1bmN0aW9uIChfcmVmMiwgcmVmKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IF9yZWYyLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZjIuc3R5bGU7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1sb2FkaW5nLWljb25cIiksXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0xvYWRpbmdPdXRsaW5lZFtcImRlZmF1bHRcIl0sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSkpO1xuICB9KTtcbn07XG52YXIgX2RlZmF1bHQgPSBMb2FkaW5nSWNvbjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3JjVGV4dGFyZWEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy10ZXh0YXJlYVwiKSk7XG52YXIgX3VzZU1lcmdlZFN0YXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXV0aWwvbGliL2hvb2tzL3VzZU1lcmdlZFN0YXRlXCIpKTtcbnZhciBfb21pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXV0aWwvbGliL29taXRcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIF9EaXNhYmxlZENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXIvRGlzYWJsZWRDb250ZXh0XCIpKTtcbnZhciBfU2l6ZUNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXIvU2l6ZUNvbnRleHRcIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4uL2Zvcm0vY29udGV4dFwiKTtcbnZhciBfc3RhdHVzVXRpbHMgPSByZXF1aXJlKFwiLi4vX3V0aWwvc3RhdHVzVXRpbHNcIik7XG52YXIgX0NsZWFyYWJsZUxhYmVsZWRJbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xlYXJhYmxlTGFiZWxlZElucHV0XCIpKTtcbnZhciBfSW5wdXQgPSByZXF1aXJlKFwiLi9JbnB1dFwiKTtcbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5mdW5jdGlvbiBmaXhFbW9qaUxlbmd0aCh2YWx1ZSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZhbHVlIHx8ICcnKS5zbGljZSgwLCBtYXhMZW5ndGgpLmpvaW4oJycpO1xufVxuZnVuY3Rpb24gc2V0VHJpZ2dlclZhbHVlKGlzQ3Vyc29ySW5FbmQsIHByZVZhbHVlLCB0cmlnZ2VyVmFsdWUsIG1heExlbmd0aCkge1xuICB2YXIgbmV3VHJpZ2dlclZhbHVlID0gdHJpZ2dlclZhbHVlO1xuICBpZiAoaXNDdXJzb3JJbkVuZCkge1xuICAgIC8vIOWFieagh+WcqOWwvumDqO+8jOebtOaOpeaIquaWrVxuICAgIG5ld1RyaWdnZXJWYWx1ZSA9IGZpeEVtb2ppTGVuZ3RoKHRyaWdnZXJWYWx1ZSwgbWF4TGVuZ3RoKTtcbiAgfSBlbHNlIGlmICgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHByZVZhbHVlIHx8ICcnKS5sZW5ndGggPCB0cmlnZ2VyVmFsdWUubGVuZ3RoICYmICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkodHJpZ2dlclZhbHVlIHx8ICcnKS5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAvLyDlhYnmoIflnKjkuK3pl7TvvIzlpoLmnpzmnIDlkI7nmoTlgLzotoXov4fmnIDlpKflgLzvvIzliJnph4fnlKjljp/lhYjnmoTlgLxcbiAgICBuZXdUcmlnZ2VyVmFsdWUgPSBwcmVWYWx1ZTtcbiAgfVxuICByZXR1cm4gbmV3VHJpZ2dlclZhbHVlO1xufVxudmFyIFRleHRBcmVhID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9hLCByZWYpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgIF9hJGJvcmRlcmVkID0gX2EuYm9yZGVyZWQsXG4gICAgYm9yZGVyZWQgPSBfYSRib3JkZXJlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9hJGJvcmRlcmVkLFxuICAgIF9hJHNob3dDb3VudCA9IF9hLnNob3dDb3VudCxcbiAgICBzaG93Q291bnQgPSBfYSRzaG93Q291bnQgPT09IHZvaWQgMCA/IGZhbHNlIDogX2Ekc2hvd0NvdW50LFxuICAgIG1heExlbmd0aCA9IF9hLm1heExlbmd0aCxcbiAgICBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgc3R5bGUgPSBfYS5zdHlsZSxcbiAgICBjdXN0b21pemVTaXplID0gX2Euc2l6ZSxcbiAgICBjdXN0b21EaXNhYmxlZCA9IF9hLmRpc2FibGVkLFxuICAgIG9uQ29tcG9zaXRpb25TdGFydCA9IF9hLm9uQ29tcG9zaXRpb25TdGFydCxcbiAgICBvbkNvbXBvc2l0aW9uRW5kID0gX2Eub25Db21wb3NpdGlvbkVuZCxcbiAgICBvbkNoYW5nZSA9IF9hLm9uQ2hhbmdlLFxuICAgIG9uRm9jdXMgPSBfYS5vbkZvY3VzLFxuICAgIG9uQmx1ciA9IF9hLm9uQmx1cixcbiAgICBjdXN0b21TdGF0dXMgPSBfYS5zdGF0dXMsXG4gICAgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImJvcmRlcmVkXCIsIFwic2hvd0NvdW50XCIsIFwibWF4TGVuZ3RoXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJzaXplXCIsIFwiZGlzYWJsZWRcIiwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiwgXCJvbkNvbXBvc2l0aW9uRW5kXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwib25CbHVyXCIsIFwic3RhdHVzXCJdKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dCksXG4gICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgIGRpcmVjdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0LmRpcmVjdGlvbjtcbiAgdmFyIHNpemUgPSBSZWFjdC51c2VDb250ZXh0KF9TaXplQ29udGV4dFtcImRlZmF1bHRcIl0pO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT0gRGlzYWJsZWQgPT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBkaXNhYmxlZCA9IFJlYWN0LnVzZUNvbnRleHQoX0Rpc2FibGVkQ29udGV4dFtcImRlZmF1bHRcIl0pO1xuICB2YXIgbWVyZ2VkRGlzYWJsZWQgPSBjdXN0b21EaXNhYmxlZCAhPT0gbnVsbCAmJiBjdXN0b21EaXNhYmxlZCAhPT0gdm9pZCAwID8gY3VzdG9tRGlzYWJsZWQgOiBkaXNhYmxlZDtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0MiA9IFJlYWN0LnVzZUNvbnRleHQoX2NvbnRleHQuRm9ybUl0ZW1JbnB1dENvbnRleHQpLFxuICAgIGNvbnRleHRTdGF0dXMgPSBfUmVhY3QkdXNlQ29udGV4dDIuc3RhdHVzLFxuICAgIGhhc0ZlZWRiYWNrID0gX1JlYWN0JHVzZUNvbnRleHQyLmhhc0ZlZWRiYWNrLFxuICAgIGlzRm9ybUl0ZW1JbnB1dCA9IF9SZWFjdCR1c2VDb250ZXh0Mi5pc0Zvcm1JdGVtSW5wdXQsXG4gICAgZmVlZGJhY2tJY29uID0gX1JlYWN0JHVzZUNvbnRleHQyLmZlZWRiYWNrSWNvbjtcbiAgdmFyIG1lcmdlZFN0YXR1cyA9ICgwLCBfc3RhdHVzVXRpbHMuZ2V0TWVyZ2VkU3RhdHVzKShjb250ZXh0U3RhdHVzLCBjdXN0b21TdGF0dXMpO1xuICB2YXIgaW5uZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjbGVhcmFibGVJbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgY29tcG9zaXRpbmcgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldENvbXBvc2l0aW5nID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgX1JlYWN0JHVzZVN0YXRlNCA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICBmb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlNFsxXTtcbiAgdmFyIG9sZENvbXBvc2l0aW9uVmFsdWVSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIG9sZFNlbGVjdGlvblN0YXJ0UmVmID0gUmVhY3QudXNlUmVmKDApO1xuICB2YXIgX3VzZU1lcmdlZFN0YXRlID0gKDAsIF91c2VNZXJnZWRTdGF0ZTNbXCJkZWZhdWx0XCJdKShwcm9wcy5kZWZhdWx0VmFsdWUsIHtcbiAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZVxuICAgIH0pLFxuICAgIF91c2VNZXJnZWRTdGF0ZTIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkoX3VzZU1lcmdlZFN0YXRlLCAyKSxcbiAgICB2YWx1ZSA9IF91c2VNZXJnZWRTdGF0ZTJbMF0sXG4gICAgc2V0VmFsdWUgPSBfdXNlTWVyZ2VkU3RhdGUyWzFdO1xuICB2YXIgaGlkZGVuID0gcHJvcHMuaGlkZGVuO1xuICB2YXIgaGFuZGxlU2V0VmFsdWUgPSBmdW5jdGlvbiBoYW5kbGVTZXRWYWx1ZSh2YWwsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHByb3BzLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldFZhbHVlKHZhbCk7XG4gICAgICBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBWYWx1ZSBVcGRhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIE1heCBsZW5ndGggdmFsdWVcbiAgdmFyIGhhc01heExlbmd0aCA9IE51bWJlcihtYXhMZW5ndGgpID4gMDtcbiAgdmFyIG9uSW50ZXJuYWxDb21wb3NpdGlvblN0YXJ0ID0gZnVuY3Rpb24gb25JbnRlcm5hbENvbXBvc2l0aW9uU3RhcnQoZSkge1xuICAgIHNldENvbXBvc2l0aW5nKHRydWUpO1xuICAgIC8vIOaLvOmfs+i+k+WFpeWJjeS/neWtmOS4gOS7veaXp+WAvFxuICAgIG9sZENvbXBvc2l0aW9uVmFsdWVSZWYuY3VycmVudCA9IHZhbHVlO1xuICAgIC8vIOS/neWtmOaXp+eahOWFieagh+S9jee9rlxuICAgIG9sZFNlbGVjdGlvblN0YXJ0UmVmLmN1cnJlbnQgPSBlLmN1cnJlbnRUYXJnZXQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgb25Db21wb3NpdGlvblN0YXJ0ID09PSBudWxsIHx8IG9uQ29tcG9zaXRpb25TdGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Db21wb3NpdGlvblN0YXJ0KGUpO1xuICB9O1xuICB2YXIgb25JbnRlcm5hbENvbXBvc2l0aW9uRW5kID0gZnVuY3Rpb24gb25JbnRlcm5hbENvbXBvc2l0aW9uRW5kKGUpIHtcbiAgICB2YXIgX2E7XG4gICAgc2V0Q29tcG9zaXRpbmcoZmFsc2UpO1xuICAgIHZhciB0cmlnZ2VyVmFsdWUgPSBlLmN1cnJlbnRUYXJnZXQudmFsdWU7XG4gICAgaWYgKGhhc01heExlbmd0aCkge1xuICAgICAgdmFyIGlzQ3Vyc29ySW5FbmQgPSBvbGRTZWxlY3Rpb25TdGFydFJlZi5jdXJyZW50ID49IG1heExlbmd0aCArIDEgfHwgb2xkU2VsZWN0aW9uU3RhcnRSZWYuY3VycmVudCA9PT0gKChfYSA9IG9sZENvbXBvc2l0aW9uVmFsdWVSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCk7XG4gICAgICB0cmlnZ2VyVmFsdWUgPSBzZXRUcmlnZ2VyVmFsdWUoaXNDdXJzb3JJbkVuZCwgb2xkQ29tcG9zaXRpb25WYWx1ZVJlZi5jdXJyZW50LCB0cmlnZ2VyVmFsdWUsIG1heExlbmd0aCk7XG4gICAgfVxuICAgIC8vIFBhdGNoIGNvbXBvc2l0aW9uIG9uQ2hhbmdlIHdoZW4gdmFsdWUgY2hhbmdlZFxuICAgIGlmICh0cmlnZ2VyVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICBoYW5kbGVTZXRWYWx1ZSh0cmlnZ2VyVmFsdWUpO1xuICAgICAgKDAsIF9JbnB1dC5yZXNvbHZlT25DaGFuZ2UpKGUuY3VycmVudFRhcmdldCwgZSwgb25DaGFuZ2UsIHRyaWdnZXJWYWx1ZSk7XG4gICAgfVxuICAgIG9uQ29tcG9zaXRpb25FbmQgPT09IG51bGwgfHwgb25Db21wb3NpdGlvbkVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Db21wb3NpdGlvbkVuZChlKTtcbiAgfTtcbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgdmFyIHRyaWdnZXJWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIGlmICghY29tcG9zaXRpbmcgJiYgaGFzTWF4TGVuZ3RoKSB7XG4gICAgICAvLyAxLiDlpI3liLbnspjotLTotoXov4dtYXhsZW5ndGjnmoTmg4XlhrUgMi7mnKrotoXov4dtYXhsZW5ndGjnmoTmg4XlhrVcbiAgICAgIHZhciBpc0N1cnNvckluRW5kID0gZS50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPj0gbWF4TGVuZ3RoICsgMSB8fCBlLnRhcmdldC5zZWxlY3Rpb25TdGFydCA9PT0gdHJpZ2dlclZhbHVlLmxlbmd0aCB8fCAhZS50YXJnZXQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB0cmlnZ2VyVmFsdWUgPSBzZXRUcmlnZ2VyVmFsdWUoaXNDdXJzb3JJbkVuZCwgdmFsdWUsIHRyaWdnZXJWYWx1ZSwgbWF4TGVuZ3RoKTtcbiAgICB9XG4gICAgaGFuZGxlU2V0VmFsdWUodHJpZ2dlclZhbHVlKTtcbiAgICAoMCwgX0lucHV0LnJlc29sdmVPbkNoYW5nZSkoZS5jdXJyZW50VGFyZ2V0LCBlLCBvbkNoYW5nZSwgdHJpZ2dlclZhbHVlKTtcbiAgfTtcbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGUpIHtcbiAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICBvbkJsdXIgPT09IG51bGwgfHwgb25CbHVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJsdXIoZSk7XG4gIH07XG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGUpIHtcbiAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIG9uRm9jdXMgPT09IG51bGwgfHwgb25Gb2N1cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Gb2N1cyhlKTtcbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGb2N1c2VkKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gIW1lcmdlZERpc2FibGVkICYmIHByZXY7XG4gICAgfSk7XG4gIH0sIFttZXJnZWREaXNhYmxlZF0pO1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVzZXQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgaGFuZGxlUmVzZXQgPSBmdW5jdGlvbiBoYW5kbGVSZXNldChlKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgaGFuZGxlU2V0VmFsdWUoJycpO1xuICAgIChfYSA9IGlubmVyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgICgwLCBfSW5wdXQucmVzb2x2ZU9uQ2hhbmdlKSgoX2MgPSAoX2IgPSBpbm5lclJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVzaXphYmxlVGV4dEFyZWEpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50ZXh0QXJlYSwgZSwgb25DaGFuZ2UpO1xuICB9O1xuICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdpbnB1dCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB7XG4gICAgICByZXNpemFibGVUZXh0QXJlYTogKF9hID0gaW5uZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlc2l6YWJsZVRleHRBcmVhLFxuICAgICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKG9wdGlvbikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoMCwgX0lucHV0LnRyaWdnZXJGb2N1cykoKF9iID0gKF9hID0gaW5uZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlc2l6YWJsZVRleHRBcmVhKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudGV4dEFyZWEsIG9wdGlvbik7XG4gICAgICB9LFxuICAgICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gaW5uZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmJsdXIoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIHRleHRBcmVhID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjVGV4dGFyZWFbXCJkZWZhdWx0XCJdLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfb21pdFtcImRlZmF1bHRcIl0pKHByb3BzLCBbJ2FsbG93Q2xlYXInXSksIHtcbiAgICBkaXNhYmxlZDogbWVyZ2VkRGlzYWJsZWQsXG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKSgoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ib3JkZXJsZXNzXCIpLCAhYm9yZGVyZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBjbGFzc05hbWUsIGNsYXNzTmFtZSAmJiAhc2hvd0NvdW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zbVwiKSwgc2l6ZSA9PT0gJ3NtYWxsJyB8fCBjdXN0b21pemVTaXplID09PSAnc21hbGwnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1sZ1wiKSwgc2l6ZSA9PT0gJ2xhcmdlJyB8fCBjdXN0b21pemVTaXplID09PSAnbGFyZ2UnKSwgX2NsYXNzTmFtZXMpLCAoMCwgX3N0YXR1c1V0aWxzLmdldFN0YXR1c0NsYXNzTmFtZXMpKHByZWZpeENscywgbWVyZ2VkU3RhdHVzKSksXG4gICAgc3R5bGU6IHNob3dDb3VudCA/IHtcbiAgICAgIHJlc2l6ZTogc3R5bGUgPT09IG51bGwgfHwgc3R5bGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0eWxlLnJlc2l6ZVxuICAgIH0gOiBzdHlsZSxcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICBvbkNvbXBvc2l0aW9uU3RhcnQ6IG9uSW50ZXJuYWxDb21wb3NpdGlvblN0YXJ0LFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uQ29tcG9zaXRpb25FbmQ6IG9uSW50ZXJuYWxDb21wb3NpdGlvbkVuZCxcbiAgICByZWY6IGlubmVyUmVmXG4gIH0pKTtcbiAgdmFyIHZhbCA9ICgwLCBfSW5wdXQuZml4Q29udHJvbGxlZFZhbHVlKSh2YWx1ZSk7XG4gIGlmICghY29tcG9zaXRpbmcgJiYgaGFzTWF4TGVuZ3RoICYmIChwcm9wcy52YWx1ZSA9PT0gbnVsbCB8fCBwcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgIC8vIGZpeCAjMjc2MTIg5bCGdmFsdWXovazkuLrmlbDnu4Tov5vooYzmiKrlj5bvvIzop6PlhrMgJ/CfmIInLmxlbmd0aCA9PT0gMiDnrYllbW9qaeihqOaDheWvvOiHtOeahOaIquWPluS5seeggeeahOmXrumimFxuICAgIHZhbCA9IGZpeEVtb2ppTGVuZ3RoKHZhbCwgbWF4TGVuZ3RoKTtcbiAgfVxuICAvLyBUZXh0QXJlYVxuICB2YXIgdGV4dGFyZWFOb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0NsZWFyYWJsZUxhYmVsZWRJbnB1dFtcImRlZmF1bHRcIl0sICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgZGlzYWJsZWQ6IG1lcmdlZERpc2FibGVkLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWRcbiAgfSwgcHJvcHMsIHtcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICBpbnB1dFR5cGU6IFwidGV4dFwiLFxuICAgIHZhbHVlOiB2YWwsXG4gICAgZWxlbWVudDogdGV4dEFyZWEsXG4gICAgaGFuZGxlUmVzZXQ6IGhhbmRsZVJlc2V0LFxuICAgIHJlZjogY2xlYXJhYmxlSW5wdXRSZWYsXG4gICAgYm9yZGVyZWQ6IGJvcmRlcmVkLFxuICAgIHN0YXR1czogY3VzdG9tU3RhdHVzLFxuICAgIHN0eWxlOiBzaG93Q291bnQgPyB1bmRlZmluZWQgOiBzdHlsZVxuICB9KSk7XG4gIC8vIE9ubHkgc2hvdyB0ZXh0IGFyZWEgd3JhcHBlciB3aGVuIG5lZWRlZFxuICBpZiAoc2hvd0NvdW50IHx8IGhhc0ZlZWRiYWNrKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzMjtcbiAgICB2YXIgdmFsdWVMZW5ndGggPSAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZhbCkubGVuZ3RoO1xuICAgIHZhciBkYXRhQ291bnQgPSAnJztcbiAgICBpZiAoKDAsIF90eXBlb2YyW1wiZGVmYXVsdFwiXSkoc2hvd0NvdW50KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGRhdGFDb3VudCA9IHNob3dDb3VudC5mb3JtYXR0ZXIoe1xuICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICBjb3VudDogdmFsdWVMZW5ndGgsXG4gICAgICAgIG1heExlbmd0aDogbWF4TGVuZ3RoXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YUNvdW50ID0gXCJcIi5jb25jYXQodmFsdWVMZW5ndGgpLmNvbmNhdChoYXNNYXhMZW5ndGggPyBcIiAvIFwiLmNvbmNhdChtYXhMZW5ndGgpIDogJycpO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgaGlkZGVuOiBoaWRkZW4sXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWFcIiksIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWEtcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWEtc2hvdy1jb3VudFwiKSwgc2hvd0NvdW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWEtaW4tZm9ybS1pdGVtXCIpLCBpc0Zvcm1JdGVtSW5wdXQpLCBfY2xhc3NOYW1lczIpLCAoMCwgX3N0YXR1c1V0aWxzLmdldFN0YXR1c0NsYXNzTmFtZXMpKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGV4dGFyZWFcIiksIG1lcmdlZFN0YXR1cywgaGFzRmVlZGJhY2spLCBjbGFzc05hbWUpLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgXCJkYXRhLWNvdW50XCI6IGRhdGFDb3VudFxuICAgIH0sIHRleHRhcmVhTm9kZSwgaGFzRmVlZGJhY2sgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi10ZXh0YXJlYS1zdWZmaXhcIilcbiAgICB9LCBmZWVkYmFja0ljb24pKTtcbiAgfVxuICByZXR1cm4gdGV4dGFyZWFOb2RlO1xufSk7XG52YXIgX2RlZmF1bHQgPSBUZXh0QXJlYTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIilbXCJkZWZhdWx0XCJdO1xudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcbnZhciBfY3JlYXRlU3VwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVTdXBlclwiKSk7XG52YXIgX0Nsb3NlQ2lyY2xlRmlsbGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGFudC1kZXNpZ24vaWNvbnMvQ2xvc2VDaXJjbGVGaWxsZWRcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4uL2Zvcm0vY29udGV4dFwiKTtcbnZhciBfcmVhY3ROb2RlID0gcmVxdWlyZShcIi4uL191dGlsL3JlYWN0Tm9kZVwiKTtcbnZhciBfc3RhdHVzVXRpbHMgPSByZXF1aXJlKFwiLi4vX3V0aWwvc3RhdHVzVXRpbHNcIik7XG52YXIgX3R5cGUgPSByZXF1aXJlKFwiLi4vX3V0aWwvdHlwZVwiKTtcbnZhciBDbGVhcmFibGVJbnB1dFR5cGUgPSAoMCwgX3R5cGUudHVwbGUpKCd0ZXh0JywgJ2lucHV0Jyk7XG5mdW5jdGlvbiBoYXNBZGRvbihwcm9wcykge1xuICByZXR1cm4gISEocHJvcHMuYWRkb25CZWZvcmUgfHwgcHJvcHMuYWRkb25BZnRlcik7XG59XG52YXIgQ2xlYXJhYmxlTGFiZWxlZElucHV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyW1wiZGVmYXVsdFwiXSkoQ2xlYXJhYmxlTGFiZWxlZElucHV0LCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9ICgwLCBfY3JlYXRlU3VwZXIyW1wiZGVmYXVsdFwiXSkoQ2xlYXJhYmxlTGFiZWxlZElucHV0KTtcbiAgZnVuY3Rpb24gQ2xlYXJhYmxlTGFiZWxlZElucHV0KCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syW1wiZGVmYXVsdFwiXSkodGhpcywgQ2xlYXJhYmxlTGFiZWxlZElucHV0KTtcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgKDAsIF9jcmVhdGVDbGFzczJbXCJkZWZhdWx0XCJdKShDbGVhcmFibGVMYWJlbGVkSW5wdXQsIFt7XG4gICAga2V5OiBcInJlbmRlckNsZWFySWNvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDbGVhckljb24ocHJlZml4Q2xzKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICByZWFkT25seSA9IF90aGlzJHByb3BzLnJlYWRPbmx5LFxuICAgICAgICBoYW5kbGVSZXNldCA9IF90aGlzJHByb3BzLmhhbmRsZVJlc2V0LFxuICAgICAgICBzdWZmaXggPSBfdGhpcyRwcm9wcy5zdWZmaXg7XG4gICAgICB2YXIgbmVlZENsZWFyID0gIWRpc2FibGVkICYmICFyZWFkT25seSAmJiB2YWx1ZTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsZWFyLWljb25cIik7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQ2lyY2xlRmlsbGVkW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBvbkNsaWNrOiBoYW5kbGVSZXNldCxcbiAgICAgICAgLy8gRG8gbm90IHRyaWdnZXIgb25CbHVyIHdoZW4gY2xlYXIgaW5wdXRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMzEyMDBcbiAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiLWhpZGRlblwiKSwgIW5lZWRDbGVhciksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCItaGFzLXN1ZmZpeFwiKSwgISFzdWZmaXgpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSksXG4gICAgICAgIHJvbGU6IFwiYnV0dG9uXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJUZXh0QXJlYVdpdGhDbGVhckljb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVGV4dEFyZWFXaXRoQ2xlYXJJY29uKHByZWZpeENscywgZWxlbWVudCwgc3RhdHVzQ29udGV4dCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzMjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzMi52YWx1ZSxcbiAgICAgICAgYWxsb3dDbGVhciA9IF90aGlzJHByb3BzMi5hbGxvd0NsZWFyLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICBmb2N1c2VkID0gX3RoaXMkcHJvcHMyLmZvY3VzZWQsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wczIuZGlyZWN0aW9uLFxuICAgICAgICBib3JkZXJlZCA9IF90aGlzJHByb3BzMi5ib3JkZXJlZCxcbiAgICAgICAgaGlkZGVuID0gX3RoaXMkcHJvcHMyLmhpZGRlbixcbiAgICAgICAgY3VzdG9tU3RhdHVzID0gX3RoaXMkcHJvcHMyLnN0YXR1cztcbiAgICAgIHZhciBjb250ZXh0U3RhdHVzID0gc3RhdHVzQ29udGV4dC5zdGF0dXMsXG4gICAgICAgIGhhc0ZlZWRiYWNrID0gc3RhdHVzQ29udGV4dC5oYXNGZWVkYmFjaztcbiAgICAgIGlmICghYWxsb3dDbGVhcikge1xuICAgICAgICByZXR1cm4gKDAsIF9yZWFjdE5vZGUuY2xvbmVFbGVtZW50KShlbGVtZW50LCB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIGFmZml4V3JhcHBlckNscyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlclwiKSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyLXRleHRhcmVhLXdpdGgtY2xlYXItYnRuXCIpLCAoMCwgX3N0YXR1c1V0aWxzLmdldFN0YXR1c0NsYXNzTmFtZXMpKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWZmaXgtd3JhcHBlclwiKSwgKDAsIF9zdGF0dXNVdGlscy5nZXRNZXJnZWRTdGF0dXMpKGNvbnRleHRTdGF0dXMsIGN1c3RvbVN0YXR1cyksIGhhc0ZlZWRiYWNrKSwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyLWZvY3VzZWRcIiksIGZvY3VzZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hZmZpeC13cmFwcGVyLXJ0bFwiKSwgZGlyZWN0aW9uID09PSAncnRsJyksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFmZml4LXdyYXBwZXItYm9yZGVybGVzc1wiKSwgIWJvcmRlcmVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KGNsYXNzTmFtZSksICFoYXNBZGRvbih0aGlzLnByb3BzKSAmJiBjbGFzc05hbWUpLCBfY2xhc3NOYW1lczIpKTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGFmZml4V3JhcHBlckNscyxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBoaWRkZW46IGhpZGRlblxuICAgICAgfSwgKDAsIF9yZWFjdE5vZGUuY2xvbmVFbGVtZW50KShlbGVtZW50LCB7XG4gICAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pLCB0aGlzLnJlbmRlckNsZWFySWNvbihwcmVmaXhDbHMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbnRleHQuRm9ybUl0ZW1JbnB1dENvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChzdGF0dXNDb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczMucHJlZml4Q2xzLFxuICAgICAgICAgIGlucHV0VHlwZSA9IF90aGlzJHByb3BzMy5pbnB1dFR5cGUsXG4gICAgICAgICAgZWxlbWVudCA9IF90aGlzJHByb3BzMy5lbGVtZW50O1xuICAgICAgICBpZiAoaW5wdXRUeXBlID09PSBDbGVhcmFibGVJbnB1dFR5cGVbMF0pIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyVGV4dEFyZWFXaXRoQ2xlYXJJY29uKHByZWZpeENscywgZWxlbWVudCwgc3RhdHVzQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ2xlYXJhYmxlTGFiZWxlZElucHV0O1xufShSZWFjdC5Db21wb25lbnQpO1xudmFyIF9kZWZhdWx0ID0gQ2xlYXJhYmxlTGFiZWxlZElucHV0O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9